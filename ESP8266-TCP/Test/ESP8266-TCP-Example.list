
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021de0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005cc4  08021fc0  08021fc0  00031fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027c84  08027c84  00040344  2**0
                  CONTENTS
  4 .ARM          00000008  08027c84  08027c84  00037c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027c8c  08027c8c  00040344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08027c8c  08027c8c  00037c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08027c9c  08027c9c  00037c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000344  20000000  08027cac  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  20000344  08027ff0  00040344  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e9c  08027ff0  00040e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040344  2**0
                  CONTENTS, READONLY
 12 .debug_info   000689ca  00000000  00000000  00040374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c0f7  00000000  00000000  000a8d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000042c8  00000000  00000000  000b4e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000040a8  00000000  00000000  000b9100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d83d  00000000  00000000  000bd1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cb9d  00000000  00000000  000ea9e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111954  00000000  00000000  00117582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228ed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014314  00000000  00000000  00228f2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000344 	.word	0x20000344
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021fa0 	.word	0x08021fa0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000348 	.word	0x20000348
 800021c:	08021fa0 	.word	0x08021fa0

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000410 	.word	0x20000410

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01d fc22 	bl	801e5b4 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01d fb7a 	bl	801e5b4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000364 	.word	0x20000364
 8000ef4:	20000ea0 	.word	0x20000ea0

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01d ff51 	bl	801edf0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f003 f883 	bl	8004058 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8000f60:	08027cac 	.word	0x08027cac
  ldr r2, =_sbss
 8000f64:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8000f68:	20000e9c 	.word	0x20000e9c

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000e88 	.word	0x20000e88
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000e88 	.word	0x20000e88

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	0802515c 	.word	0x0802515c
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0802516c 	.word	0x0802516c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	0802516c 	.word	0x0802516c

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08025174 	.word	0x08025174
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0802518c 	.word	0x0802518c
 8003904:	08025194 	.word	0x08025194

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 fa9e 	bl	8003e7c <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000368 	.word	0x20000368
 800395c:	200004a0 	.word	0x200004a0

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000368 	.word	0x20000368

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 fab0 	bl	8003efe <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000368 	.word	0x20000368
 80039ac:	200004a0 	.word	0x200004a0

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb27 	bl	8004012 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	200004a0 	.word	0x200004a0

080039d4 <Wait_Response>:


Status Wait_Response(char* response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	static uint32_t time = 0;
	static uint8_t firstCall = 0;

	if(!firstCall)
 80039de:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <Wait_Response+0x74>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d108      	bne.n	80039f8 <Wait_Response+0x24>
	{
		time = ESP8266.getTick();
 80039e6:	4b19      	ldr	r3, [pc, #100]	; (8003a4c <Wait_Response+0x78>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	4798      	blx	r3
 80039ec:	4603      	mov	r3, r0
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <Wait_Response+0x7c>)
 80039f0:	6013      	str	r3, [r2, #0]
		firstCall = 1;
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <Wait_Response+0x74>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	701a      	strb	r2, [r3, #0]
	}

	if(ringBuffer_lookFor(rx_buffer, (uint8_t*)response))
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <Wait_Response+0x80>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fb07 	bl	8004012 <ringBuffer_lookFor>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d007      	beq.n	8003a1a <Wait_Response+0x46>
	{
		firstCall = 0;
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <Wait_Response+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a10:	4b0f      	ldr	r3, [pc, #60]	; (8003a50 <Wait_Response+0x7c>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]
		return FOUND;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e012      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else if(ESP8266.getTick() - time >= timeout)
 8003a1a:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <Wait_Response+0x78>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	4798      	blx	r3
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <Wait_Response+0x7c>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d807      	bhi.n	8003a3e <Wait_Response+0x6a>
	{
		firstCall = 0;
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <Wait_Response+0x74>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		time = 0;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <Wait_Response+0x7c>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
		return TIMEOUT_ERROR;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	e000      	b.n	8003a40 <Wait_Response+0x6c>
	}
	else
	{
		return IDLE;
 8003a3e:	2305      	movs	r3, #5
	}

}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20000374 	.word	0x20000374
 8003a4c:	20000368 	.word	0x20000368
 8003a50:	20000378 	.word	0x20000378
 8003a54:	200004a0 	.word	0x200004a0

08003a58 <Connect_Wifi>:

Status Connect_Wifi(char* ssid, char* password)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b09e      	sub	sp, #120	; 0x78
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	static Status response_state = IDLE;

	static uint8_t commandCount = 0,firstCall = 1;


	switch(commandCount)
 8003a62:	4b9a      	ldr	r3, [pc, #616]	; (8003ccc <Connect_Wifi+0x274>)
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	f000 80c4 	beq.w	8003bf4 <Connect_Wifi+0x19c>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f300 8127 	bgt.w	8003cc0 <Connect_Wifi+0x268>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <Connect_Wifi+0x24>
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d05e      	beq.n	8003b38 <Connect_Wifi+0xe0>
 8003a7a:	e121      	b.n	8003cc0 <Connect_Wifi+0x268>
	{
	case 0:
		if(firstCall)
 8003a7c:	4b94      	ldr	r3, [pc, #592]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <Connect_Wifi+0x38>
		{
			Send_AT_Command(AT_CWMODE_STATION);  // sending AT+CWMODE=1
 8003a84:	4893      	ldr	r0, [pc, #588]	; (8003cd4 <Connect_Wifi+0x27c>)
 8003a86:	f7ff ff6b 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003a8a:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <Connect_Wifi+0x278>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003a90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a94:	4890      	ldr	r0, [pc, #576]	; (8003cd8 <Connect_Wifi+0x280>)
 8003a96:	f7ff ff9d 	bl	80039d4 <Wait_Response>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4b8f      	ldr	r3, [pc, #572]	; (8003cdc <Connect_Wifi+0x284>)
 8003aa0:	701a      	strb	r2, [r3, #0]

		if(Read_Response(AT_RESPONSE_ERROR))		// if there is an ERROR message in the buffer return CONNECTION_ERROR
 8003aa2:	488f      	ldr	r0, [pc, #572]	; (8003ce0 <Connect_Wifi+0x288>)
 8003aa4:	f7ff ff84 	bl	80039b0 <Read_Response>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <Connect_Wifi+0x70>
		{
			firstCall = 1;
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003ab4:	4b85      	ldr	r3, [pc, #532]	; (8003ccc <Connect_Wifi+0x274>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003aba:	4b8a      	ldr	r3, [pc, #552]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fa71 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	e0fc      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003ac8:	4b84      	ldr	r3, [pc, #528]	; (8003cdc <Connect_Wifi+0x284>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d101      	bne.n	8003ad4 <Connect_Wifi+0x7c>
		{
			return IDLE;
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	e0f6      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003ad4:	4b81      	ldr	r3, [pc, #516]	; (8003cdc <Connect_Wifi+0x284>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10f      	bne.n	8003afc <Connect_Wifi+0xa4>
		{
			commandCount += 1;
 8003adc:	4b7b      	ldr	r3, [pc, #492]	; (8003ccc <Connect_Wifi+0x274>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b79      	ldr	r3, [pc, #484]	; (8003ccc <Connect_Wifi+0x274>)
 8003ae6:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 fa5a 	bl	8003fa6 <ringBuffer_flush>
			firstCall = 1;
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <Connect_Wifi+0x278>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e0e2      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003afc:	4b77      	ldr	r3, [pc, #476]	; (8003cdc <Connect_Wifi+0x284>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d10c      	bne.n	8003b1e <Connect_Wifi+0xc6>
		{
			firstCall = 1;
 8003b04:	4b72      	ldr	r3, [pc, #456]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa49 	bl	8003fa6 <ringBuffer_flush>
			commandCount = 0;
 8003b14:	4b6d      	ldr	r3, [pc, #436]	; (8003ccc <Connect_Wifi+0x274>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
			return TIMEOUT_ERROR;
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e0d1      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003b1e:	4b6c      	ldr	r3, [pc, #432]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b24:	4b69      	ldr	r3, [pc, #420]	; (8003ccc <Connect_Wifi+0x274>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b2a:	4b6e      	ldr	r3, [pc, #440]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fa39 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b34:	2304      	movs	r3, #4
 8003b36:	e0c4      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}


		break;
	case 1:
		if(firstCall)
 8003b38:	4b65      	ldr	r3, [pc, #404]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <Connect_Wifi+0xf4>
		{
			Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003b40:	4869      	ldr	r0, [pc, #420]	; (8003ce8 <Connect_Wifi+0x290>)
 8003b42:	f7ff ff0d 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003b46:	4b62      	ldr	r3, [pc, #392]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003b4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003b50:	4861      	ldr	r0, [pc, #388]	; (8003cd8 <Connect_Wifi+0x280>)
 8003b52:	f7ff ff3f 	bl	80039d4 <Wait_Response>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b60      	ldr	r3, [pc, #384]	; (8003cdc <Connect_Wifi+0x284>)
 8003b5c:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003b5e:	4860      	ldr	r0, [pc, #384]	; (8003ce0 <Connect_Wifi+0x288>)
 8003b60:	f7ff ff26 	bl	80039b0 <Read_Response>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00c      	beq.n	8003b84 <Connect_Wifi+0x12c>
		{
			firstCall = 1;
 8003b6a:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <Connect_Wifi+0x278>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <Connect_Wifi+0x274>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa13 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003b80:	2304      	movs	r3, #4
 8003b82:	e09e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003b84:	4b55      	ldr	r3, [pc, #340]	; (8003cdc <Connect_Wifi+0x284>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d101      	bne.n	8003b90 <Connect_Wifi+0x138>
		{
			return IDLE;
 8003b8c:	2305      	movs	r3, #5
 8003b8e:	e098      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003b90:	4b52      	ldr	r3, [pc, #328]	; (8003cdc <Connect_Wifi+0x284>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10f      	bne.n	8003bb8 <Connect_Wifi+0x160>
		{
			commandCount += 1;
 8003b98:	4b4c      	ldr	r3, [pc, #304]	; (8003ccc <Connect_Wifi+0x274>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	4b4a      	ldr	r3, [pc, #296]	; (8003ccc <Connect_Wifi+0x274>)
 8003ba2:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003ba4:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 f9fc 	bl	8003fa6 <ringBuffer_flush>
			firstCall = 1;
 8003bae:	4b48      	ldr	r3, [pc, #288]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
			return FOUND;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	e084      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003bb8:	4b48      	ldr	r3, [pc, #288]	; (8003cdc <Connect_Wifi+0x284>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d10c      	bne.n	8003bda <Connect_Wifi+0x182>
		{
			firstCall = 1;
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003bc6:	4b41      	ldr	r3, [pc, #260]	; (8003ccc <Connect_Wifi+0x274>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 f9e8 	bl	8003fa6 <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	e073      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003be0:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <Connect_Wifi+0x274>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003be6:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f9db 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	e066      	b.n	8003cc2 <Connect_Wifi+0x26a>

		break;

	case 2:
	{
		if(firstCall)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <Connect_Wifi+0x278>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d010      	beq.n	8003c1e <Connect_Wifi+0x1c6>
		{
			char tx_buffer[100];

			sprintf(tx_buffer,"%s\"%s\",\"%s\"\r\n",AT_CWJAP,ssid,password); 		// AT+CWJAP="<SSID>","<password>"
 8003bfc:	f107 000c 	add.w	r0, r7, #12
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a39      	ldr	r2, [pc, #228]	; (8003cec <Connect_Wifi+0x294>)
 8003c08:	4939      	ldr	r1, [pc, #228]	; (8003cf0 <Connect_Wifi+0x298>)
 8003c0a:	f01b fc65 	bl	801f4d8 <siprintf>

			Send_AT_Command(tx_buffer);  // sending AT+CWJAP="<SSID>","<password>"
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fea4 	bl	8003960 <Send_AT_Command>
			firstCall = 0;
 8003c18:	4b2d      	ldr	r3, [pc, #180]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
		}
		response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003c1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c22:	482d      	ldr	r0, [pc, #180]	; (8003cd8 <Connect_Wifi+0x280>)
 8003c24:	f7ff fed6 	bl	80039d4 <Wait_Response>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <Connect_Wifi+0x284>)
 8003c2e:	701a      	strb	r2, [r3, #0]
		if(Read_Response(AT_RESPONSE_ERROR))
 8003c30:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <Connect_Wifi+0x288>)
 8003c32:	f7ff febd 	bl	80039b0 <Read_Response>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00c      	beq.n	8003c56 <Connect_Wifi+0x1fe>
		{
			firstCall = 1;
 8003c3c:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c42:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <Connect_Wifi+0x274>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c48:	4b26      	ldr	r3, [pc, #152]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f000 f9aa 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003c52:	2304      	movs	r3, #4
 8003c54:	e035      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		if(response_state == IDLE)
 8003c56:	4b21      	ldr	r3, [pc, #132]	; (8003cdc <Connect_Wifi+0x284>)
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b05      	cmp	r3, #5
 8003c5c:	d101      	bne.n	8003c62 <Connect_Wifi+0x20a>
		{

			return IDLE;
 8003c5e:	2305      	movs	r3, #5
 8003c60:	e02f      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == FOUND)
 8003c62:	4b1e      	ldr	r3, [pc, #120]	; (8003cdc <Connect_Wifi+0x284>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10c      	bne.n	8003c84 <Connect_Wifi+0x22c>
		{
			commandCount = 0;
 8003c6a:	4b18      	ldr	r3, [pc, #96]	; (8003ccc <Connect_Wifi+0x274>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 f996 	bl	8003fa6 <ringBuffer_flush>
			firstCall = 1;
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	701a      	strb	r2, [r3, #0]
			return CONNECTION_OK;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e01e      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else if(response_state == TIMEOUT_ERROR)
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <Connect_Wifi+0x284>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d10c      	bne.n	8003ca6 <Connect_Wifi+0x24e>
		{
			firstCall = 1;
 8003c8c:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <Connect_Wifi+0x278>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <Connect_Wifi+0x274>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003c98:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 f982 	bl	8003fa6 <ringBuffer_flush>
			return TIMEOUT_ERROR;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e00d      	b.n	8003cc2 <Connect_Wifi+0x26a>
		}
		else
		{
			firstCall = 1;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <Connect_Wifi+0x278>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
			commandCount = 0;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <Connect_Wifi+0x274>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]
			ringBuffer_flush(rx_buffer);
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <Connect_Wifi+0x28c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f000 f975 	bl	8003fa6 <ringBuffer_flush>
			return CONNECTION_ERROR;
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e000      	b.n	8003cc2 <Connect_Wifi+0x26a>


		break;
	}

	default: return CONNECTION_ERROR;
 8003cc0:	2304      	movs	r3, #4
	}
	return IDLE;
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3770      	adds	r7, #112	; 0x70
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	2000037c 	.word	0x2000037c
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	08021fc0 	.word	0x08021fc0
 8003cd8:	08021fd0 	.word	0x08021fd0
 8003cdc:	20000011 	.word	0x20000011
 8003ce0:	08021fd4 	.word	0x08021fd4
 8003ce4:	200004a0 	.word	0x200004a0
 8003ce8:	08021fdc 	.word	0x08021fdc
 8003cec:	08021fe8 	.word	0x08021fe8
 8003cf0:	08021ff4 	.word	0x08021ff4

08003cf4 <Disconnect_Wifi>:

Status Disconnect_Wifi(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
	static Status response_state = IDLE;
	static uint8_t firstCall = 1;

	if(firstCall)
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <Disconnect_Wifi+0x18>
	{
		Send_AT_Command(AT_CWQAP);  // sending AT+CWQAP
 8003d00:	4819      	ldr	r0, [pc, #100]	; (8003d68 <Disconnect_Wifi+0x74>)
 8003d02:	f7ff fe2d 	bl	8003960 <Send_AT_Command>
		firstCall = 0;
 8003d06:	4b17      	ldr	r3, [pc, #92]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
	}

	response_state = Wait_Response(AT_RESPONSE_OK, 1000);
 8003d0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003d10:	4816      	ldr	r0, [pc, #88]	; (8003d6c <Disconnect_Wifi+0x78>)
 8003d12:	f7ff fe5f 	bl	80039d4 <Wait_Response>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d1c:	701a      	strb	r2, [r3, #0]

	if(Read_Response(AT_RESPONSE_ERROR))
 8003d1e:	4815      	ldr	r0, [pc, #84]	; (8003d74 <Disconnect_Wifi+0x80>)
 8003d20:	f7ff fe46 	bl	80039b0 <Read_Response>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d009      	beq.n	8003d3e <Disconnect_Wifi+0x4a>
	{
		firstCall = 1;
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	701a      	strb	r2, [r3, #0]
		ringBuffer_flush(rx_buffer);
 8003d30:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <Disconnect_Wifi+0x84>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f936 	bl	8003fa6 <ringBuffer_flush>
		return CONNECTION_ERROR;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	e00f      	b.n	8003d5e <Disconnect_Wifi+0x6a>
	}
	if(response_state == IDLE)
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b05      	cmp	r3, #5
 8003d44:	d101      	bne.n	8003d4a <Disconnect_Wifi+0x56>
		return IDLE;
 8003d46:	2305      	movs	r3, #5
 8003d48:	e009      	b.n	8003d5e <Disconnect_Wifi+0x6a>
	else
	{
		firstCall = 1;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	; (8003d64 <Disconnect_Wifi+0x70>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	701a      	strb	r2, [r3, #0]
		ringBuffer_flush(rx_buffer);
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <Disconnect_Wifi+0x84>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 f926 	bl	8003fa6 <ringBuffer_flush>
		return response_state;
 8003d5a:	4b05      	ldr	r3, [pc, #20]	; (8003d70 <Disconnect_Wifi+0x7c>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
	}
	return response_state;

}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000012 	.word	0x20000012
 8003d68:	08021fdc 	.word	0x08021fdc
 8003d6c:	08021fd0 	.word	0x08021fd0
 8003d70:	20000013 	.word	0x20000013
 8003d74:	08021fd4 	.word	0x08021fd4
 8003d78:	200004a0 	.word	0x200004a0

08003d7c <Command_Process>:

Status Command_Process(char **commandArray,uint8_t numberOfCommands)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	70fb      	strb	r3, [r7, #3]
	static uint8_t commandFlag  = 1, currentCommand = 0;
	Status response;

	if(!numberOfCommands || currentCommand >= numberOfCommands)
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <Command_Process+0x1c>
 8003d8e:	4b36      	ldr	r3, [pc, #216]	; (8003e68 <Command_Process+0xec>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d806      	bhi.n	8003da6 <Command_Process+0x2a>
	{
		ringBuffer_flush(rx_buffer);
 8003d98:	4b34      	ldr	r3, [pc, #208]	; (8003e6c <Command_Process+0xf0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 f902 	bl	8003fa6 <ringBuffer_flush>
		return CONNECTION_ERROR;
 8003da2:	2304      	movs	r3, #4
 8003da4:	e05c      	b.n	8003e60 <Command_Process+0xe4>
	}
	else
	{
		if(commandFlag)
 8003da6:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <Command_Process+0xf4>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00b      	beq.n	8003dc6 <Command_Process+0x4a>
		{
			Send_AT_Command(commandArray[currentCommand]);
 8003dae:	4b2e      	ldr	r3, [pc, #184]	; (8003e68 <Command_Process+0xec>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fdd0 	bl	8003960 <Send_AT_Command>
			commandFlag = 0;
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <Command_Process+0xf4>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	701a      	strb	r2, [r3, #0]
		}
//		else
//		{
			response = Wait_Response("OK", 5000);
 8003dc6:	f241 3188 	movw	r1, #5000	; 0x1388
 8003dca:	482a      	ldr	r0, [pc, #168]	; (8003e74 <Command_Process+0xf8>)
 8003dcc:	f7ff fe02 	bl	80039d4 <Wait_Response>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

			if(Read_Response("ERROR"))
 8003dd4:	4828      	ldr	r0, [pc, #160]	; (8003e78 <Command_Process+0xfc>)
 8003dd6:	f7ff fdeb 	bl	80039b0 <Read_Response>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <Command_Process+0x7e>
			{
				commandFlag = 1;
 8003de0:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <Command_Process+0xf4>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003de6:	4b20      	ldr	r3, [pc, #128]	; (8003e68 <Command_Process+0xec>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	701a      	strb	r2, [r3, #0]
				ringBuffer_flush(rx_buffer);
 8003dec:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <Command_Process+0xf0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 f8d8 	bl	8003fa6 <ringBuffer_flush>
				return CONNECTION_ERROR;
 8003df6:	2304      	movs	r3, #4
 8003df8:	e032      	b.n	8003e60 <Command_Process+0xe4>
			}
			else if(response == IDLE)
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d101      	bne.n	8003e04 <Command_Process+0x88>
			{
				return response;
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
 8003e02:	e02d      	b.n	8003e60 <Command_Process+0xe4>
			}
			else if(response == FOUND)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d123      	bne.n	8003e52 <Command_Process+0xd6>
			{
				if(currentCommand == (numberOfCommands-1))
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <Command_Process+0xec>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	78fb      	ldrb	r3, [r7, #3]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d10c      	bne.n	8003e32 <Command_Process+0xb6>
				{
					commandFlag = 1;
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <Command_Process+0xf4>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
					currentCommand = 0;
 8003e1e:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <Command_Process+0xec>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <Command_Process+0xf0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f8bc 	bl	8003fa6 <ringBuffer_flush>
					return CONNECTION_OK;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e016      	b.n	8003e60 <Command_Process+0xe4>
				}
				else
				{
					commandFlag = 1;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <Command_Process+0xf4>)
 8003e34:	2201      	movs	r2, #1
 8003e36:	701a      	strb	r2, [r3, #0]
					currentCommand += 1;
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <Command_Process+0xec>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	b2da      	uxtb	r2, r3
 8003e40:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <Command_Process+0xec>)
 8003e42:	701a      	strb	r2, [r3, #0]
					ringBuffer_flush(rx_buffer);
 8003e44:	4b09      	ldr	r3, [pc, #36]	; (8003e6c <Command_Process+0xf0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f8ac 	bl	8003fa6 <ringBuffer_flush>
					return response;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	e006      	b.n	8003e60 <Command_Process+0xe4>
				}

			}
			else
			{
				commandFlag = 1;
 8003e52:	4b07      	ldr	r3, [pc, #28]	; (8003e70 <Command_Process+0xf4>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
				currentCommand = 0;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <Command_Process+0xec>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
				return response;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
			}
//		}
	}


}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	2000037d 	.word	0x2000037d
 8003e6c:	200004a0 	.word	0x200004a0
 8003e70:	20000014 	.word	0x20000014
 8003e74:	08021fd0 	.word	0x08021fd0
 8003e78:	08021fd4 	.word	0x08021fd4

08003e7c <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003e84:	2010      	movs	r0, #16
 8003e86:	f01b f955 	bl	801f134 <malloc>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	e017      	b.n	8003ec8 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003eaa:	2101      	movs	r1, #1
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f01a fb79 	bl	801e5a4 <calloc>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e000      	b.n	8003ec8 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00b      	beq.n	8003ef6 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d004      	beq.n	8003ef0 <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f01b f92a 	bl	801f144 <free>
		}
		free(buffer);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f01b f927 	bl	801f144 <free>
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	460b      	mov	r3, r1
 8003f08:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	3b01      	subs	r3, #1
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d00c      	beq.n	8003f32 <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4413      	add	r3, r2
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003f30:	e009      	b.n	8003f46 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d00d      	beq.n	8003f84 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	4413      	add	r3, r2
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	605a      	str	r2, [r3, #4]
		return data;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
 8003f82:	e00a      	b.n	8003f9a <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	605a      	str	r2, [r3, #4]
		return data;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b082      	sub	sp, #8
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68d8      	ldr	r0, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2100      	movs	r1, #0
 8003fba:	f01b f8d9 	bl	801f170 <memset>
	ringBuffer->head = ringBuffer->tail = 0;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	605a      	str	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e00a      	b.n	8003ffa <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	4413      	add	r3, r2
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	4619      	mov	r1, r3
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff ff85 	bl	8003efe <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	6838      	ldr	r0, [r7, #0]
 8003ffc:	f7fc f91e 	bl	800023c <strlen>
 8004000:	4602      	mov	r2, r0
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	429a      	cmp	r2, r3
 8004006:	d8ed      	bhi.n	8003fe4 <ringBuffer_pushArray+0x10>
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}

08004012 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b084      	sub	sp, #16
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	6839      	ldr	r1, [r7, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f01c f81a 	bl	802005c <strstr>
 8004028:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <ringBuffer_lookFor+0x22>
		return 1;
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8004034:	2300      	movs	r3, #0

}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
}
 800404a:	4618      	mov	r0, r3
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
	...

08004058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800405e:	f7fc ff86 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004062:	f000 f81d 	bl	80040a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004066:	f000 f951 	bl	800430c <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 800406a:	f000 f891 	bl	8004190 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 800406e:	f000 f8ed 	bl	800424c <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <main+0x44>)
 8004074:	463b      	mov	r3, r7
 8004076:	e892 0003 	ldmia.w	r2, {r0, r1}
 800407a:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 800407e:	463b      	mov	r3, r7
 8004080:	4619      	mov	r1, r3
 8004082:	2002      	movs	r0, #2
 8004084:	f003 fb04 	bl	8007690 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004088:	2120      	movs	r1, #32
 800408a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800408e:	f7fd fb6b 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8004092:	2064      	movs	r0, #100	; 0x64
 8004094:	f7fc ffdc 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004098:	e7f6      	b.n	8004088 <main+0x30>
 800409a:	bf00      	nop
 800409c:	0802200c 	.word	0x0802200c

080040a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b0a8      	sub	sp, #160	; 0xa0
 80040a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040a6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040aa:	2238      	movs	r2, #56	; 0x38
 80040ac:	2100      	movs	r1, #0
 80040ae:	4618      	mov	r0, r3
 80040b0:	f01b f85e 	bl	801f170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80040c4:	463b      	mov	r3, r7
 80040c6:	2254      	movs	r2, #84	; 0x54
 80040c8:	2100      	movs	r1, #0
 80040ca:	4618      	mov	r0, r3
 80040cc:	f01b f850 	bl	801f170 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80040d0:	2000      	movs	r0, #0
 80040d2:	f7fd fb87 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80040d6:	2302      	movs	r3, #2
 80040d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80040da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80040e0:	2340      	movs	r3, #64	; 0x40
 80040e2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80040e4:	2302      	movs	r3, #2
 80040e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80040ea:	2302      	movs	r3, #2
 80040ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80040f0:	2304      	movs	r3, #4
 80040f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80040f6:	2355      	movs	r3, #85	; 0x55
 80040f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80040fc:	2302      	movs	r3, #2
 80040fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004102:	2302      	movs	r3, #2
 8004104:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004108:	2302      	movs	r3, #2
 800410a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800410e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fc1a 	bl	800194c <HAL_RCC_OscConfig>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	bf14      	ite	ne
 800411e:	2301      	movne	r3, #1
 8004120:	2300      	moveq	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8004128:	f000 f960 	bl	80043ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800412c:	230f      	movs	r3, #15
 800412e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004130:	2303      	movs	r3, #3
 8004132:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004134:	2300      	movs	r3, #0
 8004136:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004138:	2300      	movs	r3, #0
 800413a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800413c:	2300      	movs	r3, #0
 800413e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004140:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004144:	2104      	movs	r1, #4
 8004146:	4618      	mov	r0, r3
 8004148:	f7fd ff18 	bl	8001f7c <HAL_RCC_ClockConfig>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	bf14      	ite	ne
 8004152:	2301      	movne	r3, #1
 8004154:	2300      	moveq	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800415c:	f000 f946 	bl	80043ec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8004160:	2321      	movs	r3, #33	; 0x21
 8004162:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004164:	2300      	movs	r3, #0
 8004166:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004168:	2300      	movs	r3, #0
 800416a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800416c:	463b      	mov	r3, r7
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe f920 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8004184:	f000 f932 	bl	80043ec <Error_Handler>
  }
}
 8004188:	bf00      	nop
 800418a:	37a0      	adds	r7, #160	; 0xa0
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004196:	4a2c      	ldr	r2, [pc, #176]	; (8004248 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8004198:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800419a:	4b2a      	ldr	r3, [pc, #168]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800419c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041a0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041a2:	4b28      	ldr	r3, [pc, #160]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80041a8:	4b26      	ldr	r3, [pc, #152]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80041b4:	4b23      	ldr	r3, [pc, #140]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041b6:	220c      	movs	r2, #12
 80041b8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041ba:	4b22      	ldr	r3, [pc, #136]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041bc:	2200      	movs	r2, #0
 80041be:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041c0:	4b20      	ldr	r3, [pc, #128]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80041d2:	481c      	ldr	r0, [pc, #112]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041d4:	f7fe fb3a 	bl	800284c <HAL_UART_Init>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	bf14      	ite	ne
 80041de:	2301      	movne	r3, #1
 80041e0:	2300      	moveq	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80041e8:	f000 f900 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80041ec:	2100      	movs	r1, #0
 80041ee:	4815      	ldr	r0, [pc, #84]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80041f0:	f7ff fac0 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8004204:	f000 f8f2 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004208:	2100      	movs	r1, #0
 800420a:	480e      	ldr	r0, [pc, #56]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 800420c:	f7ff faf0 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	bf14      	ite	ne
 8004216:	2301      	movne	r3, #1
 8004218:	2300      	moveq	r3, #0
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8004220:	f000 f8e4 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004224:	4807      	ldr	r0, [pc, #28]	; (8004244 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8004226:	f7ff fa6c 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	bf14      	ite	ne
 8004230:	2301      	movne	r3, #1
 8004232:	2300      	moveq	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 800423a:	f000 f8d7 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800423e:	bf00      	nop
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20000380 	.word	0x20000380
 8004248:	40008000 	.word	0x40008000

0800424c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004250:	4b2c      	ldr	r3, [pc, #176]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004252:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8004254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004256:	4b2b      	ldr	r3, [pc, #172]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800425c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800425e:	4b29      	ldr	r3, [pc, #164]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004266:	2200      	movs	r2, #0
 8004268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800426a:	4b26      	ldr	r3, [pc, #152]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800426c:	2200      	movs	r2, #0
 800426e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004270:	4b24      	ldr	r3, [pc, #144]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004272:	220c      	movs	r2, #12
 8004274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004276:	4b23      	ldr	r3, [pc, #140]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004278:	2200      	movs	r2, #0
 800427a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800427e:	2200      	movs	r2, #0
 8004280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004282:	4b20      	ldr	r3, [pc, #128]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004284:	2200      	movs	r2, #0
 8004286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800428a:	2200      	movs	r2, #0
 800428c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800428e:	4b1d      	ldr	r3, [pc, #116]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004290:	2200      	movs	r2, #0
 8004292:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004294:	481b      	ldr	r0, [pc, #108]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8004296:	f7fe fad9 	bl	800284c <HAL_UART_Init>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80042aa:	f000 f89f 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ae:	2100      	movs	r1, #0
 80042b0:	4814      	ldr	r0, [pc, #80]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042b2:	f7ff fa5f 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 80042c6:	f000 f891 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80042ca:	2100      	movs	r1, #0
 80042cc:	480d      	ldr	r0, [pc, #52]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042ce:	f7ff fa8f 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	bf14      	ite	ne
 80042d8:	2301      	movne	r3, #1
 80042da:	2300      	moveq	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 80042e2:	f000 f883 	bl	80043ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80042e6:	4807      	ldr	r0, [pc, #28]	; (8004304 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80042e8:	f7ff fa0b 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	bf14      	ite	ne
 80042f2:	2301      	movne	r3, #1
 80042f4:	2300      	moveq	r3, #0
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 80042fc:	f000 f876 	bl	80043ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004300:	bf00      	nop
 8004302:	bd80      	pop	{r7, pc}
 8004304:	20000410 	.word	0x20000410
 8004308:	40013800 	.word	0x40013800

0800430c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	60da      	str	r2, [r3, #12]
 8004320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004322:	4b2f      	ldr	r3, [pc, #188]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004326:	4a2e      	ldr	r2, [pc, #184]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004328:	f043 0304 	orr.w	r3, r3, #4
 800432c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800432e:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800433a:	4b29      	ldr	r3, [pc, #164]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	4a28      	ldr	r2, [pc, #160]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004340:	f043 0320 	orr.w	r3, r3, #32
 8004344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	4b23      	ldr	r3, [pc, #140]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004356:	4a22      	ldr	r2, [pc, #136]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	60bb      	str	r3, [r7, #8]
 8004368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800436a:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 800436c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004370:	f043 0302 	orr.w	r3, r3, #2
 8004374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004376:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <_ZL12MX_GPIO_Initv+0xd4>)
 8004378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004382:	2200      	movs	r2, #0
 8004384:	2120      	movs	r1, #32
 8004386:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800438a:	f7fd f9d5 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800438e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004394:	4b13      	ldr	r3, [pc, #76]	; (80043e4 <_ZL12MX_GPIO_Initv+0xd8>)
 8004396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	4619      	mov	r1, r3
 80043a2:	4811      	ldr	r0, [pc, #68]	; (80043e8 <_ZL12MX_GPIO_Initv+0xdc>)
 80043a4:	f7fd f846 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80043a8:	2320      	movs	r3, #32
 80043aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ac:	2301      	movs	r3, #1
 80043ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c2:	f7fd f837 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80043c6:	2200      	movs	r2, #0
 80043c8:	2100      	movs	r1, #0
 80043ca:	2028      	movs	r0, #40	; 0x28
 80043cc:	f7fc ff3d 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80043d0:	2028      	movs	r0, #40	; 0x28
 80043d2:	f7fc ff54 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 80043d6:	bf00      	nop
 80043d8:	3728      	adds	r7, #40	; 0x28
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40021000 	.word	0x40021000
 80043e4:	10110000 	.word	0x10110000
 80043e8:	48000800 	.word	0x48000800

080043ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80043f0:	b672      	cpsid	i
}
 80043f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043f4:	e7fe      	b.n	80043f4 <Error_Handler+0x8>

080043f6 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 80043fe:	2032      	movs	r0, #50	; 0x32
 8004400:	f7ff fd3c 	bl	8003e7c <ringBuffer_init>
 8004404:	4602      	mov	r2, r0
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	605a      	str	r2, [r3, #4]

	}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fd56 	bl	8003ed0 <ringBuffer_deInit>
	}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4618      	mov	r0, r3
 8004438:	f00e fdc8 	bl	8012fcc <_ZN5UtestC1Ev>
 800443c:	4a03      	ldr	r2, [pc, #12]	; (800444c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	08026280 	.word	0x08026280

08004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	4a05      	ldr	r2, [pc, #20]	; (8004470 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4618      	mov	r0, r3
 8004462:	f00e fdc3 	bl	8012fec <_ZN5UtestD1Ev>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4618      	mov	r0, r3
 800446a:	3708      	adds	r7, #8
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	08026280 	.word	0x08026280

08004474 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ffe7 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8004482:	2108      	movs	r1, #8
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f004 fde5 	bl	8009054 <_ZdlPvj>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	605a      	str	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff ffbe 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044b0:	4a03      	ldr	r2, [pc, #12]	; (80044c0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08026260 	.word	0x08026260

080044c4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80044c4:	b590      	push	{r4, r7, lr}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	2224      	movs	r2, #36	; 0x24
 80044ce:	4906      	ldr	r1, [pc, #24]	; (80044e8 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80044d0:	2008      	movs	r0, #8
 80044d2:	f004 fdab 	bl	800902c <_ZnwjPKci>
 80044d6:	4604      	mov	r4, r0
 80044d8:	4620      	mov	r0, r4
 80044da:	f7ff ffdb 	bl	8004494 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80044de:	4623      	mov	r3, r4
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd90      	pop	{r4, r7, pc}
 80044e8:	0802204c 	.word	0x0802204c

080044ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f00d f986 	bl	8011808 <_ZN10UtestShellC1Ev>
 80044fc:	4a03      	ldr	r2, [pc, #12]	; (800450c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	080261b4 	.word	0x080261b4

08004510 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 8004510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004512:	b087      	sub	sp, #28
 8004514:	af04      	add	r7, sp, #16
 8004516:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004518:	f00e fd2e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800451c:	4604      	mov	r4, r0
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	3338      	adds	r3, #56	; 0x38
 8004522:	681d      	ldr	r5, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	461e      	mov	r6, r3
 800452c:	f00e fd34 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004530:	4603      	mov	r3, r0
 8004532:	9302      	str	r3, [sp, #8]
 8004534:	2327      	movs	r3, #39	; 0x27
 8004536:	9301      	str	r3, [sp, #4]
 8004538:	4b2a      	ldr	r3, [pc, #168]	; (80045e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 800453e:	4632      	mov	r2, r6
 8004540:	2132      	movs	r1, #50	; 0x32
 8004542:	4620      	mov	r0, r4
 8004544:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 8004546:	f00e fd17 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800454a:	4604      	mov	r4, r0
 800454c:	6823      	ldr	r3, [r4, #0]
 800454e:	3320      	adds	r3, #32
 8004550:	681d      	ldr	r5, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf14      	ite	ne
 800455c:	2301      	movne	r3, #1
 800455e:	2300      	moveq	r3, #0
 8004560:	b2de      	uxtb	r6, r3
 8004562:	f00e fd19 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004566:	4603      	mov	r3, r0
 8004568:	9303      	str	r3, [sp, #12]
 800456a:	2328      	movs	r3, #40	; 0x28
 800456c:	9302      	str	r3, [sp, #8]
 800456e:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2300      	movs	r3, #0
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	4b1d      	ldr	r3, [pc, #116]	; (80045ec <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 800457a:	4631      	mov	r1, r6
 800457c:	4620      	mov	r0, r4
 800457e:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004580:	f00e fcfa 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004584:	4604      	mov	r4, r0
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	3338      	adds	r3, #56	; 0x38
 800458a:	681d      	ldr	r5, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461e      	mov	r6, r3
 8004594:	f00e fd00 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004598:	4603      	mov	r3, r0
 800459a:	9302      	str	r3, [sp, #8]
 800459c:	2329      	movs	r3, #41	; 0x29
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	4b13      	ldr	r3, [pc, #76]	; (80045f4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 80045a6:	4632      	mov	r2, r6
 80045a8:	2100      	movs	r1, #0
 80045aa:	4620      	mov	r0, r4
 80045ac:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 80045ae:	f00e fce3 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80045b2:	4604      	mov	r4, r0
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	3338      	adds	r3, #56	; 0x38
 80045b8:	681d      	ldr	r5, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	461e      	mov	r6, r3
 80045c2:	f00e fce9 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045c6:	4603      	mov	r3, r0
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	232a      	movs	r3, #42	; 0x2a
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80045d4:	4632      	mov	r2, r6
 80045d6:	2100      	movs	r1, #0
 80045d8:	4620      	mov	r0, r4
 80045da:	47a8      	blx	r5

}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e4:	0802204c 	.word	0x0802204c
 80045e8:	08022060 	.word	0x08022060
 80045ec:	08022088 	.word	0x08022088
 80045f0:	080220a0 	.word	0x080220a0
 80045f4:	080220a8 	.word	0x080220a8
 80045f8:	080220d0 	.word	0x080220d0

080045fc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ff0a 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004618:	4a03      	ldr	r2, [pc, #12]	; (8004628 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4618      	mov	r0, r3
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	08026194 	.word	0x08026194

0800462c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	222e      	movs	r2, #46	; 0x2e
 8004636:	4906      	ldr	r1, [pc, #24]	; (8004650 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004638:	2008      	movs	r0, #8
 800463a:	f004 fcf7 	bl	800902c <_ZnwjPKci>
 800463e:	4604      	mov	r4, r0
 8004640:	4620      	mov	r0, r4
 8004642:	f7ff ffdb 	bl	80045fc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 8004646:	4623      	mov	r3, r4
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}
 8004650:	0802204c 	.word	0x0802204c

08004654 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4618      	mov	r0, r3
 8004660:	f00d f8d2 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004664:	4a03      	ldr	r2, [pc, #12]	; (8004674 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	080260e8 	.word	0x080260e8

08004678 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800467a:	b087      	sub	sp, #28
 800467c:	af04      	add	r7, sp, #16
 800467e:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2145      	movs	r1, #69	; 0x45
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fc39 	bl	8003efe <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 800468c:	f00e fc74 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004690:	4604      	mov	r4, r0
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	3338      	adds	r3, #56	; 0x38
 8004696:	681d      	ldr	r5, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	461e      	mov	r6, r3
 80046a2:	f00e fc79 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046a6:	4603      	mov	r3, r0
 80046a8:	9302      	str	r3, [sp, #8]
 80046aa:	2331      	movs	r3, #49	; 0x31
 80046ac:	9301      	str	r3, [sp, #4]
 80046ae:	4b15      	ldr	r3, [pc, #84]	; (8004704 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	4b15      	ldr	r3, [pc, #84]	; (8004708 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 80046b4:	4632      	mov	r2, r6
 80046b6:	2145      	movs	r1, #69	; 0x45
 80046b8:	4620      	mov	r0, r4
 80046ba:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2110      	movs	r1, #16
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fc1b 	bl	8003efe <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80046c8:	f00e fc56 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80046cc:	4604      	mov	r4, r0
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	3338      	adds	r3, #56	; 0x38
 80046d2:	681d      	ldr	r5, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	461e      	mov	r6, r3
 80046e0:	f00e fc5a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	9302      	str	r3, [sp, #8]
 80046e8:	2334      	movs	r3, #52	; 0x34
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80046f2:	4632      	mov	r2, r6
 80046f4:	2110      	movs	r1, #16
 80046f6:	4620      	mov	r0, r4
 80046f8:	47a8      	blx	r5

}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004702:	bf00      	nop
 8004704:	0802204c 	.word	0x0802204c
 8004708:	080220f8 	.word	0x080220f8
 800470c:	08022128 	.word	0x08022128

08004710 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fe80 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800472c:	4a03      	ldr	r2, [pc, #12]	; (800473c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	080260c8 	.word	0x080260c8

08004740 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	2238      	movs	r2, #56	; 0x38
 800474a:	4906      	ldr	r1, [pc, #24]	; (8004764 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 800474c:	2008      	movs	r0, #8
 800474e:	f004 fc6d 	bl	800902c <_ZnwjPKci>
 8004752:	4604      	mov	r4, r0
 8004754:	4620      	mov	r0, r4
 8004756:	f7ff ffdb 	bl	8004710 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 800475a:	4623      	mov	r3, r4
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}
 8004764:	0802204c 	.word	0x0802204c

08004768 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4618      	mov	r0, r3
 8004774:	f00d f848 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004778:	4a03      	ldr	r2, [pc, #12]	; (8004788 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	0802601c 	.word	0x0802601c

0800478c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b089      	sub	sp, #36	; 0x24
 8004790:	af04      	add	r7, sp, #16
 8004792:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	429a      	cmp	r2, r3
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	461a      	mov	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	da0b      	bge.n	80047d4 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fb99 	bl	8003efe <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	e7e3      	b.n	800479c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	21ff      	movs	r1, #255	; 0xff
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff fb8f 	bl	8003efe <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80047e0:	f00e fbca 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80047e4:	4604      	mov	r4, r0
 80047e6:	6823      	ldr	r3, [r4, #0]
 80047e8:	3338      	adds	r3, #56	; 0x38
 80047ea:	681d      	ldr	r5, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	461e      	mov	r6, r3
 80047f6:	f00e fbcf 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80047fa:	4603      	mov	r3, r0
 80047fc:	9302      	str	r3, [sp, #8]
 80047fe:	2340      	movs	r3, #64	; 0x40
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4b05      	ldr	r3, [pc, #20]	; (800481c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 8004808:	4632      	mov	r2, r6
 800480a:	21ff      	movs	r1, #255	; 0xff
 800480c:	4620      	mov	r0, r4
 800480e:	47a8      	blx	r5
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004818:	0802204c 	.word	0x0802204c
 800481c:	08022158 	.word	0x08022158

08004820 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fdf8 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800483c:	4a03      	ldr	r2, [pc, #12]	; (800484c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	08025ffc 	.word	0x08025ffc

08004850 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	2243      	movs	r2, #67	; 0x43
 800485a:	4906      	ldr	r1, [pc, #24]	; (8004874 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 800485c:	2008      	movs	r0, #8
 800485e:	f004 fbe5 	bl	800902c <_ZnwjPKci>
 8004862:	4604      	mov	r4, r0
 8004864:	4620      	mov	r0, r4
 8004866:	f7ff ffdb 	bl	8004820 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 800486a:	4623      	mov	r3, r4
 800486c:	4618      	mov	r0, r3
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bd90      	pop	{r4, r7, pc}
 8004874:	0802204c 	.word	0x0802204c

08004878 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f00c ffc0 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004888:	4a03      	ldr	r2, [pc, #12]	; (8004898 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4618      	mov	r0, r3
 8004892:	3708      	adds	r7, #8
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	08025f50 	.word	0x08025f50

0800489c <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	b089      	sub	sp, #36	; 0x24
 80048a0:	af04      	add	r7, sp, #16
 80048a2:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	21ff      	movs	r1, #255	; 0xff
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff fb27 	bl	8003efe <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff fb4c 	bl	8003f52 <ringBuffer_pop>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80048be:	f00e fb5b 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80048c2:	4604      	mov	r4, r0
 80048c4:	6823      	ldr	r3, [r4, #0]
 80048c6:	3338      	adds	r3, #56	; 0x38
 80048c8:	681d      	ldr	r5, [r3, #0]
 80048ca:	7bfe      	ldrb	r6, [r7, #15]
 80048cc:	f00e fb64 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048d0:	4603      	mov	r3, r0
 80048d2:	9302      	str	r3, [sp, #8]
 80048d4:	2348      	movs	r3, #72	; 0x48
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80048de:	4632      	mov	r2, r6
 80048e0:	21ff      	movs	r1, #255	; 0xff
 80048e2:	4620      	mov	r0, r4
 80048e4:	47a8      	blx	r5

}
 80048e6:	bf00      	nop
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ee:	bf00      	nop
 80048f0:	0802204c 	.word	0x0802204c
 80048f4:	08022188 	.word	0x08022188

080048f8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fd8c 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004914:	4a03      	ldr	r2, [pc, #12]	; (8004924 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	08025f30 	.word	0x08025f30

08004928 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004928:	b590      	push	{r4, r7, lr}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	224c      	movs	r2, #76	; 0x4c
 8004932:	4906      	ldr	r1, [pc, #24]	; (800494c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 8004934:	2008      	movs	r0, #8
 8004936:	f004 fb79 	bl	800902c <_ZnwjPKci>
 800493a:	4604      	mov	r4, r0
 800493c:	4620      	mov	r0, r4
 800493e:	f7ff ffdb 	bl	80048f8 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 8004942:	4623      	mov	r3, r4
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	bd90      	pop	{r4, r7, pc}
 800494c:	0802204c 	.word	0x0802204c

08004950 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4618      	mov	r0, r3
 800495c:	f00c ff54 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004960:	4a03      	ldr	r2, [pc, #12]	; (8004970 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	08025e84 	.word	0x08025e84

08004974 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 8004974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004976:	b089      	sub	sp, #36	; 0x24
 8004978:	af04      	add	r7, sp, #16
 800497a:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	21aa      	movs	r1, #170	; 0xaa
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fab9 	bl	8003efe <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	429a      	cmp	r2, r3
 80049a4:	bf0c      	ite	eq
 80049a6:	2301      	moveq	r3, #1
 80049a8:	2300      	movne	r3, #0
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	461a      	mov	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4293      	cmp	r3, r2
 80049b2:	da0a      	bge.n	80049ca <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff faca 	bl	8003f52 <ringBuffer_pop>
 80049be:	4603      	mov	r3, r0
 80049c0:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3301      	adds	r3, #1
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e7e4      	b.n	8004994 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fabf 	bl	8003f52 <ringBuffer_pop>
 80049d4:	4603      	mov	r3, r0
 80049d6:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80049d8:	f00e face 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80049dc:	4604      	mov	r4, r0
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	3338      	adds	r3, #56	; 0x38
 80049e2:	681d      	ldr	r5, [r3, #0]
 80049e4:	7afe      	ldrb	r6, [r7, #11]
 80049e6:	f00e fad7 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049ea:	4603      	mov	r3, r0
 80049ec:	9302      	str	r3, [sp, #8]
 80049ee:	2359      	movs	r3, #89	; 0x59
 80049f0:	9301      	str	r3, [sp, #4]
 80049f2:	4b05      	ldr	r3, [pc, #20]	; (8004a08 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80049f8:	4632      	mov	r2, r6
 80049fa:	21aa      	movs	r1, #170	; 0xaa
 80049fc:	4620      	mov	r0, r4
 80049fe:	47a8      	blx	r5
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a08:	0802204c 	.word	0x0802204c
 8004a0c:	080221a8 	.word	0x080221a8

08004a10 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	605a      	str	r2, [r3, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7ff fd00 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a2c:	4a03      	ldr	r2, [pc, #12]	; (8004a3c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4618      	mov	r0, r3
 8004a36:	3708      	adds	r7, #8
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	08025e64 	.word	0x08025e64

08004a40 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	225c      	movs	r2, #92	; 0x5c
 8004a4a:	4906      	ldr	r1, [pc, #24]	; (8004a64 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004a4c:	2008      	movs	r0, #8
 8004a4e:	f004 faed 	bl	800902c <_ZnwjPKci>
 8004a52:	4604      	mov	r4, r0
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff ffdb 	bl	8004a10 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004a5a:	4623      	mov	r3, r4
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd90      	pop	{r4, r7, pc}
 8004a64:	0802204c 	.word	0x0802204c

08004a68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f00c fec8 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004a78:	4a03      	ldr	r2, [pc, #12]	; (8004a88 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4618      	mov	r0, r3
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	08025db8 	.word	0x08025db8

08004a8c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004a94:	2300      	movs	r3, #0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d20b      	bcs.n	8004abc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	4611      	mov	r1, r2
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7ff fa25 	bl	8003efe <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60fb      	str	r3, [r7, #12]
 8004aba:	e7ed      	b.n	8004a98 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 8004abc:	f00e fa5c 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	3338      	adds	r3, #56	; 0x38
 8004ac6:	681d      	ldr	r5, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	4413      	add	r3, r2
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	461e      	mov	r6, r3
 8004adc:	f00e fa5c 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	9302      	str	r3, [sp, #8]
 8004ae4:	2363      	movs	r3, #99	; 0x63
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	4b24      	ldr	r3, [pc, #144]	; (8004b7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 8004aee:	4632      	mov	r2, r6
 8004af0:	2131      	movs	r1, #49	; 0x31
 8004af2:	4620      	mov	r0, r4
 8004af4:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7ff fa53 	bl	8003fa6 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 8004b00:	f00e fa3a 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004b04:	4604      	mov	r4, r0
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	3338      	adds	r3, #56	; 0x38
 8004b0a:	681d      	ldr	r5, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	461e      	mov	r6, r3
 8004b20:	f00e fa3a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b24:	4603      	mov	r3, r0
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	2367      	movs	r3, #103	; 0x67
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	4b14      	ldr	r3, [pc, #80]	; (8004b84 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 8004b32:	4632      	mov	r2, r6
 8004b34:	2100      	movs	r1, #0
 8004b36:	4620      	mov	r0, r4
 8004b38:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004b3a:	f00e fa1d 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004b3e:	4604      	mov	r4, r0
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	3338      	adds	r3, #56	; 0x38
 8004b44:	681d      	ldr	r5, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	085b      	lsrs	r3, r3, #1
 8004b54:	4413      	add	r3, r2
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	461e      	mov	r6, r3
 8004b5a:	f00e fa1d 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	9302      	str	r3, [sp, #8]
 8004b62:	2368      	movs	r3, #104	; 0x68
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	4b07      	ldr	r3, [pc, #28]	; (8004b88 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	2100      	movs	r1, #0
 8004b70:	4620      	mov	r0, r4
 8004b72:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 8004b74:	bf00      	nop
 8004b76:	3714      	adds	r7, #20
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7c:	0802204c 	.word	0x0802204c
 8004b80:	080221c8 	.word	0x080221c8
 8004b84:	08022204 	.word	0x08022204
 8004b88:	08022240 	.word	0x08022240

08004b8c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fc42 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004ba8:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	08025d98 	.word	0x08025d98

08004bbc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 8004bbc:	b590      	push	{r4, r7, lr}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	2271      	movs	r2, #113	; 0x71
 8004bc6:	4906      	ldr	r1, [pc, #24]	; (8004be0 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 8004bc8:	2008      	movs	r0, #8
 8004bca:	f004 fa2f 	bl	800902c <_ZnwjPKci>
 8004bce:	4604      	mov	r4, r0
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff ffdb 	bl	8004b8c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 8004bd6:	4623      	mov	r3, r4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd90      	pop	{r4, r7, pc}
 8004be0:	0802204c 	.word	0x0802204c

08004be4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f00c fe0a 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004bf4:	4a03      	ldr	r2, [pc, #12]	; (8004c04 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	08025cec 	.word	0x08025cec

08004c08 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 8004c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af04      	add	r7, sp, #16
 8004c0e:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	490e      	ldr	r1, [pc, #56]	; (8004c50 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff f9dc 	bl	8003fd4 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004c1c:	f00e f9ac 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004c20:	4604      	mov	r4, r0
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	3324      	adds	r3, #36	; 0x24
 8004c26:	681d      	ldr	r5, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68de      	ldr	r6, [r3, #12]
 8004c2e:	f00e f9b3 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004c32:	4603      	mov	r3, r0
 8004c34:	9302      	str	r3, [sp, #8]
 8004c36:	2375      	movs	r3, #117	; 0x75
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4632      	mov	r2, r6
 8004c42:	4903      	ldr	r1, [pc, #12]	; (8004c50 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 8004c44:	4620      	mov	r0, r4
 8004c46:	47a8      	blx	r5
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c50:	08022278 	.word	0x08022278
 8004c54:	0802204c 	.word	0x0802204c

08004c58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fbdc 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004c74:	4a03      	ldr	r2, [pc, #12]	; (8004c84 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	08025ccc 	.word	0x08025ccc

08004c88 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	2278      	movs	r2, #120	; 0x78
 8004c92:	4906      	ldr	r1, [pc, #24]	; (8004cac <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 8004c94:	2008      	movs	r0, #8
 8004c96:	f004 f9c9 	bl	800902c <_ZnwjPKci>
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	4620      	mov	r0, r4
 8004c9e:	f7ff ffdb 	bl	8004c58 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}
 8004cac:	0802204c 	.word	0x0802204c

08004cb0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f00c fda4 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004cc0:	4a03      	ldr	r2, [pc, #12]	; (8004cd0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3708      	adds	r7, #8
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08025c20 	.word	0x08025c20

08004cd4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af04      	add	r7, sp, #16
 8004cdc:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	494e      	ldr	r1, [pc, #312]	; (8004e1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f975 	bl	8003fd4 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 8004cea:	f00e f945 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004cee:	4604      	mov	r4, r0
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	3324      	adds	r3, #36	; 0x24
 8004cf4:	681d      	ldr	r5, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68de      	ldr	r6, [r3, #12]
 8004cfc:	f00e f94c 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d00:	4603      	mov	r3, r0
 8004d02:	9302      	str	r3, [sp, #8]
 8004d04:	237c      	movs	r3, #124	; 0x7c
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	4b45      	ldr	r3, [pc, #276]	; (8004e20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4632      	mov	r2, r6
 8004d10:	4942      	ldr	r1, [pc, #264]	; (8004e1c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 8004d12:	4620      	mov	r0, r4
 8004d14:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	4942      	ldr	r1, [pc, #264]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff f978 	bl	8004012 <ringBuffer_lookFor>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	bf14      	ite	ne
 8004d28:	2301      	movne	r3, #1
 8004d2a:	2300      	moveq	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d05c      	beq.n	8004dec <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	493b      	ldr	r1, [pc, #236]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff f96a 	bl	8004012 <ringBuffer_lookFor>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4937      	ldr	r1, [pc, #220]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff f963 	bl	8004012 <ringBuffer_lookFor>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	bf14      	ite	ne
 8004d52:	2301      	movne	r3, #1
 8004d54:	2300      	moveq	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004d5c:	f00e f90c 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004d60:	6803      	ldr	r3, [r0, #0]
 8004d62:	3370      	adds	r3, #112	; 0x70
 8004d64:	681c      	ldr	r4, [r3, #0]
 8004d66:	237d      	movs	r3, #125	; 0x7d
 8004d68:	4a2d      	ldr	r2, [pc, #180]	; (8004e20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004d6a:	492f      	ldr	r1, [pc, #188]	; (8004e28 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004d6c:	47a0      	blx	r4
 8004d6e:	f00e f903 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004d72:	4604      	mov	r4, r0
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	3358      	adds	r3, #88	; 0x58
 8004d78:	681d      	ldr	r5, [r3, #0]
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	2101      	movs	r1, #1
 8004d80:	4618      	mov	r0, r3
 8004d82:	f007 fb95 	bl	800c4b0 <_Z10StringFromi>
 8004d86:	f107 0308 	add.w	r3, r7, #8
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f007 f89c 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8004d90:	4606      	mov	r6, r0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4923      	ldr	r1, [pc, #140]	; (8004e24 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff f93a 	bl	8004012 <ringBuffer_lookFor>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	f107 0310 	add.w	r3, r7, #16
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f007 fdfc 	bl	800c9a4 <_Z10StringFromm>
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	4618      	mov	r0, r3
 8004db2:	f007 f889 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8004db6:	4680      	mov	r8, r0
 8004db8:	f00e f8ee 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	9303      	str	r3, [sp, #12]
 8004dc0:	237d      	movs	r3, #125	; 0x7d
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004dc6:	9301      	str	r3, [sp, #4]
 8004dc8:	2300      	movs	r3, #0
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	4643      	mov	r3, r8
 8004dce:	4632      	mov	r2, r6
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	47a8      	blx	r5
 8004dd6:	f107 0310 	add.w	r3, r7, #16
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f007 f8a1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8004de0:	f107 0308 	add.w	r3, r7, #8
 8004de4:	4618      	mov	r0, r3
 8004de6:	f007 f89c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8004dea:	e012      	b.n	8004e12 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 8004dec:	f00e f8c4 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004df0:	4604      	mov	r4, r0
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	3338      	adds	r3, #56	; 0x38
 8004df6:	681d      	ldr	r5, [r3, #0]
 8004df8:	f00e f8ce 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	237d      	movs	r3, #125	; 0x7d
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4620      	mov	r0, r4
 8004e10:	47a8      	blx	r5
}
 8004e12:	bf00      	nop
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	08022280 	.word	0x08022280
 8004e20:	0802204c 	.word	0x0802204c
 8004e24:	0802228c 	.word	0x0802228c
 8004e28:	08022294 	.word	0x08022294

08004e2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7ff faf2 	bl	800442c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004e48:	4a03      	ldr	r2, [pc, #12]	; (8004e58 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	08025c00 	.word	0x08025c00

08004e5c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004e5c:	b590      	push	{r4, r7, lr}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	2280      	movs	r2, #128	; 0x80
 8004e66:	4906      	ldr	r1, [pc, #24]	; (8004e80 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004e68:	2008      	movs	r0, #8
 8004e6a:	f004 f8df 	bl	800902c <_ZnwjPKci>
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7ff ffdb 	bl	8004e2c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004e76:	4623      	mov	r3, r4
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	0802204c 	.word	0x0802204c

08004e84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f00c fcba 	bl	8011808 <_ZN10UtestShellC1Ev>
 8004e94:	4a03      	ldr	r2, [pc, #12]	; (8004ea4 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	08025b54 	.word	0x08025b54

08004ea8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af04      	add	r7, sp, #16
 8004eae:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004eb0:	f00e f862 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	6823      	ldr	r3, [r4, #0]
 8004eb8:	3338      	adds	r3, #56	; 0x38
 8004eba:	681d      	ldr	r5, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff f8bc 	bl	800403e <ringBuffer_capacity>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	461e      	mov	r6, r3
 8004eca:	f00e f865 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	9302      	str	r3, [sp, #8]
 8004ed2:	2383      	movs	r3, #131	; 0x83
 8004ed4:	9301      	str	r3, [sp, #4]
 8004ed6:	4b05      	ldr	r3, [pc, #20]	; (8004eec <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004edc:	4632      	mov	r2, r6
 8004ede:	2132      	movs	r1, #50	; 0x32
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	47a8      	blx	r5

}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eec:	0802204c 	.word	0x0802204c
 8004ef0:	08022338 	.word	0x08022338

08004ef4 <_Z18UART_Transmit_FakePh>:


void UART_Transmit_Fake(uint8_t* data)
{
 8004ef4:	b5b0      	push	{r4, r5, r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
//	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
	mock().actualCall("UART_Transmit_Fake").withStringParameter("data", (char*)data);
 8004efc:	f107 0308 	add.w	r3, r7, #8
 8004f00:	491d      	ldr	r1, [pc, #116]	; (8004f78 <_Z18UART_Transmit_FakePh+0x84>)
 8004f02:	4618      	mov	r0, r3
 8004f04:	f006 fc55 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f004 fd28 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f14:	4604      	mov	r4, r0
 8004f16:	6823      	ldr	r3, [r4, #0]
 8004f18:	3318      	adds	r3, #24
 8004f1a:	681d      	ldr	r5, [r3, #0]
 8004f1c:	f107 0310 	add.w	r3, r7, #16
 8004f20:	4916      	ldr	r1, [pc, #88]	; (8004f7c <_Z18UART_Transmit_FakePh+0x88>)
 8004f22:	4618      	mov	r0, r3
 8004f24:	f006 fc45 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8004f28:	f107 0310 	add.w	r3, r7, #16
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4620      	mov	r0, r4
 8004f30:	47a8      	blx	r5
 8004f32:	4604      	mov	r4, r0
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	333c      	adds	r3, #60	; 0x3c
 8004f38:	681d      	ldr	r5, [r3, #0]
 8004f3a:	f107 0318 	add.w	r3, r7, #24
 8004f3e:	4910      	ldr	r1, [pc, #64]	; (8004f80 <_Z18UART_Transmit_FakePh+0x8c>)
 8004f40:	4618      	mov	r0, r3
 8004f42:	f006 fc36 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8004f46:	f107 0318 	add.w	r3, r7, #24
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4620      	mov	r0, r4
 8004f50:	47a8      	blx	r5
 8004f52:	f107 0318 	add.w	r3, r7, #24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f006 ffe3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	4618      	mov	r0, r3
 8004f62:	f006 ffde 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8004f66:	f107 0308 	add.w	r3, r7, #8
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f006 ffd9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8004f70:	bf00      	nop
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bdb0      	pop	{r4, r5, r7, pc}
 8004f78:	08022370 	.word	0x08022370
 8004f7c:	08022374 	.word	0x08022374
 8004f80:	08022388 	.word	0x08022388

08004f84 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004f84:	b5b0      	push	{r4, r5, r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004f8a:	463b      	mov	r3, r7
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <_Z17UART_Receive_Fakev+0x64>)
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f006 fc0f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8004f94:	463b      	mov	r3, r7
 8004f96:	2100      	movs	r1, #0
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f004 fce3 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	681d      	ldr	r5, [r3, #0]
 8004fa6:	f107 0308 	add.w	r3, r7, #8
 8004faa:	4910      	ldr	r1, [pc, #64]	; (8004fec <_Z17UART_Receive_Fakev+0x68>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f006 fc00 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4620      	mov	r0, r4
 8004fba:	47a8      	blx	r5
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	3264      	adds	r2, #100	; 0x64
 8004fc2:	6812      	ldr	r2, [r2, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	4790      	blx	r2
 8004fc8:	4603      	mov	r3, r0
 8004fca:	b2dc      	uxtb	r4, r3
 8004fcc:	f107 0308 	add.w	r3, r7, #8
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f006 ffa6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8004fd6:	463b      	mov	r3, r7
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f006 ffa2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8004fde:	4623      	mov	r3, r4
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3710      	adds	r7, #16
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8004fe8:	08022370 	.word	0x08022370
 8004fec:	08022390 	.word	0x08022390

08004ff0 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <_Z12getTick_Fakev+0x30>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d103      	bne.n	8005006 <_Z12getTick_Fakev+0x16>
		time = 0;
 8004ffe:	4b08      	ldr	r3, [pc, #32]	; (8005020 <_Z12getTick_Fakev+0x30>)
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	e004      	b.n	8005010 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <_Z12getTick_Fakev+0x30>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3301      	adds	r3, #1
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <_Z12getTick_Fakev+0x30>)
 800500e:	6013      	str	r3, [r2, #0]
	return time;
 8005010:	4b03      	ldr	r3, [pc, #12]	; (8005020 <_Z12getTick_Fakev+0x30>)
 8005012:	681b      	ldr	r3, [r3, #0]
}
 8005014:	4618      	mov	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	200005c4 	.word	0x200005c4

08005024 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 800502c:	2364      	movs	r3, #100	; 0x64
 800502e:	4a04      	ldr	r2, [pc, #16]	; (8005040 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8005030:	4904      	ldr	r1, [pc, #16]	; (8005044 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8005032:	4805      	ldr	r0, [pc, #20]	; (8005048 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8005034:	f7fe fc68 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8005038:	bf00      	nop
 800503a:	3708      	adds	r7, #8
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	08004ff1 	.word	0x08004ff1
 8005044:	08004f85 	.word	0x08004f85
 8005048:	08004ef5 	.word	0x08004ef5

0800504c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	{

		mock().checkExpectations();
 8005054:	f107 0308 	add.w	r3, r7, #8
 8005058:	4917      	ldr	r1, [pc, #92]	; (80050b8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 800505a:	4618      	mov	r0, r3
 800505c:	f006 fba9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005060:	f107 0308 	add.w	r3, r7, #8
 8005064:	2100      	movs	r1, #0
 8005066:	4618      	mov	r0, r3
 8005068:	f004 fc7c 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800506c:	4603      	mov	r3, r0
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	3294      	adds	r2, #148	; 0x94
 8005072:	6812      	ldr	r2, [r2, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	4790      	blx	r2
 8005078:	f107 0308 	add.w	r3, r7, #8
 800507c:	4618      	mov	r0, r3
 800507e:	f006 ff50 	bl	800bf22 <_ZN12SimpleStringD1Ev>
		mock().clear();
 8005082:	f107 0310 	add.w	r3, r7, #16
 8005086:	490c      	ldr	r1, [pc, #48]	; (80050b8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x6c>)
 8005088:	4618      	mov	r0, r3
 800508a:	f006 fb92 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800508e:	f107 0310 	add.w	r3, r7, #16
 8005092:	2100      	movs	r1, #0
 8005094:	4618      	mov	r0, r3
 8005096:	f004 fc65 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800509a:	4603      	mov	r3, r0
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	329c      	adds	r2, #156	; 0x9c
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	4790      	blx	r2
 80050a6:	f107 0310 	add.w	r3, r7, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f006 ff39 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	08022370 	.word	0x08022370

080050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f00d ff80 	bl	8012fcc <_ZN5UtestC1Ev>
 80050cc:	4a03      	ldr	r2, [pc, #12]	; (80050dc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	08025b34 	.word	0x08025b34

080050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	4a05      	ldr	r2, [pc, #20]	; (8005100 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f00d ff7b 	bl	8012fec <_ZN5UtestD1Ev>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	08025b34 	.word	0x08025b34

08005104 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ffe7 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005112:	2104      	movs	r1, #4
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f003 ff9d 	bl	8009054 <_ZdlPvj>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4618      	mov	r0, r3
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4618      	mov	r0, r3
 8005130:	f7ff ffc4 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005134:	4a03      	ldr	r2, [pc, #12]	; (8005144 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08025b14 	.word	0x08025b14

08005148 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8005148:	b590      	push	{r4, r7, lr}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	22b8      	movs	r2, #184	; 0xb8
 8005152:	4906      	ldr	r1, [pc, #24]	; (800516c <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8005154:	2004      	movs	r0, #4
 8005156:	f003 ff69 	bl	800902c <_ZnwjPKci>
 800515a:	4604      	mov	r4, r0
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ffe1 	bl	8005124 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8005162:	4623      	mov	r3, r4
 8005164:	4618      	mov	r0, r3
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	0802204c 	.word	0x0802204c

08005170 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4618      	mov	r0, r3
 800517c:	f00c fb44 	bl	8011808 <_ZN10UtestShellC1Ev>
 8005180:	4a03      	ldr	r2, [pc, #12]	; (8005190 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	601a      	str	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4618      	mov	r0, r3
 800518a:	3708      	adds	r7, #8
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	08025a68 	.word	0x08025a68

08005194 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8005194:	b5b0      	push	{r4, r5, r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af04      	add	r7, sp, #16
 800519a:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 800519e:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 80051a0:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 80051a2:	4b0f      	ldr	r3, [pc, #60]	; (80051e0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	2364      	movs	r3, #100	; 0x64
 80051a8:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 80051aa:	4910      	ldr	r1, [pc, #64]	; (80051ec <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 80051ac:	f7fe fbac 	bl	8003908 <ESP_Init>
 80051b0:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 80051b2:	f00d fee1 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80051b6:	4604      	mov	r4, r0
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	3338      	adds	r3, #56	; 0x38
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	f00d feeb 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80051c2:	4603      	mov	r3, r0
 80051c4:	9302      	str	r3, [sp, #8]
 80051c6:	23c6      	movs	r3, #198	; 0xc6
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	4b09      	ldr	r3, [pc, #36]	; (80051f0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	2101      	movs	r1, #1
 80051d4:	4620      	mov	r0, r4
 80051d6:	47a8      	blx	r5

}
 80051d8:	bf00      	nop
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bdb0      	pop	{r4, r5, r7, pc}
 80051e0:	200005c8 	.word	0x200005c8
 80051e4:	08004ef5 	.word	0x08004ef5
 80051e8:	08004ff1 	.word	0x08004ff1
 80051ec:	08004f85 	.word	0x08004f85
 80051f0:	0802204c 	.word	0x0802204c
 80051f4:	080223a4 	.word	0x080223a4

080051f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff ff5a 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005208:	4a03      	ldr	r2, [pc, #12]	; (8005218 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4618      	mov	r0, r3
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	08025a48 	.word	0x08025a48

0800521c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 800521c:	b590      	push	{r4, r7, lr}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	22ca      	movs	r2, #202	; 0xca
 8005226:	4906      	ldr	r1, [pc, #24]	; (8005240 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8005228:	2004      	movs	r0, #4
 800522a:	f003 feff 	bl	800902c <_ZnwjPKci>
 800522e:	4604      	mov	r4, r0
 8005230:	4620      	mov	r0, r4
 8005232:	f7ff ffe1 	bl	80051f8 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8005236:	4623      	mov	r3, r4
 8005238:	4618      	mov	r0, r3
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	bd90      	pop	{r4, r7, pc}
 8005240:	0802204c 	.word	0x0802204c

08005244 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4618      	mov	r0, r3
 8005250:	f00c fada 	bl	8011808 <_ZN10UtestShellC1Ev>
 8005254:	4a03      	ldr	r2, [pc, #12]	; (8005264 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	601a      	str	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4618      	mov	r0, r3
 800525e:	3708      	adds	r7, #8
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	0802599c 	.word	0x0802599c

08005268 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8005268:	b5b0      	push	{r4, r5, r7, lr}
 800526a:	b08e      	sub	sp, #56	; 0x38
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "Test");
 8005270:	f107 0308 	add.w	r3, r7, #8
 8005274:	493d      	ldr	r1, [pc, #244]	; (800536c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 8005276:	4618      	mov	r0, r3
 8005278:	f006 fa9b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	2100      	movs	r1, #0
 8005282:	4618      	mov	r0, r3
 8005284:	f004 fb6e 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005288:	4604      	mov	r4, r0
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	330c      	adds	r3, #12
 800528e:	681d      	ldr	r5, [r3, #0]
 8005290:	f107 0310 	add.w	r3, r7, #16
 8005294:	4936      	ldr	r1, [pc, #216]	; (8005370 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 8005296:	4618      	mov	r0, r3
 8005298:	f006 fa8b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	4619      	mov	r1, r3
 80052a2:	4620      	mov	r0, r4
 80052a4:	47a8      	blx	r5
 80052a6:	4604      	mov	r4, r0
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	334c      	adds	r3, #76	; 0x4c
 80052ac:	681d      	ldr	r5, [r3, #0]
 80052ae:	f107 0318 	add.w	r3, r7, #24
 80052b2:	4930      	ldr	r1, [pc, #192]	; (8005374 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 80052b4:	4618      	mov	r0, r3
 80052b6:	f006 fa7c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80052ba:	f107 0318 	add.w	r3, r7, #24
 80052be:	4a2e      	ldr	r2, [pc, #184]	; (8005378 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 80052c0:	4619      	mov	r1, r3
 80052c2:	4620      	mov	r0, r4
 80052c4:	47a8      	blx	r5
 80052c6:	f107 0318 	add.w	r3, r7, #24
 80052ca:	4618      	mov	r0, r3
 80052cc:	f006 fe29 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80052d0:	f107 0310 	add.w	r3, r7, #16
 80052d4:	4618      	mov	r0, r3
 80052d6:	f006 fe24 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80052da:	f107 0308 	add.w	r3, r7, #8
 80052de:	4618      	mov	r0, r3
 80052e0:	f006 fe1f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", "AT\r\n");
 80052e4:	f107 0320 	add.w	r3, r7, #32
 80052e8:	4920      	ldr	r1, [pc, #128]	; (800536c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x104>)
 80052ea:	4618      	mov	r0, r3
 80052ec:	f006 fa61 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80052f0:	f107 0320 	add.w	r3, r7, #32
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f004 fb34 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80052fc:	4604      	mov	r4, r0
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	681d      	ldr	r5, [r3, #0]
 8005304:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005308:	4919      	ldr	r1, [pc, #100]	; (8005370 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x108>)
 800530a:	4618      	mov	r0, r3
 800530c:	f006 fa51 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005314:	4619      	mov	r1, r3
 8005316:	4620      	mov	r0, r4
 8005318:	47a8      	blx	r5
 800531a:	4604      	mov	r4, r0
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	334c      	adds	r3, #76	; 0x4c
 8005320:	681d      	ldr	r5, [r3, #0]
 8005322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005326:	4913      	ldr	r1, [pc, #76]	; (8005374 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x10c>)
 8005328:	4618      	mov	r0, r3
 800532a:	f006 fa42 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800532e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005332:	4a12      	ldr	r2, [pc, #72]	; (800537c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005334:	4619      	mov	r1, r3
 8005336:	4620      	mov	r0, r4
 8005338:	47a8      	blx	r5
 800533a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800533e:	4618      	mov	r0, r3
 8005340:	f006 fdef 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005348:	4618      	mov	r0, r3
 800534a:	f006 fdea 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800534e:	f107 0320 	add.w	r3, r7, #32
 8005352:	4618      	mov	r0, r3
 8005354:	f006 fde5 	bl	800bf22 <_ZN12SimpleStringD1Ev>

	Send_AT_Command((char*)"Test");
 8005358:	4807      	ldr	r0, [pc, #28]	; (8005378 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x110>)
 800535a:	f7fe fb01 	bl	8003960 <Send_AT_Command>
	Send_AT_Command((char*)"AT\r\n");
 800535e:	4807      	ldr	r0, [pc, #28]	; (800537c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x114>)
 8005360:	f7fe fafe 	bl	8003960 <Send_AT_Command>



}
 8005364:	bf00      	nop
 8005366:	3738      	adds	r7, #56	; 0x38
 8005368:	46bd      	mov	sp, r7
 800536a:	bdb0      	pop	{r4, r5, r7, pc}
 800536c:	08022370 	.word	0x08022370
 8005370:	08022374 	.word	0x08022374
 8005374:	08022388 	.word	0x08022388
 8005378:	08022278 	.word	0x08022278
 800537c:	080223c4 	.word	0x080223c4

08005380 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fe96 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005390:	4a03      	ldr	r2, [pc, #12]	; (80053a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	0802597c 	.word	0x0802597c

080053a4 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	22d6      	movs	r2, #214	; 0xd6
 80053ae:	4906      	ldr	r1, [pc, #24]	; (80053c8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 80053b0:	2004      	movs	r0, #4
 80053b2:	f003 fe3b 	bl	800902c <_ZnwjPKci>
 80053b6:	4604      	mov	r4, r0
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff ffe1 	bl	8005380 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 80053be:	4623      	mov	r3, r4
 80053c0:	4618      	mov	r0, r3
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd90      	pop	{r4, r7, pc}
 80053c8:	0802204c 	.word	0x0802204c

080053cc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f00c fa16 	bl	8011808 <_ZN10UtestShellC1Ev>
 80053dc:	4a03      	ldr	r2, [pc, #12]	; (80053ec <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	080258d0 	.word	0x080258d0

080053f0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 80053f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053f2:	b097      	sub	sp, #92	; 0x5c
 80053f4:	af04      	add	r7, sp, #16
 80053f6:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 80053f8:	f107 0308 	add.w	r3, r7, #8
 80053fc:	4967      	ldr	r1, [pc, #412]	; (800559c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80053fe:	4618      	mov	r0, r3
 8005400:	f006 f9d7 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f004 faaa 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005410:	4604      	mov	r4, r0
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	330c      	adds	r3, #12
 8005416:	681d      	ldr	r5, [r3, #0]
 8005418:	f107 0310 	add.w	r3, r7, #16
 800541c:	4960      	ldr	r1, [pc, #384]	; (80055a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800541e:	4618      	mov	r0, r3
 8005420:	f006 f9c7 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	4619      	mov	r1, r3
 800542a:	4620      	mov	r0, r4
 800542c:	47a8      	blx	r5
 800542e:	4603      	mov	r3, r0
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	3264      	adds	r2, #100	; 0x64
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	214f      	movs	r1, #79	; 0x4f
 8005438:	4618      	mov	r0, r3
 800543a:	4790      	blx	r2
 800543c:	f107 0310 	add.w	r3, r7, #16
 8005440:	4618      	mov	r0, r3
 8005442:	f006 fd6e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005446:	f107 0308 	add.w	r3, r7, #8
 800544a:	4618      	mov	r0, r3
 800544c:	f006 fd69 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005450:	f7fe fa94 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005454:	f107 0318 	add.w	r3, r7, #24
 8005458:	4950      	ldr	r1, [pc, #320]	; (800559c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 800545a:	4618      	mov	r0, r3
 800545c:	f006 f9a9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005460:	f107 0318 	add.w	r3, r7, #24
 8005464:	2100      	movs	r1, #0
 8005466:	4618      	mov	r0, r3
 8005468:	f004 fa7c 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800546c:	4604      	mov	r4, r0
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	330c      	adds	r3, #12
 8005472:	681d      	ldr	r5, [r3, #0]
 8005474:	f107 0320 	add.w	r3, r7, #32
 8005478:	4949      	ldr	r1, [pc, #292]	; (80055a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 800547a:	4618      	mov	r0, r3
 800547c:	f006 f999 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005480:	f107 0320 	add.w	r3, r7, #32
 8005484:	4619      	mov	r1, r3
 8005486:	4620      	mov	r0, r4
 8005488:	47a8      	blx	r5
 800548a:	4603      	mov	r3, r0
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	3264      	adds	r2, #100	; 0x64
 8005490:	6812      	ldr	r2, [r2, #0]
 8005492:	214b      	movs	r1, #75	; 0x4b
 8005494:	4618      	mov	r0, r3
 8005496:	4790      	blx	r2
 8005498:	f107 0320 	add.w	r3, r7, #32
 800549c:	4618      	mov	r0, r3
 800549e:	f006 fd40 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80054a2:	f107 0318 	add.w	r3, r7, #24
 80054a6:	4618      	mov	r0, r3
 80054a8:	f006 fd3b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80054ac:	f7fe fa66 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 80054b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b4:	4939      	ldr	r1, [pc, #228]	; (800559c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 80054b6:	4618      	mov	r0, r3
 80054b8:	f006 f97b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80054bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f004 fa4e 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054c8:	4604      	mov	r4, r0
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	681d      	ldr	r5, [r3, #0]
 80054d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054d4:	4932      	ldr	r1, [pc, #200]	; (80055a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 80054d6:	4618      	mov	r0, r3
 80054d8:	f006 f96b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80054dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054e0:	4619      	mov	r1, r3
 80054e2:	4620      	mov	r0, r4
 80054e4:	47a8      	blx	r5
 80054e6:	4603      	mov	r3, r0
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	3264      	adds	r2, #100	; 0x64
 80054ec:	6812      	ldr	r2, [r2, #0]
 80054ee:	210d      	movs	r1, #13
 80054f0:	4618      	mov	r0, r3
 80054f2:	4790      	blx	r2
 80054f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054f8:	4618      	mov	r0, r3
 80054fa:	f006 fd12 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80054fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005502:	4618      	mov	r0, r3
 8005504:	f006 fd0d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005508:	f7fe fa38 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 800550c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005510:	4922      	ldr	r1, [pc, #136]	; (800559c <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ac>)
 8005512:	4618      	mov	r0, r3
 8005514:	f006 f94d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005518:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800551c:	2100      	movs	r1, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f004 fa20 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005524:	4604      	mov	r4, r0
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	681d      	ldr	r5, [r3, #0]
 800552c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005530:	491b      	ldr	r1, [pc, #108]	; (80055a0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b0>)
 8005532:	4618      	mov	r0, r3
 8005534:	f006 f93d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005538:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800553c:	4619      	mov	r1, r3
 800553e:	4620      	mov	r0, r4
 8005540:	47a8      	blx	r5
 8005542:	4603      	mov	r3, r0
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	3264      	adds	r2, #100	; 0x64
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	210a      	movs	r1, #10
 800554c:	4618      	mov	r0, r3
 800554e:	4790      	blx	r2
 8005550:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005554:	4618      	mov	r0, r3
 8005556:	f006 fce4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800555a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800555e:	4618      	mov	r0, r3
 8005560:	f006 fcdf 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005564:	f7fe fa0a 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005568:	f00d fd06 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800556c:	4604      	mov	r4, r0
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	3324      	adds	r3, #36	; 0x24
 8005572:	681d      	ldr	r5, [r3, #0]
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68de      	ldr	r6, [r3, #12]
 800557a:	f00d fd0d 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800557e:	4603      	mov	r3, r0
 8005580:	9302      	str	r3, [sp, #8]
 8005582:	23e2      	movs	r3, #226	; 0xe2
 8005584:	9301      	str	r3, [sp, #4]
 8005586:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1b8>)
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	2300      	movs	r3, #0
 800558c:	4632      	mov	r2, r6
 800558e:	4907      	ldr	r1, [pc, #28]	; (80055ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1bc>)
 8005590:	4620      	mov	r0, r4
 8005592:	47a8      	blx	r5

}
 8005594:	bf00      	nop
 8005596:	374c      	adds	r7, #76	; 0x4c
 8005598:	46bd      	mov	sp, r7
 800559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800559c:	08022370 	.word	0x08022370
 80055a0:	08022390 	.word	0x08022390
 80055a4:	200004a0 	.word	0x200004a0
 80055a8:	0802204c 	.word	0x0802204c
 80055ac:	080223cc 	.word	0x080223cc

080055b0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff fd7e 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80055c0:	4a03      	ldr	r2, [pc, #12]	; (80055d0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4618      	mov	r0, r3
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	080258b0 	.word	0x080258b0

080055d4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80055d4:	b590      	push	{r4, r7, lr}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	22e6      	movs	r2, #230	; 0xe6
 80055de:	4906      	ldr	r1, [pc, #24]	; (80055f8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80055e0:	2004      	movs	r0, #4
 80055e2:	f003 fd23 	bl	800902c <_ZnwjPKci>
 80055e6:	4604      	mov	r4, r0
 80055e8:	4620      	mov	r0, r4
 80055ea:	f7ff ffe1 	bl	80055b0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80055ee:	4623      	mov	r3, r4
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd90      	pop	{r4, r7, pc}
 80055f8:	0802204c 	.word	0x0802204c

080055fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4618      	mov	r0, r3
 8005608:	f00c f8fe 	bl	8011808 <_ZN10UtestShellC1Ev>
 800560c:	4a03      	ldr	r2, [pc, #12]	; (800561c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	08025804 	.word	0x08025804

08005620 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005622:	b091      	sub	sp, #68	; 0x44
 8005624:	af04      	add	r7, sp, #16
 8005626:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005628:	4a35      	ldr	r2, [pc, #212]	; (8005700 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe0>)
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005632:	6018      	str	r0, [r3, #0]
 8005634:	3304      	adds	r3, #4
 8005636:	7019      	strb	r1, [r3, #0]
 8005638:	f107 0311 	add.w	r3, r7, #17
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005642:	2300      	movs	r3, #0
 8005644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005646:	f107 030c 	add.w	r3, r7, #12
 800564a:	4618      	mov	r0, r3
 800564c:	f7fa fdf6 	bl	800023c <strlen>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	4293      	cmp	r3, r2
 8005658:	da35      	bge.n	80056c6 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800565a:	f107 0318 	add.w	r3, r7, #24
 800565e:	4929      	ldr	r1, [pc, #164]	; (8005704 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe4>)
 8005660:	4618      	mov	r0, r3
 8005662:	f006 f8a6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005666:	f107 0318 	add.w	r3, r7, #24
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f004 f979 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005672:	4604      	mov	r4, r0
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	681d      	ldr	r5, [r3, #0]
 800567a:	f107 0320 	add.w	r3, r7, #32
 800567e:	4922      	ldr	r1, [pc, #136]	; (8005708 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xe8>)
 8005680:	4618      	mov	r0, r3
 8005682:	f006 f896 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005686:	f107 0320 	add.w	r3, r7, #32
 800568a:	4619      	mov	r1, r3
 800568c:	4620      	mov	r0, r4
 800568e:	47a8      	blx	r5
 8005690:	4603      	mov	r3, r0
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	3264      	adds	r2, #100	; 0x64
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	f107 000c 	add.w	r0, r7, #12
 800569c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800569e:	4401      	add	r1, r0
 80056a0:	7809      	ldrb	r1, [r1, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	4790      	blx	r2
 80056a6:	f107 0320 	add.w	r3, r7, #32
 80056aa:	4618      	mov	r0, r3
 80056ac:	f006 fc39 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80056b0:	f107 0318 	add.w	r3, r7, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f006 fc34 	bl	800bf22 <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80056ba:	f7fe f95f 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80056be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c0:	3301      	adds	r3, #1
 80056c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056c4:	e7bf      	b.n	8005646 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80056c6:	4811      	ldr	r0, [pc, #68]	; (800570c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xec>)
 80056c8:	f7fe f972 	bl	80039b0 <Read_Response>
 80056cc:	62b8      	str	r0, [r7, #40]	; 0x28

	LONGS_EQUAL(1,result);
 80056ce:	f00d fc53 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80056d2:	4604      	mov	r4, r0
 80056d4:	6823      	ldr	r3, [r4, #0]
 80056d6:	3338      	adds	r3, #56	; 0x38
 80056d8:	681d      	ldr	r5, [r3, #0]
 80056da:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80056dc:	f00d fc5c 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80056e0:	4603      	mov	r3, r0
 80056e2:	9302      	str	r3, [sp, #8]
 80056e4:	23f2      	movs	r3, #242	; 0xf2
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	4b09      	ldr	r3, [pc, #36]	; (8005710 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf0>)
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xf4>)
 80056ee:	4632      	mov	r2, r6
 80056f0:	2101      	movs	r1, #1
 80056f2:	4620      	mov	r0, r4
 80056f4:	47a8      	blx	r5

}
 80056f6:	bf00      	nop
 80056f8:	3734      	adds	r7, #52	; 0x34
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fe:	bf00      	nop
 8005700:	080223d8 	.word	0x080223d8
 8005704:	08022370 	.word	0x08022370
 8005708:	08022390 	.word	0x08022390
 800570c:	080223d4 	.word	0x080223d4
 8005710:	0802204c 	.word	0x0802204c
 8005714:	080223a4 	.word	0x080223a4

08005718 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>:


TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fcca 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005728:	4a03      	ldr	r2, [pc, #12]	; (8005738 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev+0x20>)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	601a      	str	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4618      	mov	r0, r3
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	080257e4 	.word	0x080257e4

0800573c <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv>:
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	22f7      	movs	r2, #247	; 0xf7
 8005746:	4906      	ldr	r1, [pc, #24]	; (8005760 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShell10createTestEv+0x24>)
 8005748:	2004      	movs	r0, #4
 800574a:	f003 fc6f 	bl	800902c <_ZnwjPKci>
 800574e:	4604      	mov	r4, r0
 8005750:	4620      	mov	r0, r4
 8005752:	f7ff ffe1 	bl	8005718 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestC1Ev>
 8005756:	4623      	mov	r3, r4
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	0802204c 	.word	0x0802204c

08005764 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>:
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4618      	mov	r0, r3
 8005770:	f00c f84a 	bl	8011808 <_ZN10UtestShellC1Ev>
 8005774:	4a03      	ldr	r2, [pc, #12]	; (8005784 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev+0x20>)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	08025738 	.word	0x08025738

08005788 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv>:
{
 8005788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800578a:	b089      	sub	sp, #36	; 0x24
 800578c:	af04      	add	r7, sp, #16
 800578e:	6078      	str	r0, [r7, #4]
	Status response_state = IDLE;
 8005790:	2305      	movs	r3, #5
 8005792:	73fb      	strb	r3, [r7, #15]

	while(1)
	{
		response_state = Wait_Response((char*)"OK", 1000);
 8005794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005798:	4811      	ldr	r0, [pc, #68]	; (80057e0 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x58>)
 800579a:	f7fe f91b 	bl	80039d4 <Wait_Response>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]
		if(response_state != IDLE)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b05      	cmp	r3, #5
 80057a6:	d100      	bne.n	80057aa <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x22>
		response_state = Wait_Response((char*)"OK", 1000);
 80057a8:	e7f4      	b.n	8005794 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0xc>
			break;
 80057aa:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response_state);
 80057ac:	f00d fbe4 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80057b0:	4604      	mov	r4, r0
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	3338      	adds	r3, #56	; 0x38
 80057b6:	681d      	ldr	r5, [r3, #0]
 80057b8:	7bfe      	ldrb	r6, [r7, #15]
 80057ba:	f00d fbed 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80057be:	4603      	mov	r3, r0
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	f240 1303 	movw	r3, #259	; 0x103
 80057c6:	9301      	str	r3, [sp, #4]
 80057c8:	4b06      	ldr	r3, [pc, #24]	; (80057e4 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x5c>)
 80057ca:	9300      	str	r3, [sp, #0]
 80057cc:	4b06      	ldr	r3, [pc, #24]	; (80057e8 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_Test8testBodyEv+0x60>)
 80057ce:	4632      	mov	r2, r6
 80057d0:	2102      	movs	r1, #2
 80057d2:	4620      	mov	r0, r4
 80057d4:	47a8      	blx	r5

}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057de:	bf00      	nop
 80057e0:	080223d4 	.word	0x080223d4
 80057e4:	0802204c 	.word	0x0802204c
 80057e8:	080223e4 	.word	0x080223e4

080057ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fc60 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80057fc:	4a03      	ldr	r2, [pc, #12]	; (800580c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	601a      	str	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	3708      	adds	r7, #8
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	08025718 	.word	0x08025718

08005810 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	f240 1207 	movw	r2, #263	; 0x107
 800581c:	4906      	ldr	r1, [pc, #24]	; (8005838 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x28>)
 800581e:	2004      	movs	r0, #4
 8005820:	f003 fc04 	bl	800902c <_ZnwjPKci>
 8005824:	4604      	mov	r4, r0
 8005826:	4620      	mov	r0, r4
 8005828:	f7ff ffe0 	bl	80057ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 800582c:	4623      	mov	r3, r4
 800582e:	4618      	mov	r0, r3
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bd90      	pop	{r4, r7, pc}
 8005836:	bf00      	nop
 8005838:	0802204c 	.word	0x0802204c

0800583c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4618      	mov	r0, r3
 8005848:	f00b ffde 	bl	8011808 <_ZN10UtestShellC1Ev>
 800584c:	4a03      	ldr	r2, [pc, #12]	; (800585c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	0802566c 	.word	0x0802566c

08005860 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b091      	sub	sp, #68	; 0x44
 8005864:	af04      	add	r7, sp, #16
 8005866:	6078      	str	r0, [r7, #4]

	Status response_state = IDLE;
 8005868:	2305      	movs	r3, #5
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	char response[10] = "OK\r\n";
 800586e:	4a3b      	ldr	r2, [pc, #236]	; (800595c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xfc>)
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005878:	6018      	str	r0, [r3, #0]
 800587a:	3304      	adds	r3, #4
 800587c:	7019      	strb	r1, [r3, #0]
 800587e:	f107 0311 	add.w	r3, r7, #17
 8005882:	2200      	movs	r2, #0
 8005884:	601a      	str	r2, [r3, #0]
 8005886:	711a      	strb	r2, [r3, #4]

	while(1)
	{
		response_state = Wait_Response((char*)"OK",1000);
 8005888:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800588c:	4834      	ldr	r0, [pc, #208]	; (8005960 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x100>)
 800588e:	f7fe f8a1 	bl	80039d4 <Wait_Response>
 8005892:	4603      	mov	r3, r0
 8005894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		if(response_state != IDLE)
 8005898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800589c:	2b05      	cmp	r3, #5
 800589e:	d141      	bne.n	8005924 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xc4>
			break;
		for(int i=0;i<(int)strlen(response);i++)
 80058a0:	2300      	movs	r3, #0
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a4:	f107 030c 	add.w	r3, r7, #12
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fa fcc7 	bl	800023c <strlen>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b4:	4293      	cmp	r3, r2
 80058b6:	dae7      	bge.n	8005888 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x28>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 80058b8:	f107 0318 	add.w	r3, r7, #24
 80058bc:	4929      	ldr	r1, [pc, #164]	; (8005964 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x104>)
 80058be:	4618      	mov	r0, r3
 80058c0:	f005 ff77 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80058c4:	f107 0318 	add.w	r3, r7, #24
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f004 f84a 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80058d0:	4604      	mov	r4, r0
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	330c      	adds	r3, #12
 80058d6:	681d      	ldr	r5, [r3, #0]
 80058d8:	f107 0320 	add.w	r3, r7, #32
 80058dc:	4922      	ldr	r1, [pc, #136]	; (8005968 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x108>)
 80058de:	4618      	mov	r0, r3
 80058e0:	f005 ff67 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80058e4:	f107 0320 	add.w	r3, r7, #32
 80058e8:	4619      	mov	r1, r3
 80058ea:	4620      	mov	r0, r4
 80058ec:	47a8      	blx	r5
 80058ee:	4603      	mov	r3, r0
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	3264      	adds	r2, #100	; 0x64
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	f107 000c 	add.w	r0, r7, #12
 80058fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058fc:	4401      	add	r1, r0
 80058fe:	7809      	ldrb	r1, [r1, #0]
 8005900:	4618      	mov	r0, r3
 8005902:	4790      	blx	r2
 8005904:	f107 0320 	add.w	r3, r7, #32
 8005908:	4618      	mov	r0, r3
 800590a:	f006 fb0a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800590e:	f107 0318 	add.w	r3, r7, #24
 8005912:	4618      	mov	r0, r3
 8005914:	f006 fb05 	bl	800bf22 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 8005918:	f7fe f830 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int i=0;i<(int)strlen(response);i++)
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	3301      	adds	r3, #1
 8005920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005922:	e7bf      	b.n	80058a4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x44>
			break;
 8005924:	bf00      	nop
		}
	}

	LONGS_EQUAL(FOUND,response_state);
 8005926:	f00d fb27 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800592a:	4604      	mov	r4, r0
 800592c:	6823      	ldr	r3, [r4, #0]
 800592e:	3338      	adds	r3, #56	; 0x38
 8005930:	681d      	ldr	r5, [r3, #0]
 8005932:	f897 602b 	ldrb.w	r6, [r7, #43]	; 0x2b
 8005936:	f00d fb2f 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800593a:	4603      	mov	r3, r0
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	f44f 738d 	mov.w	r3, #282	; 0x11a
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x10c>)
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4b09      	ldr	r3, [pc, #36]	; (8005970 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x110>)
 800594a:	4632      	mov	r2, r6
 800594c:	2100      	movs	r1, #0
 800594e:	4620      	mov	r0, r4
 8005950:	47a8      	blx	r5
}
 8005952:	bf00      	nop
 8005954:	3734      	adds	r7, #52	; 0x34
 8005956:	46bd      	mov	sp, r7
 8005958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595a:	bf00      	nop
 800595c:	080223d8 	.word	0x080223d8
 8005960:	080223d4 	.word	0x080223d4
 8005964:	08022370 	.word	0x08022370
 8005968:	08022390 	.word	0x08022390
 800596c:	0802204c 	.word	0x0802204c
 8005970:	08022418 	.word	0x08022418

08005974 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4618      	mov	r0, r3
 8005980:	f7ff fb9c 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005984:	4a03      	ldr	r2, [pc, #12]	; (8005994 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	0802564c 	.word	0x0802564c

08005998 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	f240 121d 	movw	r2, #285	; 0x11d
 80059a4:	4906      	ldr	r1, [pc, #24]	; (80059c0 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 80059a6:	2004      	movs	r0, #4
 80059a8:	f003 fb40 	bl	800902c <_ZnwjPKci>
 80059ac:	4604      	mov	r4, r0
 80059ae:	4620      	mov	r0, r4
 80059b0:	f7ff ffe0 	bl	8005974 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestC1Ev>
 80059b4:	4623      	mov	r3, r4
 80059b6:	4618      	mov	r0, r3
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd90      	pop	{r4, r7, pc}
 80059be:	bf00      	nop
 80059c0:	0802204c 	.word	0x0802204c

080059c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>:
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f00b ff1a 	bl	8011808 <_ZN10UtestShellC1Ev>
 80059d4:	4a03      	ldr	r2, [pc, #12]	; (80059e4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	601a      	str	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	080255a0 	.word	0x080255a0

080059e8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 80059e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ea:	b08f      	sub	sp, #60	; 0x3c
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	6078      	str	r0, [r7, #4]
	Status response = TIMEOUT_ERROR;
 80059f0:	2302      	movs	r3, #2
 80059f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data",AT_CWMODE_STATION);
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	492f      	ldr	r1, [pc, #188]	; (8005ab8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80059fc:	4618      	mov	r0, r3
 80059fe:	f005 fed8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005a02:	f107 030c 	add.w	r3, r7, #12
 8005a06:	2100      	movs	r1, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f003 ffab 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005a0e:	4604      	mov	r4, r0
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	330c      	adds	r3, #12
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	f107 0314 	add.w	r3, r7, #20
 8005a1a:	4928      	ldr	r1, [pc, #160]	; (8005abc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f005 fec8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005a22:	f107 0314 	add.w	r3, r7, #20
 8005a26:	4619      	mov	r1, r3
 8005a28:	4620      	mov	r0, r4
 8005a2a:	47a8      	blx	r5
 8005a2c:	4604      	mov	r4, r0
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	334c      	adds	r3, #76	; 0x4c
 8005a32:	681d      	ldr	r5, [r3, #0]
 8005a34:	f107 031c 	add.w	r3, r7, #28
 8005a38:	4921      	ldr	r1, [pc, #132]	; (8005ac0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f005 feb9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005a40:	f107 031c 	add.w	r3, r7, #28
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 8005a46:	4619      	mov	r1, r3
 8005a48:	4620      	mov	r0, r4
 8005a4a:	47a8      	blx	r5
 8005a4c:	f107 031c 	add.w	r3, r7, #28
 8005a50:	4618      	mov	r0, r3
 8005a52:	f006 fa66 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005a56:	f107 0314 	add.w	r3, r7, #20
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f006 fa61 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005a60:	f107 030c 	add.w	r3, r7, #12
 8005a64:	4618      	mov	r0, r3
 8005a66:	f006 fa5c 	bl	800bf22 <_ZN12SimpleStringD1Ev>

	while(1)
	{

		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a6a:	4917      	ldr	r1, [pc, #92]	; (8005ac8 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe0>)
 8005a6c:	4817      	ldr	r0, [pc, #92]	; (8005acc <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe4>)
 8005a6e:	f7fd fff3 	bl	8003a58 <Connect_Wifi>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 8005a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a7c:	2b05      	cmp	r3, #5
 8005a7e:	d100      	bne.n	8005a82 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x9a>
		response = Connect_Wifi((char*)"SSID",(char*)"1234");
 8005a80:	e7f3      	b.n	8005a6a <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0x82>
		{
			break;
 8005a82:	bf00      	nop
		}

	}


	LONGS_EQUAL(TIMEOUT_ERROR,response);
 8005a84:	f00d fa78 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	3338      	adds	r3, #56	; 0x38
 8005a8e:	681d      	ldr	r5, [r3, #0]
 8005a90:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8005a94:	f00d fa80 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	f44f 7398 	mov.w	r3, #304	; 0x130
 8005aa0:	9301      	str	r3, [sp, #4]
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xe8>)
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4b0b      	ldr	r3, [pc, #44]	; (8005ad4 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_Test8testBodyEv+0xec>)
 8005aa8:	4632      	mov	r2, r6
 8005aaa:	2102      	movs	r1, #2
 8005aac:	4620      	mov	r0, r4
 8005aae:	47a8      	blx	r5

}
 8005ab0:	bf00      	nop
 8005ab2:	372c      	adds	r7, #44	; 0x2c
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab8:	08022370 	.word	0x08022370
 8005abc:	08022374 	.word	0x08022374
 8005ac0:	08022388 	.word	0x08022388
 8005ac4:	08022014 	.word	0x08022014
 8005ac8:	08022444 	.word	0x08022444
 8005acc:	0802244c 	.word	0x0802244c
 8005ad0:	0802204c 	.word	0x0802204c
 8005ad4:	08022454 	.word	0x08022454

08005ad8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff faea 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ae8:	4a03      	ldr	r2, [pc, #12]	; (8005af8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev+0x20>)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	08025580 	.word	0x08025580

08005afc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv>:
 8005afc:	b590      	push	{r4, r7, lr}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	f44f 729a 	mov.w	r2, #308	; 0x134
 8005b08:	4906      	ldr	r1, [pc, #24]	; (8005b24 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShell10createTestEv+0x28>)
 8005b0a:	2004      	movs	r0, #4
 8005b0c:	f003 fa8e 	bl	800902c <_ZnwjPKci>
 8005b10:	4604      	mov	r4, r0
 8005b12:	4620      	mov	r0, r4
 8005b14:	f7ff ffe0 	bl	8005ad8 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestC1Ev>
 8005b18:	4623      	mov	r3, r4
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd90      	pop	{r4, r7, pc}
 8005b22:	bf00      	nop
 8005b24:	0802204c 	.word	0x0802204c

08005b28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f00b fe68 	bl	8011808 <_ZN10UtestShellC1Ev>
 8005b38:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev+0x20>)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	080254d4 	.word	0x080254d4

08005b4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv>:
{
 8005b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4e:	b0e1      	sub	sp, #388	; 0x184
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005b56:	4a78      	ldr	r2, [pc, #480]	; (8005d38 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1ec>)
 8005b58:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	2296      	movs	r2, #150	; 0x96
 8005b60:	4618      	mov	r0, r3
 8005b62:	f019 faf7 	bl	801f154 <memcpy>
	{ "OK\r\n",									// station mode response (AT+CWMODE=1)
	  "OK\r\n",									// check disconnect response (AT+CWQAP)
	  "ERROR\r\n"								// connect wifi command response (AT+CWJAP="SSID","password")
	};

	char fake_tx_buffer[3][50] =
 8005b66:	f107 0308 	add.w	r3, r7, #8
 8005b6a:	4a74      	ldr	r2, [pc, #464]	; (8005d3c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f0>)
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	4611      	mov	r1, r2
 8005b70:	2396      	movs	r3, #150	; 0x96
 8005b72:	461a      	mov	r2, r3
 8005b74:	f019 faee 	bl	801f154 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005b7e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	dc46      	bgt.n	8005c14 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005b86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b8a:	496d      	ldr	r1, [pc, #436]	; (8005d40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f005 fe10 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005b92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f003 fee3 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	6823      	ldr	r3, [r4, #0]
 8005ba2:	330c      	adds	r3, #12
 8005ba4:	681d      	ldr	r5, [r3, #0]
 8005ba6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005baa:	4966      	ldr	r1, [pc, #408]	; (8005d44 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f8>)
 8005bac:	4618      	mov	r0, r3
 8005bae:	f005 fe00 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005bb2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	47a8      	blx	r5
 8005bbc:	4604      	mov	r4, r0
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	334c      	adds	r3, #76	; 0x4c
 8005bc2:	681d      	ldr	r5, [r3, #0]
 8005bc4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bc8:	495f      	ldr	r1, [pc, #380]	; (8005d48 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1fc>)
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f005 fdf1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005bd0:	f107 0208 	add.w	r2, r7, #8
 8005bd4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005bd8:	2132      	movs	r1, #50	; 0x32
 8005bda:	fb01 f303 	mul.w	r3, r1, r3
 8005bde:	441a      	add	r2, r3
 8005be0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005be4:	4619      	mov	r1, r3
 8005be6:	4620      	mov	r0, r4
 8005be8:	47a8      	blx	r5
 8005bea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f006 f997 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005bf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f006 f992 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005bfe:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005c02:	4618      	mov	r0, r3
 8005c04:	f006 f98d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005c08:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005c12:	e7b4      	b.n	8005b7e <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x32>
	}
	Status response = IDLE;
 8005c14:	2305      	movs	r3, #5
 8005c16:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
	int i = 0;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005c20:	494a      	ldr	r1, [pc, #296]	; (8005d4c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x200>)
 8005c22:	484b      	ldr	r0, [pc, #300]	; (8005d50 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x204>)
 8005c24:	f7fd ff18 	bl	8003a58 <Connect_Wifi>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005c2e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c32:	2b04      	cmp	r3, #4
 8005c34:	d065      	beq.n	8005d02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c36:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d061      	beq.n	8005d02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
 8005c3e:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d05d      	beq.n	8005d02 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1b6>
		{
			break;
		}

		if(i<3)
 8005c46:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	dce8      	bgt.n	8005c20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005c54:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005c58:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005c5c:	2132      	movs	r1, #50	; 0x32
 8005c5e:	fb01 f303 	mul.w	r3, r1, r3
 8005c62:	4413      	add	r3, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7fa fae9 	bl	800023c <strlen>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005c72:	4293      	cmp	r3, r2
 8005c74:	da3f      	bge.n	8005cf6 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1aa>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005c76:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c7a:	4931      	ldr	r1, [pc, #196]	; (8005d40 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x1f4>)
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f005 fd98 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005c82:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005c86:	2100      	movs	r1, #0
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f003 fe6b 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005c8e:	4604      	mov	r4, r0
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	681d      	ldr	r5, [r3, #0]
 8005c96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005c9a:	492e      	ldr	r1, [pc, #184]	; (8005d54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x208>)
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f005 fd88 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005ca2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4620      	mov	r0, r4
 8005caa:	47a8      	blx	r5
 8005cac:	4603      	mov	r3, r0
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	3264      	adds	r2, #100	; 0x64
 8005cb2:	6812      	ldr	r2, [r2, #0]
 8005cb4:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005cb8:	2032      	movs	r0, #50	; 0x32
 8005cba:	fb00 f101 	mul.w	r1, r0, r1
 8005cbe:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005cc2:	4408      	add	r0, r1
 8005cc4:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005cc8:	4401      	add	r1, r0
 8005cca:	39d0      	subs	r1, #208	; 0xd0
 8005ccc:	7809      	ldrb	r1, [r1, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	4790      	blx	r2
 8005cd2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f006 f923 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005cdc:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f006 f91e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005ce6:	f7fd fe49 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005cea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005cf4:	e7ae      	b.n	8005c54 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x108>
			}
			i++;
 8005cf6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005d00:	e78e      	b.n	8005c20 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0xd4>
	LONGS_EQUAL(CONNECTION_ERROR,response);
 8005d02:	f00d f939 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8005d06:	4604      	mov	r4, r0
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	3338      	adds	r3, #56	; 0x38
 8005d0c:	681d      	ldr	r5, [r3, #0]
 8005d0e:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005d12:	f00d f941 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005d16:	4603      	mov	r3, r0
 8005d18:	9302      	str	r3, [sp, #8]
 8005d1a:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	4b0d      	ldr	r3, [pc, #52]	; (8005d58 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x20c>)
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_Test8testBodyEv+0x210>)
 8005d26:	4632      	mov	r2, r6
 8005d28:	2104      	movs	r1, #4
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	47a8      	blx	r5

}
 8005d2e:	bf00      	nop
 8005d30:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d38:	080224b0 	.word	0x080224b0
 8005d3c:	08022548 	.word	0x08022548
 8005d40:	08022370 	.word	0x08022370
 8005d44:	08022374 	.word	0x08022374
 8005d48:	08022388 	.word	0x08022388
 8005d4c:	08022444 	.word	0x08022444
 8005d50:	0802244c 	.word	0x0802244c
 8005d54:	08022390 	.word	0x08022390
 8005d58:	0802204c 	.word	0x0802204c
 8005d5c:	08022480 	.word	0x08022480

08005d60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff f9a6 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev+0x20>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3708      	adds	r7, #8
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	080254b4 	.word	0x080254b4

08005d84 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv>:
 8005d84:	b590      	push	{r4, r7, lr}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	f44f 72b0 	mov.w	r2, #352	; 0x160
 8005d90:	4906      	ldr	r1, [pc, #24]	; (8005dac <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShell10createTestEv+0x28>)
 8005d92:	2004      	movs	r0, #4
 8005d94:	f003 f94a 	bl	800902c <_ZnwjPKci>
 8005d98:	4604      	mov	r4, r0
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	f7ff ffe0 	bl	8005d60 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestC1Ev>
 8005da0:	4623      	mov	r3, r4
 8005da2:	4618      	mov	r0, r3
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd90      	pop	{r4, r7, pc}
 8005daa:	bf00      	nop
 8005dac:	0802204c 	.word	0x0802204c

08005db0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>:
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f00b fd24 	bl	8011808 <_ZN10UtestShellC1Ev>
 8005dc0:	4a03      	ldr	r2, [pc, #12]	; (8005dd0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev+0x20>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3708      	adds	r7, #8
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	08025408 	.word	0x08025408

08005dd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv>:
{
 8005dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005dd6:	b0e1      	sub	sp, #388	; 0x184
 8005dd8:	af04      	add	r7, sp, #16
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	6018      	str	r0, [r3, #0]
	char response_arr[3][50] =
 8005dde:	4a77      	ldr	r2, [pc, #476]	; (8005fbc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1e8>)
 8005de0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005de4:	4611      	mov	r1, r2
 8005de6:	2296      	movs	r2, #150	; 0x96
 8005de8:	4618      	mov	r0, r3
 8005dea:	f019 f9b3 	bl	801f154 <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char fake_tx_buffer[3][50] =
 8005dee:	f107 0308 	add.w	r3, r7, #8
 8005df2:	4a73      	ldr	r2, [pc, #460]	; (8005fc0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1ec>)
 8005df4:	4618      	mov	r0, r3
 8005df6:	4611      	mov	r1, r2
 8005df8:	2396      	movs	r3, #150	; 0x96
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f019 f9aa 	bl	801f154 <memcpy>
		"AT+CWMODE=1\r\n",
		"AT+CWQAP\r\n",
		"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 8005e00:	2300      	movs	r3, #0
 8005e02:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	dc46      	bgt.n	8005e9c <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xc8>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_tx_buffer[i]);
 8005e0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e12:	496c      	ldr	r1, [pc, #432]	; (8005fc4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005e14:	4618      	mov	r0, r3
 8005e16:	f005 fccc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005e1a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e1e:	2100      	movs	r1, #0
 8005e20:	4618      	mov	r0, r3
 8005e22:	f003 fd9f 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005e26:	4604      	mov	r4, r0
 8005e28:	6823      	ldr	r3, [r4, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	681d      	ldr	r5, [r3, #0]
 8005e2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e32:	4965      	ldr	r1, [pc, #404]	; (8005fc8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f4>)
 8005e34:	4618      	mov	r0, r3
 8005e36:	f005 fcbc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005e3a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4620      	mov	r0, r4
 8005e42:	47a8      	blx	r5
 8005e44:	4604      	mov	r4, r0
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	334c      	adds	r3, #76	; 0x4c
 8005e4a:	681d      	ldr	r5, [r3, #0]
 8005e4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e50:	495e      	ldr	r1, [pc, #376]	; (8005fcc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f8>)
 8005e52:	4618      	mov	r0, r3
 8005e54:	f005 fcad 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005e58:	f107 0208 	add.w	r2, r7, #8
 8005e5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e60:	2132      	movs	r1, #50	; 0x32
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	441a      	add	r2, r3
 8005e68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	4620      	mov	r0, r4
 8005e70:	47a8      	blx	r5
 8005e72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8005e76:	4618      	mov	r0, r3
 8005e78:	f006 f853 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005e7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8005e80:	4618      	mov	r0, r3
 8005e82:	f006 f84e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005e86:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f006 f849 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 8005e90:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005e94:	3301      	adds	r3, #1
 8005e96:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8005e9a:	e7b4      	b.n	8005e06 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x32>
	}
	Status response;
	int i = 0;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	while(1)
	{
		response = Connect_Wifi((char*)"SSID", (char*)"1234");
 8005ea2:	494b      	ldr	r1, [pc, #300]	; (8005fd0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1fc>)
 8005ea4:	484b      	ldr	r0, [pc, #300]	; (8005fd4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x200>)
 8005ea6:	f7fd fdd7 	bl	8003a58 <Connect_Wifi>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3163 	strb.w	r3, [r7, #355]	; 0x163
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8005eb0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d065      	beq.n	8005f84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005eb8:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d061      	beq.n	8005f84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
 8005ec0:	f897 3163 	ldrb.w	r3, [r7, #355]	; 0x163
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d05d      	beq.n	8005f84 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1b0>
		{
			break;
		}

		if(i<3)
 8005ec8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	dce8      	bgt.n	8005ea2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005ed6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8005eda:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ede:	2132      	movs	r1, #50	; 0x32
 8005ee0:	fb01 f303 	mul.w	r3, r1, r3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fa f9a8 	bl	800023c <strlen>
 8005eec:	4603      	mov	r3, r0
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	da3f      	bge.n	8005f78 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1a4>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8005ef8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005efc:	4931      	ldr	r1, [pc, #196]	; (8005fc4 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x1f0>)
 8005efe:	4618      	mov	r0, r3
 8005f00:	f005 fc57 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005f04:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f08:	2100      	movs	r1, #0
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f003 fd2a 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005f10:	4604      	mov	r4, r0
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	681d      	ldr	r5, [r3, #0]
 8005f18:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f1c:	492e      	ldr	r1, [pc, #184]	; (8005fd8 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x204>)
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f005 fc47 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8005f24:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	47a8      	blx	r5
 8005f2e:	4603      	mov	r3, r0
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	3264      	adds	r2, #100	; 0x64
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 8005f3a:	2032      	movs	r0, #50	; 0x32
 8005f3c:	fb00 f101 	mul.w	r1, r0, r1
 8005f40:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8005f44:	4408      	add	r0, r1
 8005f46:	f8d7 1164 	ldr.w	r1, [r7, #356]	; 0x164
 8005f4a:	4401      	add	r1, r0
 8005f4c:	39d0      	subs	r1, #208	; 0xd0
 8005f4e:	7809      	ldrb	r1, [r1, #0]
 8005f50:	4618      	mov	r0, r3
 8005f52:	4790      	blx	r2
 8005f54:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f005 ffe2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8005f5e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005f62:	4618      	mov	r0, r3
 8005f64:	f005 ffdd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8005f68:	f7fd fd08 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8005f6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005f70:	3301      	adds	r3, #1
 8005f72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8005f76:	e7ae      	b.n	8005ed6 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x102>
			}
			i++;
 8005f78:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
		}

	}
 8005f82:	e78e      	b.n	8005ea2 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0xce>
	LONGS_EQUAL(CONNECTION_OK,response);
 8005f84:	f00c fff8 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8005f88:	4604      	mov	r4, r0
 8005f8a:	6823      	ldr	r3, [r4, #0]
 8005f8c:	3338      	adds	r3, #56	; 0x38
 8005f8e:	681d      	ldr	r5, [r3, #0]
 8005f90:	f897 6163 	ldrb.w	r6, [r7, #355]	; 0x163
 8005f94:	f00d f800 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	9302      	str	r3, [sp, #8]
 8005f9c:	f44f 73c4 	mov.w	r3, #392	; 0x188
 8005fa0:	9301      	str	r3, [sp, #4]
 8005fa2:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x208>)
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	; (8005fe0 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_Test8testBodyEv+0x20c>)
 8005fa8:	4632      	mov	r2, r6
 8005faa:	2103      	movs	r1, #3
 8005fac:	4620      	mov	r0, r4
 8005fae:	47a8      	blx	r5

}
 8005fb0:	bf00      	nop
 8005fb2:	f507 77ba 	add.w	r7, r7, #372	; 0x174
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	0802260c 	.word	0x0802260c
 8005fc0:	08022548 	.word	0x08022548
 8005fc4:	08022370 	.word	0x08022370
 8005fc8:	08022374 	.word	0x08022374
 8005fcc:	08022388 	.word	0x08022388
 8005fd0:	08022444 	.word	0x08022444
 8005fd4:	0802244c 	.word	0x0802244c
 8005fd8:	08022390 	.word	0x08022390
 8005fdc:	0802204c 	.word	0x0802204c
 8005fe0:	080225e0 	.word	0x080225e0

08005fe4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7ff f864 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005ff4:	4a03      	ldr	r2, [pc, #12]	; (8006004 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev+0x20>)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	080253e8 	.word	0x080253e8

08006008 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv>:
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006014:	4906      	ldr	r1, [pc, #24]	; (8006030 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShell10createTestEv+0x28>)
 8006016:	2004      	movs	r0, #4
 8006018:	f003 f808 	bl	800902c <_ZnwjPKci>
 800601c:	4604      	mov	r4, r0
 800601e:	4620      	mov	r0, r4
 8006020:	f7ff ffe0 	bl	8005fe4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestC1Ev>
 8006024:	4623      	mov	r3, r4
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	bd90      	pop	{r4, r7, pc}
 800602e:	bf00      	nop
 8006030:	0802204c 	.word	0x0802204c

08006034 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>:
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	4618      	mov	r0, r3
 8006040:	f00b fbe2 	bl	8011808 <_ZN10UtestShellC1Ev>
 8006044:	4a03      	ldr	r2, [pc, #12]	; (8006054 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev+0x20>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	0802533c 	.word	0x0802533c

08006058 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv>:
{
 8006058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800605a:	b08f      	sub	sp, #60	; 0x3c
 800605c:	af04      	add	r7, sp, #16
 800605e:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	492e      	ldr	r1, [pc, #184]	; (8006120 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xc8>)
 8006066:	4618      	mov	r0, r3
 8006068:	f005 fba3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800606c:	f107 030c 	add.w	r3, r7, #12
 8006070:	2100      	movs	r1, #0
 8006072:	4618      	mov	r0, r3
 8006074:	f003 fc76 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8006078:	4604      	mov	r4, r0
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	330c      	adds	r3, #12
 800607e:	681d      	ldr	r5, [r3, #0]
 8006080:	f107 0314 	add.w	r3, r7, #20
 8006084:	4927      	ldr	r1, [pc, #156]	; (8006124 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xcc>)
 8006086:	4618      	mov	r0, r3
 8006088:	f005 fb93 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800608c:	f107 0314 	add.w	r3, r7, #20
 8006090:	4619      	mov	r1, r3
 8006092:	4620      	mov	r0, r4
 8006094:	47a8      	blx	r5
 8006096:	4604      	mov	r4, r0
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	334c      	adds	r3, #76	; 0x4c
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	f107 031c 	add.w	r3, r7, #28
 80060a2:	4921      	ldr	r1, [pc, #132]	; (8006128 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd0>)
 80060a4:	4618      	mov	r0, r3
 80060a6:	f005 fb84 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80060aa:	f107 031c 	add.w	r3, r7, #28
 80060ae:	4a1f      	ldr	r2, [pc, #124]	; (800612c <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd4>)
 80060b0:	4619      	mov	r1, r3
 80060b2:	4620      	mov	r0, r4
 80060b4:	47a8      	blx	r5
 80060b6:	f107 031c 	add.w	r3, r7, #28
 80060ba:	4618      	mov	r0, r3
 80060bc:	f005 ff31 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80060c0:	f107 0314 	add.w	r3, r7, #20
 80060c4:	4618      	mov	r0, r3
 80060c6:	f005 ff2c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80060ca:	f107 030c 	add.w	r3, r7, #12
 80060ce:	4618      	mov	r0, r3
 80060d0:	f005 ff27 	bl	800bf22 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 80060d4:	f7fd fe0e 	bl	8003cf4 <Disconnect_Wifi>
 80060d8:	4603      	mov	r3, r0
 80060da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if(response != IDLE)
 80060de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d100      	bne.n	80060e8 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x90>
		response = Disconnect_Wifi();
 80060e6:	e7f5      	b.n	80060d4 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0x7c>
			break;
 80060e8:	bf00      	nop

	}

	LONGS_EQUAL(TIMEOUT_ERROR,response);
 80060ea:	f00c ff45 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80060ee:	4604      	mov	r4, r0
 80060f0:	6823      	ldr	r3, [r4, #0]
 80060f2:	3338      	adds	r3, #56	; 0x38
 80060f4:	681d      	ldr	r5, [r3, #0]
 80060f6:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 80060fa:	f00c ff4d 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80060fe:	4603      	mov	r3, r0
 8006100:	9302      	str	r3, [sp, #8]
 8006102:	f240 139b 	movw	r3, #411	; 0x19b
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	4b09      	ldr	r3, [pc, #36]	; (8006130 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xd8>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_Test8testBodyEv+0xdc>)
 800610e:	4632      	mov	r2, r6
 8006110:	2102      	movs	r1, #2
 8006112:	4620      	mov	r0, r4
 8006114:	47a8      	blx	r5
}
 8006116:	bf00      	nop
 8006118:	372c      	adds	r7, #44	; 0x2c
 800611a:	46bd      	mov	sp, r7
 800611c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800611e:	bf00      	nop
 8006120:	08022370 	.word	0x08022370
 8006124:	08022374 	.word	0x08022374
 8006128:	08022388 	.word	0x08022388
 800612c:	08022024 	.word	0x08022024
 8006130:	0802204c 	.word	0x0802204c
 8006134:	08022454 	.word	0x08022454

08006138 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe ffba 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006148:	4a03      	ldr	r2, [pc, #12]	; (8006158 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev+0x20>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	0802531c 	.word	0x0802531c

0800615c <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv>:
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8006168:	4906      	ldr	r1, [pc, #24]	; (8006184 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShell10createTestEv+0x28>)
 800616a:	2004      	movs	r0, #4
 800616c:	f002 ff5e 	bl	800902c <_ZnwjPKci>
 8006170:	4604      	mov	r4, r0
 8006172:	4620      	mov	r0, r4
 8006174:	f7ff ffe0 	bl	8006138 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestC1Ev>
 8006178:	4623      	mov	r3, r4
 800617a:	4618      	mov	r0, r3
 800617c:	370c      	adds	r7, #12
 800617e:	46bd      	mov	sp, r7
 8006180:	bd90      	pop	{r4, r7, pc}
 8006182:	bf00      	nop
 8006184:	0802204c 	.word	0x0802204c

08006188 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>:
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4618      	mov	r0, r3
 8006194:	f00b fb38 	bl	8011808 <_ZN10UtestShellC1Ev>
 8006198:	4a03      	ldr	r2, [pc, #12]	; (80061a8 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev+0x20>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	08025270 	.word	0x08025270

080061ac <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv>:
{
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	b093      	sub	sp, #76	; 0x4c
 80061b0:	af04      	add	r7, sp, #16
 80061b2:	6078      	str	r0, [r7, #4]
	Status response;

	mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", AT_CWQAP);
 80061b4:	f107 0308 	add.w	r3, r7, #8
 80061b8:	494a      	ldr	r1, [pc, #296]	; (80062e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 80061ba:	4618      	mov	r0, r3
 80061bc:	f005 faf9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80061c0:	f107 0308 	add.w	r3, r7, #8
 80061c4:	2100      	movs	r1, #0
 80061c6:	4618      	mov	r0, r3
 80061c8:	f003 fbcc 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80061cc:	4604      	mov	r4, r0
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	681d      	ldr	r5, [r3, #0]
 80061d4:	f107 0310 	add.w	r3, r7, #16
 80061d8:	4943      	ldr	r1, [pc, #268]	; (80062e8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x13c>)
 80061da:	4618      	mov	r0, r3
 80061dc:	f005 fae9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80061e0:	f107 0310 	add.w	r3, r7, #16
 80061e4:	4619      	mov	r1, r3
 80061e6:	4620      	mov	r0, r4
 80061e8:	47a8      	blx	r5
 80061ea:	4604      	mov	r4, r0
 80061ec:	6823      	ldr	r3, [r4, #0]
 80061ee:	334c      	adds	r3, #76	; 0x4c
 80061f0:	681d      	ldr	r5, [r3, #0]
 80061f2:	f107 0318 	add.w	r3, r7, #24
 80061f6:	493d      	ldr	r1, [pc, #244]	; (80062ec <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x140>)
 80061f8:	4618      	mov	r0, r3
 80061fa:	f005 fada 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80061fe:	f107 0318 	add.w	r3, r7, #24
 8006202:	4a3b      	ldr	r2, [pc, #236]	; (80062f0 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x144>)
 8006204:	4619      	mov	r1, r3
 8006206:	4620      	mov	r0, r4
 8006208:	47a8      	blx	r5
 800620a:	f107 0318 	add.w	r3, r7, #24
 800620e:	4618      	mov	r0, r3
 8006210:	f005 fe87 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8006214:	f107 0310 	add.w	r3, r7, #16
 8006218:	4618      	mov	r0, r3
 800621a:	f005 fe82 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800621e:	f107 0308 	add.w	r3, r7, #8
 8006222:	4618      	mov	r0, r3
 8006224:	f005 fe7d 	bl	800bf22 <_ZN12SimpleStringD1Ev>

	while(1)
	{
		response = Disconnect_Wifi();
 8006228:	f7fd fd64 	bl	8003cf4 <Disconnect_Wifi>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		if(response != IDLE)
 8006232:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006236:	2b05      	cmp	r3, #5
 8006238:	d139      	bne.n	80062ae <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x102>
			break;

		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 800623a:	2300      	movs	r3, #0
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
 800623e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006240:	2b01      	cmp	r3, #1
 8006242:	dcf1      	bgt.n	8006228 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x7c>
		{
			mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)AT_RESPONSE_OK[j]);
 8006244:	f107 0320 	add.w	r3, r7, #32
 8006248:	4926      	ldr	r1, [pc, #152]	; (80062e4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x138>)
 800624a:	4618      	mov	r0, r3
 800624c:	f005 fab1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8006250:	f107 0320 	add.w	r3, r7, #32
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f003 fb84 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800625c:	4604      	mov	r4, r0
 800625e:	6823      	ldr	r3, [r4, #0]
 8006260:	330c      	adds	r3, #12
 8006262:	681d      	ldr	r5, [r3, #0]
 8006264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006268:	4922      	ldr	r1, [pc, #136]	; (80062f4 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x148>)
 800626a:	4618      	mov	r0, r3
 800626c:	f005 faa1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8006270:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006274:	4619      	mov	r1, r3
 8006276:	4620      	mov	r0, r4
 8006278:	47a8      	blx	r5
 800627a:	4603      	mov	r3, r0
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	3264      	adds	r2, #100	; 0x64
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	481d      	ldr	r0, [pc, #116]	; (80062f8 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x14c>)
 8006284:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006286:	4401      	add	r1, r0
 8006288:	7809      	ldrb	r1, [r1, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	4790      	blx	r2
 800628e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006292:	4618      	mov	r0, r3
 8006294:	f005 fe45 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8006298:	f107 0320 	add.w	r3, r7, #32
 800629c:	4618      	mov	r0, r3
 800629e:	f005 fe40 	bl	800bf22 <_ZN12SimpleStringD1Ev>
			ESP_UART_ReceiveHandler();
 80062a2:	f7fd fb6b 	bl	800397c <ESP_UART_ReceiveHandler>
		for(int j=0;j<(int)strlen(AT_RESPONSE_OK);j++)
 80062a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a8:	3301      	adds	r3, #1
 80062aa:	637b      	str	r3, [r7, #52]	; 0x34
 80062ac:	e7c7      	b.n	800623e <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x92>
			break;
 80062ae:	bf00      	nop
		}

	}

	LONGS_EQUAL(FOUND,response);
 80062b0:	f00c fe62 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80062b4:	4604      	mov	r4, r0
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	3338      	adds	r3, #56	; 0x38
 80062ba:	681d      	ldr	r5, [r3, #0]
 80062bc:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80062c0:	f00c fe6a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80062c4:	4603      	mov	r3, r0
 80062c6:	9302      	str	r3, [sp, #8]
 80062c8:	f240 13b3 	movw	r3, #435	; 0x1b3
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x150>)
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_Test8testBodyEv+0x154>)
 80062d4:	4632      	mov	r2, r6
 80062d6:	2100      	movs	r1, #0
 80062d8:	4620      	mov	r0, r4
 80062da:	47a8      	blx	r5
}
 80062dc:	bf00      	nop
 80062de:	373c      	adds	r7, #60	; 0x3c
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062e4:	08022370 	.word	0x08022370
 80062e8:	08022374 	.word	0x08022374
 80062ec:	08022388 	.word	0x08022388
 80062f0:	08022024 	.word	0x08022024
 80062f4:	08022390 	.word	0x08022390
 80062f8:	080223d4 	.word	0x080223d4
 80062fc:	0802204c 	.word	0x0802204c
 8006300:	080226a4 	.word	0x080226a4

08006304 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fed4 	bl	80050bc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8006314:	4a03      	ldr	r2, [pc, #12]	; (8006324 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev+0x20>)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	08025250 	.word	0x08025250

08006328 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv>:
 8006328:	b590      	push	{r4, r7, lr}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	f240 12b5 	movw	r2, #437	; 0x1b5
 8006334:	4906      	ldr	r1, [pc, #24]	; (8006350 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShell10createTestEv+0x28>)
 8006336:	2004      	movs	r0, #4
 8006338:	f002 fe78 	bl	800902c <_ZnwjPKci>
 800633c:	4604      	mov	r4, r0
 800633e:	4620      	mov	r0, r4
 8006340:	f7ff ffe0 	bl	8006304 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestC1Ev>
 8006344:	4623      	mov	r3, r4
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	bd90      	pop	{r4, r7, pc}
 800634e:	bf00      	nop
 8006350:	0802204c 	.word	0x0802204c

08006354 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>:
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4618      	mov	r0, r3
 8006360:	f00b fa52 	bl	8011808 <_ZN10UtestShellC1Ev>
 8006364:	4a03      	ldr	r2, [pc, #12]	; (8006374 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev+0x20>)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	080251a4 	.word	0x080251a4

08006378 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv>:
{
 8006378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800637a:	b0bf      	sub	sp, #252	; 0xfc
 800637c:	af04      	add	r7, sp, #16
 800637e:	6078      	str	r0, [r7, #4]
	char response_arr[3][50] =
 8006380:	4a75      	ldr	r2, [pc, #468]	; (8006558 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e0>)
 8006382:	f107 0318 	add.w	r3, r7, #24
 8006386:	4611      	mov	r1, r2
 8006388:	2296      	movs	r2, #150	; 0x96
 800638a:	4618      	mov	r0, r3
 800638c:	f018 fee2 	bl	801f154 <memcpy>
	{ "OK\r\n",									// station mode response
	  "OK\r\n",								// check wifi connection response
	  "OK\r\n"								// connect wifi command response
	};

	char *fake_command_buffer[3] =
 8006390:	4a72      	ldr	r2, [pc, #456]	; (800655c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e4>)
 8006392:	f107 030c 	add.w	r3, r7, #12
 8006396:	ca07      	ldmia	r2, {r0, r1, r2}
 8006398:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		(char*)"AT+CWMODE=1\r\n",
		(char*)"AT+CWQAP\r\n",
		(char*)"AT+CWJAP=\"SSID\",\"1234\"\r\n"
	};

	for(int i=0;i<3;i++)
 800639c:	2300      	movs	r3, #0
 800639e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	dc46      	bgt.n	8006438 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc0>
	{
		mock().expectOneCall("UART_Transmit_Fake").withStringParameter("data", fake_command_buffer[i]);
 80063aa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80063ae:	496c      	ldr	r1, [pc, #432]	; (8006560 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e8>)
 80063b0:	4618      	mov	r0, r3
 80063b2:	f005 f9fe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80063b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80063ba:	2100      	movs	r1, #0
 80063bc:	4618      	mov	r0, r3
 80063be:	f003 fad1 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80063c2:	4604      	mov	r4, r0
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	330c      	adds	r3, #12
 80063c8:	681d      	ldr	r5, [r3, #0]
 80063ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80063ce:	4965      	ldr	r1, [pc, #404]	; (8006564 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ec>)
 80063d0:	4618      	mov	r0, r3
 80063d2:	f005 f9ee 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80063d6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80063da:	4619      	mov	r1, r3
 80063dc:	4620      	mov	r0, r4
 80063de:	47a8      	blx	r5
 80063e0:	4604      	mov	r4, r0
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	334c      	adds	r3, #76	; 0x4c
 80063e6:	681d      	ldr	r5, [r3, #0]
 80063e8:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80063ec:	495e      	ldr	r1, [pc, #376]	; (8006568 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f0>)
 80063ee:	4618      	mov	r0, r3
 80063f0:	f005 f9df 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80063f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80063fe:	4413      	add	r3, r2
 8006400:	f853 2cdc 	ldr.w	r2, [r3, #-220]
 8006404:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006408:	4619      	mov	r1, r3
 800640a:	4620      	mov	r0, r4
 800640c:	47a8      	blx	r5
 800640e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006412:	4618      	mov	r0, r3
 8006414:	f005 fd85 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8006418:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800641c:	4618      	mov	r0, r3
 800641e:	f005 fd80 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8006422:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006426:	4618      	mov	r0, r3
 8006428:	f005 fd7b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	for(int i=0;i<3;i++)
 800642c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006430:	3301      	adds	r3, #1
 8006432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006436:	e7b4      	b.n	80063a2 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x2a>
	}
	Status response;
	int i = 0;
 8006438:	2300      	movs	r3, #0
 800643a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	while(1)
	{
		response = Command_Process(fake_command_buffer, 3);
 800643e:	f107 030c 	add.w	r3, r7, #12
 8006442:	2103      	movs	r1, #3
 8006444:	4618      	mov	r0, r3
 8006446:	f7fd fc99 	bl	8003d7c <Command_Process>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		if(response == CONNECTION_ERROR || response == CONNECTION_OK || response == TIMEOUT_ERROR)
 8006450:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006454:	2b04      	cmp	r3, #4
 8006456:	d065      	beq.n	8006524 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
 8006458:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800645c:	2b03      	cmp	r3, #3
 800645e:	d061      	beq.n	8006524 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
 8006460:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8006464:	2b02      	cmp	r3, #2
 8006466:	d05d      	beq.n	8006524 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1ac>
		{
			break;
		}

		if(i<3)
 8006468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646c:	2b02      	cmp	r3, #2
 800646e:	dce6      	bgt.n	800643e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc6>
		{
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 8006470:	2300      	movs	r3, #0
 8006472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006476:	f107 0218 	add.w	r2, r7, #24
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647e:	2132      	movs	r1, #50	; 0x32
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	4413      	add	r3, r2
 8006486:	4618      	mov	r0, r3
 8006488:	f7f9 fed8 	bl	800023c <strlen>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006494:	4293      	cmp	r3, r2
 8006496:	da3f      	bge.n	8006518 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1a0>
			{
				mock().expectOneCall("UART_Receive_Fake").andReturnValue((int)response_arr[i][j]);
 8006498:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800649c:	4930      	ldr	r1, [pc, #192]	; (8006560 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1e8>)
 800649e:	4618      	mov	r0, r3
 80064a0:	f005 f987 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80064a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80064a8:	2100      	movs	r1, #0
 80064aa:	4618      	mov	r0, r3
 80064ac:	f003 fa5a 	bl	8009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80064b0:	4604      	mov	r4, r0
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	330c      	adds	r3, #12
 80064b6:	681d      	ldr	r5, [r3, #0]
 80064b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064bc:	492b      	ldr	r1, [pc, #172]	; (800656c <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f4>)
 80064be:	4618      	mov	r0, r3
 80064c0:	f005 f977 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80064c4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064c8:	4619      	mov	r1, r3
 80064ca:	4620      	mov	r0, r4
 80064cc:	47a8      	blx	r5
 80064ce:	4603      	mov	r3, r0
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	3264      	adds	r2, #100	; 0x64
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80064da:	2032      	movs	r0, #50	; 0x32
 80064dc:	fb00 f101 	mul.w	r1, r0, r1
 80064e0:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 80064e4:	4408      	add	r0, r1
 80064e6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80064ea:	4401      	add	r1, r0
 80064ec:	39d0      	subs	r1, #208	; 0xd0
 80064ee:	7809      	ldrb	r1, [r1, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	4790      	blx	r2
 80064f4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80064f8:	4618      	mov	r0, r3
 80064fa:	f005 fd12 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80064fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006502:	4618      	mov	r0, r3
 8006504:	f005 fd0d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
				ESP_UART_ReceiveHandler();
 8006508:	f7fd fa38 	bl	800397c <ESP_UART_ReceiveHandler>
			for(int j=0;j<(int)strlen(response_arr[i]);j++)
 800650c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006510:	3301      	adds	r3, #1
 8006512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006516:	e7ae      	b.n	8006476 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xfe>
			}
			i++;
 8006518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800651c:	3301      	adds	r3, #1
 800651e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		}

	}
 8006522:	e78c      	b.n	800643e <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0xc6>
	LONGS_EQUAL(CONNECTION_OK,response);
 8006524:	f00c fd28 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8006528:	4604      	mov	r4, r0
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	3338      	adds	r3, #56	; 0x38
 800652e:	681d      	ldr	r5, [r3, #0]
 8006530:	f897 60db 	ldrb.w	r6, [r7, #219]	; 0xdb
 8006534:	f00c fd30 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8006538:	4603      	mov	r3, r0
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	f240 13dd 	movw	r3, #477	; 0x1dd
 8006540:	9301      	str	r3, [sp, #4]
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1f8>)
 8006544:	9300      	str	r3, [sp, #0]
 8006546:	4b0b      	ldr	r3, [pc, #44]	; (8006574 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_Test8testBodyEv+0x1fc>)
 8006548:	4632      	mov	r2, r6
 800654a:	2103      	movs	r1, #3
 800654c:	4620      	mov	r0, r4
 800654e:	47a8      	blx	r5


}
 8006550:	bf00      	nop
 8006552:	37ec      	adds	r7, #236	; 0xec
 8006554:	46bd      	mov	sp, r7
 8006556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006558:	0802260c 	.word	0x0802260c
 800655c:	080226c8 	.word	0x080226c8
 8006560:	08022370 	.word	0x08022370
 8006564:	08022374 	.word	0x08022374
 8006568:	08022388 	.word	0x08022388
 800656c:	08022390 	.word	0x08022390
 8006570:	0802204c 	.word	0x0802204c
 8006574:	080225e0 	.word	0x080225e0

08006578 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Command_Process_Test)
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4a05      	ldr	r2, [pc, #20]	; (8006598 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev+0x20>)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4618      	mov	r0, r3
 800658a:	f00b f991 	bl	80118b0 <_ZN10UtestShellD1Ev>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	080251a4 	.word	0x080251a4

0800659c <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD0Ev>:
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f7ff ffe7 	bl	8006578 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
 80065aa:	211c      	movs	r1, #28
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f002 fd51 	bl	8009054 <_ZdlPvj>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4618      	mov	r0, r3
 80065b6:	3708      	adds	r7, #8
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>:
 80065bc:	b580      	push	{r7, lr}
 80065be:	b082      	sub	sp, #8
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	4a05      	ldr	r2, [pc, #20]	; (80065dc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev+0x20>)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	601a      	str	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fe fd87 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4618      	mov	r0, r3
 80065d6:	3708      	adds	r7, #8
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	08025250 	.word	0x08025250

080065e0 <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD0Ev>:
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ffe7 	bl	80065bc <_ZN51TEST_EspDriver_Test_Group_Command_Process_Test_TestD1Ev>
 80065ee:	2104      	movs	r1, #4
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f002 fd2f 	bl	8009054 <_ZdlPvj>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	4a05      	ldr	r2, [pc, #20]	; (8006620 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev+0x20>)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4618      	mov	r0, r3
 8006612:	f00b f94d 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	08025270 	.word	0x08025270

08006624 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD0Ev>:
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f7ff ffe7 	bl	8006600 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
 8006632:	211c      	movs	r1, #28
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f002 fd0d 	bl	8009054 <_ZdlPvj>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4618      	mov	r0, r3
 800663e:	3708      	adds	r7, #8
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>:
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	4a05      	ldr	r2, [pc, #20]	; (8006664 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev+0x20>)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4618      	mov	r0, r3
 8006656:	f7fe fd43 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4618      	mov	r0, r3
 800665e:	3708      	adds	r7, #8
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	0802531c 	.word	0x0802531c

08006668 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD0Ev>:
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ffe7 	bl	8006644 <_ZN51TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestD1Ev>
 8006676:	2104      	movs	r1, #4
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f002 fceb 	bl	8009054 <_ZdlPvj>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	4a05      	ldr	r2, [pc, #20]	; (80066a8 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4618      	mov	r0, r3
 800669a:	f00b f909 	bl	80118b0 <_ZN10UtestShellD1Ev>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	0802533c 	.word	0x0802533c

080066ac <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD0Ev>:
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff ffe7 	bl	8006688 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
 80066ba:	211c      	movs	r1, #28
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f002 fcc9 	bl	8009054 <_ZdlPvj>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>:
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fcff 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4618      	mov	r0, r3
 80066e6:	3708      	adds	r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	080253e8 	.word	0x080253e8

080066f0 <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD0Ev>:
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f7ff ffe7 	bl	80066cc <_ZN59TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestD1Ev>
 80066fe:	2104      	movs	r1, #4
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f002 fca7 	bl	8009054 <_ZdlPvj>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	4a05      	ldr	r2, [pc, #20]	; (8006730 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev+0x20>)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4618      	mov	r0, r3
 8006722:	f00b f8c5 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4618      	mov	r0, r3
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	08025408 	.word	0x08025408

08006734 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD0Ev>:
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff ffe7 	bl	8006710 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
 8006742:	211c      	movs	r1, #28
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f002 fc85 	bl	8009054 <_ZdlPvj>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>:
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	4a05      	ldr	r2, [pc, #20]	; (8006774 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev+0x20>)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fcbb 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	080254b4 	.word	0x080254b4

08006778 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD0Ev>:
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ffe7 	bl	8006754 <_ZN48TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestD1Ev>
 8006786:	2104      	movs	r1, #4
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f002 fc63 	bl	8009054 <_ZdlPvj>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	4a05      	ldr	r2, [pc, #20]	; (80067b8 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev+0x20>)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f00b f881 	bl	80118b0 <_ZN10UtestShellD1Ev>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	080254d4 	.word	0x080254d4

080067bc <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD0Ev>:
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ffe7 	bl	8006798 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
 80067ca:	211c      	movs	r1, #28
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f002 fc41 	bl	8009054 <_ZdlPvj>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4618      	mov	r0, r3
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>:
 80067dc:	b580      	push	{r7, lr}
 80067de:	b082      	sub	sp, #8
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	4a05      	ldr	r2, [pc, #20]	; (80067fc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev+0x20>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fe fc77 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	08025580 	.word	0x08025580

08006800 <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD0Ev>:
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7ff ffe7 	bl	80067dc <_ZN54TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestD1Ev>
 800680e:	2104      	movs	r1, #4
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f002 fc1f 	bl	8009054 <_ZdlPvj>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	4a05      	ldr	r2, [pc, #20]	; (8006840 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev+0x20>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4618      	mov	r0, r3
 8006832:	f00b f83d 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	080255a0 	.word	0x080255a0

08006844 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD0Ev>:
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f7ff ffe7 	bl	8006820 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 8006852:	211c      	movs	r1, #28
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f002 fbfd 	bl	8009054 <_ZdlPvj>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>:
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	4a05      	ldr	r2, [pc, #20]	; (8006884 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev+0x20>)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4618      	mov	r0, r3
 8006876:	f7fe fc33 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4618      	mov	r0, r3
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	0802564c 	.word	0x0802564c

08006888 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD0Ev>:
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ffe7 	bl	8006864 <_ZN56TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestD1Ev>
 8006896:	2104      	movs	r1, #4
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 fbdb 	bl	8009054 <_ZdlPvj>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4618      	mov	r0, r3
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f00a fff9 	bl	80118b0 <_ZN10UtestShellD1Ev>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	0802566c 	.word	0x0802566c

080068cc <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff ffe7 	bl	80068a8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 80068da:	211c      	movs	r1, #28
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 fbb9 	bl	8009054 <_ZdlPvj>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	4a05      	ldr	r2, [pc, #20]	; (800690c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fbef 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	08025718 	.word	0x08025718

08006910 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f7ff ffe7 	bl	80068ec <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 800691e:	2104      	movs	r1, #4
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f002 fb97 	bl	8009054 <_ZdlPvj>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4618      	mov	r0, r3
 800692a:	3708      	adds	r7, #8
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
 8006938:	4a05      	ldr	r2, [pc, #20]	; (8006950 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev+0x20>)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4618      	mov	r0, r3
 8006942:	f00a ffb5 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4618      	mov	r0, r3
 800694a:	3708      	adds	r7, #8
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	08025738 	.word	0x08025738

08006954 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD0Ev>:
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ffe7 	bl	8006930 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
 8006962:	211c      	movs	r1, #28
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f002 fb75 	bl	8009054 <_ZdlPvj>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4618      	mov	r0, r3
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>:
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	4a05      	ldr	r2, [pc, #20]	; (8006994 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev+0x20>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fbab 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	080257e4 	.word	0x080257e4

08006998 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD0Ev>:
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f7ff ffe7 	bl	8006974 <_ZN57TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestD1Ev>
 80069a6:	2104      	movs	r1, #4
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f002 fb53 	bl	8009054 <_ZdlPvj>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	4a05      	ldr	r2, [pc, #20]	; (80069d8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	601a      	str	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4618      	mov	r0, r3
 80069ca:	f00a ff71 	bl	80118b0 <_ZN10UtestShellD1Ev>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4618      	mov	r0, r3
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	08025804 	.word	0x08025804

080069dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ffe7 	bl	80069b8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80069ea:	211c      	movs	r1, #28
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f002 fb31 	bl	8009054 <_ZdlPvj>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	4a05      	ldr	r2, [pc, #20]	; (8006a1c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fe fb67 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	080258b0 	.word	0x080258b0

08006a20 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ffe7 	bl	80069fc <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8006a2e:	2104      	movs	r1, #4
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f002 fb0f 	bl	8009054 <_ZdlPvj>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3708      	adds	r7, #8
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	4a05      	ldr	r2, [pc, #20]	; (8006a60 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	601a      	str	r2, [r3, #0]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f00a ff2d 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	080258d0 	.word	0x080258d0

08006a64 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f7ff ffe7 	bl	8006a40 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8006a72:	211c      	movs	r1, #28
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f002 faed 	bl	8009054 <_ZdlPvj>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	4a05      	ldr	r2, [pc, #20]	; (8006aa4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	601a      	str	r2, [r3, #0]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fb23 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	0802597c 	.word	0x0802597c

08006aa8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f7ff ffe7 	bl	8006a84 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f002 facb 	bl	8009054 <_ZdlPvj>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	4a05      	ldr	r2, [pc, #20]	; (8006ae8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f00a fee9 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	0802599c 	.word	0x0802599c

08006aec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff ffe7 	bl	8006ac8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 8006afa:	211c      	movs	r1, #28
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f002 faa9 	bl	8009054 <_ZdlPvj>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	4a05      	ldr	r2, [pc, #20]	; (8006b2c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe fadf 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	08025a48 	.word	0x08025a48

08006b30 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f7ff ffe7 	bl	8006b0c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8006b3e:	2104      	movs	r1, #4
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f002 fa87 	bl	8009054 <_ZdlPvj>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	4a05      	ldr	r2, [pc, #20]	; (8006b70 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f00a fea5 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3708      	adds	r7, #8
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	08025a68 	.word	0x08025a68

08006b74 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ffe7 	bl	8006b50 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8006b82:	211c      	movs	r1, #28
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f002 fa65 	bl	8009054 <_ZdlPvj>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	4a05      	ldr	r2, [pc, #20]	; (8006bb4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe fa9b 	bl	80050e0 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	08025b14 	.word	0x08025b14

08006bb8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff ffe7 	bl	8006b94 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f002 fa43 	bl	8009054 <_ZdlPvj>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	4a05      	ldr	r2, [pc, #20]	; (8006bf8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f00a fe61 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	08025b54 	.word	0x08025b54

08006bfc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7ff ffe7 	bl	8006bd8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 8006c0a:	211c      	movs	r1, #28
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f002 fa21 	bl	8009054 <_ZdlPvj>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4618      	mov	r0, r3
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd fc0f 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	08025c00 	.word	0x08025c00

08006c40 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ffe7 	bl	8006c1c <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8006c4e:	2108      	movs	r1, #8
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f002 f9ff 	bl	8009054 <_ZdlPvj>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	4a05      	ldr	r2, [pc, #20]	; (8006c80 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f00a fe1d 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	08025c20 	.word	0x08025c20

08006c84 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ffe7 	bl	8006c60 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8006c92:	211c      	movs	r1, #28
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f002 f9dd 	bl	8009054 <_ZdlPvj>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3708      	adds	r7, #8
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	4a05      	ldr	r2, [pc, #20]	; (8006cc4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	601a      	str	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fd fbcb 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	08025ccc 	.word	0x08025ccc

08006cc8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff ffe7 	bl	8006ca4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 8006cd6:	2108      	movs	r1, #8
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 f9bb 	bl	8009054 <_ZdlPvj>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	4a05      	ldr	r2, [pc, #20]	; (8006d08 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f00a fdd9 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	08025cec 	.word	0x08025cec

08006d0c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff ffe7 	bl	8006ce8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 8006d1a:	211c      	movs	r1, #28
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f002 f999 	bl	8009054 <_ZdlPvj>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	4a05      	ldr	r2, [pc, #20]	; (8006d4c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fd fb87 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	08025d98 	.word	0x08025d98

08006d50 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7ff ffe7 	bl	8006d2c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8006d5e:	2108      	movs	r1, #8
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f002 f977 	bl	8009054 <_ZdlPvj>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	4a05      	ldr	r2, [pc, #20]	; (8006d90 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	601a      	str	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f00a fd95 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	08025db8 	.word	0x08025db8

08006d94 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ffe7 	bl	8006d70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 8006da2:	211c      	movs	r1, #28
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f002 f955 	bl	8009054 <_ZdlPvj>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4618      	mov	r0, r3
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	4a05      	ldr	r2, [pc, #20]	; (8006dd4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fb43 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	08025e64 	.word	0x08025e64

08006dd8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ffe7 	bl	8006db4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 8006de6:	2108      	movs	r1, #8
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f002 f933 	bl	8009054 <_ZdlPvj>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b082      	sub	sp, #8
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	4a05      	ldr	r2, [pc, #20]	; (8006e18 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f00a fd51 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4618      	mov	r0, r3
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	08025e84 	.word	0x08025e84

08006e1c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b082      	sub	sp, #8
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff ffe7 	bl	8006df8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8006e2a:	211c      	movs	r1, #28
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f002 f911 	bl	8009054 <_ZdlPvj>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	4a05      	ldr	r2, [pc, #20]	; (8006e5c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fd faff 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	08025f30 	.word	0x08025f30

08006e60 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f7ff ffe7 	bl	8006e3c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8006e6e:	2108      	movs	r1, #8
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f002 f8ef 	bl	8009054 <_ZdlPvj>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	4a05      	ldr	r2, [pc, #20]	; (8006ea0 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f00a fd0d 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	08025f50 	.word	0x08025f50

08006ea4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff ffe7 	bl	8006e80 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8006eb2:	211c      	movs	r1, #28
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f002 f8cd 	bl	8009054 <_ZdlPvj>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	4a05      	ldr	r2, [pc, #20]	; (8006ee4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fd fabb 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	08025ffc 	.word	0x08025ffc

08006ee8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f7ff ffe7 	bl	8006ec4 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8006ef6:	2108      	movs	r1, #8
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f002 f8ab 	bl	8009054 <_ZdlPvj>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	4a05      	ldr	r2, [pc, #20]	; (8006f28 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f00a fcc9 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	0802601c 	.word	0x0802601c

08006f2c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ffe7 	bl	8006f08 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8006f3a:	211c      	movs	r1, #28
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f002 f889 	bl	8009054 <_ZdlPvj>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4618      	mov	r0, r3
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	4a05      	ldr	r2, [pc, #20]	; (8006f6c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fd fa77 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}
 8006f6c:	080260c8 	.word	0x080260c8

08006f70 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7ff ffe7 	bl	8006f4c <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8006f7e:	2108      	movs	r1, #8
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f002 f867 	bl	8009054 <_ZdlPvj>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	4a05      	ldr	r2, [pc, #20]	; (8006fb0 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f00a fc85 	bl	80118b0 <_ZN10UtestShellD1Ev>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	080260e8 	.word	0x080260e8

08006fb4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff ffe7 	bl	8006f90 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8006fc2:	211c      	movs	r1, #28
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f002 f845 	bl	8009054 <_ZdlPvj>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	4a05      	ldr	r2, [pc, #20]	; (8006ff4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fa33 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	08026194 	.word	0x08026194

08006ff8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff ffe7 	bl	8006fd4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8007006:	2108      	movs	r1, #8
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f002 f823 	bl	8009054 <_ZdlPvj>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	4a05      	ldr	r2, [pc, #20]	; (8007038 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4618      	mov	r0, r3
 800702a:	f00a fc41 	bl	80118b0 <_ZN10UtestShellD1Ev>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	080261b4 	.word	0x080261b4

0800703c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7ff ffe7 	bl	8007018 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 800704a:	211c      	movs	r1, #28
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f002 f801 	bl	8009054 <_ZdlPvj>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	4a05      	ldr	r2, [pc, #20]	; (800707c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4618      	mov	r0, r3
 800706e:	f7fd f9ef 	bl	8004450 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	08026260 	.word	0x08026260

08007080 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff ffe7 	bl	800705c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 800708e:	2108      	movs	r1, #8
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 ffdf 	bl	8009054 <_ZdlPvj>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <_Z41__static_initialization_and_destruction_0ii>:
}
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af02      	add	r7, sp, #8
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	f040 811e 	bne.w	80072ee <_Z41__static_initialization_and_destruction_0ii+0x24e>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070b8:	4293      	cmp	r3, r2
 80070ba:	f040 8118 	bne.w	80072ee <_Z41__static_initialization_and_destruction_0ii+0x24e>
TEST(RingBuffer_Test_Group, InitTest)
 80070be:	48a3      	ldr	r0, [pc, #652]	; (800734c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80070c0:	f7fd fa14 	bl	80044ec <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 80070c4:	2324      	movs	r3, #36	; 0x24
 80070c6:	9301      	str	r3, [sp, #4]
 80070c8:	4ba1      	ldr	r3, [pc, #644]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	4ba1      	ldr	r3, [pc, #644]	; (8007354 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80070ce:	4aa2      	ldr	r2, [pc, #648]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80070d0:	499e      	ldr	r1, [pc, #632]	; (800734c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80070d2:	48a2      	ldr	r0, [pc, #648]	; (800735c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 80070d4:	f00c f9e8 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 80070d8:	48a1      	ldr	r0, [pc, #644]	; (8007360 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80070da:	f7fd fabb 	bl	8004654 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 80070de:	232e      	movs	r3, #46	; 0x2e
 80070e0:	9301      	str	r3, [sp, #4]
 80070e2:	4b9b      	ldr	r3, [pc, #620]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	4b9f      	ldr	r3, [pc, #636]	; (8007364 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 80070e8:	4a9b      	ldr	r2, [pc, #620]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80070ea:	499d      	ldr	r1, [pc, #628]	; (8007360 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 80070ec:	489e      	ldr	r0, [pc, #632]	; (8007368 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80070ee:	f00c f9db 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80070f2:	489e      	ldr	r0, [pc, #632]	; (800736c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80070f4:	f7fd fb38 	bl	8004768 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 80070f8:	2338      	movs	r3, #56	; 0x38
 80070fa:	9301      	str	r3, [sp, #4]
 80070fc:	4b94      	ldr	r3, [pc, #592]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	4b9b      	ldr	r3, [pc, #620]	; (8007370 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8007102:	4a95      	ldr	r2, [pc, #596]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007104:	4999      	ldr	r1, [pc, #612]	; (800736c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8007106:	489b      	ldr	r0, [pc, #620]	; (8007374 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8007108:	f00c f9ce 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 800710c:	489a      	ldr	r0, [pc, #616]	; (8007378 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800710e:	f7fd fbb3 	bl	8004878 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8007112:	2343      	movs	r3, #67	; 0x43
 8007114:	9301      	str	r3, [sp, #4]
 8007116:	4b8e      	ldr	r3, [pc, #568]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	4b98      	ldr	r3, [pc, #608]	; (800737c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800711c:	4a8e      	ldr	r2, [pc, #568]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800711e:	4996      	ldr	r1, [pc, #600]	; (8007378 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8007120:	4897      	ldr	r0, [pc, #604]	; (8007380 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8007122:	f00c f9c1 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8007126:	4897      	ldr	r0, [pc, #604]	; (8007384 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8007128:	f7fd fc12 	bl	8004950 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 800712c:	234c      	movs	r3, #76	; 0x4c
 800712e:	9301      	str	r3, [sp, #4]
 8007130:	4b87      	ldr	r3, [pc, #540]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007132:	9300      	str	r3, [sp, #0]
 8007134:	4b94      	ldr	r3, [pc, #592]	; (8007388 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8007136:	4a88      	ldr	r2, [pc, #544]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007138:	4992      	ldr	r1, [pc, #584]	; (8007384 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800713a:	4894      	ldr	r0, [pc, #592]	; (800738c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800713c:	f00c f9b4 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8007140:	4893      	ldr	r0, [pc, #588]	; (8007390 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007142:	f7fd fc91 	bl	8004a68 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8007146:	235c      	movs	r3, #92	; 0x5c
 8007148:	9301      	str	r3, [sp, #4]
 800714a:	4b81      	ldr	r3, [pc, #516]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	4b91      	ldr	r3, [pc, #580]	; (8007394 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007150:	4a81      	ldr	r2, [pc, #516]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007152:	498f      	ldr	r1, [pc, #572]	; (8007390 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007154:	4890      	ldr	r0, [pc, #576]	; (8007398 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007156:	f00c f9a7 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 800715a:	4890      	ldr	r0, [pc, #576]	; (800739c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800715c:	f7fd fd42 	bl	8004be4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8007160:	2371      	movs	r3, #113	; 0x71
 8007162:	9301      	str	r3, [sp, #4]
 8007164:	4b7a      	ldr	r3, [pc, #488]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	4b8d      	ldr	r3, [pc, #564]	; (80073a0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800716a:	4a7b      	ldr	r2, [pc, #492]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800716c:	498b      	ldr	r1, [pc, #556]	; (800739c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800716e:	488d      	ldr	r0, [pc, #564]	; (80073a4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007170:	f00c f99a 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8007174:	488c      	ldr	r0, [pc, #560]	; (80073a8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007176:	f7fd fd9b 	bl	8004cb0 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 800717a:	2378      	movs	r3, #120	; 0x78
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	4b74      	ldr	r3, [pc, #464]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007180:	9300      	str	r3, [sp, #0]
 8007182:	4b8a      	ldr	r3, [pc, #552]	; (80073ac <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007184:	4a74      	ldr	r2, [pc, #464]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007186:	4988      	ldr	r1, [pc, #544]	; (80073a8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007188:	4889      	ldr	r0, [pc, #548]	; (80073b0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800718a:	f00c f98d 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 800718e:	4889      	ldr	r0, [pc, #548]	; (80073b4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007190:	f7fd fe78 	bl	8004e84 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8007194:	2380      	movs	r3, #128	; 0x80
 8007196:	9301      	str	r3, [sp, #4]
 8007198:	4b6d      	ldr	r3, [pc, #436]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	4b86      	ldr	r3, [pc, #536]	; (80073b8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800719e:	4a6e      	ldr	r2, [pc, #440]	; (8007358 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 80071a0:	4984      	ldr	r1, [pc, #528]	; (80073b4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 80071a2:	4886      	ldr	r0, [pc, #536]	; (80073bc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 80071a4:	f00c f980 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 80071a8:	4885      	ldr	r0, [pc, #532]	; (80073c0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80071aa:	f7fd ffe1 	bl	8005170 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 80071ae:	23b8      	movs	r3, #184	; 0xb8
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	4b67      	ldr	r3, [pc, #412]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4b83      	ldr	r3, [pc, #524]	; (80073c4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80071b8:	4a83      	ldr	r2, [pc, #524]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80071ba:	4981      	ldr	r1, [pc, #516]	; (80073c0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80071bc:	4883      	ldr	r0, [pc, #524]	; (80073cc <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80071be:	f00c f973 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80071c2:	4883      	ldr	r0, [pc, #524]	; (80073d0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80071c4:	f7fe f83e 	bl	8005244 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 80071c8:	23ca      	movs	r3, #202	; 0xca
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	4b60      	ldr	r3, [pc, #384]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	4b80      	ldr	r3, [pc, #512]	; (80073d4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80071d2:	4a7d      	ldr	r2, [pc, #500]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80071d4:	497e      	ldr	r1, [pc, #504]	; (80073d0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80071d6:	4880      	ldr	r0, [pc, #512]	; (80073d8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80071d8:	f00c f966 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 80071dc:	487f      	ldr	r0, [pc, #508]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80071de:	f7fe f8f5 	bl	80053cc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 80071e2:	23d6      	movs	r3, #214	; 0xd6
 80071e4:	9301      	str	r3, [sp, #4]
 80071e6:	4b5a      	ldr	r3, [pc, #360]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4b7d      	ldr	r3, [pc, #500]	; (80073e0 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80071ec:	4a76      	ldr	r2, [pc, #472]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80071ee:	497b      	ldr	r1, [pc, #492]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80071f0:	487c      	ldr	r0, [pc, #496]	; (80073e4 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80071f2:	f00c f959 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 80071f6:	487c      	ldr	r0, [pc, #496]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80071f8:	f7fe fa00 	bl	80055fc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 80071fc:	23e6      	movs	r3, #230	; 0xe6
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	4b53      	ldr	r3, [pc, #332]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	4b79      	ldr	r3, [pc, #484]	; (80073ec <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8007206:	4a70      	ldr	r2, [pc, #448]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007208:	4977      	ldr	r1, [pc, #476]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800720a:	4879      	ldr	r0, [pc, #484]	; (80073f0 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800720c:	f00c f94c 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007210:	4878      	ldr	r0, [pc, #480]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007212:	f7fe faa7 	bl	8005764 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellC1Ev>
 8007216:	23f7      	movs	r3, #247	; 0xf7
 8007218:	9301      	str	r3, [sp, #4]
 800721a:	4b4d      	ldr	r3, [pc, #308]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	4b76      	ldr	r3, [pc, #472]	; (80073f8 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8007220:	4a69      	ldr	r2, [pc, #420]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007222:	4974      	ldr	r1, [pc, #464]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007224:	4875      	ldr	r0, [pc, #468]	; (80073fc <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8007226:	f00c f93f 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 800722a:	4875      	ldr	r0, [pc, #468]	; (8007400 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800722c:	f7fe fb06 	bl	800583c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8007230:	f240 1307 	movw	r3, #263	; 0x107
 8007234:	9301      	str	r3, [sp, #4]
 8007236:	4b46      	ldr	r3, [pc, #280]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	4b72      	ldr	r3, [pc, #456]	; (8007404 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800723c:	4a62      	ldr	r2, [pc, #392]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800723e:	4970      	ldr	r1, [pc, #448]	; (8007400 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8007240:	4871      	ldr	r0, [pc, #452]	; (8007408 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8007242:	f00c f931 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 8007246:	4871      	ldr	r0, [pc, #452]	; (800740c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8007248:	f7fe fbbc 	bl	80059c4 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellC1Ev>
 800724c:	f240 131d 	movw	r3, #285	; 0x11d
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	4b3f      	ldr	r3, [pc, #252]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007254:	9300      	str	r3, [sp, #0]
 8007256:	4b6e      	ldr	r3, [pc, #440]	; (8007410 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8007258:	4a5b      	ldr	r2, [pc, #364]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800725a:	496c      	ldr	r1, [pc, #432]	; (800740c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800725c:	486d      	ldr	r0, [pc, #436]	; (8007414 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800725e:	f00c f923 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007262:	486d      	ldr	r0, [pc, #436]	; (8007418 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8007264:	f7fe fc60 	bl	8005b28 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellC1Ev>
 8007268:	f44f 739a 	mov.w	r3, #308	; 0x134
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	4b38      	ldr	r3, [pc, #224]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4b6a      	ldr	r3, [pc, #424]	; (800741c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8007274:	4a54      	ldr	r2, [pc, #336]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007276:	4968      	ldr	r1, [pc, #416]	; (8007418 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8007278:	4869      	ldr	r0, [pc, #420]	; (8007420 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800727a:	f00c f915 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 800727e:	4869      	ldr	r0, [pc, #420]	; (8007424 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007280:	f7fe fd96 	bl	8005db0 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellC1Ev>
 8007284:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8007288:	9301      	str	r3, [sp, #4]
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4b66      	ldr	r3, [pc, #408]	; (8007428 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8007290:	4a4d      	ldr	r2, [pc, #308]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007292:	4964      	ldr	r1, [pc, #400]	; (8007424 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8007294:	4865      	ldr	r0, [pc, #404]	; (800742c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007296:	f00c f907 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800729a:	4865      	ldr	r0, [pc, #404]	; (8007430 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800729c:	f7fe feca 	bl	8006034 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellC1Ev>
 80072a0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4b62      	ldr	r3, [pc, #392]	; (8007434 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80072ac:	4a46      	ldr	r2, [pc, #280]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80072ae:	4960      	ldr	r1, [pc, #384]	; (8007430 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80072b0:	4861      	ldr	r0, [pc, #388]	; (8007438 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80072b2:	f00c f8f9 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 80072b6:	4861      	ldr	r0, [pc, #388]	; (800743c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80072b8:	f7fe ff66 	bl	8006188 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellC1Ev>
 80072bc:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4b5e      	ldr	r3, [pc, #376]	; (8007440 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80072c8:	4a3f      	ldr	r2, [pc, #252]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80072ca:	495c      	ldr	r1, [pc, #368]	; (800743c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80072cc:	485d      	ldr	r0, [pc, #372]	; (8007444 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80072ce:	f00c f8eb 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Command_Process_Test)
 80072d2:	485d      	ldr	r0, [pc, #372]	; (8007448 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80072d4:	f7ff f83e 	bl	8006354 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellC1Ev>
 80072d8:	f240 13b5 	movw	r3, #437	; 0x1b5
 80072dc:	9301      	str	r3, [sp, #4]
 80072de:	4b1c      	ldr	r3, [pc, #112]	; (8007350 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	4b5a      	ldr	r3, [pc, #360]	; (800744c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 80072e4:	4a38      	ldr	r2, [pc, #224]	; (80073c8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80072e6:	4958      	ldr	r1, [pc, #352]	; (8007448 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80072e8:	4859      	ldr	r0, [pc, #356]	; (8007450 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 80072ea:	f00c f8dd 	bl	80134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 8109 	bne.w	8007508 <_Z41__static_initialization_and_destruction_0ii+0x468>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072fc:	4293      	cmp	r3, r2
 80072fe:	f040 8103 	bne.w	8007508 <_Z41__static_initialization_and_destruction_0ii+0x468>
 8007302:	4853      	ldr	r0, [pc, #332]	; (8007450 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8007304:	f00c f8fa 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007308:	484f      	ldr	r0, [pc, #316]	; (8007448 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800730a:	f7ff f935 	bl	8006578 <_ZN56TEST_EspDriver_Test_Group_Command_Process_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Test)
 800730e:	484d      	ldr	r0, [pc, #308]	; (8007444 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8007310:	f00c f8f4 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007314:	4849      	ldr	r0, [pc, #292]	; (800743c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8007316:	f7ff f973 	bl	8006600 <_ZN56TEST_EspDriver_Test_Group_Disconnect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Disconnect_Wifi_Timeout_Test)
 800731a:	4847      	ldr	r0, [pc, #284]	; (8007438 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800731c:	f00c f8ee 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007320:	4843      	ldr	r0, [pc, #268]	; (8007430 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8007322:	f7ff f9b1 	bl	8006688 <_ZN64TEST_EspDriver_Test_Group_Disconnect_Wifi_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Test)
 8007326:	4841      	ldr	r0, [pc, #260]	; (800742c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8007328:	f00c f8e8 	bl	80134fc <_ZN13TestInstallerD1Ev>
 800732c:	483d      	ldr	r0, [pc, #244]	; (8007424 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800732e:	f7ff f9ef 	bl	8006710 <_ZN53TEST_EspDriver_Test_Group_Connect_Wifi_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Error_Test)
 8007332:	483b      	ldr	r0, [pc, #236]	; (8007420 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8007334:	f00c f8e2 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007338:	4837      	ldr	r0, [pc, #220]	; (8007418 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800733a:	f7ff fa2d 	bl	8006798 <_ZN59TEST_EspDriver_Test_Group_Connect_Wifi_Error_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Connect_Wifi_Timeout_Test)
 800733e:	4835      	ldr	r0, [pc, #212]	; (8007414 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8007340:	f00c f8dc 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007344:	4831      	ldr	r0, [pc, #196]	; (800740c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8007346:	f7ff fa6b 	bl	8006820 <_ZN61TEST_EspDriver_Test_Group_Connect_Wifi_Timeout_Test_TestShellD1Ev>
 800734a:	e083      	b.n	8007454 <_Z41__static_initialization_and_destruction_0ii+0x3b4>
 800734c:	200004a4 	.word	0x200004a4
 8007350:	0802204c 	.word	0x0802204c
 8007354:	080226d4 	.word	0x080226d4
 8007358:	080226e0 	.word	0x080226e0
 800735c:	200004c0 	.word	0x200004c0
 8007360:	200004c4 	.word	0x200004c4
 8007364:	080226f8 	.word	0x080226f8
 8007368:	200004e0 	.word	0x200004e0
 800736c:	200004e4 	.word	0x200004e4
 8007370:	08022708 	.word	0x08022708
 8007374:	20000500 	.word	0x20000500
 8007378:	20000504 	.word	0x20000504
 800737c:	0802271c 	.word	0x0802271c
 8007380:	20000520 	.word	0x20000520
 8007384:	20000524 	.word	0x20000524
 8007388:	0802272c 	.word	0x0802272c
 800738c:	20000540 	.word	0x20000540
 8007390:	20000544 	.word	0x20000544
 8007394:	08022744 	.word	0x08022744
 8007398:	20000560 	.word	0x20000560
 800739c:	20000564 	.word	0x20000564
 80073a0:	08022754 	.word	0x08022754
 80073a4:	20000580 	.word	0x20000580
 80073a8:	20000584 	.word	0x20000584
 80073ac:	08022764 	.word	0x08022764
 80073b0:	200005a0 	.word	0x200005a0
 80073b4:	200005a4 	.word	0x200005a4
 80073b8:	08022770 	.word	0x08022770
 80073bc:	200005c0 	.word	0x200005c0
 80073c0:	200005cc 	.word	0x200005cc
 80073c4:	08022780 	.word	0x08022780
 80073c8:	08022790 	.word	0x08022790
 80073cc:	200005e8 	.word	0x200005e8
 80073d0:	200005ec 	.word	0x200005ec
 80073d4:	080227a8 	.word	0x080227a8
 80073d8:	20000608 	.word	0x20000608
 80073dc:	2000060c 	.word	0x2000060c
 80073e0:	080227c0 	.word	0x080227c0
 80073e4:	20000628 	.word	0x20000628
 80073e8:	2000062c 	.word	0x2000062c
 80073ec:	080227dc 	.word	0x080227dc
 80073f0:	20000648 	.word	0x20000648
 80073f4:	2000064c 	.word	0x2000064c
 80073f8:	080227f0 	.word	0x080227f0
 80073fc:	20000668 	.word	0x20000668
 8007400:	2000066c 	.word	0x2000066c
 8007404:	0802280c 	.word	0x0802280c
 8007408:	20000688 	.word	0x20000688
 800740c:	2000068c 	.word	0x2000068c
 8007410:	08022820 	.word	0x08022820
 8007414:	200006a8 	.word	0x200006a8
 8007418:	200006ac 	.word	0x200006ac
 800741c:	0802283c 	.word	0x0802283c
 8007420:	200006c8 	.word	0x200006c8
 8007424:	200006cc 	.word	0x200006cc
 8007428:	08022854 	.word	0x08022854
 800742c:	200006e8 	.word	0x200006e8
 8007430:	200006ec 	.word	0x200006ec
 8007434:	08022868 	.word	0x08022868
 8007438:	20000708 	.word	0x20000708
 800743c:	2000070c 	.word	0x2000070c
 8007440:	08022888 	.word	0x08022888
 8007444:	20000728 	.word	0x20000728
 8007448:	2000072c 	.word	0x2000072c
 800744c:	080228a0 	.word	0x080228a0
 8007450:	20000748 	.word	0x20000748
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8007454:	482e      	ldr	r0, [pc, #184]	; (8007510 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8007456:	f00c f851 	bl	80134fc <_ZN13TestInstallerD1Ev>
 800745a:	482e      	ldr	r0, [pc, #184]	; (8007514 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 800745c:	f7ff fa24 	bl	80068a8 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Wait_Response_Timeout_Test)
 8007460:	482d      	ldr	r0, [pc, #180]	; (8007518 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8007462:	f00c f84b 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007466:	482d      	ldr	r0, [pc, #180]	; (800751c <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8007468:	f7ff fa62 	bl	8006930 <_ZN62TEST_EspDriver_Test_Group_Wait_Response_Timeout_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 800746c:	482c      	ldr	r0, [pc, #176]	; (8007520 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 800746e:	f00c f845 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007472:	482c      	ldr	r0, [pc, #176]	; (8007524 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8007474:	f7ff faa0 	bl	80069b8 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8007478:	482b      	ldr	r0, [pc, #172]	; (8007528 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 800747a:	f00c f83f 	bl	80134fc <_ZN13TestInstallerD1Ev>
 800747e:	482b      	ldr	r0, [pc, #172]	; (800752c <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8007480:	f7ff fade 	bl	8006a40 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8007484:	482a      	ldr	r0, [pc, #168]	; (8007530 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8007486:	f00c f839 	bl	80134fc <_ZN13TestInstallerD1Ev>
 800748a:	482a      	ldr	r0, [pc, #168]	; (8007534 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 800748c:	f7ff fb1c 	bl	8006ac8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8007490:	4829      	ldr	r0, [pc, #164]	; (8007538 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8007492:	f00c f833 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007496:	4829      	ldr	r0, [pc, #164]	; (800753c <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8007498:	f7ff fb5a 	bl	8006b50 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 800749c:	4828      	ldr	r0, [pc, #160]	; (8007540 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 800749e:	f00c f82d 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074a2:	4828      	ldr	r0, [pc, #160]	; (8007544 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 80074a4:	f7ff fb98 	bl	8006bd8 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 80074a8:	4827      	ldr	r0, [pc, #156]	; (8007548 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 80074aa:	f00c f827 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074ae:	4827      	ldr	r0, [pc, #156]	; (800754c <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 80074b0:	f7ff fbd6 	bl	8006c60 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 80074b4:	4826      	ldr	r0, [pc, #152]	; (8007550 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 80074b6:	f00c f821 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074ba:	4826      	ldr	r0, [pc, #152]	; (8007554 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 80074bc:	f7ff fc14 	bl	8006ce8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 80074c0:	4825      	ldr	r0, [pc, #148]	; (8007558 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 80074c2:	f00c f81b 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074c6:	4825      	ldr	r0, [pc, #148]	; (800755c <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 80074c8:	f7ff fc52 	bl	8006d70 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80074cc:	4824      	ldr	r0, [pc, #144]	; (8007560 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 80074ce:	f00c f815 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074d2:	4824      	ldr	r0, [pc, #144]	; (8007564 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 80074d4:	f7ff fc90 	bl	8006df8 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 80074d8:	4823      	ldr	r0, [pc, #140]	; (8007568 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 80074da:	f00c f80f 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074de:	4823      	ldr	r0, [pc, #140]	; (800756c <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 80074e0:	f7ff fcce 	bl	8006e80 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80074e4:	4822      	ldr	r0, [pc, #136]	; (8007570 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 80074e6:	f00c f809 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074ea:	4822      	ldr	r0, [pc, #136]	; (8007574 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 80074ec:	f7ff fd0c 	bl	8006f08 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 80074f0:	4821      	ldr	r0, [pc, #132]	; (8007578 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 80074f2:	f00c f803 	bl	80134fc <_ZN13TestInstallerD1Ev>
 80074f6:	4821      	ldr	r0, [pc, #132]	; (800757c <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 80074f8:	f7ff fd4a 	bl	8006f90 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 80074fc:	4820      	ldr	r0, [pc, #128]	; (8007580 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 80074fe:	f00b fffd 	bl	80134fc <_ZN13TestInstallerD1Ev>
 8007502:	4820      	ldr	r0, [pc, #128]	; (8007584 <_Z41__static_initialization_and_destruction_0ii+0x4e4>)
 8007504:	f7ff fd88 	bl	8007018 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}
 8007510:	20000688 	.word	0x20000688
 8007514:	2000066c 	.word	0x2000066c
 8007518:	20000668 	.word	0x20000668
 800751c:	2000064c 	.word	0x2000064c
 8007520:	20000648 	.word	0x20000648
 8007524:	2000062c 	.word	0x2000062c
 8007528:	20000628 	.word	0x20000628
 800752c:	2000060c 	.word	0x2000060c
 8007530:	20000608 	.word	0x20000608
 8007534:	200005ec 	.word	0x200005ec
 8007538:	200005e8 	.word	0x200005e8
 800753c:	200005cc 	.word	0x200005cc
 8007540:	200005c0 	.word	0x200005c0
 8007544:	200005a4 	.word	0x200005a4
 8007548:	200005a0 	.word	0x200005a0
 800754c:	20000584 	.word	0x20000584
 8007550:	20000580 	.word	0x20000580
 8007554:	20000564 	.word	0x20000564
 8007558:	20000560 	.word	0x20000560
 800755c:	20000544 	.word	0x20000544
 8007560:	20000540 	.word	0x20000540
 8007564:	20000524 	.word	0x20000524
 8007568:	20000520 	.word	0x20000520
 800756c:	20000504 	.word	0x20000504
 8007570:	20000500 	.word	0x20000500
 8007574:	200004e4 	.word	0x200004e4
 8007578:	200004e0 	.word	0x200004e0
 800757c:	200004c4 	.word	0x200004c4
 8007580:	200004c0 	.word	0x200004c0
 8007584:	200004a4 	.word	0x200004a4

08007588 <_GLOBAL__sub_I_rx_buffer>:
 8007588:	b580      	push	{r7, lr}
 800758a:	af00      	add	r7, sp, #0
 800758c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007590:	2001      	movs	r0, #1
 8007592:	f7ff fd85 	bl	80070a0 <_Z41__static_initialization_and_destruction_0ii>
 8007596:	bd80      	pop	{r7, pc}

08007598 <_GLOBAL__sub_D_rx_buffer>:
 8007598:	b580      	push	{r7, lr}
 800759a:	af00      	add	r7, sp, #0
 800759c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80075a0:	2000      	movs	r0, #0
 80075a2:	f7ff fd7d 	bl	80070a0 <_Z41__static_initialization_and_destruction_0ii>
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
    }
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
    }
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	695b      	ldr	r3, [r3, #20]
    }
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 80075f0:	b590      	push	{r4, r7, lr}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ffed 	bl	80075d8 <_ZNK10TestResult15getFailureCountEv>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <_ZNK10TestResult9isFailureEv+0x2a>
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff ffcf 	bl	80075a8 <_ZNK10TestResult11getRunCountEv>
 800760a:	4604      	mov	r4, r0
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f7ff ffd7 	bl	80075c0 <_ZNK10TestResult15getIgnoredCountEv>
 8007612:	4603      	mov	r3, r0
 8007614:	4423      	add	r3, r4
 8007616:	2b00      	cmp	r3, #0
 8007618:	d101      	bne.n	800761e <_ZNK10TestResult9isFailureEv+0x2e>
 800761a:	2301      	movs	r3, #1
 800761c:	e000      	b.n	8007620 <_ZNK10TestResult9isFailureEv+0x30>
 800761e:	2300      	movs	r3, #0
    }
 8007620:	4618      	mov	r0, r3
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	bd90      	pop	{r4, r7, pc}

08007628 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
    {
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	f007 fde6 	bl	800f204 <_ZN10TestOutputC1Ev>
 8007638:	4a03      	ldr	r2, [pc, #12]	; (8007648 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	601a      	str	r2, [r3, #0]
    }
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4618      	mov	r0, r3
 8007642:	3708      	adds	r7, #8
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	08026914 	.word	0x08026914

0800764c <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
    {
 8007654:	4a05      	ldr	r2, [pc, #20]	; (800766c <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	601a      	str	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4618      	mov	r0, r3
 800765e:	f007 fdef 	bl	800f240 <_ZN10TestOutputD1Ev>
    }
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	08026914 	.word	0x08026914

08007670 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
    }
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7ff ffe7 	bl	800764c <_ZN17ConsoleTestOutputD1Ev>
 800767e:	2110      	movs	r1, #16
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f001 fce7 	bl	8009054 <_ZdlPvj>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4618      	mov	r0, r3
 800768a:	3708      	adds	r7, #8
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8007690:	b5b0      	push	{r4, r5, r7, lr}
 8007692:	b098      	sub	sp, #96	; 0x60
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
    int result = 0;
 800769a:	2300      	movs	r3, #0
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 800769e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff ffc0 	bl	8007628 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80076a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80076ac:	4935      	ldr	r1, [pc, #212]	; (8007784 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80076ae:	4618      	mov	r0, r3
 80076b0:	f004 f87f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80076b4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80076b8:	f107 0318 	add.w	r3, r7, #24
 80076bc:	2200      	movs	r2, #0
 80076be:	4618      	mov	r0, r3
 80076c0:	f001 ff6a 	bl	8009598 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80076c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80076c8:	4618      	mov	r0, r3
 80076ca:	f004 fc2a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80076ce:	f107 0318 	add.w	r3, r7, #24
 80076d2:	2101      	movs	r1, #1
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 ff2f 	bl	8009538 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80076da:	f009 fb21 	bl	8010d20 <_ZN12TestRegistry18getCurrentRegistryEv>
 80076de:	4603      	mov	r3, r0
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	3234      	adds	r2, #52	; 0x34
 80076e4:	6812      	ldr	r2, [r2, #0]
 80076e6:	f107 0118 	add.w	r1, r7, #24
 80076ea:	4618      	mov	r0, r3
 80076ec:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 80076ee:	f009 fb17 	bl	8010d20 <_ZN12TestRegistry18getCurrentRegistryEv>
 80076f2:	4603      	mov	r3, r0
 80076f4:	f107 0008 	add.w	r0, r7, #8
 80076f8:	683a      	ldr	r2, [r7, #0]
 80076fa:	6879      	ldr	r1, [r7, #4]
 80076fc:	f000 f844 	bl	8007788 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8007700:	f107 0308 	add.w	r3, r7, #8
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f899 	bl	800783c <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 800770a:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800770c:	f107 0308 	add.w	r3, r7, #8
 8007710:	4618      	mov	r0, r3
 8007712:	f000 f863 	bl	80077dc <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8007716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10c      	bne.n	8007736 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 800771c:	f107 0318 	add.w	r3, r7, #24
 8007720:	2100      	movs	r1, #0
 8007722:	4618      	mov	r0, r3
 8007724:	f002 f83a 	bl	800979c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8007728:	4602      	mov	r2, r0
 800772a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800772e:	4611      	mov	r1, r2
 8007730:	4618      	mov	r0, r3
 8007732:	f007 fe27 	bl	800f384 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8007736:	f009 faf3 	bl	8010d20 <_ZN12TestRegistry18getCurrentRegistryEv>
 800773a:	4604      	mov	r4, r0
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	3344      	adds	r3, #68	; 0x44
 8007740:	681d      	ldr	r5, [r3, #0]
 8007742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007746:	490f      	ldr	r1, [pc, #60]	; (8007784 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8007748:	4618      	mov	r0, r3
 800774a:	f004 f832 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800774e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007752:	4619      	mov	r1, r3
 8007754:	4620      	mov	r0, r4
 8007756:	47a8      	blx	r5
 8007758:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800775c:	4618      	mov	r0, r3
 800775e:	f004 fbe0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return result;
 8007762:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8007764:	f107 0318 	add.w	r3, r7, #24
 8007768:	4618      	mov	r0, r3
 800776a:	f001 ff4d 	bl	8009608 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800776e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007772:	4618      	mov	r0, r3
 8007774:	f7ff ff6a 	bl	800764c <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8007778:	4623      	mov	r3, r4
}
 800777a:	4618      	mov	r0, r3
 800777c:	3760      	adds	r7, #96	; 0x60
 800777e:	46bd      	mov	sp, r7
 8007780:	bdb0      	pop	{r4, r5, r7, pc}
 8007782:	bf00      	nop
 8007784:	080228b8 	.word	0x080228b8

08007788 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8007788:	b590      	push	{r4, r7, lr}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8007796:	4a0f      	ldr	r2, [pc, #60]	; (80077d4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80077ae:	2241      	movs	r2, #65	; 0x41
 80077b0:	4909      	ldr	r1, [pc, #36]	; (80077d8 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80077b2:	2038      	movs	r0, #56	; 0x38
 80077b4:	f001 fc3a 	bl	800902c <_ZnwjPKci>
 80077b8:	4604      	mov	r4, r0
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4620      	mov	r0, r4
 80077c0:	f00c f84a 	bl	8013858 <_ZN20CommandLineArgumentsC1EiPKPKc>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	609c      	str	r4, [r3, #8]
}
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4618      	mov	r0, r3
 80077cc:	3714      	adds	r7, #20
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd90      	pop	{r4, r7, pc}
 80077d2:	bf00      	nop
 80077d4:	080262a0 	.word	0x080262a0
 80077d8:	080228cc 	.word	0x080228cc

080077dc <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	4a0c      	ldr	r2, [pc, #48]	; (8007818 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <_ZN21CommandLineTestRunnerD1Ev+0x20>
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	3204      	adds	r2, #4
 80077f6:	6812      	ldr	r2, [r2, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	4790      	blx	r2
    delete output_;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	3204      	adds	r2, #4
 8007808:	6812      	ldr	r2, [r2, #0]
 800780a:	4618      	mov	r0, r3
 800780c:	4790      	blx	r2
}
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4618      	mov	r0, r3
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	080262a0 	.word	0x080262a0

0800781c <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 800781c:	b580      	push	{r7, lr}
 800781e:	b082      	sub	sp, #8
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
}
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f7ff ffd9 	bl	80077dc <_ZN21CommandLineTestRunnerD1Ev>
 800782a:	2110      	movs	r1, #16
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fc11 	bl	8009054 <_ZdlPvj>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4618      	mov	r0, r3
 8007836:	3708      	adds	r7, #8
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 800783c:	b5b0      	push	{r4, r5, r7, lr}
 800783e:	b08c      	sub	sp, #48	; 0x30
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8007844:	2301      	movs	r3, #1
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8007848:	f107 031c 	add.w	r3, r7, #28
 800784c:	4929      	ldr	r1, [pc, #164]	; (80078f4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800784e:	4618      	mov	r0, r3
 8007850:	f003 ffaf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007854:	f107 021c 	add.w	r2, r7, #28
 8007858:	f107 0308 	add.w	r3, r7, #8
 800785c:	4611      	mov	r1, r2
 800785e:	4618      	mov	r0, r3
 8007860:	f008 fe1c 	bl	801049c <_ZN16SetPointerPluginC1ERK12SimpleString>
 8007864:	f107 031c 	add.w	r3, r7, #28
 8007868:	4618      	mov	r0, r3
 800786a:	f004 fb5a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68da      	ldr	r2, [r3, #12]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	3334      	adds	r3, #52	; 0x34
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f107 0108 	add.w	r1, r7, #8
 8007880:	4610      	mov	r0, r2
 8007882:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	333c      	adds	r3, #60	; 0x3c
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4610      	mov	r0, r2
 8007894:	4798      	blx	r3
 8007896:	4603      	mov	r3, r0
 8007898:	4619      	mov	r1, r3
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa3e 	bl	8007d1c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f8ac 	bl	8007a04 <_ZN21CommandLineTestRunner11runAllTestsEv>
 80078ac:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68dd      	ldr	r5, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3344      	adds	r3, #68	; 0x44
 80078ba:	681c      	ldr	r4, [r3, #0]
 80078bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078c0:	490c      	ldr	r1, [pc, #48]	; (80078f4 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80078c2:	4618      	mov	r0, r3
 80078c4:	f003 ff75 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80078c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078cc:	4619      	mov	r1, r3
 80078ce:	4628      	mov	r0, r5
 80078d0:	47a0      	blx	r4
 80078d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078d6:	4618      	mov	r0, r3
 80078d8:	f004 fb23 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return testResult;
 80078dc:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 faaa 	bl	8007e3c <_ZN16SetPointerPluginD1Ev>
    return testResult;
 80078e8:	4623      	mov	r3, r4
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3730      	adds	r7, #48	; 0x30
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bdb0      	pop	{r4, r5, r7, pc}
 80078f2:	bf00      	nop
 80078f4:	080228f0 	.word	0x080228f0

080078f8 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 80078f8:	b5b0      	push	{r4, r5, r7, lr}
 80078fa:	b082      	sub	sp, #8
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68dd      	ldr	r5, [r3, #12]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3330      	adds	r3, #48	; 0x30
 800790c:	681c      	ldr	r4, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	4618      	mov	r0, r3
 8007914:	f00c fce0 	bl	80142d8 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8007918:	4603      	mov	r3, r0
 800791a:	4619      	mov	r1, r3
 800791c:	4628      	mov	r0, r5
 800791e:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	68dd      	ldr	r5, [r3, #12]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	332c      	adds	r3, #44	; 0x2c
 800792c:	681c      	ldr	r4, [r3, #0]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	4618      	mov	r0, r3
 8007934:	f00c fcdc 	bl	80142f0 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8007938:	4603      	mov	r3, r0
 800793a:	4619      	mov	r1, r3
 800793c:	4628      	mov	r0, r5
 800793e:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	4618      	mov	r0, r3
 8007946:	f00c fc2b 	bl	80141a0 <_ZNK20CommandLineArguments9isVerboseEv>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d009      	beq.n	8007964 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3320      	adds	r3, #32
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2101      	movs	r1, #1
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	4618      	mov	r0, r3
 800796a:	f00c fc25 	bl	80141b8 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3320      	adds	r3, #32
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2102      	movs	r1, #2
 8007984:	4610      	mov	r0, r2
 8007986:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	4618      	mov	r0, r3
 800798e:	f00c fc1f 	bl	80141d0 <_ZNK20CommandLineArguments7isColorEv>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d008      	beq.n	80079aa <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685a      	ldr	r2, [r3, #4]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	3324      	adds	r3, #36	; 0x24
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4610      	mov	r0, r2
 80079a8:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	4618      	mov	r0, r3
 80079b0:	f00c fc4a 	bl	8014248 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d008      	beq.n	80079cc <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68da      	ldr	r2, [r3, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68db      	ldr	r3, [r3, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3360      	adds	r3, #96	; 0x60
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f00c fc2d 	bl	8014230 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f009 fa19 	bl	8010e18 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f00c fc50 	bl	8014290 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 80079f6:	f00b fadb 	bl	8012fb0 <_ZN10UtestShell14setCrashOnFailEv>
}
 80079fa:	bf00      	nop
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a04 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8007a04:	b5b0      	push	{r4, r5, r7, lr}
 8007a06:	b094      	sub	sp, #80	; 0x50
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ff73 	bl	80078f8 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8007a12:	2300      	movs	r3, #0
 8007a14:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f00c fc1c 	bl	8014260 <_ZNK20CommandLineArguments14getRepeatCountEv>
 8007a28:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f00c fbda 	bl	80141e8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d019      	beq.n	8007a6e <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685a      	ldr	r2, [r3, #4]
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	4611      	mov	r1, r2
 8007a44:	4618      	mov	r0, r3
 8007a46:	f009 fbaf 	bl	80111a8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3320      	adds	r3, #32
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f107 0108 	add.w	r1, r7, #8
 8007a5c:	4610      	mov	r0, r2
 8007a5e:	4798      	blx	r3
        return 0;
 8007a60:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f009 fbd6 	bl	8011218 <_ZN10TestResultD1Ev>
 8007a6c:	e0e1      	b.n	8007c32 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f00c fbc4 	bl	8014200 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d019      	beq.n	8007ab2 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4611      	mov	r1, r2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f009 fb8d 	bl	80111a8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68da      	ldr	r2, [r3, #12]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3324      	adds	r3, #36	; 0x24
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f107 0108 	add.w	r1, r7, #8
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
        return 0;
 8007aa4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007aa6:	f107 0308 	add.w	r3, r7, #8
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f009 fbb4 	bl	8011218 <_ZN10TestResultD1Ev>
 8007ab0:	e0bf      	b.n	8007c32 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f00c fbae 	bl	8014218 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d019      	beq.n	8007af6 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	f107 0308 	add.w	r3, r7, #8
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f009 fb6b 	bl	80111a8 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	3328      	adds	r3, #40	; 0x28
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f107 0108 	add.w	r1, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
        return 0;
 8007ae8:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8007aea:	f107 0308 	add.w	r3, r7, #8
 8007aee:	4618      	mov	r0, r3
 8007af0:	f009 fb92 	bl	8011218 <_ZN10TestResultD1Ev>
 8007af4:	e09d      	b.n	8007c32 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f00c fbbc 	bl	8014278 <_ZNK20CommandLineArguments11isReversingEv>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d008      	beq.n	8007b18 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68da      	ldr	r2, [r3, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	331c      	adds	r3, #28
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4610      	mov	r0, r2
 8007b16:	4798      	blx	r3

    if (arguments_->isShuffling())
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f00c fbc3 	bl	80142a8 <_ZNK20CommandLineArguments11isShufflingEv>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d023      	beq.n	8007b70 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685a      	ldr	r2, [r3, #4]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	332c      	adds	r3, #44	; 0x2c
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4941      	ldr	r1, [pc, #260]	; (8007c3c <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685d      	ldr	r5, [r3, #4]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3334      	adds	r3, #52	; 0x34
 8007b48:	681c      	ldr	r4, [r3, #0]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f00c fbb6 	bl	80142c0 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007b54:	4603      	mov	r3, r0
 8007b56:	4619      	mov	r1, r3
 8007b58:	4628      	mov	r0, r5
 8007b5a:	47a0      	blx	r4
        output_->print("\n");
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	332c      	adds	r3, #44	; 0x2c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4935      	ldr	r1, [pc, #212]	; (8007c40 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	bf8c      	ite	hi
 8007b7c:	2301      	movhi	r3, #1
 8007b7e:	2300      	movls	r3, #0
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d04e      	beq.n	8007c24 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00c fb8c 	bl	80142a8 <_ZNK20CommandLineArguments11isShufflingEv>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00f      	beq.n	8007bb6 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	68dd      	ldr	r5, [r3, #12]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	3318      	adds	r3, #24
 8007ba2:	681c      	ldr	r4, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f00c fb89 	bl	80142c0 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6858      	ldr	r0, [r3, #4]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	3340      	adds	r3, #64	; 0x40
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007bc8:	4798      	blx	r3
        TestResult tr(*output_);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685a      	ldr	r2, [r3, #4]
 8007bce:	f107 0308 	add.w	r3, r7, #8
 8007bd2:	4611      	mov	r1, r2
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f009 fae7 	bl	80111a8 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	3314      	adds	r3, #20
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f107 0108 	add.w	r1, r7, #8
 8007bec:	4610      	mov	r0, r2
 8007bee:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8007bf0:	f107 0308 	add.w	r3, r7, #8
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f7ff fcef 	bl	80075d8 <_ZNK10TestResult15getFailureCountEv>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bfe:	4413      	add	r3, r2
 8007c00:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fcf2 	bl	80075f0 <_ZNK10TestResult9isFailureEv>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d002      	beq.n	8007c18 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8007c12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c14:	3301      	adds	r3, #1
 8007c16:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f009 fafb 	bl	8011218 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8007c22:	e7a5      	b.n	8007b70 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8007c24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8007c2a:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007c2c:	e000      	b.n	8007c30 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8007c2e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8007c30:	bf00      	nop
 8007c32:	4623      	mov	r3, r4
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3750      	adds	r7, #80	; 0x50
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007c3c:	08022904 	.word	0x08022904
 8007c40:	08022930 	.word	0x08022930

08007c44 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8007c44:	b590      	push	{r4, r7, lr}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8007c4c:	229d      	movs	r2, #157	; 0x9d
 8007c4e:	4906      	ldr	r1, [pc, #24]	; (8007c68 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 8007c50:	201c      	movs	r0, #28
 8007c52:	f001 f9eb 	bl	800902c <_ZnwjPKci>
 8007c56:	4604      	mov	r4, r0
 8007c58:	4620      	mov	r0, r4
 8007c5a:	f005 f955 	bl	800cf08 <_ZN18TeamCityTestOutputC1Ev>
 8007c5e:	4623      	mov	r3, r4
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd90      	pop	{r4, r7, pc}
 8007c68:	080228cc 	.word	0x080228cc

08007c6c <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8007c76:	22a2      	movs	r2, #162	; 0xa2
 8007c78:	490a      	ldr	r1, [pc, #40]	; (8007ca4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8007c7a:	2014      	movs	r0, #20
 8007c7c:	f001 f9d6 	bl	800902c <_ZnwjPKci>
 8007c80:	4604      	mov	r4, r0
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f980 	bl	8007f88 <_ZN15JUnitTestOutputC1Ev>
 8007c88:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d003      	beq.n	8007c98 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 8007c90:	6839      	ldr	r1, [r7, #0]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fbb2 	bl	80083fc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 8007c98:	68fb      	ldr	r3, [r7, #12]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd90      	pop	{r4, r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	080228cc 	.word	0x080228cc

08007ca8 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 8007ca8:	b590      	push	{r4, r7, lr}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8007cb0:	22ab      	movs	r2, #171	; 0xab
 8007cb2:	4906      	ldr	r1, [pc, #24]	; (8007ccc <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8007cb4:	2010      	movs	r0, #16
 8007cb6:	f001 f9b9 	bl	800902c <_ZnwjPKci>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f7ff fcb3 	bl	8007628 <_ZN17ConsoleTestOutputC1Ev>
 8007cc2:	4623      	mov	r3, r4
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd90      	pop	{r4, r7, pc}
 8007ccc:	080228cc 	.word	0x080228cc

08007cd0 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8007cdc:	22b0      	movs	r2, #176	; 0xb0
 8007cde:	490e      	ldr	r1, [pc, #56]	; (8007d18 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8007ce0:	2018      	movs	r0, #24
 8007ce2:	f001 f9a3 	bl	800902c <_ZnwjPKci>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4620      	mov	r0, r4
 8007cea:	f007 ff83 	bl	800fbf4 <_ZN19CompositeTestOutputC1Ev>
 8007cee:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	335c      	adds	r3, #92	; 0x5c
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	6978      	ldr	r0, [r7, #20]
 8007cfc:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3360      	adds	r3, #96	; 0x60
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	6978      	ldr	r0, [r7, #20]
 8007d0a:	4798      	blx	r3
  return composite;
 8007d0c:	697b      	ldr	r3, [r7, #20]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	371c      	adds	r7, #28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd90      	pop	{r4, r7, pc}
 8007d16:	bf00      	nop
 8007d18:	080228cc 	.word	0x080228cc

08007d1c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8007d1c:	b5b0      	push	{r4, r5, r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	6839      	ldr	r1, [r7, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f00b fe4f 	bl	80139d0 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f083 0301 	eor.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d029      	beq.n	8007d92 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3310      	adds	r3, #16
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	4798      	blx	r3
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	685d      	ldr	r5, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	332c      	adds	r3, #44	; 0x2c
 8007d5c:	681c      	ldr	r4, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f00c fa10 	bl	8014188 <_ZNK20CommandLineArguments8needHelpEv>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d006      	beq.n	8007d7c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	4618      	mov	r0, r3
 8007d74:	f00c f9fa 	bl	801416c <_ZNK20CommandLineArguments4helpEv>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	e005      	b.n	8007d88 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f00c f9e5 	bl	8014150 <_ZNK20CommandLineArguments5usageEv>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47a0      	blx	r4
    return false;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	e050      	b.n	8007e34 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	4618      	mov	r0, r3
 8007d98:	f00d f84c 	bl	8014e34 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02c      	beq.n	8007dfc <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	681c      	ldr	r4, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f00d f864 	bl	8014e7c <_ZNK20CommandLineArguments14getPackageNameEv>
 8007db4:	4603      	mov	r3, r0
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	47a0      	blx	r4
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	689b      	ldr	r3, [r3, #8]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f00c f9ea 	bl	80141a0 <_ZNK20CommandLineArguments9isVerboseEv>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d02f      	beq.n	8007e32 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	3314      	adds	r3, #20
 8007dd8:	681c      	ldr	r4, [r3, #0]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685d      	ldr	r5, [r3, #4]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	3310      	adds	r3, #16
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
 8007dea:	4603      	mov	r3, r0
 8007dec:	461a      	mov	r2, r3
 8007dee:	4629      	mov	r1, r5
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	47a0      	blx	r4
 8007df4:	4602      	mov	r2, r0
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	e01a      	b.n	8007e32 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f00d f829 	bl	8014e58 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3308      	adds	r3, #8
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
 8007e18:	4602      	mov	r2, r0
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	e008      	b.n	8007e32 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3310      	adds	r3, #16
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]
  return true;
 8007e32:	2301      	movs	r3, #1
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bdb0      	pop	{r4, r5, r7, pc}

08007e3c <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <_ZN16SetPointerPluginD1Ev+0x20>)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f008 f9e7 	bl	8010220 <_ZN10TestPluginD1Ev>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4618      	mov	r0, r3
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	08026a20 	.word	0x08026a20

08007e60 <_ZN16SetPointerPluginD0Ev>:
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b082      	sub	sp, #8
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff ffe7 	bl	8007e3c <_ZN16SetPointerPluginD1Ev>
 8007e6e:	2114      	movs	r1, #20
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f001 f8ef 	bl	8009054 <_ZdlPvj>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
        return checkCount_;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
    }
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	4910      	ldr	r1, [pc, #64]	; (8007ee4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f003 fc84 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	609a      	str	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	60da      	str	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	741a      	strb	r2, [r3, #16]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3314      	adds	r3, #20
 8007ec0:	4908      	ldr	r1, [pc, #32]	; (8007ee4 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f003 fc75 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	61da      	str	r2, [r3, #28]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	621a      	str	r2, [r3, #32]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	08022934 	.word	0x08022934

08007ee8 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	605a      	str	r2, [r3, #4]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	609a      	str	r2, [r3, #8]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	60da      	str	r2, [r3, #12]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	611a      	str	r2, [r3, #16]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	3314      	adds	r3, #20
 8007f12:	4907      	ldr	r1, [pc, #28]	; (8007f30 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8007f14:	4618      	mov	r0, r3
 8007f16:	f003 fc4c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	61da      	str	r2, [r3, #28]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	621a      	str	r2, [r3, #32]
    {
    }
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08022934 	.word	0x08022934

08007f34 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3314      	adds	r3, #20
 8007f40:	4618      	mov	r0, r3
 8007f42:	f003 ffee 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f7ff ffc4 	bl	8007ee8 <_ZN20JUnitTestGroupResultC1Ev>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	3328      	adds	r3, #40	; 0x28
 8007f64:	4907      	ldr	r1, [pc, #28]	; (8007f84 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007f66:	4618      	mov	r0, r3
 8007f68:	f003 fc23 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3330      	adds	r3, #48	; 0x30
 8007f70:	4904      	ldr	r1, [pc, #16]	; (8007f84 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8007f72:	4618      	mov	r0, r3
 8007f74:	f003 fc1d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	08022934 	.word	0x08022934

08007f88 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f007 f936 	bl	800f204 <_ZN10TestOutputC1Ev>
 8007f98:	4a09      	ldr	r2, [pc, #36]	; (8007fc0 <_ZN15JUnitTestOutputC1Ev+0x38>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	601a      	str	r2, [r3, #0]
 8007f9e:	224d      	movs	r2, #77	; 0x4d
 8007fa0:	4908      	ldr	r1, [pc, #32]	; (8007fc4 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8007fa2:	2038      	movs	r0, #56	; 0x38
 8007fa4:	f001 f842 	bl	800902c <_ZnwjPKci>
 8007fa8:	4604      	mov	r4, r0
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff ffd0 	bl	8007f50 <_ZN19JUnitTestOutputImplC1Ev>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	611c      	str	r4, [r3, #16]
{
}
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd90      	pop	{r4, r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	080262c0 	.word	0x080262c0
 8007fc4:	08022938 	.word	0x08022938

08007fc8 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3330      	adds	r3, #48	; 0x30
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f003 ffa4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	3328      	adds	r3, #40	; 0x28
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f003 ff9f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ffa4 	bl	8007f34 <_ZN20JUnitTestGroupResultD1Ev>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8007ff8:	b590      	push	{r4, r7, lr}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	4a0c      	ldr	r2, [pc, #48]	; (8008034 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f838 	bl	800807c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691c      	ldr	r4, [r3, #16]
 8008010:	2c00      	cmp	r4, #0
 8008012:	d006      	beq.n	8008022 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8008014:	4620      	mov	r0, r4
 8008016:	f7ff ffd7 	bl	8007fc8 <_ZN19JUnitTestOutputImplD1Ev>
 800801a:	2138      	movs	r1, #56	; 0x38
 800801c:	4620      	mov	r0, r4
 800801e:	f001 f819 	bl	8009054 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4618      	mov	r0, r3
 8008026:	f007 f90b 	bl	800f240 <_ZN10TestOutputD1Ev>
}
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bd90      	pop	{r4, r7, pc}
 8008034:	080262c0 	.word	0x080262c0

08008038 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
}
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff ffd9 	bl	8007ff8 <_ZN15JUnitTestOutputD1Ev>
 8008046:	2114      	movs	r1, #20
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 f803 	bl	8009054 <_ZdlPvj>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4618      	mov	r0, r3
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3314      	adds	r3, #20
 8008064:	4618      	mov	r0, r3
 8008066:	f003 ff5c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4618      	mov	r0, r3
 800806e:	f003 ff58 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 800807c:	b590      	push	{r4, r7, lr}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	2200      	movs	r2, #0
 8008092:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	f103 0414 	add.w	r4, r3, #20
 800809c:	f107 0308 	add.w	r3, r7, #8
 80080a0:	491d      	ldr	r1, [pc, #116]	; (8008118 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 80080a2:	4618      	mov	r0, r3
 80080a4:	f003 fb85 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80080a8:	f107 0308 	add.w	r3, r7, #8
 80080ac:	4619      	mov	r1, r3
 80080ae:	4620      	mov	r0, r4
 80080b0:	f003 fbeb 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 80080b4:	f107 0308 	add.w	r3, r7, #8
 80080b8:	4618      	mov	r0, r3
 80080ba:	f003 ff32 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	617b      	str	r3, [r7, #20]
    while (cur) {
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d018      	beq.n	80080fe <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d0:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d004      	beq.n	80080e4 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	3204      	adds	r2, #4
 80080de:	6812      	ldr	r2, [r2, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	4790      	blx	r2
        delete cur;
 80080e4:	697c      	ldr	r4, [r7, #20]
 80080e6:	2c00      	cmp	r4, #0
 80080e8:	d006      	beq.n	80080f8 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 80080ea:	4620      	mov	r0, r4
 80080ec:	f7ff ffb4 	bl	8008058 <_ZN23JUnitTestCaseResultNodeD1Ev>
 80080f0:	2128      	movs	r1, #40	; 0x28
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 ffae 	bl	8009054 <_ZdlPvj>
        cur = tmp;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	617b      	str	r3, [r7, #20]
    while (cur) {
 80080fc:	e7e3      	b.n	80080c6 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2200      	movs	r2, #0
 8008104:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	2200      	movs	r2, #0
 800810c:	621a      	str	r2, [r3, #32]
}
 800810e:	bf00      	nop
 8008110:	371c      	adds	r7, #28
 8008112:	46bd      	mov	sp, r7
 8008114:	bd90      	pop	{r4, r7, pc}
 8008116:	bf00      	nop
 8008118:	08022934 	.word	0x08022934

0800811c <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr

08008146 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8008146:	b590      	push	{r4, r7, lr}
 8008148:	b083      	sub	sp, #12
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	6a1c      	ldr	r4, [r3, #32]
 8008156:	6838      	ldr	r0, [r7, #0]
 8008158:	f009 f9c6 	bl	80114e8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800815c:	4603      	mov	r3, r0
 800815e:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	6a1c      	ldr	r4, [r3, #32]
 8008166:	6838      	ldr	r0, [r7, #0]
 8008168:	f7ff fe8a 	bl	8007e80 <_ZNK10TestResult13getCheckCountEv>
 800816c:	4603      	mov	r3, r0
 800816e:	6223      	str	r3, [r4, #32]
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	bd90      	pop	{r4, r7, pc}

08008178 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
}
 8008182:	bf00      	nop
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 800818e:	b590      	push	{r4, r7, lr}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691c      	ldr	r4, [r3, #16]
 800819c:	6838      	ldr	r0, [r7, #0]
 800819e:	f009 f9af 	bl	8011500 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 80081a2:	4603      	mov	r3, r0
 80081a4:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3364      	adds	r3, #100	; 0x64
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
    resetTestGroupResult();
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff ff62 	bl	800807c <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd90      	pop	{r4, r7, pc}

080081c0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b089      	sub	sp, #36	; 0x24
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	3201      	adds	r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f103 0414 	add.w	r4, r3, #20
 80081dc:	f107 0308 	add.w	r3, r7, #8
 80081e0:	6839      	ldr	r1, [r7, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f009 fcef 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 80081e8:	f107 0308 	add.w	r3, r7, #8
 80081ec:	4619      	mov	r1, r3
 80081ee:	4620      	mov	r0, r4
 80081f0:	f003 fb4b 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 80081f4:	f107 0308 	add.w	r3, r7, #8
 80081f8:	4618      	mov	r0, r3
 80081fa:	f003 fe92 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 80081fe:	4b3c      	ldr	r3, [pc, #240]	; (80082f0 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4798      	blx	r3
 8008204:	4602      	mov	r2, r0
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d110      	bne.n	8008238 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8008216:	2288      	movs	r2, #136	; 0x88
 8008218:	4936      	ldr	r1, [pc, #216]	; (80082f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800821a:	2028      	movs	r0, #40	; 0x28
 800821c:	f000 ff06 	bl	800902c <_ZnwjPKci>
 8008220:	4604      	mov	r4, r0
 8008222:	4620      	mov	r0, r4
 8008224:	f7ff fe38 	bl	8007e98 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 800822c:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 800822e:	687a      	ldr	r2, [r7, #4]
 8008230:	6912      	ldr	r2, [r2, #16]
 8008232:	6a1b      	ldr	r3, [r3, #32]
 8008234:	61d3      	str	r3, [r2, #28]
 8008236:	e013      	b.n	8008260 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8008238:	228b      	movs	r2, #139	; 0x8b
 800823a:	492e      	ldr	r1, [pc, #184]	; (80082f4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800823c:	2028      	movs	r0, #40	; 0x28
 800823e:	f000 fef5 	bl	800902c <_ZnwjPKci>
 8008242:	4604      	mov	r4, r0
 8008244:	4620      	mov	r0, r4
 8008246:	f7ff fe27 	bl	8007e98 <_ZN23JUnitTestCaseResultNodeC1Ev>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	6a1b      	ldr	r3, [r3, #32]
 8008250:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	6a1a      	ldr	r2, [r3, #32]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691b      	ldr	r3, [r3, #16]
 800825c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800825e:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	461c      	mov	r4, r3
 8008268:	f107 0310 	add.w	r3, r7, #16
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f009 fc9a 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 8008274:	f107 0310 	add.w	r3, r7, #16
 8008278:	4619      	mov	r1, r3
 800827a:	4620      	mov	r0, r4
 800827c:	f003 fb05 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 8008280:	f107 0310 	add.w	r3, r7, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f003 fe4c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	f103 0414 	add.w	r4, r3, #20
 8008294:	f107 0318 	add.w	r3, r7, #24
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	4618      	mov	r0, r3
 800829c:	f009 fd55 	bl	8011d4a <_ZNK10UtestShell7getFileEv>
 80082a0:	f107 0318 	add.w	r3, r7, #24
 80082a4:	4619      	mov	r1, r3
 80082a6:	4620      	mov	r0, r4
 80082a8:	f003 faef 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 80082ac:	f107 0318 	add.w	r3, r7, #24
 80082b0:	4618      	mov	r0, r3
 80082b2:	f003 fe36 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	6a1c      	ldr	r4, [r3, #32]
 80082bc:	6838      	ldr	r0, [r7, #0]
 80082be:	f009 fd53 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 80082c2:	4603      	mov	r3, r0
 80082c4:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3318      	adds	r3, #24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6838      	ldr	r0, [r7, #0]
 80082d0:	4798      	blx	r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	f083 0301 	eor.w	r3, r3, #1
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	691b      	ldr	r3, [r3, #16]
 80082e2:	6a1b      	ldr	r3, [r3, #32]
 80082e4:	2201      	movs	r2, #1
 80082e6:	741a      	strb	r2, [r3, #16]
    }
}
 80082e8:	bf00      	nop
 80082ea:	3724      	adds	r7, #36	; 0x24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd90      	pop	{r4, r7, pc}
 80082f0:	200000ac 	.word	0x200000ac
 80082f4:	08022938 	.word	0x08022938

080082f8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b08a      	sub	sp, #40	; 0x28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	4928      	ldr	r1, [pc, #160]	; (80083ac <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800830a:	4618      	mov	r0, r3
 800830c:	f003 fa51 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	3328      	adds	r3, #40	; 0x28
 8008316:	4618      	mov	r0, r3
 8008318:	f003 fdf2 	bl	800bf00 <_ZNK12SimpleString7isEmptyEv>
 800831c:	4603      	mov	r3, r0
 800831e:	f083 0301 	eor.w	r3, r3, #1
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00f      	beq.n	8008348 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8008330:	f107 0310 	add.w	r3, r7, #16
 8008334:	4611      	mov	r1, r2
 8008336:	4618      	mov	r0, r3
 8008338:	f003 fe70 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 800833c:	f107 0310 	add.w	r3, r7, #16
 8008340:	491b      	ldr	r1, [pc, #108]	; (80083b0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8008342:	4618      	mov	r0, r3
 8008344:	f003 fe7c 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8008348:	f107 0310 	add.w	r3, r7, #16
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	4618      	mov	r0, r3
 8008350:	f003 fe64 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3384      	adds	r3, #132	; 0x84
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f107 0018 	add.w	r0, r7, #24
 8008360:	f107 0210 	add.w	r2, r7, #16
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	4798      	blx	r3
 8008368:	f107 0320 	add.w	r3, r7, #32
 800836c:	4911      	ldr	r1, [pc, #68]	; (80083b4 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 800836e:	4618      	mov	r0, r3
 8008370:	f003 fa1f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f107 0220 	add.w	r2, r7, #32
 800837a:	f107 0118 	add.w	r1, r7, #24
 800837e:	4618      	mov	r0, r3
 8008380:	f003 fe31 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8008384:	f107 0320 	add.w	r3, r7, #32
 8008388:	4618      	mov	r0, r3
 800838a:	f003 fdca 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800838e:	f107 0318 	add.w	r3, r7, #24
 8008392:	4618      	mov	r0, r3
 8008394:	f003 fdc5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8008398:	f107 0310 	add.w	r3, r7, #16
 800839c:	4618      	mov	r0, r3
 800839e:	f003 fdc0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 80083a2:	bf00      	nop
}
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	3728      	adds	r7, #40	; 0x28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	08022954 	.word	0x08022954
 80083b0:	08022960 	.word	0x08022960
 80083b4:	08022964 	.word	0x08022964

080083b8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 80083c4:	6879      	ldr	r1, [r7, #4]
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f003 fa47 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80083cc:	4b0a      	ldr	r3, [pc, #40]	; (80083f8 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 80083ce:	617b      	str	r3, [r7, #20]
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00a      	beq.n	80083ee <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	225f      	movs	r2, #95	; 0x5f
 80083de:	4619      	mov	r1, r3
 80083e0:	68f8      	ldr	r0, [r7, #12]
 80083e2:	f003 fbcc 	bl	800bb7e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	3301      	adds	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	e7f0      	b.n	80083d0 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 80083ee:	bf00      	nop
}
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	0802296c 	.word	0x0802296c

080083fc <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b082      	sub	sp, #8
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d006      	beq.n	800841c <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	3328      	adds	r3, #40	; 0x28
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f003 fa37 	bl	800b88a <_ZN12SimpleStringaSERKS_>
    }
}
 800841c:	bf00      	nop
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3368      	adds	r3, #104	; 0x68
 8008432:	681c      	ldr	r4, [r3, #0]
 8008434:	f107 0308 	add.w	r3, r7, #8
 8008438:	4908      	ldr	r1, [pc, #32]	; (800845c <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 800843a:	4618      	mov	r0, r3
 800843c:	f003 f9b9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008440:	f107 0308 	add.w	r3, r7, #8
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	47a0      	blx	r4
 800844a:	f107 0308 	add.w	r3, r7, #8
 800844e:	4618      	mov	r0, r3
 8008450:	f003 fd67 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	08022978 	.word	0x08022978

08008460 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8008460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008464:	b08a      	sub	sp, #40	; 0x28
 8008466:	af04      	add	r7, sp, #16
 8008468:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8008470:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8008476:	3314      	adds	r3, #20
 8008478:	4618      	mov	r0, r3
 800847a:	f003 fd25 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800847e:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8008486:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	4a23      	ldr	r2, [pc, #140]	; (800851c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8008490:	fba2 2303 	umull	r2, r3, r2, r3
 8008494:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8008496:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	691a      	ldr	r2, [r3, #16]
 800849e:	4b1f      	ldr	r3, [pc, #124]	; (800851c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	099b      	lsrs	r3, r3, #6
 80084a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80084aa:	fb01 f303 	mul.w	r3, r1, r3
 80084ae:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 80084b0:	603b      	str	r3, [r7, #0]
 80084b2:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4798      	blx	r3
 80084b8:	4603      	mov	r3, r0
 80084ba:	f107 0008 	add.w	r0, r7, #8
 80084be:	9303      	str	r3, [sp, #12]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	9302      	str	r3, [sp, #8]
 80084c4:	9601      	str	r6, [sp, #4]
 80084c6:	9500      	str	r5, [sp, #0]
 80084c8:	4623      	mov	r3, r4
 80084ca:	4642      	mov	r2, r8
 80084cc:	4915      	ldr	r1, [pc, #84]	; (8008524 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 80084ce:	f004 fa2f 	bl	800c930 <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3368      	adds	r3, #104	; 0x68
 80084d8:	681c      	ldr	r4, [r3, #0]
 80084da:	f107 0308 	add.w	r3, r7, #8
 80084de:	4618      	mov	r0, r3
 80084e0:	f003 fcf2 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 80084e4:	4602      	mov	r2, r0
 80084e6:	f107 0310 	add.w	r3, r7, #16
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f003 f960 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80084f2:	f107 0310 	add.w	r3, r7, #16
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	47a0      	blx	r4
 80084fc:	f107 0310 	add.w	r3, r7, #16
 8008500:	4618      	mov	r0, r3
 8008502:	f003 fd0e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8008506:	f107 0308 	add.w	r3, r7, #8
 800850a:	4618      	mov	r0, r3
 800850c:	f003 fd09 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8008510:	bf00      	nop
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800851a:	bf00      	nop
 800851c:	10624dd3 	.word	0x10624dd3
 8008520:	200000b0 	.word	0x200000b0
 8008524:	080229a4 	.word	0x080229a4

08008528 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	3368      	adds	r3, #104	; 0x68
 8008536:	681c      	ldr	r4, [r3, #0]
 8008538:	f107 0308 	add.w	r3, r7, #8
 800853c:	4912      	ldr	r1, [pc, #72]	; (8008588 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 800853e:	4618      	mov	r0, r3
 8008540:	f003 f937 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008544:	f107 0308 	add.w	r3, r7, #8
 8008548:	4619      	mov	r1, r3
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	47a0      	blx	r4
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f003 fce5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3368      	adds	r3, #104	; 0x68
 800855e:	681c      	ldr	r4, [r3, #0]
 8008560:	f107 0310 	add.w	r3, r7, #16
 8008564:	4909      	ldr	r1, [pc, #36]	; (800858c <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8008566:	4618      	mov	r0, r3
 8008568:	f003 f923 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800856c:	f107 0310 	add.w	r3, r7, #16
 8008570:	4619      	mov	r1, r3
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	47a0      	blx	r4
 8008576:	f107 0310 	add.w	r3, r7, #16
 800857a:	4618      	mov	r0, r3
 800857c:	f003 fcd1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8008580:	bf00      	nop
 8008582:	371c      	adds	r7, #28
 8008584:	46bd      	mov	sp, r7
 8008586:	bd90      	pop	{r4, r7, pc}
 8008588:	08022a14 	.word	0x08022a14
 800858c:	08022a24 	.word	0x08022a24

08008590 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f003 fc93 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 80085a2:	4603      	mov	r3, r0
 80085a4:	4619      	mov	r1, r3
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f003 f903 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 80085ac:	4a0e      	ldr	r2, [pc, #56]	; (80085e8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 80085ae:	490f      	ldr	r1, [pc, #60]	; (80085ec <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f003 fb13 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 80085b6:	4a0e      	ldr	r2, [pc, #56]	; (80085f0 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 80085b8:	490e      	ldr	r1, [pc, #56]	; (80085f4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 80085ba:	68f8      	ldr	r0, [r7, #12]
 80085bc:	f003 fb0e 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 80085c0:	4a0d      	ldr	r2, [pc, #52]	; (80085f8 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 80085c2:	490e      	ldr	r1, [pc, #56]	; (80085fc <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f003 fb09 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 80085ca:	4a0d      	ldr	r2, [pc, #52]	; (8008600 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 80085cc:	490d      	ldr	r1, [pc, #52]	; (8008604 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f003 fb04 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 80085d4:	4a0c      	ldr	r2, [pc, #48]	; (8008608 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 80085d6:	490d      	ldr	r1, [pc, #52]	; (800860c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f003 faff 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 80085de:	bf00      	nop
}
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}
 80085e8:	08022a34 	.word	0x08022a34
 80085ec:	08022a3c 	.word	0x08022a3c
 80085f0:	08022a40 	.word	0x08022a40
 80085f4:	08022a48 	.word	0x08022a48
 80085f8:	08022a4c 	.word	0x08022a4c
 80085fc:	08022a54 	.word	0x08022a54
 8008600:	08022a58 	.word	0x08022a58
 8008604:	08022a60 	.word	0x08022a60
 8008608:	08022a64 	.word	0x08022a64
 800860c:	08022a70 	.word	0x08022a70

08008610 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	b096      	sub	sp, #88	; 0x58
 8008616:	af08      	add	r7, sp, #32
 8008618:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8008622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008624:	2b00      	cmp	r3, #0
 8008626:	f000 80b2 	beq.w	800878e <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800862e:	3328      	adds	r3, #40	; 0x28
 8008630:	4618      	mov	r0, r3
 8008632:	f003 fc49 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8008636:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	3328      	adds	r3, #40	; 0x28
 800863e:	4618      	mov	r0, r3
 8008640:	f003 fc5e 	bl	800bf00 <_ZNK12SimpleString7isEmptyEv>
 8008644:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 800864a:	4c53      	ldr	r4, [pc, #332]	; (8008798 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 800864c:	e000      	b.n	8008650 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800864e:	4c53      	ldr	r4, [pc, #332]	; (800879c <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8008654:	3314      	adds	r3, #20
 8008656:	4618      	mov	r0, r3
 8008658:	f003 fc36 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800865c:	4605      	mov	r5, r0
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	4618      	mov	r0, r3
 8008662:	f003 fc31 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8008666:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	6a1a      	ldr	r2, [r3, #32]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8008674:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8008676:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	4a49      	ldr	r2, [pc, #292]	; (80087a0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8008682:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8008684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	4b45      	ldr	r3, [pc, #276]	; (80087a0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 800868a:	fba3 1302 	umull	r1, r3, r3, r2
 800868e:	099b      	lsrs	r3, r3, #6
 8008690:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 800869a:	603b      	str	r3, [r7, #0]
 800869c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800869e:	3314      	adds	r3, #20
 80086a0:	4618      	mov	r0, r3
 80086a2:	f003 fc11 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 80086a6:	4602      	mov	r2, r0
 80086a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086aa:	69db      	ldr	r3, [r3, #28]
 80086ac:	f107 0014 	add.w	r0, r7, #20
 80086b0:	9306      	str	r3, [sp, #24]
 80086b2:	9205      	str	r2, [sp, #20]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	9204      	str	r2, [sp, #16]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	9203      	str	r2, [sp, #12]
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	9302      	str	r3, [sp, #8]
 80086c0:	9601      	str	r6, [sp, #4]
 80086c2:	9500      	str	r5, [sp, #0]
 80086c4:	4623      	mov	r3, r4
 80086c6:	4642      	mov	r2, r8
 80086c8:	4936      	ldr	r1, [pc, #216]	; (80087a4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80086ca:	f004 f931 	bl	800c930 <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3368      	adds	r3, #104	; 0x68
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	f107 0314 	add.w	r3, r7, #20
 80086da:	4618      	mov	r0, r3
 80086dc:	f003 fbf4 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 80086e0:	4602      	mov	r2, r0
 80086e2:	f107 031c 	add.w	r3, r7, #28
 80086e6:	4611      	mov	r1, r2
 80086e8:	4618      	mov	r0, r3
 80086ea:	f003 f862 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80086ee:	f107 031c 	add.w	r3, r7, #28
 80086f2:	4619      	mov	r1, r3
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	47a0      	blx	r4
 80086f8:	f107 031c 	add.w	r3, r7, #28
 80086fc:	4618      	mov	r0, r3
 80086fe:	f003 fc10 	bl	800bf22 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008708:	6a12      	ldr	r2, [r2, #32]
 800870a:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 800870c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d007      	beq.n	8008724 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	3388      	adds	r3, #136	; 0x88
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	4798      	blx	r3
 8008722:	e017      	b.n	8008754 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	7c1b      	ldrb	r3, [r3, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d013      	beq.n	8008754 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3368      	adds	r3, #104	; 0x68
 8008732:	681c      	ldr	r4, [r3, #0]
 8008734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008738:	491b      	ldr	r1, [pc, #108]	; (80087a8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 800873a:	4618      	mov	r0, r3
 800873c:	f003 f839 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008744:	4619      	mov	r1, r3
 8008746:	68f8      	ldr	r0, [r7, #12]
 8008748:	47a0      	blx	r4
 800874a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800874e:	4618      	mov	r0, r3
 8008750:	f003 fbe7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	3368      	adds	r3, #104	; 0x68
 800875a:	681c      	ldr	r4, [r3, #0]
 800875c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008760:	4912      	ldr	r1, [pc, #72]	; (80087ac <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8008762:	4618      	mov	r0, r3
 8008764:	f003 f825 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	47a0      	blx	r4
 8008772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008776:	4618      	mov	r0, r3
 8008778:	f003 fbd3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008780:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8008782:	f107 0314 	add.w	r3, r7, #20
 8008786:	4618      	mov	r0, r3
 8008788:	f003 fbcb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    while (cur) {
 800878c:	e749      	b.n	8008622 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 800878e:	bf00      	nop
 8008790:	3738      	adds	r7, #56	; 0x38
 8008792:	46bd      	mov	sp, r7
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	08022934 	.word	0x08022934
 800879c:	08022a74 	.word	0x08022a74
 80087a0:	10624dd3 	.word	0x10624dd3
 80087a4:	08022a78 	.word	0x08022a78
 80087a8:	08022ad4 	.word	0x08022ad4
 80087ac:	08022ae4 	.word	0x08022ae4

080087b0 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80087b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087b2:	b091      	sub	sp, #68	; 0x44
 80087b4:	af02      	add	r7, sp, #8
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	68d9      	ldr	r1, [r3, #12]
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	68db      	ldr	r3, [r3, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f107 0210 	add.w	r2, r7, #16
 80087cc:	4610      	mov	r0, r2
 80087ce:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80087d0:	f107 0310 	add.w	r3, r7, #16
 80087d4:	4618      	mov	r0, r3
 80087d6:	f003 fb77 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 80087da:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	3314      	adds	r3, #20
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4610      	mov	r0, r2
 80087ec:	4798      	blx	r3
 80087ee:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80087f0:	461e      	mov	r6, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3380      	adds	r3, #128	; 0x80
 80087f8:	681c      	ldr	r4, [r3, #0]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68d9      	ldr	r1, [r3, #12]
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3318      	adds	r3, #24
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f107 0220 	add.w	r2, r7, #32
 800880c:	4610      	mov	r0, r2
 800880e:	4798      	blx	r3
 8008810:	f107 0318 	add.w	r3, r7, #24
 8008814:	f107 0220 	add.w	r2, r7, #32
 8008818:	6879      	ldr	r1, [r7, #4]
 800881a:	4618      	mov	r0, r3
 800881c:	47a0      	blx	r4
 800881e:	f107 0318 	add.w	r3, r7, #24
 8008822:	4618      	mov	r0, r3
 8008824:	f003 fb50 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8008828:	4603      	mov	r3, r0
 800882a:	f107 0008 	add.w	r0, r7, #8
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	4633      	mov	r3, r6
 8008832:	462a      	mov	r2, r5
 8008834:	4924      	ldr	r1, [pc, #144]	; (80088c8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8008836:	f004 f87b 	bl	800c930 <_Z16StringFromFormatPKcz>
 800883a:	f107 0318 	add.w	r3, r7, #24
 800883e:	4618      	mov	r0, r3
 8008840:	f003 fb6f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8008844:	f107 0320 	add.w	r3, r7, #32
 8008848:	4618      	mov	r0, r3
 800884a:	f003 fb6a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800884e:	f107 0310 	add.w	r3, r7, #16
 8008852:	4618      	mov	r0, r3
 8008854:	f003 fb65 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3368      	adds	r3, #104	; 0x68
 800885e:	681c      	ldr	r4, [r3, #0]
 8008860:	f107 0308 	add.w	r3, r7, #8
 8008864:	4618      	mov	r0, r3
 8008866:	f003 fb2f 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800886a:	4602      	mov	r2, r0
 800886c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008870:	4611      	mov	r1, r2
 8008872:	4618      	mov	r0, r3
 8008874:	f002 ff9d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008878:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	47a0      	blx	r4
 8008882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008886:	4618      	mov	r0, r3
 8008888:	f003 fb4b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3368      	adds	r3, #104	; 0x68
 8008892:	681c      	ldr	r4, [r3, #0]
 8008894:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008898:	490c      	ldr	r1, [pc, #48]	; (80088cc <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 800889a:	4618      	mov	r0, r3
 800889c:	f002 ff89 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80088a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088a4:	4619      	mov	r1, r3
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	47a0      	blx	r4
 80088aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80088ae:	4618      	mov	r0, r3
 80088b0:	f003 fb37 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80088b4:	f107 0308 	add.w	r3, r7, #8
 80088b8:	4618      	mov	r0, r3
 80088ba:	f003 fb32 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 80088be:	bf00      	nop
 80088c0:	373c      	adds	r7, #60	; 0x3c
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	08022af4 	.word	0x08022af4
 80088cc:	08022b30 	.word	0x08022b30

080088d0 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b08d      	sub	sp, #52	; 0x34
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	3368      	adds	r3, #104	; 0x68
 80088de:	681c      	ldr	r4, [r3, #0]
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4933      	ldr	r1, [pc, #204]	; (80089b4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 80088e6:	4618      	mov	r0, r3
 80088e8:	f002 ff63 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	47a0      	blx	r4
 80088f6:	f107 0308 	add.w	r3, r7, #8
 80088fa:	4618      	mov	r0, r3
 80088fc:	f003 fb11 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	3368      	adds	r3, #104	; 0x68
 8008906:	681c      	ldr	r4, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3380      	adds	r3, #128	; 0x80
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	6912      	ldr	r2, [r2, #16]
 8008914:	3230      	adds	r2, #48	; 0x30
 8008916:	f107 0010 	add.w	r0, r7, #16
 800891a:	6879      	ldr	r1, [r7, #4]
 800891c:	4798      	blx	r3
 800891e:	f107 0310 	add.w	r3, r7, #16
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	47a0      	blx	r4
 8008928:	f107 0310 	add.w	r3, r7, #16
 800892c:	4618      	mov	r0, r3
 800892e:	f003 faf8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3368      	adds	r3, #104	; 0x68
 8008938:	681c      	ldr	r4, [r3, #0]
 800893a:	f107 0318 	add.w	r3, r7, #24
 800893e:	491e      	ldr	r1, [pc, #120]	; (80089b8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8008940:	4618      	mov	r0, r3
 8008942:	f002 ff36 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008946:	f107 0318 	add.w	r3, r7, #24
 800894a:	4619      	mov	r1, r3
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	47a0      	blx	r4
 8008950:	f107 0318 	add.w	r3, r7, #24
 8008954:	4618      	mov	r0, r3
 8008956:	f003 fae4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3368      	adds	r3, #104	; 0x68
 8008960:	681c      	ldr	r4, [r3, #0]
 8008962:	f107 0320 	add.w	r3, r7, #32
 8008966:	4915      	ldr	r1, [pc, #84]	; (80089bc <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8008968:	4618      	mov	r0, r3
 800896a:	f002 ff22 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800896e:	f107 0320 	add.w	r3, r7, #32
 8008972:	4619      	mov	r1, r3
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	47a0      	blx	r4
 8008978:	f107 0320 	add.w	r3, r7, #32
 800897c:	4618      	mov	r0, r3
 800897e:	f003 fad0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	3368      	adds	r3, #104	; 0x68
 8008988:	681c      	ldr	r4, [r3, #0]
 800898a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800898e:	490c      	ldr	r1, [pc, #48]	; (80089c0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8008990:	4618      	mov	r0, r3
 8008992:	f002 ff0e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8008996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800899a:	4619      	mov	r1, r3
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	47a0      	blx	r4
 80089a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089a4:	4618      	mov	r0, r3
 80089a6:	f003 fabc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 80089aa:	bf00      	nop
 80089ac:	3734      	adds	r7, #52	; 0x34
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd90      	pop	{r4, r7, pc}
 80089b2:	bf00      	nop
 80089b4:	08022b3c 	.word	0x08022b3c
 80089b8:	08022b4c 	.word	0x08022b4c
 80089bc:	08022b5c 	.word	0x08022b5c
 80089c0:	08022b78 	.word	0x08022b78

080089c4 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80089c4:	b590      	push	{r4, r7, lr}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	3360      	adds	r3, #96	; 0x60
 80089d2:	681c      	ldr	r4, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	335c      	adds	r3, #92	; 0x5c
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	6912      	ldr	r2, [r2, #16]
 80089e0:	3214      	adds	r2, #20
 80089e2:	f107 0008 	add.w	r0, r7, #8
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	4798      	blx	r3
 80089ea:	f107 0308 	add.w	r3, r7, #8
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	47a0      	blx	r4
 80089f4:	f107 0308 	add.w	r3, r7, #8
 80089f8:	4618      	mov	r0, r3
 80089fa:	f003 fa92 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3370      	adds	r3, #112	; 0x70
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
    writeTestSuiteSummary();
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3374      	adds	r3, #116	; 0x74
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	4798      	blx	r3
    writeProperties();
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3378      	adds	r3, #120	; 0x78
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
    writeTestCases();
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	337c      	adds	r3, #124	; 0x7c
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
    writeFileEnding();
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	338c      	adds	r3, #140	; 0x8c
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
    closeFile();
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	336c      	adds	r3, #108	; 0x6c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	4798      	blx	r3
}
 8008a46:	bf00      	nop
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd90      	pop	{r4, r7, pc}

08008a4e <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	3330      	adds	r3, #48	; 0x30
 8008a74:	6839      	ldr	r1, [r7, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f003 fae2 	bl	800c040 <_ZN12SimpleStringpLEPKc>
}
 8008a7c:	bf00      	nop
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr

08008a9a <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8008ac4:	b590      	push	{r4, r7, lr}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	6a1b      	ldr	r3, [r3, #32]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d113      	bne.n	8008b02 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	3201      	adds	r2, #1
 8008ae2:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8008ae4:	f240 1233 	movw	r2, #307	; 0x133
 8008ae8:	4908      	ldr	r1, [pc, #32]	; (8008b0c <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8008aea:	2034      	movs	r0, #52	; 0x34
 8008aec:	f000 fa9e 	bl	800902c <_ZnwjPKci>
 8008af0:	4604      	mov	r4, r0
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	4620      	mov	r0, r4
 8008af6:	f004 fd37 	bl	800d568 <_ZN11TestFailureC1ERKS_>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	60dc      	str	r4, [r3, #12]
    }
}
 8008b02:	bf00      	nop
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd90      	pop	{r4, r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	08022938 	.word	0x08022938

08008b10 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8008b10:	b5b0      	push	{r4, r5, r7, lr}
 8008b12:	b082      	sub	sp, #8
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8008b1a:	4b08      	ldr	r3, [pc, #32]	; (8008b3c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8008b1c:	681d      	ldr	r5, [r3, #0]
 8008b1e:	6838      	ldr	r0, [r7, #0]
 8008b20:	f003 f9d2 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8008b24:	4602      	mov	r2, r0
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691c      	ldr	r4, [r3, #16]
 8008b2a:	4905      	ldr	r1, [pc, #20]	; (8008b40 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8008b2c:	4610      	mov	r0, r2
 8008b2e:	47a8      	blx	r5
 8008b30:	4603      	mov	r3, r0
 8008b32:	6263      	str	r3, [r4, #36]	; 0x24
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b3c:	200000b8 	.word	0x200000b8
 8008b40:	08022b88 	.word	0x08022b88

08008b44 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8008b44:	b590      	push	{r4, r7, lr}
 8008b46:	b083      	sub	sp, #12
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 8008b4e:	4b08      	ldr	r3, [pc, #32]	; (8008b70 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 8008b50:	681c      	ldr	r4, [r3, #0]
 8008b52:	6838      	ldr	r0, [r7, #0]
 8008b54:	f003 f9b8 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	691b      	ldr	r3, [r3, #16]
 8008b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b60:	4619      	mov	r1, r3
 8008b62:	4610      	mov	r0, r2
 8008b64:	47a0      	blx	r4
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd90      	pop	{r4, r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	200000bc 	.word	0x200000bc

08008b74 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8008b7c:	4b05      	ldr	r3, [pc, #20]	; (8008b94 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	6912      	ldr	r2, [r2, #16]
 8008b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008b86:	4610      	mov	r0, r2
 8008b88:	4798      	blx	r3
}
 8008b8a:	bf00      	nop
 8008b8c:	3708      	adds	r7, #8
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	200000c0 	.word	0x200000c0

08008b98 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
        return false;
 8008ba6:	2300      	movs	r3, #0
    }
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3714      	adds	r7, #20
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
    {
 8008bbc:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
    }
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	0802636c 	.word	0x0802636c

08008bd4 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
    }
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f7ff ffe9 	bl	8008bb4 <_ZN17MemoryLeakFailureD1Ev>
 8008be2:	2104      	movs	r1, #4
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fa35 	bl	8009054 <_ZdlPvj>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8008bf4:	b590      	push	{r4, r7, lr}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	687c      	ldr	r4, [r7, #4]
 8008bfe:	f000 fc71 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c02:	4603      	mov	r3, r0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f00c ff6c 	bl	8015ae2 <_ZN18MemoryLeakDetector8getMutexEv>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4620      	mov	r0, r4
 8008c10:	f002 fb24 	bl	800b25c <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4618      	mov	r0, r3
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd90      	pop	{r4, r7, pc}

08008c1e <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f002 fb29 	bl	800b280 <_ZN15ScopedMutexLockD1Ev>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4618      	mov	r0, r3
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8008c38:	b590      	push	{r4, r7, lr}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af02      	add	r7, sp, #8
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8008c44:	f000 fc4e 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	f006 f8df 	bl	800ee0c <_Z25getCurrentMallocAllocatorv>
 8008c4e:	4601      	mov	r1, r0
 8008c50:	2301      	movs	r3, #1
 8008c52:	9301      	str	r3, [sp, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	f00d f983 	bl	8015f68 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008c62:	4603      	mov	r3, r0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd90      	pop	{r4, r7, pc}

08008c6c <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8008c6c:	b590      	push	{r4, r7, lr}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af02      	add	r7, sp, #8
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8008c78:	f000 fc34 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f00c ffdd 	bl	8015c40 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 8008c86:	f000 fc2d 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	f006 f8be 	bl	800ee0c <_Z25getCurrentMallocAllocatorv>
 8008c90:	4601      	mov	r1, r0
 8008c92:	2301      	movs	r3, #1
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	9300      	str	r3, [sp, #0]
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	68fa      	ldr	r2, [r7, #12]
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f00d f996 	bl	8015fd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8008ca4:	bf00      	nop
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd90      	pop	{r4, r7, pc}

08008cac <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8008cac:	b590      	push	{r4, r7, lr}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af04      	add	r7, sp, #16
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 8008cba:	f000 fc13 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	f006 f8a4 	bl	800ee0c <_Z25getCurrentMallocAllocatorv>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	9302      	str	r3, [sp, #8]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4620      	mov	r0, r4
 8008cd8:	f00d f9de 	bl	8016098 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8008cdc:	4603      	mov	r3, r0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd90      	pop	{r4, r7, pc}
	...

08008ce8 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008cf4:	4b04      	ldr	r3, [pc, #16]	; (8008d08 <_ZL13normal_mallocjPKcj+0x20>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	4798      	blx	r3
 8008cfc:	4603      	mov	r3, r0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200000cc 	.word	0x200000cc

08008d0c <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	60f8      	str	r0, [r7, #12]
 8008d14:	60b9      	str	r1, [r7, #8]
 8008d16:	607a      	str	r2, [r7, #4]
 8008d18:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <_ZL14normal_reallocPvjPKcj+0x24>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	4798      	blx	r3
 8008d24:	4603      	mov	r3, r0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	200000d0 	.word	0x200000d0

08008d34 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 8008d40:	4b03      	ldr	r3, [pc, #12]	; (8008d50 <_ZL11normal_freePvPKcj+0x1c>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	4798      	blx	r3
}
 8008d48:	bf00      	nop
 8008d4a:	3710      	adds	r7, #16
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	200000d4 	.word	0x200000d4

08008d54 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8008d5c:	f107 0308 	add.w	r3, r7, #8
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7ff ff47 	bl	8008bf4 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008d66:	f000 fbbd 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	f005 ff9e 	bl	800ecac <_Z22getCurrentNewAllocatorv>
 8008d70:	4601      	mov	r1, r0
 8008d72:	2300      	movs	r3, #0
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4620      	mov	r0, r4
 8008d78:	f00d f864 	bl	8015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008d7c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008d7e:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 8008d80:	f107 0308 	add.w	r3, r7, #8
 8008d84:	4618      	mov	r0, r3
 8008d86:	f7ff ff4a 	bl	8008c1e <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 8008d8a:	4623      	mov	r3, r4
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd90      	pop	{r4, r7, pc}

08008d94 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008d94:	b590      	push	{r4, r7, lr}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008d9c:	f000 fba2 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008da0:	4604      	mov	r4, r0
 8008da2:	f005 ff83 	bl	800ecac <_Z22getCurrentNewAllocatorv>
 8008da6:	4601      	mov	r1, r0
 8008da8:	2300      	movs	r3, #0
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	4620      	mov	r0, r4
 8008dae:	f00d f849 	bl	8015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008db2:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008db4:	68fb      	ldr	r3, [r7, #12]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3714      	adds	r7, #20
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd90      	pop	{r4, r7, pc}

08008dbe <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008dbe:	b590      	push	{r4, r7, lr}
 8008dc0:	b083      	sub	sp, #12
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8008dc6:	f000 fb8d 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f005 ff6e 	bl	800ecac <_Z22getCurrentNewAllocatorv>
 8008dd0:	4601      	mov	r1, r0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f00d f834 	bl	8015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008ddc:	4603      	mov	r3, r0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd90      	pop	{r4, r7, pc}

08008de6 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8008de6:	b590      	push	{r4, r7, lr}
 8008de8:	b089      	sub	sp, #36	; 0x24
 8008dea:	af02      	add	r7, sp, #8
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8008df2:	f000 fb77 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008df6:	4604      	mov	r4, r0
 8008df8:	f005 ff58 	bl	800ecac <_Z22getCurrentNewAllocatorv>
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	2300      	movs	r3, #0
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	9300      	str	r3, [sp, #0]
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	68fa      	ldr	r2, [r7, #12]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	f00d f8ac 	bl	8015f68 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008e10:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008e12:	697b      	ldr	r3, [r7, #20]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd90      	pop	{r4, r7, pc}

08008e1c <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008e24:	f000 fb5e 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008e28:	4604      	mov	r4, r0
 8008e2a:	f005 ff97 	bl	800ed5c <_Z27getCurrentNewArrayAllocatorv>
 8008e2e:	4601      	mov	r1, r0
 8008e30:	2300      	movs	r3, #0
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	4620      	mov	r0, r4
 8008e36:	f00d f805 	bl	8015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008e3a:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3714      	adds	r7, #20
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd90      	pop	{r4, r7, pc}

08008e46 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008e46:	b590      	push	{r4, r7, lr}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8008e4e:	f000 fb49 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008e52:	4604      	mov	r4, r0
 8008e54:	f005 ff82 	bl	800ed5c <_Z27getCurrentNewArrayAllocatorv>
 8008e58:	4601      	mov	r1, r0
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f00c fff0 	bl	8015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8008e64:	4603      	mov	r3, r0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}

08008e6e <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b089      	sub	sp, #36	; 0x24
 8008e72:	af02      	add	r7, sp, #8
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8008e7a:	f000 fb33 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	f005 ff6c 	bl	800ed5c <_Z27getCurrentNewArrayAllocatorv>
 8008e84:	4601      	mov	r1, r0
 8008e86:	2300      	movs	r3, #0
 8008e88:	9301      	str	r3, [sp, #4]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4620      	mov	r0, r4
 8008e94:	f00d f868 	bl	8015f68 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8008e98:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008e9a:	697b      	ldr	r3, [r7, #20]
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd90      	pop	{r4, r7, pc}

08008ea4 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8008ea4:	b590      	push	{r4, r7, lr}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008eac:	f000 fb1a 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	6879      	ldr	r1, [r7, #4]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f00c fec3 	bl	8015c40 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 8008eba:	f000 fb13 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	f005 fef4 	bl	800ecac <_Z22getCurrentNewAllocatorv>
 8008ec4:	4601      	mov	r1, r0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f00d f8ca 	bl	8016064 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd90      	pop	{r4, r7, pc}

08008ed8 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 8008ed8:	b590      	push	{r4, r7, lr}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8008ee0:	f000 fb00 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	6879      	ldr	r1, [r7, #4]
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f00c fea9 	bl	8015c40 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8008eee:	f000 faf9 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008ef2:	4604      	mov	r4, r0
 8008ef4:	f005 ff32 	bl	800ed5c <_Z27getCurrentNewArrayAllocatorv>
 8008ef8:	4601      	mov	r1, r0
 8008efa:	2300      	movs	r3, #0
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4620      	mov	r0, r4
 8008f00:	f00d f8b0 	bl	8016064 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd90      	pop	{r4, r7, pc}

08008f0c <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008f14:	4b04      	ldr	r3, [pc, #16]	; (8008f28 <_ZL19normal_operator_newj+0x1c>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}
 8008f28:	200000cc 	.word	0x200000cc

08008f2c <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008f34:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	4798      	blx	r3
 8008f3c:	4603      	mov	r3, r0
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3708      	adds	r7, #8
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	200000cc 	.word	0x200000cc

08008f4c <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008f58:	4b04      	ldr	r3, [pc, #16]	; (8008f6c <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	4798      	blx	r3
 8008f60:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008f62:	697b      	ldr	r3, [r7, #20]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	200000cc 	.word	0x200000cc

08008f70 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <_ZL25normal_operator_new_arrayj+0x1c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008f82:	68fb      	ldr	r3, [r7, #12]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200000cc 	.word	0x200000cc

08008f90 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8008f98:	4b04      	ldr	r3, [pc, #16]	; (8008fac <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	4798      	blx	r3
 8008fa0:	4603      	mov	r3, r0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3708      	adds	r7, #8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	200000cc 	.word	0x200000cc

08008fb0 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8008fbc:	4b04      	ldr	r3, [pc, #16]	; (8008fd0 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	4798      	blx	r3
 8008fc4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8008fc6:	697b      	ldr	r3, [r7, #20]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	200000cc 	.word	0x200000cc

08008fd4 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008fdc:	4b03      	ldr	r3, [pc, #12]	; (8008fec <_ZL22normal_operator_deletePv+0x18>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	200000d4 	.word	0x200000d4

08008ff0 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	4798      	blx	r3
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	200000d4 	.word	0x200000d4

0800900c <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8009014:	4b04      	ldr	r3, [pc, #16]	; (8009028 <_Znwj+0x1c>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	4798      	blx	r3
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	20000030 	.word	0x20000030

0800902c <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <_ZnwjPKci+0x24>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	4798      	blx	r3
 8009044:	4603      	mov	r3, r0
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000038 	.word	0x20000038

08009054 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 800905e:	4b04      	ldr	r3, [pc, #16]	; (8009070 <_ZdlPvj+0x1c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	4798      	blx	r3
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000048 	.word	0x20000048

08009074 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8009080:	4b05      	ldr	r3, [pc, #20]	; (8009098 <_ZnajPKci+0x24>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	68f8      	ldr	r0, [r7, #12]
 800908a:	4798      	blx	r3
 800908c:	4603      	mov	r3, r0
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20000044 	.word	0x20000044

0800909c <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 80090a4:	4b03      	ldr	r3, [pc, #12]	; (80090b4 <_ZdaPv+0x18>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
}
 80090ac:	bf00      	nop
 80090ae:	3708      	adds	r7, #8
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	2000004c 	.word	0x2000004c

080090b8 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b082      	sub	sp, #8
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 80090c2:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <_ZdaPvj+0x1c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	4798      	blx	r3
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	2000004c 	.word	0x2000004c

080090d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 80090dc:	4b12      	ldr	r3, [pc, #72]	; (8009128 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 80090de:	4a13      	ldr	r2, [pc, #76]	; (800912c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 80090e0:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 80090e2:	4b13      	ldr	r3, [pc, #76]	; (8009130 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 80090e4:	4a13      	ldr	r2, [pc, #76]	; (8009134 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 80090e6:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 80090ea:	4a14      	ldr	r2, [pc, #80]	; (800913c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 80090ec:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 80090ee:	4b14      	ldr	r3, [pc, #80]	; (8009140 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 80090f0:	4a14      	ldr	r2, [pc, #80]	; (8009144 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 80090f2:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 80090f4:	4b14      	ldr	r3, [pc, #80]	; (8009148 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 80090f6:	4a15      	ldr	r2, [pc, #84]	; (800914c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 80090f8:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 80090fa:	4b15      	ldr	r3, [pc, #84]	; (8009150 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 80090fc:	4a15      	ldr	r2, [pc, #84]	; (8009154 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 80090fe:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8009100:	4b15      	ldr	r3, [pc, #84]	; (8009158 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8009102:	4a16      	ldr	r2, [pc, #88]	; (800915c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8009104:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8009106:	4b16      	ldr	r3, [pc, #88]	; (8009160 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8009108:	4a16      	ldr	r2, [pc, #88]	; (8009164 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800910a:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 800910c:	4b16      	ldr	r3, [pc, #88]	; (8009168 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 800910e:	4a17      	ldr	r2, [pc, #92]	; (800916c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8009110:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8009112:	4b17      	ldr	r3, [pc, #92]	; (8009170 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8009114:	4a17      	ldr	r2, [pc, #92]	; (8009174 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8009116:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8009118:	4b17      	ldr	r3, [pc, #92]	; (8009178 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800911a:	4a18      	ldr	r2, [pc, #96]	; (800917c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 800911c:	601a      	str	r2, [r3, #0]

#endif
}
 800911e:	bf00      	nop
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	20000030 	.word	0x20000030
 800912c:	08008f0d 	.word	0x08008f0d
 8009130:	20000034 	.word	0x20000034
 8009134:	08008f2d 	.word	0x08008f2d
 8009138:	20000038 	.word	0x20000038
 800913c:	08008f4d 	.word	0x08008f4d
 8009140:	2000003c 	.word	0x2000003c
 8009144:	08008f71 	.word	0x08008f71
 8009148:	20000040 	.word	0x20000040
 800914c:	08008f91 	.word	0x08008f91
 8009150:	20000044 	.word	0x20000044
 8009154:	08008fb1 	.word	0x08008fb1
 8009158:	20000048 	.word	0x20000048
 800915c:	08008fd5 	.word	0x08008fd5
 8009160:	2000004c 	.word	0x2000004c
 8009164:	08008ff1 	.word	0x08008ff1
 8009168:	20000018 	.word	0x20000018
 800916c:	08008ce9 	.word	0x08008ce9
 8009170:	20000020 	.word	0x20000020
 8009174:	08008d0d 	.word	0x08008d0d
 8009178:	2000001c 	.word	0x2000001c
 800917c:	08008d35 	.word	0x08008d35

08009180 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8009180:	b480      	push	{r7}
 8009182:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8009184:	4b08      	ldr	r3, [pc, #32]	; (80091a8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a08      	ldr	r2, [pc, #32]	; (80091ac <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d004      	beq.n	8009198 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a07      	ldr	r2, [pc, #28]	; (80091b0 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d101      	bne.n	800919c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8009198:	2301      	movs	r3, #1
 800919a:	e000      	b.n	800919e <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 800919c:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 800919e:	4618      	mov	r0, r3
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	20000030 	.word	0x20000030
 80091ac:	08008d95 	.word	0x08008d95
 80091b0:	08008d55 	.word	0x08008d55

080091b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 80091b8:	4b1f      	ldr	r3, [pc, #124]	; (8009238 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3301      	adds	r3, #1
 80091be:	4a1e      	ldr	r2, [pc, #120]	; (8009238 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	4b1d      	ldr	r3, [pc, #116]	; (8009238 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	bfcc      	ite	gt
 80091ca:	2301      	movgt	r3, #1
 80091cc:	2300      	movle	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d12e      	bne.n	8009232 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 80091d4:	4b19      	ldr	r3, [pc, #100]	; (800923c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a19      	ldr	r2, [pc, #100]	; (8009240 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 80091da:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 80091dc:	4b19      	ldr	r3, [pc, #100]	; (8009244 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a19      	ldr	r2, [pc, #100]	; (8009248 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 80091e2:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 80091e4:	4b19      	ldr	r3, [pc, #100]	; (800924c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a19      	ldr	r2, [pc, #100]	; (8009250 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 80091ea:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 80091ec:	4b19      	ldr	r3, [pc, #100]	; (8009254 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 80091f2:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 80091f4:	4b19      	ldr	r3, [pc, #100]	; (800925c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a19      	ldr	r2, [pc, #100]	; (8009260 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 80091fa:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 80091fc:	4b19      	ldr	r3, [pc, #100]	; (8009264 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a19      	ldr	r2, [pc, #100]	; (8009268 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8009202:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a19      	ldr	r2, [pc, #100]	; (8009270 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800920a:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a19      	ldr	r2, [pc, #100]	; (8009278 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8009212:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8009214:	4b19      	ldr	r3, [pc, #100]	; (800927c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a19      	ldr	r2, [pc, #100]	; (8009280 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800921a:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 800921c:	4b19      	ldr	r3, [pc, #100]	; (8009284 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a19      	ldr	r2, [pc, #100]	; (8009288 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8009222:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8009224:	4b19      	ldr	r3, [pc, #100]	; (800928c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a19      	ldr	r2, [pc, #100]	; (8009290 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800922a:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 800922c:	f7ff ff54 	bl	80090d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8009230:	e000      	b.n	8009234 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8009232:	bf00      	nop
#endif
}
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	2000074c 	.word	0x2000074c
 800923c:	20000030 	.word	0x20000030
 8009240:	20000050 	.word	0x20000050
 8009244:	20000034 	.word	0x20000034
 8009248:	20000054 	.word	0x20000054
 800924c:	20000038 	.word	0x20000038
 8009250:	20000058 	.word	0x20000058
 8009254:	2000003c 	.word	0x2000003c
 8009258:	2000005c 	.word	0x2000005c
 800925c:	20000040 	.word	0x20000040
 8009260:	20000060 	.word	0x20000060
 8009264:	20000044 	.word	0x20000044
 8009268:	20000064 	.word	0x20000064
 800926c:	20000048 	.word	0x20000048
 8009270:	20000068 	.word	0x20000068
 8009274:	2000004c 	.word	0x2000004c
 8009278:	2000006c 	.word	0x2000006c
 800927c:	20000018 	.word	0x20000018
 8009280:	20000024 	.word	0x20000024
 8009284:	20000020 	.word	0x20000020
 8009288:	2000002c 	.word	0x2000002c
 800928c:	2000001c 	.word	0x2000001c
 8009290:	20000028 	.word	0x20000028

08009294 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8009298:	4b1f      	ldr	r3, [pc, #124]	; (8009318 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	3b01      	subs	r3, #1
 800929e:	4a1e      	ldr	r2, [pc, #120]	; (8009318 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	4b1d      	ldr	r3, [pc, #116]	; (8009318 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bfcc      	ite	gt
 80092aa:	2301      	movgt	r3, #1
 80092ac:	2300      	movle	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d12c      	bne.n	800930e <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 80092b4:	4b19      	ldr	r3, [pc, #100]	; (800931c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a19      	ldr	r2, [pc, #100]	; (8009320 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 80092ba:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 80092bc:	4b19      	ldr	r3, [pc, #100]	; (8009324 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a19      	ldr	r2, [pc, #100]	; (8009328 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 80092c2:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 80092c4:	4b19      	ldr	r3, [pc, #100]	; (800932c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	4a19      	ldr	r2, [pc, #100]	; (8009330 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 80092ca:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 80092cc:	4b19      	ldr	r3, [pc, #100]	; (8009334 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a19      	ldr	r2, [pc, #100]	; (8009338 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 80092d2:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 80092d4:	4b19      	ldr	r3, [pc, #100]	; (800933c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a19      	ldr	r2, [pc, #100]	; (8009340 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 80092da:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 80092dc:	4b19      	ldr	r3, [pc, #100]	; (8009344 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4a19      	ldr	r2, [pc, #100]	; (8009348 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 80092e2:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 80092e4:	4b19      	ldr	r3, [pc, #100]	; (800934c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a19      	ldr	r2, [pc, #100]	; (8009350 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 80092ea:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 80092ec:	4b19      	ldr	r3, [pc, #100]	; (8009354 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a19      	ldr	r2, [pc, #100]	; (8009358 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 80092f2:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 80092f4:	4b19      	ldr	r3, [pc, #100]	; (800935c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a19      	ldr	r2, [pc, #100]	; (8009360 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 80092fa:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 80092fc:	4b19      	ldr	r3, [pc, #100]	; (8009364 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a19      	ldr	r2, [pc, #100]	; (8009368 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8009302:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8009304:	4b19      	ldr	r3, [pc, #100]	; (800936c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a19      	ldr	r2, [pc, #100]	; (8009370 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	e000      	b.n	8009310 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 800930e:	bf00      	nop
#endif
}
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr
 8009318:	2000074c 	.word	0x2000074c
 800931c:	20000050 	.word	0x20000050
 8009320:	20000030 	.word	0x20000030
 8009324:	20000054 	.word	0x20000054
 8009328:	20000034 	.word	0x20000034
 800932c:	20000058 	.word	0x20000058
 8009330:	20000038 	.word	0x20000038
 8009334:	2000005c 	.word	0x2000005c
 8009338:	2000003c 	.word	0x2000003c
 800933c:	20000060 	.word	0x20000060
 8009340:	20000040 	.word	0x20000040
 8009344:	20000064 	.word	0x20000064
 8009348:	20000044 	.word	0x20000044
 800934c:	20000068 	.word	0x20000068
 8009350:	20000048 	.word	0x20000048
 8009354:	2000006c 	.word	0x2000006c
 8009358:	2000004c 	.word	0x2000004c
 800935c:	20000024 	.word	0x20000024
 8009360:	20000018 	.word	0x20000018
 8009364:	2000002c 	.word	0x2000002c
 8009368:	20000020 	.word	0x20000020
 800936c:	20000028 	.word	0x20000028
 8009370:	2000001c 	.word	0x2000001c

08009374 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
    {
 800937c:	4a05      	ldr	r2, [pc, #20]	; (8009394 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff fc15 	bl	8008bb4 <_ZN17MemoryLeakFailureD1Ev>
    }
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	08026358 	.word	0x08026358

08009398 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
    }
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff ffe7 	bl	8009374 <_ZN25MemoryLeakWarningReporterD1Ev>
 80093a6:	2104      	movs	r1, #4
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff fe53 	bl	8009054 <_ZdlPvj>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	4a04      	ldr	r2, [pc, #16]	; (80093d4 <_ZN14TestTerminatorC1Ev+0x1c>)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr
 80093d4:	08026d04 	.word	0x08026d04

080093d8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffe8 	bl	80093b8 <_ZN14TestTerminatorC1Ev>
 80093e8:	4a03      	ldr	r2, [pc, #12]	; (80093f8 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	601a      	str	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4618      	mov	r0, r3
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	08026cdc 	.word	0x08026cdc

080093fc <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 80093fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fe:	b099      	sub	sp, #100	; 0x64
 8009400:	af02      	add	r7, sp, #8
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8009406:	f009 fdb7 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800940a:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 800940c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	339c      	adds	r3, #156	; 0x9c
 8009412:	681c      	ldr	r4, [r3, #0]
 8009414:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009418:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800941a:	4618      	mov	r0, r3
 800941c:	f008 fbc4 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 8009420:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009424:	4618      	mov	r0, r3
 8009426:	f002 fd4f 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800942a:	4605      	mov	r5, r0
 800942c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800942e:	f008 fc9b 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 8009432:	4606      	mov	r6, r0
 8009434:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f002 f9b9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8009440:	f107 000c 	add.w	r0, r7, #12
 8009444:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	4633      	mov	r3, r6
 800944c:	462a      	mov	r2, r5
 800944e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009450:	f004 fd14 	bl	800de7c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8009454:	2300      	movs	r3, #0
 8009456:	653b      	str	r3, [r7, #80]	; 0x50
 8009458:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff ffbb 	bl	80093d8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8009462:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	4619      	mov	r1, r3
 800946c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800946e:	47a0      	blx	r4
 8009470:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009474:	4618      	mov	r0, r3
 8009476:	f009 fe79 	bl	801316c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800947a:	f107 030c 	add.w	r3, r7, #12
 800947e:	4618      	mov	r0, r3
 8009480:	f000 f9ac 	bl	80097dc <_ZN11FailFailureD1Ev>
 8009484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009488:	4618      	mov	r0, r3
 800948a:	f002 fd4a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800948e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009492:	4618      	mov	r0, r3
 8009494:	f002 fd45 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8009498:	bf00      	nop
 800949a:	375c      	adds	r7, #92	; 0x5c
 800949c:	46bd      	mov	sp, r7
 800949e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080094a0 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	4a04      	ldr	r2, [pc, #16]	; (80094bc <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	0802636c 	.word	0x0802636c

080094c0 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff ffe8 	bl	80094a0 <_ZN17MemoryLeakFailureC1Ev>
 80094d0:	4a03      	ldr	r2, [pc, #12]	; (80094e0 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	08026358 	.word	0x08026358

080094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 80094e4:	b598      	push	{r3, r4, r7, lr}
 80094e6:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 80094e8:	4b11      	ldr	r3, [pc, #68]	; (8009530 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d11b      	bne.n	8009528 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 80094f0:	f7ff fe60 	bl	80091b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 80094f4:	2004      	movs	r0, #4
 80094f6:	f7ff fd89 	bl	800900c <_Znwj>
 80094fa:	4603      	mov	r3, r0
 80094fc:	461c      	mov	r4, r3
 80094fe:	4620      	mov	r0, r4
 8009500:	f7ff ffde 	bl	80094c0 <_ZN25MemoryLeakWarningReporterC1Ev>
 8009504:	4b0b      	ldr	r3, [pc, #44]	; (8009534 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8009506:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8009508:	f241 1050 	movw	r0, #4432	; 0x1150
 800950c:	f7ff fd7e 	bl	800900c <_Znwj>
 8009510:	4603      	mov	r3, r0
 8009512:	461c      	mov	r4, r3
 8009514:	4b07      	ldr	r3, [pc, #28]	; (8009534 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4619      	mov	r1, r3
 800951a:	4620      	mov	r0, r4
 800951c:	f00c fa3e 	bl	801599c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8009520:	4b03      	ldr	r3, [pc, #12]	; (8009530 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8009522:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8009524:	f7ff feb6 	bl	8009294 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8009528:	4b01      	ldr	r3, [pc, #4]	; (8009530 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 800952a:	681b      	ldr	r3, [r3, #0]
}
 800952c:	4618      	mov	r0, r3
 800952e:	bd98      	pop	{r3, r4, r7, pc}
 8009530:	20000754 	.word	0x20000754
 8009534:	20000750 	.word	0x20000750

08009538 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	78fa      	ldrb	r2, [r7, #3]
 8009548:	765a      	strb	r2, [r3, #25]
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr
	...

08009558 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8009558:	b580      	push	{r7, lr}
 800955a:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 800955c:	f7ff fdbc 	bl	80090d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8009560:	4b0b      	ldr	r3, [pc, #44]	; (8009590 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d004      	beq.n	8009572 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	3204      	adds	r2, #4
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	4618      	mov	r0, r3
 8009570:	4790      	blx	r2
    delete globalReporter;
 8009572:	4b08      	ldr	r3, [pc, #32]	; (8009594 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	3204      	adds	r2, #4
 800957e:	6812      	ldr	r2, [r2, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	4790      	blx	r2
    globalDetector = NULLPTR;
 8009584:	4b02      	ldr	r3, [pc, #8]	; (8009590 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8009586:	2200      	movs	r2, #0
 8009588:	601a      	str	r2, [r3, #0]
}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	20000754 	.word	0x20000754
 8009594:	20000750 	.word	0x20000750

08009598 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	68b9      	ldr	r1, [r7, #8]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f006 fdfd 	bl	80101a8 <_ZN10TestPluginC1ERK12SimpleString>
 80095ae:	4a14      	ldr	r2, [pc, #80]	; (8009600 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	601a      	str	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	761a      	strb	r2, [r3, #24]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	765a      	strb	r2, [r3, #25]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 80095c6:	4b0f      	ldr	r3, [pc, #60]	; (8009604 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d102      	bne.n	80095d4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 80095ce:	4a0d      	ldr	r2, [pc, #52]	; (8009604 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	615a      	str	r2, [r3, #20]
 80095e0:	e004      	b.n	80095ec <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 80095e2:	f7ff ff7f 	bl	80094e4 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80095e6:	4602      	mov	r2, r0
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	695b      	ldr	r3, [r3, #20]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f00c fa69 	bl	8015ac8 <_ZN18MemoryLeakDetector6enableEv>
}
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	08026380 	.word	0x08026380
 8009604:	20000758 	.word	0x20000758

08009608 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	4a09      	ldr	r2, [pc, #36]	; (8009638 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	7e5b      	ldrb	r3, [r3, #25]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800961e:	f7ff fd5b 	bl	80090d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8009622:	f7ff ff99 	bl	8009558 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	f006 fdf9 	bl	8010220 <_ZN10TestPluginD1Ev>
    }
}
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	08026380 	.word	0x08026380

0800963c <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
}
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff ffdf 	bl	8009608 <_ZN23MemoryLeakWarningPluginD1Ev>
 800964a:	2124      	movs	r1, #36	; 0x24
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fd01 	bl	8009054 <_ZdlPvj>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	3708      	adds	r7, #8
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	4618      	mov	r0, r3
 800966e:	f00c fa0e 	bl	8015a8e <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fd ffb0 	bl	80075d8 <_ZNK10TestResult15getFailureCountEv>
 8009678:	4602      	mov	r2, r0
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
}
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
	...

08009688 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8009688:	b590      	push	{r4, r7, lr}
 800968a:	b097      	sub	sp, #92	; 0x5c
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	4618      	mov	r0, r3
 800969a:	f00c fa08 	bl	8015aae <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	2103      	movs	r1, #3
 80096a4:	4618      	mov	r0, r3
 80096a6:	f00c fda5 	bl	80161f4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80096aa:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	7e1b      	ldrb	r3, [r3, #24]
 80096b0:	f083 0301 	eor.w	r3, r3, #1
 80096b4:	b2db      	uxtb	r3, r3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00e      	beq.n	80096d8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	69db      	ldr	r3, [r3, #28]
 80096be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d009      	beq.n	80096d8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a1c      	ldr	r4, [r3, #32]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fd ff85 	bl	80075d8 <_ZNK10TestResult15getFailureCountEv>
 80096ce:	4603      	mov	r3, r0
 80096d0:	429c      	cmp	r4, r3
 80096d2:	d101      	bne.n	80096d8 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80096d8:	2300      	movs	r3, #0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d04c      	beq.n	8009778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80096de:	f7ff fd4f 	bl	8009180 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d028      	beq.n	800973a <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	2103      	movs	r1, #3
 80096ee:	4618      	mov	r0, r3
 80096f0:	f00c fd45 	bl	801617e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80096f4:	4602      	mov	r2, r0
 80096f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80096fa:	4611      	mov	r1, r2
 80096fc:	4618      	mov	r0, r3
 80096fe:	f002 f858 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8009702:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8009706:	f107 0310 	add.w	r3, r7, #16
 800970a:	68b9      	ldr	r1, [r7, #8]
 800970c:	4618      	mov	r0, r3
 800970e:	f003 feaf 	bl	800d470 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8009712:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8009716:	4618      	mov	r0, r3
 8009718:	f002 fc03 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	3334      	adds	r3, #52	; 0x34
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f107 0210 	add.w	r2, r7, #16
 8009728:	4611      	mov	r1, r2
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800972e:	f107 0310 	add.w	r3, r7, #16
 8009732:	4618      	mov	r0, r3
 8009734:	f003 ff5c 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 8009738:	e01e      	b.n	8009778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01a      	beq.n	8009778 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3338      	adds	r3, #56	; 0x38
 8009748:	681c      	ldr	r4, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	461a      	mov	r2, r3
 8009750:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009754:	4910      	ldr	r1, [pc, #64]	; (8009798 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8009756:	4618      	mov	r0, r3
 8009758:	f003 f8ea 	bl	800c930 <_Z16StringFromFormatPKcz>
 800975c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009760:	4618      	mov	r0, r3
 8009762:	f002 fbb1 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8009766:	4603      	mov	r3, r0
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	47a0      	blx	r4
 800976e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009772:	4618      	mov	r0, r3
 8009774:	f002 fbd5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	695b      	ldr	r3, [r3, #20]
 800977c:	4618      	mov	r0, r3
 800977e:	f00c fd13 	bl	80161a8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	61da      	str	r2, [r3, #28]
}
 800978e:	bf00      	nop
 8009790:	375c      	adds	r7, #92	; 0x5c
 8009792:	46bd      	mov	sp, r7
 8009794:	bd90      	pop	{r4, r7, pc}
 8009796:	bf00      	nop
 8009798:	08022b8c 	.word	0x08022b8c

0800979c <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	2102      	movs	r1, #2
 80097ac:	4618      	mov	r0, r3
 80097ae:	f00c fd21 	bl	80161f4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80097b2:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80097b4:	68fa      	ldr	r2, [r7, #12]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d007      	beq.n	80097cc <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	2102      	movs	r1, #2
 80097c2:	4618      	mov	r0, r3
 80097c4:	f00c fcdb 	bl	801617e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80097c8:	4603      	mov	r3, r0
 80097ca:	e000      	b.n	80097ce <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	08022bcc 	.word	0x08022bcc

080097dc <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	4a05      	ldr	r2, [pc, #20]	; (80097fc <_ZN11FailFailureD1Ev+0x20>)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	601a      	str	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f003 feff 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	080263c8 	.word	0x080263c8

08009800 <_ZN11FailFailureD0Ev>:
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ffe7 	bl	80097dc <_ZN11FailFailureD1Ev>
 800980e:	2134      	movs	r1, #52	; 0x34
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7ff fc1f 	bl	8009054 <_ZdlPvj>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4618      	mov	r0, r3
 800982e:	370c      	adds	r7, #12
 8009830:	46bd      	mov	sp, r7
 8009832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009836:	4770      	bx	lr

08009838 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	4a06      	ldr	r2, [pc, #24]	; (8009874 <_ZN19MockFailureReporterC1Ev+0x24>)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2200      	movs	r2, #0
 8009862:	711a      	strb	r2, [r3, #4]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4618      	mov	r0, r3
 8009868:	370c      	adds	r7, #12
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	080275a4 	.word	0x080275a4

08009878 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8009878:	b480      	push	{r7}
 800987a:	b083      	sub	sp, #12
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	4a04      	ldr	r2, [pc, #16]	; (8009894 <_ZN19MockFailureReporterD1Ev+0x1c>)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	601a      	str	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr
 8009894:	080275a4 	.word	0x080275a4

08009898 <_ZN19MockFailureReporterD0Ev>:
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ffe9 	bl	8009878 <_ZN19MockFailureReporterD1Ev>
 80098a6:	2108      	movs	r1, #8
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7ff fbd3 	bl	8009054 <_ZdlPvj>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4618      	mov	r0, r3
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	4a05      	ldr	r2, [pc, #20]	; (80098d8 <_ZN11MockFailureD1Ev+0x20>)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f003 fe91 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	0802651c 	.word	0x0802651c

080098dc <_ZN11MockFailureD0Ev>:
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f7ff ffe7 	bl	80098b8 <_ZN11MockFailureD1Ev>
 80098ea:	2134      	movs	r1, #52	; 0x34
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff fbb1 	bl	8009054 <_ZdlPvj>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4618      	mov	r0, r3
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 80098fc:	b590      	push	{r4, r7, lr}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
 8009906:	4a16      	ldr	r2, [pc, #88]	; (8009960 <_ZN14MockNamedValueC1ERKS_+0x64>)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	1d1a      	adds	r2, r3, #4
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	3304      	adds	r3, #4
 8009914:	4619      	mov	r1, r3
 8009916:	4610      	mov	r0, r2
 8009918:	f001 ff9f 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f103 020c 	add.w	r2, r3, #12
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	330c      	adds	r3, #12
 8009926:	4619      	mov	r1, r3
 8009928:	4610      	mov	r0, r2
 800992a:	f001 ff96 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f102 0418 	add.w	r4, r2, #24
 8009936:	3318      	adds	r3, #24
 8009938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800993a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	629a      	str	r2, [r3, #40]	; 0x28
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	62da      	str	r2, [r3, #44]	; 0x2c
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	631a      	str	r2, [r3, #48]	; 0x30
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	4618      	mov	r0, r3
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	bd90      	pop	{r4, r7, pc}
 8009960:	080275e4 	.word	0x080275e4

08009964 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800996e:	f107 030c 	add.w	r3, r7, #12
 8009972:	4916      	ldr	r1, [pc, #88]	; (80099cc <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8009974:	4618      	mov	r0, r3
 8009976:	f001 ff1c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f002 fb1f 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 800998c:	6879      	ldr	r1, [r7, #4]
 800998e:	4810      	ldr	r0, [pc, #64]	; (80099d0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 8009990:	f000 ff70 	bl	800a874 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 8009994:	4603      	mov	r3, r0
 8009996:	e000      	b.n	800999a <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 800999a:	617b      	str	r3, [r7, #20]
 800999c:	f107 030c 	add.w	r3, r7, #12
 80099a0:	4618      	mov	r0, r3
 80099a2:	f002 fabe 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	33a8      	adds	r3, #168	; 0xa8
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	6839      	ldr	r1, [r7, #0]
 80099b0:	6978      	ldr	r0, [r7, #20]
 80099b2:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	33ac      	adds	r3, #172	; 0xac
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6978      	ldr	r0, [r7, #20]
 80099be:	4798      	blx	r3
    return mock_support;
 80099c0:	697b      	ldr	r3, [r7, #20]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3718      	adds	r7, #24
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	08022bd0 	.word	0x08022bd0
 80099d0:	2000075c 	.word	0x2000075c

080099d4 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 80099de:	4a21      	ldr	r2, [pc, #132]	; (8009a64 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2200      	movs	r2, #0
 80099ee:	609a      	str	r2, [r3, #8]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	731a      	strb	r2, [r3, #12]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f103 0218 	add.w	r2, r3, #24
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	615a      	str	r2, [r3, #20]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	3318      	adds	r3, #24
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7ff ff23 	bl	8009850 <_ZN19MockFailureReporterC1Ev>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	3320      	adds	r3, #32
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f010 fefc 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3330      	adds	r3, #48	; 0x30
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f014 fbe8 	bl	801e204 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	3338      	adds	r3, #56	; 0x38
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f014 faf2 	bl	801e022 <_ZN18MockNamedValueListC1Ev>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	333c      	adds	r3, #60	; 0x3c
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f001 ff08 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 8009a52:	2100      	movs	r1, #0
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f894 	bl	8009b82 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	080263f4 	.word	0x080263f4

08009a68 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	4a0d      	ldr	r2, [pc, #52]	; (8009aa8 <_ZN11MockSupportD1Ev+0x40>)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	333c      	adds	r3, #60	; 0x3c
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f002 fa51 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3330      	adds	r3, #48	; 0x30
 8009a84:	4618      	mov	r0, r3
 8009a86:	f014 fbd1 	bl	801e22c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3320      	adds	r3, #32
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f010 fed0 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	3318      	adds	r3, #24
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7ff feed 	bl	8009878 <_ZN19MockFailureReporterD1Ev>
{
}
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	080263f4 	.word	0x080263f4

08009aac <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
}
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff ffd7 	bl	8009a68 <_ZN11MockSupportD1Ev>
 8009aba:	2148      	movs	r1, #72	; 0x48
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff fac9 	bl	8009054 <_ZdlPvj>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3310      	adds	r3, #16
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	78f9      	ldrb	r1, [r7, #3]
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3318      	adds	r3, #24
 8009b08:	e000      	b.n	8009b0c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00a      	beq.n	8009b2e <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	33c8      	adds	r3, #200	; 0xc8
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6952      	ldr	r2, [r2, #20]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	3338      	adds	r3, #56	; 0x38
 8009b32:	4618      	mov	r0, r3
 8009b34:	f014 fb0b 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d01c      	beq.n	8009b7a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 8009b40:	68f9      	ldr	r1, [r7, #12]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 ff26 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	bf14      	ite	ne
 8009b4e:	2301      	movne	r3, #1
 8009b50:	2300      	moveq	r3, #0
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00b      	beq.n	8009b70 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 ff1a 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009b60:	4603      	mov	r3, r0
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	32a4      	adds	r2, #164	; 0xa4
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	6949      	ldr	r1, [r1, #20]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f014 f9f5 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	e7df      	b.n	8009b3a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8009b7a:	bf00      	nop
 8009b7c:	3710      	adds	r7, #16
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b083      	sub	sp, #12
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d102      	bne.n	8009b98 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	e000      	b.n	8009b9a <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6113      	str	r3, [r2, #16]
}
 8009b9e:	bf00      	nop
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3330      	adds	r3, #48	; 0x30
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f012 fb10 	bl	801c1dc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 8009bc4:	b590      	push	{r4, r7, lr}
 8009bc6:	b087      	sub	sp, #28
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	3330      	adds	r3, #48	; 0x30
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f014 fb75 	bl	801e2c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	3338      	adds	r3, #56	; 0x38
 8009be2:	4618      	mov	r0, r3
 8009be4:	f014 fab3 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009be8:	6178      	str	r0, [r7, #20]
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d01c      	beq.n	8009c2a <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 8009bf0:	6979      	ldr	r1, [r7, #20]
 8009bf2:	68f8      	ldr	r0, [r7, #12]
 8009bf4:	f000 fece 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	bf14      	ite	ne
 8009bfe:	2301      	movne	r3, #1
 8009c00:	2300      	moveq	r3, #0
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00b      	beq.n	8009c20 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8009c08:	6979      	ldr	r1, [r7, #20]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 fec2 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c10:	4603      	mov	r3, r0
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	32b0      	adds	r2, #176	; 0xb0
 8009c16:	6814      	ldr	r4, [r2, #0]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	68b9      	ldr	r1, [r7, #8]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009c20:	6978      	ldr	r0, [r7, #20]
 8009c22:	f014 f99d 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009c26:	6178      	str	r0, [r7, #20]
 8009c28:	e7df      	b.n	8009bea <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd90      	pop	{r4, r7, pc}

08009c32 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 8009c32:	b590      	push	{r4, r7, lr}
 8009c34:	b087      	sub	sp, #28
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	3330      	adds	r3, #48	; 0x30
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	68b9      	ldr	r1, [r7, #8]
 8009c46:	4618      	mov	r0, r3
 8009c48:	f014 fb5a 	bl	801e300 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	3338      	adds	r3, #56	; 0x38
 8009c50:	4618      	mov	r0, r3
 8009c52:	f014 fa7c 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009c56:	6178      	str	r0, [r7, #20]
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d01c      	beq.n	8009c98 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 8009c5e:	6979      	ldr	r1, [r7, #20]
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fe97 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	bf14      	ite	ne
 8009c6c:	2301      	movne	r3, #1
 8009c6e:	2300      	moveq	r3, #0
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00b      	beq.n	8009c8e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8009c76:	6979      	ldr	r1, [r7, #20]
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 fe8b 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	32b4      	adds	r2, #180	; 0xb4
 8009c84:	6814      	ldr	r4, [r2, #0]
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009c8e:	6978      	ldr	r0, [r7, #20]
 8009c90:	f014 f966 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009c94:	6178      	str	r0, [r7, #20]
 8009c96:	e7df      	b.n	8009c58 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 8009c98:	bf00      	nop
 8009c9a:	371c      	adds	r7, #28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd90      	pop	{r4, r7, pc}

08009ca0 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3330      	adds	r3, #48	; 0x30
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f014 fb91 	bl	801e3d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	3338      	adds	r3, #56	; 0x38
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f014 fa47 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009cc0:	60f8      	str	r0, [r7, #12]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d01b      	beq.n	8009d00 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 8009cc8:	68f9      	ldr	r1, [r7, #12]
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fe62 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bf14      	ite	ne
 8009cd6:	2301      	movne	r3, #1
 8009cd8:	2300      	moveq	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00a      	beq.n	8009cf6 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 8009ce0:	68f9      	ldr	r1, [r7, #12]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fe56 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	32b8      	adds	r2, #184	; 0xb8
 8009cee:	6812      	ldr	r2, [r2, #0]
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009cf6:	68f8      	ldr	r0, [r7, #12]
 8009cf8:	f014 f932 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	e7e0      	b.n	8009cc2 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 8009d00:	bf00      	nop
 8009d02:	3710      	adds	r7, #16
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3330      	adds	r3, #48	; 0x30
 8009d14:	4618      	mov	r0, r3
 8009d16:	f014 fab8 	bl	801e28a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3338      	adds	r3, #56	; 0x38
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f014 fa15 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009d24:	60f8      	str	r0, [r7, #12]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d01a      	beq.n	8009d62 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f000 fe30 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bf14      	ite	ne
 8009d3a:	2301      	movne	r3, #1
 8009d3c:	2300      	moveq	r3, #0
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d009      	beq.n	8009d58 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8009d44:	68f9      	ldr	r1, [r7, #12]
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 fe24 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	32bc      	adds	r2, #188	; 0xbc
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	4618      	mov	r0, r3
 8009d56:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f014 f901 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	e7e1      	b.n	8009d26 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 8009d62:	bf00      	nop
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d004      	beq.n	8009d84 <_ZN11MockSupport5clearEv+0x1a>
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	3204      	adds	r2, #4
 8009d7e:	6812      	ldr	r2, [r2, #0]
 8009d80:	4618      	mov	r0, r3
 8009d82:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 8009d92:	f00e fe0d 	bl	80189b0 <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	3320      	adds	r3, #32
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f011 f937 	bl	801b00e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3338      	adds	r3, #56	; 0x38
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f014 f9c1 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01a      	beq.n	8009e0a <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fddc 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009ddc:	60b8      	str	r0, [r7, #8]
        if (support) {
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00d      	beq.n	8009e00 <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	339c      	adds	r3, #156	; 0x9c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68b8      	ldr	r0, [r7, #8]
 8009dee:	4798      	blx	r3
            delete support;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d004      	beq.n	8009e00 <_ZN11MockSupport5clearEv+0x96>
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	3204      	adds	r2, #4
 8009dfa:	6812      	ldr	r2, [r2, #0]
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f014 f8ad 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	e7e1      	b.n	8009dce <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	3338      	adds	r3, #56	; 0x38
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f014 f915 	bl	801e03e <_ZN18MockNamedValueList5clearEv>
}
 8009e14:	bf00      	nop
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b083      	sub	sp, #12
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	731a      	strb	r2, [r3, #12]
}
 8009e2a:	bf00      	nop
 8009e2c:	370c      	adds	r7, #12
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8009e38:	b590      	push	{r4, r7, lr}
 8009e3a:	b089      	sub	sp, #36	; 0x24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	333c      	adds	r3, #60	; 0x3c
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f002 f859 	bl	800bf00 <_ZNK12SimpleString7isEmptyEv>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d004      	beq.n	8009e5e <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	f001 fcff 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 8009e5c:	e021      	b.n	8009ea2 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009e64:	f107 0318 	add.w	r3, r7, #24
 8009e68:	4910      	ldr	r1, [pc, #64]	; (8009eac <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 fca1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8009e70:	f107 0310 	add.w	r3, r7, #16
 8009e74:	f107 0218 	add.w	r2, r7, #24
 8009e78:	4621      	mov	r1, r4
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f002 f8b3 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f107 0110 	add.w	r1, r7, #16
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f002 f8ac 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8009e8e:	f107 0310 	add.w	r3, r7, #16
 8009e92:	4618      	mov	r0, r3
 8009e94:	f002 f845 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8009e98:	f107 0318 	add.w	r3, r7, #24
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f002 f840 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	3724      	adds	r7, #36	; 0x24
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd90      	pop	{r4, r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	08022bd4 	.word	0x08022bd4

08009eb0 <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	3314      	adds	r3, #20
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	683a      	ldr	r2, [r7, #0]
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	4798      	blx	r3
 8009eca:	4603      	mov	r3, r0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3314      	adds	r3, #20
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	683a      	ldr	r2, [r7, #0]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8009ef8:	b590      	push	{r4, r7, lr}
 8009efa:	b089      	sub	sp, #36	; 0x24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009f0a:	f083 0301 	eor.w	r3, r3, #1
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d003      	beq.n	8009f1c <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8009f14:	f010 fbf6 	bl	801a704 <_ZN23MockIgnoredExpectedCall8instanceEv>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	e041      	b.n	8009fa0 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8009f1c:	68f8      	ldr	r0, [r7, #12]
 8009f1e:	f000 fb1b 	bl	800a558 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 8009f22:	22a5      	movs	r2, #165	; 0xa5
 8009f24:	4920      	ldr	r1, [pc, #128]	; (8009fa8 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8009f26:	2070      	movs	r0, #112	; 0x70
 8009f28:	f7ff f880 	bl	800902c <_ZnwjPKci>
 8009f2c:	4604      	mov	r4, r0
 8009f2e:	68b9      	ldr	r1, [r7, #8]
 8009f30:	4620      	mov	r0, r4
 8009f32:	f00f f8f3 	bl	801911c <_ZN23MockCheckedExpectedCallC1Ej>
 8009f36:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	681c      	ldr	r4, [r3, #0]
 8009f40:	f107 0314 	add.w	r3, r7, #20
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	68f9      	ldr	r1, [r7, #12]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7ff ff75 	bl	8009e38 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 8009f4e:	f107 0314 	add.w	r3, r7, #20
 8009f52:	4619      	mov	r1, r3
 8009f54:	69f8      	ldr	r0, [r7, #28]
 8009f56:	47a0      	blx	r4
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f001 ffe0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	7b1b      	ldrb	r3, [r3, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d013      	beq.n	8009f92 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8009f6a:	69fb      	ldr	r3, [r7, #28]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3310      	adds	r3, #16
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	6892      	ldr	r2, [r2, #8]
 8009f76:	1c50      	adds	r0, r2, #1
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	6891      	ldr	r1, [r2, #8]
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	440a      	add	r2, r1
 8009f80:	4601      	mov	r1, r0
 8009f82:	69f8      	ldr	r0, [r7, #28]
 8009f84:	4798      	blx	r3
        expectedCallOrder_ += amount;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	689a      	ldr	r2, [r3, #8]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	441a      	add	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	3320      	adds	r3, #32
 8009f96:	69f9      	ldr	r1, [r7, #28]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f010 fd89 	bl	801aab0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3724      	adds	r7, #36	; 0x24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd90      	pop	{r4, r7, pc}
 8009fa8:	08022bd8 	.word	0x08022bd8

08009fac <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 8009fac:	b5b0      	push	{r4, r5, r7, lr}
 8009fae:	b082      	sub	sp, #8
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	1c5a      	adds	r2, r3, #1
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	605a      	str	r2, [r3, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685d      	ldr	r5, [r3, #4]
 8009fc2:	22b1      	movs	r2, #177	; 0xb1
 8009fc4:	490a      	ldr	r1, [pc, #40]	; (8009ff0 <_ZN11MockSupport16createActualCallEv+0x44>)
 8009fc6:	202c      	movs	r0, #44	; 0x2c
 8009fc8:	f7ff f830 	bl	800902c <_ZnwjPKci>
 8009fcc:	4604      	mov	r4, r0
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	3320      	adds	r3, #32
 8009fd6:	4629      	mov	r1, r5
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f00c fbdb 	bl	8016794 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bdb0      	pop	{r4, r5, r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	08022bd8 	.word	0x08022bd8

08009ff4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00d      	beq.n	800a024 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3320      	adds	r3, #32
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	4618      	mov	r0, r3
 800a010:	f010 fd2a 	bl	801aa68 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 800a014:	4603      	mov	r3, r0
 800a016:	f083 0301 	eor.w	r3, r3, #1
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 800a020:	2301      	movs	r3, #1
 800a022:	e000      	b.n	800a026 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 800a02e:	b590      	push	{r4, r7, lr}
 800a030:	b087      	sub	sp, #28
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800a038:	f107 030c 	add.w	r3, r7, #12
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	6879      	ldr	r1, [r7, #4]
 800a040:	4618      	mov	r0, r3
 800a042:	f7ff fef9 	bl	8009e38 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d014      	beq.n	800a078 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	33c4      	adds	r3, #196	; 0xc4
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4610      	mov	r0, r2
 800a05e:	4798      	blx	r3
        delete lastActualFunctionCall_;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a064:	2b00      	cmp	r3, #0
 800a066:	d004      	beq.n	800a072 <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	3204      	adds	r2, #4
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	4618      	mov	r0, r3
 800a070:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a07e:	f083 0301 	eor.w	r3, r3, #1
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b00      	cmp	r3, #0
 800a086:	d004      	beq.n	800a092 <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 800a088:	f00e fcbe 	bl	8018a08 <_ZN21MockIgnoredActualCall8instanceEv>
 800a08c:	4603      	mov	r3, r0
 800a08e:	461c      	mov	r4, r3
 800a090:	e02f      	b.n	800a0f2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d00b      	beq.n	800a0b4 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 800a09c:	f00e fc6e 	bl	801897c <_ZN19MockActualCallTrace8instanceEv>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	3208      	adds	r2, #8
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	f107 010c 	add.w	r1, r7, #12
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	4790      	blx	r2
 800a0b0:	4604      	mov	r4, r0
 800a0b2:	e01e      	b.n	800a0f2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 800a0b4:	f107 030c 	add.w	r3, r7, #12
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f7ff ff9a 	bl	8009ff4 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d004      	beq.n	800a0d0 <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 800a0c6:	f00e fc9f 	bl	8018a08 <_ZN21MockIgnoredActualCall8instanceEv>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	461c      	mov	r4, r3
 800a0ce:	e010      	b.n	800a0f2 <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	33c0      	adds	r3, #192	; 0xc0
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
 800a0dc:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	3308      	adds	r3, #8
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f107 020c 	add.w	r2, r7, #12
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	6978      	ldr	r0, [r7, #20]
 800a0ee:	4798      	blx	r3
    return *call;
 800a0f0:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 800a0f2:	f107 030c 	add.w	r3, r7, #12
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f001 ff13 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800a0fc:	4623      	mov	r3, r4
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	bd90      	pop	{r4, r7, pc}

0800a106 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3338      	adds	r3, #56	; 0x38
 800a11a:	4618      	mov	r0, r3
 800a11c:	f014 f817 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a120:	60f8      	str	r0, [r7, #12]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d01a      	beq.n	800a15e <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fc32 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	bf14      	ite	ne
 800a136:	2301      	movne	r3, #1
 800a138:	2300      	moveq	r3, #0
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d009      	beq.n	800a154 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 800a140:	68f9      	ldr	r1, [r7, #12]
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f000 fc26 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a148:	4603      	mov	r3, r0
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	3290      	adds	r2, #144	; 0x90
 800a14e:	6812      	ldr	r2, [r2, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f013 ff03 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	e7e1      	b.n	800a122 <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	3338      	adds	r3, #56	; 0x38
 800a17a:	4618      	mov	r0, r3
 800a17c:	f013 ffe7 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a180:	60f8      	str	r0, [r7, #12]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01a      	beq.n	800a1be <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 800a188:	68f9      	ldr	r1, [r7, #12]
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 fc02 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	bf14      	ite	ne
 800a196:	2301      	movne	r3, #1
 800a198:	2300      	moveq	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d009      	beq.n	800a1b4 <_ZN11MockSupport7disableEv+0x4e>
 800a1a0:	68f9      	ldr	r1, [r7, #12]
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fbf6 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	3284      	adds	r2, #132	; 0x84
 800a1ae:	6812      	ldr	r2, [r2, #0]
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f013 fed3 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	e7e1      	b.n	800a182 <_ZN11MockSupport7disableEv+0x1c>
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3338      	adds	r3, #56	; 0x38
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f013 ffb7 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a1e0:	60f8      	str	r0, [r7, #12]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d01a      	beq.n	800a21e <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 800a1e8:	68f9      	ldr	r1, [r7, #12]
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fbd2 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	bf14      	ite	ne
 800a1f6:	2301      	movne	r3, #1
 800a1f8:	2300      	moveq	r3, #0
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d009      	beq.n	800a214 <_ZN11MockSupport6enableEv+0x4e>
 800a200:	68f9      	ldr	r1, [r7, #12]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f000 fbc6 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a208:	4603      	mov	r3, r0
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	3288      	adds	r2, #136	; 0x88
 800a20e:	6812      	ldr	r2, [r2, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f013 fea3 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	e7e1      	b.n	800a1e2 <_ZN11MockSupport6enableEv+0x1c>
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b084      	sub	sp, #16
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	460b      	mov	r3, r1
 800a230:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	78fa      	ldrb	r2, [r7, #3]
 800a236:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	3338      	adds	r3, #56	; 0x38
 800a23e:	4618      	mov	r0, r3
 800a240:	f013 ff85 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a244:	60f8      	str	r0, [r7, #12]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01b      	beq.n	800a284 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 800a24c:	68f9      	ldr	r1, [r7, #12]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fba0 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	bf14      	ite	ne
 800a25a:	2301      	movne	r3, #1
 800a25c:	2300      	moveq	r3, #0
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	2b00      	cmp	r3, #0
 800a262:	d00a      	beq.n	800a27a <_ZN11MockSupport7tracingEb+0x54>
 800a264:	68f9      	ldr	r1, [r7, #12]
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fb94 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a26c:	4603      	mov	r3, r0
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	328c      	adds	r2, #140	; 0x8c
 800a272:	6812      	ldr	r2, [r2, #0]
 800a274:	78f9      	ldrb	r1, [r7, #3]
 800a276:	4618      	mov	r0, r3
 800a278:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f013 fe70 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	e7e0      	b.n	800a246 <_ZN11MockSupport7tracingEb+0x20>
}
 800a284:	bf00      	nop
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	3320      	adds	r3, #32
 800a298:	4618      	mov	r0, r3
 800a29a:	f010 fbc1 	bl	801aa20 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	3338      	adds	r3, #56	; 0x38
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f013 ff51 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a2ac:	60b8      	str	r0, [r7, #8]
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d01f      	beq.n	800a2f4 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 800a2b4:	68b9      	ldr	r1, [r7, #8]
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fb6c 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	bf14      	ite	ne
 800a2c2:	2301      	movne	r3, #1
 800a2c4:	2300      	moveq	r3, #0
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d00e      	beq.n	800a2ea <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 800a2cc:	68b9      	ldr	r1, [r7, #8]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fb60 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	3298      	adds	r2, #152	; 0x98
 800a2da:	6812      	ldr	r2, [r2, #0]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	4790      	blx	r2
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4413      	add	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a2ea:	68b8      	ldr	r0, [r7, #8]
 800a2ec:	f013 fe38 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a2f0:	60b8      	str	r0, [r7, #8]
 800a2f2:	e7dc      	b.n	800a2ae <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	bf14      	ite	ne
 800a2fa:	2301      	movne	r3, #1
 800a2fc:	2300      	moveq	r3, #0
 800a2fe:	b2db      	uxtb	r3, r3
}
 800a300:	4618      	mov	r0, r3
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}

0800a308 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d010      	beq.n	800a33a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	33bc      	adds	r3, #188	; 0xbc
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4610      	mov	r0, r2
 800a328:	4798      	blx	r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	f083 0301 	eor.w	r3, r3, #1
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 800a336:	2301      	movs	r3, #1
 800a338:	e000      	b.n	800a33c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 800a33a:	2300      	movs	r3, #0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d001      	beq.n	800a344 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 800a340:	2300      	movs	r3, #0
 800a342:	e02a      	b.n	800a39a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	3338      	adds	r3, #56	; 0x38
 800a348:	4618      	mov	r0, r3
 800a34a:	f013 ff00 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d020      	beq.n	800a398 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 800a356:	68f9      	ldr	r1, [r7, #12]
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 fb1b 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00f      	beq.n	800a384 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800a364:	68f9      	ldr	r1, [r7, #12]
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 fb14 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a36c:	4603      	mov	r3, r0
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff ffca 	bl	800a308 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800a374:	4603      	mov	r3, r0
 800a376:	f083 0301 	eor.w	r3, r3, #1
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 800a380:	2301      	movs	r3, #1
 800a382:	e000      	b.n	800a386 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 800a384:	2300      	movs	r3, #0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d001      	beq.n	800a38e <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 800a38a:	2300      	movs	r3, #0
 800a38c:	e005      	b.n	800a39a <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f013 fde6 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a394:	60f8      	str	r0, [r7, #12]
 800a396:	e7db      	b.n	800a350 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 800a398:	2301      	movs	r3, #1
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}

0800a3a2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 800a3a2:	b580      	push	{r7, lr}
 800a3a4:	b092      	sub	sp, #72	; 0x48
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800a3aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f010 fa2c 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f103 0220 	add.w	r2, r3, #32
 800a3ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a3be:	4611      	mov	r1, r2
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f010 fbf3 	bl	801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	3338      	adds	r3, #56	; 0x38
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f013 febf 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a3d0:	6478      	str	r0, [r7, #68]	; 0x44
 800a3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d01d      	beq.n	800a414 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 800a3d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f000 fada 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bf14      	ite	ne
 800a3e6:	2301      	movne	r3, #1
 800a3e8:	2300      	moveq	r3, #0
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00c      	beq.n	800a40a <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800a3f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 face 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f103 0220 	add.w	r2, r3, #32
 800a3fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a402:	4611      	mov	r1, r2
 800a404:	4618      	mov	r0, r3
 800a406:	f010 fbd1 	bl	801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a40a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a40c:	f013 fda8 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a410:	6478      	str	r0, [r7, #68]	; 0x44
 800a412:	e7de      	b.n	800a3d2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	330c      	adds	r3, #12
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4610      	mov	r0, r2
 800a424:	4798      	blx	r3
 800a426:	4601      	mov	r1, r0
 800a428:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a42c:	f107 0308 	add.w	r3, r7, #8
 800a430:	4618      	mov	r0, r3
 800a432:	f011 f9f5 	bl	801b820 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	33c4      	adds	r3, #196	; 0xc4
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f107 0208 	add.w	r2, r7, #8
 800a442:	4611      	mov	r1, r2
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4618      	mov	r0, r3
 800a44e:	f000 fe6d 	bl	800b12c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a456:	4618      	mov	r0, r3
 800a458:	f010 f9ec 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 800a45c:	bf00      	nop
 800a45e:	3748      	adds	r7, #72	; 0x48
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b092      	sub	sp, #72	; 0x48
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 800a46c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a470:	4618      	mov	r0, r3
 800a472:	f010 f9cb 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f103 0220 	add.w	r2, r3, #32
 800a47c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a480:	4611      	mov	r1, r2
 800a482:	4618      	mov	r0, r3
 800a484:	f010 fb92 	bl	801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	3338      	adds	r3, #56	; 0x38
 800a48c:	4618      	mov	r0, r3
 800a48e:	f013 fe5e 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a492:	6478      	str	r0, [r7, #68]	; 0x44
 800a494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01d      	beq.n	800a4d6 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 800a49a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 fa79 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bf14      	ite	ne
 800a4a8:	2301      	movne	r3, #1
 800a4aa:	2300      	moveq	r3, #0
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00c      	beq.n	800a4cc <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 800a4b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f000 fa6d 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	f103 0220 	add.w	r2, r3, #32
 800a4c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f010 fb70 	bl	801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a4cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a4ce:	f013 fd47 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a4d2:	6478      	str	r0, [r7, #68]	; 0x44
 800a4d4:	e7de      	b.n	800a494 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	691a      	ldr	r2, [r3, #16]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4610      	mov	r0, r2
 800a4e6:	4798      	blx	r3
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a4ee:	f107 0308 	add.w	r3, r7, #8
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f011 fa38 	bl	801b968 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	33c4      	adds	r3, #196	; 0xc4
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f107 0208 	add.w	r2, r7, #8
 800a504:	4611      	mov	r1, r2
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 800a50a:	f107 0308 	add.w	r3, r7, #8
 800a50e:	4618      	mov	r0, r3
 800a510:	f000 fe2e 	bl	800b170 <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 800a514:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a518:	4618      	mov	r0, r3
 800a51a:	f010 f98b 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 800a51e:	bf00      	nop
 800a520:	3748      	adds	r7, #72	; 0x48
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b082      	sub	sp, #8
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
 800a52e:	6039      	str	r1, [r7, #0]
    clear();
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	339c      	adds	r3, #156	; 0x9c
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	4798      	blx	r3
    activeReporter_->failTest(failure);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	691a      	ldr	r2, [r3, #16]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3308      	adds	r3, #8
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	6839      	ldr	r1, [r7, #0]
 800a54c:	4610      	mov	r0, r2
 800a54e:	4798      	blx	r3
}
 800a550:	bf00      	nop
 800a552:	3708      	adds	r7, #8
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 800a560:	f008 fd0a 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800a564:	4603      	mov	r3, r0
 800a566:	4618      	mov	r0, r3
 800a568:	f007 fb78 	bl	8011c5c <_ZN10UtestShell10countCheckEv>
}
 800a56c:	bf00      	nop
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d008      	beq.n	800a596 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	33c4      	adds	r3, #196	; 0xc4
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4610      	mov	r0, r2
 800a594:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	3338      	adds	r3, #56	; 0x38
 800a59a:	4618      	mov	r0, r3
 800a59c:	f013 fdd7 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a5a0:	60f8      	str	r0, [r7, #12]
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d023      	beq.n	800a5f0 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f9f2 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a5b6:	68f9      	ldr	r1, [r7, #12]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f9eb 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e000      	b.n	800a5cc <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00a      	beq.n	800a5e6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 800a5d0:	68f9      	ldr	r1, [r7, #12]
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f9de 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	32c4      	adds	r2, #196	; 0xc4
 800a5e0:	6812      	ldr	r2, [r2, #0]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f013 fcba 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a5ec:	60f8      	str	r0, [r7, #12]
 800a5ee:	e7d8      	b.n	800a5a2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3320      	adds	r3, #32
 800a604:	4618      	mov	r0, r3
 800a606:	f010 f947 	bl	801a898 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800a610:	2301      	movs	r3, #1
 800a612:	e027      	b.n	800a664 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3338      	adds	r3, #56	; 0x38
 800a618:	4618      	mov	r0, r3
 800a61a:	f013 fd98 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d01d      	beq.n	800a662 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 800a626:	68f9      	ldr	r1, [r7, #12]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f9b3 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00c      	beq.n	800a64e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a634:	68f9      	ldr	r1, [r7, #12]
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 f9ac 	bl	800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800a63c:	4603      	mov	r3, r0
 800a63e:	4618      	mov	r0, r3
 800a640:	f7ff ffda 	bl	800a5f8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 800a64a:	2301      	movs	r3, #1
 800a64c:	e000      	b.n	800a650 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800a64e:	2300      	movs	r3, #0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d001      	beq.n	800a658 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 800a654:	2301      	movs	r3, #1
 800a656:	e005      	b.n	800a664 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f013 fc81 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	e7de      	b.n	800a620 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f7ff ff7d 	bl	800a574 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f7ff fe44 	bl	800a308 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3398      	adds	r3, #152	; 0x98
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
 800a692:	4603      	mov	r3, r0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <_ZN11MockSupport17checkExpectationsEv+0x30>
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <_ZN11MockSupport17checkExpectationsEv+0x32>
 800a69c:	2300      	movs	r3, #0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d002      	beq.n	800a6a8 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff fe7d 	bl	800a3a2 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ffa5 	bl	800a5f8 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d002      	beq.n	800a6ba <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff fed5 	bl	800a464 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b082      	sub	sp, #8
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
 800a6ca:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3338      	adds	r3, #56	; 0x38
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f013 fd0c 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	bf14      	ite	ne
 800a6de:	2301      	movne	r3, #1
 800a6e0:	2300      	moveq	r3, #0
 800a6e2:	b2db      	uxtb	r3, r3
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 800a6ec:	b590      	push	{r4, r7, lr}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3338      	adds	r3, #56	; 0x38
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f013 fcf7 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a702:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d111      	bne.n	800a72e <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 800a70a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a70e:	490a      	ldr	r1, [pc, #40]	; (800a738 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800a710:	2038      	movs	r0, #56	; 0x38
 800a712:	f7fe fc8b 	bl	800902c <_ZnwjPKci>
 800a716:	4604      	mov	r4, r0
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	4620      	mov	r0, r4
 800a71c:	f011 fd6e 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 800a720:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	3338      	adds	r3, #56	; 0x38
 800a726:	68f9      	ldr	r1, [r7, #12]
 800a728:	4618      	mov	r0, r3
 800a72a:	f013 fcab 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800a72e:	68fb      	ldr	r3, [r7, #12]
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	bd90      	pop	{r4, r7, pc}
 800a738:	08022bd8 	.word	0x08022bd8

0800a73c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f7ff ffcd 	bl	800a6ec <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800a752:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3344      	adds	r3, #68	; 0x44
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	683a      	ldr	r2, [r7, #0]
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	4798      	blx	r3
}
 800a764:	bf00      	nop
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	60b9      	str	r1, [r7, #8]
 800a776:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	3338      	adds	r3, #56	; 0x38
 800a77c:	6879      	ldr	r1, [r7, #4]
 800a77e:	4618      	mov	r0, r3
 800a780:	f013 fcb6 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800a784:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 800a786:	69fb      	ldr	r3, [r7, #28]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d111      	bne.n	800a7b0 <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 800a78c:	f107 0314 	add.w	r3, r7, #20
 800a790:	490b      	ldr	r1, [pc, #44]	; (800a7c0 <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f80d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800a798:	f107 0314 	add.w	r3, r7, #20
 800a79c:	4619      	mov	r1, r3
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f011 fd2c 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 800a7a4:	f107 0314 	add.w	r3, r7, #20
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f001 fbba 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800a7ae:	e003      	b.n	800a7b8 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 800a7b0:	69f9      	ldr	r1, [r7, #28]
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f7ff f8a2 	bl	80098fc <_ZN14MockNamedValueC1ERKS_>
}
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	3720      	adds	r7, #32
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	08022bd0 	.word	0x08022bd0

0800a7c4 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 800a7ce:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a7d2:	4927      	ldr	r1, [pc, #156]	; (800a870 <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 800a7d4:	2048      	movs	r0, #72	; 0x48
 800a7d6:	f7fe fc29 	bl	800902c <_ZnwjPKci>
 800a7da:	4604      	mov	r4, r0
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	4620      	mov	r0, r4
 800a7e0:	f7ff f8f8 	bl	80099d4 <_ZN11MockSupportC1ERK12SimpleString>
 800a7e4:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	33a4      	adds	r3, #164	; 0xa4
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	6952      	ldr	r2, [r2, #20]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d005      	beq.n	800a80e <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3390      	adds	r3, #144	; 0x90
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800a814:	f083 0301 	eor.w	r3, r3, #1
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d005      	beq.n	800a82a <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3384      	adds	r3, #132	; 0x84
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	7b1b      	ldrb	r3, [r3, #12]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d005      	beq.n	800a83e <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3308      	adds	r3, #8
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	4798      	blx	r3

    newMock->tracing(tracing_);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	338c      	adds	r3, #140	; 0x8c
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 800a84c:	4611      	mov	r1, r2
 800a84e:	68f8      	ldr	r0, [r7, #12]
 800a850:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	33b8      	adds	r3, #184	; 0xb8
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	3230      	adds	r2, #48	; 0x30
 800a85e:	4611      	mov	r1, r2
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	4798      	blx	r3
    return newMock;
 800a864:	68fb      	ldr	r3, [r7, #12]
}
 800a866:	4618      	mov	r0, r3
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd90      	pop	{r4, r7, pc}
 800a86e:	bf00      	nop
 800a870:	08022bd8 	.word	0x08022bd8

0800a874 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 800a874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a876:	b0ab      	sub	sp, #172	; 0xac
 800a878:	af04      	add	r7, sp, #16
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a87e:	f107 0308 	add.w	r3, r7, #8
 800a882:	4941      	ldr	r1, [pc, #260]	; (800a988 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 800a884:	4618      	mov	r0, r3
 800a886:	f000 ff94 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 800a88a:	f107 0308 	add.w	r3, r7, #8
 800a88e:	6839      	ldr	r1, [r7, #0]
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fbc3 	bl	800c01c <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 800a896:	f107 0308 	add.w	r3, r7, #8
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7ff ff10 	bl	800a6c2 <_ZN11MockSupport7hasDataERK12SimpleString>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d048      	beq.n	800a93a <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 800a8a8:	f008 fb66 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	3324      	adds	r3, #36	; 0x24
 800a8b2:	681d      	ldr	r5, [r3, #0]
 800a8b4:	f107 0318 	add.w	r3, r7, #24
 800a8b8:	f107 0208 	add.w	r2, r7, #8
 800a8bc:	6879      	ldr	r1, [r7, #4]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff ff54 	bl	800a76c <_ZN11MockSupport7getDataERK12SimpleString>
 800a8c4:	f107 0310 	add.w	r3, r7, #16
 800a8c8:	f107 0218 	add.w	r2, r7, #24
 800a8cc:	4611      	mov	r1, r2
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f011 ff61 	bl	801c796 <_ZNK14MockNamedValue7getTypeEv>
 800a8d4:	f107 0310 	add.w	r3, r7, #16
 800a8d8:	4618      	mov	r0, r3
 800a8da:	f001 faf5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800a8de:	4606      	mov	r6, r0
 800a8e0:	f008 fb5a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	9302      	str	r3, [sp, #8]
 800a8e8:	f240 13bd 	movw	r3, #445	; 0x1bd
 800a8ec:	9301      	str	r3, [sp, #4]
 800a8ee:	4b27      	ldr	r3, [pc, #156]	; (800a98c <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800a8f0:	9300      	str	r3, [sp, #0]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4926      	ldr	r1, [pc, #152]	; (800a990 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	47a8      	blx	r5
 800a8fc:	f107 0310 	add.w	r3, r7, #16
 800a900:	4618      	mov	r0, r3
 800a902:	f001 fb0e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800a906:	f107 0318 	add.w	r3, r7, #24
 800a90a:	4618      	mov	r0, r3
 800a90c:	f011 fca0 	bl	801c250 <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800a910:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a914:	f107 0208 	add.w	r2, r7, #8
 800a918:	6879      	ldr	r1, [r7, #4]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff ff26 	bl	800a76c <_ZN11MockSupport7getDataERK12SimpleString>
 800a920:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a924:	4618      	mov	r0, r3
 800a926:	f012 fa4f 	bl	801cdc8 <_ZNK14MockNamedValue16getObjectPointerEv>
 800a92a:	4604      	mov	r4, r0
 800a92c:	bf00      	nop
 800a92e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800a932:	4618      	mov	r0, r3
 800a934:	f011 fc8c 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800a938:	e01b      	b.n	800a972 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ff41 	bl	800a7c4 <_ZN11MockSupport5cloneERK12SimpleString>
 800a942:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 800a946:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a94a:	4911      	ldr	r1, [pc, #68]	; (800a990 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 800a94c:	4618      	mov	r0, r3
 800a94e:	f000 ff30 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800a952:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800a956:	f107 0108 	add.w	r1, r7, #8
 800a95a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7ff feec 	bl	800a73c <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 800a964:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800a968:	4618      	mov	r0, r3
 800a96a:	f001 fada 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return newMock;
 800a96e:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800a972:	f107 0308 	add.w	r3, r7, #8
 800a976:	4618      	mov	r0, r3
 800a978:	f001 fad3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800a97c:	4623      	mov	r3, r4
}
 800a97e:	4618      	mov	r0, r3
 800a980:	379c      	adds	r7, #156	; 0x9c
 800a982:	46bd      	mov	sp, r7
 800a984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a986:	bf00      	nop
 800a988:	08022bf0 	.word	0x08022bf0
 800a98c:	08022bd8 	.word	0x08022bd8
 800a990:	08022c10 	.word	0x08022c10

0800a994 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 800a994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a998:	b08b      	sub	sp, #44	; 0x2c
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
 800a99e:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 800a9a0:	2500      	movs	r5, #0
 800a9a2:	2600      	movs	r6, #0
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f013 fb26 	bl	801dffc <_ZNK22MockNamedValueListNode7getTypeEv>
 800a9b0:	f04f 0801 	mov.w	r8, #1
 800a9b4:	f107 0310 	add.w	r3, r7, #16
 800a9b8:	492e      	ldr	r1, [pc, #184]	; (800aa74 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fef9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800a9c0:	f04f 0901 	mov.w	r9, #1
 800a9c4:	f107 0210 	add.w	r2, r7, #16
 800a9c8:	f107 0308 	add.w	r3, r7, #8
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f001 fab3 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d01a      	beq.n	800aa10 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800a9da:	f107 0318 	add.w	r3, r7, #24
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f013 faf8 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 800a9e6:	2501      	movs	r5, #1
 800a9e8:	f107 0320 	add.w	r3, r7, #32
 800a9ec:	4922      	ldr	r1, [pc, #136]	; (800aa78 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fedf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800a9f4:	2601      	movs	r6, #1
 800a9f6:	f107 0220 	add.w	r2, r7, #32
 800a9fa:	f107 0318 	add.w	r3, r7, #24
 800a9fe:	4611      	mov	r1, r2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 ff54 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d001      	beq.n	800aa10 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 800aa0c:	2401      	movs	r4, #1
 800aa0e:	e000      	b.n	800aa12 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800aa10:	2400      	movs	r4, #0
 800aa12:	2e00      	cmp	r6, #0
 800aa14:	d004      	beq.n	800aa20 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 800aa16:	f107 0320 	add.w	r3, r7, #32
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f001 fa81 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	d004      	beq.n	800aa2e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 800aa24:	f107 0318 	add.w	r3, r7, #24
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f001 fa7a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800aa2e:	f1b9 0f00 	cmp.w	r9, #0
 800aa32:	d004      	beq.n	800aa3e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 800aa34:	f107 0310 	add.w	r3, r7, #16
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 fa72 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800aa3e:	f1b8 0f00 	cmp.w	r8, #0
 800aa42:	d004      	beq.n	800aa4e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 800aa44:	f107 0308 	add.w	r3, r7, #8
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f001 fa6a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800aa4e:	2c00      	cmp	r4, #0
 800aa50:	d00a      	beq.n	800aa68 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800aa52:	6838      	ldr	r0, [r7, #0]
 800aa54:	f013 fa90 	bl	801df78 <_ZN22MockNamedValueListNode4itemEv>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	32a0      	adds	r2, #160	; 0xa0
 800aa5e:	6812      	ldr	r2, [r2, #0]
 800aa60:	4618      	mov	r0, r3
 800aa62:	4790      	blx	r2
 800aa64:	4603      	mov	r3, r0
 800aa66:	e000      	b.n	800aa6a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	372c      	adds	r7, #44	; 0x2c
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa74:	08022c10 	.word	0x08022c10
 800aa78:	08022bf0 	.word	0x08022bf0

0800aa7c <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00a      	beq.n	800aaa4 <_ZN11MockSupport11returnValueEv+0x28>
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	3354      	adds	r3, #84	; 0x54
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	4798      	blx	r3
 800aaa2:	e010      	b.n	800aac6 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	4909      	ldr	r1, [pc, #36]	; (800aad0 <_ZN11MockSupport11returnValueEv+0x54>)
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 fe81 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800aab0:	f107 0308 	add.w	r3, r7, #8
 800aab4:	4619      	mov	r1, r3
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f011 fba0 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 800aabc:	f107 0308 	add.w	r3, r7, #8
 800aac0:	4618      	mov	r0, r3
 800aac2:	f001 fa2e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	08022bd0 	.word	0x08022bd0

0800aad4 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 800aad4:	b590      	push	{r4, r7, lr}
 800aad6:	b091      	sub	sp, #68	; 0x44
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3320      	adds	r3, #32
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f107 0208 	add.w	r2, r7, #8
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	4610      	mov	r0, r2
 800aaec:	4798      	blx	r3
 800aaee:	f107 0308 	add.w	r3, r7, #8
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f011 fe5e 	bl	801c7b4 <_ZNK14MockNamedValue12getBoolValueEv>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	461c      	mov	r4, r3
 800aafc:	bf00      	nop
 800aafe:	f107 0308 	add.w	r3, r7, #8
 800ab02:	4618      	mov	r0, r3
 800ab04:	f011 fba4 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800ab08:	4623      	mov	r3, r4
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3744      	adds	r7, #68	; 0x44
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd90      	pop	{r4, r7, pc}

0800ab12 <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800ab12:	b590      	push	{r4, r7, lr}
 800ab14:	b091      	sub	sp, #68	; 0x44
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3320      	adds	r3, #32
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f107 0208 	add.w	r2, r7, #8
 800ab26:	6879      	ldr	r1, [r7, #4]
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
 800ab2c:	f107 0308 	add.w	r3, r7, #8
 800ab30:	4618      	mov	r0, r3
 800ab32:	f011 fe67 	bl	801c804 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 800ab36:	4604      	mov	r4, r0
 800ab38:	bf00      	nop
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f011 fb86 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800ab44:	4623      	mov	r3, r4
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3744      	adds	r7, #68	; 0x44
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd90      	pop	{r4, r7, pc}

0800ab4e <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800ab4e:	b590      	push	{r4, r7, lr}
 800ab50:	b091      	sub	sp, #68	; 0x44
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3320      	adds	r3, #32
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f107 0208 	add.w	r2, r7, #8
 800ab62:	6879      	ldr	r1, [r7, #4]
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	f107 0308 	add.w	r3, r7, #8
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f011 fe99 	bl	801c8a4 <_ZNK14MockNamedValue11getIntValueEv>
 800ab72:	4604      	mov	r4, r0
 800ab74:	bf00      	nop
 800ab76:	f107 0308 	add.w	r3, r7, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f011 fb68 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800ab80:	4623      	mov	r3, r4
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3744      	adds	r7, #68	; 0x44
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd90      	pop	{r4, r7, pc}

0800ab8a <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b082      	sub	sp, #8
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	331c      	adds	r3, #28
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	4798      	blx	r3
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d007      	beq.n	800abb6 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	335c      	adds	r3, #92	; 0x5c
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	4798      	blx	r3
 800abb2:	4603      	mov	r3, r0
 800abb4:	e000      	b.n	800abb8 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 800abb6:	683b      	ldr	r3, [r7, #0]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	331c      	adds	r3, #28
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	4798      	blx	r3
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	3368      	adds	r3, #104	; 0x68
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	4798      	blx	r3
 800abea:	eeb0 7a40 	vmov.f32	s14, s0
 800abee:	eef0 7a60 	vmov.f32	s15, s1
 800abf2:	e001      	b.n	800abf8 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 800abf4:	ed97 7b00 	vldr	d7, [r7]
}
 800abf8:	eeb0 0a47 	vmov.f32	s0, s14
 800abfc:	eef0 0a67 	vmov.f32	s1, s15
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	331c      	adds	r3, #28
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	4798      	blx	r3
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d007      	beq.n	800ac32 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	3338      	adds	r3, #56	; 0x38
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	4798      	blx	r3
 800ac2e:	4603      	mov	r3, r0
 800ac30:	e000      	b.n	800ac34 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800ac32:	683b      	ldr	r3, [r7, #0]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	460b      	mov	r3, r1
 800ac46:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	331c      	adds	r3, #28
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
 800ac54:	4603      	mov	r3, r0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d007      	beq.n	800ac6a <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	3324      	adds	r3, #36	; 0x24
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	4798      	blx	r3
 800ac66:	4603      	mov	r3, r0
 800ac68:	e000      	b.n	800ac6c <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 800ac6a:	78fb      	ldrb	r3, [r7, #3]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	331c      	adds	r3, #28
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d007      	beq.n	800aca0 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	332c      	adds	r3, #44	; 0x2c
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	e000      	b.n	800aca2 <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 800aca0:	683b      	ldr	r3, [r7, #0]
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}

0800acaa <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 800acaa:	b580      	push	{r7, lr}
 800acac:	b082      	sub	sp, #8
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
 800acb2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	331c      	adds	r3, #28
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	3334      	adds	r3, #52	; 0x34
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	e000      	b.n	800acd8 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 800acd6:	683b      	ldr	r3, [r7, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	331c      	adds	r3, #28
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	4798      	blx	r3
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d007      	beq.n	800ad0c <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3340      	adds	r3, #64	; 0x40
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	4798      	blx	r3
 800ad08:	4603      	mov	r3, r0
 800ad0a:	e000      	b.n	800ad0e <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 800ad0c:	683b      	ldr	r3, [r7, #0]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3708      	adds	r7, #8
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 800ad16:	b590      	push	{r4, r7, lr}
 800ad18:	b091      	sub	sp, #68	; 0x44
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3320      	adds	r3, #32
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f107 0208 	add.w	r2, r7, #8
 800ad2a:	6879      	ldr	r1, [r7, #4]
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	4798      	blx	r3
 800ad30:	f107 0308 	add.w	r3, r7, #8
 800ad34:	4618      	mov	r0, r3
 800ad36:	f011 fddd 	bl	801c8f4 <_ZNK14MockNamedValue15getLongIntValueEv>
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	bf00      	nop
 800ad3e:	f107 0308 	add.w	r3, r7, #8
 800ad42:	4618      	mov	r0, r3
 800ad44:	f011 fa84 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800ad48:	4623      	mov	r3, r4
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3744      	adds	r7, #68	; 0x44
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd90      	pop	{r4, r7, pc}

0800ad52 <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800ad52:	b590      	push	{r4, r7, lr}
 800ad54:	b091      	sub	sp, #68	; 0x44
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3320      	adds	r3, #32
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f107 0208 	add.w	r2, r7, #8
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	f107 0308 	add.w	r3, r7, #8
 800ad70:	4618      	mov	r0, r3
 800ad72:	f011 fe21 	bl	801c9b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 800ad76:	4604      	mov	r4, r0
 800ad78:	bf00      	nop
 800ad7a:	f107 0308 	add.w	r3, r7, #8
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f011 fa66 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800ad84:	4623      	mov	r3, r4
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3744      	adds	r7, #68	; 0x44
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd90      	pop	{r4, r7, pc}
	...

0800ad90 <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 800ad90:	b5b0      	push	{r4, r5, r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af02      	add	r7, sp, #8
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 800ad9a:	f008 f8ed 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800ad9e:	4604      	mov	r4, r0
 800ada0:	6823      	ldr	r3, [r4, #0]
 800ada2:	3368      	adds	r3, #104	; 0x68
 800ada4:	681d      	ldr	r5, [r3, #0]
 800ada6:	f008 f8f7 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800adaa:	4603      	mov	r3, r0
 800adac:	9300      	str	r3, [sp, #0]
 800adae:	f240 2345 	movw	r3, #581	; 0x245
 800adb2:	4a06      	ldr	r2, [pc, #24]	; (800adcc <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 800adb4:	4906      	ldr	r1, [pc, #24]	; (800add0 <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 800adb6:	4620      	mov	r0, r4
 800adb8:	47a8      	blx	r5
    return cpputest_longlong(0);
 800adba:	2100      	movs	r1, #0
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7fe fd2f 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
}
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bdb0      	pop	{r4, r5, r7, pc}
 800adca:	bf00      	nop
 800adcc:	08022bd8 	.word	0x08022bd8
 800add0:	08022c1c 	.word	0x08022c1c

0800add4 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 800add4:	b5b0      	push	{r4, r5, r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af02      	add	r7, sp, #8
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 800adde:	f008 f8cb 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800ade2:	4604      	mov	r4, r0
 800ade4:	6823      	ldr	r3, [r4, #0]
 800ade6:	3368      	adds	r3, #104	; 0x68
 800ade8:	681d      	ldr	r5, [r3, #0]
 800adea:	f008 f8d5 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800adee:	4603      	mov	r3, r0
 800adf0:	9300      	str	r3, [sp, #0]
 800adf2:	f240 234b 	movw	r3, #587	; 0x24b
 800adf6:	4a06      	ldr	r2, [pc, #24]	; (800ae10 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 800adf8:	4906      	ldr	r1, [pc, #24]	; (800ae14 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 800adfa:	4620      	mov	r0, r4
 800adfc:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800adfe:	2100      	movs	r1, #0
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7fe fd19 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
}
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	08022bd8 	.word	0x08022bd8
 800ae14:	08022c3c 	.word	0x08022c3c

0800ae18 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 800ae18:	b5b0      	push	{r4, r5, r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af02      	add	r7, sp, #8
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	4639      	mov	r1, r7
 800ae24:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 800ae28:	f008 f8a6 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	3368      	adds	r3, #104	; 0x68
 800ae32:	681d      	ldr	r5, [r3, #0]
 800ae34:	f008 f8b0 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	9300      	str	r3, [sp, #0]
 800ae3c:	f240 2351 	movw	r3, #593	; 0x251
 800ae40:	4a06      	ldr	r2, [pc, #24]	; (800ae5c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800ae42:	4907      	ldr	r1, [pc, #28]	; (800ae60 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 800ae44:	4620      	mov	r0, r4
 800ae46:	47a8      	blx	r5
    return defaultValue;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	463b      	mov	r3, r7
 800ae4e:	cb03      	ldmia	r3!, {r0, r1}
 800ae50:	6010      	str	r0, [r2, #0]
 800ae52:	6051      	str	r1, [r2, #4]
}
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	3710      	adds	r7, #16
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ae5c:	08022bd8 	.word	0x08022bd8
 800ae60:	08022c1c 	.word	0x08022c1c

0800ae64 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 800ae64:	b5b0      	push	{r4, r5, r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af02      	add	r7, sp, #8
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	4639      	mov	r1, r7
 800ae70:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 800ae74:	f008 f880 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800ae78:	4604      	mov	r4, r0
 800ae7a:	6823      	ldr	r3, [r4, #0]
 800ae7c:	3368      	adds	r3, #104	; 0x68
 800ae7e:	681d      	ldr	r5, [r3, #0]
 800ae80:	f008 f88a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ae84:	4603      	mov	r3, r0
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	f240 2357 	movw	r3, #599	; 0x257
 800ae8c:	4a06      	ldr	r2, [pc, #24]	; (800aea8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 800ae8e:	4907      	ldr	r1, [pc, #28]	; (800aeac <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 800ae90:	4620      	mov	r0, r4
 800ae92:	47a8      	blx	r5
    return defaultValue;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	461a      	mov	r2, r3
 800ae98:	463b      	mov	r3, r7
 800ae9a:	cb03      	ldmia	r3!, {r0, r1}
 800ae9c:	6010      	str	r0, [r2, #0]
 800ae9e:	6051      	str	r1, [r2, #4]
}
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	3710      	adds	r7, #16
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bdb0      	pop	{r4, r5, r7, pc}
 800aea8:	08022bd8 	.word	0x08022bd8
 800aeac:	08022c3c 	.word	0x08022c3c

0800aeb0 <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 800aeb0:	b590      	push	{r4, r7, lr}
 800aeb2:	b091      	sub	sp, #68	; 0x44
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3320      	adds	r3, #32
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f107 0208 	add.w	r2, r7, #8
 800aec4:	6879      	ldr	r1, [r7, #4]
 800aec6:	4610      	mov	r0, r2
 800aec8:	4798      	blx	r3
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4618      	mov	r0, r3
 800aed0:	f011 fea6 	bl	801cc20 <_ZNK14MockNamedValue14getStringValueEv>
 800aed4:	4604      	mov	r4, r0
 800aed6:	bf00      	nop
 800aed8:	f107 0308 	add.w	r3, r7, #8
 800aedc:	4618      	mov	r0, r3
 800aede:	f011 f9b7 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800aee2:	4623      	mov	r3, r4
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3744      	adds	r7, #68	; 0x44
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd90      	pop	{r4, r7, pc}

0800aeec <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	ed2d 8b02 	vpush	{d8}
 800aef2:	b090      	sub	sp, #64	; 0x40
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3320      	adds	r3, #32
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f107 0208 	add.w	r2, r7, #8
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	4610      	mov	r0, r2
 800af08:	4798      	blx	r3
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4618      	mov	r0, r3
 800af10:	f011 fe2a 	bl	801cb68 <_ZNK14MockNamedValue14getDoubleValueEv>
 800af14:	eeb0 8a40 	vmov.f32	s16, s0
 800af18:	eef0 8a60 	vmov.f32	s17, s1
 800af1c:	bf00      	nop
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4618      	mov	r0, r3
 800af24:	f011 f994 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800af28:	eeb0 7a48 	vmov.f32	s14, s16
 800af2c:	eef0 7a68 	vmov.f32	s15, s17
}
 800af30:	eeb0 0a47 	vmov.f32	s0, s14
 800af34:	eef0 0a67 	vmov.f32	s1, s15
 800af38:	3740      	adds	r7, #64	; 0x40
 800af3a:	46bd      	mov	sp, r7
 800af3c:	ecbd 8b02 	vpop	{d8}
 800af40:	bd80      	pop	{r7, pc}

0800af42 <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	331c      	adds	r3, #28
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	4798      	blx	r3
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d007      	beq.n	800af6e <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	336c      	adds	r3, #108	; 0x6c
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	4798      	blx	r3
 800af6a:	4603      	mov	r3, r0
 800af6c:	e000      	b.n	800af70 <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800af6e:	683b      	ldr	r3, [r7, #0]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}

0800af78 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	331c      	adds	r3, #28
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	4798      	blx	r3
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d007      	beq.n	800afa4 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3378      	adds	r3, #120	; 0x78
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	4798      	blx	r3
 800afa0:	4603      	mov	r3, r0
 800afa2:	e000      	b.n	800afa6 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 800afa4:	683b      	ldr	r3, [r7, #0]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	331c      	adds	r3, #28
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	4798      	blx	r3
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d007      	beq.n	800afda <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3380      	adds	r3, #128	; 0x80
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
 800afd6:	4603      	mov	r3, r0
 800afd8:	e000      	b.n	800afdc <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 800afda:	683b      	ldr	r3, [r7, #0]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3708      	adds	r7, #8
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 800afe4:	b590      	push	{r4, r7, lr}
 800afe6:	b091      	sub	sp, #68	; 0x44
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	3320      	adds	r3, #32
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f107 0208 	add.w	r2, r7, #8
 800aff8:	6879      	ldr	r1, [r7, #4]
 800affa:	4610      	mov	r0, r2
 800affc:	4798      	blx	r3
 800affe:	f107 0308 	add.w	r3, r7, #8
 800b002:	4618      	mov	r0, r3
 800b004:	f011 fe34 	bl	801cc70 <_ZNK14MockNamedValue15getPointerValueEv>
 800b008:	4604      	mov	r4, r0
 800b00a:	bf00      	nop
 800b00c:	f107 0308 	add.w	r3, r7, #8
 800b010:	4618      	mov	r0, r3
 800b012:	f011 f91d 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800b016:	4623      	mov	r3, r4
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3744      	adds	r7, #68	; 0x44
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd90      	pop	{r4, r7, pc}

0800b020 <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 800b020:	b590      	push	{r4, r7, lr}
 800b022:	b091      	sub	sp, #68	; 0x44
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3320      	adds	r3, #32
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f107 0208 	add.w	r2, r7, #8
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4610      	mov	r0, r2
 800b038:	4798      	blx	r3
 800b03a:	f107 0308 	add.w	r3, r7, #8
 800b03e:	4618      	mov	r0, r3
 800b040:	f011 fe3e 	bl	801ccc0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 800b044:	4604      	mov	r4, r0
 800b046:	bf00      	nop
 800b048:	f107 0308 	add.w	r3, r7, #8
 800b04c:	4618      	mov	r0, r3
 800b04e:	f011 f8ff 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800b052:	4623      	mov	r3, r4
}
 800b054:	4618      	mov	r0, r3
 800b056:	3744      	adds	r7, #68	; 0x44
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd90      	pop	{r4, r7, pc}

0800b05c <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 800b05c:	b590      	push	{r4, r7, lr}
 800b05e:	b091      	sub	sp, #68	; 0x44
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3320      	adds	r3, #32
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f107 0208 	add.w	r2, r7, #8
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	4610      	mov	r0, r2
 800b074:	4798      	blx	r3
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4618      	mov	r0, r3
 800b07c:	f011 fe48 	bl	801cd10 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 800b080:	4604      	mov	r4, r0
 800b082:	bf00      	nop
 800b084:	f107 0308 	add.w	r3, r7, #8
 800b088:	4618      	mov	r0, r3
 800b08a:	f011 f8e1 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 800b08e:	4623      	mov	r3, r4
}
 800b090:	4618      	mov	r0, r3
 800b092:	3744      	adds	r7, #68	; 0x44
 800b094:	46bd      	mov	sp, r7
 800b096:	bd90      	pop	{r4, r7, pc}

0800b098 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b082      	sub	sp, #8
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00a      	beq.n	800b0be <_ZN11MockSupport14hasReturnValueEv+0x26>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	3350      	adds	r3, #80	; 0x50
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4610      	mov	r0, r2
 800b0b8:	4798      	blx	r3
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	e000      	b.n	800b0c0 <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <_Z41__static_initialization_and_destruction_0ii>:
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d115      	bne.n	800b104 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d110      	bne.n	800b104 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 800b0e2:	f107 0308 	add.w	r3, r7, #8
 800b0e6:	490f      	ldr	r1, [pc, #60]	; (800b124 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 fb62 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	480c      	ldr	r0, [pc, #48]	; (800b128 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800b0f6:	f7fe fc6d 	bl	80099d4 <_ZN11MockSupportC1ERK12SimpleString>
 800b0fa:	f107 0308 	add.w	r3, r7, #8
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 ff0f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d107      	bne.n	800b11a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b110:	4293      	cmp	r3, r2
 800b112:	d102      	bne.n	800b11a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800b114:	4804      	ldr	r0, [pc, #16]	; (800b128 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800b116:	f7fe fca7 	bl	8009a68 <_ZN11MockSupportD1Ev>
}
 800b11a:	bf00      	nop
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	08022bd0 	.word	0x08022bd0
 800b128:	2000075c 	.word	0x2000075c

0800b12c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	4a05      	ldr	r2, [pc, #20]	; (800b14c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7fe fbbb 	bl	80098b8 <_ZN11MockFailureD1Ev>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	080264f0 	.word	0x080264f0

0800b150 <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6878      	ldr	r0, [r7, #4]
 800b15a:	f7ff ffe7 	bl	800b12c <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 800b15e:	2134      	movs	r1, #52	; 0x34
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7fd ff77 	bl	8009054 <_ZdlPvj>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4618      	mov	r0, r3
 800b16a:	3708      	adds	r7, #8
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	4a05      	ldr	r2, [pc, #20]	; (800b190 <_ZN20MockCallOrderFailureD1Ev+0x20>)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	601a      	str	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	4618      	mov	r0, r3
 800b182:	f7fe fb99 	bl	80098b8 <_ZN11MockFailureD1Ev>
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4618      	mov	r0, r3
 800b18a:	3708      	adds	r7, #8
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	080264c4 	.word	0x080264c4

0800b194 <_ZN20MockCallOrderFailureD0Ev>:
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ffe7 	bl	800b170 <_ZN20MockCallOrderFailureD1Ev>
 800b1a2:	2134      	movs	r1, #52	; 0x34
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7fd ff55 	bl	8009054 <_ZdlPvj>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7ff ff83 	bl	800b0c8 <_Z41__static_initialization_and_destruction_0ii>
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b1cc:	2000      	movs	r0, #0
 800b1ce:	f7ff ff7b 	bl	800b0c8 <_Z41__static_initialization_and_destruction_0ii>
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <_ZN11SimpleMutexC1Ev+0x20>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4798      	blx	r3
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	601a      	str	r2, [r3, #0]
}
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	200000f4 	.word	0x200000f4

0800b1f8 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <_ZN11SimpleMutexD1Ev+0x20>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	6812      	ldr	r2, [r2, #0]
 800b208:	4610      	mov	r0, r2
 800b20a:	4798      	blx	r3
}
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	4618      	mov	r0, r3
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20000100 	.word	0x20000100

0800b21c <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b082      	sub	sp, #8
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 800b224:	4b04      	ldr	r3, [pc, #16]	; (800b238 <_ZN11SimpleMutex4LockEv+0x1c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6812      	ldr	r2, [r2, #0]
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200000f8 	.word	0x200000f8

0800b23c <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 800b244:	4b04      	ldr	r3, [pc, #16]	; (800b258 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6812      	ldr	r2, [r2, #0]
 800b24c:	4610      	mov	r0, r2
 800b24e:	4798      	blx	r3
}
 800b250:	bf00      	nop
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	200000fc 	.word	0x200000fc

0800b25c <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	683a      	ldr	r2, [r7, #0]
 800b26a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff ffd3 	bl	800b21c <_ZN11SimpleMutex4LockEv>
}
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4618      	mov	r0, r3
 800b27a:	3708      	adds	r7, #8
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 800b280:	b580      	push	{r7, lr}
 800b282:	b082      	sub	sp, #8
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7ff ffd5 	bl	800b23c <_ZN11SimpleMutex6UnlockEv>
}
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4618      	mov	r0, r3
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 800b2a0:	4b05      	ldr	r3, [pc, #20]	; (800b2b8 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d103      	bne.n	800b2b0 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 800b2a8:	f003 fd7a 	bl	800eda0 <_Z24defaultNewArrayAllocatorv>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	e001      	b.n	800b2b4 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 800b2b0:	4b01      	ldr	r3, [pc, #4]	; (800b2b8 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	200007a4 	.word	0x200007a4

0800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 800b2bc:	b590      	push	{r4, r7, lr}
 800b2be:	b085      	sub	sp, #20
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 800b2c8:	f7ff ffe8 	bl	800b29c <_ZN12SimpleString18getStringAllocatorEv>
 800b2cc:	6803      	ldr	r3, [r0, #0]
 800b2ce:	3308      	adds	r3, #8
 800b2d0:	681c      	ldr	r4, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	68f9      	ldr	r1, [r7, #12]
 800b2d8:	47a0      	blx	r4
 800b2da:	4603      	mov	r3, r0
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd90      	pop	{r4, r7, pc}

0800b2e4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 800b2e4:	b590      	push	{r4, r7, lr}
 800b2e6:	b087      	sub	sp, #28
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	60b9      	str	r1, [r7, #8]
 800b2ee:	607a      	str	r2, [r7, #4]
 800b2f0:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 800b2f2:	f7ff ffd3 	bl	800b29c <_ZN12SimpleString18getStringAllocatorEv>
 800b2f6:	6803      	ldr	r3, [r0, #0]
 800b2f8:	330c      	adds	r3, #12
 800b2fa:	681c      	ldr	r4, [r3, #0]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68ba      	ldr	r2, [r7, #8]
 800b304:	68f9      	ldr	r1, [r7, #12]
 800b306:	47a0      	blx	r4
}
 800b308:	bf00      	nop
 800b30a:	3714      	adds	r7, #20
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd90      	pop	{r4, r7, pc}

0800b310 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 800b318:	2284      	movs	r2, #132	; 0x84
 800b31a:	4906      	ldr	r1, [pc, #24]	; (800b334 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 800b31c:	2001      	movs	r0, #1
 800b31e:	f7ff ffcd 	bl	800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b322:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	701a      	strb	r2, [r3, #0]
    return empty;
 800b32a:	68fb      	ldr	r3, [r7, #12]
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3710      	adds	r7, #16
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	08022c68 	.word	0x08022c68

0800b338 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b084      	sub	sp, #16
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	4618      	mov	r0, r3
 800b346:	f001 f809 	bl	800c35c <_ZN12SimpleString7isSpaceEc>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d003      	beq.n	800b358 <_ZN12SimpleString4AtoUEPKc+0x20>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	3301      	adds	r3, #1
 800b354:	607b      	str	r3, [r7, #4]
 800b356:	e7f3      	b.n	800b340 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 ffe7 	bl	800c334 <_ZN12SimpleString7isDigitEc>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d005      	beq.n	800b378 <_ZN12SimpleString4AtoUEPKc+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2b2f      	cmp	r3, #47	; 0x2f
 800b372:	d901      	bls.n	800b378 <_ZN12SimpleString4AtoUEPKc+0x40>
 800b374:	2301      	movs	r3, #1
 800b376:	e000      	b.n	800b37a <_ZN12SimpleString4AtoUEPKc+0x42>
 800b378:	2300      	movs	r3, #0
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d010      	beq.n	800b3a0 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	4613      	mov	r3, r2
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	3b30      	subs	r3, #48	; 0x30
 800b396:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	3301      	adds	r3, #1
 800b39c:	607b      	str	r3, [r7, #4]
 800b39e:	e7dd      	b.n	800b35c <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b084      	sub	sp, #16
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f000 ffd0 	bl	800c35c <_ZN12SimpleString7isSpaceEc>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <_ZN12SimpleString4AtoIEPKc+0x20>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3301      	adds	r3, #1
 800b3c6:	607b      	str	r3, [r7, #4]
 800b3c8:	e7f3      	b.n	800b3b2 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	781b      	ldrb	r3, [r3, #0]
 800b3ce:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 800b3d0:	7afb      	ldrb	r3, [r7, #11]
 800b3d2:	2b2d      	cmp	r3, #45	; 0x2d
 800b3d4:	d002      	beq.n	800b3dc <_ZN12SimpleString4AtoIEPKc+0x32>
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	2b2b      	cmp	r3, #43	; 0x2b
 800b3da:	d102      	bne.n	800b3e2 <_ZN12SimpleString4AtoIEPKc+0x38>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	607b      	str	r3, [r7, #4]

    int  result = 0;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 ffa2 	bl	800c334 <_ZN12SimpleString7isDigitEc>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00f      	beq.n	800b416 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4613      	mov	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	005b      	lsls	r3, r3, #1
 800b400:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	3b30      	subs	r3, #48	; 0x30
 800b408:	68fa      	ldr	r2, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	3301      	adds	r3, #1
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	e7e7      	b.n	800b3e6 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 800b416:	7afb      	ldrb	r3, [r7, #11]
 800b418:	2b2d      	cmp	r3, #45	; 0x2d
 800b41a:	d102      	bne.n	800b422 <_ZN12SimpleString4AtoIEPKc+0x78>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	425b      	negs	r3, r3
 800b420:	e000      	b.n	800b424 <_ZN12SimpleString4AtoIEPKc+0x7a>
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	429a      	cmp	r2, r3
 800b448:	d106      	bne.n	800b458 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	3301      	adds	r3, #1
 800b44e:	607b      	str	r3, [r7, #4]
       ++s2;
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	3301      	adds	r3, #1
 800b454:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 800b456:	e7ee      	b.n	800b436 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	1ad3      	subs	r3, r2, r3
}
 800b464:	4618      	mov	r0, r3
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 800b478:	f04f 33ff 	mov.w	r3, #4294967295
 800b47c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3301      	adds	r3, #1
 800b482:	60fb      	str	r3, [r7, #12]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	607a      	str	r2, [r7, #4]
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bf14      	ite	ne
 800b490:	2301      	movne	r3, #1
 800b492:	2300      	moveq	r3, #0
 800b494:	b2db      	uxtb	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d000      	beq.n	800b49c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800b49a:	e7f0      	b.n	800b47e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800b49c:	68fb      	ldr	r3, [r7, #12]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b085      	sub	sp, #20
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	60f8      	str	r0, [r7, #12]
 800b4b2:	60b9      	str	r1, [r7, #8]
 800b4b4:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d013      	beq.n	800b4e4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00f      	beq.n	800b4e4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	781a      	ldrb	r2, [r3, #0]
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d109      	bne.n	800b4e4 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3b01      	subs	r3, #1
 800b4d4:	607b      	str	r3, [r7, #4]
        ++s1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
        ++s2;
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	3301      	adds	r3, #1
 800b4e0:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 800b4e2:	e7e8      	b.n	800b4b6 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d006      	beq.n	800b4f8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	e000      	b.n	800b4fa <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 800b4f8:	2300      	movs	r3, #0
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 800b506:	b480      	push	{r7}
 800b508:	b087      	sub	sp, #28
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
    char* result = s1;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d002      	beq.n	800b522 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	e01e      	b.n	800b564 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	781a      	ldrb	r2, [r3, #0]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	3b01      	subs	r3, #1
 800b532:	607b      	str	r3, [r7, #4]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d005      	beq.n	800b546 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	781b      	ldrb	r3, [r3, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 800b542:	2301      	movs	r3, #1
 800b544:	e000      	b.n	800b548 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 800b546:	2300      	movs	r3, #0
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00a      	beq.n	800b562 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	3301      	adds	r3, #1
 800b550:	60bb      	str	r3, [r7, #8]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	60fb      	str	r3, [r7, #12]
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	781a      	ldrb	r2, [r3, #0]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 800b560:	e7e5      	b.n	800b52e <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 800b562:	697b      	ldr	r3, [r7, #20]
}
 800b564:	4618      	mov	r0, r3
 800b566:	371c      	adds	r7, #28
 800b568:	46bd      	mov	sp, r7
 800b56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56e:	4770      	bx	lr

0800b570 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	781b      	ldrb	r3, [r3, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d101      	bne.n	800b586 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	e01b      	b.n	800b5be <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d016      	beq.n	800b5bc <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800b58e:	6838      	ldr	r0, [r7, #0]
 800b590:	f7ff ff6e 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f7ff ff85 	bl	800b4aa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	bf0c      	ite	eq
 800b5a6:	2301      	moveq	r3, #1
 800b5a8:	2300      	movne	r3, #0
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	e004      	b.n	800b5be <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	607b      	str	r3, [r7, #4]
 800b5ba:	e7e4      	b.n	800b586 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b082      	sub	sp, #8
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 800b5d0:	79fb      	ldrb	r3, [r7, #7]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fed9 	bl	800c38a <_ZN12SimpleString7isUpperEc>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <_ZN12SimpleString7ToLowerEc+0x20>
 800b5de:	79fb      	ldrb	r3, [r7, #7]
 800b5e0:	3320      	adds	r3, #32
 800b5e2:	b2db      	uxtb	r3, r3
 800b5e4:	e000      	b.n	800b5e8 <_ZN12SimpleString7ToLowerEc+0x22>
 800b5e6:	79fb      	ldrb	r3, [r7, #7]
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3708      	adds	r7, #8
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bd80      	pop	{r7, pc}

0800b5f0 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	613b      	str	r3, [r7, #16]

    while (n--)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	1e5a      	subs	r2, r3, #1
 800b608:	607a      	str	r2, [r7, #4]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	bf14      	ite	ne
 800b60e:	2301      	movne	r3, #1
 800b610:	2300      	moveq	r3, #0
 800b612:	b2db      	uxtb	r3, r3
 800b614:	2b00      	cmp	r3, #0
 800b616:	d013      	beq.n	800b640 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	781a      	ldrb	r2, [r3, #0]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	429a      	cmp	r2, r3
 800b622:	d006      	beq.n	800b632 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	1ad3      	subs	r3, r2, r3
 800b630:	e007      	b.n	800b642 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800b632:	697b      	ldr	r3, [r7, #20]
 800b634:	3301      	adds	r3, #1
 800b636:	617b      	str	r3, [r7, #20]
            ++p2;
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	3301      	adds	r3, #1
 800b63c:	613b      	str	r3, [r7, #16]
    while (n--)
 800b63e:	e7e1      	b.n	800b604 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	371c      	adds	r7, #28
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00d      	beq.n	800b67c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6818      	ldr	r0, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6859      	ldr	r1, [r3, #4]
 800b668:	23ee      	movs	r3, #238	; 0xee
 800b66a:	4a06      	ldr	r2, [pc, #24]	; (800b684 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800b66c:	f7ff fe3a 	bl	800b2e4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2200      	movs	r2, #0
 800b67a:	605a      	str	r2, [r3, #4]
    }
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	08022c68 	.word	0x08022c68

0800b688 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b082      	sub	sp, #8
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f7ff ffdd 	bl	800b650 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff fe37 	bl	800b310 <_ZNK12SimpleString14getEmptyStringEv>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	601a      	str	r2, [r3, #0]
}
 800b6a8:	bf00      	nop
 800b6aa:	3708      	adds	r7, #8
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff ffc7 	bl	800b650 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	68b8      	ldr	r0, [r7, #8]
 800b6d0:	f000 fe12 	bl	800c2f8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	601a      	str	r2, [r3, #0]
}
 800b6da:	bf00      	nop
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7ff ffae 	bl	800b650 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f240 1209 	movw	r2, #265	; 0x109
 800b702:	4907      	ldr	r1, [pc, #28]	; (800b720 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff fdd9 	bl	800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b70a:	4602      	mov	r2, r0
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2200      	movs	r2, #0
 800b716:	701a      	strb	r2, [r3, #0]
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}
 800b720:	08022c68 	.word	0x08022c68

0800b724 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	60b9      	str	r1, [r7, #8]
 800b72e:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7ff ff8d 	bl	800b650 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	601a      	str	r2, [r3, #0]
}
 800b742:	bf00      	nop
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800b74a:	b590      	push	{r4, r7, lr}
 800b74c:	b083      	sub	sp, #12
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681c      	ldr	r4, [r3, #0]
 800b758:	6838      	ldr	r0, [r7, #0]
 800b75a:	f000 fbc1 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800b75e:	4603      	mov	r3, r0
 800b760:	3301      	adds	r3, #1
 800b762:	461a      	mov	r2, r3
 800b764:	4621      	mov	r1, r4
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7ff ffa2 	bl	800b6b0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	bd90      	pop	{r4, r7, pc}

0800b774 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800b77e:	6838      	ldr	r0, [r7, #0]
 800b780:	f7ff fe76 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800b784:	4603      	mov	r3, r0
 800b786:	3301      	adds	r3, #1
 800b788:	461a      	mov	r2, r3
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff ff8f 	bl	800b6b0 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800b79a:	b480      	push	{r7}
 800b79c:	b083      	sub	sp, #12
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	6078      	str	r0, [r7, #4]
    return buffer_;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	370c      	adds	r7, #12
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d103      	bne.n	800b7d6 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff ff5a 	bl	800b688 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800b7d4:	e003      	b.n	800b7de <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff ffcb 	bl	800b774 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3708      	adds	r7, #8
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b088      	sub	sp, #32
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	60f8      	str	r0, [r7, #12]
 800b7f0:	60b9      	str	r1, [r7, #8]
 800b7f2:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	601a      	str	r2, [r3, #0]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800b800:	68b8      	ldr	r0, [r7, #8]
 800b802:	f7ff fe35 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800b806:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	fb02 f303 	mul.w	r3, r2, r3
 800b810:	3301      	adds	r3, #1
 800b812:	4619      	mov	r1, r3
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff ff65 	bl	800b6e4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b820:	2300      	movs	r3, #0
 800b822:	61bb      	str	r3, [r7, #24]
 800b824:	69ba      	ldr	r2, [r7, #24]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d20e      	bcs.n	800b84a <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	3301      	adds	r3, #1
 800b830:	461a      	mov	r2, r3
 800b832:	68b9      	ldr	r1, [r7, #8]
 800b834:	69f8      	ldr	r0, [r7, #28]
 800b836:	f7ff fe66 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800b83a:	69fa      	ldr	r2, [r7, #28]
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	4413      	add	r3, r2
 800b840:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	3301      	adds	r3, #1
 800b846:	61bb      	str	r3, [r7, #24]
 800b848:	e7ec      	b.n	800b824 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800b84a:	69fb      	ldr	r3, [r7, #28]
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]
}
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4618      	mov	r0, r3
 800b854:	3720      	adds	r7, #32
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b082      	sub	sp, #8
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2200      	movs	r2, #0
 800b868:	601a      	str	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800b870:	6838      	ldr	r0, [r7, #0]
 800b872:	f7ff ff92 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b876:	4603      	mov	r3, r0
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff ff7a 	bl	800b774 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b082      	sub	sp, #8
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d003      	beq.n	800b8a4 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800b89c:	6839      	ldr	r1, [r7, #0]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	f7ff ff53 	bl	800b74a <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800b8a4:	687b      	ldr	r3, [r7, #4]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3708      	adds	r7, #8
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800b8ae:	b590      	push	{r4, r7, lr}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff ff6e 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	6838      	ldr	r0, [r7, #0]
 800b8c2:	f7ff ff6a 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	4619      	mov	r1, r3
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f7ff fe50 	bl	800b570 <_ZN12SimpleString6StrStrEPKcS1_>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bf14      	ite	ne
 800b8d6:	2301      	movne	r3, #1
 800b8d8:	2300      	moveq	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd90      	pop	{r4, r7, pc}

0800b8e4 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800b8e4:	b590      	push	{r4, r7, lr}
 800b8e6:	b087      	sub	sp, #28
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800b8ee:	f107 0308 	add.w	r3, r7, #8
 800b8f2:	6879      	ldr	r1, [r7, #4]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fabb 	bl	800be70 <_ZNK12SimpleString9lowerCaseEv>
 800b8fa:	f107 0310 	add.w	r3, r7, #16
 800b8fe:	6839      	ldr	r1, [r7, #0]
 800b900:	4618      	mov	r0, r3
 800b902:	f000 fab5 	bl	800be70 <_ZNK12SimpleString9lowerCaseEv>
 800b906:	f107 0210 	add.w	r2, r7, #16
 800b90a:	f107 0308 	add.w	r3, r7, #8
 800b90e:	4611      	mov	r1, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7ff ffcc 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 800b916:	4603      	mov	r3, r0
 800b918:	461c      	mov	r4, r3
 800b91a:	bf00      	nop
 800b91c:	f107 0310 	add.w	r3, r7, #16
 800b920:	4618      	mov	r0, r3
 800b922:	f000 fafe 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800b926:	f107 0308 	add.w	r3, r7, #8
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 faf9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800b930:	4623      	mov	r3, r4
}
 800b932:	4618      	mov	r0, r3
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	bd90      	pop	{r4, r7, pc}

0800b93a <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800b93a:	b590      	push	{r4, r7, lr}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800b944:	6838      	ldr	r0, [r7, #0]
 800b946:	f000 facb 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800b94a:	4603      	mov	r3, r0
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	bf0c      	ite	eq
 800b950:	2301      	moveq	r3, #1
 800b952:	2300      	movne	r3, #0
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <_ZNK12SimpleString10startsWithERKS_+0x24>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e022      	b.n	800b9a4 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 fabe 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	bf0c      	ite	eq
 800b96a:	2301      	moveq	r3, #1
 800b96c:	2300      	movne	r3, #0
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d001      	beq.n	800b978 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800b974:	2300      	movs	r3, #0
 800b976:	e015      	b.n	800b9a4 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7ff ff0e 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b97e:	4604      	mov	r4, r0
 800b980:	6838      	ldr	r0, [r7, #0]
 800b982:	f7ff ff0a 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b986:	4603      	mov	r3, r0
 800b988:	4619      	mov	r1, r3
 800b98a:	4620      	mov	r0, r4
 800b98c:	f7ff fdf0 	bl	800b570 <_ZN12SimpleString6StrStrEPKcS1_>
 800b990:	4604      	mov	r4, r0
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f7ff ff01 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b998:	4603      	mov	r3, r0
 800b99a:	429c      	cmp	r4, r3
 800b99c:	bf0c      	ite	eq
 800b99e:	2301      	moveq	r3, #1
 800b9a0:	2300      	movne	r3, #0
 800b9a2:	b2db      	uxtb	r3, r3
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd90      	pop	{r4, r7, pc}

0800b9ac <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800b9ac:	b590      	push	{r4, r7, lr}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa92 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800b9bc:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800b9be:	6838      	ldr	r0, [r7, #0]
 800b9c0:	f000 fa8e 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800b9c4:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d101      	bne.n	800b9d0 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e020      	b.n	800ba12 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d101      	bne.n	800b9da <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	e01b      	b.n	800ba12 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d201      	bcs.n	800b9e6 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	e015      	b.n	800ba12 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f7ff fed7 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b9ec:	4601      	mov	r1, r0
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	18cc      	adds	r4, r1, r3
 800b9f6:	6838      	ldr	r0, [r7, #0]
 800b9f8:	f7ff fecf 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4620      	mov	r0, r4
 800ba02:	f7ff fd13 	bl	800b42c <_ZN12SimpleString6StrCmpEPKcS1_>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	bf0c      	ite	eq
 800ba0c:	2301      	moveq	r3, #1
 800ba0e:	2300      	movne	r3, #0
 800ba10:	b2db      	uxtb	r3, r3
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd90      	pop	{r4, r7, pc}

0800ba1a <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b086      	sub	sp, #24
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff feb6 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800ba2e:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800ba30:	2300      	movs	r3, #0
 800ba32:	60fb      	str	r3, [r7, #12]
    if (*str){
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d008      	beq.n	800ba4e <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800ba3c:	6838      	ldr	r0, [r7, #0]
 800ba3e:	f7ff feac 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4619      	mov	r1, r3
 800ba46:	6938      	ldr	r0, [r7, #16]
 800ba48:	f7ff fd92 	bl	800b570 <_ZN12SimpleString6StrStrEPKcS1_>
 800ba4c:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d014      	beq.n	800ba80 <_ZNK12SimpleString5countERKS_+0x66>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d011      	beq.n	800ba80 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	613b      	str	r3, [r7, #16]
        str++;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	3301      	adds	r3, #1
 800ba64:	613b      	str	r3, [r7, #16]
        num++;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	3301      	adds	r3, #1
 800ba6a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800ba6c:	6838      	ldr	r0, [r7, #0]
 800ba6e:	f7ff fe94 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800ba72:	4603      	mov	r3, r0
 800ba74:	4619      	mov	r1, r3
 800ba76:	6938      	ldr	r0, [r7, #16]
 800ba78:	f7ff fd7a 	bl	800b570 <_ZN12SimpleString6StrStrEPKcS1_>
 800ba7c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800ba7e:	e7e6      	b.n	800ba4e <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800ba80:	697b      	ldr	r3, [r7, #20]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3718      	adds	r7, #24
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800ba8a:	b590      	push	{r4, r7, lr}
 800ba8c:	b091      	sub	sp, #68	; 0x44
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800ba96:	68b9      	ldr	r1, [r7, #8]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f7ff ffbe 	bl	800ba1a <_ZNK12SimpleString5countERKS_>
 800ba9e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff ff82 	bl	800b9ac <_ZNK12SimpleString8endsWithERKS_>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800baae:	2300      	movs	r3, #0
 800bab0:	e000      	b.n	800bab4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800bab2:	2301      	movs	r3, #1
 800bab4:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800bab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baba:	4413      	add	r3, r2
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f001 f95c 	bl	800cd7c <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff fe68 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800baca:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800bacc:	2300      	movs	r3, #0
 800bace:	63bb      	str	r3, [r7, #56]	; 0x38
 800bad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bad4:	429a      	cmp	r2, r3
 800bad6:	d235      	bcs.n	800bb44 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800bad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bada:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800badc:	68b8      	ldr	r0, [r7, #8]
 800bade:	f7ff fe5c 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bae2:	4603      	mov	r3, r0
 800bae4:	4619      	mov	r1, r3
 800bae6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bae8:	f7ff fd42 	bl	800b570 <_ZN12SimpleString6StrStrEPKcS1_>
 800baec:	4603      	mov	r3, r0
 800baee:	3301      	adds	r3, #1
 800baf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800baf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 f9db 	bl	800ceb0 <_ZN22SimpleStringCollectionixEj>
 800bafa:	4604      	mov	r4, r0
 800bafc:	f107 031c 	add.w	r3, r7, #28
 800bb00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7ff fe55 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800bb08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	f107 0014 	add.w	r0, r7, #20
 800bb12:	f107 011c 	add.w	r1, r7, #28
 800bb16:	2200      	movs	r2, #0
 800bb18:	f000 fb0c 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 800bb1c:	f107 0314 	add.w	r3, r7, #20
 800bb20:	4619      	mov	r1, r3
 800bb22:	4620      	mov	r0, r4
 800bb24:	f7ff feb1 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800bb28:	f107 0314 	add.w	r3, r7, #20
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f000 f9f8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800bb32:	f107 031c 	add.w	r3, r7, #28
 800bb36:	4618      	mov	r0, r3
 800bb38:	f000 f9f3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800bb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3e:	3301      	adds	r3, #1
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb42:	e7c5      	b.n	800bad0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d015      	beq.n	800bb76 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800bb4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f001 f9af 	bl	800ceb0 <_ZN22SimpleStringCollectionixEj>
 800bb52:	4604      	mov	r4, r0
 800bb54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fe29 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800bb60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb64:	4619      	mov	r1, r3
 800bb66:	4620      	mov	r0, r4
 800bb68:	f7ff fe8f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800bb6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 f9d6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
}
 800bb76:	bf00      	nop
 800bb78:	3744      	adds	r7, #68	; 0x44
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd90      	pop	{r4, r7, pc}

0800bb7e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	460b      	mov	r3, r1
 800bb88:	70fb      	strb	r3, [r7, #3]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 f9a6 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800bb94:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800bb96:	2300      	movs	r3, #0
 800bb98:	60fb      	str	r3, [r7, #12]
 800bb9a:	68fa      	ldr	r2, [r7, #12]
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d218      	bcs.n	800bbd4 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f7ff fdf9 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	78fa      	ldrb	r2, [r7, #3]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	bf0c      	ite	eq
 800bbb6:	2301      	moveq	r3, #1
 800bbb8:	2300      	movne	r3, #0
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d005      	beq.n	800bbcc <_ZN12SimpleString7replaceEcc+0x4e>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	78ba      	ldrb	r2, [r7, #2]
 800bbca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e7e2      	b.n	800bb9a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800bbd4:	bf00      	nop
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08e      	sub	sp, #56	; 0x38
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800bbe8:	f107 0310 	add.w	r3, r7, #16
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7ff fddf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800bbf4:	f107 0310 	add.w	r3, r7, #16
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	f7ff ff0d 	bl	800ba1a <_ZNK12SimpleString5countERKS_>
 800bc00:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bc02:	f107 0310 	add.w	r3, r7, #16
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f98b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800bc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d071      	beq.n	800bcf6 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 f964 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800bc18:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800bc1a:	68b8      	ldr	r0, [r7, #8]
 800bc1c:	f7ff fc28 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800bc20:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7ff fc24 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800bc28:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc2e:	fb02 f203 	mul.w	r2, r2, r3
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	441a      	add	r2, r3
 800bc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc3a:	fb01 f303 	mul.w	r3, r1, r3
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	3301      	adds	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	2b01      	cmp	r3, #1
 800bc48:	d951      	bls.n	800bcee <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800bc4a:	f240 129d 	movw	r2, #413	; 0x19d
 800bc4e:	492c      	ldr	r1, [pc, #176]	; (800bd00 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800bc50:	69f8      	ldr	r0, [r7, #28]
 800bc52:	f7ff fb33 	bl	800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>
 800bc56:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800bc58:	2300      	movs	r3, #0
 800bc5a:	637b      	str	r3, [r7, #52]	; 0x34
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	633b      	str	r3, [r7, #48]	; 0x30
 800bc60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d236      	bcs.n	800bcd6 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7ff fd96 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc72:	4413      	add	r3, r2
 800bc74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc76:	68b9      	ldr	r1, [r7, #8]
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f7ff fc16 	bl	800b4aa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	bf0c      	ite	eq
 800bc84:	2301      	moveq	r3, #1
 800bc86:	2300      	movne	r3, #0
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d011      	beq.n	800bcb2 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	18d0      	adds	r0, r2, r3
 800bc94:	6a3b      	ldr	r3, [r7, #32]
 800bc96:	3301      	adds	r3, #1
 800bc98:	461a      	mov	r2, r3
 800bc9a:	6879      	ldr	r1, [r7, #4]
 800bc9c:	f7ff fc33 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800bca0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	4413      	add	r3, r2
 800bca6:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800bca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcac:	4413      	add	r3, r2
 800bcae:	637b      	str	r3, [r7, #52]	; 0x34
 800bcb0:	e7d6      	b.n	800bc60 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	f7ff fd71 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcbc:	441a      	add	r2, r3
 800bcbe:	69b9      	ldr	r1, [r7, #24]
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	440b      	add	r3, r1
 800bcc4:	7812      	ldrb	r2, [r2, #0]
 800bcc6:	701a      	strb	r2, [r3, #0]
                j++;
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	3301      	adds	r3, #1
 800bccc:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800bcce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800bcd4:	e7c4      	b.n	800bc60 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	4413      	add	r3, r2
 800bcde:	2200      	movs	r2, #0
 800bce0:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800bce2:	69fa      	ldr	r2, [r7, #28]
 800bce4:	69b9      	ldr	r1, [r7, #24]
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7ff fd1c 	bl	800b724 <_ZN12SimpleString19setInternalBufferToEPcj>
 800bcec:	e004      	b.n	800bcf8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff fcca 	bl	800b688 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800bcf4:	e000      	b.n	800bcf8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800bcf6:	bf00      	nop
}
 800bcf8:	3738      	adds	r7, #56	; 0x38
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	08022c68 	.word	0x08022c68

0800bd04 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b089      	sub	sp, #36	; 0x24
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800bd0e:	493b      	ldr	r1, [pc, #236]	; (800bdfc <_ZNK12SimpleString9printableEv+0xf8>)
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f7ff fd4e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800bd16:	6838      	ldr	r0, [r7, #0]
 800bd18:	f000 f876 	bl	800be08 <_ZNK12SimpleString16getPrintableSizeEv>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	3301      	adds	r3, #1
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fcde 	bl	800b6e4 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800bd28:	6838      	ldr	r0, [r7, #0]
 800bd2a:	f000 f8d9 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800bd2e:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800bd30:	2300      	movs	r3, #0
 800bd32:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800bd34:	2300      	movs	r3, #0
 800bd36:	61bb      	str	r3, [r7, #24]
 800bd38:	69ba      	ldr	r2, [r7, #24]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d252      	bcs.n	800bde6 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	69bb      	ldr	r3, [r7, #24]
 800bd46:	4413      	add	r3, r2
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800bd4c:	7cfb      	ldrb	r3, [r7, #19]
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f000 fb43 	bl	800c3da <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d012      	beq.n	800bd80 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681a      	ldr	r2, [r3, #0]
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	18d0      	adds	r0, r2, r3
 800bd62:	7cfb      	ldrb	r3, [r7, #19]
 800bd64:	3b07      	subs	r3, #7
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	461a      	mov	r2, r3
 800bd6a:	4b25      	ldr	r3, [pc, #148]	; (800be00 <_ZNK12SimpleString9printableEv+0xfc>)
 800bd6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd70:	2202      	movs	r2, #2
 800bd72:	4619      	mov	r1, r3
 800bd74:	f7ff fbc7 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	3302      	adds	r3, #2
 800bd7c:	61fb      	str	r3, [r7, #28]
 800bd7e:	e02e      	b.n	800bdde <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800bd80:	7cfb      	ldrb	r3, [r7, #19]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f000 fb15 	bl	800c3b2 <_ZN12SimpleString9isControlEc>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d01e      	beq.n	800bdcc <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800bd8e:	7cfa      	ldrb	r2, [r7, #19]
 800bd90:	f107 0308 	add.w	r3, r7, #8
 800bd94:	491b      	ldr	r1, [pc, #108]	; (800be04 <_ZNK12SimpleString9printableEv+0x100>)
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fdca 	bl	800c930 <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	18d4      	adds	r4, r2, r3
 800bda4:	f107 0308 	add.w	r3, r7, #8
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f000 f88d 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2204      	movs	r2, #4
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	f7ff fba6 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800bdc0:	f107 0308 	add.w	r3, r7, #8
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f000 f8ac 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800bdca:	e008      	b.n	800bdde <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	7cfa      	ldrb	r2, [r7, #19]
 800bdd6:	701a      	strb	r2, [r3, #0]
            j++;
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	3301      	adds	r3, #1
 800bddc:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	3301      	adds	r3, #1
 800bde2:	61bb      	str	r3, [r7, #24]
 800bde4:	e7a8      	b.n	800bd38 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	4413      	add	r3, r2
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]

    return result;
 800bdf2:	bf00      	nop
}
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	3724      	adds	r7, #36	; 0x24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd90      	pop	{r4, r7, pc}
 800bdfc:	08022d28 	.word	0x08022d28
 800be00:	20000070 	.word	0x20000070
 800be04:	08022d2c 	.word	0x08022d2c

0800be08 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800be10:	6878      	ldr	r0, [r7, #4]
 800be12:	f000 f865 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800be16:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800be1c:	2300      	movs	r3, #0
 800be1e:	613b      	str	r3, [r7, #16]
 800be20:	693a      	ldr	r2, [r7, #16]
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	429a      	cmp	r2, r3
 800be26:	d21e      	bcs.n	800be66 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681a      	ldr	r2, [r3, #0]
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	4413      	add	r3, r2
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	4618      	mov	r0, r3
 800be38:	f000 facf 	bl	800c3da <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	3301      	adds	r3, #1
 800be46:	617b      	str	r3, [r7, #20]
 800be48:	e009      	b.n	800be5e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800be4a:	7afb      	ldrb	r3, [r7, #11]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fab0 	bl	800c3b2 <_ZN12SimpleString9isControlEc>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	3303      	adds	r3, #3
 800be5c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3301      	adds	r3, #1
 800be62:	613b      	str	r3, [r7, #16]
 800be64:	e7dc      	b.n	800be20 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800be66:	697b      	ldr	r3, [r7, #20]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3718      	adds	r7, #24
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800be70:	b590      	push	{r4, r7, lr}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff fcec 	bl	800b85a <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 f82c 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800be88:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800be8a:	2300      	movs	r3, #0
 800be8c:	60fb      	str	r3, [r7, #12]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	429a      	cmp	r2, r3
 800be94:	d213      	bcs.n	800bebe <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fc7f 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800be9c:	4602      	mov	r2, r0
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	4413      	add	r3, r2
 800bea2:	7819      	ldrb	r1, [r3, #0]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	18d4      	adds	r4, r2, r3
 800beac:	4608      	mov	r0, r1
 800beae:	f7ff fb8a 	bl	800b5c6 <_ZN12SimpleString7ToLowerEc>
 800beb2:	4603      	mov	r3, r0
 800beb4:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	e7e7      	b.n	800be8e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800bebe:	bf00      	nop
}
 800bec0:	6878      	ldr	r0, [r7, #4]
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd90      	pop	{r4, r7, pc}

0800bec8 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff fc62 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bed6:	4603      	mov	r3, r0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3708      	adds	r7, #8
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff fc56 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800beee:	4603      	mov	r3, r0
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff fabd 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800bef6:	4603      	mov	r3, r0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3708      	adds	r7, #8
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f7ff ffe9 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bf0c      	ite	eq
 800bf14:	2301      	moveq	r3, #1
 800bf16:	2300      	movne	r3, #0
 800bf18:	b2db      	uxtb	r3, r3
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fb90 	bl	800b650 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800bf3a:	b590      	push	{r4, r7, lr}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f7ff ffbf 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	6838      	ldr	r0, [r7, #0]
 800bf4e:	f7ff ffbb 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800bf52:	4603      	mov	r3, r0
 800bf54:	4619      	mov	r1, r3
 800bf56:	4620      	mov	r0, r4
 800bf58:	f7ff fa68 	bl	800b42c <_ZN12SimpleString6StrCmpEPKcS1_>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	bf0c      	ite	eq
 800bf62:	2301      	moveq	r3, #1
 800bf64:	2300      	movne	r3, #0
 800bf66:	b2db      	uxtb	r3, r3
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	370c      	adds	r7, #12
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	bd90      	pop	{r4, r7, pc}

0800bf70 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800bf70:	b590      	push	{r4, r7, lr}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800bf7a:	f107 0308 	add.w	r3, r7, #8
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7ff ff75 	bl	800be70 <_ZNK12SimpleString9lowerCaseEv>
 800bf86:	f107 0310 	add.w	r3, r7, #16
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7ff ff6f 	bl	800be70 <_ZNK12SimpleString9lowerCaseEv>
 800bf92:	f107 0210 	add.w	r2, r7, #16
 800bf96:	f107 0308 	add.w	r3, r7, #8
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7ff ffcc 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	461c      	mov	r4, r3
 800bfa6:	f107 0310 	add.w	r3, r7, #16
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7ff ffb9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800bfb0:	f107 0308 	add.w	r3, r7, #8
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff ffb4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800bfba:	4623      	mov	r3, r4
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	371c      	adds	r7, #28
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd90      	pop	{r4, r7, pc}

0800bfc4 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800bfce:	6839      	ldr	r1, [r7, #0]
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f7ff ffb2 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f083 0301 	eor.w	r3, r3, #1
 800bfdc:	b2db      	uxtb	r3, r3
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}

0800bfe6 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	60f8      	str	r0, [r7, #12]
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800bff2:	68b8      	ldr	r0, [r7, #8]
 800bff4:	f7ff fbd1 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800bff8:	4603      	mov	r3, r0
 800bffa:	4619      	mov	r1, r3
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fbd8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f7ff fbc9 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800c008:	4603      	mov	r3, r0
 800c00a:	4619      	mov	r1, r3
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 f817 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    return t;
 800c012:	bf00      	nop
}
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800c026:	6838      	ldr	r0, [r7, #0]
 800c028:	f7ff fbb7 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800c02c:	4603      	mov	r3, r0
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 f805 	bl	800c040 <_ZN12SimpleStringpLEPKc>
 800c036:	4603      	mov	r3, r0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3708      	adds	r7, #8
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}

0800c040 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b086      	sub	sp, #24
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f7ff ff48 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c050:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800c052:	6838      	ldr	r0, [r7, #0]
 800c054:	f7ff fa0c 	bl	800b470 <_ZN12SimpleString6StrLenEPKc>
 800c058:	4603      	mov	r3, r0
 800c05a:	3301      	adds	r3, #1
 800c05c:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4413      	add	r3, r2
 800c064:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff fb97 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800c06c:	4603      	mov	r3, r0
 800c06e:	68f9      	ldr	r1, [r7, #12]
 800c070:	4618      	mov	r0, r3
 800c072:	f000 f941 	bl	800c2f8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800c076:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800c078:	68ba      	ldr	r2, [r7, #8]
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	4413      	add	r3, r2
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff fa3f 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	68b9      	ldr	r1, [r7, #8]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7ff fb49 	bl	800b724 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800c092:	687b      	ldr	r3, [r7, #4]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3718      	adds	r7, #24
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800c09c:	b590      	push	{r4, r7, lr}
 800c09e:	b08b      	sub	sp, #44	; 0x2c
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7ff ff18 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	68b8      	ldr	r0, [r7, #8]
 800c0b4:	f7ff ff14 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	429c      	cmp	r4, r3
 800c0bc:	bf8c      	ite	hi
 800c0be:	2301      	movhi	r3, #1
 800c0c0:	2300      	movls	r3, #0
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d006      	beq.n	800c0d6 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800c0c8:	79fb      	ldrb	r3, [r7, #7]
 800c0ca:	461a      	mov	r2, r3
 800c0cc:	68f9      	ldr	r1, [r7, #12]
 800c0ce:	68b8      	ldr	r0, [r7, #8]
 800c0d0:	f7ff ffe4 	bl	800c09c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800c0d4:	e02b      	b.n	800c12e <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800c0d6:	79fb      	ldrb	r3, [r7, #7]
 800c0d8:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800c0de:	68b8      	ldr	r0, [r7, #8]
 800c0e0:	f7ff fefe 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c0e4:	4604      	mov	r4, r0
 800c0e6:	68f8      	ldr	r0, [r7, #12]
 800c0e8:	f7ff fefa 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	1ae2      	subs	r2, r4, r3
 800c0f0:	f107 0114 	add.w	r1, r7, #20
 800c0f4:	f107 0320 	add.w	r3, r7, #32
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fb75 	bl	800b7e8 <_ZN12SimpleStringC1EPKcj>
 800c0fe:	f107 0318 	add.w	r3, r7, #24
 800c102:	f107 0120 	add.w	r1, r7, #32
 800c106:	68fa      	ldr	r2, [r7, #12]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff ff6c 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800c10e:	f107 0318 	add.w	r3, r7, #24
 800c112:	4619      	mov	r1, r3
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f7ff fbb8 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800c11a:	f107 0318 	add.w	r3, r7, #24
 800c11e:	4618      	mov	r0, r3
 800c120:	f7ff feff 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c124:	f107 0320 	add.w	r3, r7, #32
 800c128:	4618      	mov	r0, r3
 800c12a:	f7ff fefa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800c12e:	372c      	adds	r7, #44	; 0x2c
 800c130:	46bd      	mov	sp, r7
 800c132:	bd90      	pop	{r4, r7, pc}

0800c134 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b086      	sub	sp, #24
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800c142:	68b8      	ldr	r0, [r7, #8]
 800c144:	f7ff fecc 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c148:	4603      	mov	r3, r0
 800c14a:	3b01      	subs	r3, #1
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	429a      	cmp	r2, r3
 800c150:	bf8c      	ite	hi
 800c152:	2301      	movhi	r3, #1
 800c154:	2300      	movls	r3, #0
 800c156:	b2db      	uxtb	r3, r3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d004      	beq.n	800c166 <_ZNK12SimpleString9subStringEjj+0x32>
 800c15c:	4919      	ldr	r1, [pc, #100]	; (800c1c4 <_ZNK12SimpleString9subStringEjj+0x90>)
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff fb27 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c164:	e029      	b.n	800c1ba <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800c166:	68b8      	ldr	r0, [r7, #8]
 800c168:	f7ff fb17 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800c16c:	4602      	mov	r2, r0
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	441a      	add	r2, r3
 800c172:	f107 0310 	add.w	r3, r7, #16
 800c176:	4611      	mov	r1, r2
 800c178:	4618      	mov	r0, r3
 800c17a:	f7ff fb1a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800c17e:	f107 0310 	add.w	r3, r7, #16
 800c182:	4618      	mov	r0, r3
 800c184:	f7ff feac 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c188:	4602      	mov	r2, r0
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	4293      	cmp	r3, r2
 800c18e:	bf34      	ite	cc
 800c190:	2301      	movcc	r3, #1
 800c192:	2300      	movcs	r3, #0
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b00      	cmp	r3, #0
 800c198:	d004      	beq.n	800c1a4 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	4413      	add	r3, r2
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	701a      	strb	r2, [r3, #0]

    return newString;
 800c1a4:	f107 0310 	add.w	r3, r7, #16
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f7ff fb55 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800c1b0:	f107 0310 	add.w	r3, r7, #16
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff feb4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800c1ba:	68f8      	ldr	r0, [r7, #12]
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	08022d28 	.word	0x08022d28

0800c1c8 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b084      	sub	sp, #16
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	f7ff ffa9 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
}
 800c1e2:	68f8      	ldr	r0, [r7, #12]
 800c1e4:	3710      	adds	r7, #16
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
 800c1f2:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f7ff fad0 	bl	800b79a <_ZNK12SimpleString9getBufferEv>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	4413      	add	r3, r2
 800c200:	781b      	ldrb	r3, [r3, #0]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b082      	sub	sp, #8
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	460b      	mov	r3, r1
 800c214:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800c216:	78fb      	ldrb	r3, [r7, #3]
 800c218:	461a      	mov	r2, r3
 800c21a:	2100      	movs	r1, #0
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f805 	bl	800c22c <_ZNK12SimpleString8findFromEjc>
 800c222:	4603      	mov	r3, r0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b086      	sub	sp, #24
 800c230:	af00      	add	r7, sp, #0
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	4613      	mov	r3, r2
 800c238:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800c23a:	68f8      	ldr	r0, [r7, #12]
 800c23c:	f7ff fe50 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c240:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	617b      	str	r3, [r7, #20]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d213      	bcs.n	800c276 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800c24e:	6979      	ldr	r1, [r7, #20]
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f7ff ffca 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800c256:	4603      	mov	r3, r0
 800c258:	461a      	mov	r2, r3
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	4293      	cmp	r3, r2
 800c25e:	bf0c      	ite	eq
 800c260:	2301      	moveq	r3, #1
 800c262:	2300      	movne	r3, #0
 800c264:	b2db      	uxtb	r3, r3
 800c266:	2b00      	cmp	r3, #0
 800c268:	d001      	beq.n	800c26e <_ZNK12SimpleString8findFromEjc+0x42>
 800c26a:	697b      	ldr	r3, [r7, #20]
 800c26c:	e005      	b.n	800c27a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	3301      	adds	r3, #1
 800c272:	617b      	str	r3, [r7, #20]
 800c274:	e7e7      	b.n	800c246 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800c276:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3718      	adds	r7, #24
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	4611      	mov	r1, r2
 800c290:	461a      	mov	r2, r3
 800c292:	460b      	mov	r3, r1
 800c294:	71fb      	strb	r3, [r7, #7]
 800c296:	4613      	mov	r3, r2
 800c298:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800c29a:	79fb      	ldrb	r3, [r7, #7]
 800c29c:	4619      	mov	r1, r3
 800c29e:	68b8      	ldr	r0, [r7, #8]
 800c2a0:	f7ff ffb3 	bl	800c20a <_ZNK12SimpleString4findEc>
 800c2a4:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d104      	bne.n	800c2b8 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800c2ae:	4911      	ldr	r1, [pc, #68]	; (800c2f4 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f7ff fa7e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c2b6:	e019      	b.n	800c2ec <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800c2b8:	79bb      	ldrb	r3, [r7, #6]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	6979      	ldr	r1, [r7, #20]
 800c2be:	68b8      	ldr	r0, [r7, #8]
 800c2c0:	f7ff ffb4 	bl	800c22c <_ZNK12SimpleString8findFromEjc>
 800c2c4:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d106      	bne.n	800c2dc <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	68b9      	ldr	r1, [r7, #8]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff ff77 	bl	800c1c8 <_ZNK12SimpleString9subStringEj>
 800c2da:	e007      	b.n	800c2ec <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	1ad3      	subs	r3, r2, r3
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	697a      	ldr	r2, [r7, #20]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	f7ff ff24 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
}
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	3718      	adds	r7, #24
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	08022d28 	.word	0x08022d28

0800c2f8 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800c302:	f240 2275 	movw	r2, #629	; 0x275
 800c306:	490a      	ldr	r1, [pc, #40]	; (800c330 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800c308:	6838      	ldr	r0, [r7, #0]
 800c30a:	f7fe ffd7 	bl	800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>
 800c30e:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800c310:	683a      	ldr	r2, [r7, #0]
 800c312:	6879      	ldr	r1, [r7, #4]
 800c314:	68f8      	ldr	r0, [r7, #12]
 800c316:	f7ff f8f6 	bl	800b506 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	68fa      	ldr	r2, [r7, #12]
 800c320:	4413      	add	r3, r2
 800c322:	2200      	movs	r2, #0
 800c324:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800c326:	68fb      	ldr	r3, [r7, #12]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	08022c68 	.word	0x08022c68

0800c334 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	4603      	mov	r3, r0
 800c33c:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800c33e:	79fb      	ldrb	r3, [r7, #7]
 800c340:	2b2f      	cmp	r3, #47	; 0x2f
 800c342:	d904      	bls.n	800c34e <_ZN12SimpleString7isDigitEc+0x1a>
 800c344:	79fb      	ldrb	r3, [r7, #7]
 800c346:	2b39      	cmp	r3, #57	; 0x39
 800c348:	d801      	bhi.n	800c34e <_ZN12SimpleString7isDigitEc+0x1a>
 800c34a:	2301      	movs	r3, #1
 800c34c:	e000      	b.n	800c350 <_ZN12SimpleString7isDigitEc+0x1c>
 800c34e:	2300      	movs	r3, #0
}
 800c350:	4618      	mov	r0, r3
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800c366:	79fb      	ldrb	r3, [r7, #7]
 800c368:	2b20      	cmp	r3, #32
 800c36a:	d005      	beq.n	800c378 <_ZN12SimpleString7isSpaceEc+0x1c>
 800c36c:	79fb      	ldrb	r3, [r7, #7]
 800c36e:	2b08      	cmp	r3, #8
 800c370:	d904      	bls.n	800c37c <_ZN12SimpleString7isSpaceEc+0x20>
 800c372:	79fb      	ldrb	r3, [r7, #7]
 800c374:	2b0d      	cmp	r3, #13
 800c376:	d801      	bhi.n	800c37c <_ZN12SimpleString7isSpaceEc+0x20>
 800c378:	2301      	movs	r3, #1
 800c37a:	e000      	b.n	800c37e <_ZN12SimpleString7isSpaceEc+0x22>
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	370c      	adds	r7, #12
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800c38a:	b480      	push	{r7}
 800c38c:	b083      	sub	sp, #12
 800c38e:	af00      	add	r7, sp, #0
 800c390:	4603      	mov	r3, r0
 800c392:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800c394:	79fb      	ldrb	r3, [r7, #7]
 800c396:	2b40      	cmp	r3, #64	; 0x40
 800c398:	d904      	bls.n	800c3a4 <_ZN12SimpleString7isUpperEc+0x1a>
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	2b5a      	cmp	r3, #90	; 0x5a
 800c39e:	d801      	bhi.n	800c3a4 <_ZN12SimpleString7isUpperEc+0x1a>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <_ZN12SimpleString7isUpperEc+0x1c>
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800c3b2:	b480      	push	{r7}
 800c3b4:	b083      	sub	sp, #12
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800c3bc:	79fb      	ldrb	r3, [r7, #7]
 800c3be:	2b1f      	cmp	r3, #31
 800c3c0:	d902      	bls.n	800c3c8 <_ZN12SimpleString9isControlEc+0x16>
 800c3c2:	79fb      	ldrb	r3, [r7, #7]
 800c3c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c3c6:	d101      	bne.n	800c3cc <_ZN12SimpleString9isControlEc+0x1a>
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	e000      	b.n	800c3ce <_ZN12SimpleString9isControlEc+0x1c>
 800c3cc:	2300      	movs	r3, #0
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	370c      	adds	r7, #12
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d8:	4770      	bx	lr

0800c3da <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800c3da:	b480      	push	{r7}
 800c3dc:	b083      	sub	sp, #12
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	4603      	mov	r3, r0
 800c3e2:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800c3e4:	79fb      	ldrb	r3, [r7, #7]
 800c3e6:	2b06      	cmp	r3, #6
 800c3e8:	d904      	bls.n	800c3f4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800c3ea:	79fb      	ldrb	r3, [r7, #7]
 800c3ec:	2b0d      	cmp	r3, #13
 800c3ee:	d801      	bhi.n	800c3f4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800c3f0:	2301      	movs	r3, #1
 800c3f2:	e000      	b.n	800c3f6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800c3f4:	2300      	movs	r3, #0
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
	...

0800c404 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	460b      	mov	r3, r1
 800c40e:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800c410:	78fb      	ldrb	r3, [r7, #3]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <_Z10StringFromb+0x16>
 800c416:	4a06      	ldr	r2, [pc, #24]	; (800c430 <_Z10StringFromb+0x2c>)
 800c418:	e000      	b.n	800c41c <_Z10StringFromb+0x18>
 800c41a:	4a06      	ldr	r2, [pc, #24]	; (800c434 <_Z10StringFromb+0x30>)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4906      	ldr	r1, [pc, #24]	; (800c438 <_Z10StringFromb+0x34>)
 800c420:	4618      	mov	r0, r3
 800c422:	f000 fa85 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	08022d34 	.word	0x08022d34
 800c434:	08022d3c 	.word	0x08022d3c
 800c438:	08022d44 	.word	0x08022d44

0800c43c <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff f9b2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800c458:	b590      	push	{r4, r7, lr}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800c462:	2400      	movs	r4, #0
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d00e      	beq.n	800c488 <_Z25PrintableStringFromOrNullPKc+0x30>
 800c46a:	f107 0308 	add.w	r3, r7, #8
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f7ff ffe3 	bl	800c43c <_Z10StringFromPKc>
 800c476:	2401      	movs	r4, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f107 0208 	add.w	r2, r7, #8
 800c47e:	4611      	mov	r1, r2
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fc3f 	bl	800bd04 <_ZNK12SimpleString9printableEv>
 800c486:	e004      	b.n	800c492 <_Z25PrintableStringFromOrNullPKc+0x3a>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4908      	ldr	r1, [pc, #32]	; (800c4ac <_Z25PrintableStringFromOrNullPKc+0x54>)
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7ff ffd5 	bl	800c43c <_Z10StringFromPKc>
 800c492:	2c00      	cmp	r4, #0
 800c494:	d004      	beq.n	800c4a0 <_Z25PrintableStringFromOrNullPKc+0x48>
 800c496:	f107 0308 	add.w	r3, r7, #8
 800c49a:	4618      	mov	r0, r3
 800c49c:	f7ff fd41 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c4a0:	bf00      	nop
}
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd90      	pop	{r4, r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	08022d48 	.word	0x08022d48

0800c4b0 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	683a      	ldr	r2, [r7, #0]
 800c4be:	4904      	ldr	r1, [pc, #16]	; (800c4d0 <_Z10StringFromi+0x20>)
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f000 fa35 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	08022d50 	.word	0x08022d50

0800c4d4 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	4904      	ldr	r1, [pc, #16]	; (800c4f4 <_Z10StringFroml+0x20>)
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f000 fa23 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	3708      	adds	r7, #8
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	08022d54 	.word	0x08022d54

0800c4f8 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c502:	f107 0308 	add.w	r3, r7, #8
 800c506:	4910      	ldr	r1, [pc, #64]	; (800c548 <_Z10StringFromPKv+0x50>)
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff f952 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c50e:	f107 0310 	add.w	r3, r7, #16
 800c512:	6839      	ldr	r1, [r7, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	f000 f9a1 	bl	800c85c <_Z13HexStringFromPKv>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f107 0210 	add.w	r2, r7, #16
 800c520:	f107 0108 	add.w	r1, r7, #8
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff fd5e 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800c52a:	f107 0310 	add.w	r3, r7, #16
 800c52e:	4618      	mov	r0, r3
 800c530:	f7ff fcf7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c534:	f107 0308 	add.w	r3, r7, #8
 800c538:	4618      	mov	r0, r3
 800c53a:	f7ff fcf2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c53e:	bf00      	nop
}
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	08022d58 	.word	0x08022d58

0800c54c <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b086      	sub	sp, #24
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800c556:	f107 0308 	add.w	r3, r7, #8
 800c55a:	4910      	ldr	r1, [pc, #64]	; (800c59c <_Z10StringFromPFvvE+0x50>)
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7ff f928 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c562:	f107 0310 	add.w	r3, r7, #16
 800c566:	6839      	ldr	r1, [r7, #0]
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 f98b 	bl	800c884 <_Z13HexStringFromPFvvE>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f107 0210 	add.w	r2, r7, #16
 800c574:	f107 0108 	add.w	r1, r7, #8
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff fd34 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800c57e:	f107 0310 	add.w	r3, r7, #16
 800c582:	4618      	mov	r0, r3
 800c584:	f7ff fccd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c588:	f107 0308 	add.w	r3, r7, #8
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7ff fcc8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c592:	bf00      	nop
}
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	08022d58 	.word	0x08022d58

0800c5a0 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800c5a0:	b580      	push	{r7, lr}
 800c5a2:	b082      	sub	sp, #8
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	683a      	ldr	r2, [r7, #0]
 800c5ae:	4904      	ldr	r1, [pc, #16]	; (800c5c0 <_Z13HexStringFroml+0x20>)
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	f000 f9bd 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	3708      	adds	r7, #8
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	08022d5c 	.word	0x08022d5c

0800c5c4 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	4904      	ldr	r1, [pc, #16]	; (800c5e4 <_Z13HexStringFromi+0x20>)
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f000 f9ab 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	3708      	adds	r7, #8
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
 800c5e2:	bf00      	nop
 800c5e4:	08022d60 	.word	0x08022d60

0800c5e8 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b086      	sub	sp, #24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800c5f4:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4912      	ldr	r1, [pc, #72]	; (800c644 <_Z13HexStringFroma+0x5c>)
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f000 f997 	bl	800c930 <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800c602:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c606:	2b00      	cmp	r3, #0
 800c608:	da16      	bge.n	800c638 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f7ff fc68 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800c610:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	1e9a      	subs	r2, r3, #2
 800c616:	f107 030c 	add.w	r3, r7, #12
 800c61a:	6879      	ldr	r1, [r7, #4]
 800c61c:	4618      	mov	r0, r3
 800c61e:	f7ff fdd3 	bl	800c1c8 <_ZNK12SimpleString9subStringEj>
 800c622:	f107 030c 	add.w	r3, r7, #12
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f7ff f92e 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800c62e:	f107 030c 	add.w	r3, r7, #12
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff fc75 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
    return result;
 800c638:	bf00      	nop
}
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	08022d60 	.word	0x08022d60

0800c648 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	4904      	ldr	r1, [pc, #16]	; (800c668 <_Z13HexStringFromm+0x20>)
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 f969 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	08022d5c 	.word	0x08022d5c

0800c66c <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b082      	sub	sp, #8
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	683a      	ldr	r2, [r7, #0]
 800c67a:	4904      	ldr	r1, [pc, #16]	; (800c68c <_Z13HexStringFromj+0x20>)
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 f957 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	3708      	adds	r7, #8
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	08022d60 	.word	0x08022d60

0800c690 <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c69a:	f107 0308 	add.w	r3, r7, #8
 800c69e:	6839      	ldr	r1, [r7, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff ff8f 	bl	800c5c4 <_Z13HexStringFromi>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f107 0208 	add.w	r2, r7, #8
 800c6ac:	4611      	mov	r1, r2
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 f87e 	bl	800c7b0 <_Z26BracketsFormattedHexString12SimpleString>
 800c6b4:	f107 0308 	add.w	r3, r7, #8
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	f7ff fc32 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c6be:	bf00      	nop
}
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	3710      	adds	r7, #16
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c6d2:	f107 0308 	add.w	r3, r7, #8
 800c6d6:	6839      	ldr	r1, [r7, #0]
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7ff ffc7 	bl	800c66c <_Z13HexStringFromj>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f107 0208 	add.w	r2, r7, #8
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 f862 	bl	800c7b0 <_Z26BracketsFormattedHexString12SimpleString>
 800c6ec:	f107 0308 	add.w	r3, r7, #8
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f7ff fc16 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c6f6:	bf00      	nop
}
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	3710      	adds	r7, #16
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c70a:	f107 0308 	add.w	r3, r7, #8
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	4618      	mov	r0, r3
 800c712:	f7ff ff45 	bl	800c5a0 <_Z13HexStringFroml>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f107 0208 	add.w	r2, r7, #8
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 f846 	bl	800c7b0 <_Z26BracketsFormattedHexString12SimpleString>
 800c724:	f107 0308 	add.w	r3, r7, #8
 800c728:	4618      	mov	r0, r3
 800c72a:	f7ff fbfa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c72e:	bf00      	nop
}
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}

0800c738 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c742:	f107 0308 	add.w	r3, r7, #8
 800c746:	6839      	ldr	r1, [r7, #0]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff ff7d 	bl	800c648 <_Z13HexStringFromm>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f107 0208 	add.w	r2, r7, #8
 800c754:	4611      	mov	r1, r2
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f82a 	bl	800c7b0 <_Z26BracketsFormattedHexString12SimpleString>
 800c75c:	f107 0308 	add.w	r3, r7, #8
 800c760:	4618      	mov	r0, r3
 800c762:	f7ff fbde 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c766:	bf00      	nop
}
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	460b      	mov	r3, r1
 800c77a:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800c77c:	f107 0308 	add.w	r3, r7, #8
 800c780:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800c784:	4611      	mov	r1, r2
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff ff2e 	bl	800c5e8 <_Z13HexStringFroma>
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f107 0208 	add.w	r2, r7, #8
 800c792:	4611      	mov	r1, r2
 800c794:	4618      	mov	r0, r3
 800c796:	f000 f80b 	bl	800c7b0 <_Z26BracketsFormattedHexString12SimpleString>
 800c79a:	f107 0308 	add.w	r3, r7, #8
 800c79e:	4618      	mov	r0, r3
 800c7a0:	f7ff fbbf 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c7a4:	bf00      	nop
}
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	3710      	adds	r7, #16
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
	...

0800c7b0 <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b088      	sub	sp, #32
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800c7ba:	f107 0310 	add.w	r3, r7, #16
 800c7be:	4917      	ldr	r1, [pc, #92]	; (800c81c <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f7fe fff6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c7c6:	f107 0308 	add.w	r3, r7, #8
 800c7ca:	f107 0110 	add.w	r1, r7, #16
 800c7ce:	683a      	ldr	r2, [r7, #0]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7ff fc08 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800c7d6:	f107 0318 	add.w	r3, r7, #24
 800c7da:	4911      	ldr	r1, [pc, #68]	; (800c820 <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800c7dc:	4618      	mov	r0, r3
 800c7de:	f7fe ffe8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	f107 0218 	add.w	r2, r7, #24
 800c7e8:	f107 0108 	add.w	r1, r7, #8
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fbfa 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800c7f2:	f107 0318 	add.w	r3, r7, #24
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f7ff fb93 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c7fc:	f107 0308 	add.w	r3, r7, #8
 800c800:	4618      	mov	r0, r3
 800c802:	f7ff fb8e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c806:	f107 0310 	add.w	r3, r7, #16
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7ff fb89 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800c810:	bf00      	nop
}
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	3720      	adds	r7, #32
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	08022d64 	.word	0x08022d64
 800c820:	08022d68 	.word	0x08022d68

0800c824 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800c824:	b480      	push	{r7}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c82c:	1d3b      	adds	r3, r7, #4
 800c82e:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800c848:	1d3b      	adds	r3, r7, #4
 800c84a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
 800c864:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f7ff ffdc 	bl	800c824 <_ZL25convertPointerToLongValuePKv>
 800c86c:	4602      	mov	r2, r0
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4903      	ldr	r1, [pc, #12]	; (800c880 <_Z13HexStringFromPKv+0x24>)
 800c872:	4618      	mov	r0, r3
 800c874:	f000 f85c 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	3708      	adds	r7, #8
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	08022d5c 	.word	0x08022d5c

0800c884 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800c88e:	6838      	ldr	r0, [r7, #0]
 800c890:	f7ff ffd6 	bl	800c840 <_ZL33convertFunctionPointerToLongValuePFvvE>
 800c894:	4602      	mov	r2, r0
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4903      	ldr	r1, [pc, #12]	; (800c8a8 <_Z13HexStringFromPFvvE+0x24>)
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 f848 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	08022d5c 	.word	0x08022d5c

0800c8ac <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b086      	sub	sp, #24
 800c8b0:	af02      	add	r7, sp, #8
 800c8b2:	60f8      	str	r0, [r7, #12]
 800c8b4:	ed87 0b00 	vstr	d0, [r7]
 800c8b8:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800c8ba:	4b18      	ldr	r3, [pc, #96]	; (800c91c <_Z10StringFromdi+0x70>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	ed97 0b00 	vldr	d0, [r7]
 800c8c2:	4798      	blx	r3
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bf14      	ite	ne
 800c8ca:	2301      	movne	r3, #1
 800c8cc:	2300      	moveq	r3, #0
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d004      	beq.n	800c8de <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800c8d4:	4912      	ldr	r1, [pc, #72]	; (800c920 <_Z10StringFromdi+0x74>)
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f7fe ff6b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c8dc:	e01a      	b.n	800c914 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800c8de:	4b11      	ldr	r3, [pc, #68]	; (800c924 <_Z10StringFromdi+0x78>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	ed97 0b00 	vldr	d0, [r7]
 800c8e6:	4798      	blx	r3
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	bf14      	ite	ne
 800c8ee:	2301      	movne	r3, #1
 800c8f0:	2300      	moveq	r3, #0
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800c8f8:	490b      	ldr	r1, [pc, #44]	; (800c928 <_Z10StringFromdi+0x7c>)
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f7fe ff59 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800c900:	e008      	b.n	800c914 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c908:	e9cd 2300 	strd	r2, r3, [sp]
 800c90c:	68ba      	ldr	r2, [r7, #8]
 800c90e:	4907      	ldr	r1, [pc, #28]	; (800c92c <_Z10StringFromdi+0x80>)
 800c910:	f000 f80e 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	3710      	adds	r7, #16
 800c918:	46bd      	mov	sp, r7
 800c91a:	bd80      	pop	{r7, pc}
 800c91c:	200000ec 	.word	0x200000ec
 800c920:	08022d9c 	.word	0x08022d9c
 800c924:	200000f0 	.word	0x200000f0
 800c928:	08022db0 	.word	0x08022db0
 800c92c:	08022dc0 	.word	0x08022dc0

0800c930 <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800c930:	b40e      	push	{r1, r2, r3}
 800c932:	b580      	push	{r7, lr}
 800c934:	b087      	sub	sp, #28
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800c93a:	4910      	ldr	r1, [pc, #64]	; (800c97c <_Z16StringFromFormatPKcz+0x4c>)
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f7fe ff38 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800c942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c946:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800c948:	f107 0310 	add.w	r3, r7, #16
 800c94c:	68fa      	ldr	r2, [r7, #12]
 800c94e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c950:	4618      	mov	r0, r3
 800c952:	f000 f839 	bl	800c9c8 <_Z17VStringFromFormatPKcSt9__va_list>
 800c956:	f107 0310 	add.w	r3, r7, #16
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7fe ff94 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800c962:	f107 0310 	add.w	r3, r7, #16
 800c966:	4618      	mov	r0, r3
 800c968:	f7ff fadb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800c96c:	bf00      	nop
}
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	371c      	adds	r7, #28
 800c972:	46bd      	mov	sp, r7
 800c974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c978:	b003      	add	sp, #12
 800c97a:	4770      	bx	lr
 800c97c:	08022d28 	.word	0x08022d28

0800c980 <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	4904      	ldr	r1, [pc, #16]	; (800c9a0 <_Z10StringFromj+0x20>)
 800c990:	4618      	mov	r0, r3
 800c992:	f7ff ffcd 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	3708      	adds	r7, #8
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	08022dcc 	.word	0x08022dcc

0800c9a4 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b082      	sub	sp, #8
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	4904      	ldr	r1, [pc, #16]	; (800c9c4 <_Z10StringFromm+0x20>)
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f7ff ffbb 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	08022dd0 	.word	0x08022dd0

0800c9c8 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800c9c8:	b590      	push	{r4, r7, lr}
 800c9ca:	b0a7      	sub	sp, #156	; 0x9c
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800c9d8:	492e      	ldr	r1, [pc, #184]	; (800ca94 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7fe fee9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800c9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ca98 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800c9e2:	681c      	ldr	r4, [r3, #0]
 800c9e4:	f107 0014 	add.w	r0, r7, #20
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	2164      	movs	r1, #100	; 0x64
 800c9ee:	47a0      	blx	r4
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800c9f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c9fa:	2b63      	cmp	r3, #99	; 0x63
 800c9fc:	d813      	bhi.n	800ca26 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800c9fe:	f107 0214 	add.w	r2, r7, #20
 800ca02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7fe fed2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800ca0e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ca12:	4619      	mov	r1, r3
 800ca14:	68f8      	ldr	r0, [r7, #12]
 800ca16:	f7fe ff38 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800ca1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff fa7f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800ca24:	e031      	b.n	800ca8a <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800ca26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800ca30:	f240 32c3 	movw	r2, #963	; 0x3c3
 800ca34:	4919      	ldr	r1, [pc, #100]	; (800ca9c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800ca36:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800ca3a:	f7fe fc3f 	bl	800b2bc <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ca3e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800ca42:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800ca44:	681c      	ldr	r4, [r3, #0]
 800ca46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca4e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ca52:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800ca54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca58:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7fe fea8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800ca62:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca66:	4619      	mov	r1, r3
 800ca68:	68f8      	ldr	r0, [r7, #12]
 800ca6a:	f7fe ff0e 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800ca6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ca72:	4618      	mov	r0, r3
 800ca74:	f7ff fa55 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800ca78:	f240 33c7 	movw	r3, #967	; 0x3c7
 800ca7c:	4a07      	ldr	r2, [pc, #28]	; (800ca9c <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800ca7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ca82:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800ca86:	f7fe fc2d 	bl	800b2e4 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800ca8a:	bf00      	nop
}
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	379c      	adds	r7, #156	; 0x9c
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd90      	pop	{r4, r7, pc}
 800ca94:	08022d28 	.word	0x08022d28
 800ca98:	200000b4 	.word	0x200000b4
 800ca9c:	08022c68 	.word	0x08022c68

0800caa0 <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	; 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800caac:	491f      	ldr	r1, [pc, #124]	; (800cb2c <_Z16StringFromBinaryPKhj+0x8c>)
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f7fe fe7f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800cab4:	2300      	movs	r3, #0
 800cab6:	627b      	str	r3, [r7, #36]	; 0x24
 800cab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	429a      	cmp	r2, r3
 800cabe:	d219      	bcs.n	800caf4 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800cac0:	68ba      	ldr	r2, [r7, #8]
 800cac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac4:	4413      	add	r3, r2
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	461a      	mov	r2, r3
 800caca:	f107 0314 	add.w	r3, r7, #20
 800cace:	4918      	ldr	r1, [pc, #96]	; (800cb30 <_Z16StringFromBinaryPKhj+0x90>)
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7ff ff2d 	bl	800c930 <_Z16StringFromFormatPKcz>
 800cad6:	f107 0314 	add.w	r3, r7, #20
 800cada:	4619      	mov	r1, r3
 800cadc:	68f8      	ldr	r0, [r7, #12]
 800cade:	f7ff fa9d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800cae2:	f107 0314 	add.w	r3, r7, #20
 800cae6:	4618      	mov	r0, r3
 800cae8:	f7ff fa1b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	3301      	adds	r3, #1
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
 800caf2:	e7e1      	b.n	800cab8 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800caf4:	68f8      	ldr	r0, [r7, #12]
 800caf6:	f7ff f9f3 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800cafa:	4603      	mov	r3, r0
 800cafc:	3b01      	subs	r3, #1
 800cafe:	f107 001c 	add.w	r0, r7, #28
 800cb02:	2200      	movs	r2, #0
 800cb04:	68f9      	ldr	r1, [r7, #12]
 800cb06:	f7ff fb15 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 800cb0a:	f107 031c 	add.w	r3, r7, #28
 800cb0e:	4619      	mov	r1, r3
 800cb10:	68f8      	ldr	r0, [r7, #12]
 800cb12:	f7fe feba 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800cb16:	f107 031c 	add.w	r3, r7, #28
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fa01 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    return result;
 800cb20:	bf00      	nop
}
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	3728      	adds	r7, #40	; 0x28
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd80      	pop	{r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	08022d28 	.word	0x08022d28
 800cb30:	08022dd4 	.word	0x08022dd4

0800cb34 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d006      	beq.n	800cb54 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	68b9      	ldr	r1, [r7, #8]
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	f7ff ffa7 	bl	800caa0 <_Z16StringFromBinaryPKhj>
 800cb52:	e004      	b.n	800cb5e <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4904      	ldr	r1, [pc, #16]	; (800cb68 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fc6f 	bl	800c43c <_Z10StringFromPKc>
}
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	3710      	adds	r7, #16
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	08022d48 	.word	0x08022d48

0800cb6c <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	60f8      	str	r0, [r7, #12]
 800cb74:	60b9      	str	r1, [r7, #8]
 800cb76:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	4913      	ldr	r1, [pc, #76]	; (800cbcc <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fed6 	bl	800c930 <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2b80      	cmp	r3, #128	; 0x80
 800cb88:	bf28      	it	cs
 800cb8a:	2380      	movcs	r3, #128	; 0x80
 800cb8c:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800cb8e:	f107 0314 	add.w	r3, r7, #20
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	68b9      	ldr	r1, [r7, #8]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7ff ffcc 	bl	800cb34 <_Z22StringFromBinaryOrNullPKhj>
 800cb9c:	f107 0314 	add.w	r3, r7, #20
 800cba0:	4619      	mov	r1, r3
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f7ff fa3a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800cba8:	f107 0314 	add.w	r3, r7, #20
 800cbac:	4618      	mov	r0, r3
 800cbae:	f7ff f9b8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d903      	bls.n	800cbc2 <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800cbba:	4905      	ldr	r1, [pc, #20]	; (800cbd0 <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7ff fa3f 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800cbc2:	bf00      	nop
}
 800cbc4:	68f8      	ldr	r0, [r7, #12]
 800cbc6:	3720      	adds	r7, #32
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}
 800cbcc:	08022ddc 	.word	0x08022ddc
 800cbd0:	08022df8 	.word	0x08022df8

0800cbd4 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b084      	sub	sp, #16
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d006      	beq.n	800cbf4 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	68b9      	ldr	r1, [r7, #8]
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7ff ffbd 	bl	800cb6c <_Z24StringFromBinaryWithSizePKhj>
 800cbf2:	e004      	b.n	800cbfe <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	4904      	ldr	r1, [pc, #16]	; (800cc08 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7ff fc1f 	bl	800c43c <_Z10StringFromPKc>
}
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}
 800cc06:	bf00      	nop
 800cc08:	08022d48 	.word	0x08022d48

0800cc0c <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	60b9      	str	r1, [r7, #8]
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800cc1a:	4925      	ldr	r1, [pc, #148]	; (800ccb0 <_Z20StringFromMaskedBitsmmj+0xa4>)
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f7fe fdc8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	2b04      	cmp	r3, #4
 800cc26:	d802      	bhi.n	800cc2e <_Z20StringFromMaskedBitsmmj+0x22>
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	e000      	b.n	800cc30 <_Z20StringFromMaskedBitsmmj+0x24>
 800cc2e:	2320      	movs	r3, #32
 800cc30:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800cc32:	69bb      	ldr	r3, [r7, #24]
 800cc34:	3b01      	subs	r3, #1
 800cc36:	2201      	movs	r2, #1
 800cc38:	fa02 f303 	lsl.w	r3, r2, r3
 800cc3c:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800cc3e:	2300      	movs	r3, #0
 800cc40:	61fb      	str	r3, [r7, #28]
 800cc42:	69fa      	ldr	r2, [r7, #28]
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d22d      	bcs.n	800cca6 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	4013      	ands	r3, r2
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00c      	beq.n	800cc6e <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800cc54:	68ba      	ldr	r2, [r7, #8]
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	4013      	ands	r3, r2
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d001      	beq.n	800cc62 <_Z20StringFromMaskedBitsmmj+0x56>
 800cc5e:	4b15      	ldr	r3, [pc, #84]	; (800ccb4 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800cc60:	e000      	b.n	800cc64 <_Z20StringFromMaskedBitsmmj+0x58>
 800cc62:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <_Z20StringFromMaskedBitsmmj+0xac>)
 800cc64:	4619      	mov	r1, r3
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff f9ea 	bl	800c040 <_ZN12SimpleStringpLEPKc>
 800cc6c:	e003      	b.n	800cc76 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800cc6e:	4913      	ldr	r1, [pc, #76]	; (800ccbc <_Z20StringFromMaskedBitsmmj+0xb0>)
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7ff f9e5 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	f003 0307 	and.w	r3, r3, #7
 800cc7c:	2b07      	cmp	r3, #7
 800cc7e:	d108      	bne.n	800cc92 <_Z20StringFromMaskedBitsmmj+0x86>
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	69fa      	ldr	r2, [r7, #28]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d003      	beq.n	800cc92 <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800cc8a:	490d      	ldr	r1, [pc, #52]	; (800ccc0 <_Z20StringFromMaskedBitsmmj+0xb4>)
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f7ff f9d7 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	005b      	lsls	r3, r3, #1
 800cc96:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800cc9e:	69fb      	ldr	r3, [r7, #28]
 800cca0:	3301      	adds	r3, #1
 800cca2:	61fb      	str	r3, [r7, #28]
 800cca4:	e7cd      	b.n	800cc42 <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800cca6:	bf00      	nop
}
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	3720      	adds	r7, #32
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	08022d28 	.word	0x08022d28
 800ccb4:	08022e00 	.word	0x08022e00
 800ccb8:	08022e04 	.word	0x08022e04
 800ccbc:	08022e08 	.word	0x08022e08
 800ccc0:	08022e0c 	.word	0x08022e0c

0800ccc4 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <_Z23StringFromOrdinalNumberj+0x70>)
 800ccd2:	fba3 1302 	umull	r1, r3, r3, r2
 800ccd6:	08d9      	lsrs	r1, r3, #3
 800ccd8:	460b      	mov	r3, r1
 800ccda:	009b      	lsls	r3, r3, #2
 800ccdc:	440b      	add	r3, r1
 800ccde:	005b      	lsls	r3, r3, #1
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b0a      	cmp	r3, #10
 800cce8:	d905      	bls.n	800ccf6 <_Z23StringFromOrdinalNumberj+0x32>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	2b0d      	cmp	r3, #13
 800ccee:	d802      	bhi.n	800ccf6 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800ccf0:	4b11      	ldr	r3, [pc, #68]	; (800cd38 <_Z23StringFromOrdinalNumberj+0x74>)
 800ccf2:	60fb      	str	r3, [r7, #12]
 800ccf4:	e013      	b.n	800cd1e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800ccf6:	68bb      	ldr	r3, [r7, #8]
 800ccf8:	2b03      	cmp	r3, #3
 800ccfa:	d102      	bne.n	800cd02 <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800ccfc:	4b0f      	ldr	r3, [pc, #60]	; (800cd3c <_Z23StringFromOrdinalNumberj+0x78>)
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	e00d      	b.n	800cd1e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800cd02:	68bb      	ldr	r3, [r7, #8]
 800cd04:	2b02      	cmp	r3, #2
 800cd06:	d102      	bne.n	800cd0e <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800cd08:	4b0d      	ldr	r3, [pc, #52]	; (800cd40 <_Z23StringFromOrdinalNumberj+0x7c>)
 800cd0a:	60fb      	str	r3, [r7, #12]
 800cd0c:	e007      	b.n	800cd1e <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2b01      	cmp	r3, #1
 800cd12:	d102      	bne.n	800cd1a <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800cd14:	4b0b      	ldr	r3, [pc, #44]	; (800cd44 <_Z23StringFromOrdinalNumberj+0x80>)
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e001      	b.n	800cd1e <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <_Z23StringFromOrdinalNumberj+0x74>)
 800cd1c:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4908      	ldr	r1, [pc, #32]	; (800cd48 <_Z23StringFromOrdinalNumberj+0x84>)
 800cd26:	f7ff fe03 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	cccccccd 	.word	0xcccccccd
 800cd38:	08022e10 	.word	0x08022e10
 800cd3c:	08022e14 	.word	0x08022e14
 800cd40:	08022e18 	.word	0x08022e18
 800cd44:	08022e1c 	.word	0x08022e1c
 800cd48:	08022e20 	.word	0x08022e20

0800cd4c <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	3304      	adds	r3, #4
 800cd58:	4907      	ldr	r1, [pc, #28]	; (800cd78 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7fe fd29 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	60da      	str	r2, [r3, #12]
}
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	08022d28 	.word	0x08022d28

0800cd7c <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800cd7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d01e      	beq.n	800cdcc <_ZN22SimpleStringCollection8allocateEj+0x50>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3b04      	subs	r3, #4
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	00db      	lsls	r3, r3, #3
 800cd9c:	18d4      	adds	r4, r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	429c      	cmp	r4, r3
 800cda4:	d004      	beq.n	800cdb0 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800cda6:	3c08      	subs	r4, #8
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f7ff f8ba 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800cdae:	e7f6      	b.n	800cd9e <_ZN22SimpleStringCollection8allocateEj+0x22>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	f1a3 0208 	sub.w	r2, r3, #8
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	3b04      	subs	r3, #4
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f7fc f976 	bl	80090b8 <_ZdaPvj>

    size_ = _size;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	68dc      	ldr	r4, [r3, #12]
 800cdd6:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800cdda:	d202      	bcs.n	800cde2 <_ZN22SimpleStringCollection8allocateEj+0x66>
 800cddc:	1c63      	adds	r3, r4, #1
 800cdde:	00db      	lsls	r3, r3, #3
 800cde0:	e001      	b.n	800cde6 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800cde2:	f04f 33ff 	mov.w	r3, #4294967295
 800cde6:	f240 4227 	movw	r2, #1063	; 0x427
 800cdea:	4910      	ldr	r1, [pc, #64]	; (800ce2c <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fc f941 	bl	8009074 <_ZnajPKci>
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	1d2b      	adds	r3, r5, #4
 800cdf6:	3b04      	subs	r3, #4
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	601a      	str	r2, [r3, #0]
 800cdfc:	1d2b      	adds	r3, r5, #4
 800cdfe:	601c      	str	r4, [r3, #0]
 800ce00:	f105 0308 	add.w	r3, r5, #8
 800ce04:	1e62      	subs	r2, r4, #1
 800ce06:	4614      	mov	r4, r2
 800ce08:	461e      	mov	r6, r3
 800ce0a:	2c00      	cmp	r4, #0
 800ce0c:	db06      	blt.n	800ce1c <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800ce0e:	4908      	ldr	r1, [pc, #32]	; (800ce30 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800ce10:	4630      	mov	r0, r6
 800ce12:	f7fe fcce 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800ce16:	3608      	adds	r6, #8
 800ce18:	3c01      	subs	r4, #1
 800ce1a:	e7f6      	b.n	800ce0a <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800ce1c:	f105 0208 	add.w	r2, r5, #8
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	601a      	str	r2, [r3, #0]
}
 800ce24:	bf00      	nop
 800ce26:	370c      	adds	r7, #12
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2c:	08022c68 	.word	0x08022c68
 800ce30:	08022d28 	.word	0x08022d28

0800ce34 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b083      	sub	sp, #12
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d01e      	beq.n	800ce82 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	3b04      	subs	r3, #4
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	00db      	lsls	r3, r3, #3
 800ce52:	18d4      	adds	r4, r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	429c      	cmp	r4, r3
 800ce5a:	d004      	beq.n	800ce66 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800ce5c:	3c08      	subs	r4, #8
 800ce5e:	4620      	mov	r0, r4
 800ce60:	f7ff f85f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800ce64:	e7f6      	b.n	800ce54 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f1a3 0208 	sub.w	r2, r3, #8
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	3b04      	subs	r3, #4
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	3301      	adds	r3, #1
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	4610      	mov	r0, r2
 800ce7e:	f7fc f91b 	bl	80090b8 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3304      	adds	r3, #4
 800ce86:	4618      	mov	r0, r3
 800ce88:	f7ff f84b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	370c      	adds	r7, #12
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd90      	pop	{r4, r7, pc}

0800ce96 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
    return size_;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	370c      	adds	r7, #12
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr
	...

0800ceb0 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800ceb0:	b590      	push	{r4, r7, lr}
 800ceb2:	b085      	sub	sp, #20
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
 800ceb8:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d315      	bcc.n	800cef0 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	1d1c      	adds	r4, r3, #4
 800cec8:	f107 0308 	add.w	r3, r7, #8
 800cecc:	490d      	ldr	r1, [pc, #52]	; (800cf04 <_ZN22SimpleStringCollectionixEj+0x54>)
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe fc6f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800ced4:	f107 0308 	add.w	r3, r7, #8
 800ced8:	4619      	mov	r1, r3
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7fe fcd5 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800cee0:	f107 0308 	add.w	r3, r7, #8
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff f81c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        return empty_;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3304      	adds	r3, #4
 800ceee:	e004      	b.n	800cefa <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	4413      	add	r3, r2
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3714      	adds	r7, #20
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd90      	pop	{r4, r7, pc}
 800cf02:	bf00      	nop
 800cf04:	08022d28 	.word	0x08022d28

0800cf08 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f7fa fb88 	bl	8007628 <_ZN17ConsoleTestOutputC1Ev>
 800cf18:	4a08      	ldr	r2, [pc, #32]	; (800cf3c <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	601a      	str	r2, [r3, #0]
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	611a      	str	r2, [r3, #16]
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	3314      	adds	r3, #20
 800cf28:	4905      	ldr	r1, [pc, #20]	; (800cf40 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fe fc41 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
{
}
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4618      	mov	r0, r3
 800cf34:	3708      	adds	r7, #8
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	08026548 	.word	0x08026548
 800cf40:	08022e28 	.word	0x08022e28

0800cf44 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	4a08      	ldr	r2, [pc, #32]	; (800cf70 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	3314      	adds	r3, #20
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7fe ffe3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f7fa fb74 	bl	800764c <_ZN17ConsoleTestOutputD1Ev>
{
}
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4618      	mov	r0, r3
 800cf68:	3708      	adds	r7, #8
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	08026548 	.word	0x08026548

0800cf74 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
}
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ffe1 	bl	800cf44 <_ZN18TeamCityTestOutputD1Ev>
 800cf82:	211c      	movs	r1, #28
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7fc f865 	bl	8009054 <_ZdlPvj>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3708      	adds	r7, #8
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b086      	sub	sp, #24
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	332c      	adds	r3, #44	; 0x2c
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	492b      	ldr	r1, [pc, #172]	; (800d058 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800cfaa:	4610      	mov	r0, r2
 800cfac:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f004 fdf7 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f7fe ff82 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	6878      	ldr	r0, [r7, #4]
 800cfca:	f000 f919 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800cfce:	f107 0308 	add.w	r3, r7, #8
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f7fe ffa5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	332c      	adds	r3, #44	; 0x2c
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	491e      	ldr	r1, [pc, #120]	; (800d05c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4798      	blx	r3
    if (!test.willRun()) {
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	3318      	adds	r3, #24
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6838      	ldr	r0, [r7, #0]
 800cff2:	4798      	blx	r3
 800cff4:	4603      	mov	r3, r0
 800cff6:	f083 0301 	eor.w	r3, r3, #1
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d024      	beq.n	800d04a <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	332c      	adds	r3, #44	; 0x2c
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4915      	ldr	r1, [pc, #84]	; (800d060 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800d00c:	4610      	mov	r0, r2
 800d00e:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800d010:	f107 0310 	add.w	r3, r7, #16
 800d014:	6839      	ldr	r1, [r7, #0]
 800d016:	4618      	mov	r0, r3
 800d018:	f004 fdc6 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 800d01c:	f107 0310 	add.w	r3, r7, #16
 800d020:	4618      	mov	r0, r3
 800d022:	f7fe ff51 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d026:	4603      	mov	r3, r0
 800d028:	4619      	mov	r1, r3
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	f000 f8e8 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d030:	f107 0310 	add.w	r3, r7, #16
 800d034:	4618      	mov	r0, r3
 800d036:	f7fe ff74 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        print("']\n");
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	332c      	adds	r3, #44	; 0x2c
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	4905      	ldr	r1, [pc, #20]	; (800d05c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800d046:	4610      	mov	r0, r2
 800d048:	4798      	blx	r3
    }
    currtest_ = &test;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	683a      	ldr	r2, [r7, #0]
 800d04e:	611a      	str	r2, [r3, #16]
}
 800d050:	bf00      	nop
 800d052:	3718      	adds	r7, #24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08022e2c 	.word	0x08022e2c
 800d05c:	08022e4c 	.word	0x08022e4c
 800d060:	08022e50 	.word	0x08022e50

0800d064 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800d064:	b5b0      	push	{r4, r5, r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d03b      	beq.n	800d0ee <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	332c      	adds	r3, #44	; 0x2c
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	491d      	ldr	r1, [pc, #116]	; (800d0f8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800d082:	4610      	mov	r0, r2
 800d084:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	691a      	ldr	r2, [r3, #16]
 800d08a:	f107 0308 	add.w	r3, r7, #8
 800d08e:	4611      	mov	r1, r2
 800d090:	4618      	mov	r0, r3
 800d092:	f004 fd89 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 800d096:	f107 0308 	add.w	r3, r7, #8
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fe ff14 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	f000 f8ab 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d0aa:	f107 0308 	add.w	r3, r7, #8
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7fe ff37 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	332c      	adds	r3, #44	; 0x2c
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	490f      	ldr	r1, [pc, #60]	; (800d0fc <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800d0c4:	687d      	ldr	r5, [r7, #4]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3334      	adds	r3, #52	; 0x34
 800d0cc:	681c      	ldr	r4, [r3, #0]
 800d0ce:	6838      	ldr	r0, [r7, #0]
 800d0d0:	f004 fa0a 	bl	80114e8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4628      	mov	r0, r5
 800d0da:	47a0      	blx	r4
    print("']\n");
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	332c      	adds	r3, #44	; 0x2c
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4906      	ldr	r1, [pc, #24]	; (800d100 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
 800d0ec:	e000      	b.n	800d0f0 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800d0ee:	bf00      	nop
}
 800d0f0:	3710      	adds	r7, #16
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	08022e70 	.word	0x08022e70
 800d0fc:	08022e90 	.word	0x08022e90
 800d100:	08022e4c 	.word	0x08022e4c

0800d104 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800d104:	b590      	push	{r4, r7, lr}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f103 0414 	add.w	r4, r3, #20
 800d114:	f107 0308 	add.w	r3, r7, #8
 800d118:	6839      	ldr	r1, [r7, #0]
 800d11a:	4618      	mov	r0, r3
 800d11c:	f004 fd53 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 800d120:	f107 0308 	add.w	r3, r7, #8
 800d124:	4619      	mov	r1, r3
 800d126:	4620      	mov	r0, r4
 800d128:	f7fe fbaf 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800d12c:	f107 0308 	add.w	r3, r7, #8
 800d130:	4618      	mov	r0, r3
 800d132:	f7fe fef6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	332c      	adds	r3, #44	; 0x2c
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	490c      	ldr	r1, [pc, #48]	; (800d174 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800d142:	4610      	mov	r0, r2
 800d144:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3314      	adds	r3, #20
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fe febc 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d150:	4603      	mov	r3, r0
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f853 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800d15a:	687a      	ldr	r2, [r7, #4]
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	332c      	adds	r3, #44	; 0x2c
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4904      	ldr	r1, [pc, #16]	; (800d178 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800d166:	4610      	mov	r0, r2
 800d168:	4798      	blx	r3
}
 800d16a:	bf00      	nop
 800d16c:	3714      	adds	r7, #20
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd90      	pop	{r4, r7, pc}
 800d172:	bf00      	nop
 800d174:	08022ea0 	.word	0x08022ea0
 800d178:	08022e4c 	.word	0x08022e4c

0800d17c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f103 0414 	add.w	r4, r3, #20
 800d18c:	f107 0308 	add.w	r3, r7, #8
 800d190:	4918      	ldr	r1, [pc, #96]	; (800d1f4 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800d192:	4618      	mov	r0, r3
 800d194:	f7fe fb0d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800d198:	f107 0308 	add.w	r3, r7, #8
 800d19c:	4619      	mov	r1, r3
 800d19e:	4620      	mov	r0, r4
 800d1a0:	f7fe fecb 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	461c      	mov	r4, r3
 800d1a8:	f107 0308 	add.w	r3, r7, #8
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7fe feb8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d1b2:	2c00      	cmp	r4, #0
 800d1b4:	d11a      	bne.n	800d1ec <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800d1b6:	687a      	ldr	r2, [r7, #4]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	332c      	adds	r3, #44	; 0x2c
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	490d      	ldr	r1, [pc, #52]	; (800d1f8 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800d1c2:	4610      	mov	r0, r2
 800d1c4:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	3314      	adds	r3, #20
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fe7c 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	4619      	mov	r1, r3
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 f813 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800d1da:	687a      	ldr	r2, [r7, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	332c      	adds	r3, #44	; 0x2c
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	4905      	ldr	r1, [pc, #20]	; (800d1fc <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	4798      	blx	r3
 800d1ea:	e000      	b.n	800d1ee <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800d1ec:	bf00      	nop
}
 800d1ee:	3714      	adds	r7, #20
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd90      	pop	{r4, r7, pc}
 800d1f4:	08022e28 	.word	0x08022e28
 800d1f8:	08022ec4 	.word	0x08022ec4
 800d1fc:	08022e4c 	.word	0x08022e4c

0800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
    while (*s) {
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	781b      	ldrb	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d03f      	beq.n	800d292 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b27      	cmp	r3, #39	; 0x27
 800d218:	d00b      	beq.n	800d232 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b7c      	cmp	r3, #124	; 0x7c
 800d220:	d007      	beq.n	800d232 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	781b      	ldrb	r3, [r3, #0]
 800d226:	2b5b      	cmp	r3, #91	; 0x5b
 800d228:	d003      	beq.n	800d232 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b5d      	cmp	r3, #93	; 0x5d
 800d230:	d107      	bne.n	800d242 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800d232:	237c      	movs	r3, #124	; 0x7c
 800d234:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	781b      	ldrb	r3, [r3, #0]
 800d23a:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73bb      	strb	r3, [r7, #14]
 800d240:	e01a      	b.n	800d278 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b0d      	cmp	r3, #13
 800d248:	d106      	bne.n	800d258 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800d24a:	237c      	movs	r3, #124	; 0x7c
 800d24c:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800d24e:	2372      	movs	r3, #114	; 0x72
 800d250:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800d252:	2300      	movs	r3, #0
 800d254:	73bb      	strb	r3, [r7, #14]
 800d256:	e00f      	b.n	800d278 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b0a      	cmp	r3, #10
 800d25e:	d106      	bne.n	800d26e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800d260:	237c      	movs	r3, #124	; 0x7c
 800d262:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800d264:	236e      	movs	r3, #110	; 0x6e
 800d266:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800d268:	2300      	movs	r3, #0
 800d26a:	73bb      	strb	r3, [r7, #14]
 800d26c:	e004      	b.n	800d278 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800d274:	2300      	movs	r3, #0
 800d276:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3328      	adds	r3, #40	; 0x28
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	f107 010c 	add.w	r1, r7, #12
 800d286:	4610      	mov	r0, r2
 800d288:	4798      	blx	r3
        s++;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	3301      	adds	r3, #1
 800d28e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800d290:	e7bb      	b.n	800d20a <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800d292:	bf00      	nop
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
	...

0800d29c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800d29c:	b5b0      	push	{r4, r5, r7, lr}
 800d29e:	b08a      	sub	sp, #40	; 0x28
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	332c      	adds	r3, #44	; 0x2c
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4968      	ldr	r1, [pc, #416]	; (800d454 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800d2b2:	4610      	mov	r0, r2
 800d2b4:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	3310      	adds	r3, #16
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	f107 0208 	add.w	r2, r7, #8
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	4798      	blx	r3
 800d2c8:	f107 0308 	add.w	r3, r7, #8
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	f7fe fdfb 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7ff ff92 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d2dc:	f107 0308 	add.w	r3, r7, #8
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7fe fe1e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print("' message='");
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	332c      	adds	r3, #44	; 0x2c
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4959      	ldr	r1, [pc, #356]	; (800d458 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800d2f2:	4610      	mov	r0, r2
 800d2f4:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800d2f6:	6838      	ldr	r0, [r7, #0]
 800d2f8:	f000 fa15 	bl	800d726 <_ZNK11TestFailure17isOutsideTestFileEv>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d105      	bne.n	800d30e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800d302:	6838      	ldr	r0, [r7, #0]
 800d304:	f000 fa21 	bl	800d74a <_ZNK11TestFailure18isInHelperFunctionEv>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800d30e:	2301      	movs	r3, #1
 800d310:	e000      	b.n	800d314 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800d312:	2300      	movs	r3, #0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d042      	beq.n	800d39e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	332c      	adds	r3, #44	; 0x2c
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	494e      	ldr	r1, [pc, #312]	; (800d45c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800d324:	4610      	mov	r0, r2
 800d326:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800d328:	687d      	ldr	r5, [r7, #4]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	332c      	adds	r3, #44	; 0x2c
 800d330:	681c      	ldr	r4, [r3, #0]
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	331c      	adds	r3, #28
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f107 0210 	add.w	r2, r7, #16
 800d33e:	6839      	ldr	r1, [r7, #0]
 800d340:	4610      	mov	r0, r2
 800d342:	4798      	blx	r3
 800d344:	f107 0310 	add.w	r3, r7, #16
 800d348:	4618      	mov	r0, r3
 800d34a:	f7fe fdbd 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d34e:	4603      	mov	r3, r0
 800d350:	4619      	mov	r1, r3
 800d352:	4628      	mov	r0, r5
 800d354:	47a0      	blx	r4
 800d356:	f107 0310 	add.w	r3, r7, #16
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7fe fde1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        print(":");
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	332c      	adds	r3, #44	; 0x2c
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	493d      	ldr	r1, [pc, #244]	; (800d460 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800d36c:	4610      	mov	r0, r2
 800d36e:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800d370:	687d      	ldr	r5, [r7, #4]
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	3334      	adds	r3, #52	; 0x34
 800d378:	681c      	ldr	r4, [r3, #0]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3320      	adds	r3, #32
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6838      	ldr	r0, [r7, #0]
 800d384:	4798      	blx	r3
 800d386:	4603      	mov	r3, r0
 800d388:	4619      	mov	r1, r3
 800d38a:	4628      	mov	r0, r5
 800d38c:	47a0      	blx	r4
        print("): ");
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	332c      	adds	r3, #44	; 0x2c
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4932      	ldr	r1, [pc, #200]	; (800d464 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800d39a:	4610      	mov	r0, r2
 800d39c:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	3308      	adds	r3, #8
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f107 0218 	add.w	r2, r7, #24
 800d3aa:	6839      	ldr	r1, [r7, #0]
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	4798      	blx	r3
 800d3b0:	f107 0318 	add.w	r3, r7, #24
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f7fe fd87 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff ff1e 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d3c4:	f107 0318 	add.w	r3, r7, #24
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f7fe fdaa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print(":");
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	332c      	adds	r3, #44	; 0x2c
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4921      	ldr	r1, [pc, #132]	; (800d460 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800d3da:	4610      	mov	r0, r2
 800d3dc:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800d3de:	687d      	ldr	r5, [r7, #4]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	3334      	adds	r3, #52	; 0x34
 800d3e6:	681c      	ldr	r4, [r3, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	6838      	ldr	r0, [r7, #0]
 800d3f2:	4798      	blx	r3
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	47a0      	blx	r4

    print("' details='");
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	332c      	adds	r3, #44	; 0x2c
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4918      	ldr	r1, [pc, #96]	; (800d468 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800d408:	4610      	mov	r0, r2
 800d40a:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	3318      	adds	r3, #24
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f107 0220 	add.w	r2, r7, #32
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	4610      	mov	r0, r2
 800d41c:	4798      	blx	r3
 800d41e:	f107 0320 	add.w	r3, r7, #32
 800d422:	4618      	mov	r0, r3
 800d424:	f7fe fd50 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d428:	4603      	mov	r3, r0
 800d42a:	4619      	mov	r1, r3
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f7ff fee7 	bl	800d200 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800d432:	f107 0320 	add.w	r3, r7, #32
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe fd73 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    print("']\n");
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	332c      	adds	r3, #44	; 0x2c
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4909      	ldr	r1, [pc, #36]	; (800d46c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800d448:	4610      	mov	r0, r2
 800d44a:	4798      	blx	r3
}
 800d44c:	bf00      	nop
 800d44e:	3728      	adds	r7, #40	; 0x28
 800d450:	46bd      	mov	sp, r7
 800d452:	bdb0      	pop	{r4, r5, r7, pc}
 800d454:	08022ee8 	.word	0x08022ee8
 800d458:	08022f08 	.word	0x08022f08
 800d45c:	08022f14 	.word	0x08022f14
 800d460:	08022f24 	.word	0x08022f24
 800d464:	08022f28 	.word	0x08022f28
 800d468:	08022f2c 	.word	0x08022f2c
 800d46c:	08022e4c 	.word	0x08022e4c

0800d470 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800d47c:	4a1a      	ldr	r2, [pc, #104]	; (800d4e8 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	601a      	str	r2, [r3, #0]
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3314      	adds	r3, #20
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	68fa      	ldr	r2, [r7, #12]
 800d48c:	3204      	adds	r2, #4
 800d48e:	68b9      	ldr	r1, [r7, #8]
 800d490:	4610      	mov	r0, r2
 800d492:	4798      	blx	r3
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	330c      	adds	r3, #12
 800d498:	68b9      	ldr	r1, [r7, #8]
 800d49a:	4618      	mov	r0, r3
 800d49c:	f004 fb84 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	3314      	adds	r3, #20
 800d4a4:	68b9      	ldr	r1, [r7, #8]
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f004 fc4f 	bl	8011d4a <_ZNK10UtestShell7getFileEv>
 800d4ac:	68b8      	ldr	r0, [r7, #8]
 800d4ae:	f004 fc5b 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	61da      	str	r2, [r3, #28]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	3320      	adds	r3, #32
 800d4bc:	68b9      	ldr	r1, [r7, #8]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f004 fc43 	bl	8011d4a <_ZNK10UtestShell7getFileEv>
 800d4c4:	68b8      	ldr	r0, [r7, #8]
 800d4c6:	f004 fc4f 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 800d4ca:	4602      	mov	r2, r0
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	629a      	str	r2, [r3, #40]	; 0x28
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	332c      	adds	r3, #44	; 0x2c
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f7fe f9bf 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
{
}
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3710      	adds	r7, #16
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	08026814 	.word	0x08026814

0800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	60f8      	str	r0, [r7, #12]
 800d4f4:	60b9      	str	r1, [r7, #8]
 800d4f6:	607a      	str	r2, [r7, #4]
 800d4f8:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800d4fa:	4a19      	ldr	r2, [pc, #100]	; (800d560 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	601a      	str	r2, [r3, #0]
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3314      	adds	r3, #20
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	3204      	adds	r2, #4
 800d50c:	68b9      	ldr	r1, [r7, #8]
 800d50e:	4610      	mov	r0, r2
 800d510:	4798      	blx	r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	330c      	adds	r3, #12
 800d516:	68b9      	ldr	r1, [r7, #8]
 800d518:	4618      	mov	r0, r3
 800d51a:	f004 fb45 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	3314      	adds	r3, #20
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe f944 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	61da      	str	r2, [r3, #28]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	3320      	adds	r3, #32
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	4618      	mov	r0, r3
 800d538:	f004 fc07 	bl	8011d4a <_ZNK10UtestShell7getFileEv>
 800d53c:	68b8      	ldr	r0, [r7, #8]
 800d53e:	f004 fc13 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 800d542:	4602      	mov	r2, r0
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	629a      	str	r2, [r3, #40]	; 0x28
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	332c      	adds	r3, #44	; 0x2c
 800d54c:	4905      	ldr	r1, [pc, #20]	; (800d564 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fe f92f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
{
}
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
 800d55e:	bf00      	nop
 800d560:	08026814 	.word	0x08026814
 800d564:	08022f38 	.word	0x08022f38

0800d568 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800d572:	4a1e      	ldr	r2, [pc, #120]	; (800d5ec <_ZN11TestFailureC1ERKS_+0x84>)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	601a      	str	r2, [r3, #0]
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	1d1a      	adds	r2, r3, #4
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	3304      	adds	r3, #4
 800d580:	4619      	mov	r1, r3
 800d582:	4610      	mov	r0, r2
 800d584:	f7fe f969 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f103 020c 	add.w	r2, r3, #12
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	330c      	adds	r3, #12
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7fe f960 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	f103 0214 	add.w	r2, r3, #20
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	3314      	adds	r3, #20
 800d5a4:	4619      	mov	r1, r3
 800d5a6:	4610      	mov	r0, r2
 800d5a8:	f7fe f957 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	69da      	ldr	r2, [r3, #28]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	61da      	str	r2, [r3, #28]
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f103 0220 	add.w	r2, r3, #32
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	3320      	adds	r3, #32
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f7fe f94a 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	629a      	str	r2, [r3, #40]	; 0x28
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	332c      	adds	r3, #44	; 0x2c
 800d5d8:	4619      	mov	r1, r3
 800d5da:	4610      	mov	r0, r2
 800d5dc:	f7fe f93d 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
{
}
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3708      	adds	r7, #8
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}
 800d5ea:	bf00      	nop
 800d5ec:	08026814 	.word	0x08026814

0800d5f0 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	4a10      	ldr	r2, [pc, #64]	; (800d63c <_ZN11TestFailureD1Ev+0x4c>)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	332c      	adds	r3, #44	; 0x2c
 800d602:	4618      	mov	r0, r3
 800d604:	f7fe fc8d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	3320      	adds	r3, #32
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7fe fc88 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	3314      	adds	r3, #20
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fc83 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	330c      	adds	r3, #12
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fc7e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3304      	adds	r3, #4
 800d62a:	4618      	mov	r0, r3
 800d62c:	f7fe fc79 	bl	800bf22 <_ZN12SimpleStringD1Ev>
{
}
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	08026814 	.word	0x08026814

0800d640 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
}
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f7ff ffd1 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800d64e:	2134      	movs	r1, #52	; 0x34
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7fb fcff 	bl	8009054 <_ZdlPvj>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
    return fileName_;
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	3314      	adds	r3, #20
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f7fe f8f2 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b082      	sub	sp, #8
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	3320      	adds	r3, #32
 800d68c:	4619      	mov	r1, r3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f7fe f8e3 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
    return testName_;
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	3304      	adds	r3, #4
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f7fe f8d4 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b082      	sub	sp, #8
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
 800d6c2:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	330c      	adds	r3, #12
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f7fe f8c5 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	3708      	adds	r7, #8
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}

0800d6d8 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	69db      	ldr	r3, [r3, #28]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	370c      	adds	r7, #12
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	370c      	adds	r7, #12
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr

0800d708 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b082      	sub	sp, #8
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
    return message_;
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	332c      	adds	r3, #44	; 0x2c
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f7fe f89e 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	3708      	adds	r7, #8
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f103 0220 	add.w	r2, r3, #32
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	3314      	adds	r3, #20
 800d738:	4619      	mov	r1, r3
 800d73a:	4610      	mov	r0, r2
 800d73c:	f7fe fc42 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 800d740:	4603      	mov	r3, r0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3708      	adds	r7, #8
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800d74a:	b480      	push	{r7}
 800d74c:	b083      	sub	sp, #12
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	69da      	ldr	r2, [r3, #28]
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d75a:	429a      	cmp	r2, r3
 800d75c:	bf34      	ite	cc
 800d75e:	2301      	movcc	r3, #1
 800d760:	2300      	movcs	r3, #0
 800d762:	b2db      	uxtb	r3, r3
}
 800d764:	4618      	mov	r0, r3
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr

0800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800d770:	b590      	push	{r4, r7, lr}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7fe fba2 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d784:	4604      	mov	r4, r0
 800d786:	6838      	ldr	r0, [r7, #0]
 800d788:	f7fe fb9e 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d78c:	4603      	mov	r3, r0
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	4622      	mov	r2, r4
 800d792:	4903      	ldr	r1, [pc, #12]	; (800d7a0 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800d794:	f7ff f8cc 	bl	800c930 <_Z16StringFromFormatPKcz>
}
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	3714      	adds	r7, #20
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd90      	pop	{r4, r7, pc}
 800d7a0:	08022f44 	.word	0x08022f44

0800d7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800d7a4:	b590      	push	{r4, r7, lr}
 800d7a6:	b097      	sub	sp, #92	; 0x5c
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]
 800d7b0:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800d7b2:	494c      	ldr	r1, [pc, #304]	; (800d8e4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800d7b4:	68f8      	ldr	r0, [r7, #12]
 800d7b6:	f7fd fffc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800d7ba:	2314      	movs	r3, #20
 800d7bc:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800d7be:	230a      	movs	r3, #10
 800d7c0:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d7c2:	f107 0320 	add.w	r3, r7, #32
 800d7c6:	220a      	movs	r2, #10
 800d7c8:	4947      	ldr	r1, [pc, #284]	; (800d8e8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fe f80c 	bl	800b7e8 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d7d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7d4:	f107 0120 	add.w	r1, r7, #32
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fc03 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800d7e0:	f107 0318 	add.w	r3, r7, #24
 800d7e4:	f107 0220 	add.w	r2, r7, #32
 800d7e8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fe fbfa 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800d7f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fe fb93 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d7fc:	f107 0310 	add.w	r3, r7, #16
 800d800:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d802:	493a      	ldr	r1, [pc, #232]	; (800d8ec <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800d804:	4618      	mov	r0, r3
 800d806:	f7ff f893 	bl	800c930 <_Z16StringFromFormatPKcz>

    result += "\n";
 800d80a:	4939      	ldr	r1, [pc, #228]	; (800d8f0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f7fe fc17 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800d812:	f107 0310 	add.w	r3, r7, #16
 800d816:	4618      	mov	r0, r3
 800d818:	f7fe fb56 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d81c:	4604      	mov	r4, r0
 800d81e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800d822:	f107 0118 	add.w	r1, r7, #24
 800d826:	2314      	movs	r3, #20
 800d828:	683a      	ldr	r2, [r7, #0]
 800d82a:	f7fe fc83 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 800d82e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d832:	4618      	mov	r0, r3
 800d834:	f7fe fb48 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d838:	4603      	mov	r3, r0
 800d83a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d83e:	4622      	mov	r2, r4
 800d840:	492c      	ldr	r1, [pc, #176]	; (800d8f4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800d842:	f7ff f875 	bl	800c930 <_Z16StringFromFormatPKcz>
 800d846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d84a:	4619      	mov	r1, r3
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f7fe fbe5 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800d852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d856:	4618      	mov	r0, r3
 800d858:	f7fe fb63 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d85c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d860:	4618      	mov	r0, r3
 800d862:	f7fe fb5e 	bl	800bf22 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800d866:	f107 0310 	add.w	r3, r7, #16
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fb38 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 800d870:	4603      	mov	r3, r0
 800d872:	f103 020a 	add.w	r2, r3, #10
 800d876:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d87a:	491b      	ldr	r1, [pc, #108]	; (800d8e8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fd ffb3 	bl	800b7e8 <_ZN12SimpleStringC1EPKcj>
 800d882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d886:	4618      	mov	r0, r3
 800d888:	f7fe fb1e 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800d88c:	4602      	mov	r2, r0
 800d88e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d892:	4919      	ldr	r1, [pc, #100]	; (800d8f8 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff f84b 	bl	800c930 <_Z16StringFromFormatPKcz>
 800d89a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f7fe fbbb 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800d8a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fe fb39 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d8b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7fe fb34 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return result;
 800d8ba:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800d8bc:	f107 0310 	add.w	r3, r7, #16
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f7fe fb2e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800d8c6:	f107 0318 	add.w	r3, r7, #24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fb29 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800d8d0:	f107 0320 	add.w	r3, r7, #32
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7fe fb24 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return result;
 800d8da:	bf00      	nop
}
 800d8dc:	68f8      	ldr	r0, [r7, #12]
 800d8de:	375c      	adds	r7, #92	; 0x5c
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd90      	pop	{r4, r7, pc}
 800d8e4:	08022f64 	.word	0x08022f64
 800d8e8:	08022f68 	.word	0x08022f68
 800d8ec:	08022f6c 	.word	0x08022f6c
 800d8f0:	08022f94 	.word	0x08022f94
 800d8f4:	08022f98 	.word	0x08022f98
 800d8f8:	08022fa0 	.word	0x08022fa0

0800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800d8fc:	b590      	push	{r4, r7, lr}
 800d8fe:	b087      	sub	sp, #28
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800d908:	491a      	ldr	r1, [pc, #104]	; (800d974 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f7fd ff51 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f7fe faf5 	bl	800bf00 <_ZNK12SimpleString7isEmptyEv>
 800d916:	4603      	mov	r3, r0
 800d918:	f083 0301 	eor.w	r3, r3, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d022      	beq.n	800d968 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800d922:	f107 0310 	add.w	r3, r7, #16
 800d926:	4914      	ldr	r1, [pc, #80]	; (800d978 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800d928:	4618      	mov	r0, r3
 800d92a:	f7fd ff42 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800d92e:	f107 0310 	add.w	r3, r7, #16
 800d932:	4619      	mov	r1, r3
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f7fe f800 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 800d93a:	4603      	mov	r3, r0
 800d93c:	f083 0301 	eor.w	r3, r3, #1
 800d940:	b2dc      	uxtb	r4, r3
 800d942:	f107 0310 	add.w	r3, r7, #16
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe faeb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800d94c:	2c00      	cmp	r4, #0
 800d94e:	d003      	beq.n	800d958 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800d950:	490a      	ldr	r1, [pc, #40]	; (800d97c <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f7fe fb74 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800d958:	6879      	ldr	r1, [r7, #4]
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	f7fe fb5e 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800d960:	4907      	ldr	r1, [pc, #28]	; (800d980 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f7fe fb6c 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800d968:	bf00      	nop
}
 800d96a:	68f8      	ldr	r0, [r7, #12]
 800d96c:	371c      	adds	r7, #28
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd90      	pop	{r4, r7, pc}
 800d972:	bf00      	nop
 800d974:	08022f64 	.word	0x08022f64
 800d978:	08022fa8 	.word	0x08022fa8
 800d97c:	08022fb4 	.word	0x08022fb4
 800d980:	08022fc0 	.word	0x08022fc0

0800d984 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800d984:	b590      	push	{r4, r7, lr}
 800d986:	b089      	sub	sp, #36	; 0x24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
 800d990:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800d992:	68f8      	ldr	r0, [r7, #12]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	68b9      	ldr	r1, [r7, #8]
 800d99a:	f7ff fda7 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d99e:	4a19      	ldr	r2, [pc, #100]	; (800da04 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9aa:	68f9      	ldr	r1, [r7, #12]
 800d9ac:	f107 0310 	add.w	r3, r7, #16
 800d9b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7ff ffa2 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d9b8:	f107 0310 	add.w	r3, r7, #16
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4620      	mov	r0, r4
 800d9c0:	f7fd ff63 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800d9c4:	f107 0310 	add.w	r3, r7, #16
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fe faaa 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d9d4:	68f9      	ldr	r1, [r7, #12]
 800d9d6:	f107 0018 	add.w	r0, r7, #24
 800d9da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9de:	f7ff fec7 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d9e2:	f107 0318 	add.w	r3, r7, #24
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f7fe fb17 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800d9ee:	f107 0318 	add.w	r3, r7, #24
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fe fa95 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3724      	adds	r7, #36	; 0x24
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd90      	pop	{r4, r7, pc}
 800da02:	bf00      	nop
 800da04:	080267e8 	.word	0x080267e8

0800da08 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800da08:	b5b0      	push	{r4, r5, r7, lr}
 800da0a:	b094      	sub	sp, #80	; 0x50
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6278      	str	r0, [r7, #36]	; 0x24
 800da10:	6239      	str	r1, [r7, #32]
 800da12:	61fa      	str	r2, [r7, #28]
 800da14:	61bb      	str	r3, [r7, #24]
 800da16:	ed87 0b04 	vstr	d0, [r7, #16]
 800da1a:	ed87 1b02 	vstr	d1, [r7, #8]
 800da1e:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800da22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	69fa      	ldr	r2, [r7, #28]
 800da28:	6a39      	ldr	r1, [r7, #32]
 800da2a:	f7ff fd5f 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800da2e:	4a4a      	ldr	r2, [pc, #296]	; (800db58 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800da30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da32:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800da34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da42:	4618      	mov	r0, r3
 800da44:	f7ff ff5a 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800da48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da4c:	4619      	mov	r1, r3
 800da4e:	4620      	mov	r0, r4
 800da50:	f7fd ff1b 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800da54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da58:	4618      	mov	r0, r3
 800da5a:	f7fe fa62 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800da5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800da64:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800da66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800da6a:	2107      	movs	r1, #7
 800da6c:	ed97 0b04 	vldr	d0, [r7, #16]
 800da70:	4618      	mov	r0, r3
 800da72:	f7fe ff1b 	bl	800c8ac <_Z10StringFromdi>
 800da76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800da7a:	2107      	movs	r1, #7
 800da7c:	ed97 0b02 	vldr	d0, [r7, #8]
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe ff13 	bl	800c8ac <_Z10StringFromdi>
 800da86:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800da8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800da8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800da92:	4629      	mov	r1, r5
 800da94:	f7ff fe6c 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800da98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800da9c:	4619      	mov	r1, r3
 800da9e:	4620      	mov	r0, r4
 800daa0:	f7fe fabc 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800daa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800daa8:	4618      	mov	r0, r3
 800daaa:	f7fe fa3a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800daae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe fa35 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800dab8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7fe fa30 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	332c      	adds	r3, #44	; 0x2c
 800dac6:	4925      	ldr	r1, [pc, #148]	; (800db5c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe fab9 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dad4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dad8:	2107      	movs	r1, #7
 800dada:	ed97 0b00 	vldr	d0, [r7]
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe fee4 	bl	800c8ac <_Z10StringFromdi>
 800dae4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dae8:	4619      	mov	r1, r3
 800daea:	4620      	mov	r0, r4
 800daec:	f7fe fa96 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800daf0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800daf4:	4618      	mov	r0, r3
 800daf6:	f7fe fa14 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	332c      	adds	r3, #44	; 0x2c
 800dafe:	4918      	ldr	r1, [pc, #96]	; (800db60 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800db00:	4618      	mov	r0, r3
 800db02:	f7fe fa9d 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800db06:	4b17      	ldr	r3, [pc, #92]	; (800db64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	ed97 0b04 	vldr	d0, [r7, #16]
 800db0e:	4798      	blx	r3
 800db10:	4603      	mov	r3, r0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d10f      	bne.n	800db36 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800db16:	4b13      	ldr	r3, [pc, #76]	; (800db64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	ed97 0b02 	vldr	d0, [r7, #8]
 800db1e:	4798      	blx	r3
 800db20:	4603      	mov	r3, r0
 800db22:	2b00      	cmp	r3, #0
 800db24:	d107      	bne.n	800db36 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800db26:	4b0f      	ldr	r3, [pc, #60]	; (800db64 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	ed97 0b00 	vldr	d0, [r7]
 800db2e:	4798      	blx	r3
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800db36:	2301      	movs	r3, #1
 800db38:	e000      	b.n	800db3c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800db3a:	2300      	movs	r3, #0
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d005      	beq.n	800db4c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800db40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db42:	332c      	adds	r3, #44	; 0x2c
 800db44:	4908      	ldr	r1, [pc, #32]	; (800db68 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800db46:	4618      	mov	r0, r3
 800db48:	f7fe fa7a 	bl	800c040 <_ZN12SimpleStringpLEPKc>
}
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	4618      	mov	r0, r3
 800db50:	3750      	adds	r7, #80	; 0x50
 800db52:	46bd      	mov	sp, r7
 800db54:	bdb0      	pop	{r4, r5, r7, pc}
 800db56:	bf00      	nop
 800db58:	080267bc 	.word	0x080267bc
 800db5c:	08022fc4 	.word	0x08022fc4
 800db60:	08022fdc 	.word	0x08022fdc
 800db64:	200000ec 	.word	0x200000ec
 800db68:	08022fe0 	.word	0x08022fe0

0800db6c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800db6c:	b590      	push	{r4, r7, lr}
 800db6e:	b093      	sub	sp, #76	; 0x4c
 800db70:	af02      	add	r7, sp, #8
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
 800db78:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	f7ff fcb3 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800db86:	4a4f      	ldr	r2, [pc, #316]	; (800dcc4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800db92:	68f9      	ldr	r1, [r7, #12]
 800db94:	f107 0320 	add.w	r3, r7, #32
 800db98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff feae 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dba0:	f107 0320 	add.w	r3, r7, #32
 800dba4:	4619      	mov	r1, r3
 800dba6:	4620      	mov	r0, r4
 800dba8:	f7fd fe6f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800dbac:	f107 0320 	add.w	r3, r7, #32
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f7fe f9b6 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800dbb6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dbb8:	f7fe f986 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800dbbc:	4602      	mov	r2, r0
 800dbbe:	f107 0318 	add.w	r3, r7, #24
 800dbc2:	4611      	mov	r1, r2
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fc47 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800dbca:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dbcc:	f7fe f97c 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800dbd0:	4602      	mov	r2, r0
 800dbd2:	f107 0310 	add.w	r3, r7, #16
 800dbd6:	4611      	mov	r1, r2
 800dbd8:	4618      	mov	r0, r3
 800dbda:	f7fe fc3d 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dbe4:	68f9      	ldr	r1, [r7, #12]
 800dbe6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800dbea:	f107 0310 	add.w	r3, r7, #16
 800dbee:	f107 0218 	add.w	r2, r7, #24
 800dbf2:	f7ff fdbd 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800dbf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	4620      	mov	r0, r4
 800dbfe:	f7fe fa0d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800dc02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7fe f98b 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc12:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800dc14:	f7fe fae9 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	461c      	mov	r4, r3
 800dc1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc20:	f7fe fae3 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800dc24:	4603      	mov	r3, r0
 800dc26:	429c      	cmp	r4, r3
 800dc28:	bf0c      	ite	eq
 800dc2a:	2301      	moveq	r3, #1
 800dc2c:	2300      	movne	r3, #0
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d003      	beq.n	800dc3c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800dc34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc36:	3301      	adds	r3, #1
 800dc38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc3a:	e7e9      	b.n	800dc10 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc40:	f107 0310 	add.w	r3, r7, #16
 800dc44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7fe facf 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	461c      	mov	r4, r3
 800dc50:	f107 0318 	add.w	r3, r7, #24
 800dc54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fac7 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	429c      	cmp	r4, r3
 800dc60:	bf0c      	ite	eq
 800dc62:	2301      	moveq	r3, #1
 800dc64:	2300      	movne	r3, #0
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	3301      	adds	r3, #1
 800dc70:	63bb      	str	r3, [r7, #56]	; 0x38
 800dc72:	e7e5      	b.n	800dc40 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800dc80:	f107 0210 	add.w	r2, r7, #16
 800dc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc86:	9300      	str	r3, [sp, #0]
 800dc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8a:	f7ff fd8b 	bl	800d7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800dc8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc92:	4619      	mov	r1, r3
 800dc94:	4620      	mov	r0, r4
 800dc96:	f7fe f9c1 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800dc9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe f93f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800dca4:	f107 0310 	add.w	r3, r7, #16
 800dca8:	4618      	mov	r0, r3
 800dcaa:	f7fe f93a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800dcae:	f107 0318 	add.w	r3, r7, #24
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fe f935 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3744      	adds	r7, #68	; 0x44
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd90      	pop	{r4, r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	08026790 	.word	0x08026790

0800dcc8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800dcc8:	b590      	push	{r4, r7, lr}
 800dcca:	b087      	sub	sp, #28
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
 800dcd4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dcd6:	68f8      	ldr	r0, [r7, #12]
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	687a      	ldr	r2, [r7, #4]
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	f7ff fc05 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dce2:	4a1a      	ldr	r2, [pc, #104]	; (800dd4c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dcee:	68f9      	ldr	r1, [r7, #12]
 800dcf0:	f107 0310 	add.w	r3, r7, #16
 800dcf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff fe00 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dcfc:	f107 0310 	add.w	r3, r7, #16
 800dd00:	4619      	mov	r1, r3
 800dd02:	4620      	mov	r0, r4
 800dd04:	f7fd fdc1 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800dd08:	f107 0310 	add.w	r3, r7, #16
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7fe f908 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	332c      	adds	r3, #44	; 0x2c
 800dd16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fe f97f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	332c      	adds	r3, #44	; 0x2c
 800dd22:	490b      	ldr	r1, [pc, #44]	; (800dd50 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fe f98b 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	332c      	adds	r3, #44	; 0x2c
 800dd2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe f973 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	332c      	adds	r3, #44	; 0x2c
 800dd3a:	4906      	ldr	r1, [pc, #24]	; (800dd54 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f7fe f97f 	bl	800c040 <_ZN12SimpleStringpLEPKc>
}
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	4618      	mov	r0, r3
 800dd46:	371c      	adds	r7, #28
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd90      	pop	{r4, r7, pc}
 800dd4c:	08026764 	.word	0x08026764
 800dd50:	08023004 	.word	0x08023004
 800dd54:	08023008 	.word	0x08023008

0800dd58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800dd58:	b5b0      	push	{r4, r5, r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
 800dd64:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	68b9      	ldr	r1, [r7, #8]
 800dd6e:	f7ff fbbd 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800dd72:	4a1c      	ldr	r2, [pc, #112]	; (800dde4 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dd7e:	68f9      	ldr	r1, [r7, #12]
 800dd80:	f107 0310 	add.w	r3, r7, #16
 800dd84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fdb8 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800dd8c:	f107 0310 	add.w	r3, r7, #16
 800dd90:	4619      	mov	r1, r3
 800dd92:	4620      	mov	r0, r4
 800dd94:	f7fd fd79 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800dd98:	f107 0310 	add.w	r3, r7, #16
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f7fe f8c0 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dda8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ddaa:	f7fe f88d 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800ddae:	4605      	mov	r5, r0
 800ddb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ddb2:	f7fe f889 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	f107 0018 	add.w	r0, r7, #24
 800ddbc:	462a      	mov	r2, r5
 800ddbe:	490a      	ldr	r1, [pc, #40]	; (800dde8 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800ddc0:	f7fe fdb6 	bl	800c930 <_Z16StringFromFormatPKcz>
 800ddc4:	f107 0318 	add.w	r3, r7, #24
 800ddc8:	4619      	mov	r1, r3
 800ddca:	4620      	mov	r0, r4
 800ddcc:	f7fe f926 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800ddd0:	f107 0318 	add.w	r3, r7, #24
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f7fe f8a4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	4618      	mov	r0, r3
 800ddde:	3720      	adds	r7, #32
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bdb0      	pop	{r4, r5, r7, pc}
 800dde4:	08026738 	.word	0x08026738
 800dde8:	08023014 	.word	0x08023014

0800ddec <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b087      	sub	sp, #28
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	60f8      	str	r0, [r7, #12]
 800ddf4:	60b9      	str	r1, [r7, #8]
 800ddf6:	607a      	str	r2, [r7, #4]
 800ddf8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ddfa:	68f8      	ldr	r0, [r7, #12]
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	68b9      	ldr	r1, [r7, #8]
 800de02:	f7ff fb73 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800de06:	4a1a      	ldr	r2, [pc, #104]	; (800de70 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800de12:	68f9      	ldr	r1, [r7, #12]
 800de14:	f107 0310 	add.w	r3, r7, #16
 800de18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de1a:	4618      	mov	r0, r3
 800de1c:	f7ff fd6e 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800de20:	f107 0310 	add.w	r3, r7, #16
 800de24:	4619      	mov	r1, r3
 800de26:	4620      	mov	r0, r4
 800de28:	f7fd fd2f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800de2c:	f107 0310 	add.w	r3, r7, #16
 800de30:	4618      	mov	r0, r3
 800de32:	f7fe f876 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	332c      	adds	r3, #44	; 0x2c
 800de3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de3c:	4618      	mov	r0, r3
 800de3e:	f7fe f8ed 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	332c      	adds	r3, #44	; 0x2c
 800de46:	490b      	ldr	r1, [pc, #44]	; (800de74 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800de48:	4618      	mov	r0, r3
 800de4a:	f7fe f8f9 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	332c      	adds	r3, #44	; 0x2c
 800de52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800de54:	4618      	mov	r0, r3
 800de56:	f7fe f8e1 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	332c      	adds	r3, #44	; 0x2c
 800de5e:	4906      	ldr	r1, [pc, #24]	; (800de78 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800de60:	4618      	mov	r0, r3
 800de62:	f7fe f8ed 	bl	800c040 <_ZN12SimpleStringpLEPKc>
}
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4618      	mov	r0, r3
 800de6a:	371c      	adds	r7, #28
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd90      	pop	{r4, r7, pc}
 800de70:	0802670c 	.word	0x0802670c
 800de74:	08023004 	.word	0x08023004
 800de78:	08023008 	.word	0x08023008

0800de7c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b084      	sub	sp, #16
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
 800de88:	603b      	str	r3, [r7, #0]
 800de8a:	68f8      	ldr	r0, [r7, #12]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	f7ff fb2b 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800de96:	4a07      	ldr	r2, [pc, #28]	; (800deb4 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	332c      	adds	r3, #44	; 0x2c
 800dea0:	69b9      	ldr	r1, [r7, #24]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7fd fcf1 	bl	800b88a <_ZN12SimpleStringaSERKS_>
}
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
 800deb2:	bf00      	nop
 800deb4:	080263c8 	.word	0x080263c8

0800deb8 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800deb8:	b590      	push	{r4, r7, lr}
 800deba:	b09d      	sub	sp, #116	; 0x74
 800debc:	af00      	add	r7, sp, #0
 800debe:	60f8      	str	r0, [r7, #12]
 800dec0:	60b9      	str	r1, [r7, #8]
 800dec2:	607a      	str	r2, [r7, #4]
 800dec4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	68b9      	ldr	r1, [r7, #8]
 800dece:	f7ff fb0d 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ded2:	4a5d      	ldr	r2, [pc, #372]	; (800e048 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dede:	68f9      	ldr	r1, [r7, #12]
 800dee0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dee4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fd07 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800deee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800def2:	4619      	mov	r1, r3
 800def4:	4620      	mov	r0, r4
 800def6:	f7fd fcc8 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800defa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f80f 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800df04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df08:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7fe fae1 	bl	800c4d4 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800df12:	f107 0320 	add.w	r3, r7, #32
 800df16:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fada 	bl	800c4d4 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800df20:	f107 0120 	add.w	r1, r7, #32
 800df24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df28:	2220      	movs	r2, #32
 800df2a:	4618      	mov	r0, r3
 800df2c:	f7fe f8b6 	bl	800c09c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800df30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df34:	4945      	ldr	r1, [pc, #276]	; (800e04c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800df36:	4618      	mov	r0, r3
 800df38:	f7fd fc3b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800df3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df40:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800df44:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe f84c 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800df4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df52:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800df56:	4618      	mov	r0, r3
 800df58:	f7fe fbd2 	bl	800c700 <_Z30BracketsFormattedHexStringFroml>
 800df5c:	f107 0318 	add.w	r3, r7, #24
 800df60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800df68:	4618      	mov	r0, r3
 800df6a:	f7fe f83c 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800df6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df72:	4618      	mov	r0, r3
 800df74:	f7fd ffd5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800df78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fd ffd0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800df82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800df86:	4618      	mov	r0, r3
 800df88:	f7fd ffcb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800df8c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800df90:	492e      	ldr	r1, [pc, #184]	; (800e04c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800df92:	4618      	mov	r0, r3
 800df94:	f7fd fc0d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800df98:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800df9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dfa0:	f107 0120 	add.w	r1, r7, #32
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fe f81e 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800dfaa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dfae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f7fe fba4 	bl	800c700 <_Z30BracketsFormattedHexStringFroml>
 800dfb8:	f107 0310 	add.w	r3, r7, #16
 800dfbc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800dfc0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe f80e 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800dfca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800dfce:	4618      	mov	r0, r3
 800dfd0:	f7fd ffa7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800dfd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fd ffa2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800dfde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f7fd ff9d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800dfee:	68f9      	ldr	r1, [r7, #12]
 800dff0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800dff4:	f107 0318 	add.w	r3, r7, #24
 800dff8:	f107 0210 	add.w	r2, r7, #16
 800dffc:	f7ff fbb8 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e000:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e004:	4619      	mov	r1, r3
 800e006:	4620      	mov	r0, r4
 800e008:	f7fe f808 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e00c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e010:	4618      	mov	r0, r3
 800e012:	f7fd ff86 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e016:	f107 0310 	add.w	r3, r7, #16
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fd ff81 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e020:	f107 0318 	add.w	r3, r7, #24
 800e024:	4618      	mov	r0, r3
 800e026:	f7fd ff7c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800e02a:	f107 0320 	add.w	r3, r7, #32
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fd ff77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800e034:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fd ff72 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	4618      	mov	r0, r3
 800e042:	3774      	adds	r7, #116	; 0x74
 800e044:	46bd      	mov	sp, r7
 800e046:	bd90      	pop	{r4, r7, pc}
 800e048:	080266e0 	.word	0x080266e0
 800e04c:	08022f68 	.word	0x08022f68

0800e050 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800e050:	b590      	push	{r4, r7, lr}
 800e052:	b09d      	sub	sp, #116	; 0x74
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	607a      	str	r2, [r7, #4]
 800e05c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e05e:	68f8      	ldr	r0, [r7, #12]
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	68b9      	ldr	r1, [r7, #8]
 800e066:	f7ff fa41 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e06a:	4a5d      	ldr	r2, [pc, #372]	; (800e1e0 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e076:	68f9      	ldr	r1, [r7, #12]
 800e078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e07c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff fc3b 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e08a:	4619      	mov	r1, r3
 800e08c:	4620      	mov	r0, r4
 800e08e:	f7fd fbfc 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e096:	4618      	mov	r0, r3
 800e098:	f7fd ff43 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800e09c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0a0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fe fc7d 	bl	800c9a4 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800e0aa:	f107 0320 	add.w	r3, r7, #32
 800e0ae:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe fc76 	bl	800c9a4 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800e0b8:	f107 0120 	add.w	r1, r7, #32
 800e0bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0c0:	2220      	movs	r2, #32
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fd ffea 	bl	800c09c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e0c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e0cc:	4945      	ldr	r1, [pc, #276]	; (800e1e4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fd fb6f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800e0d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e0d8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e0dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fd ff80 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e0e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e0ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7fe fb22 	bl	800c738 <_Z30BracketsFormattedHexStringFromm>
 800e0f4:	f107 0318 	add.w	r3, r7, #24
 800e0f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e0fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd ff70 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e106:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fd ff09 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e114:	4618      	mov	r0, r3
 800e116:	f7fd ff04 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e11a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e11e:	4618      	mov	r0, r3
 800e120:	f7fd feff 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e124:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e128:	492e      	ldr	r1, [pc, #184]	; (800e1e4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7fd fb41 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800e130:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e134:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e138:	f107 0120 	add.w	r1, r7, #32
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fd ff52 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e142:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e146:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fe faf4 	bl	800c738 <_Z30BracketsFormattedHexStringFromm>
 800e150:	f107 0310 	add.w	r3, r7, #16
 800e154:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e158:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7fd ff42 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e162:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e166:	4618      	mov	r0, r3
 800e168:	f7fd fedb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e16c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e170:	4618      	mov	r0, r3
 800e172:	f7fd fed6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fd fed1 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e186:	68f9      	ldr	r1, [r7, #12]
 800e188:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800e18c:	f107 0318 	add.w	r3, r7, #24
 800e190:	f107 0210 	add.w	r2, r7, #16
 800e194:	f7ff faec 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e198:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e19c:	4619      	mov	r1, r3
 800e19e:	4620      	mov	r0, r4
 800e1a0:	f7fd ff3c 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e1a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fd feba 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e1ae:	f107 0310 	add.w	r3, r7, #16
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fd feb5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e1b8:	f107 0318 	add.w	r3, r7, #24
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fd feb0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800e1c2:	f107 0320 	add.w	r3, r7, #32
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	f7fd feab 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800e1cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fd fea6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3774      	adds	r7, #116	; 0x74
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd90      	pop	{r4, r7, pc}
 800e1e0:	080266b4 	.word	0x080266b4
 800e1e4:	08022f68 	.word	0x08022f68

0800e1e8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800e1e8:	b590      	push	{r4, r7, lr}
 800e1ea:	b09d      	sub	sp, #116	; 0x74
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	607a      	str	r2, [r7, #4]
 800e1f4:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	68b9      	ldr	r1, [r7, #8]
 800e1fe:	f7ff f975 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e202:	4a5f      	ldr	r2, [pc, #380]	; (800e380 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e20e:	68f9      	ldr	r1, [r7, #12]
 800e210:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e214:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e218:	4618      	mov	r0, r3
 800e21a:	f7ff fb6f 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e21e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e222:	4619      	mov	r1, r3
 800e224:	4620      	mov	r0, r4
 800e226:	f7fd fb30 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e22a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e22e:	4618      	mov	r0, r3
 800e230:	f7fd fe77 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800e234:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800e238:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7fe f936 	bl	800c4b0 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800e244:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800e248:	f107 0320 	add.w	r3, r7, #32
 800e24c:	4611      	mov	r1, r2
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe f92e 	bl	800c4b0 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800e254:	f107 0120 	add.w	r1, r7, #32
 800e258:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e25c:	2220      	movs	r2, #32
 800e25e:	4618      	mov	r0, r3
 800e260:	f7fd ff1c 	bl	800c09c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e264:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e268:	4946      	ldr	r1, [pc, #280]	; (800e384 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800e26a:	4618      	mov	r0, r3
 800e26c:	f7fd faa1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800e270:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e274:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800e278:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fd feb2 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e282:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e286:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fa6f 	bl	800c770 <_Z30BracketsFormattedHexStringFroma>
 800e292:	f107 0318 	add.w	r3, r7, #24
 800e296:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e29a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fd fea1 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e2a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7fd fe3a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e2ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f7fd fe35 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e2b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f7fd fe30 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e2c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e2c6:	492f      	ldr	r1, [pc, #188]	; (800e384 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fd fa72 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 800e2ce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e2d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e2d6:	f107 0120 	add.w	r1, r7, #32
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f7fd fe83 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e2e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e2e4:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800e2e8:	4611      	mov	r1, r2
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f7fe fa40 	bl	800c770 <_Z30BracketsFormattedHexStringFroma>
 800e2f0:	f107 0310 	add.w	r3, r7, #16
 800e2f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800e2f8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fd fe72 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 800e302:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800e306:	4618      	mov	r0, r3
 800e308:	f7fd fe0b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e30c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e310:	4618      	mov	r0, r3
 800e312:	f7fd fe06 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e316:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7fd fe01 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e326:	68f9      	ldr	r1, [r7, #12]
 800e328:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800e32c:	f107 0318 	add.w	r3, r7, #24
 800e330:	f107 0210 	add.w	r2, r7, #16
 800e334:	f7ff fa1c 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e338:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e33c:	4619      	mov	r1, r3
 800e33e:	4620      	mov	r0, r4
 800e340:	f7fd fe6c 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e344:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fd fdea 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800e34e:	f107 0310 	add.w	r3, r7, #16
 800e352:	4618      	mov	r0, r3
 800e354:	f7fd fde5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800e358:	f107 0318 	add.w	r3, r7, #24
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fd fde0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800e362:	f107 0320 	add.w	r3, r7, #32
 800e366:	4618      	mov	r0, r3
 800e368:	f7fd fddb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800e36c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e370:	4618      	mov	r0, r3
 800e372:	f7fd fdd6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	4618      	mov	r0, r3
 800e37a:	3774      	adds	r7, #116	; 0x74
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd90      	pop	{r4, r7, pc}
 800e380:	08026688 	.word	0x08026688
 800e384:	08022f68 	.word	0x08022f68

0800e388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800e388:	b590      	push	{r4, r7, lr}
 800e38a:	b093      	sub	sp, #76	; 0x4c
 800e38c:	af02      	add	r7, sp, #8
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
 800e394:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e396:	68f8      	ldr	r0, [r7, #12]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	68b9      	ldr	r1, [r7, #8]
 800e39e:	f7ff f8a5 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e3a2:	4a4a      	ldr	r2, [pc, #296]	; (800e4cc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e3ae:	68f9      	ldr	r1, [r7, #12]
 800e3b0:	f107 0320 	add.w	r3, r7, #32
 800e3b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7ff faa0 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e3bc:	f107 0320 	add.w	r3, r7, #32
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7fd fa61 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e3c8:	f107 0320 	add.w	r3, r7, #32
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fd fda8 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e3d2:	f107 0318 	add.w	r3, r7, #24
 800e3d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fe f83d 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e3de:	f107 0310 	add.w	r3, r7, #16
 800e3e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fe f837 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e3f0:	68f9      	ldr	r1, [r7, #12]
 800e3f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e3f6:	f107 0310 	add.w	r3, r7, #16
 800e3fa:	f107 0218 	add.w	r2, r7, #24
 800e3fe:	f7ff f9b7 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e402:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e406:	4619      	mov	r1, r3
 800e408:	4620      	mov	r0, r4
 800e40a:	f7fd fe07 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e40e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd fd85 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800e418:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d046      	beq.n	800e4ac <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800e41e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e420:	2b00      	cmp	r3, #0
 800e422:	d043      	beq.n	800e4ac <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800e424:	2300      	movs	r3, #0
 800e426:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e42a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e42c:	4413      	add	r3, r2
 800e42e:	781a      	ldrb	r2, [r3, #0]
 800e430:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e434:	440b      	add	r3, r1
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d103      	bne.n	800e444 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800e43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e43e:	3301      	adds	r3, #1
 800e440:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e442:	e7f1      	b.n	800e428 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800e444:	2300      	movs	r3, #0
 800e446:	63bb      	str	r3, [r7, #56]	; 0x38
 800e448:	f107 0310 	add.w	r3, r7, #16
 800e44c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fd fecb 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800e454:	4603      	mov	r3, r0
 800e456:	461c      	mov	r4, r3
 800e458:	f107 0318 	add.w	r3, r7, #24
 800e45c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fd fec3 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800e464:	4603      	mov	r3, r0
 800e466:	429c      	cmp	r4, r3
 800e468:	bf0c      	ite	eq
 800e46a:	2301      	moveq	r3, #1
 800e46c:	2300      	movne	r3, #0
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b00      	cmp	r3, #0
 800e472:	d003      	beq.n	800e47c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800e474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e476:	3301      	adds	r3, #1
 800e478:	63bb      	str	r3, [r7, #56]	; 0x38
 800e47a:	e7e5      	b.n	800e448 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e482:	68f9      	ldr	r1, [r7, #12]
 800e484:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e488:	f107 0210 	add.w	r2, r7, #16
 800e48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	f7ff f987 	bl	800d7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e496:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e49a:	4619      	mov	r1, r3
 800e49c:	4620      	mov	r0, r4
 800e49e:	f7fd fdbd 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e4a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f7fd fd3b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e4ac:	f107 0310 	add.w	r3, r7, #16
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7fd fd36 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e4b6:	f107 0318 	add.w	r3, r7, #24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fd fd31 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
}
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3744      	adds	r7, #68	; 0x44
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd90      	pop	{r4, r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	0802665c 	.word	0x0802665c

0800e4d0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800e4d0:	b590      	push	{r4, r7, lr}
 800e4d2:	b093      	sub	sp, #76	; 0x4c
 800e4d4:	af02      	add	r7, sp, #8
 800e4d6:	60f8      	str	r0, [r7, #12]
 800e4d8:	60b9      	str	r1, [r7, #8]
 800e4da:	607a      	str	r2, [r7, #4]
 800e4dc:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	68b9      	ldr	r1, [r7, #8]
 800e4e6:	f7ff f801 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e4ea:	4a55      	ldr	r2, [pc, #340]	; (800e640 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e4f6:	68f9      	ldr	r1, [r7, #12]
 800e4f8:	f107 0320 	add.w	r3, r7, #32
 800e4fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7ff f9fc 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e504:	f107 0320 	add.w	r3, r7, #32
 800e508:	4619      	mov	r1, r3
 800e50a:	4620      	mov	r0, r4
 800e50c:	f7fd f9bd 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e510:	f107 0320 	add.w	r3, r7, #32
 800e514:	4618      	mov	r0, r3
 800e516:	f7fd fd04 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e51a:	f107 0318 	add.w	r3, r7, #24
 800e51e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e520:	4618      	mov	r0, r3
 800e522:	f7fd ff99 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e526:	f107 0310 	add.w	r3, r7, #16
 800e52a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7fd ff93 	bl	800c458 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e538:	68f9      	ldr	r1, [r7, #12]
 800e53a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e53e:	f107 0310 	add.w	r3, r7, #16
 800e542:	f107 0218 	add.w	r2, r7, #24
 800e546:	f7ff f913 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e54a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e54e:	4619      	mov	r1, r3
 800e550:	4620      	mov	r0, r4
 800e552:	f7fd fd63 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e556:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fd fce1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800e560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e562:	2b00      	cmp	r3, #0
 800e564:	d05c      	beq.n	800e620 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800e566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d059      	beq.n	800e620 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800e56c:	2300      	movs	r3, #0
 800e56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e570:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e574:	4413      	add	r3, r2
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7fd f824 	bl	800b5c6 <_ZN12SimpleString7ToLowerEc>
 800e57e:	4603      	mov	r3, r0
 800e580:	461c      	mov	r4, r3
 800e582:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e586:	4413      	add	r3, r2
 800e588:	781b      	ldrb	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fd f81b 	bl	800b5c6 <_ZN12SimpleString7ToLowerEc>
 800e590:	4603      	mov	r3, r0
 800e592:	429c      	cmp	r4, r3
 800e594:	bf0c      	ite	eq
 800e596:	2301      	moveq	r3, #1
 800e598:	2300      	movne	r3, #0
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d003      	beq.n	800e5a8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800e5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5a2:	3301      	adds	r3, #1
 800e5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5a6:	e7e3      	b.n	800e570 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800e5ac:	f107 0310 	add.w	r3, r7, #16
 800e5b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fd fe19 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fd f803 	bl	800b5c6 <_ZN12SimpleString7ToLowerEc>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	461c      	mov	r4, r3
 800e5c4:	f107 0318 	add.w	r3, r7, #24
 800e5c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fd fe0d 	bl	800c1ea <_ZNK12SimpleString2atEj>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f7fc fff7 	bl	800b5c6 <_ZN12SimpleString7ToLowerEc>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	429c      	cmp	r4, r3
 800e5dc:	bf0c      	ite	eq
 800e5de:	2301      	moveq	r3, #1
 800e5e0:	2300      	movne	r3, #0
 800e5e2:	b2db      	uxtb	r3, r3
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d003      	beq.n	800e5f0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800e5ee:	e7dd      	b.n	800e5ac <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e5f6:	68f9      	ldr	r1, [r7, #12]
 800e5f8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800e5fc:	f107 0210 	add.w	r2, r7, #16
 800e600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e602:	9300      	str	r3, [sp, #0]
 800e604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e606:	f7ff f8cd 	bl	800d7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e60a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e60e:	4619      	mov	r1, r3
 800e610:	4620      	mov	r0, r4
 800e612:	f7fd fd03 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7fd fc81 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800e620:	f107 0310 	add.w	r3, r7, #16
 800e624:	4618      	mov	r0, r3
 800e626:	f7fd fc7c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800e62a:	f107 0318 	add.w	r3, r7, #24
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fd fc77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
}
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	4618      	mov	r0, r3
 800e638:	3744      	adds	r7, #68	; 0x44
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd90      	pop	{r4, r7, pc}
 800e63e:	bf00      	nop
 800e640:	08026630 	.word	0x08026630

0800e644 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800e644:	b5b0      	push	{r4, r5, r7, lr}
 800e646:	b092      	sub	sp, #72	; 0x48
 800e648:	af02      	add	r7, sp, #8
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	687a      	ldr	r2, [r7, #4]
 800e658:	68b9      	ldr	r1, [r7, #8]
 800e65a:	f7fe ff47 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e65e:	4a40      	ldr	r2, [pc, #256]	; (800e760 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e66a:	68f9      	ldr	r1, [r7, #12]
 800e66c:	f107 031c 	add.w	r3, r7, #28
 800e670:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e672:	4618      	mov	r0, r3
 800e674:	f7ff f942 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e678:	f107 031c 	add.w	r3, r7, #28
 800e67c:	4619      	mov	r1, r3
 800e67e:	4620      	mov	r0, r4
 800e680:	f7fd f903 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e684:	f107 031c 	add.w	r3, r7, #28
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fd fc4a 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e68e:	f107 0314 	add.w	r3, r7, #20
 800e692:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e694:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe fa4c 	bl	800cb34 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e6a2:	68fd      	ldr	r5, [r7, #12]
 800e6a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e6aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fe fa41 	bl	800cb34 <_Z22StringFromBinaryOrNullPKhj>
 800e6b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e6b6:	f107 0314 	add.w	r3, r7, #20
 800e6ba:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e6be:	4629      	mov	r1, r5
 800e6c0:	f7ff f856 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e6c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	f7fd fca6 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e6d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fd fc24 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e6da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7fd fc1f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800e6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d02f      	beq.n	800e74a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800e6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d02c      	beq.n	800e74a <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6f8:	4413      	add	r3, r2
 800e6fa:	781a      	ldrb	r2, [r3, #0]
 800e6fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e700:	440b      	add	r3, r1
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	d103      	bne.n	800e710 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800e708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e70a:	3301      	adds	r3, #1
 800e70c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e70e:	e7f1      	b.n	800e6f4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e716:	68f9      	ldr	r1, [r7, #12]
 800e718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e71a:	4613      	mov	r3, r2
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	4413      	add	r3, r2
 800e720:	1c5d      	adds	r5, r3, #1
 800e722:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e726:	f107 0214 	add.w	r2, r7, #20
 800e72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72c:	9300      	str	r3, [sp, #0]
 800e72e:	462b      	mov	r3, r5
 800e730:	f7ff f838 	bl	800d7a4 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800e734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e738:	4619      	mov	r1, r3
 800e73a:	4620      	mov	r0, r4
 800e73c:	f7fd fc6e 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e740:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e744:	4618      	mov	r0, r3
 800e746:	f7fd fbec 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800e74a:	f107 0314 	add.w	r3, r7, #20
 800e74e:	4618      	mov	r0, r3
 800e750:	f7fd fbe7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
	}
}
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4618      	mov	r0, r3
 800e758:	3740      	adds	r7, #64	; 0x40
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bdb0      	pop	{r4, r5, r7, pc}
 800e75e:	bf00      	nop
 800e760:	08026604 	.word	0x08026604

0800e764 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800e764:	b5b0      	push	{r4, r5, r7, lr}
 800e766:	b08c      	sub	sp, #48	; 0x30
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	68b9      	ldr	r1, [r7, #8]
 800e77a:	f7fe feb7 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e77e:	4a26      	ldr	r2, [pc, #152]	; (800e818 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e78a:	68f9      	ldr	r1, [r7, #12]
 800e78c:	f107 0310 	add.w	r3, r7, #16
 800e790:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e792:	4618      	mov	r0, r3
 800e794:	f7ff f8b2 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e798:	f107 0310 	add.w	r3, r7, #16
 800e79c:	4619      	mov	r1, r3
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f7fd f873 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e7a4:	f107 0310 	add.w	r3, r7, #16
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fd fbba 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e7b4:	68fd      	ldr	r5, [r7, #12]
 800e7b6:	f107 0020 	add.w	r0, r7, #32
 800e7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e7c0:	f7fe fa24 	bl	800cc0c <_Z20StringFromMaskedBitsmmj>
 800e7c4:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e7ce:	f7fe fa1d 	bl	800cc0c <_Z20StringFromMaskedBitsmmj>
 800e7d2:	f107 0018 	add.w	r0, r7, #24
 800e7d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7da:	f107 0220 	add.w	r2, r7, #32
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7fe ffc6 	bl	800d770 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800e7e4:	f107 0318 	add.w	r3, r7, #24
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f7fd fc16 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e7f0:	f107 0318 	add.w	r3, r7, #24
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fd fb94 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e7fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fd fb8f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 800e804:	f107 0320 	add.w	r3, r7, #32
 800e808:	4618      	mov	r0, r3
 800e80a:	f7fd fb8a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	4618      	mov	r0, r3
 800e812:	3730      	adds	r7, #48	; 0x30
 800e814:	46bd      	mov	sp, r7
 800e816:	bdb0      	pop	{r4, r5, r7, pc}
 800e818:	080265d8 	.word	0x080265d8

0800e81c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800e81c:	b590      	push	{r4, r7, lr}
 800e81e:	b089      	sub	sp, #36	; 0x24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60f8      	str	r0, [r7, #12]
 800e824:	60b9      	str	r1, [r7, #8]
 800e826:	607a      	str	r2, [r7, #4]
 800e828:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	687a      	ldr	r2, [r7, #4]
 800e830:	68b9      	ldr	r1, [r7, #8]
 800e832:	f7fe fe5b 	bl	800d4ec <_ZN11TestFailureC1EP10UtestShellPKcj>
 800e836:	4a1a      	ldr	r2, [pc, #104]	; (800e8a0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e842:	68f9      	ldr	r1, [r7, #12]
 800e844:	f107 0310 	add.w	r3, r7, #16
 800e848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e84a:	4618      	mov	r0, r3
 800e84c:	f7ff f856 	bl	800d8fc <_ZN11TestFailure14createUserTextERK12SimpleString>
 800e850:	f107 0310 	add.w	r3, r7, #16
 800e854:	4619      	mov	r1, r3
 800e856:	4620      	mov	r0, r4
 800e858:	f7fd f817 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 800e85c:	f107 0310 	add.w	r3, r7, #16
 800e860:	4618      	mov	r0, r3
 800e862:	f7fd fb5e 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800e86c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e86e:	f7fd fb2b 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800e872:	4602      	mov	r2, r0
 800e874:	f107 0318 	add.w	r3, r7, #24
 800e878:	490a      	ldr	r1, [pc, #40]	; (800e8a4 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800e87a:	4618      	mov	r0, r3
 800e87c:	f7fe f858 	bl	800c930 <_Z16StringFromFormatPKcz>
 800e880:	f107 0318 	add.w	r3, r7, #24
 800e884:	4619      	mov	r1, r3
 800e886:	4620      	mov	r0, r4
 800e888:	f7fd fbc8 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 800e88c:	f107 0318 	add.w	r3, r7, #24
 800e890:	4618      	mov	r0, r3
 800e892:	f7fd fb46 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	4618      	mov	r0, r3
 800e89a:	3724      	adds	r7, #36	; 0x24
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd90      	pop	{r4, r7, pc}
 800e8a0:	080265ac 	.word	0x080265ac
 800e8a4:	08023038 	.word	0x08023038

0800e8a8 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	4a05      	ldr	r2, [pc, #20]	; (800e8c8 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	601a      	str	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fe fe99 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3708      	adds	r7, #8
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	080265ac 	.word	0x080265ac

0800e8cc <_ZN25FeatureUnsupportedFailureD0Ev>:
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7ff ffe7 	bl	800e8a8 <_ZN25FeatureUnsupportedFailureD1Ev>
 800e8da:	2134      	movs	r1, #52	; 0x34
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7fa fbb9 	bl	8009054 <_ZdlPvj>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}

0800e8ec <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b082      	sub	sp, #8
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	4a05      	ldr	r2, [pc, #20]	; (800e90c <_ZN16BitsEqualFailureD1Ev+0x20>)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	601a      	str	r2, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7fe fe77 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	4618      	mov	r0, r3
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}
 800e90c:	080265d8 	.word	0x080265d8

0800e910 <_ZN16BitsEqualFailureD0Ev>:
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff ffe7 	bl	800e8ec <_ZN16BitsEqualFailureD1Ev>
 800e91e:	2134      	movs	r1, #52	; 0x34
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f7fa fb97 	bl	8009054 <_ZdlPvj>
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	4a05      	ldr	r2, [pc, #20]	; (800e950 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	4618      	mov	r0, r3
 800e942:	f7fe fe55 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4618      	mov	r0, r3
 800e94a:	3708      	adds	r7, #8
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	08026604 	.word	0x08026604

0800e954 <_ZN18BinaryEqualFailureD0Ev>:
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f7ff ffe7 	bl	800e930 <_ZN18BinaryEqualFailureD1Ev>
 800e962:	2134      	movs	r1, #52	; 0x34
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f7fa fb75 	bl	8009054 <_ZdlPvj>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	4a05      	ldr	r2, [pc, #20]	; (800e994 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	601a      	str	r2, [r3, #0]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	4618      	mov	r0, r3
 800e986:	f7fe fe33 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	4618      	mov	r0, r3
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}
 800e994:	08026630 	.word	0x08026630

0800e998 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7ff ffe7 	bl	800e974 <_ZN24StringEqualNoCaseFailureD1Ev>
 800e9a6:	2134      	movs	r1, #52	; 0x34
 800e9a8:	6878      	ldr	r0, [r7, #4]
 800e9aa:	f7fa fb53 	bl	8009054 <_ZdlPvj>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	3708      	adds	r7, #8
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	bd80      	pop	{r7, pc}

0800e9b8 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
 800e9c0:	4a05      	ldr	r2, [pc, #20]	; (800e9d8 <_ZN18StringEqualFailureD1Ev+0x20>)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	601a      	str	r2, [r3, #0]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7fe fe11 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	0802665c 	.word	0x0802665c

0800e9dc <_ZN18StringEqualFailureD0Ev>:
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7ff ffe7 	bl	800e9b8 <_ZN18StringEqualFailureD1Ev>
 800e9ea:	2134      	movs	r1, #52	; 0x34
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7fa fb31 	bl	8009054 <_ZdlPvj>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b082      	sub	sp, #8
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	4a05      	ldr	r2, [pc, #20]	; (800ea1c <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	601a      	str	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fe fdef 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	08026688 	.word	0x08026688

0800ea20 <_ZN23SignedBytesEqualFailureD0Ev>:
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7ff ffe7 	bl	800e9fc <_ZN23SignedBytesEqualFailureD1Ev>
 800ea2e:	2134      	movs	r1, #52	; 0x34
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7fa fb0f 	bl	8009054 <_ZdlPvj>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	3708      	adds	r7, #8
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	bd80      	pop	{r7, pc}

0800ea40 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	4a05      	ldr	r2, [pc, #20]	; (800ea60 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	601a      	str	r2, [r3, #0]
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe fdcd 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3708      	adds	r7, #8
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	080266b4 	.word	0x080266b4

0800ea64 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	f7ff ffe7 	bl	800ea40 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800ea72:	2134      	movs	r1, #52	; 0x34
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7fa faed 	bl	8009054 <_ZdlPvj>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}

0800ea84 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b082      	sub	sp, #8
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	6078      	str	r0, [r7, #4]
 800ea8c:	4a05      	ldr	r2, [pc, #20]	; (800eaa4 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	601a      	str	r2, [r3, #0]
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7fe fdab 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}
 800eaa4:	080266e0 	.word	0x080266e0

0800eaa8 <_ZN17LongsEqualFailureD0Ev>:
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b082      	sub	sp, #8
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ffe7 	bl	800ea84 <_ZN17LongsEqualFailureD1Ev>
 800eab6:	2134      	movs	r1, #52	; 0x34
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7fa facb 	bl	8009054 <_ZdlPvj>
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	4618      	mov	r0, r3
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	4a05      	ldr	r2, [pc, #20]	; (800eae8 <_ZN12CheckFailureD1Ev+0x20>)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	601a      	str	r2, [r3, #0]
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe fd89 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	4618      	mov	r0, r3
 800eae2:	3708      	adds	r7, #8
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}
 800eae8:	0802670c 	.word	0x0802670c

0800eaec <_ZN12CheckFailureD0Ev>:
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f7ff ffe7 	bl	800eac8 <_ZN12CheckFailureD1Ev>
 800eafa:	2134      	movs	r1, #52	; 0x34
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7fa faa9 	bl	8009054 <_ZdlPvj>
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	4618      	mov	r0, r3
 800eb06:	3708      	adds	r7, #8
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}

0800eb0c <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	4a05      	ldr	r2, [pc, #20]	; (800eb2c <_ZN15ContainsFailureD1Ev+0x20>)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	601a      	str	r2, [r3, #0]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f7fe fd67 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	3708      	adds	r7, #8
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bd80      	pop	{r7, pc}
 800eb2c:	08026738 	.word	0x08026738

0800eb30 <_ZN15ContainsFailureD0Ev>:
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff ffe7 	bl	800eb0c <_ZN15ContainsFailureD1Ev>
 800eb3e:	2134      	movs	r1, #52	; 0x34
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7fa fa87 	bl	8009054 <_ZdlPvj>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4618      	mov	r0, r3
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	4a05      	ldr	r2, [pc, #20]	; (800eb70 <_ZN17ComparisonFailureD1Ev+0x20>)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	4618      	mov	r0, r3
 800eb62:	f7fe fd45 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	08026764 	.word	0x08026764

0800eb74 <_ZN17ComparisonFailureD0Ev>:
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7ff ffe7 	bl	800eb50 <_ZN17ComparisonFailureD1Ev>
 800eb82:	2134      	movs	r1, #52	; 0x34
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f7fa fa65 	bl	8009054 <_ZdlPvj>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	4a05      	ldr	r2, [pc, #20]	; (800ebb4 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	601a      	str	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4618      	mov	r0, r3
 800eba6:	f7fe fd23 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4618      	mov	r0, r3
 800ebae:	3708      	adds	r7, #8
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	08026790 	.word	0x08026790

0800ebb8 <_ZN17CheckEqualFailureD0Ev>:
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ffe7 	bl	800eb94 <_ZN17CheckEqualFailureD1Ev>
 800ebc6:	2134      	movs	r1, #52	; 0x34
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f7fa fa43 	bl	8009054 <_ZdlPvj>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	4a05      	ldr	r2, [pc, #20]	; (800ebf8 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	601a      	str	r2, [r3, #0]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f7fe fd01 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	080267bc 	.word	0x080267bc

0800ebfc <_ZN19DoublesEqualFailureD0Ev>:
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b082      	sub	sp, #8
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f7ff ffe7 	bl	800ebd8 <_ZN19DoublesEqualFailureD1Ev>
 800ec0a:	2134      	movs	r1, #52	; 0x34
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7fa fa21 	bl	8009054 <_ZdlPvj>
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4618      	mov	r0, r3
 800ec16:	3708      	adds	r7, #8
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	bd80      	pop	{r7, pc}

0800ec1c <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	4a05      	ldr	r2, [pc, #20]	; (800ec3c <_ZN13EqualsFailureD1Ev+0x20>)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	601a      	str	r2, [r3, #0]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe fcdf 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	4618      	mov	r0, r3
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	080267e8 	.word	0x080267e8

0800ec40 <_ZN13EqualsFailureD0Ev>:
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f7ff ffe7 	bl	800ec1c <_ZN13EqualsFailureD1Ev>
 800ec4e:	2134      	movs	r1, #52	; 0x34
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f7fa f9ff 	bl	8009054 <_ZdlPvj>
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3708      	adds	r7, #8
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}

0800ec60 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800ec60:	b5b0      	push	{r4, r5, r7, lr}
 800ec62:	b086      	sub	sp, #24
 800ec64:	af02      	add	r7, sp, #8
 800ec66:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800ec68:	4b0d      	ldr	r3, [pc, #52]	; (800eca0 <_ZL13checkedMallocj+0x40>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	4798      	blx	r3
 800ec70:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10e      	bne.n	800ec96 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800ec78:	f004 f97e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 800ec7c:	4604      	mov	r4, r0
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	3368      	adds	r3, #104	; 0x68
 800ec82:	681d      	ldr	r5, [r3, #0]
 800ec84:	f004 f988 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	9300      	str	r3, [sp, #0]
 800ec8c:	2325      	movs	r3, #37	; 0x25
 800ec8e:	4a05      	ldr	r2, [pc, #20]	; (800eca4 <_ZL13checkedMallocj+0x44>)
 800ec90:	4905      	ldr	r1, [pc, #20]	; (800eca8 <_ZL13checkedMallocj+0x48>)
 800ec92:	4620      	mov	r0, r4
 800ec94:	47a8      	blx	r5
    return mem;
 800ec96:	68fb      	ldr	r3, [r7, #12]
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3710      	adds	r7, #16
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bdb0      	pop	{r4, r5, r7, pc}
 800eca0:	200000cc 	.word	0x200000cc
 800eca4:	080230ac 	.word	0x080230ac
 800eca8:	080230cc 	.word	0x080230cc

0800ecac <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800ecb0:	4b04      	ldr	r3, [pc, #16]	; (800ecc4 <_Z22getCurrentNewAllocatorv+0x18>)
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <_Z22getCurrentNewAllocatorv+0x10>
 800ecb8:	f000 f806 	bl	800ecc8 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800ecbc:	4b01      	ldr	r3, [pc, #4]	; (800ecc4 <_Z22getCurrentNewAllocatorv+0x18>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	200007a8 	.word	0x200007a8

0800ecc8 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800eccc:	f000 f810 	bl	800ecf0 <_Z19defaultNewAllocatorv>
 800ecd0:	4603      	mov	r3, r0
 800ecd2:	4a02      	ldr	r2, [pc, #8]	; (800ecdc <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800ecd4:	6013      	str	r3, [r2, #0]
}
 800ecd6:	bf00      	nop
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	200007a8 	.word	0x200007a8

0800ece0 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800ece0:	b580      	push	{r7, lr}
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	4801      	ldr	r0, [pc, #4]	; (800ecec <__tcf_0+0xc>)
 800ece6:	f000 f909 	bl	800eefc <_ZN19TestMemoryAllocatorD1Ev>
 800ecea:	bd80      	pop	{r7, pc}
 800ecec:	200007b4 	.word	0x200007b4

0800ecf0 <_Z19defaultNewAllocatorv>:
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800ecf4:	4b13      	ldr	r3, [pc, #76]	; (800ed44 <_Z19defaultNewAllocatorv+0x54>)
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	f3bf 8f5b 	dmb	ish
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	bf0c      	ite	eq
 800ed06:	2301      	moveq	r3, #1
 800ed08:	2300      	movne	r3, #0
 800ed0a:	b2db      	uxtb	r3, r3
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d016      	beq.n	800ed3e <_Z19defaultNewAllocatorv+0x4e>
 800ed10:	480c      	ldr	r0, [pc, #48]	; (800ed44 <_Z19defaultNewAllocatorv+0x54>)
 800ed12:	f00f fc0d 	bl	801e530 <__cxa_guard_acquire>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00b      	beq.n	800ed3e <_Z19defaultNewAllocatorv+0x4e>
 800ed26:	4b08      	ldr	r3, [pc, #32]	; (800ed48 <_Z19defaultNewAllocatorv+0x58>)
 800ed28:	4a08      	ldr	r2, [pc, #32]	; (800ed4c <_Z19defaultNewAllocatorv+0x5c>)
 800ed2a:	4909      	ldr	r1, [pc, #36]	; (800ed50 <_Z19defaultNewAllocatorv+0x60>)
 800ed2c:	4809      	ldr	r0, [pc, #36]	; (800ed54 <_Z19defaultNewAllocatorv+0x64>)
 800ed2e:	f000 f8c5 	bl	800eebc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ed32:	4804      	ldr	r0, [pc, #16]	; (800ed44 <_Z19defaultNewAllocatorv+0x54>)
 800ed34:	f00f fc08 	bl	801e548 <__cxa_guard_release>
 800ed38:	4807      	ldr	r0, [pc, #28]	; (800ed58 <_Z19defaultNewAllocatorv+0x68>)
 800ed3a:	f00f fc2c 	bl	801e596 <atexit>
    return &allocator;
 800ed3e:	4b05      	ldr	r3, [pc, #20]	; (800ed54 <_Z19defaultNewAllocatorv+0x64>)
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	200007c8 	.word	0x200007c8
 800ed48:	080230ec 	.word	0x080230ec
 800ed4c:	080230f4 	.word	0x080230f4
 800ed50:	080230f8 	.word	0x080230f8
 800ed54:	200007b4 	.word	0x200007b4
 800ed58:	0800ece1 	.word	0x0800ece1

0800ed5c <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800ed60:	4b04      	ldr	r3, [pc, #16]	; (800ed74 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <_Z27getCurrentNewArrayAllocatorv+0x10>
 800ed68:	f000 f806 	bl	800ed78 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800ed6c:	4b01      	ldr	r3, [pc, #4]	; (800ed74 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800ed6e:	681b      	ldr	r3, [r3, #0]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	bd80      	pop	{r7, pc}
 800ed74:	200007ac 	.word	0x200007ac

0800ed78 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800ed7c:	f000 f810 	bl	800eda0 <_Z24defaultNewArrayAllocatorv>
 800ed80:	4603      	mov	r3, r0
 800ed82:	4a02      	ldr	r2, [pc, #8]	; (800ed8c <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800ed84:	6013      	str	r3, [r2, #0]
}
 800ed86:	bf00      	nop
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	200007ac 	.word	0x200007ac

0800ed90 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800ed90:	b580      	push	{r7, lr}
 800ed92:	af00      	add	r7, sp, #0
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__tcf_1+0xc>)
 800ed96:	f000 f8b1 	bl	800eefc <_ZN19TestMemoryAllocatorD1Ev>
 800ed9a:	bd80      	pop	{r7, pc}
 800ed9c:	200007cc 	.word	0x200007cc

0800eda0 <_Z24defaultNewArrayAllocatorv>:
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800eda4:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	f3bf 8f5b 	dmb	ish
 800edac:	b2db      	uxtb	r3, r3
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	bf0c      	ite	eq
 800edb6:	2301      	moveq	r3, #1
 800edb8:	2300      	movne	r3, #0
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d016      	beq.n	800edee <_Z24defaultNewArrayAllocatorv+0x4e>
 800edc0:	480c      	ldr	r0, [pc, #48]	; (800edf4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800edc2:	f00f fbb5 	bl	801e530 <__cxa_guard_acquire>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	bf14      	ite	ne
 800edcc:	2301      	movne	r3, #1
 800edce:	2300      	moveq	r3, #0
 800edd0:	b2db      	uxtb	r3, r3
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d00b      	beq.n	800edee <_Z24defaultNewArrayAllocatorv+0x4e>
 800edd6:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <_Z24defaultNewArrayAllocatorv+0x58>)
 800edd8:	4a08      	ldr	r2, [pc, #32]	; (800edfc <_Z24defaultNewArrayAllocatorv+0x5c>)
 800edda:	4909      	ldr	r1, [pc, #36]	; (800ee00 <_Z24defaultNewArrayAllocatorv+0x60>)
 800eddc:	4809      	ldr	r0, [pc, #36]	; (800ee04 <_Z24defaultNewArrayAllocatorv+0x64>)
 800edde:	f000 f86d 	bl	800eebc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ede2:	4804      	ldr	r0, [pc, #16]	; (800edf4 <_Z24defaultNewArrayAllocatorv+0x54>)
 800ede4:	f00f fbb0 	bl	801e548 <__cxa_guard_release>
 800ede8:	4807      	ldr	r0, [pc, #28]	; (800ee08 <_Z24defaultNewArrayAllocatorv+0x68>)
 800edea:	f00f fbd4 	bl	801e596 <atexit>
    return &allocator;
 800edee:	4b05      	ldr	r3, [pc, #20]	; (800ee04 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	bd80      	pop	{r7, pc}
 800edf4:	200007e0 	.word	0x200007e0
 800edf8:	08023110 	.word	0x08023110
 800edfc:	0802311c 	.word	0x0802311c
 800ee00:	08023124 	.word	0x08023124
 800ee04:	200007cc 	.word	0x200007cc
 800ee08:	0800ed91 	.word	0x0800ed91

0800ee0c <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800ee10:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <_Z25getCurrentMallocAllocatorv+0x18>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d101      	bne.n	800ee1c <_Z25getCurrentMallocAllocatorv+0x10>
 800ee18:	f000 f806 	bl	800ee28 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800ee1c:	4b01      	ldr	r3, [pc, #4]	; (800ee24 <_Z25getCurrentMallocAllocatorv+0x18>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	200007b0 	.word	0x200007b0

0800ee28 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800ee2c:	f000 f810 	bl	800ee50 <_Z22defaultMallocAllocatorv>
 800ee30:	4603      	mov	r3, r0
 800ee32:	4a02      	ldr	r2, [pc, #8]	; (800ee3c <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800ee34:	6013      	str	r3, [r2, #0]
}
 800ee36:	bf00      	nop
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	200007b0 	.word	0x200007b0

0800ee40 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ee40:	b580      	push	{r7, lr}
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	4801      	ldr	r0, [pc, #4]	; (800ee4c <__tcf_2+0xc>)
 800ee46:	f000 f859 	bl	800eefc <_ZN19TestMemoryAllocatorD1Ev>
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	200007e4 	.word	0x200007e4

0800ee50 <_Z22defaultMallocAllocatorv>:
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800ee54:	4b13      	ldr	r3, [pc, #76]	; (800eea4 <_Z22defaultMallocAllocatorv+0x54>)
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	f3bf 8f5b 	dmb	ish
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	bf0c      	ite	eq
 800ee66:	2301      	moveq	r3, #1
 800ee68:	2300      	movne	r3, #0
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d016      	beq.n	800ee9e <_Z22defaultMallocAllocatorv+0x4e>
 800ee70:	480c      	ldr	r0, [pc, #48]	; (800eea4 <_Z22defaultMallocAllocatorv+0x54>)
 800ee72:	f00f fb5d 	bl	801e530 <__cxa_guard_acquire>
 800ee76:	4603      	mov	r3, r0
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	bf14      	ite	ne
 800ee7c:	2301      	movne	r3, #1
 800ee7e:	2300      	moveq	r3, #0
 800ee80:	b2db      	uxtb	r3, r3
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d00b      	beq.n	800ee9e <_Z22defaultMallocAllocatorv+0x4e>
 800ee86:	4b08      	ldr	r3, [pc, #32]	; (800eea8 <_Z22defaultMallocAllocatorv+0x58>)
 800ee88:	4a08      	ldr	r2, [pc, #32]	; (800eeac <_Z22defaultMallocAllocatorv+0x5c>)
 800ee8a:	4909      	ldr	r1, [pc, #36]	; (800eeb0 <_Z22defaultMallocAllocatorv+0x60>)
 800ee8c:	4809      	ldr	r0, [pc, #36]	; (800eeb4 <_Z22defaultMallocAllocatorv+0x64>)
 800ee8e:	f000 f815 	bl	800eebc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800ee92:	4804      	ldr	r0, [pc, #16]	; (800eea4 <_Z22defaultMallocAllocatorv+0x54>)
 800ee94:	f00f fb58 	bl	801e548 <__cxa_guard_release>
 800ee98:	4807      	ldr	r0, [pc, #28]	; (800eeb8 <_Z22defaultMallocAllocatorv+0x68>)
 800ee9a:	f00f fb7c 	bl	801e596 <atexit>
    return &allocator;
 800ee9e:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <_Z22defaultMallocAllocatorv+0x64>)
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	bd80      	pop	{r7, pc}
 800eea4:	200007f8 	.word	0x200007f8
 800eea8:	08023140 	.word	0x08023140
 800eeac:	08023148 	.word	0x08023148
 800eeb0:	08023150 	.word	0x08023150
 800eeb4:	200007e4 	.word	0x200007e4
 800eeb8:	0800ee41 	.word	0x0800ee41

0800eebc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]
 800eec8:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800eeca:	4a0b      	ldr	r2, [pc, #44]	; (800eef8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	601a      	str	r2, [r3, #0]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	68ba      	ldr	r2, [r7, #8]
 800eed4:	605a      	str	r2, [r3, #4]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	609a      	str	r2, [r3, #8]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	683a      	ldr	r2, [r7, #0]
 800eee0:	60da      	str	r2, [r3, #12]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	741a      	strb	r2, [r3, #16]
{
}
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	4618      	mov	r0, r3
 800eeec:	3714      	adds	r7, #20
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr
 800eef6:	bf00      	nop
 800eef8:	08026874 	.word	0x08026874

0800eefc <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800eefc:	b480      	push	{r7}
 800eefe:	b083      	sub	sp, #12
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	4a06      	ldr	r2, [pc, #24]	; (800ef20 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	741a      	strb	r2, [r3, #16]
}
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4618      	mov	r0, r3
 800ef14:	370c      	adds	r7, #12
 800ef16:	46bd      	mov	sp, r7
 800ef18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef1c:	4770      	bx	lr
 800ef1e:	bf00      	nop
 800ef20:	08026874 	.word	0x08026874

0800ef24 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
}
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f7ff ffe5 	bl	800eefc <_ZN19TestMemoryAllocatorD1Ev>
 800ef32:	2114      	movs	r1, #20
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7fa f88d 	bl	8009054 <_ZdlPvj>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3708      	adds	r7, #8
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800ef44:	b480      	push	{r7}
 800ef46:	b083      	sub	sp, #12
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	7c1b      	ldrb	r3, [r3, #16]
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800ef5c:	b590      	push	{r4, r7, lr}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	3310      	adds	r3, #16
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	4798      	blx	r3
 800ef72:	4604      	mov	r4, r0
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	3310      	adds	r3, #16
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6838      	ldr	r0, [r7, #0]
 800ef7e:	4798      	blx	r3
 800ef80:	4603      	mov	r3, r0
 800ef82:	4619      	mov	r1, r3
 800ef84:	4620      	mov	r0, r4
 800ef86:	f7fc fa51 	bl	800b42c <_ZN12SimpleString6StrCmpEPKcS1_>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	bf0c      	ite	eq
 800ef90:	2301      	moveq	r3, #1
 800ef92:	2300      	movne	r3, #0
 800ef94:	b2db      	uxtb	r3, r3
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd90      	pop	{r4, r7, pc}
	...

0800efa0 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800efa0:	b590      	push	{r4, r7, lr}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	3308      	adds	r3, #8
 800efb0:	681c      	ldr	r4, [r3, #0]
 800efb2:	2301      	movs	r3, #1
 800efb4:	4a04      	ldr	r2, [pc, #16]	; (800efc8 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	47a0      	blx	r4
 800efbc:	4603      	mov	r3, r0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	370c      	adds	r7, #12
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd90      	pop	{r4, r7, pc}
 800efc6:	bf00      	nop
 800efc8:	0802316c 	.word	0x0802316c

0800efcc <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800efcc:	b590      	push	{r4, r7, lr}
 800efce:	b085      	sub	sp, #20
 800efd0:	af02      	add	r7, sp, #8
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	330c      	adds	r3, #12
 800efdc:	681c      	ldr	r4, [r3, #0]
 800efde:	2301      	movs	r3, #1
 800efe0:	9300      	str	r3, [sp, #0]
 800efe2:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	6839      	ldr	r1, [r7, #0]
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	47a0      	blx	r4
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd90      	pop	{r4, r7, pc}
 800eff4:	0802316c 	.word	0x0802316c

0800eff8 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	60f8      	str	r0, [r7, #12]
 800f000:	60b9      	str	r1, [r7, #8]
 800f002:	607a      	str	r2, [r7, #4]
 800f004:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800f006:	68b8      	ldr	r0, [r7, #8]
 800f008:	f7ff fe2a 	bl	800ec60 <_ZL13checkedMallocj>
 800f00c:	4603      	mov	r3, r0
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
	...

0800f018 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
 800f024:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800f026:	4b04      	ldr	r3, [pc, #16]	; (800f038 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	68b8      	ldr	r0, [r7, #8]
 800f02c:	4798      	blx	r3
}
 800f02e:	bf00      	nop
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}
 800f036:	bf00      	nop
 800f038:	200000d4 	.word	0x200000d4

0800f03c <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
    return name_;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	370c      	adds	r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f052:	4770      	bx	lr

0800f054 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
}
 800f060:	4618      	mov	r0, r3
 800f062:	370c      	adds	r7, #12
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
    return free_name_;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	68db      	ldr	r3, [r3, #12]
}
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
    return this;
 800f08c:	687b      	ldr	r3, [r7, #4]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	370c      	adds	r7, #12
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
	...

0800f09c <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	4a05      	ldr	r2, [pc, #20]	; (800f0bc <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7ff ff25 	bl	800eefc <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	08026840 	.word	0x08026840

0800f0c0 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
}
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7ff ffe7 	bl	800f09c <_ZN20NullUnknownAllocatorD1Ev>
 800f0ce:	2114      	movs	r1, #20
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f7f9 ffbf 	bl	8009054 <_ZdlPvj>
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800f0ee:	2300      	movs	r3, #0
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3714      	adds	r7, #20
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr

0800f0fc <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
}
 800f10a:	bf00      	nop
 800f10c:	3714      	adds	r7, #20
 800f10e:	46bd      	mov	sp, r7
 800f110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f114:	4770      	bx	lr
	...

0800f118 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	4b06      	ldr	r3, [pc, #24]	; (800f13c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800f124:	4a05      	ldr	r2, [pc, #20]	; (800f13c <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800f126:	4906      	ldr	r1, [pc, #24]	; (800f140 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800f128:	f7ff fec8 	bl	800eebc <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800f12c:	4a05      	ldr	r2, [pc, #20]	; (800f144 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	601a      	str	r2, [r3, #0]
{
}
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4618      	mov	r0, r3
 800f136:	3708      	adds	r7, #8
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	080231a0 	.word	0x080231a0
 800f140:	080231a8 	.word	0x080231a8
 800f144:	08026840 	.word	0x08026840

0800f148 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800f148:	b580      	push	{r7, lr}
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	4801      	ldr	r0, [pc, #4]	; (800f154 <__tcf_3+0xc>)
 800f14e:	f7ff ffa5 	bl	800f09c <_ZN20NullUnknownAllocatorD1Ev>
 800f152:	bd80      	pop	{r7, pc}
 800f154:	200007fc 	.word	0x200007fc

0800f158 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800f15c:	4b12      	ldr	r3, [pc, #72]	; (800f1a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	f3bf 8f5b 	dmb	ish
 800f164:	b2db      	uxtb	r3, r3
 800f166:	f003 0301 	and.w	r3, r3, #1
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	bf0c      	ite	eq
 800f16e:	2301      	moveq	r3, #1
 800f170:	2300      	movne	r3, #0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	2b00      	cmp	r3, #0
 800f176:	d013      	beq.n	800f1a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800f178:	480b      	ldr	r0, [pc, #44]	; (800f1a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800f17a:	f00f f9d9 	bl	801e530 <__cxa_guard_acquire>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	bf14      	ite	ne
 800f184:	2301      	movne	r3, #1
 800f186:	2300      	moveq	r3, #0
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d008      	beq.n	800f1a0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800f18e:	4807      	ldr	r0, [pc, #28]	; (800f1ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800f190:	f7ff ffc2 	bl	800f118 <_ZN20NullUnknownAllocatorC1Ev>
 800f194:	4804      	ldr	r0, [pc, #16]	; (800f1a8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800f196:	f00f f9d7 	bl	801e548 <__cxa_guard_release>
 800f19a:	4805      	ldr	r0, [pc, #20]	; (800f1b0 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800f19c:	f00f f9fb 	bl	801e596 <atexit>
    return &allocator;
 800f1a0:	4b02      	ldr	r3, [pc, #8]	; (800f1ac <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	20000810 	.word	0x20000810
 800f1ac:	200007fc 	.word	0x200007fc
 800f1b0:	0800f149 	.word	0x0800f149

0800f1b4 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
        return testCount_;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	689b      	ldr	r3, [r3, #8]
    }
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	370c      	adds	r7, #12
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ca:	4770      	bx	lr

0800f1cc <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	699b      	ldr	r3, [r3, #24]
    }
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800f1e8:	4b05      	ldr	r3, [pc, #20]	; (800f200 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	2b02      	cmp	r3, #2
 800f1ee:	d103      	bne.n	800f1f8 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800f1f0:	f004 fa4a 	bl	8013688 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	e001      	b.n	800f1fc <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800f1f8:	4b01      	ldr	r3, [pc, #4]	; (800f200 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	bd80      	pop	{r7, pc}
 800f200:	2000008c 	.word	0x2000008c

0800f204 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800f20c:	4a0a      	ldr	r2, [pc, #40]	; (800f238 <_ZN10TestOutputC1Ev+0x34>)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	2200      	movs	r2, #0
 800f216:	605a      	str	r2, [r3, #4]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2200      	movs	r2, #0
 800f21c:	721a      	strb	r2, [r3, #8]
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	725a      	strb	r2, [r3, #9]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a05      	ldr	r2, [pc, #20]	; (800f23c <_ZN10TestOutputC1Ev+0x38>)
 800f228:	60da      	str	r2, [r3, #12]
{
}
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4618      	mov	r0, r3
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr
 800f238:	08026978 	.word	0x08026978
 800f23c:	080235a8 	.word	0x080235a8

0800f240 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	4a04      	ldr	r2, [pc, #16]	; (800f25c <_ZN10TestOutputD1Ev+0x1c>)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	601a      	str	r2, [r3, #0]
{
}
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4618      	mov	r0, r3
 800f252:	370c      	adds	r7, #12
 800f254:	46bd      	mov	sp, r7
 800f256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f25a:	4770      	bx	lr
 800f25c:	08026978 	.word	0x08026978

0800f260 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
 800f268:	460b      	mov	r3, r1
 800f26a:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	78fa      	ldrb	r2, [r7, #3]
 800f270:	721a      	strb	r2, [r3, #8]
}
 800f272:	bf00      	nop
 800f274:	370c      	adds	r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800f27e:	b480      	push	{r7}
 800f280:	b083      	sub	sp, #12
 800f282:	af00      	add	r7, sp, #0
 800f284:	6078      	str	r0, [r7, #4]
    color_ = true;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	2201      	movs	r2, #1
 800f28a:	725a      	strb	r2, [r3, #9]
}
 800f28c:	bf00      	nop
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3328      	adds	r3, #40	; 0x28
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	6839      	ldr	r1, [r7, #0]
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	4798      	blx	r3
}
 800f2b0:	bf00      	nop
 800f2b2:	3708      	adds	r7, #8
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800f2b8:	b590      	push	{r4, r7, lr}
 800f2ba:	b085      	sub	sp, #20
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	332c      	adds	r3, #44	; 0x2c
 800f2c8:	681c      	ldr	r4, [r3, #0]
 800f2ca:	f107 0308 	add.w	r3, r7, #8
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fd f8ff 	bl	800c4d4 <_Z10StringFroml>
 800f2d6:	f107 0308 	add.w	r3, r7, #8
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fc fdf4 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	4619      	mov	r1, r3
 800f2e4:	6878      	ldr	r0, [r7, #4]
 800f2e6:	47a0      	blx	r4
 800f2e8:	f107 0308 	add.w	r3, r7, #8
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7fc fe18 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f2f2:	bf00      	nop
 800f2f4:	3714      	adds	r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd90      	pop	{r4, r7, pc}

0800f2fa <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800f2fa:	b590      	push	{r4, r7, lr}
 800f2fc:	b085      	sub	sp, #20
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	332c      	adds	r3, #44	; 0x2c
 800f30a:	681c      	ldr	r4, [r3, #0]
 800f30c:	f107 0308 	add.w	r3, r7, #8
 800f310:	6839      	ldr	r1, [r7, #0]
 800f312:	4618      	mov	r0, r3
 800f314:	f7fd fb34 	bl	800c980 <_Z10StringFromj>
 800f318:	f107 0308 	add.w	r3, r7, #8
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fc fdd3 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f322:	4603      	mov	r3, r0
 800f324:	4619      	mov	r1, r3
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	47a0      	blx	r4
 800f32a:	f107 0308 	add.w	r3, r7, #8
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fc fdf7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f334:	bf00      	nop
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd90      	pop	{r4, r7, pc}

0800f33c <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800f33c:	b590      	push	{r4, r7, lr}
 800f33e:	b087      	sub	sp, #28
 800f340:	af00      	add	r7, sp, #0
 800f342:	60f8      	str	r0, [r7, #12]
 800f344:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	332c      	adds	r3, #44	; 0x2c
 800f34e:	681c      	ldr	r4, [r3, #0]
 800f350:	f107 0310 	add.w	r3, r7, #16
 800f354:	2106      	movs	r1, #6
 800f356:	ed97 0b00 	vldr	d0, [r7]
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7fd faa6 	bl	800c8ac <_Z10StringFromdi>
 800f360:	f107 0310 	add.w	r3, r7, #16
 800f364:	4618      	mov	r0, r3
 800f366:	f7fc fdaf 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f36a:	4603      	mov	r3, r0
 800f36c:	4619      	mov	r1, r3
 800f36e:	68f8      	ldr	r0, [r7, #12]
 800f370:	47a0      	blx	r4
 800f372:	f107 0310 	add.w	r3, r7, #16
 800f376:	4618      	mov	r0, r3
 800f378:	f7fc fdd3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f37c:	bf00      	nop
 800f37e:	371c      	adds	r7, #28
 800f380:	46bd      	mov	sp, r7
 800f382:	bd90      	pop	{r4, r7, pc}

0800f384 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b082      	sub	sp, #8
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
    p.print(s);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	332c      	adds	r3, #44	; 0x2c
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	4798      	blx	r3
    return p;
 800f39c:	687b      	ldr	r3, [r7, #4]
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}
	...

0800f3a8 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800f3a8:	b590      	push	{r4, r7, lr}
 800f3aa:	b085      	sub	sp, #20
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	7a1b      	ldrb	r3, [r3, #8]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d01a      	beq.n	800f3f0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	332c      	adds	r3, #44	; 0x2c
 800f3c0:	681c      	ldr	r4, [r3, #0]
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	3314      	adds	r3, #20
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f107 0208 	add.w	r2, r7, #8
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	4610      	mov	r0, r2
 800f3d2:	4798      	blx	r3
 800f3d4:	f107 0308 	add.w	r3, r7, #8
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f7fc fd75 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	47a0      	blx	r4
 800f3e6:	f107 0308 	add.w	r3, r7, #8
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7fc fd99 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	3318      	adds	r3, #24
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	6838      	ldr	r0, [r7, #0]
 800f3fa:	4798      	blx	r3
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d007      	beq.n	800f412 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	3344      	adds	r3, #68	; 0x44
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	4907      	ldr	r1, [pc, #28]	; (800f428 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800f410:	e006      	b.n	800f420 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	3344      	adds	r3, #68	; 0x44
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	4904      	ldr	r1, [pc, #16]	; (800f42c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	4798      	blx	r3
}
 800f420:	bf00      	nop
 800f422:	3714      	adds	r7, #20
 800f424:	46bd      	mov	sp, r7
 800f426:	bd90      	pop	{r4, r7, pc}
 800f428:	080235a8 	.word	0x080235a8
 800f42c:	080235ac 	.word	0x080235ac

0800f430 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800f430:	b590      	push	{r4, r7, lr}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	7a1b      	ldrb	r3, [r3, #8]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d019      	beq.n	800f476 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	332c      	adds	r3, #44	; 0x2c
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	4910      	ldr	r1, [pc, #64]	; (800f48c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	3334      	adds	r3, #52	; 0x34
 800f456:	681c      	ldr	r4, [r3, #0]
 800f458:	6838      	ldr	r0, [r7, #0]
 800f45a:	f002 f845 	bl	80114e8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800f45e:	4603      	mov	r3, r0
 800f460:	4619      	mov	r1, r3
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	47a0      	blx	r4
        print(" ms\n");
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	332c      	adds	r3, #44	; 0x2c
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	4908      	ldr	r1, [pc, #32]	; (800f490 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800f474:	e005      	b.n	800f482 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	3358      	adds	r3, #88	; 0x58
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	4798      	blx	r3
}
 800f482:	bf00      	nop
 800f484:	370c      	adds	r7, #12
 800f486:	46bd      	mov	sp, r7
 800f488:	bd90      	pop	{r4, r7, pc}
 800f48a:	bf00      	nop
 800f48c:	080235b0 	.word	0x080235b0
 800f490:	080235b4 	.word	0x080235b4

0800f494 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	332c      	adds	r3, #44	; 0x2c
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	68d2      	ldr	r2, [r2, #12]
 800f4a8:	4611      	mov	r1, r2
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	1c5a      	adds	r2, r3, #1
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	605a      	str	r2, [r3, #4]
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	685a      	ldr	r2, [r3, #4]
 800f4bc:	4b0d      	ldr	r3, [pc, #52]	; (800f4f4 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800f4be:	fb83 1302 	smull	r1, r3, r3, r2
 800f4c2:	1119      	asrs	r1, r3, #4
 800f4c4:	17d3      	asrs	r3, r2, #31
 800f4c6:	1acb      	subs	r3, r1, r3
 800f4c8:	2132      	movs	r1, #50	; 0x32
 800f4ca:	fb01 f303 	mul.w	r3, r1, r3
 800f4ce:	1ad3      	subs	r3, r2, r3
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	bf0c      	ite	eq
 800f4d4:	2301      	moveq	r3, #1
 800f4d6:	2300      	movne	r3, #0
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	332c      	adds	r3, #44	; 0x2c
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	4904      	ldr	r1, [pc, #16]	; (800f4f8 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	4798      	blx	r3
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	51eb851f 	.word	0x51eb851f
 800f4f8:	080235bc 	.word	0x080235bc

0800f4fc <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800f4fc:	b480      	push	{r7}
 800f4fe:	b083      	sub	sp, #12
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	683a      	ldr	r2, [r7, #0]
 800f50a:	60da      	str	r2, [r3, #12]
}
 800f50c:	bf00      	nop
 800f50e:	370c      	adds	r7, #12
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
}
 800f520:	bf00      	nop
 800f522:	370c      	adds	r7, #12
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
}
 800f536:	bf00      	nop
 800f538:	370c      	adds	r7, #12
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr

0800f542 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800f542:	b480      	push	{r7}
 800f544:	b083      	sub	sp, #12
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
}
 800f54c:	bf00      	nop
 800f54e:	370c      	adds	r7, #12
 800f550:	46bd      	mov	sp, r7
 800f552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f556:	4770      	bx	lr

0800f558 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800f558:	b590      	push	{r4, r7, lr}
 800f55a:	b085      	sub	sp, #20
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
    print("\n");
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	332c      	adds	r3, #44	; 0x2c
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	496f      	ldr	r1, [pc, #444]	; (800f728 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800f570:	6838      	ldr	r0, [r7, #0]
 800f572:	f7f8 f83d 	bl	80075f0 <_ZNK10TestResult9isFailureEv>
 800f576:	4603      	mov	r3, r0
 800f578:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800f57a:	6838      	ldr	r0, [r7, #0]
 800f57c:	f7f8 f82c 	bl	80075d8 <_ZNK10TestResult15getFailureCountEv>
 800f580:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800f582:	7bfb      	ldrb	r3, [r7, #15]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d02b      	beq.n	800f5e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	7a5b      	ldrb	r3, [r3, #9]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d006      	beq.n	800f59e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	332c      	adds	r3, #44	; 0x2c
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4964      	ldr	r1, [pc, #400]	; (800f72c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	4798      	blx	r3
        }
        print("Errors (");
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	332c      	adds	r3, #44	; 0x2c
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4962      	ldr	r1, [pc, #392]	; (800f730 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	4798      	blx	r3
        if (failureCount > 0) {
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00e      	beq.n	800f5d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	3334      	adds	r3, #52	; 0x34
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	68b9      	ldr	r1, [r7, #8]
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	4798      	blx	r3
            print(" failures, ");
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	332c      	adds	r3, #44	; 0x2c
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	495a      	ldr	r1, [pc, #360]	; (800f734 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	4798      	blx	r3
 800f5ce:	e019      	b.n	800f604 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	332c      	adds	r3, #44	; 0x2c
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4957      	ldr	r1, [pc, #348]	; (800f738 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	4798      	blx	r3
 800f5de:	e011      	b.n	800f604 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	7a5b      	ldrb	r3, [r3, #9]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d006      	beq.n	800f5f6 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	332c      	adds	r3, #44	; 0x2c
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4952      	ldr	r1, [pc, #328]	; (800f73c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	4798      	blx	r3
        }
        print("OK (");
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	332c      	adds	r3, #44	; 0x2c
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4950      	ldr	r1, [pc, #320]	; (800f740 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	4798      	blx	r3
    }
    print(result.getTestCount());
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	3334      	adds	r3, #52	; 0x34
 800f60a:	681c      	ldr	r4, [r3, #0]
 800f60c:	6838      	ldr	r0, [r7, #0]
 800f60e:	f7ff fdd1 	bl	800f1b4 <_ZNK10TestResult12getTestCountEv>
 800f612:	4603      	mov	r3, r0
 800f614:	4619      	mov	r1, r3
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	47a0      	blx	r4
    print(" tests, ");
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	332c      	adds	r3, #44	; 0x2c
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	4948      	ldr	r1, [pc, #288]	; (800f744 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	4798      	blx	r3
    print(result.getRunCount());
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	3334      	adds	r3, #52	; 0x34
 800f62e:	681c      	ldr	r4, [r3, #0]
 800f630:	6838      	ldr	r0, [r7, #0]
 800f632:	f7f7 ffb9 	bl	80075a8 <_ZNK10TestResult11getRunCountEv>
 800f636:	4603      	mov	r3, r0
 800f638:	4619      	mov	r1, r3
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	47a0      	blx	r4
    print(" ran, ");
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	332c      	adds	r3, #44	; 0x2c
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	4940      	ldr	r1, [pc, #256]	; (800f748 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	4798      	blx	r3
    print(result.getCheckCount());
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	3334      	adds	r3, #52	; 0x34
 800f652:	681c      	ldr	r4, [r3, #0]
 800f654:	6838      	ldr	r0, [r7, #0]
 800f656:	f7f8 fc13 	bl	8007e80 <_ZNK10TestResult13getCheckCountEv>
 800f65a:	4603      	mov	r3, r0
 800f65c:	4619      	mov	r1, r3
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	47a0      	blx	r4
    print(" checks, ");
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	332c      	adds	r3, #44	; 0x2c
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	4938      	ldr	r1, [pc, #224]	; (800f74c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	4798      	blx	r3
    print(result.getIgnoredCount());
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	3334      	adds	r3, #52	; 0x34
 800f676:	681c      	ldr	r4, [r3, #0]
 800f678:	6838      	ldr	r0, [r7, #0]
 800f67a:	f7f7 ffa1 	bl	80075c0 <_ZNK10TestResult15getIgnoredCountEv>
 800f67e:	4603      	mov	r3, r0
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	47a0      	blx	r4
    print(" ignored, ");
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	332c      	adds	r3, #44	; 0x2c
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	4930      	ldr	r1, [pc, #192]	; (800f750 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3334      	adds	r3, #52	; 0x34
 800f69a:	681c      	ldr	r4, [r3, #0]
 800f69c:	6838      	ldr	r0, [r7, #0]
 800f69e:	f7ff fd95 	bl	800f1cc <_ZNK10TestResult19getFilteredOutCountEv>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	47a0      	blx	r4
    print(" filtered out, ");
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	332c      	adds	r3, #44	; 0x2c
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	4928      	ldr	r1, [pc, #160]	; (800f754 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	3334      	adds	r3, #52	; 0x34
 800f6be:	681c      	ldr	r4, [r3, #0]
 800f6c0:	6838      	ldr	r0, [r7, #0]
 800f6c2:	f001 ff05 	bl	80114d0 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	6878      	ldr	r0, [r7, #4]
 800f6cc:	47a0      	blx	r4
    print(" ms)");
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	332c      	adds	r3, #44	; 0x2c
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4920      	ldr	r1, [pc, #128]	; (800f758 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	4798      	blx	r3
    if (color_) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7a5b      	ldrb	r3, [r3, #9]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d006      	beq.n	800f6f2 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	332c      	adds	r3, #44	; 0x2c
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	491b      	ldr	r1, [pc, #108]	; (800f75c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800f6f2:	7bfb      	ldrb	r3, [r7, #15]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d009      	beq.n	800f70c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d106      	bne.n	800f70c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	332c      	adds	r3, #44	; 0x2c
 800f704:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800f706:	4916      	ldr	r1, [pc, #88]	; (800f760 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	4798      	blx	r3
    }
    print("\n\n");
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	332c      	adds	r3, #44	; 0x2c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	4913      	ldr	r1, [pc, #76]	; (800f764 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	4798      	blx	r3

    dotCount_ = 0;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	605a      	str	r2, [r3, #4]
}
 800f720:	bf00      	nop
 800f722:	3714      	adds	r7, #20
 800f724:	46bd      	mov	sp, r7
 800f726:	bd90      	pop	{r4, r7, pc}
 800f728:	080235bc 	.word	0x080235bc
 800f72c:	080235c0 	.word	0x080235c0
 800f730:	080235c8 	.word	0x080235c8
 800f734:	080235d4 	.word	0x080235d4
 800f738:	080235e0 	.word	0x080235e0
 800f73c:	080235f0 	.word	0x080235f0
 800f740:	080235f8 	.word	0x080235f8
 800f744:	08023600 	.word	0x08023600
 800f748:	0802360c 	.word	0x0802360c
 800f74c:	08023614 	.word	0x08023614
 800f750:	08023620 	.word	0x08023620
 800f754:	0802362c 	.word	0x0802362c
 800f758:	0802363c 	.word	0x0802363c
 800f75c:	08023644 	.word	0x08023644
 800f760:	08023648 	.word	0x08023648
 800f764:	080236ec 	.word	0x080236ec

0800f768 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	60f8      	str	r0, [r7, #12]
 800f770:	60b9      	str	r1, [r7, #8]
 800f772:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2b01      	cmp	r3, #1
 800f778:	d922      	bls.n	800f7c0 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	332c      	adds	r3, #44	; 0x2c
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	4911      	ldr	r1, [pc, #68]	; (800f7c8 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	4798      	blx	r3
        print(number);
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3334      	adds	r3, #52	; 0x34
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	68b9      	ldr	r1, [r7, #8]
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	4798      	blx	r3
        print(" of ");
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	332c      	adds	r3, #44	; 0x2c
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	490b      	ldr	r1, [pc, #44]	; (800f7cc <_ZN10TestOutput12printTestRunEjj+0x64>)
 800f7a0:	68f8      	ldr	r0, [r7, #12]
 800f7a2:	4798      	blx	r3
        print(total);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	3334      	adds	r3, #52	; 0x34
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	6879      	ldr	r1, [r7, #4]
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	4798      	blx	r3
        print("\n");
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	332c      	adds	r3, #44	; 0x2c
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4905      	ldr	r1, [pc, #20]	; (800f7d0 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800f7bc:	68f8      	ldr	r0, [r7, #12]
 800f7be:	4798      	blx	r3
    }
}
 800f7c0:	bf00      	nop
 800f7c2:	3710      	adds	r7, #16
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bd80      	pop	{r7, pc}
 800f7c8:	080236f0 	.word	0x080236f0
 800f7cc:	080236fc 	.word	0x080236fc
 800f7d0:	080235bc 	.word	0x080235bc

0800f7d4 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b084      	sub	sp, #16
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800f7de:	6838      	ldr	r0, [r7, #0]
 800f7e0:	f7fd ffa1 	bl	800d726 <_ZNK11TestFailure17isOutsideTestFileEv>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d105      	bne.n	800f7f6 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800f7ea:	6838      	ldr	r0, [r7, #0]
 800f7ec:	f7fd ffad 	bl	800d74a <_ZNK11TestFailure18isInHelperFunctionEv>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d001      	beq.n	800f7fa <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800f7f6:	2301      	movs	r3, #1
 800f7f8:	e000      	b.n	800f7fc <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d004      	beq.n	800f80a <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800f800:	6839      	ldr	r1, [r7, #0]
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 f81d 	bl	800f842 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800f808:	e003      	b.n	800f812 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f86b 	bl	800f8e8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	3318      	adds	r3, #24
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f107 0208 	add.w	r2, r7, #8
 800f81e:	6839      	ldr	r1, [r7, #0]
 800f820:	4610      	mov	r0, r2
 800f822:	4798      	blx	r3
 800f824:	f107 0308 	add.w	r3, r7, #8
 800f828:	4619      	mov	r1, r3
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f8b2 	bl	800f994 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4618      	mov	r0, r3
 800f836:	f7fc fb74 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f83a:	bf00      	nop
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b088      	sub	sp, #32
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
 800f84a:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	331c      	adds	r3, #28
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	f107 0208 	add.w	r2, r7, #8
 800f858:	6839      	ldr	r1, [r7, #0]
 800f85a:	4610      	mov	r0, r2
 800f85c:	4798      	blx	r3
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	3320      	adds	r3, #32
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	6838      	ldr	r0, [r7, #0]
 800f868:	4798      	blx	r3
 800f86a:	4602      	mov	r2, r0
 800f86c:	f107 0308 	add.w	r3, r7, #8
 800f870:	4619      	mov	r1, r3
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f8be 	bl	800f9f4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f878:	f107 0308 	add.w	r3, r7, #8
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fc fb50 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	330c      	adds	r3, #12
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	f107 0210 	add.w	r2, r7, #16
 800f88e:	6839      	ldr	r1, [r7, #0]
 800f890:	4610      	mov	r0, r2
 800f892:	4798      	blx	r3
 800f894:	f107 0310 	add.w	r3, r7, #16
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f000 f85c 	bl	800f958 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f8a0:	f107 0310 	add.w	r3, r7, #16
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fc fb3c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	3308      	adds	r3, #8
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	f107 0218 	add.w	r2, r7, #24
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	4798      	blx	r3
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	3314      	adds	r3, #20
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	6838      	ldr	r0, [r7, #0]
 800f8c6:	4798      	blx	r3
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	f107 0318 	add.w	r3, r7, #24
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 f88f 	bl	800f9f4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f8d6:	f107 0318 	add.w	r3, r7, #24
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fc fb21 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f8e0:	bf00      	nop
 800f8e2:	3720      	adds	r7, #32
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
 800f8f0:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	3308      	adds	r3, #8
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f107 0208 	add.w	r2, r7, #8
 800f8fe:	6839      	ldr	r1, [r7, #0]
 800f900:	4610      	mov	r0, r2
 800f902:	4798      	blx	r3
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	3314      	adds	r3, #20
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	6838      	ldr	r0, [r7, #0]
 800f90e:	4798      	blx	r3
 800f910:	4602      	mov	r2, r0
 800f912:	f107 0308 	add.w	r3, r7, #8
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f000 f86b 	bl	800f9f4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800f91e:	f107 0308 	add.w	r3, r7, #8
 800f922:	4618      	mov	r0, r3
 800f924:	f7fc fafd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	330c      	adds	r3, #12
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f107 0210 	add.w	r2, r7, #16
 800f934:	6839      	ldr	r1, [r7, #0]
 800f936:	4610      	mov	r0, r2
 800f938:	4798      	blx	r3
 800f93a:	f107 0310 	add.w	r3, r7, #16
 800f93e:	4619      	mov	r1, r3
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 f809 	bl	800f958 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800f946:	f107 0310 	add.w	r3, r7, #16
 800f94a:	4618      	mov	r0, r3
 800f94c:	f7fc fae9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800f950:	bf00      	nop
 800f952:	3718      	adds	r7, #24
 800f954:	46bd      	mov	sp, r7
 800f956:	bd80      	pop	{r7, pc}

0800f958 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800f958:	b590      	push	{r4, r7, lr}
 800f95a:	b083      	sub	sp, #12
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	332c      	adds	r3, #44	; 0x2c
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	4909      	ldr	r1, [pc, #36]	; (800f990 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	4798      	blx	r3
    print(testName.asCharString());
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	332c      	adds	r3, #44	; 0x2c
 800f976:	681c      	ldr	r4, [r3, #0]
 800f978:	6838      	ldr	r0, [r7, #0]
 800f97a:	f7fc faa5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f97e:	4603      	mov	r3, r0
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	47a0      	blx	r4
}
 800f986:	bf00      	nop
 800f988:	370c      	adds	r7, #12
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd90      	pop	{r4, r7, pc}
 800f98e:	bf00      	nop
 800f990:	08023704 	.word	0x08023704

0800f994 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800f994:	b590      	push	{r4, r7, lr}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
    print("\n");
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	332c      	adds	r3, #44	; 0x2c
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4910      	ldr	r1, [pc, #64]	; (800f9e8 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	4798      	blx	r3
    print("\t");
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	332c      	adds	r3, #44	; 0x2c
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	490d      	ldr	r1, [pc, #52]	; (800f9ec <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800f9b6:	6878      	ldr	r0, [r7, #4]
 800f9b8:	4798      	blx	r3
    print(reason.asCharString());
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	332c      	adds	r3, #44	; 0x2c
 800f9c0:	681c      	ldr	r4, [r3, #0]
 800f9c2:	6838      	ldr	r0, [r7, #0]
 800f9c4:	f7fc fa80 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	47a0      	blx	r4
    print("\n\n");
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	332c      	adds	r3, #44	; 0x2c
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4905      	ldr	r1, [pc, #20]	; (800f9f0 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	4798      	blx	r3
}
 800f9de:	bf00      	nop
 800f9e0:	370c      	adds	r7, #12
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd90      	pop	{r4, r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	080235bc 	.word	0x080235bc
 800f9ec:	08023714 	.word	0x08023714
 800f9f0:	080236ec 	.word	0x080236ec

0800f9f4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800f9f4:	b590      	push	{r4, r7, lr}
 800f9f6:	b089      	sub	sp, #36	; 0x24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800fa00:	f7ff fbf0 	bl	800f1e4 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800fa04:	4603      	mov	r3, r0
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	bf0c      	ite	eq
 800fa0a:	2301      	moveq	r3, #1
 800fa0c:	2300      	movne	r3, #0
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d015      	beq.n	800fa40 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	3354      	adds	r3, #84	; 0x54
 800fa1a:	681c      	ldr	r4, [r3, #0]
 800fa1c:	f107 0310 	add.w	r3, r7, #16
 800fa20:	68b9      	ldr	r1, [r7, #8]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fb ff19 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800fa28:	f107 0310 	add.w	r3, r7, #16
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	47a0      	blx	r4
 800fa34:	f107 0310 	add.w	r3, r7, #16
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7fc fa72 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800fa3e:	e014      	b.n	800fa6a <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	3350      	adds	r3, #80	; 0x50
 800fa46:	681c      	ldr	r4, [r3, #0]
 800fa48:	f107 0318 	add.w	r3, r7, #24
 800fa4c:	68b9      	ldr	r1, [r7, #8]
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f7fb ff03 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 800fa54:	f107 0318 	add.w	r3, r7, #24
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	68f8      	ldr	r0, [r7, #12]
 800fa5e:	47a0      	blx	r4
 800fa60:	f107 0318 	add.w	r3, r7, #24
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fc fa5c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 800fa6a:	bf00      	nop
 800fa6c:	3724      	adds	r7, #36	; 0x24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd90      	pop	{r4, r7, pc}
	...

0800fa74 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800fa74:	b590      	push	{r4, r7, lr}
 800fa76:	b085      	sub	sp, #20
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
    print("\n");
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	332c      	adds	r3, #44	; 0x2c
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4916      	ldr	r1, [pc, #88]	; (800fae4 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	4798      	blx	r3
    print(file.asCharString());
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	332c      	adds	r3, #44	; 0x2c
 800fa94:	681c      	ldr	r4, [r3, #0]
 800fa96:	68b8      	ldr	r0, [r7, #8]
 800fa98:	f7fc fa16 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	4619      	mov	r1, r3
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	47a0      	blx	r4
    print(":");
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	332c      	adds	r3, #44	; 0x2c
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	490e      	ldr	r1, [pc, #56]	; (800fae8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	4798      	blx	r3
    print(lineNumber);
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	3334      	adds	r3, #52	; 0x34
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	6879      	ldr	r1, [r7, #4]
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	4798      	blx	r3
    print(":");
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	332c      	adds	r3, #44	; 0x2c
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4907      	ldr	r1, [pc, #28]	; (800fae8 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	4798      	blx	r3
    print(" error:");
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	332c      	adds	r3, #44	; 0x2c
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4905      	ldr	r1, [pc, #20]	; (800faec <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800fad8:	68f8      	ldr	r0, [r7, #12]
 800fada:	4798      	blx	r3
}
 800fadc:	bf00      	nop
 800fade:	3714      	adds	r7, #20
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd90      	pop	{r4, r7, pc}
 800fae4:	080235bc 	.word	0x080235bc
 800fae8:	08023718 	.word	0x08023718
 800faec:	0802371c 	.word	0x0802371c

0800faf0 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800faf0:	b590      	push	{r4, r7, lr}
 800faf2:	b085      	sub	sp, #20
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
    print("\n");
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	332c      	adds	r3, #44	; 0x2c
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4916      	ldr	r1, [pc, #88]	; (800fb60 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800fb06:	68f8      	ldr	r0, [r7, #12]
 800fb08:	4798      	blx	r3
    print(file.asCharString());
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	332c      	adds	r3, #44	; 0x2c
 800fb10:	681c      	ldr	r4, [r3, #0]
 800fb12:	68b8      	ldr	r0, [r7, #8]
 800fb14:	f7fc f9d8 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	47a0      	blx	r4
    print("(");
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	332c      	adds	r3, #44	; 0x2c
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	490e      	ldr	r1, [pc, #56]	; (800fb64 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	4798      	blx	r3
    print(lineNumber);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	3334      	adds	r3, #52	; 0x34
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	6879      	ldr	r1, [r7, #4]
 800fb38:	68f8      	ldr	r0, [r7, #12]
 800fb3a:	4798      	blx	r3
    print("):");
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	332c      	adds	r3, #44	; 0x2c
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	4908      	ldr	r1, [pc, #32]	; (800fb68 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	4798      	blx	r3
    print(" error:");
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	332c      	adds	r3, #44	; 0x2c
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	4906      	ldr	r1, [pc, #24]	; (800fb6c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800fb54:	68f8      	ldr	r0, [r7, #12]
 800fb56:	4798      	blx	r3
}
 800fb58:	bf00      	nop
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd90      	pop	{r4, r7, pc}
 800fb60:	080235bc 	.word	0x080235bc
 800fb64:	08023724 	.word	0x08023724
 800fb68:	08023728 	.word	0x08023728
 800fb6c:	0802371c 	.word	0x0802371c

0800fb70 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800fb70:	b580      	push	{r7, lr}
 800fb72:	b082      	sub	sp, #8
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	7a1b      	ldrb	r3, [r3, #8]
 800fb7e:	2b02      	cmp	r3, #2
 800fb80:	d106      	bne.n	800fb90 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	3328      	adds	r3, #40	; 0x28
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	4798      	blx	r3
}
 800fb90:	bf00      	nop
 800fb92:	3708      	adds	r7, #8
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
    while (*s) {
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	781b      	ldrb	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d009      	beq.n	800fbbe <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800fbaa:	4b0a      	ldr	r3, [pc, #40]	; (800fbd4 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	7812      	ldrb	r2, [r2, #0]
 800fbb2:	4610      	mov	r0, r2
 800fbb4:	4798      	blx	r3
        s++;
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	603b      	str	r3, [r7, #0]
    while (*s) {
 800fbbc:	e7f1      	b.n	800fba2 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	334c      	adds	r3, #76	; 0x4c
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	4798      	blx	r3
}
 800fbca:	bf00      	nop
 800fbcc:	3708      	adds	r7, #8
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	200000c4 	.word	0x200000c4

0800fbd8 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b082      	sub	sp, #8
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800fbe0:	4b03      	ldr	r3, [pc, #12]	; (800fbf0 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	4798      	blx	r3
}
 800fbe6:	bf00      	nop
 800fbe8:	3708      	adds	r7, #8
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	200000c8 	.word	0x200000c8

0800fbf4 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	4618      	mov	r0, r3
 800fc00:	f7ff fb00 	bl	800f204 <_ZN10TestOutputC1Ev>
 800fc04:	4a06      	ldr	r2, [pc, #24]	; (800fc20 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	611a      	str	r2, [r3, #16]
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	615a      	str	r2, [r3, #20]
{
}
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	080268a8 	.word	0x080268a8

0800fc24 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b082      	sub	sp, #8
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	4a0e      	ldr	r2, [pc, #56]	; (800fc68 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	691b      	ldr	r3, [r3, #16]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d004      	beq.n	800fc44 <_ZN19CompositeTestOutputD1Ev+0x20>
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	3204      	adds	r2, #4
 800fc3e:	6812      	ldr	r2, [r2, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	4790      	blx	r2
  delete outputTwo_;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	695b      	ldr	r3, [r3, #20]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d004      	beq.n	800fc56 <_ZN19CompositeTestOutputD1Ev+0x32>
 800fc4c:	681a      	ldr	r2, [r3, #0]
 800fc4e:	3204      	adds	r2, #4
 800fc50:	6812      	ldr	r2, [r2, #0]
 800fc52:	4618      	mov	r0, r3
 800fc54:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff faf1 	bl	800f240 <_ZN10TestOutputD1Ev>
}
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4618      	mov	r0, r3
 800fc62:	3708      	adds	r7, #8
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	080268a8 	.word	0x080268a8

0800fc6c <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b082      	sub	sp, #8
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
}
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f7ff ffd5 	bl	800fc24 <_ZN19CompositeTestOutputD1Ev>
 800fc7a:	2118      	movs	r1, #24
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f7f9 f9e9 	bl	8009054 <_ZdlPvj>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4618      	mov	r0, r3
 800fc86:	3708      	adds	r7, #8
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bd80      	pop	{r7, pc}

0800fc8c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b082      	sub	sp, #8
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
 800fc94:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	691b      	ldr	r3, [r3, #16]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d004      	beq.n	800fca8 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	3204      	adds	r2, #4
 800fca2:	6812      	ldr	r2, [r2, #0]
 800fca4:	4618      	mov	r0, r3
 800fca6:	4790      	blx	r2
  outputOne_ = output;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	683a      	ldr	r2, [r7, #0]
 800fcac:	611a      	str	r2, [r3, #16]
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	b082      	sub	sp, #8
 800fcba:	af00      	add	r7, sp, #0
 800fcbc:	6078      	str	r0, [r7, #4]
 800fcbe:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	695b      	ldr	r3, [r3, #20]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d004      	beq.n	800fcd2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800fcc8:	681a      	ldr	r2, [r3, #0]
 800fcca:	3204      	adds	r2, #4
 800fccc:	6812      	ldr	r2, [r2, #0]
 800fcce:	4618      	mov	r0, r3
 800fcd0:	4790      	blx	r2
  outputTwo_ = output;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	683a      	ldr	r2, [r7, #0]
 800fcd6:	615a      	str	r2, [r3, #20]
}
 800fcd8:	bf00      	nop
 800fcda:	3708      	adds	r7, #8
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d008      	beq.n	800fd02 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	691a      	ldr	r2, [r3, #16]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	691b      	ldr	r3, [r3, #16]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3308      	adds	r3, #8
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4610      	mov	r0, r2
 800fd00:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	695b      	ldr	r3, [r3, #20]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d008      	beq.n	800fd1c <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	695a      	ldr	r2, [r3, #20]
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	695b      	ldr	r3, [r3, #20]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	3308      	adds	r3, #8
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	4610      	mov	r0, r2
 800fd1a:	4798      	blx	r3
}
 800fd1c:	bf00      	nop
 800fd1e:	3708      	adds	r7, #8
 800fd20:	46bd      	mov	sp, r7
 800fd22:	bd80      	pop	{r7, pc}

0800fd24 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	691b      	ldr	r3, [r3, #16]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d009      	beq.n	800fd4a <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	691a      	ldr	r2, [r3, #16]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	691b      	ldr	r3, [r3, #16]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	330c      	adds	r3, #12
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	6839      	ldr	r1, [r7, #0]
 800fd46:	4610      	mov	r0, r2
 800fd48:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	695b      	ldr	r3, [r3, #20]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d009      	beq.n	800fd66 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	695a      	ldr	r2, [r3, #20]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	695b      	ldr	r3, [r3, #20]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	330c      	adds	r3, #12
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6839      	ldr	r1, [r7, #0]
 800fd62:	4610      	mov	r0, r2
 800fd64:	4798      	blx	r3
}
 800fd66:	bf00      	nop
 800fd68:	3708      	adds	r7, #8
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}

0800fd6e <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b082      	sub	sp, #8
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	6078      	str	r0, [r7, #4]
 800fd76:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	691a      	ldr	r2, [r3, #16]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	3310      	adds	r3, #16
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	6839      	ldr	r1, [r7, #0]
 800fd90:	4610      	mov	r0, r2
 800fd92:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	695b      	ldr	r3, [r3, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d009      	beq.n	800fdb0 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	695a      	ldr	r2, [r3, #20]
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	695b      	ldr	r3, [r3, #20]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	3310      	adds	r3, #16
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	6839      	ldr	r1, [r7, #0]
 800fdac:	4610      	mov	r0, r2
 800fdae:	4798      	blx	r3
}
 800fdb0:	bf00      	nop
 800fdb2:	3708      	adds	r7, #8
 800fdb4:	46bd      	mov	sp, r7
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b082      	sub	sp, #8
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
 800fdc0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	691b      	ldr	r3, [r3, #16]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d009      	beq.n	800fdde <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	691a      	ldr	r2, [r3, #16]
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	691b      	ldr	r3, [r3, #16]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	3314      	adds	r3, #20
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	4610      	mov	r0, r2
 800fddc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	695b      	ldr	r3, [r3, #20]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d009      	beq.n	800fdfa <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	695a      	ldr	r2, [r3, #20]
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	3314      	adds	r3, #20
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	6839      	ldr	r1, [r7, #0]
 800fdf6:	4610      	mov	r0, r2
 800fdf8:	4798      	blx	r3
}
 800fdfa:	bf00      	nop
 800fdfc:	3708      	adds	r7, #8
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bd80      	pop	{r7, pc}

0800fe02 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800fe02:	b580      	push	{r7, lr}
 800fe04:	b082      	sub	sp, #8
 800fe06:	af00      	add	r7, sp, #0
 800fe08:	6078      	str	r0, [r7, #4]
 800fe0a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d009      	beq.n	800fe28 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	691a      	ldr	r2, [r3, #16]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	691b      	ldr	r3, [r3, #16]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	3318      	adds	r3, #24
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	4610      	mov	r0, r2
 800fe26:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	695b      	ldr	r3, [r3, #20]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d009      	beq.n	800fe44 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	695a      	ldr	r2, [r3, #20]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	3318      	adds	r3, #24
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	4610      	mov	r0, r2
 800fe42:	4798      	blx	r3
}
 800fe44:	bf00      	nop
 800fe46:	3708      	adds	r7, #8
 800fe48:	46bd      	mov	sp, r7
 800fe4a:	bd80      	pop	{r7, pc}

0800fe4c <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
 800fe54:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d009      	beq.n	800fe72 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	691a      	ldr	r2, [r3, #16]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	691b      	ldr	r3, [r3, #16]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	331c      	adds	r3, #28
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	6839      	ldr	r1, [r7, #0]
 800fe6e:	4610      	mov	r0, r2
 800fe70:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	695b      	ldr	r3, [r3, #20]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d009      	beq.n	800fe8e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	695a      	ldr	r2, [r3, #20]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	695b      	ldr	r3, [r3, #20]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	331c      	adds	r3, #28
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	6839      	ldr	r1, [r7, #0]
 800fe8a:	4610      	mov	r0, r2
 800fe8c:	4798      	blx	r3
}
 800fe8e:	bf00      	nop
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}

0800fe96 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800fe96:	b580      	push	{r7, lr}
 800fe98:	b082      	sub	sp, #8
 800fe9a:	af00      	add	r7, sp, #0
 800fe9c:	6078      	str	r0, [r7, #4]
 800fe9e:	460b      	mov	r3, r1
 800fea0:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d009      	beq.n	800febe <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	691a      	ldr	r2, [r3, #16]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	691b      	ldr	r3, [r3, #16]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	3320      	adds	r3, #32
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	78f9      	ldrb	r1, [r7, #3]
 800feba:	4610      	mov	r0, r2
 800febc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d009      	beq.n	800feda <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	695a      	ldr	r2, [r3, #20]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	3320      	adds	r3, #32
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	78f9      	ldrb	r1, [r7, #3]
 800fed6:	4610      	mov	r0, r2
 800fed8:	4798      	blx	r3
}
 800feda:	bf00      	nop
 800fedc:	3708      	adds	r7, #8
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800fee2:	b580      	push	{r7, lr}
 800fee4:	b082      	sub	sp, #8
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d008      	beq.n	800ff04 <_ZN19CompositeTestOutput5colorEv+0x22>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	691a      	ldr	r2, [r3, #16]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	3324      	adds	r3, #36	; 0x24
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	4610      	mov	r0, r2
 800ff02:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	695b      	ldr	r3, [r3, #20]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d008      	beq.n	800ff1e <_ZN19CompositeTestOutput5colorEv+0x3c>
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	695a      	ldr	r2, [r3, #20]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	695b      	ldr	r3, [r3, #20]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3324      	adds	r3, #36	; 0x24
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	4610      	mov	r0, r2
 800ff1c:	4798      	blx	r3
}
 800ff1e:	bf00      	nop
 800ff20:	3708      	adds	r7, #8
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}

0800ff26 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b082      	sub	sp, #8
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d009      	beq.n	800ff4c <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	691a      	ldr	r2, [r3, #16]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	691b      	ldr	r3, [r3, #16]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	3328      	adds	r3, #40	; 0x28
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	6839      	ldr	r1, [r7, #0]
 800ff48:	4610      	mov	r0, r2
 800ff4a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	695b      	ldr	r3, [r3, #20]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d009      	beq.n	800ff68 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	695a      	ldr	r2, [r3, #20]
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	695b      	ldr	r3, [r3, #20]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3328      	adds	r3, #40	; 0x28
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	6839      	ldr	r1, [r7, #0]
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
}
 800ff68:	bf00      	nop
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b082      	sub	sp, #8
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	691b      	ldr	r3, [r3, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d009      	beq.n	800ff96 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	691a      	ldr	r2, [r3, #16]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	691b      	ldr	r3, [r3, #16]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	332c      	adds	r3, #44	; 0x2c
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	6839      	ldr	r1, [r7, #0]
 800ff92:	4610      	mov	r0, r2
 800ff94:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	695b      	ldr	r3, [r3, #20]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d009      	beq.n	800ffb2 <_ZN19CompositeTestOutput5printEPKc+0x42>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	695a      	ldr	r2, [r3, #20]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	695b      	ldr	r3, [r3, #20]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	332c      	adds	r3, #44	; 0x2c
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	4610      	mov	r0, r2
 800ffb0:	4798      	blx	r3
}
 800ffb2:	bf00      	nop
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800ffba:	b580      	push	{r7, lr}
 800ffbc:	b082      	sub	sp, #8
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
 800ffc2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	691b      	ldr	r3, [r3, #16]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d009      	beq.n	800ffe0 <_ZN19CompositeTestOutput5printEl+0x26>
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	691a      	ldr	r2, [r3, #16]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	3330      	adds	r3, #48	; 0x30
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	4610      	mov	r0, r2
 800ffde:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d009      	beq.n	800fffc <_ZN19CompositeTestOutput5printEl+0x42>
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	695a      	ldr	r2, [r3, #20]
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	695b      	ldr	r3, [r3, #20]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	3330      	adds	r3, #48	; 0x30
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	6839      	ldr	r1, [r7, #0]
 800fff8:	4610      	mov	r0, r2
 800fffa:	4798      	blx	r3
}
 800fffc:	bf00      	nop
 800fffe:	3708      	adds	r7, #8
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	691b      	ldr	r3, [r3, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d009      	beq.n	801002a <_ZN19CompositeTestOutput5printEj+0x26>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	691a      	ldr	r2, [r3, #16]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	691b      	ldr	r3, [r3, #16]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	3334      	adds	r3, #52	; 0x34
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6839      	ldr	r1, [r7, #0]
 8010026:	4610      	mov	r0, r2
 8010028:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d009      	beq.n	8010046 <_ZN19CompositeTestOutput5printEj+0x42>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	695a      	ldr	r2, [r3, #20]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	695b      	ldr	r3, [r3, #20]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	3334      	adds	r3, #52	; 0x34
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	4610      	mov	r0, r2
 8010044:	4798      	blx	r3
}
 8010046:	bf00      	nop
 8010048:	3708      	adds	r7, #8
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}

0801004e <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 801004e:	b580      	push	{r7, lr}
 8010050:	b084      	sub	sp, #16
 8010052:	af00      	add	r7, sp, #0
 8010054:	60f8      	str	r0, [r7, #12]
 8010056:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	691a      	ldr	r2, [r3, #16]
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	691b      	ldr	r3, [r3, #16]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	3338      	adds	r3, #56	; 0x38
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	ed97 0b00 	vldr	d0, [r7]
 8010074:	4610      	mov	r0, r2
 8010076:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	695b      	ldr	r3, [r3, #20]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d00a      	beq.n	8010096 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	695a      	ldr	r2, [r3, #20]
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	695b      	ldr	r3, [r3, #20]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	3338      	adds	r3, #56	; 0x38
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	ed97 0b00 	vldr	d0, [r7]
 8010092:	4610      	mov	r0, r2
 8010094:	4798      	blx	r3
}
 8010096:	bf00      	nop
 8010098:	3710      	adds	r7, #16
 801009a:	46bd      	mov	sp, r7
 801009c:	bd80      	pop	{r7, pc}

0801009e <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 801009e:	b580      	push	{r7, lr}
 80100a0:	b082      	sub	sp, #8
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	691b      	ldr	r3, [r3, #16]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d009      	beq.n	80100c4 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691a      	ldr	r2, [r3, #16]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	333c      	adds	r3, #60	; 0x3c
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	6839      	ldr	r1, [r7, #0]
 80100c0:	4610      	mov	r0, r2
 80100c2:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	695b      	ldr	r3, [r3, #20]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d009      	beq.n	80100e0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	695a      	ldr	r2, [r3, #20]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	333c      	adds	r3, #60	; 0x3c
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6839      	ldr	r1, [r7, #0]
 80100dc:	4610      	mov	r0, r2
 80100de:	4798      	blx	r3
}
 80100e0:	bf00      	nop
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	691b      	ldr	r3, [r3, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d009      	beq.n	801010e <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	691a      	ldr	r2, [r3, #16]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	3344      	adds	r3, #68	; 0x44
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	6839      	ldr	r1, [r7, #0]
 801010a:	4610      	mov	r0, r2
 801010c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	695b      	ldr	r3, [r3, #20]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d009      	beq.n	801012a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	695a      	ldr	r2, [r3, #20]
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	695b      	ldr	r3, [r3, #20]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3344      	adds	r3, #68	; 0x44
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	6839      	ldr	r1, [r7, #0]
 8010126:	4610      	mov	r0, r2
 8010128:	4798      	blx	r3
}
 801012a:	bf00      	nop
 801012c:	3708      	adds	r7, #8
 801012e:	46bd      	mov	sp, r7
 8010130:	bd80      	pop	{r7, pc}

08010132 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 8010132:	b580      	push	{r7, lr}
 8010134:	b082      	sub	sp, #8
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	691b      	ldr	r3, [r3, #16]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d008      	beq.n	8010154 <_ZN19CompositeTestOutput5flushEv+0x22>
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	691a      	ldr	r2, [r3, #16]
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	691b      	ldr	r3, [r3, #16]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	334c      	adds	r3, #76	; 0x4c
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	4610      	mov	r0, r2
 8010152:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	695b      	ldr	r3, [r3, #20]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d008      	beq.n	801016e <_ZN19CompositeTestOutput5flushEv+0x3c>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	695a      	ldr	r2, [r3, #20]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	695b      	ldr	r3, [r3, #20]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	334c      	adds	r3, #76	; 0x4c
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	4610      	mov	r0, r2
 801016c:	4798      	blx	r3
}
 801016e:	bf00      	nop
 8010170:	3708      	adds	r7, #8
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 8010176:	b480      	push	{r7}
 8010178:	b085      	sub	sp, #20
 801017a:	af00      	add	r7, sp, #0
 801017c:	60f8      	str	r0, [r7, #12]
 801017e:	60b9      	str	r1, [r7, #8]
 8010180:	607a      	str	r2, [r7, #4]
    }
 8010182:	bf00      	nop
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 801018e:	b480      	push	{r7}
 8010190:	b085      	sub	sp, #20
 8010192:	af00      	add	r7, sp, #0
 8010194:	60f8      	str	r0, [r7, #12]
 8010196:	60b9      	str	r1, [r7, #8]
 8010198:	607a      	str	r2, [r7, #4]
    }
 801019a:	bf00      	nop
 801019c:	3714      	adds	r7, #20
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
	...

080101a8 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b082      	sub	sp, #8
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 80101b2:	4a0b      	ldr	r2, [pc, #44]	; (80101e0 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	601a      	str	r2, [r3, #0]
 80101b8:	f000 f9ce 	bl	8010558 <_ZN14NullTestPlugin8instanceEv>
 80101bc:	4602      	mov	r2, r0
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	605a      	str	r2, [r3, #4]
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	3308      	adds	r3, #8
 80101c6:	6839      	ldr	r1, [r7, #0]
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fb fb46 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2201      	movs	r2, #1
 80101d2:	741a      	strb	r2, [r3, #16]
{
}
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	4618      	mov	r0, r3
 80101d8:	3708      	adds	r7, #8
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd80      	pop	{r7, pc}
 80101de:	bf00      	nop
 80101e0:	08026a64 	.word	0x08026a64

080101e4 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 80101ee:	4a0a      	ldr	r2, [pc, #40]	; (8010218 <_ZN10TestPluginC1EPS_+0x34>)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	601a      	str	r2, [r3, #0]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	683a      	ldr	r2, [r7, #0]
 80101f8:	605a      	str	r2, [r3, #4]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	3308      	adds	r3, #8
 80101fe:	4907      	ldr	r1, [pc, #28]	; (801021c <_ZN10TestPluginC1EPS_+0x38>)
 8010200:	4618      	mov	r0, r3
 8010202:	f7fb fad6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2201      	movs	r2, #1
 801020a:	741a      	strb	r2, [r3, #16]
{
}
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}
 8010216:	bf00      	nop
 8010218:	08026a64 	.word	0x08026a64
 801021c:	0802372c 	.word	0x0802372c

08010220 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 8010220:	b580      	push	{r7, lr}
 8010222:	b082      	sub	sp, #8
 8010224:	af00      	add	r7, sp, #0
 8010226:	6078      	str	r0, [r7, #4]
 8010228:	4a06      	ldr	r2, [pc, #24]	; (8010244 <_ZN10TestPluginD1Ev+0x24>)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	601a      	str	r2, [r3, #0]
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	3308      	adds	r3, #8
 8010232:	4618      	mov	r0, r3
 8010234:	f7fb fe75 	bl	800bf22 <_ZN12SimpleStringD1Ev>
{
}
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4618      	mov	r0, r3
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	08026a64 	.word	0x08026a64

08010248 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
}
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff ffe5 	bl	8010220 <_ZN10TestPluginD1Ev>
 8010256:	2114      	movs	r1, #20
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f7f8 fefb 	bl	8009054 <_ZdlPvj>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4618      	mov	r0, r3
 8010262:	3708      	adds	r7, #8
 8010264:	46bd      	mov	sp, r7
 8010266:	bd80      	pop	{r7, pc}

08010268 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	683a      	ldr	r2, [r7, #0]
 8010276:	605a      	str	r2, [r3, #4]
    return this;
 8010278:	687b      	ldr	r3, [r7, #4]
}
 801027a:	4618      	mov	r0, r3
 801027c:	370c      	adds	r7, #12
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 8010286:	b580      	push	{r7, lr}
 8010288:	b084      	sub	sp, #16
 801028a:	af00      	add	r7, sp, #0
 801028c:	60f8      	str	r0, [r7, #12]
 801028e:	60b9      	str	r1, [r7, #8]
 8010290:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	7c1b      	ldrb	r3, [r3, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d007      	beq.n	80102aa <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	3308      	adds	r3, #8
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	68b9      	ldr	r1, [r7, #8]
 80102a6:	68f8      	ldr	r0, [r7, #12]
 80102a8:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6858      	ldr	r0, [r3, #4]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	3314      	adds	r3, #20
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	68b9      	ldr	r1, [r7, #8]
 80102bc:	4798      	blx	r3
}
 80102be:	bf00      	nop
 80102c0:	3710      	adds	r7, #16
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b084      	sub	sp, #16
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	60f8      	str	r0, [r7, #12]
 80102ce:	60b9      	str	r1, [r7, #8]
 80102d0:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	6858      	ldr	r0, [r3, #4]
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3318      	adds	r3, #24
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	68b9      	ldr	r1, [r7, #8]
 80102e4:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	7c1b      	ldrb	r3, [r3, #16]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d007      	beq.n	80102fe <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	330c      	adds	r3, #12
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	68b9      	ldr	r1, [r7, #8]
 80102fa:	68f8      	ldr	r0, [r7, #12]
 80102fc:	4798      	blx	r3
}
 80102fe:	bf00      	nop
 8010300:	3710      	adds	r7, #16
 8010302:	46bd      	mov	sp, r7
 8010304:	bd80      	pop	{r7, pc}

08010306 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 8010306:	b590      	push	{r4, r7, lr}
 8010308:	b085      	sub	sp, #20
 801030a:	af00      	add	r7, sp, #0
 801030c:	60f8      	str	r0, [r7, #12]
 801030e:	60b9      	str	r1, [r7, #8]
 8010310:	607a      	str	r2, [r7, #4]
 8010312:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	331c      	adds	r3, #28
 801031a:	681c      	ldr	r4, [r3, #0]
 801031c:	683b      	ldr	r3, [r7, #0]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	68b9      	ldr	r1, [r7, #8]
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	47a0      	blx	r4
 8010326:	4603      	mov	r3, r0
}
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	bd90      	pop	{r4, r7, pc}

08010330 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 8010330:	b590      	push	{r4, r7, lr}
 8010332:	b085      	sub	sp, #20
 8010334:	af00      	add	r7, sp, #0
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3310      	adds	r3, #16
 8010344:	681c      	ldr	r4, [r3, #0]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	68f8      	ldr	r0, [r7, #12]
 801034e:	47a0      	blx	r4
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 8010356:	2301      	movs	r3, #1
 8010358:	e011      	b.n	801037e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00c      	beq.n	801037c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6858      	ldr	r0, [r3, #4]
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	331c      	adds	r3, #28
 801036e:	681c      	ldr	r4, [r3, #0]
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	687a      	ldr	r2, [r7, #4]
 8010374:	68b9      	ldr	r1, [r7, #8]
 8010376:	47a0      	blx	r4
 8010378:	4603      	mov	r3, r0
 801037a:	e000      	b.n	801037e <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 801037c:	2300      	movs	r3, #0
}
 801037e:	4618      	mov	r0, r3
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	bd90      	pop	{r4, r7, pc}

08010386 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 8010386:	b480      	push	{r7}
 8010388:	b083      	sub	sp, #12
 801038a:	af00      	add	r7, sp, #0
 801038c:	6078      	str	r0, [r7, #4]
    return name_;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	3308      	adds	r3, #8
}
 8010392:	4618      	mov	r0, r3
 8010394:	370c      	adds	r7, #12
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr

0801039e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 801039e:	b580      	push	{r7, lr}
 80103a0:	b082      	sub	sp, #8
 80103a2:	af00      	add	r7, sp, #0
 80103a4:	6078      	str	r0, [r7, #4]
 80103a6:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	3308      	adds	r3, #8
 80103ac:	4619      	mov	r1, r3
 80103ae:	6838      	ldr	r0, [r7, #0]
 80103b0:	f7fb fdc3 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d001      	beq.n	80103be <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	e00d      	b.n	80103da <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	685b      	ldr	r3, [r3, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d007      	beq.n	80103d6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7ff ffe6 	bl	801039e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 80103d2:	4603      	mov	r3, r0
 80103d4:	e001      	b.n	80103da <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	685b      	ldr	r3, [r3, #4]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3708      	adds	r7, #8
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 80103e2:	b480      	push	{r7}
 80103e4:	b083      	sub	sp, #12
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
    return next_;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	685b      	ldr	r3, [r3, #4]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	370c      	adds	r7, #12
 80103f2:	46bd      	mov	sp, r7
 80103f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f8:	4770      	bx	lr

080103fa <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
 8010402:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685b      	ldr	r3, [r3, #4]
 801040c:	2b00      	cmp	r3, #0
 801040e:	d00e      	beq.n	801042e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff ffb6 	bl	8010386 <_ZN10TestPlugin7getNameEv>
 801041a:	4603      	mov	r3, r0
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	4618      	mov	r0, r3
 8010420:	f7fb fd8b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 801042a:	2301      	movs	r3, #1
 801042c:	e000      	b.n	8010430 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 801042e:	2300      	movs	r3, #0
 8010430:	2b00      	cmp	r3, #0
 8010432:	d007      	beq.n	8010444 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	605a      	str	r2, [r3, #4]
    }
    return removed;
 8010444:	68fb      	ldr	r3, [r7, #12]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 801044e:	b480      	push	{r7}
 8010450:	b083      	sub	sp, #12
 8010452:	af00      	add	r7, sp, #0
 8010454:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	2200      	movs	r2, #0
 801045a:	741a      	strb	r2, [r3, #16]
}
 801045c:	bf00      	nop
 801045e:	370c      	adds	r7, #12
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr

08010468 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 8010468:	b480      	push	{r7}
 801046a:	b083      	sub	sp, #12
 801046c:	af00      	add	r7, sp, #0
 801046e:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	741a      	strb	r2, [r3, #16]
}
 8010476:	bf00      	nop
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010480:	4770      	bx	lr

08010482 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 8010482:	b480      	push	{r7}
 8010484:	b083      	sub	sp, #12
 8010486:	af00      	add	r7, sp, #0
 8010488:	6078      	str	r0, [r7, #4]
    return enabled_;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	7c1b      	ldrb	r3, [r3, #16]
}
 801048e:	4618      	mov	r0, r3
 8010490:	370c      	adds	r7, #12
 8010492:	46bd      	mov	sp, r7
 8010494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010498:	4770      	bx	lr
	...

0801049c <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6839      	ldr	r1, [r7, #0]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fe7c 	bl	80101a8 <_ZN10TestPluginC1ERK12SimpleString>
 80104b0:	4a05      	ldr	r2, [pc, #20]	; (80104c8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 80104b6:	4b05      	ldr	r3, [pc, #20]	; (80104cc <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 80104b8:	2200      	movs	r2, #0
 80104ba:	601a      	str	r2, [r3, #0]
}
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4618      	mov	r0, r3
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	08026a20 	.word	0x08026a20
 80104cc:	20000814 	.word	0x20000814

080104d0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b087      	sub	sp, #28
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80104dc:	4b0e      	ldr	r3, [pc, #56]	; (8010518 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	617b      	str	r3, [r7, #20]
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	db0d      	blt.n	8010506 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 80104ea:	4a0c      	ldr	r2, [pc, #48]	; (801051c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80104f2:	490a      	ldr	r1, [pc, #40]	; (801051c <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	00db      	lsls	r3, r3, #3
 80104f8:	440b      	add	r3, r1
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	3b01      	subs	r3, #1
 8010502:	617b      	str	r3, [r7, #20]
 8010504:	e7ee      	b.n	80104e4 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 8010506:	4b04      	ldr	r3, [pc, #16]	; (8010518 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 8010508:	2200      	movs	r2, #0
 801050a:	601a      	str	r2, [r3, #0]
}
 801050c:	bf00      	nop
 801050e:	371c      	adds	r7, #28
 8010510:	46bd      	mov	sp, r7
 8010512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010516:	4770      	bx	lr
 8010518:	20000814 	.word	0x20000814
 801051c:	20000818 	.word	0x20000818

08010520 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 8010520:	b580      	push	{r7, lr}
 8010522:	b082      	sub	sp, #8
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2100      	movs	r1, #0
 801052c:	4618      	mov	r0, r3
 801052e:	f7ff fe59 	bl	80101e4 <_ZN10TestPluginC1EPS_>
 8010532:	4a04      	ldr	r2, [pc, #16]	; (8010544 <_ZN14NullTestPluginC1Ev+0x24>)
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	601a      	str	r2, [r3, #0]
{
}
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	4618      	mov	r0, r3
 801053c:	3708      	adds	r7, #8
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	080269dc 	.word	0x080269dc

08010548 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 8010548:	b580      	push	{r7, lr}
 801054a:	af00      	add	r7, sp, #0
 801054c:	4801      	ldr	r0, [pc, #4]	; (8010554 <__tcf_0+0xc>)
 801054e:	f000 f849 	bl	80105e4 <_ZN14NullTestPluginD1Ev>
 8010552:	bd80      	pop	{r7, pc}
 8010554:	20000918 	.word	0x20000918

08010558 <_ZN14NullTestPlugin8instanceEv>:
{
 8010558:	b580      	push	{r7, lr}
 801055a:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 801055c:	4b12      	ldr	r3, [pc, #72]	; (80105a8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	f3bf 8f5b 	dmb	ish
 8010564:	b2db      	uxtb	r3, r3
 8010566:	f003 0301 	and.w	r3, r3, #1
 801056a:	2b00      	cmp	r3, #0
 801056c:	bf0c      	ite	eq
 801056e:	2301      	moveq	r3, #1
 8010570:	2300      	movne	r3, #0
 8010572:	b2db      	uxtb	r3, r3
 8010574:	2b00      	cmp	r3, #0
 8010576:	d013      	beq.n	80105a0 <_ZN14NullTestPlugin8instanceEv+0x48>
 8010578:	480b      	ldr	r0, [pc, #44]	; (80105a8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 801057a:	f00d ffd9 	bl	801e530 <__cxa_guard_acquire>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	bf14      	ite	ne
 8010584:	2301      	movne	r3, #1
 8010586:	2300      	moveq	r3, #0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d008      	beq.n	80105a0 <_ZN14NullTestPlugin8instanceEv+0x48>
 801058e:	4807      	ldr	r0, [pc, #28]	; (80105ac <_ZN14NullTestPlugin8instanceEv+0x54>)
 8010590:	f7ff ffc6 	bl	8010520 <_ZN14NullTestPluginC1Ev>
 8010594:	4804      	ldr	r0, [pc, #16]	; (80105a8 <_ZN14NullTestPlugin8instanceEv+0x50>)
 8010596:	f00d ffd7 	bl	801e548 <__cxa_guard_release>
 801059a:	4805      	ldr	r0, [pc, #20]	; (80105b0 <_ZN14NullTestPlugin8instanceEv+0x58>)
 801059c:	f00d fffb 	bl	801e596 <atexit>
    return &_instance;
 80105a0:	4b02      	ldr	r3, [pc, #8]	; (80105ac <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	2000092c 	.word	0x2000092c
 80105ac:	20000918 	.word	0x20000918
 80105b0:	08010549 	.word	0x08010549

080105b4 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
}
 80105c0:	bf00      	nop
 80105c2:	3714      	adds	r7, #20
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
}
 80105d8:	bf00      	nop
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b082      	sub	sp, #8
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	4a05      	ldr	r2, [pc, #20]	; (8010604 <_ZN14NullTestPluginD1Ev+0x20>)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	601a      	str	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fe13 	bl	8010220 <_ZN10TestPluginD1Ev>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	080269dc 	.word	0x080269dc

08010608 <_ZN14NullTestPluginD0Ev>:
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6878      	ldr	r0, [r7, #4]
 8010612:	f7ff ffe7 	bl	80105e4 <_ZN14NullTestPluginD1Ev>
 8010616:	2114      	movs	r1, #20
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f7f8 fd1b 	bl	8009054 <_ZdlPvj>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}

08010628 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 8010630:	4a0f      	ldr	r2, [pc, #60]	; (8010670 <_ZN12TestRegistryC1Ev+0x48>)
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	601a      	str	r2, [r3, #0]
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	605a      	str	r2, [r3, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	609a      	str	r2, [r3, #8]
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	60da      	str	r2, [r3, #12]
 8010648:	f7ff ff86 	bl	8010558 <_ZN14NullTestPlugin8instanceEv>
 801064c:	4602      	mov	r2, r0
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	611a      	str	r2, [r3, #16]
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2200      	movs	r2, #0
 8010656:	751a      	strb	r2, [r3, #20]
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2200      	movs	r2, #0
 801065c:	619a      	str	r2, [r3, #24]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	771a      	strb	r2, [r3, #28]
{
}
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	08026aa8 	.word	0x08026aa8

08010674 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 8010674:	b480      	push	{r7}
 8010676:	b083      	sub	sp, #12
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	4a04      	ldr	r2, [pc, #16]	; (8010690 <_ZN12TestRegistryD1Ev+0x1c>)
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	601a      	str	r2, [r3, #0]
{
}
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	4618      	mov	r0, r3
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068e:	4770      	bx	lr
 8010690:	08026aa8 	.word	0x08026aa8

08010694 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
}
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f7ff ffe9 	bl	8010674 <_ZN12TestRegistryD1Ev>
 80106a2:	2120      	movs	r1, #32
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f7f8 fcd5 	bl	8009054 <_ZdlPvj>
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	4618      	mov	r0, r3
 80106ae:	3708      	adds	r7, #8
 80106b0:	46bd      	mov	sp, r7
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b082      	sub	sp, #8
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3308      	adds	r3, #8
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	687a      	ldr	r2, [r7, #4]
 80106c8:	6852      	ldr	r2, [r2, #4]
 80106ca:	4611      	mov	r1, r2
 80106cc:	6838      	ldr	r0, [r7, #0]
 80106ce:	4798      	blx	r3
 80106d0:	4602      	mov	r2, r0
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	605a      	str	r2, [r3, #4]
}
 80106d6:	bf00      	nop
 80106d8:	3708      	adds	r7, #8
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}

080106de <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 80106de:	b580      	push	{r7, lr}
 80106e0:	b084      	sub	sp, #16
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 80106e8:	2301      	movs	r3, #1
 80106ea:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	3308      	adds	r3, #8
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	6838      	ldr	r0, [r7, #0]
 80106f6:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	685b      	ldr	r3, [r3, #4]
 80106fc:	60bb      	str	r3, [r7, #8]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d05c      	beq.n	80107be <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	7d1b      	ldrb	r3, [r3, #20]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d005      	beq.n	8010718 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	3380      	adds	r3, #128	; 0x80
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	68b8      	ldr	r0, [r7, #8]
 8010716:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	7f1b      	ldrb	r3, [r3, #28]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d005      	beq.n	801072c <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 8010720:	68bb      	ldr	r3, [r7, #8]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	3384      	adds	r3, #132	; 0x84
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	68b8      	ldr	r0, [r7, #8]
 801072a:	4798      	blx	r3

        if (groupStart) {
 801072c:	7bfb      	ldrb	r3, [r7, #15]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d008      	beq.n	8010744 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	3310      	adds	r3, #16
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	68b9      	ldr	r1, [r7, #8]
 801073c:	6838      	ldr	r0, [r7, #0]
 801073e:	4798      	blx	r3
            groupStart = false;
 8010740:	2300      	movs	r3, #0
 8010742:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	3320      	adds	r3, #32
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	6838      	ldr	r0, [r7, #0]
 801074e:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 8010750:	683a      	ldr	r2, [r7, #0]
 8010752:	68b9      	ldr	r1, [r7, #8]
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f000 fb79 	bl	8010e4c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d016      	beq.n	801078e <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	3318      	adds	r3, #24
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	68b9      	ldr	r1, [r7, #8]
 801076a:	6838      	ldr	r0, [r7, #0]
 801076c:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	681b      	ldr	r3, [r3, #0]
 8010772:	3390      	adds	r3, #144	; 0x90
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	6911      	ldr	r1, [r2, #16]
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	68b8      	ldr	r0, [r7, #8]
 801077e:	4798      	blx	r3
            result.currentTestEnded(test);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	331c      	adds	r3, #28
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	68b9      	ldr	r1, [r7, #8]
 801078a:	6838      	ldr	r0, [r7, #0]
 801078c:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 801078e:	68b9      	ldr	r1, [r7, #8]
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f000 fa5b 	bl	8010c4c <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 8010796:	4603      	mov	r3, r0
 8010798:	2b00      	cmp	r3, #0
 801079a:	d008      	beq.n	80107ae <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 801079c:	2301      	movs	r3, #1
 801079e:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 80107a0:	683b      	ldr	r3, [r7, #0]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	3314      	adds	r3, #20
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	68b9      	ldr	r1, [r7, #8]
 80107aa:	6838      	ldr	r0, [r7, #0]
 80107ac:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80107ae:	68bb      	ldr	r3, [r7, #8]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	330c      	adds	r3, #12
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68b8      	ldr	r0, [r7, #8]
 80107b8:	4798      	blx	r3
 80107ba:	60b8      	str	r0, [r7, #8]
 80107bc:	e79f      	b.n	80106fe <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	330c      	adds	r3, #12
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	6838      	ldr	r0, [r7, #0]
 80107c8:	4798      	blx	r3
    currentRepetition_++;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	699b      	ldr	r3, [r3, #24]
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	619a      	str	r2, [r3, #24]
}
 80107d4:	bf00      	nop
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}

080107dc <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 80107dc:	b590      	push	{r4, r7, lr}
 80107de:	b08f      	sub	sp, #60	; 0x3c
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 80107e6:	f107 0314 	add.w	r3, r7, #20
 80107ea:	4953      	ldr	r1, [pc, #332]	; (8010938 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80107ec:	4618      	mov	r0, r3
 80107ee:	f7fa ffe0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	685b      	ldr	r3, [r3, #4]
 80107f6:	637b      	str	r3, [r7, #52]	; 0x34
 80107f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d04d      	beq.n	801089a <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 80107fe:	f107 030c 	add.w	r3, r7, #12
 8010802:	494d      	ldr	r1, [pc, #308]	; (8010938 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 8010804:	4618      	mov	r0, r3
 8010806:	f7fa ffd4 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 801080a:	f107 030c 	add.w	r3, r7, #12
 801080e:	494b      	ldr	r1, [pc, #300]	; (801093c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8010810:	4618      	mov	r0, r3
 8010812:	f7fb fc15 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 8010816:	f107 031c 	add.w	r3, r7, #28
 801081a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801081c:	4618      	mov	r0, r3
 801081e:	f001 f9d2 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 8010822:	f107 021c 	add.w	r2, r7, #28
 8010826:	f107 030c 	add.w	r3, r7, #12
 801082a:	4611      	mov	r1, r2
 801082c:	4618      	mov	r0, r3
 801082e:	f7fb fbf5 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8010832:	f107 031c 	add.w	r3, r7, #28
 8010836:	4618      	mov	r0, r3
 8010838:	f7fb fb73 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        gname += "#";
 801083c:	f107 030c 	add.w	r3, r7, #12
 8010840:	493e      	ldr	r1, [pc, #248]	; (801093c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 8010842:	4618      	mov	r0, r3
 8010844:	f7fb fbfc 	bl	800c040 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 8010848:	f107 020c 	add.w	r2, r7, #12
 801084c:	f107 0314 	add.w	r3, r7, #20
 8010850:	4611      	mov	r1, r2
 8010852:	4618      	mov	r0, r3
 8010854:	f7fb f82b 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 8010858:	4603      	mov	r3, r0
 801085a:	f083 0301 	eor.w	r3, r3, #1
 801085e:	b2db      	uxtb	r3, r3
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00d      	beq.n	8010880 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 8010864:	f107 020c 	add.w	r2, r7, #12
 8010868:	f107 0314 	add.w	r3, r7, #20
 801086c:	4611      	mov	r1, r2
 801086e:	4618      	mov	r0, r3
 8010870:	f7fb fbd4 	bl	800c01c <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 8010874:	f107 0314 	add.w	r3, r7, #20
 8010878:	4931      	ldr	r1, [pc, #196]	; (8010940 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 801087a:	4618      	mov	r0, r3
 801087c:	f7fb fbe0 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 8010880:	f107 030c 	add.w	r3, r7, #12
 8010884:	4618      	mov	r0, r3
 8010886:	f7fb fb4c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	330c      	adds	r3, #12
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010894:	4798      	blx	r3
 8010896:	6378      	str	r0, [r7, #52]	; 0x34
 8010898:	e7ae      	b.n	80107f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 801089a:	f107 0314 	add.w	r3, r7, #20
 801089e:	4a26      	ldr	r2, [pc, #152]	; (8010938 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 80108a0:	4926      	ldr	r1, [pc, #152]	; (801093c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 80108a2:	4618      	mov	r0, r3
 80108a4:	f7fb f99a 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 80108a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108ac:	4924      	ldr	r1, [pc, #144]	; (8010940 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7fa ff7f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80108b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80108b8:	f107 0314 	add.w	r3, r7, #20
 80108bc:	4611      	mov	r1, r2
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fb f874 	bl	800b9ac <_ZNK12SimpleString8endsWithERKS_>
 80108c4:	4603      	mov	r3, r0
 80108c6:	461c      	mov	r4, r3
 80108c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fb fb28 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80108d2:	2c00      	cmp	r4, #0
 80108d4:	d01a      	beq.n	801090c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 80108d6:	f107 0314 	add.w	r3, r7, #20
 80108da:	4618      	mov	r0, r3
 80108dc:	f7fb fb00 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 80108e0:	4603      	mov	r3, r0
 80108e2:	3b01      	subs	r3, #1
 80108e4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80108e8:	f107 0114 	add.w	r1, r7, #20
 80108ec:	2200      	movs	r2, #0
 80108ee:	f7fb fc21 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 80108f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80108f6:	f107 0314 	add.w	r3, r7, #20
 80108fa:	4611      	mov	r1, r2
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fa ffc4 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 8010902:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010906:	4618      	mov	r0, r3
 8010908:	f7fb fb0b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	3338      	adds	r3, #56	; 0x38
 8010912:	681c      	ldr	r4, [r3, #0]
 8010914:	f107 0314 	add.w	r3, r7, #20
 8010918:	4618      	mov	r0, r3
 801091a:	f7fb fad5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801091e:	4603      	mov	r3, r0
 8010920:	4619      	mov	r1, r3
 8010922:	6838      	ldr	r0, [r7, #0]
 8010924:	47a0      	blx	r4
    SimpleString groupList;
 8010926:	f107 0314 	add.w	r3, r7, #20
 801092a:	4618      	mov	r0, r3
 801092c:	f7fb faf9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8010930:	bf00      	nop
 8010932:	373c      	adds	r7, #60	; 0x3c
 8010934:	46bd      	mov	sp, r7
 8010936:	bd90      	pop	{r4, r7, pc}
 8010938:	0802377c 	.word	0x0802377c
 801093c:	08023780 	.word	0x08023780
 8010940:	08023784 	.word	0x08023784

08010944 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 8010944:	b590      	push	{r4, r7, lr}
 8010946:	b091      	sub	sp, #68	; 0x44
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 801094e:	f107 0314 	add.w	r3, r7, #20
 8010952:	4964      	ldr	r1, [pc, #400]	; (8010ae4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8010954:	4618      	mov	r0, r3
 8010956:	f7fa ff2c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	685b      	ldr	r3, [r3, #4]
 801095e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010962:	2b00      	cmp	r3, #0
 8010964:	d06e      	beq.n	8010a44 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 8010966:	683a      	ldr	r2, [r7, #0]
 8010968:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f000 fa6e 	bl	8010e4c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 8010970:	4603      	mov	r3, r0
 8010972:	2b00      	cmp	r3, #0
 8010974:	d05e      	beq.n	8010a34 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 8010976:	f107 030c 	add.w	r3, r7, #12
 801097a:	495a      	ldr	r1, [pc, #360]	; (8010ae4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 801097c:	4618      	mov	r0, r3
 801097e:	f7fa ff18 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 8010982:	f107 030c 	add.w	r3, r7, #12
 8010986:	4958      	ldr	r1, [pc, #352]	; (8010ae8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010988:	4618      	mov	r0, r3
 801098a:	f7fb fb59 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 801098e:	f107 031c 	add.w	r3, r7, #28
 8010992:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010994:	4618      	mov	r0, r3
 8010996:	f001 f916 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 801099a:	f107 021c 	add.w	r2, r7, #28
 801099e:	f107 030c 	add.w	r3, r7, #12
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fb fb39 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80109aa:	f107 031c 	add.w	r3, r7, #28
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fb fab7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 80109b4:	f107 030c 	add.w	r3, r7, #12
 80109b8:	494c      	ldr	r1, [pc, #304]	; (8010aec <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fb fb40 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 80109c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80109c6:	4618      	mov	r0, r3
 80109c8:	f001 f8ee 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 80109cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80109d0:	f107 030c 	add.w	r3, r7, #12
 80109d4:	4611      	mov	r1, r2
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fb fb20 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80109dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109e0:	4618      	mov	r0, r3
 80109e2:	f7fb fa9e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 80109e6:	f107 030c 	add.w	r3, r7, #12
 80109ea:	493f      	ldr	r1, [pc, #252]	; (8010ae8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 80109ec:	4618      	mov	r0, r3
 80109ee:	f7fb fb27 	bl	800c040 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 80109f2:	f107 020c 	add.w	r2, r7, #12
 80109f6:	f107 0314 	add.w	r3, r7, #20
 80109fa:	4611      	mov	r1, r2
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fa ff56 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 8010a02:	4603      	mov	r3, r0
 8010a04:	f083 0301 	eor.w	r3, r3, #1
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d00d      	beq.n	8010a2a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 8010a0e:	f107 020c 	add.w	r2, r7, #12
 8010a12:	f107 0314 	add.w	r3, r7, #20
 8010a16:	4611      	mov	r1, r2
 8010a18:	4618      	mov	r0, r3
 8010a1a:	f7fb faff 	bl	800c01c <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 8010a1e:	f107 0314 	add.w	r3, r7, #20
 8010a22:	4933      	ldr	r1, [pc, #204]	; (8010af0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fb fb0b 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 8010a2a:	f107 030c 	add.w	r3, r7, #12
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f7fb fa77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	330c      	adds	r3, #12
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010a3e:	4798      	blx	r3
 8010a40:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010a42:	e78d      	b.n	8010960 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 8010a44:	f107 0314 	add.w	r3, r7, #20
 8010a48:	4a26      	ldr	r2, [pc, #152]	; (8010ae4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 8010a4a:	4927      	ldr	r1, [pc, #156]	; (8010ae8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f7fb f8c5 	bl	800bbdc <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 8010a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010a56:	4926      	ldr	r1, [pc, #152]	; (8010af0 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7fa feaa 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8010a5e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010a62:	f107 0314 	add.w	r3, r7, #20
 8010a66:	4611      	mov	r1, r2
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7fa ff9f 	bl	800b9ac <_ZNK12SimpleString8endsWithERKS_>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	461c      	mov	r4, r3
 8010a72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7fb fa53 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8010a7c:	2c00      	cmp	r4, #0
 8010a7e:	d01a      	beq.n	8010ab6 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 8010a80:	f107 0314 	add.w	r3, r7, #20
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fb fa2b 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	3b01      	subs	r3, #1
 8010a8e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8010a92:	f107 0114 	add.w	r1, r7, #20
 8010a96:	2200      	movs	r2, #0
 8010a98:	f7fb fb4c 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 8010a9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010aa0:	f107 0314 	add.w	r3, r7, #20
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fa feef 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 8010aac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fb fa36 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3338      	adds	r3, #56	; 0x38
 8010abc:	681c      	ldr	r4, [r3, #0]
 8010abe:	f107 0314 	add.w	r3, r7, #20
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7fb fa00 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	4619      	mov	r1, r3
 8010acc:	6838      	ldr	r0, [r7, #0]
 8010ace:	47a0      	blx	r4
    SimpleString groupAndNameList;
 8010ad0:	f107 0314 	add.w	r3, r7, #20
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7fb fa24 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8010ada:	bf00      	nop
 8010adc:	3744      	adds	r7, #68	; 0x44
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd90      	pop	{r4, r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	0802377c 	.word	0x0802377c
 8010ae8:	08023780 	.word	0x08023780
 8010aec:	08023788 	.word	0x08023788
 8010af0:	08023784 	.word	0x08023784

08010af4 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 8010af4:	b590      	push	{r4, r7, lr}
 8010af6:	b091      	sub	sp, #68	; 0x44
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 8010afe:	f107 0314 	add.w	r3, r7, #20
 8010b02:	494f      	ldr	r1, [pc, #316]	; (8010c40 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7fa fe54 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d07d      	beq.n	8010c12 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 8010b16:	f107 030c 	add.w	r3, r7, #12
 8010b1a:	4949      	ldr	r1, [pc, #292]	; (8010c40 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fa fe48 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 8010b22:	f107 031c 	add.w	r3, r7, #28
 8010b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b28:	4618      	mov	r0, r3
 8010b2a:	f001 f84c 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 8010b2e:	f107 021c 	add.w	r2, r7, #28
 8010b32:	f107 030c 	add.w	r3, r7, #12
 8010b36:	4611      	mov	r1, r2
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fb fa6f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8010b3e:	f107 031c 	add.w	r3, r7, #28
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fb f9ed 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010b48:	f107 030c 	add.w	r3, r7, #12
 8010b4c:	493d      	ldr	r1, [pc, #244]	; (8010c44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fb fa76 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 8010b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f001 f824 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 8010b60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010b64:	f107 030c 	add.w	r3, r7, #12
 8010b68:	4611      	mov	r1, r2
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fb fa56 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8010b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fb f9d4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010b7a:	f107 030c 	add.w	r3, r7, #12
 8010b7e:	4931      	ldr	r1, [pc, #196]	; (8010c44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fb fa5d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 8010b86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010b8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f001 f8dc 	bl	8011d4a <_ZNK10UtestShell7getFileEv>
 8010b92:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8010b96:	f107 030c 	add.w	r3, r7, #12
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fb fa3d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8010ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fb f9bb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 8010bac:	f107 030c 	add.w	r3, r7, #12
 8010bb0:	4924      	ldr	r1, [pc, #144]	; (8010c44 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f7fb fa44 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 8010bb8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010bba:	f001 f8d5 	bl	8011d68 <_ZNK10UtestShell13getLineNumberEv>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010bc6:	4920      	ldr	r1, [pc, #128]	; (8010c48 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 8010bc8:	4618      	mov	r0, r3
 8010bca:	f7fb feb1 	bl	800c930 <_Z16StringFromFormatPKcz>
 8010bce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010bd2:	f107 030c 	add.w	r3, r7, #12
 8010bd6:	4611      	mov	r1, r2
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fb fa1f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8010bde:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fb f99d 	bl	800bf22 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 8010be8:	f107 020c 	add.w	r2, r7, #12
 8010bec:	f107 0314 	add.w	r3, r7, #20
 8010bf0:	4611      	mov	r1, r2
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	f7fb fa12 	bl	800c01c <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 8010bf8:	f107 030c 	add.w	r3, r7, #12
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fb f990 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 8010c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	330c      	adds	r3, #12
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010c0c:	4798      	blx	r3
 8010c0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8010c10:	e77e      	b.n	8010b10 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3338      	adds	r3, #56	; 0x38
 8010c18:	681c      	ldr	r4, [r3, #0]
 8010c1a:	f107 0314 	add.w	r3, r7, #20
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fb f952 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8010c24:	4603      	mov	r3, r0
 8010c26:	4619      	mov	r1, r3
 8010c28:	6838      	ldr	r0, [r7, #0]
 8010c2a:	47a0      	blx	r4
    SimpleString testLocations;
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7fb f976 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8010c36:	bf00      	nop
 8010c38:	3744      	adds	r7, #68	; 0x44
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bd90      	pop	{r4, r7, pc}
 8010c3e:	bf00      	nop
 8010c40:	0802377c 	.word	0x0802377c
 8010c44:	08023788 	.word	0x08023788
 8010c48:	0802378c 	.word	0x0802378c

08010c4c <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 8010c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 8010c56:	2400      	movs	r4, #0
 8010c58:	2500      	movs	r5, #0
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d028      	beq.n	8010cb2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	330c      	adds	r3, #12
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	6838      	ldr	r0, [r7, #0]
 8010c6a:	4798      	blx	r3
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d01f      	beq.n	8010cb2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 8010c72:	f107 0308 	add.w	r3, r7, #8
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 ffa4 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 8010c7e:	2401      	movs	r4, #1
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	330c      	adds	r3, #12
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	6838      	ldr	r0, [r7, #0]
 8010c8a:	4798      	blx	r3
 8010c8c:	4602      	mov	r2, r0
 8010c8e:	f107 0310 	add.w	r3, r7, #16
 8010c92:	4611      	mov	r1, r2
 8010c94:	4618      	mov	r0, r3
 8010c96:	f000 ff96 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 8010c9a:	2501      	movs	r5, #1
 8010c9c:	f107 0210 	add.w	r2, r7, #16
 8010ca0:	f107 0308 	add.w	r3, r7, #8
 8010ca4:	4611      	mov	r1, r2
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f7fb f98c 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 8010cb2:	2601      	movs	r6, #1
 8010cb4:	e000      	b.n	8010cb8 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 8010cb6:	2600      	movs	r6, #0
 8010cb8:	2d00      	cmp	r5, #0
 8010cba:	d004      	beq.n	8010cc6 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 8010cbc:	f107 0310 	add.w	r3, r7, #16
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fb f92e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8010cc6:	2c00      	cmp	r4, #0
 8010cc8:	d004      	beq.n	8010cd4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 8010cca:	f107 0308 	add.w	r3, r7, #8
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fb f927 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8010cd4:	4633      	mov	r3, r6
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	371c      	adds	r7, #28
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cde <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00a      	beq.n	8010d04 <_ZN12TestRegistry10countTestsEv+0x26>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	685a      	ldr	r2, [r3, #4]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	3310      	adds	r3, #16
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	4798      	blx	r3
 8010d00:	4603      	mov	r3, r0
 8010d02:	e000      	b.n	8010d06 <_ZN12TestRegistry10countTestsEv+0x28>
 8010d04:	2300      	movs	r3, #0
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
	...

08010d10 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	4801      	ldr	r0, [pc, #4]	; (8010d1c <__tcf_0+0xc>)
 8010d16:	f7ff fcad 	bl	8010674 <_ZN12TestRegistryD1Ev>
 8010d1a:	bd80      	pop	{r7, pc}
 8010d1c:	20000934 	.word	0x20000934

08010d20 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 8010d24:	4b15      	ldr	r3, [pc, #84]	; (8010d7c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	f3bf 8f5b 	dmb	ish
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	f003 0301 	and.w	r3, r3, #1
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	bf0c      	ite	eq
 8010d36:	2301      	moveq	r3, #1
 8010d38:	2300      	movne	r3, #0
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d013      	beq.n	8010d68 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010d40:	480e      	ldr	r0, [pc, #56]	; (8010d7c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010d42:	f00d fbf5 	bl	801e530 <__cxa_guard_acquire>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	bf14      	ite	ne
 8010d4c:	2301      	movne	r3, #1
 8010d4e:	2300      	moveq	r3, #0
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d008      	beq.n	8010d68 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 8010d56:	480a      	ldr	r0, [pc, #40]	; (8010d80 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 8010d58:	f7ff fc66 	bl	8010628 <_ZN12TestRegistryC1Ev>
 8010d5c:	4807      	ldr	r0, [pc, #28]	; (8010d7c <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 8010d5e:	f00d fbf3 	bl	801e548 <__cxa_guard_release>
 8010d62:	4808      	ldr	r0, [pc, #32]	; (8010d84 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 8010d64:	f00d fc17 	bl	801e596 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 8010d68:	4b07      	ldr	r3, [pc, #28]	; (8010d88 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 8010d70:	4b05      	ldr	r3, [pc, #20]	; (8010d88 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	e000      	b.n	8010d78 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 8010d76:	4b02      	ldr	r3, [pc, #8]	; (8010d80 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	bd80      	pop	{r7, pc}
 8010d7c:	20000954 	.word	0x20000954
 8010d80:	20000934 	.word	0x20000934
 8010d84:	08010d11 	.word	0x08010d11
 8010d88:	20000930 	.word	0x20000930

08010d8c <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 8010d8c:	b480      	push	{r7}
 8010d8e:	b083      	sub	sp, #12
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
 8010d94:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 8010d96:	4a04      	ldr	r2, [pc, #16]	; (8010da8 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	6013      	str	r3, [r2, #0]
}
 8010d9c:	bf00      	nop
 8010d9e:	370c      	adds	r7, #12
 8010da0:	46bd      	mov	sp, r7
 8010da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da6:	4770      	bx	lr
 8010da8:	20000930 	.word	0x20000930

08010dac <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d00a      	beq.n	8010dd2 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	685a      	ldr	r2, [r3, #4]
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	330c      	adds	r3, #12
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	4610      	mov	r0, r2
 8010dcc:	4798      	blx	r3
 8010dce:	4603      	mov	r3, r0
 8010dd0:	e000      	b.n	8010dd4 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	687a      	ldr	r2, [r7, #4]
 8010dd6:	6053      	str	r3, [r2, #4]

}
 8010dd8:	bf00      	nop
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	683a      	ldr	r2, [r7, #0]
 8010dee:	609a      	str	r2, [r3, #8]
}
 8010df0:	bf00      	nop
 8010df2:	370c      	adds	r7, #12
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr

08010dfc <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	683a      	ldr	r2, [r7, #0]
 8010e0a:	60da      	str	r2, [r3, #12]
}
 8010e0c:	bf00      	nop
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr

08010e18 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	2201      	movs	r2, #1
 8010e24:	771a      	strb	r2, [r3, #28]
}
 8010e26:	bf00      	nop
 8010e28:	370c      	adds	r7, #12
 8010e2a:	46bd      	mov	sp, r7
 8010e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e30:	4770      	bx	lr

08010e32 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 8010e32:	b480      	push	{r7}
 8010e34:	b083      	sub	sp, #12
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	751a      	strb	r2, [r3, #20]
}
 8010e40:	bf00      	nop
 8010e42:	370c      	adds	r7, #12
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	68d9      	ldr	r1, [r3, #12]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	689b      	ldr	r3, [r3, #8]
 8010e60:	461a      	mov	r2, r3
 8010e62:	68b8      	ldr	r0, [r7, #8]
 8010e64:	f000 ffbb 	bl	8011dde <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 8010e68:	4603      	mov	r3, r0
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d001      	beq.n	8010e72 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 8010e6e:	2301      	movs	r3, #1
 8010e70:	e006      	b.n	8010e80 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	332c      	adds	r3, #44	; 0x2c
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	4798      	blx	r3
        return false;
 8010e7e:	2300      	movs	r3, #0
    }
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b082      	sub	sp, #8
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 8010e90:	f7ff fb62 	bl	8010558 <_ZN14NullTestPlugin8instanceEv>
 8010e94:	4602      	mov	r2, r0
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	611a      	str	r2, [r3, #16]
}
 8010e9a:	bf00      	nop
 8010e9c:	3708      	adds	r7, #8
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}

08010ea2 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 8010ea2:	b580      	push	{r7, lr}
 8010ea4:	b082      	sub	sp, #8
 8010ea6:	af00      	add	r7, sp, #0
 8010ea8:	6078      	str	r0, [r7, #4]
 8010eaa:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3324      	adds	r3, #36	; 0x24
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	6912      	ldr	r2, [r2, #16]
 8010eb8:	4611      	mov	r1, r2
 8010eba:	6838      	ldr	r0, [r7, #0]
 8010ebc:	4798      	blx	r3
 8010ebe:	4602      	mov	r2, r0
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	611a      	str	r2, [r3, #16]
}
 8010ec4:	bf00      	nop
 8010ec6:	3708      	adds	r7, #8
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	691b      	ldr	r3, [r3, #16]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr

08010ee4 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b082      	sub	sp, #8
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	6078      	str	r0, [r7, #4]
 8010eec:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	691b      	ldr	r3, [r3, #16]
 8010ef2:	6839      	ldr	r1, [r7, #0]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff fa52 	bl	801039e <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 8010efa:	4603      	mov	r3, r0
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b082      	sub	sp, #8
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	691a      	ldr	r2, [r3, #16]
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	691b      	ldr	r3, [r3, #16]
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	3328      	adds	r3, #40	; 0x28
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	6839      	ldr	r1, [r7, #0]
 8010f1e:	4610      	mov	r0, r2
 8010f20:	4798      	blx	r3
 8010f22:	4602      	mov	r2, r0
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	691b      	ldr	r3, [r3, #16]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	bf0c      	ite	eq
 8010f2c:	2301      	moveq	r3, #1
 8010f2e:	2300      	movne	r3, #0
 8010f30:	b2db      	uxtb	r3, r3
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d00b      	beq.n	8010f4e <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	691a      	ldr	r2, [r3, #16]
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	691b      	ldr	r3, [r3, #16]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	332c      	adds	r3, #44	; 0x2c
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4610      	mov	r0, r2
 8010f46:	4798      	blx	r3
 8010f48:	4602      	mov	r2, r0
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7ff fa17 	bl	8010386 <_ZN10TestPlugin7getNameEv>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	6839      	ldr	r1, [r7, #0]
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7fa ffec 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8010f62:	4603      	mov	r3, r0
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00b      	beq.n	8010f80 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	691a      	ldr	r2, [r3, #16]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	691b      	ldr	r3, [r3, #16]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	332c      	adds	r3, #44	; 0x2c
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	4610      	mov	r0, r2
 8010f78:	4798      	blx	r3
 8010f7a:	4602      	mov	r2, r0
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	691a      	ldr	r2, [r3, #16]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	691b      	ldr	r3, [r3, #16]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	3328      	adds	r3, #40	; 0x28
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	6839      	ldr	r1, [r7, #0]
 8010f90:	4610      	mov	r0, r2
 8010f92:	4798      	blx	r3
}
 8010f94:	bf00      	nop
 8010f96:	3708      	adds	r7, #8
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
    int count = 0;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	691b      	ldr	r3, [r3, #16]
 8010fac:	60bb      	str	r3, [r7, #8]
 8010fae:	f7ff fad3 	bl	8010558 <_ZN14NullTestPlugin8instanceEv>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	bf14      	ite	ne
 8010fba:	2301      	movne	r3, #1
 8010fbc:	2300      	moveq	r3, #0
 8010fbe:	b2db      	uxtb	r3, r3
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d00a      	beq.n	8010fda <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	332c      	adds	r3, #44	; 0x2c
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68b8      	ldr	r0, [r7, #8]
 8010fd4:	4798      	blx	r3
 8010fd6:	60b8      	str	r0, [r7, #8]
 8010fd8:	e7e9      	b.n	8010fae <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 8010fda:	68fb      	ldr	r3, [r7, #12]
}
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3710      	adds	r7, #16
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}

08010fe4 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
    return tests_;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	685b      	ldr	r3, [r3, #4]
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	370c      	adds	r7, #12
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffa:	4770      	bx	lr

08010ffc <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	334c      	adds	r3, #76	; 0x4c
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	4798      	blx	r3
 8011012:	4602      	mov	r2, r0
 8011014:	f107 0308 	add.w	r3, r7, #8
 8011018:	4611      	mov	r1, r2
 801101a:	4618      	mov	r0, r3
 801101c:	f002 f8f8 	bl	8013210 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 8011020:	f107 0308 	add.w	r3, r7, #8
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	4618      	mov	r0, r3
 8011028:	f002 f980 	bl	801332c <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 801102c:	f107 0308 	add.w	r3, r7, #8
 8011030:	4618      	mov	r0, r3
 8011032:	f002 fa13 	bl	801345c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011036:	4602      	mov	r2, r0
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 801103c:	f107 0308 	add.w	r3, r7, #8
 8011040:	4618      	mov	r0, r3
 8011042:	f002 f939 	bl	80132b8 <_ZN22UtestShellPointerArrayD1Ev>
}
 8011046:	bf00      	nop
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}

0801104e <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 801104e:	b580      	push	{r7, lr}
 8011050:	b084      	sub	sp, #16
 8011052:	af00      	add	r7, sp, #0
 8011054:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	334c      	adds	r3, #76	; 0x4c
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	4798      	blx	r3
 8011062:	4602      	mov	r2, r0
 8011064:	f107 0308 	add.w	r3, r7, #8
 8011068:	4611      	mov	r1, r2
 801106a:	4618      	mov	r0, r3
 801106c:	f002 f8d0 	bl	8013210 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 8011070:	f107 0308 	add.w	r3, r7, #8
 8011074:	4618      	mov	r0, r3
 8011076:	f002 f995 	bl	80133a4 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 801107a:	f107 0308 	add.w	r3, r7, #8
 801107e:	4618      	mov	r0, r3
 8011080:	f002 f9ec 	bl	801345c <_ZNK22UtestShellPointerArray12getFirstTestEv>
 8011084:	4602      	mov	r2, r0
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 801108a:	f107 0308 	add.w	r3, r7, #8
 801108e:	4618      	mov	r0, r3
 8011090:	f002 f912 	bl	80132b8 <_ZN22UtestShellPointerArrayD1Ev>
}
 8011094:	bf00      	nop
 8011096:	3710      	adds	r7, #16
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d00b      	beq.n	80110ca <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	330c      	adds	r3, #12
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	4798      	blx	r3
 80110be:	4602      	mov	r2, r0
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d001      	beq.n	80110ca <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 80110c6:	2301      	movs	r3, #1
 80110c8:	e000      	b.n	80110cc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 80110ca:	2300      	movs	r3, #0
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d007      	beq.n	80110e0 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	330c      	adds	r3, #12
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	68f8      	ldr	r0, [r7, #12]
 80110da:	4798      	blx	r3
 80110dc:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 80110de:	e7e5      	b.n	80110ac <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 80110e0:	68fb      	ldr	r3, [r7, #12]
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3710      	adds	r7, #16
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 80110ea:	b590      	push	{r4, r7, lr}
 80110ec:	b087      	sub	sp, #28
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	685b      	ldr	r3, [r3, #4]
 80110f8:	617b      	str	r3, [r7, #20]
    while (current) {
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d01e      	beq.n	801113e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 8011100:	f107 030c 	add.w	r3, r7, #12
 8011104:	6979      	ldr	r1, [r7, #20]
 8011106:	4618      	mov	r0, r3
 8011108:	f000 fd4e 	bl	8011ba8 <_ZNK10UtestShell7getNameEv>
 801110c:	f107 030c 	add.w	r3, r7, #12
 8011110:	6839      	ldr	r1, [r7, #0]
 8011112:	4618      	mov	r0, r3
 8011114:	f7fa ff11 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8011118:	4603      	mov	r3, r0
 801111a:	461c      	mov	r4, r3
 801111c:	f107 030c 	add.w	r3, r7, #12
 8011120:	4618      	mov	r0, r3
 8011122:	f7fa fefe 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8011126:	2c00      	cmp	r4, #0
 8011128:	d001      	beq.n	801112e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	e008      	b.n	8011140 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	330c      	adds	r3, #12
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	6978      	ldr	r0, [r7, #20]
 8011138:	4798      	blx	r3
 801113a:	6178      	str	r0, [r7, #20]
    while (current) {
 801113c:	e7dd      	b.n	80110fa <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 801113e:	2300      	movs	r3, #0
}
 8011140:	4618      	mov	r0, r3
 8011142:	371c      	adds	r7, #28
 8011144:	46bd      	mov	sp, r7
 8011146:	bd90      	pop	{r4, r7, pc}

08011148 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 8011148:	b590      	push	{r4, r7, lr}
 801114a:	b087      	sub	sp, #28
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	617b      	str	r3, [r7, #20]
    while (current) {
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d01e      	beq.n	801119c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 801115e:	f107 030c 	add.w	r3, r7, #12
 8011162:	6979      	ldr	r1, [r7, #20]
 8011164:	4618      	mov	r0, r3
 8011166:	f000 fd2e 	bl	8011bc6 <_ZNK10UtestShell8getGroupEv>
 801116a:	f107 030c 	add.w	r3, r7, #12
 801116e:	6839      	ldr	r1, [r7, #0]
 8011170:	4618      	mov	r0, r3
 8011172:	f7fa fee2 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8011176:	4603      	mov	r3, r0
 8011178:	461c      	mov	r4, r3
 801117a:	f107 030c 	add.w	r3, r7, #12
 801117e:	4618      	mov	r0, r3
 8011180:	f7fa fecf 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8011184:	2c00      	cmp	r4, #0
 8011186:	d001      	beq.n	801118c <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	e008      	b.n	801119e <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	330c      	adds	r3, #12
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	6978      	ldr	r0, [r7, #20]
 8011196:	4798      	blx	r3
 8011198:	6178      	str	r0, [r7, #20]
    while (current) {
 801119a:	e7dd      	b.n	8011158 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	371c      	adds	r7, #28
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd90      	pop	{r4, r7, pc}
	...

080111a8 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 80111a8:	b480      	push	{r7}
 80111aa:	b083      	sub	sp, #12
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
 80111b0:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 80111b2:	4a18      	ldr	r2, [pc, #96]	; (8011214 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	683a      	ldr	r2, [r7, #0]
 80111bc:	605a      	str	r2, [r3, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2200      	movs	r2, #0
 80111c2:	609a      	str	r2, [r3, #8]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	60da      	str	r2, [r3, #12]
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	2200      	movs	r2, #0
 80111ce:	611a      	str	r2, [r3, #16]
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2200      	movs	r2, #0
 80111d4:	615a      	str	r2, [r3, #20]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	2200      	movs	r2, #0
 80111da:	619a      	str	r2, [r3, #24]
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	61da      	str	r2, [r3, #28]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	621a      	str	r2, [r3, #32]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	625a      	str	r2, [r3, #36]	; 0x24
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2200      	movs	r2, #0
 80111f2:	629a      	str	r2, [r3, #40]	; 0x28
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2200      	movs	r2, #0
 80111f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	631a      	str	r2, [r3, #48]	; 0x30
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2200      	movs	r2, #0
 8011204:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4618      	mov	r0, r3
 801120a:	370c      	adds	r7, #12
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr
 8011214:	08026b14 	.word	0x08026b14

08011218 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 8011218:	b480      	push	{r7}
 801121a:	b083      	sub	sp, #12
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	4a04      	ldr	r2, [pc, #16]	; (8011234 <_ZN10TestResultD1Ev+0x1c>)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	601a      	str	r2, [r3, #0]
{
}
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	08026b14 	.word	0x08026b14

08011238 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 8011238:	b580      	push	{r7, lr}
 801123a:	b082      	sub	sp, #8
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
}
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f7ff ffe9 	bl	8011218 <_ZN10TestResultD1Ev>
 8011246:	2138      	movs	r1, #56	; 0x38
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7f7 ff03 	bl	8009054 <_ZdlPvj>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4618      	mov	r0, r3
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b082      	sub	sp, #8
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	3318      	adds	r3, #24
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	6839      	ldr	r1, [r7, #0]
 8011272:	4610      	mov	r0, r2
 8011274:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011276:	4b05      	ldr	r3, [pc, #20]	; (801128c <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	4798      	blx	r3
 801127c:	4603      	mov	r3, r0
 801127e:	461a      	mov	r2, r3
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}
 801128c:	200000ac 	.word	0x200000ac

08011290 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b082      	sub	sp, #8
 8011294:	af00      	add	r7, sp, #0
 8011296:	6078      	str	r0, [r7, #4]
 8011298:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 801129a:	4b0c      	ldr	r3, [pc, #48]	; (80112cc <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	4798      	blx	r3
 80112a0:	4603      	mov	r3, r0
 80112a2:	461a      	mov	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a8:	1ad2      	subs	r2, r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	685a      	ldr	r2, [r3, #4]
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	685b      	ldr	r3, [r3, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	331c      	adds	r3, #28
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	6879      	ldr	r1, [r7, #4]
 80112be:	4610      	mov	r0, r2
 80112c0:	4798      	blx	r3
}
 80112c2:	bf00      	nop
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}
 80112ca:	bf00      	nop
 80112cc:	200000ac 	.word	0x200000ac

080112d0 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b082      	sub	sp, #8
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	685a      	ldr	r2, [r3, #4]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	685b      	ldr	r3, [r3, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	3310      	adds	r3, #16
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	6839      	ldr	r1, [r7, #0]
 80112ea:	4610      	mov	r0, r2
 80112ec:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 80112ee:	4b05      	ldr	r3, [pc, #20]	; (8011304 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	4798      	blx	r3
 80112f4:	4603      	mov	r3, r0
 80112f6:	461a      	mov	r2, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80112fc:	bf00      	nop
 80112fe:	3708      	adds	r7, #8
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	200000ac 	.word	0x200000ac

08011308 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 8011308:	b580      	push	{r7, lr}
 801130a:	b082      	sub	sp, #8
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
    output_.print(text);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	685a      	ldr	r2, [r3, #4]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	332c      	adds	r3, #44	; 0x2c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	6839      	ldr	r1, [r7, #0]
 8011322:	4610      	mov	r0, r2
 8011324:	4798      	blx	r3
}
 8011326:	bf00      	nop
 8011328:	3708      	adds	r7, #8
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}

0801132e <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 801132e:	b580      	push	{r7, lr}
 8011330:	b082      	sub	sp, #8
 8011332:	af00      	add	r7, sp, #0
 8011334:	6078      	str	r0, [r7, #4]
 8011336:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	685a      	ldr	r2, [r3, #4]
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	685b      	ldr	r3, [r3, #4]
 8011340:	681b      	ldr	r3, [r3, #0]
 8011342:	3348      	adds	r3, #72	; 0x48
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	6839      	ldr	r1, [r7, #0]
 8011348:	4610      	mov	r0, r2
 801134a:	4798      	blx	r3
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 801135e:	4b0c      	ldr	r3, [pc, #48]	; (8011390 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	4798      	blx	r3
 8011364:	4603      	mov	r3, r0
 8011366:	461a      	mov	r2, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801136c:	1ad2      	subs	r2, r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	685a      	ldr	r2, [r3, #4]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	685b      	ldr	r3, [r3, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	3314      	adds	r3, #20
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	6879      	ldr	r1, [r7, #4]
 8011382:	4610      	mov	r0, r2
 8011384:	4798      	blx	r3

}
 8011386:	bf00      	nop
 8011388:	3708      	adds	r7, #8
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	200000ac 	.word	0x200000ac

08011394 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b082      	sub	sp, #8
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	685a      	ldr	r2, [r3, #4]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	685b      	ldr	r3, [r3, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	333c      	adds	r3, #60	; 0x3c
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	6839      	ldr	r1, [r7, #0]
 80113ae:	4610      	mov	r0, r2
 80113b0:	4798      	blx	r3
    failureCount_++;
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	695b      	ldr	r3, [r3, #20]
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	615a      	str	r2, [r3, #20]
}
 80113bc:	bf00      	nop
 80113be:	3708      	adds	r7, #8
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}

080113c4 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
 80113ca:	6078      	str	r0, [r7, #4]
    testCount_++;
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	689b      	ldr	r3, [r3, #8]
 80113d0:	1c5a      	adds	r2, r3, #1
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	609a      	str	r2, [r3, #8]
}
 80113d6:	bf00      	nop
 80113d8:	370c      	adds	r7, #12
 80113da:	46bd      	mov	sp, r7
 80113dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e0:	4770      	bx	lr

080113e2 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 80113e2:	b480      	push	{r7}
 80113e4:	b083      	sub	sp, #12
 80113e6:	af00      	add	r7, sp, #0
 80113e8:	6078      	str	r0, [r7, #4]
    runCount_++;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	68db      	ldr	r3, [r3, #12]
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	60da      	str	r2, [r3, #12]
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
    checkCount_++;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	691b      	ldr	r3, [r3, #16]
 801140c:	1c5a      	adds	r2, r3, #1
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	611a      	str	r2, [r3, #16]
}
 8011412:	bf00      	nop
 8011414:	370c      	adds	r7, #12
 8011416:	46bd      	mov	sp, r7
 8011418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141c:	4770      	bx	lr

0801141e <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 801141e:	b480      	push	{r7}
 8011420:	b083      	sub	sp, #12
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	699b      	ldr	r3, [r3, #24]
 801142a:	1c5a      	adds	r2, r3, #1
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	619a      	str	r2, [r3, #24]
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr

0801143c <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	69db      	ldr	r3, [r3, #28]
 8011448:	1c5a      	adds	r2, r3, #1
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	61da      	str	r2, [r3, #28]
}
 801144e:	bf00      	nop
 8011450:	370c      	adds	r7, #12
 8011452:	46bd      	mov	sp, r7
 8011454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011458:	4770      	bx	lr
	...

0801145c <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 8011464:	4b09      	ldr	r3, [pc, #36]	; (801148c <_ZN10TestResult12testsStartedEv+0x30>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	4798      	blx	r3
 801146a:	4603      	mov	r3, r0
 801146c:	461a      	mov	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	685a      	ldr	r2, [r3, #4]
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	3308      	adds	r3, #8
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	4610      	mov	r0, r2
 8011482:	4798      	blx	r3
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	200000ac 	.word	0x200000ac

08011490 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 8011498:	4b0c      	ldr	r3, [pc, #48]	; (80114cc <_ZN10TestResult10testsEndedEv+0x3c>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	4798      	blx	r3
 801149e:	4603      	mov	r3, r0
 80114a0:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a6:	68fa      	ldr	r2, [r7, #12]
 80114a8:	1ad2      	subs	r2, r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	330c      	adds	r3, #12
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	6879      	ldr	r1, [r7, #4]
 80114be:	4610      	mov	r0, r2
 80114c0:	4798      	blx	r3
}
 80114c2:	bf00      	nop
 80114c4:	3710      	adds	r7, #16
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	bf00      	nop
 80114cc:	200000ac 	.word	0x200000ac

080114d0 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 80114d0:	b480      	push	{r7}
 80114d2:	b083      	sub	sp, #12
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6a1b      	ldr	r3, [r3, #32]
}
 80114dc:	4618      	mov	r0, r3
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr

080114e8 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 80114f4:	4618      	mov	r0, r3
 80114f6:	370c      	adds	r7, #12
 80114f8:	46bd      	mov	sp, r7
 80114fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fe:	4770      	bx	lr

08011500 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b087      	sub	sp, #28
 801151c:	af00      	add	r7, sp, #0
 801151e:	ed87 0b04 	vstr	d0, [r7, #16]
 8011522:	ed87 1b02 	vstr	d1, [r7, #8]
 8011526:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 801152a:	4b2c      	ldr	r3, [pc, #176]	; (80115dc <_Z13doubles_equalddd+0xc4>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	ed97 0b04 	vldr	d0, [r7, #16]
 8011532:	4798      	blx	r3
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10f      	bne.n	801155a <_Z13doubles_equalddd+0x42>
 801153a:	4b28      	ldr	r3, [pc, #160]	; (80115dc <_Z13doubles_equalddd+0xc4>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	ed97 0b02 	vldr	d0, [r7, #8]
 8011542:	4798      	blx	r3
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d107      	bne.n	801155a <_Z13doubles_equalddd+0x42>
 801154a:	4b24      	ldr	r3, [pc, #144]	; (80115dc <_Z13doubles_equalddd+0xc4>)
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	ed97 0b00 	vldr	d0, [r7]
 8011552:	4798      	blx	r3
 8011554:	4603      	mov	r3, r0
 8011556:	2b00      	cmp	r3, #0
 8011558:	d001      	beq.n	801155e <_Z13doubles_equalddd+0x46>
 801155a:	2301      	movs	r3, #1
 801155c:	e000      	b.n	8011560 <_Z13doubles_equalddd+0x48>
 801155e:	2300      	movs	r3, #0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d001      	beq.n	8011568 <_Z13doubles_equalddd+0x50>
        return false;
 8011564:	2300      	movs	r3, #0
 8011566:	e035      	b.n	80115d4 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 8011568:	4b1d      	ldr	r3, [pc, #116]	; (80115e0 <_Z13doubles_equalddd+0xc8>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	ed97 0b04 	vldr	d0, [r7, #16]
 8011570:	4798      	blx	r3
 8011572:	4603      	mov	r3, r0
 8011574:	2b00      	cmp	r3, #0
 8011576:	d009      	beq.n	801158c <_Z13doubles_equalddd+0x74>
 8011578:	4b19      	ldr	r3, [pc, #100]	; (80115e0 <_Z13doubles_equalddd+0xc8>)
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	ed97 0b02 	vldr	d0, [r7, #8]
 8011580:	4798      	blx	r3
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <_Z13doubles_equalddd+0x74>
 8011588:	2301      	movs	r3, #1
 801158a:	e000      	b.n	801158e <_Z13doubles_equalddd+0x76>
 801158c:	2300      	movs	r3, #0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d001      	beq.n	8011596 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 8011592:	2301      	movs	r3, #1
 8011594:	e01e      	b.n	80115d4 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 8011596:	4b13      	ldr	r3, [pc, #76]	; (80115e4 <_Z13doubles_equalddd+0xcc>)
 8011598:	681c      	ldr	r4, [r3, #0]
 801159a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801159e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80115a2:	f7ee feb1 	bl	8000308 <__aeabi_dsub>
 80115a6:	4602      	mov	r2, r0
 80115a8:	460b      	mov	r3, r1
 80115aa:	ec43 2b17 	vmov	d7, r2, r3
 80115ae:	eeb0 0a47 	vmov.f32	s0, s14
 80115b2:	eef0 0a67 	vmov.f32	s1, s15
 80115b6:	47a0      	blx	r4
 80115b8:	ec53 2b10 	vmov	r2, r3, d0
 80115bc:	2101      	movs	r1, #1
 80115be:	460c      	mov	r4, r1
 80115c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80115c4:	f7ef f8cc 	bl	8000760 <__aeabi_dcmpge>
 80115c8:	4603      	mov	r3, r0
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d101      	bne.n	80115d2 <_Z13doubles_equalddd+0xba>
 80115ce:	2300      	movs	r3, #0
 80115d0:	461c      	mov	r4, r3
 80115d2:	b2e3      	uxtb	r3, r4
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	371c      	adds	r7, #28
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd90      	pop	{r4, r7, pc}
 80115dc:	200000ec 	.word	0x200000ec
 80115e0:	200000f0 	.word	0x200000f0
 80115e4:	200000e0 	.word	0x200000e0

080115e8 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 80115e8:	b480      	push	{r7}
 80115ea:	b083      	sub	sp, #12
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	332c      	adds	r3, #44	; 0x2c
    }
 80115f4:	4618      	mov	r0, r3
 80115f6:	370c      	adds	r7, #12
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8011600:	b580      	push	{r7, lr}
 8011602:	b082      	sub	sp, #8
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
    {
 8011608:	4a0a      	ldr	r2, [pc, #40]	; (8011634 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	601a      	str	r2, [r3, #0]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	332c      	adds	r3, #44	; 0x2c
 8011612:	4618      	mov	r0, r3
 8011614:	f7ff fe00 	bl	8011218 <_ZN10TestResultD1Ev>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	331c      	adds	r3, #28
 801161c:	4618      	mov	r0, r3
 801161e:	f7f6 f815 	bl	800764c <_ZN17ConsoleTestOutputD1Ev>
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	4618      	mov	r0, r3
 8011626:	f000 f943 	bl	80118b0 <_ZN10UtestShellD1Ev>
    }
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	08026b5c 	.word	0x08026b5c

08011638 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8011638:	b580      	push	{r7, lr}
 801163a:	b082      	sub	sp, #8
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
    }
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ffdd 	bl	8011600 <_ZN22OutsideTestRunnerUTestD1Ev>
 8011646:	2164      	movs	r1, #100	; 0x64
 8011648:	6878      	ldr	r0, [r7, #4]
 801164a:	f7f7 fd03 	bl	8009054 <_ZdlPvj>
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af02      	add	r7, sp, #8
 801165e:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	2300      	movs	r3, #0
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	4b0d      	ldr	r3, [pc, #52]	; (801169c <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8011668:	4a0d      	ldr	r2, [pc, #52]	; (80116a0 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 801166a:	490e      	ldr	r1, [pc, #56]	; (80116a4 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 801166c:	f000 f8f8 	bl	8011860 <_ZN10UtestShellC1EPKcS1_S1_j>
 8011670:	4a0d      	ldr	r2, [pc, #52]	; (80116a8 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	601a      	str	r2, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	331c      	adds	r3, #28
 801167a:	4618      	mov	r0, r3
 801167c:	f7f5 ffd4 	bl	8007628 <_ZN17ConsoleTestOutputC1Ev>
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	331c      	adds	r3, #28
 801168a:	4619      	mov	r1, r3
 801168c:	4610      	mov	r0, r2
 801168e:	f7ff fd8b 	bl	80111a8 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	4618      	mov	r0, r3
 8011696:	3708      	adds	r7, #8
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}
 801169c:	08023790 	.word	0x08023790
 80116a0:	080237a0 	.word	0x080237a0
 80116a4:	080237e0 	.word	0x080237e0
 80116a8:	08026b5c 	.word	0x08026b5c

080116ac <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 80116ac:	b580      	push	{r7, lr}
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	4801      	ldr	r0, [pc, #4]	; (80116b8 <__tcf_0+0xc>)
 80116b2:	f7ff ffa5 	bl	8011600 <_ZN22OutsideTestRunnerUTestD1Ev>
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	20000958 	.word	0x20000958

080116bc <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80116c0:	4b12      	ldr	r3, [pc, #72]	; (801170c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80116c2:	781b      	ldrb	r3, [r3, #0]
 80116c4:	f3bf 8f5b 	dmb	ish
 80116c8:	b2db      	uxtb	r3, r3
 80116ca:	f003 0301 	and.w	r3, r3, #1
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	bf0c      	ite	eq
 80116d2:	2301      	moveq	r3, #1
 80116d4:	2300      	movne	r3, #0
 80116d6:	b2db      	uxtb	r3, r3
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d013      	beq.n	8011704 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80116dc:	480b      	ldr	r0, [pc, #44]	; (801170c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80116de:	f00c ff27 	bl	801e530 <__cxa_guard_acquire>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	bf14      	ite	ne
 80116e8:	2301      	movne	r3, #1
 80116ea:	2300      	moveq	r3, #0
 80116ec:	b2db      	uxtb	r3, r3
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d008      	beq.n	8011704 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80116f2:	4807      	ldr	r0, [pc, #28]	; (8011710 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 80116f4:	f7ff ffb0 	bl	8011658 <_ZN22OutsideTestRunnerUTestC1Ev>
 80116f8:	4804      	ldr	r0, [pc, #16]	; (801170c <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80116fa:	f00c ff25 	bl	801e548 <__cxa_guard_release>
 80116fe:	4805      	ldr	r0, [pc, #20]	; (8011714 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 8011700:	f00c ff49 	bl	801e596 <atexit>
    return instance_;
 8011704:	4b02      	ldr	r3, [pc, #8]	; (8011710 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8011706:	4618      	mov	r0, r3
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	200009bc 	.word	0x200009bc
 8011710:	20000958 	.word	0x20000958
 8011714:	080116ad 	.word	0x080116ad

08011718 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	330c      	adds	r3, #12
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	4798      	blx	r3
    }
 801172c:	bf00      	nop
 801172e:	3708      	adds	r7, #8
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}

08011734 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	3314      	adds	r3, #20
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	4798      	blx	r3
    }
 8011748:	bf00      	nop
 801174a:	3708      	adds	r7, #8
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 8011750:	b580      	push	{r7, lr}
 8011752:	b082      	sub	sp, #8
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	3310      	adds	r3, #16
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	6878      	ldr	r0, [r7, #4]
 8011762:	4798      	blx	r3
    }
 8011764:	bf00      	nop
 8011766:	3708      	adds	r7, #8
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	60f8      	str	r0, [r7, #12]
 8011774:	60b9      	str	r1, [r7, #8]
 8011776:	607a      	str	r2, [r7, #4]
 8011778:	603b      	str	r3, [r7, #0]
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	601a      	str	r2, [r3, #0]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	687a      	ldr	r2, [r7, #4]
 8011784:	605a      	str	r2, [r3, #4]
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	609a      	str	r2, [r3, #8]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	4618      	mov	r0, r3
 8011790:	3714      	adds	r7, #20
 8011792:	46bd      	mov	sp, r7
 8011794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011798:	4770      	bx	lr

0801179a <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 801179a:	b580      	push	{r7, lr}
 801179c:	b086      	sub	sp, #24
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	685b      	ldr	r3, [r3, #4]
 80117b0:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	689b      	ldr	r3, [r3, #8]
 80117b6:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	3394      	adds	r3, #148	; 0x94
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	68ba      	ldr	r2, [r7, #8]
 80117c2:	68f9      	ldr	r1, [r7, #12]
 80117c4:	6938      	ldr	r0, [r7, #16]
 80117c6:	4798      	blx	r3
    }
 80117c8:	bf00      	nop
 80117ca:	3718      	adds	r7, #24
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b086      	sub	sp, #24
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80117dc:	697b      	ldr	r3, [r7, #20]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	689b      	ldr	r3, [r3, #8]
 80117ec:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 80117ee:	4b05      	ldr	r3, [pc, #20]	; (8011804 <helperDoRunOneTestSeperateProcess+0x34>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	68f9      	ldr	r1, [r7, #12]
 80117f6:	6938      	ldr	r0, [r7, #16]
 80117f8:	4798      	blx	r3
    }
 80117fa:	bf00      	nop
 80117fc:	3718      	adds	r7, #24
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	200000a0 	.word	0x200000a0

08011808 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 8011810:	4a0f      	ldr	r2, [pc, #60]	; (8011850 <_ZN10UtestShellC1Ev+0x48>)
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	4a0e      	ldr	r2, [pc, #56]	; (8011854 <_ZN10UtestShellC1Ev+0x4c>)
 801181a:	605a      	str	r2, [r3, #4]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a0e      	ldr	r2, [pc, #56]	; (8011858 <_ZN10UtestShellC1Ev+0x50>)
 8011820:	609a      	str	r2, [r3, #8]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	4a0d      	ldr	r2, [pc, #52]	; (801185c <_ZN10UtestShellC1Ev+0x54>)
 8011826:	60da      	str	r2, [r3, #12]
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	611a      	str	r2, [r3, #16]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	615a      	str	r2, [r3, #20]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2200      	movs	r2, #0
 8011838:	761a      	strb	r2, [r3, #24]
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2200      	movs	r2, #0
 801183e:	765a      	strb	r2, [r3, #25]
{
}
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	4618      	mov	r0, r3
 8011844:	370c      	adds	r7, #12
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop
 8011850:	08026c1c 	.word	0x08026c1c
 8011854:	0802382c 	.word	0x0802382c
 8011858:	08023840 	.word	0x08023840
 801185c:	08023850 	.word	0x08023850

08011860 <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 8011860:	b480      	push	{r7}
 8011862:	b085      	sub	sp, #20
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	607a      	str	r2, [r7, #4]
 801186c:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801186e:	4a0f      	ldr	r2, [pc, #60]	; (80118ac <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	601a      	str	r2, [r3, #0]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	605a      	str	r2, [r3, #4]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	609a      	str	r2, [r3, #8]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	683a      	ldr	r2, [r7, #0]
 8011884:	60da      	str	r2, [r3, #12]
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	69ba      	ldr	r2, [r7, #24]
 801188a:	611a      	str	r2, [r3, #16]
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	2200      	movs	r2, #0
 8011890:	615a      	str	r2, [r3, #20]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2200      	movs	r2, #0
 8011896:	761a      	strb	r2, [r3, #24]
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2200      	movs	r2, #0
 801189c:	765a      	strb	r2, [r3, #25]
{
}
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	4618      	mov	r0, r3
 80118a2:	3714      	adds	r7, #20
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr
 80118ac:	08026c1c 	.word	0x08026c1c

080118b0 <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 80118b0:	b480      	push	{r7}
 80118b2:	b083      	sub	sp, #12
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	4a04      	ldr	r2, [pc, #16]	; (80118cc <_ZN10UtestShellD1Ev+0x1c>)
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	601a      	str	r2, [r3, #0]
{
}
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	370c      	adds	r7, #12
 80118c4:	46bd      	mov	sp, r7
 80118c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ca:	4770      	bx	lr
 80118cc:	08026c1c 	.word	0x08026c1c

080118d0 <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
}
 80118d8:	6878      	ldr	r0, [r7, #4]
 80118da:	f7ff ffe9 	bl	80118b0 <_ZN10UtestShellD1Ev>
 80118de:	211c      	movs	r1, #28
 80118e0:	6878      	ldr	r0, [r7, #4]
 80118e2:	f7f7 fbb7 	bl	8009054 <_ZdlPvj>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	3708      	adds	r7, #8
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}

080118f0 <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 80118f6:	2300      	movs	r3, #0
 80118f8:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	3310      	adds	r3, #16
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	4798      	blx	r3
}
 8011906:	bf00      	nop
 8011908:	3708      	adds	r7, #8
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 8011910:	b580      	push	{r7, lr}
 8011912:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8011914:	4b02      	ldr	r3, [pc, #8]	; (8011920 <_ZN10UtestShell5crashEv+0x10>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	4798      	blx	r3
}
 801191a:	bf00      	nop
 801191c:	bd80      	pop	{r7, pc}
 801191e:	bf00      	nop
 8011920:	2000009c 	.word	0x2000009c

08011924 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b088      	sub	sp, #32
 8011928:	af00      	add	r7, sp, #0
 801192a:	60f8      	str	r0, [r7, #12]
 801192c:	60b9      	str	r1, [r7, #8]
 801192e:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	2200      	movs	r2, #0
 8011934:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	3324      	adds	r3, #36	; 0x24
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	6878      	ldr	r0, [r7, #4]
 8011940:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 8011942:	f107 0014 	add.w	r0, r7, #20
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	68f9      	ldr	r1, [r7, #12]
 801194c:	f7ff ff0e 	bl	801176c <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	337c      	adds	r3, #124	; 0x7c
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	68f8      	ldr	r0, [r7, #12]
 801195a:	4798      	blx	r3
 801195c:	4603      	mov	r3, r0
 801195e:	2b00      	cmp	r3, #0
 8011960:	d007      	beq.n	8011972 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 8011962:	4b09      	ldr	r3, [pc, #36]	; (8011988 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f107 0214 	add.w	r2, r7, #20
 801196a:	4611      	mov	r1, r2
 801196c:	4807      	ldr	r0, [pc, #28]	; (801198c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801196e:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 8011970:	e006      	b.n	8011980 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 8011972:	4b05      	ldr	r3, [pc, #20]	; (8011988 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	f107 0214 	add.w	r2, r7, #20
 801197a:	4611      	mov	r1, r2
 801197c:	4804      	ldr	r0, [pc, #16]	; (8011990 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801197e:	4798      	blx	r3
}
 8011980:	bf00      	nop
 8011982:	3720      	adds	r7, #32
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}
 8011988:	200000a8 	.word	0x200000a8
 801198c:	080117d1 	.word	0x080117d1
 8011990:	0801179b 	.word	0x0801179b

08011994 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 8011994:	b590      	push	{r4, r7, lr}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
    return new Utest();
 801199c:	22d3      	movs	r2, #211	; 0xd3
 801199e:	4906      	ldr	r1, [pc, #24]	; (80119b8 <_ZN10UtestShell10createTestEv+0x24>)
 80119a0:	2004      	movs	r0, #4
 80119a2:	f7f7 fb43 	bl	800902c <_ZnwjPKci>
 80119a6:	4604      	mov	r4, r0
 80119a8:	4620      	mov	r0, r4
 80119aa:	f001 fb0f 	bl	8012fcc <_ZN5UtestC1Ev>
 80119ae:	4623      	mov	r3, r4
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd90      	pop	{r4, r7, pc}
 80119b8:	08023860 	.word	0x08023860

080119bc <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b082      	sub	sp, #8
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
    delete test;
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d004      	beq.n	80119d6 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	3204      	adds	r2, #4
 80119d0:	6812      	ldr	r2, [r2, #0]
 80119d2:	4618      	mov	r0, r3
 80119d4:	4790      	blx	r2
}
 80119d6:	bf00      	nop
 80119d8:	3708      	adds	r7, #8
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd80      	pop	{r7, pc}
	...

080119e0 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b088      	sub	sp, #32
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	333c      	adds	r3, #60	; 0x3c
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4940      	ldr	r1, [pc, #256]	; (8011af8 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	3314      	adds	r3, #20
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	687a      	ldr	r2, [r7, #4]
 8011a04:	68f9      	ldr	r1, [r7, #12]
 8011a06:	68b8      	ldr	r0, [r7, #8]
 8011a08:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	333c      	adds	r3, #60	; 0x3c
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	493a      	ldr	r1, [pc, #232]	; (8011afc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8011a18:	f001 faae 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8011a1c:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 8011a1e:	68f8      	ldr	r0, [r7, #12]
 8011a20:	f001 fa90 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011a24:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8011a26:	6879      	ldr	r1, [r7, #4]
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f001 fa6b 	bl	8012f04 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 8011a2e:	68f9      	ldr	r1, [r7, #12]
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f001 fa77 	bl	8012f24 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	333c      	adds	r3, #60	; 0x3c
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	4930      	ldr	r1, [pc, #192]	; (8011b00 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	4798      	blx	r3
    Utest* testToRun = createTest();
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	3388      	adds	r3, #136	; 0x88
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	68f8      	ldr	r0, [r7, #12]
 8011a4e:	4798      	blx	r3
 8011a50:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	333c      	adds	r3, #60	; 0x3c
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	492a      	ldr	r1, [pc, #168]	; (8011b04 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8011a5c:	6878      	ldr	r0, [r7, #4]
 8011a5e:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	333c      	adds	r3, #60	; 0x3c
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4927      	ldr	r1, [pc, #156]	; (8011b08 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	4798      	blx	r3
    testToRun->run();
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	3308      	adds	r3, #8
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	6978      	ldr	r0, [r7, #20]
 8011a78:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	333c      	adds	r3, #60	; 0x3c
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	4922      	ldr	r1, [pc, #136]	; (8011b0c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 8011a84:	6878      	ldr	r0, [r7, #4]
 8011a86:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 8011a88:	69f9      	ldr	r1, [r7, #28]
 8011a8a:	68f8      	ldr	r0, [r7, #12]
 8011a8c:	f001 fa4a 	bl	8012f24 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 8011a90:	69b9      	ldr	r1, [r7, #24]
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	f001 fa36 	bl	8012f04 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	333c      	adds	r3, #60	; 0x3c
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	491b      	ldr	r1, [pc, #108]	; (8011b10 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	4798      	blx	r3
    destroyTest(testToRun);
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	338c      	adds	r3, #140	; 0x8c
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	6979      	ldr	r1, [r7, #20]
 8011ab0:	68f8      	ldr	r0, [r7, #12]
 8011ab2:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	333c      	adds	r3, #60	; 0x3c
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	4915      	ldr	r1, [pc, #84]	; (8011b14 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 8011abe:	6878      	ldr	r0, [r7, #4]
 8011ac0:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	333c      	adds	r3, #60	; 0x3c
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	4913      	ldr	r1, [pc, #76]	; (8011b18 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	3318      	adds	r3, #24
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	68f9      	ldr	r1, [r7, #12]
 8011adc:	68b8      	ldr	r0, [r7, #8]
 8011ade:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	333c      	adds	r3, #60	; 0x3c
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	490c      	ldr	r1, [pc, #48]	; (8011b1c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	4798      	blx	r3
}
 8011aee:	bf00      	nop
 8011af0:	3720      	adds	r7, #32
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	08023874 	.word	0x08023874
 8011afc:	08023898 	.word	0x08023898
 8011b00:	080238b8 	.word	0x080238b8
 8011b04:	080238d4 	.word	0x080238d4
 8011b08:	080238f0 	.word	0x080238f0
 8011b0c:	0802390c 	.word	0x0802390c
 8011b10:	08023924 	.word	0x08023924
 8011b14:	08023940 	.word	0x08023940
 8011b18:	0802395c 	.word	0x0802395c
 8011b1c:	08023980 	.word	0x08023980

08011b20 <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 8011b20:	b480      	push	{r7}
 8011b22:	b083      	sub	sp, #12
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
    return next_;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	695b      	ldr	r3, [r3, #20]
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr

08011b38 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	b083      	sub	sp, #12
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	6039      	str	r1, [r7, #0]
    next_ = test;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	683a      	ldr	r2, [r7, #0]
 8011b46:	615a      	str	r2, [r3, #20]
    return this;
 8011b48:	687b      	ldr	r3, [r7, #4]
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	370c      	adds	r7, #12
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b54:	4770      	bx	lr

08011b56 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b082      	sub	sp, #8
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	695b      	ldr	r3, [r3, #20]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00b      	beq.n	8011b7e <_ZN10UtestShell10countTestsEv+0x28>
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	695a      	ldr	r2, [r3, #20]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	3310      	adds	r3, #16
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	4610      	mov	r0, r2
 8011b76:	4798      	blx	r3
 8011b78:	4603      	mov	r3, r0
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	e000      	b.n	8011b80 <_ZN10UtestShell10countTestsEv+0x2a>
 8011b7e:	2301      	movs	r3, #1
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3708      	adds	r7, #8
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}

08011b88 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
    return "TEST";
 8011b92:	4904      	ldr	r1, [pc, #16]	; (8011ba4 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	f7f9 fe0c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	080239a4 	.word	0x080239a4

08011ba8 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	689b      	ldr	r3, [r3, #8]
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7f9 fdfa 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	3708      	adds	r7, #8
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}

08011bc6 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 8011bc6:	b580      	push	{r7, lr}
 8011bc8:	b082      	sub	sp, #8
 8011bca:	af00      	add	r7, sp, #0
 8011bcc:	6078      	str	r0, [r7, #4]
 8011bce:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	685b      	ldr	r3, [r3, #4]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	6878      	ldr	r0, [r7, #4]
 8011bd8:	f7f9 fdeb 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 8011bdc:	6878      	ldr	r0, [r7, #4]
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	33a0      	adds	r3, #160	; 0xa0
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	687a      	ldr	r2, [r7, #4]
 8011bf8:	6839      	ldr	r1, [r7, #0]
 8011bfa:	4610      	mov	r0, r2
 8011bfc:	4798      	blx	r3
    formattedName += "(";
 8011bfe:	490e      	ldr	r1, [pc, #56]	; (8011c38 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f7fa fa1d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7fa fa17 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 8011c12:	490a      	ldr	r1, [pc, #40]	; (8011c3c <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7fa fa13 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	689b      	ldr	r3, [r3, #8]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f7fa fa0d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8011c26:	4906      	ldr	r1, [pc, #24]	; (8011c40 <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f7fa fa09 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 8011c2e:	bf00      	nop
}
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	3708      	adds	r7, #8
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bd80      	pop	{r7, pc}
 8011c38:	080239ac 	.word	0x080239ac
 8011c3c:	080239b0 	.word	0x080239b0
 8011c40:	080239b4 	.word	0x080239b4

08011c44 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8011c44:	b480      	push	{r7}
 8011c46:	b083      	sub	sp, #12
 8011c48:	af00      	add	r7, sp, #0
 8011c4a:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	7e5b      	ldrb	r3, [r3, #25]
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	370c      	adds	r7, #12
 8011c54:	46bd      	mov	sp, r7
 8011c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c5a:	4770      	bx	lr

08011c5c <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8011c64:	6878      	ldr	r0, [r7, #4]
 8011c66:	f001 f96d 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	681a      	ldr	r2, [r3, #0]
 8011c6e:	3228      	adds	r2, #40	; 0x28
 8011c70:	6812      	ldr	r2, [r2, #0]
 8011c72:	4618      	mov	r0, r3
 8011c74:	4790      	blx	r2
}
 8011c76:	bf00      	nop
 8011c78:	3708      	adds	r7, #8
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 8011c7e:	b480      	push	{r7}
 8011c80:	b083      	sub	sp, #12
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	6078      	str	r0, [r7, #4]
    return true;
 8011c86:	2301      	movs	r3, #1
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	7e1b      	ldrb	r3, [r3, #24]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	370c      	adds	r7, #12
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	761a      	strb	r2, [r3, #24]
}
 8011cba:	bf00      	nop
 8011cbc:	370c      	adds	r7, #12
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc4:	4770      	bx	lr

08011cc6 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 8011cc6:	b480      	push	{r7}
 8011cc8:	b083      	sub	sp, #12
 8011cca:	af00      	add	r7, sp, #0
 8011ccc:	6078      	str	r0, [r7, #4]

}
 8011cce:	bf00      	nop
 8011cd0:	370c      	adds	r7, #12
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr

08011cda <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 8011cda:	b480      	push	{r7}
 8011cdc:	b083      	sub	sp, #12
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
 8011ce2:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	60da      	str	r2, [r3, #12]
}
 8011cea:	bf00      	nop
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8011cf6:	b480      	push	{r7}
 8011cf8:	b083      	sub	sp, #12
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
 8011cfe:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	683a      	ldr	r2, [r7, #0]
 8011d04:	611a      	str	r2, [r3, #16]
}
 8011d06:	bf00      	nop
 8011d08:	370c      	adds	r7, #12
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr

08011d12 <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 8011d12:	b480      	push	{r7}
 8011d14:	b083      	sub	sp, #12
 8011d16:	af00      	add	r7, sp, #0
 8011d18:	6078      	str	r0, [r7, #4]
 8011d1a:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	683a      	ldr	r2, [r7, #0]
 8011d20:	605a      	str	r2, [r3, #4]
}
 8011d22:	bf00      	nop
 8011d24:	370c      	adds	r7, #12
 8011d26:	46bd      	mov	sp, r7
 8011d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2c:	4770      	bx	lr

08011d2e <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 8011d2e:	b480      	push	{r7}
 8011d30:	b083      	sub	sp, #12
 8011d32:	af00      	add	r7, sp, #0
 8011d34:	6078      	str	r0, [r7, #4]
 8011d36:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	683a      	ldr	r2, [r7, #0]
 8011d3c:	609a      	str	r2, [r3, #8]
}
 8011d3e:	bf00      	nop
 8011d40:	370c      	adds	r7, #12
 8011d42:	46bd      	mov	sp, r7
 8011d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d48:	4770      	bx	lr

08011d4a <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8011d4a:	b580      	push	{r7, lr}
 8011d4c:	b082      	sub	sp, #8
 8011d4e:	af00      	add	r7, sp, #0
 8011d50:	6078      	str	r0, [r7, #4]
 8011d52:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	4619      	mov	r1, r3
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7f9 fd29 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}

08011d68 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8011d68:	b480      	push	{r7}
 8011d6a:	b083      	sub	sp, #12
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	691b      	ldr	r3, [r3, #16]
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr

08011d80 <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 8011d80:	b590      	push	{r4, r7, lr}
 8011d82:	b087      	sub	sp, #28
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d101      	bne.n	8011d96 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 8011d92:	2301      	movs	r3, #1
 8011d94:	e01f      	b.n	8011dd6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d01b      	beq.n	8011dd4 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 8011d9c:	f107 0310 	add.w	r3, r7, #16
 8011da0:	68b9      	ldr	r1, [r7, #8]
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f9 fd05 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8011da8:	f107 0310 	add.w	r3, r7, #16
 8011dac:	4619      	mov	r1, r3
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f00c fb91 	bl	801e4d6 <_ZNK10TestFilter5matchERK12SimpleString>
 8011db4:	4603      	mov	r3, r0
 8011db6:	461c      	mov	r4, r3
 8011db8:	f107 0310 	add.w	r3, r7, #16
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	f7fa f8b0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8011dc2:	2c00      	cmp	r4, #0
 8011dc4:	d001      	beq.n	8011dca <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e005      	b.n	8011dd6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f00c fb5d 	bl	801e48a <_ZNK10TestFilter7getNextEv>
 8011dd0:	6078      	str	r0, [r7, #4]
 8011dd2:	e7e0      	b.n	8011d96 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 8011dd4:	2300      	movs	r3, #0
}
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	371c      	adds	r7, #28
 8011dda:	46bd      	mov	sp, r7
 8011ddc:	bd90      	pop	{r4, r7, pc}

08011dde <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 8011dde:	b580      	push	{r7, lr}
 8011de0:	b084      	sub	sp, #16
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	60f8      	str	r0, [r7, #12]
 8011de6:	60b9      	str	r1, [r7, #8]
 8011de8:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	685b      	ldr	r3, [r3, #4]
 8011dee:	68ba      	ldr	r2, [r7, #8]
 8011df0:	4619      	mov	r1, r3
 8011df2:	68f8      	ldr	r0, [r7, #12]
 8011df4:	f7ff ffc4 	bl	8011d80 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d00b      	beq.n	8011e16 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	687a      	ldr	r2, [r7, #4]
 8011e04:	4619      	mov	r1, r3
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7ff ffba 	bl	8011d80 <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d001      	beq.n	8011e16 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 8011e12:	2301      	movs	r3, #1
 8011e14:	e000      	b.n	8011e18 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8011e16:	2300      	movs	r3, #0
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3710      	adds	r7, #16
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	bd80      	pop	{r7, pc}

08011e20 <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 8011e20:	b590      	push	{r4, r7, lr}
 8011e22:	b083      	sub	sp, #12
 8011e24:	af00      	add	r7, sp, #0
 8011e26:	6078      	str	r0, [r7, #4]
 8011e28:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	339c      	adds	r3, #156	; 0x9c
 8011e30:	681c      	ldr	r4, [r3, #0]
 8011e32:	f001 f8b1 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8011e36:	4603      	mov	r3, r0
 8011e38:	461a      	mov	r2, r3
 8011e3a:	6839      	ldr	r1, [r7, #0]
 8011e3c:	6878      	ldr	r0, [r7, #4]
 8011e3e:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 8011e40:	bf00      	nop
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd90      	pop	{r4, r7, pc}

08011e48 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	60f8      	str	r0, [r7, #12]
 8011e50:	60b9      	str	r1, [r7, #8]
 8011e52:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	2201      	movs	r2, #1
 8011e58:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	f001 f872 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011e60:	4603      	mov	r3, r0
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	3234      	adds	r2, #52	; 0x34
 8011e66:	6812      	ldr	r2, [r2, #0]
 8011e68:	68b9      	ldr	r1, [r7, #8]
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	4790      	blx	r2
    terminator.exitCurrentTest();
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011e78:	bf00      	nop
 8011e7a:	3710      	adds	r7, #16
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	6838      	ldr	r0, [r7, #0]
 8011e92:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011e94:	bf00      	nop
 8011e96:	3708      	adds	r7, #8
 8011e98:	46bd      	mov	sp, r7
 8011e9a:	bd80      	pop	{r7, pc}

08011e9c <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011e9c:	b590      	push	{r4, r7, lr}
 8011e9e:	b09d      	sub	sp, #116	; 0x74
 8011ea0:	af04      	add	r7, sp, #16
 8011ea2:	60f8      	str	r0, [r7, #12]
 8011ea4:	607a      	str	r2, [r7, #4]
 8011ea6:	603b      	str	r3, [r7, #0]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011eac:	68f8      	ldr	r0, [r7, #12]
 8011eae:	f001 f849 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	681a      	ldr	r2, [r3, #0]
 8011eb6:	3228      	adds	r2, #40	; 0x28
 8011eb8:	6812      	ldr	r2, [r2, #0]
 8011eba:	4618      	mov	r0, r3
 8011ebc:	4790      	blx	r2
    if (!condition)
 8011ebe:	7afb      	ldrb	r3, [r7, #11]
 8011ec0:	f083 0301 	eor.w	r3, r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d03f      	beq.n	8011f4a <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	339c      	adds	r3, #156	; 0x9c
 8011ed0:	681c      	ldr	r4, [r3, #0]
 8011ed2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011ed6:	6879      	ldr	r1, [r7, #4]
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7f9 fc6a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8011ede:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011ee2:	6839      	ldr	r1, [r7, #0]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f7f9 fc64 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8011eea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011eee:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f7f9 fc5e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8011ef6:	f107 0014 	add.w	r0, r7, #20
 8011efa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011efe:	9302      	str	r3, [sp, #8]
 8011f00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f04:	9301      	str	r3, [sp, #4]
 8011f06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f0a:	9300      	str	r3, [sp, #0]
 8011f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011f10:	68f9      	ldr	r1, [r7, #12]
 8011f12:	f7fb ff6b 	bl	800ddec <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011f16:	f107 0314 	add.w	r3, r7, #20
 8011f1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	68f8      	ldr	r0, [r7, #12]
 8011f20:	47a0      	blx	r4
 8011f22:	f107 0314 	add.w	r3, r7, #20
 8011f26:	4618      	mov	r0, r3
 8011f28:	f7fc fdce 	bl	800eac8 <_ZN12CheckFailureD1Ev>
 8011f2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7f9 fff6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8011f36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7f9 fff1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8011f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7f9 ffec 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8011f4a:	bf00      	nop
 8011f4c:	3764      	adds	r7, #100	; 0x64
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd90      	pop	{r4, r7, pc}

08011f52 <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011f52:	b590      	push	{r4, r7, lr}
 8011f54:	b097      	sub	sp, #92	; 0x5c
 8011f56:	af02      	add	r7, sp, #8
 8011f58:	60f8      	str	r0, [r7, #12]
 8011f5a:	60b9      	str	r1, [r7, #8]
 8011f5c:	607a      	str	r2, [r7, #4]
 8011f5e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011f60:	68f8      	ldr	r0, [r7, #12]
 8011f62:	f000 ffef 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011f66:	4603      	mov	r3, r0
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	3228      	adds	r2, #40	; 0x28
 8011f6c:	6812      	ldr	r2, [r2, #0]
 8011f6e:	4618      	mov	r0, r3
 8011f70:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	339c      	adds	r3, #156	; 0x9c
 8011f78:	681c      	ldr	r4, [r3, #0]
 8011f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f7e:	68b9      	ldr	r1, [r7, #8]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7f9 fc16 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8011f86:	f107 0014 	add.w	r0, r7, #20
 8011f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f8e:	9300      	str	r3, [sp, #0]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	687a      	ldr	r2, [r7, #4]
 8011f94:	68f9      	ldr	r1, [r7, #12]
 8011f96:	f7fb ff71 	bl	800de7c <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8011f9a:	f107 0314 	add.w	r3, r7, #20
 8011f9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	47a0      	blx	r4
 8011fa6:	f107 0314 	add.w	r3, r7, #20
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f7 fc16 	bl	80097dc <_ZN11FailFailureD1Ev>
 8011fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f7f9 ffb4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 8011fba:	bf00      	nop
 8011fbc:	3754      	adds	r7, #84	; 0x54
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd90      	pop	{r4, r7, pc}

08011fc2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011fc2:	b590      	push	{r4, r7, lr}
 8011fc4:	b0a7      	sub	sp, #156	; 0x9c
 8011fc6:	af04      	add	r7, sp, #16
 8011fc8:	60f8      	str	r0, [r7, #12]
 8011fca:	60b9      	str	r1, [r7, #8]
 8011fcc:	607a      	str	r2, [r7, #4]
 8011fce:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f000 ffb7 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	3228      	adds	r2, #40	; 0x28
 8011fdc:	6812      	ldr	r2, [r2, #0]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d102      	bne.n	8011fee <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d068      	beq.n	80120c0 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d12a      	bne.n	8012050 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	339c      	adds	r3, #156	; 0x9c
 8012000:	681c      	ldr	r4, [r3, #0]
 8012002:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012006:	6839      	ldr	r1, [r7, #0]
 8012008:	4618      	mov	r0, r3
 801200a:	f7f9 fbd2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801200e:	f107 0010 	add.w	r0, r7, #16
 8012012:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012016:	9302      	str	r3, [sp, #8]
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	9301      	str	r3, [sp, #4]
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	9300      	str	r3, [sp, #0]
 8012020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012024:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012028:	68f9      	ldr	r1, [r7, #12]
 801202a:	f7fc f9ad 	bl	800e388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801202e:	f107 0310 	add.w	r3, r7, #16
 8012032:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8012036:	4619      	mov	r1, r3
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	47a0      	blx	r4
 801203c:	f107 0310 	add.w	r3, r7, #16
 8012040:	4618      	mov	r0, r3
 8012042:	f7fc fcb9 	bl	800e9b8 <_ZN18StringEqualFailureD1Ev>
 8012046:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801204a:	4618      	mov	r0, r3
 801204c:	f7f9 ff69 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8012050:	6879      	ldr	r1, [r7, #4]
 8012052:	68b8      	ldr	r0, [r7, #8]
 8012054:	f7f9 f9ea 	bl	800b42c <_ZN12SimpleString6StrCmpEPKcS1_>
 8012058:	4603      	mov	r3, r0
 801205a:	2b00      	cmp	r3, #0
 801205c:	bf14      	ite	ne
 801205e:	2301      	movne	r3, #1
 8012060:	2300      	moveq	r3, #0
 8012062:	b2db      	uxtb	r3, r3
 8012064:	2b00      	cmp	r3, #0
 8012066:	d02c      	beq.n	80120c2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	339c      	adds	r3, #156	; 0x9c
 801206e:	681c      	ldr	r4, [r3, #0]
 8012070:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	4618      	mov	r0, r3
 8012078:	f7f9 fb9b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801207c:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012080:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012084:	9302      	str	r3, [sp, #8]
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	9301      	str	r3, [sp, #4]
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012092:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012096:	68f9      	ldr	r1, [r7, #12]
 8012098:	f7fc f976 	bl	800e388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 801209c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120a0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80120a4:	4619      	mov	r1, r3
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	47a0      	blx	r4
 80120aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80120ae:	4618      	mov	r0, r3
 80120b0:	f7fc fc82 	bl	800e9b8 <_ZN18StringEqualFailureD1Ev>
 80120b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80120b8:	4618      	mov	r0, r3
 80120ba:	f7f9 ff32 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80120be:	e000      	b.n	80120c2 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80120c0:	bf00      	nop
}
 80120c2:	378c      	adds	r7, #140	; 0x8c
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd90      	pop	{r4, r7, pc}

080120c8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80120c8:	b590      	push	{r4, r7, lr}
 80120ca:	b0a7      	sub	sp, #156	; 0x9c
 80120cc:	af04      	add	r7, sp, #16
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	60b9      	str	r1, [r7, #8]
 80120d2:	607a      	str	r2, [r7, #4]
 80120d4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80120d6:	68f8      	ldr	r0, [r7, #12]
 80120d8:	f000 ff34 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80120dc:	4603      	mov	r3, r0
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	3228      	adds	r2, #40	; 0x28
 80120e2:	6812      	ldr	r2, [r2, #0]
 80120e4:	4618      	mov	r0, r3
 80120e6:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d102      	bne.n	80120f4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d06b      	beq.n	80121cc <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 80120fa:	68bb      	ldr	r3, [r7, #8]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d12b      	bne.n	8012158 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	339c      	adds	r3, #156	; 0x9c
 8012106:	681c      	ldr	r4, [r3, #0]
 8012108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801210c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012110:	4618      	mov	r0, r3
 8012112:	f7f9 fb4e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012116:	f107 0010 	add.w	r0, r7, #16
 801211a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801211e:	9302      	str	r3, [sp, #8]
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	9301      	str	r3, [sp, #4]
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	9300      	str	r3, [sp, #0]
 8012128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801212c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012130:	68f9      	ldr	r1, [r7, #12]
 8012132:	f7fc f929 	bl	800e388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012136:	f107 0310 	add.w	r3, r7, #16
 801213a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801213e:	4619      	mov	r1, r3
 8012140:	68f8      	ldr	r0, [r7, #12]
 8012142:	47a0      	blx	r4
 8012144:	f107 0310 	add.w	r3, r7, #16
 8012148:	4618      	mov	r0, r3
 801214a:	f7fc fc35 	bl	800e9b8 <_ZN18StringEqualFailureD1Ev>
 801214e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012152:	4618      	mov	r0, r3
 8012154:	f7f9 fee5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8012158:	683a      	ldr	r2, [r7, #0]
 801215a:	6879      	ldr	r1, [r7, #4]
 801215c:	68b8      	ldr	r0, [r7, #8]
 801215e:	f7f9 f9a4 	bl	800b4aa <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8012162:	4603      	mov	r3, r0
 8012164:	2b00      	cmp	r3, #0
 8012166:	bf14      	ite	ne
 8012168:	2301      	movne	r3, #1
 801216a:	2300      	moveq	r3, #0
 801216c:	b2db      	uxtb	r3, r3
 801216e:	2b00      	cmp	r3, #0
 8012170:	d02d      	beq.n	80121ce <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	339c      	adds	r3, #156	; 0x9c
 8012178:	681c      	ldr	r4, [r3, #0]
 801217a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801217e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012182:	4618      	mov	r0, r3
 8012184:	f7f9 fb15 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012188:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 801218c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012190:	9302      	str	r3, [sp, #8]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	9301      	str	r3, [sp, #4]
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	9300      	str	r3, [sp, #0]
 801219a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801219e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80121a2:	68f9      	ldr	r1, [r7, #12]
 80121a4:	f7fc f8f0 	bl	800e388 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80121a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80121b0:	4619      	mov	r1, r3
 80121b2:	68f8      	ldr	r0, [r7, #12]
 80121b4:	47a0      	blx	r4
 80121b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fc fbfc 	bl	800e9b8 <_ZN18StringEqualFailureD1Ev>
 80121c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7f9 feac 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80121ca:	e000      	b.n	80121ce <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80121cc:	bf00      	nop
}
 80121ce:	378c      	adds	r7, #140	; 0x8c
 80121d0:	46bd      	mov	sp, r7
 80121d2:	bd90      	pop	{r4, r7, pc}

080121d4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 80121d4:	b590      	push	{r4, r7, lr}
 80121d6:	b0ab      	sub	sp, #172	; 0xac
 80121d8:	af04      	add	r7, sp, #16
 80121da:	60f8      	str	r0, [r7, #12]
 80121dc:	60b9      	str	r1, [r7, #8]
 80121de:	607a      	str	r2, [r7, #4]
 80121e0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80121e2:	68f8      	ldr	r0, [r7, #12]
 80121e4:	f000 feae 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80121e8:	4603      	mov	r3, r0
 80121ea:	681a      	ldr	r2, [r3, #0]
 80121ec:	3228      	adds	r2, #40	; 0x28
 80121ee:	6812      	ldr	r2, [r2, #0]
 80121f0:	4618      	mov	r0, r3
 80121f2:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d102      	bne.n	8012200 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d07c      	beq.n	80122fa <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d128      	bne.n	801225e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	3398      	adds	r3, #152	; 0x98
 8012212:	681c      	ldr	r4, [r3, #0]
 8012214:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012218:	6839      	ldr	r1, [r7, #0]
 801221a:	4618      	mov	r0, r3
 801221c:	f7f9 fac9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012220:	f107 0010 	add.w	r0, r7, #16
 8012224:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012228:	9302      	str	r3, [sp, #8]
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	9301      	str	r3, [sp, #4]
 801222e:	68bb      	ldr	r3, [r7, #8]
 8012230:	9300      	str	r3, [sp, #0]
 8012232:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012236:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801223a:	68f9      	ldr	r1, [r7, #12]
 801223c:	f7fc f948 	bl	800e4d0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8012240:	f107 0310 	add.w	r3, r7, #16
 8012244:	4619      	mov	r1, r3
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	47a0      	blx	r4
 801224a:	f107 0310 	add.w	r3, r7, #16
 801224e:	4618      	mov	r0, r3
 8012250:	f7fc fb90 	bl	800e974 <_ZN24StringEqualNoCaseFailureD1Ev>
 8012254:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012258:	4618      	mov	r0, r3
 801225a:	f7f9 fe62 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 801225e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	4618      	mov	r0, r3
 8012266:	f7f9 faa4 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801226a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	4618      	mov	r0, r3
 8012272:	f7f9 fa9e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012276:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801227a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801227e:	4611      	mov	r1, r2
 8012280:	4618      	mov	r0, r3
 8012282:	f7f9 fe75 	bl	800bf70 <_ZNK12SimpleString12equalsNoCaseERKS_>
 8012286:	4603      	mov	r3, r0
 8012288:	f083 0301 	eor.w	r3, r3, #1
 801228c:	b2dc      	uxtb	r4, r3
 801228e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012292:	4618      	mov	r0, r3
 8012294:	f7f9 fe45 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012298:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801229c:	4618      	mov	r0, r3
 801229e:	f7f9 fe40 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80122a2:	2c00      	cmp	r4, #0
 80122a4:	d02a      	beq.n	80122fc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	3398      	adds	r3, #152	; 0x98
 80122ac:	681c      	ldr	r4, [r3, #0]
 80122ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80122b2:	6839      	ldr	r1, [r7, #0]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7f9 fa7c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80122ba:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80122be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80122c2:	9302      	str	r3, [sp, #8]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	9301      	str	r3, [sp, #4]
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80122d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80122d4:	68f9      	ldr	r1, [r7, #12]
 80122d6:	f7fc f8fb 	bl	800e4d0 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 80122da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80122de:	4619      	mov	r1, r3
 80122e0:	68f8      	ldr	r0, [r7, #12]
 80122e2:	47a0      	blx	r4
 80122e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80122e8:	4618      	mov	r0, r3
 80122ea:	f7fc fb43 	bl	800e974 <_ZN24StringEqualNoCaseFailureD1Ev>
 80122ee:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80122f2:	4618      	mov	r0, r3
 80122f4:	f7f9 fe15 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80122f8:	e000      	b.n	80122fc <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 80122fa:	bf00      	nop
}
 80122fc:	379c      	adds	r7, #156	; 0x9c
 80122fe:	46bd      	mov	sp, r7
 8012300:	bd90      	pop	{r4, r7, pc}

08012302 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012302:	b590      	push	{r4, r7, lr}
 8012304:	b0b3      	sub	sp, #204	; 0xcc
 8012306:	af04      	add	r7, sp, #16
 8012308:	60f8      	str	r0, [r7, #12]
 801230a:	60b9      	str	r1, [r7, #8]
 801230c:	607a      	str	r2, [r7, #4]
 801230e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012310:	68f8      	ldr	r0, [r7, #12]
 8012312:	f000 fe17 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012316:	4603      	mov	r3, r0
 8012318:	681a      	ldr	r2, [r3, #0]
 801231a:	3228      	adds	r2, #40	; 0x28
 801231c:	6812      	ldr	r2, [r2, #0]
 801231e:	4618      	mov	r0, r3
 8012320:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d103      	bne.n	8012330 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8012328:	68bb      	ldr	r3, [r7, #8]
 801232a:	2b00      	cmp	r3, #0
 801232c:	f000 80ad 	beq.w	801248a <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d002      	beq.n	801233c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8012336:	68bb      	ldr	r3, [r7, #8]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d140      	bne.n	80123be <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	3398      	adds	r3, #152	; 0x98
 8012342:	681c      	ldr	r4, [r3, #0]
 8012344:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012348:	68b9      	ldr	r1, [r7, #8]
 801234a:	4618      	mov	r0, r3
 801234c:	f7f9 fa31 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012350:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012354:	6879      	ldr	r1, [r7, #4]
 8012356:	4618      	mov	r0, r3
 8012358:	f7f9 fa2b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801235c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012360:	6839      	ldr	r1, [r7, #0]
 8012362:	4618      	mov	r0, r3
 8012364:	f7f9 fa25 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012368:	f107 0010 	add.w	r0, r7, #16
 801236c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012370:	9302      	str	r3, [sp, #8]
 8012372:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012376:	9301      	str	r3, [sp, #4]
 8012378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801237c:	9300      	str	r3, [sp, #0]
 801237e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012386:	68f9      	ldr	r1, [r7, #12]
 8012388:	f7fb fce6 	bl	800dd58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801238c:	f107 0310 	add.w	r3, r7, #16
 8012390:	4619      	mov	r1, r3
 8012392:	68f8      	ldr	r0, [r7, #12]
 8012394:	47a0      	blx	r4
 8012396:	f107 0310 	add.w	r3, r7, #16
 801239a:	4618      	mov	r0, r3
 801239c:	f7fc fbb6 	bl	800eb0c <_ZN15ContainsFailureD1Ev>
 80123a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f9 fdbc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80123aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f9 fdb7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80123b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7f9 fdb2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 80123be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80123c2:	6879      	ldr	r1, [r7, #4]
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7f9 f9f4 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80123ca:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80123ce:	68b9      	ldr	r1, [r7, #8]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f7f9 f9ee 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80123d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80123da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80123de:	4611      	mov	r1, r2
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7f9 fa64 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 80123e6:	4603      	mov	r3, r0
 80123e8:	f083 0301 	eor.w	r3, r3, #1
 80123ec:	b2dc      	uxtb	r4, r3
 80123ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f9 fd95 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80123f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f9 fd90 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012402:	2c00      	cmp	r4, #0
 8012404:	d042      	beq.n	801248c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	3398      	adds	r3, #152	; 0x98
 801240c:	681c      	ldr	r4, [r3, #0]
 801240e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012412:	68b9      	ldr	r1, [r7, #8]
 8012414:	4618      	mov	r0, r3
 8012416:	f7f9 f9cc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801241a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801241e:	6879      	ldr	r1, [r7, #4]
 8012420:	4618      	mov	r0, r3
 8012422:	f7f9 f9c6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012426:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801242a:	6839      	ldr	r1, [r7, #0]
 801242c:	4618      	mov	r0, r3
 801242e:	f7f9 f9c0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012432:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012436:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801243a:	9302      	str	r3, [sp, #8]
 801243c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012440:	9301      	str	r3, [sp, #4]
 8012442:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801244c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012450:	68f9      	ldr	r1, [r7, #12]
 8012452:	f7fb fc81 	bl	800dd58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012456:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801245a:	4619      	mov	r1, r3
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	47a0      	blx	r4
 8012460:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012464:	4618      	mov	r0, r3
 8012466:	f7fc fb51 	bl	800eb0c <_ZN15ContainsFailureD1Ev>
 801246a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801246e:	4618      	mov	r0, r3
 8012470:	f7f9 fd57 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012474:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012478:	4618      	mov	r0, r3
 801247a:	f7f9 fd52 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801247e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012482:	4618      	mov	r0, r3
 8012484:	f7f9 fd4d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012488:	e000      	b.n	801248c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801248a:	bf00      	nop
}
 801248c:	37bc      	adds	r7, #188	; 0xbc
 801248e:	46bd      	mov	sp, r7
 8012490:	bd90      	pop	{r4, r7, pc}

08012492 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8012492:	b590      	push	{r4, r7, lr}
 8012494:	b0b3      	sub	sp, #204	; 0xcc
 8012496:	af04      	add	r7, sp, #16
 8012498:	60f8      	str	r0, [r7, #12]
 801249a:	60b9      	str	r1, [r7, #8]
 801249c:	607a      	str	r2, [r7, #4]
 801249e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f000 fd4f 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80124a6:	4603      	mov	r3, r0
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	3228      	adds	r2, #40	; 0x28
 80124ac:	6812      	ldr	r2, [r2, #0]
 80124ae:	4618      	mov	r0, r3
 80124b0:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d103      	bne.n	80124c0 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	f000 80ad 	beq.w	801261a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d002      	beq.n	80124cc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d140      	bne.n	801254e <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	3398      	adds	r3, #152	; 0x98
 80124d2:	681c      	ldr	r4, [r3, #0]
 80124d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80124d8:	68b9      	ldr	r1, [r7, #8]
 80124da:	4618      	mov	r0, r3
 80124dc:	f7f9 f969 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80124e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80124e4:	6879      	ldr	r1, [r7, #4]
 80124e6:	4618      	mov	r0, r3
 80124e8:	f7f9 f963 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80124ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80124f0:	6839      	ldr	r1, [r7, #0]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7f9 f95d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80124f8:	f107 0010 	add.w	r0, r7, #16
 80124fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012500:	9302      	str	r3, [sp, #8]
 8012502:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012506:	9301      	str	r3, [sp, #4]
 8012508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801250c:	9300      	str	r3, [sp, #0]
 801250e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8012516:	68f9      	ldr	r1, [r7, #12]
 8012518:	f7fb fc1e 	bl	800dd58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801251c:	f107 0310 	add.w	r3, r7, #16
 8012520:	4619      	mov	r1, r3
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	47a0      	blx	r4
 8012526:	f107 0310 	add.w	r3, r7, #16
 801252a:	4618      	mov	r0, r3
 801252c:	f7fc faee 	bl	800eb0c <_ZN15ContainsFailureD1Ev>
 8012530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012534:	4618      	mov	r0, r3
 8012536:	f7f9 fcf4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801253a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801253e:	4618      	mov	r0, r3
 8012540:	f7f9 fcef 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012544:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012548:	4618      	mov	r0, r3
 801254a:	f7f9 fcea 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 801254e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012552:	6879      	ldr	r1, [r7, #4]
 8012554:	4618      	mov	r0, r3
 8012556:	f7f9 f92c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801255a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801255e:	68b9      	ldr	r1, [r7, #8]
 8012560:	4618      	mov	r0, r3
 8012562:	f7f9 f926 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012566:	f107 0264 	add.w	r2, r7, #100	; 0x64
 801256a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801256e:	4611      	mov	r1, r2
 8012570:	4618      	mov	r0, r3
 8012572:	f7f9 f9b7 	bl	800b8e4 <_ZNK12SimpleString14containsNoCaseERKS_>
 8012576:	4603      	mov	r3, r0
 8012578:	f083 0301 	eor.w	r3, r3, #1
 801257c:	b2dc      	uxtb	r4, r3
 801257e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012582:	4618      	mov	r0, r3
 8012584:	f7f9 fccd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012588:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801258c:	4618      	mov	r0, r3
 801258e:	f7f9 fcc8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012592:	2c00      	cmp	r4, #0
 8012594:	d042      	beq.n	801261c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3398      	adds	r3, #152	; 0x98
 801259c:	681c      	ldr	r4, [r3, #0]
 801259e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80125a2:	68b9      	ldr	r1, [r7, #8]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f9 f904 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80125aa:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80125ae:	6879      	ldr	r1, [r7, #4]
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7f9 f8fe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80125b6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125ba:	6839      	ldr	r1, [r7, #0]
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f9 f8f8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80125c2:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80125c6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125ca:	9302      	str	r3, [sp, #8]
 80125cc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80125d0:	9301      	str	r3, [sp, #4]
 80125d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80125dc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80125e0:	68f9      	ldr	r1, [r7, #12]
 80125e2:	f7fb fbb9 	bl	800dd58 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80125e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80125ea:	4619      	mov	r1, r3
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	47a0      	blx	r4
 80125f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80125f4:	4618      	mov	r0, r3
 80125f6:	f7fc fa89 	bl	800eb0c <_ZN15ContainsFailureD1Ev>
 80125fa:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f9 fc8f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012604:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8012608:	4618      	mov	r0, r3
 801260a:	f7f9 fc8a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801260e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8012612:	4618      	mov	r0, r3
 8012614:	f7f9 fc85 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012618:	e000      	b.n	801261c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801261a:	bf00      	nop
}
 801261c:	37bc      	adds	r7, #188	; 0xbc
 801261e:	46bd      	mov	sp, r7
 8012620:	bd90      	pop	{r4, r7, pc}

08012622 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012622:	b590      	push	{r4, r7, lr}
 8012624:	b099      	sub	sp, #100	; 0x64
 8012626:	af04      	add	r7, sp, #16
 8012628:	60f8      	str	r0, [r7, #12]
 801262a:	60b9      	str	r1, [r7, #8]
 801262c:	607a      	str	r2, [r7, #4]
 801262e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f000 fc87 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012636:	4603      	mov	r3, r0
 8012638:	681a      	ldr	r2, [r3, #0]
 801263a:	3228      	adds	r2, #40	; 0x28
 801263c:	6812      	ldr	r2, [r2, #0]
 801263e:	4618      	mov	r0, r3
 8012640:	4790      	blx	r2
    if (expected != actual)
 8012642:	68ba      	ldr	r2, [r7, #8]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	429a      	cmp	r2, r3
 8012648:	d027      	beq.n	801269a <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	339c      	adds	r3, #156	; 0x9c
 8012650:	681c      	ldr	r4, [r3, #0]
 8012652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012656:	6839      	ldr	r1, [r7, #0]
 8012658:	4618      	mov	r0, r3
 801265a:	f7f9 f8aa 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801265e:	f107 0014 	add.w	r0, r7, #20
 8012662:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012666:	9302      	str	r3, [sp, #8]
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	9301      	str	r3, [sp, #4]
 801266c:	68bb      	ldr	r3, [r7, #8]
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012672:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012674:	68f9      	ldr	r1, [r7, #12]
 8012676:	f7fb fc1f 	bl	800deb8 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 801267a:	f107 0314 	add.w	r3, r7, #20
 801267e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012680:	4619      	mov	r1, r3
 8012682:	68f8      	ldr	r0, [r7, #12]
 8012684:	47a0      	blx	r4
 8012686:	f107 0314 	add.w	r3, r7, #20
 801268a:	4618      	mov	r0, r3
 801268c:	f7fc f9fa 	bl	800ea84 <_ZN17LongsEqualFailureD1Ev>
 8012690:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012694:	4618      	mov	r0, r3
 8012696:	f7f9 fc44 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801269a:	bf00      	nop
 801269c:	3754      	adds	r7, #84	; 0x54
 801269e:	46bd      	mov	sp, r7
 80126a0:	bd90      	pop	{r4, r7, pc}

080126a2 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80126a2:	b590      	push	{r4, r7, lr}
 80126a4:	b099      	sub	sp, #100	; 0x64
 80126a6:	af04      	add	r7, sp, #16
 80126a8:	60f8      	str	r0, [r7, #12]
 80126aa:	60b9      	str	r1, [r7, #8]
 80126ac:	607a      	str	r2, [r7, #4]
 80126ae:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80126b0:	68f8      	ldr	r0, [r7, #12]
 80126b2:	f000 fc47 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80126b6:	4603      	mov	r3, r0
 80126b8:	681a      	ldr	r2, [r3, #0]
 80126ba:	3228      	adds	r2, #40	; 0x28
 80126bc:	6812      	ldr	r2, [r2, #0]
 80126be:	4618      	mov	r0, r3
 80126c0:	4790      	blx	r2
    if (expected != actual)
 80126c2:	68ba      	ldr	r2, [r7, #8]
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d027      	beq.n	801271a <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	339c      	adds	r3, #156	; 0x9c
 80126d0:	681c      	ldr	r4, [r3, #0]
 80126d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126d6:	6839      	ldr	r1, [r7, #0]
 80126d8:	4618      	mov	r0, r3
 80126da:	f7f9 f86a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80126de:	f107 0014 	add.w	r0, r7, #20
 80126e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80126e6:	9302      	str	r3, [sp, #8]
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	9301      	str	r3, [sp, #4]
 80126ec:	68bb      	ldr	r3, [r7, #8]
 80126ee:	9300      	str	r3, [sp, #0]
 80126f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80126f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80126f4:	68f9      	ldr	r1, [r7, #12]
 80126f6:	f7fb fcab 	bl	800e050 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 80126fa:	f107 0314 	add.w	r3, r7, #20
 80126fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012700:	4619      	mov	r1, r3
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	47a0      	blx	r4
 8012706:	f107 0314 	add.w	r3, r7, #20
 801270a:	4618      	mov	r0, r3
 801270c:	f7fc f998 	bl	800ea40 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8012710:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012714:	4618      	mov	r0, r3
 8012716:	f7f9 fc04 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801271a:	bf00      	nop
 801271c:	3754      	adds	r7, #84	; 0x54
 801271e:	46bd      	mov	sp, r7
 8012720:	bd90      	pop	{r4, r7, pc}
	...

08012724 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012724:	b082      	sub	sp, #8
 8012726:	b590      	push	{r4, r7, lr}
 8012728:	b099      	sub	sp, #100	; 0x64
 801272a:	af02      	add	r7, sp, #8
 801272c:	60f8      	str	r0, [r7, #12]
 801272e:	1d38      	adds	r0, r7, #4
 8012730:	e880 0006 	stmia.w	r0, {r1, r2}
 8012734:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8012736:	68f8      	ldr	r0, [r7, #12]
 8012738:	f000 fc04 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 801273c:	4603      	mov	r3, r0
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	3228      	adds	r2, #40	; 0x28
 8012742:	6812      	ldr	r2, [r2, #0]
 8012744:	4618      	mov	r0, r3
 8012746:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	339c      	adds	r3, #156	; 0x9c
 801274e:	681c      	ldr	r4, [r3, #0]
 8012750:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012754:	4919      	ldr	r1, [pc, #100]	; (80127bc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8012756:	4618      	mov	r0, r3
 8012758:	f7f9 f82b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801275c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012760:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8012762:	4618      	mov	r0, r3
 8012764:	f7f9 f825 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012768:	f107 0014 	add.w	r0, r7, #20
 801276c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012770:	9301      	str	r3, [sp, #4]
 8012772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012776:	9300      	str	r3, [sp, #0]
 8012778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801277a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801277c:	68f9      	ldr	r1, [r7, #12]
 801277e:	f7fc f84d 	bl	800e81c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 8012782:	f107 0314 	add.w	r3, r7, #20
 8012786:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801278a:	4619      	mov	r1, r3
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	47a0      	blx	r4
 8012790:	f107 0314 	add.w	r3, r7, #20
 8012794:	4618      	mov	r0, r3
 8012796:	f7fc f887 	bl	800e8a8 <_ZN25FeatureUnsupportedFailureD1Ev>
 801279a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801279e:	4618      	mov	r0, r3
 80127a0:	f7f9 fbbf 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80127a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f9 fbba 	bl	800bf22 <_ZN12SimpleStringD1Ev>
#endif
}
 80127ae:	bf00      	nop
 80127b0:	375c      	adds	r7, #92	; 0x5c
 80127b2:	46bd      	mov	sp, r7
 80127b4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80127b8:	b002      	add	sp, #8
 80127ba:	4770      	bx	lr
 80127bc:	080239b8 	.word	0x080239b8

080127c0 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80127c0:	b082      	sub	sp, #8
 80127c2:	b590      	push	{r4, r7, lr}
 80127c4:	b099      	sub	sp, #100	; 0x64
 80127c6:	af02      	add	r7, sp, #8
 80127c8:	60f8      	str	r0, [r7, #12]
 80127ca:	1d38      	adds	r0, r7, #4
 80127cc:	e880 0006 	stmia.w	r0, {r1, r2}
 80127d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f000 fbb6 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80127d8:	4603      	mov	r3, r0
 80127da:	681a      	ldr	r2, [r3, #0]
 80127dc:	3228      	adds	r2, #40	; 0x28
 80127de:	6812      	ldr	r2, [r2, #0]
 80127e0:	4618      	mov	r0, r3
 80127e2:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	339c      	adds	r3, #156	; 0x9c
 80127ea:	681c      	ldr	r4, [r3, #0]
 80127ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80127f0:	4919      	ldr	r1, [pc, #100]	; (8012858 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7f8 ffdd 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80127f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80127fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f8 ffd7 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012804:	f107 0014 	add.w	r0, r7, #20
 8012808:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801280c:	9301      	str	r3, [sp, #4]
 801280e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012812:	9300      	str	r3, [sp, #0]
 8012814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012816:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012818:	68f9      	ldr	r1, [r7, #12]
 801281a:	f7fb ffff 	bl	800e81c <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801281e:	f107 0314 	add.w	r3, r7, #20
 8012822:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012826:	4619      	mov	r1, r3
 8012828:	68f8      	ldr	r0, [r7, #12]
 801282a:	47a0      	blx	r4
 801282c:	f107 0314 	add.w	r3, r7, #20
 8012830:	4618      	mov	r0, r3
 8012832:	f7fc f839 	bl	800e8a8 <_ZN25FeatureUnsupportedFailureD1Ev>
 8012836:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801283a:	4618      	mov	r0, r3
 801283c:	f7f9 fb71 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012840:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012844:	4618      	mov	r0, r3
 8012846:	f7f9 fb6c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
#endif
}
 801284a:	bf00      	nop
 801284c:	375c      	adds	r7, #92	; 0x5c
 801284e:	46bd      	mov	sp, r7
 8012850:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8012854:	b002      	add	sp, #8
 8012856:	4770      	bx	lr
 8012858:	080239b8 	.word	0x080239b8

0801285c <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b099      	sub	sp, #100	; 0x64
 8012860:	af04      	add	r7, sp, #16
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	607b      	str	r3, [r7, #4]
 8012866:	460b      	mov	r3, r1
 8012868:	72fb      	strb	r3, [r7, #11]
 801286a:	4613      	mov	r3, r2
 801286c:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f000 fb68 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012874:	4603      	mov	r3, r0
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	3228      	adds	r2, #40	; 0x28
 801287a:	6812      	ldr	r2, [r2, #0]
 801287c:	4618      	mov	r0, r3
 801287e:	4790      	blx	r2
    if (expected != actual)
 8012880:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8012884:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8012888:	429a      	cmp	r2, r3
 801288a:	d029      	beq.n	80128e0 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	339c      	adds	r3, #156	; 0x9c
 8012892:	681c      	ldr	r4, [r3, #0]
 8012894:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012898:	6879      	ldr	r1, [r7, #4]
 801289a:	4618      	mov	r0, r3
 801289c:	f7f8 ff89 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80128a0:	f107 0014 	add.w	r0, r7, #20
 80128a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80128a8:	9302      	str	r3, [sp, #8]
 80128aa:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80128b4:	9300      	str	r3, [sp, #0]
 80128b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80128b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128ba:	68f9      	ldr	r1, [r7, #12]
 80128bc:	f7fb fc94 	bl	800e1e8 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80128c0:	f107 0314 	add.w	r3, r7, #20
 80128c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80128c6:	4619      	mov	r1, r3
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	47a0      	blx	r4
 80128cc:	f107 0314 	add.w	r3, r7, #20
 80128d0:	4618      	mov	r0, r3
 80128d2:	f7fc f893 	bl	800e9fc <_ZN23SignedBytesEqualFailureD1Ev>
 80128d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80128da:	4618      	mov	r0, r3
 80128dc:	f7f9 fb21 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 80128e0:	bf00      	nop
 80128e2:	3754      	adds	r7, #84	; 0x54
 80128e4:	46bd      	mov	sp, r7
 80128e6:	bd90      	pop	{r4, r7, pc}

080128e8 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80128e8:	b590      	push	{r4, r7, lr}
 80128ea:	b09d      	sub	sp, #116	; 0x74
 80128ec:	af04      	add	r7, sp, #16
 80128ee:	60f8      	str	r0, [r7, #12]
 80128f0:	60b9      	str	r1, [r7, #8]
 80128f2:	607a      	str	r2, [r7, #4]
 80128f4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f000 fb24 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80128fc:	4603      	mov	r3, r0
 80128fe:	681a      	ldr	r2, [r3, #0]
 8012900:	3228      	adds	r2, #40	; 0x28
 8012902:	6812      	ldr	r2, [r2, #0]
 8012904:	4618      	mov	r0, r3
 8012906:	4790      	blx	r2
    if (expected != actual)
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	429a      	cmp	r2, r3
 801290e:	d03f      	beq.n	8012990 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	681b      	ldr	r3, [r3, #0]
 8012914:	339c      	adds	r3, #156	; 0x9c
 8012916:	681c      	ldr	r4, [r3, #0]
 8012918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801291c:	68b9      	ldr	r1, [r7, #8]
 801291e:	4618      	mov	r0, r3
 8012920:	f7f9 fdea 	bl	800c4f8 <_Z10StringFromPKv>
 8012924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	f7f9 fde4 	bl	800c4f8 <_Z10StringFromPKv>
 8012930:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012934:	6839      	ldr	r1, [r7, #0]
 8012936:	4618      	mov	r0, r3
 8012938:	f7f8 ff3b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801293c:	f107 0014 	add.w	r0, r7, #20
 8012940:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012944:	9302      	str	r3, [sp, #8]
 8012946:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801294a:	9301      	str	r3, [sp, #4]
 801294c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012954:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012956:	68f9      	ldr	r1, [r7, #12]
 8012958:	f7fb f814 	bl	800d984 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 801295c:	f107 0314 	add.w	r3, r7, #20
 8012960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012962:	4619      	mov	r1, r3
 8012964:	68f8      	ldr	r0, [r7, #12]
 8012966:	47a0      	blx	r4
 8012968:	f107 0314 	add.w	r3, r7, #20
 801296c:	4618      	mov	r0, r3
 801296e:	f7fc f955 	bl	800ec1c <_ZN13EqualsFailureD1Ev>
 8012972:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012976:	4618      	mov	r0, r3
 8012978:	f7f9 fad3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801297c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012980:	4618      	mov	r0, r3
 8012982:	f7f9 face 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012986:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801298a:	4618      	mov	r0, r3
 801298c:	f7f9 fac9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012990:	bf00      	nop
 8012992:	3764      	adds	r7, #100	; 0x64
 8012994:	46bd      	mov	sp, r7
 8012996:	bd90      	pop	{r4, r7, pc}

08012998 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012998:	b590      	push	{r4, r7, lr}
 801299a:	b09d      	sub	sp, #116	; 0x74
 801299c:	af04      	add	r7, sp, #16
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 facc 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 80129ac:	4603      	mov	r3, r0
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	3228      	adds	r2, #40	; 0x28
 80129b2:	6812      	ldr	r2, [r2, #0]
 80129b4:	4618      	mov	r0, r3
 80129b6:	4790      	blx	r2
    if (expected != actual)
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	429a      	cmp	r2, r3
 80129be:	d03f      	beq.n	8012a40 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	339c      	adds	r3, #156	; 0x9c
 80129c6:	681c      	ldr	r4, [r3, #0]
 80129c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80129cc:	68b9      	ldr	r1, [r7, #8]
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7f9 fdbc 	bl	800c54c <_Z10StringFromPFvvE>
 80129d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80129d8:	6879      	ldr	r1, [r7, #4]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7f9 fdb6 	bl	800c54c <_Z10StringFromPFvvE>
 80129e0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80129e4:	6839      	ldr	r1, [r7, #0]
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f8 fee3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80129ec:	f107 0014 	add.w	r0, r7, #20
 80129f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80129f4:	9302      	str	r3, [sp, #8]
 80129f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80129fa:	9301      	str	r3, [sp, #4]
 80129fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a00:	9300      	str	r3, [sp, #0]
 8012a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a04:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012a06:	68f9      	ldr	r1, [r7, #12]
 8012a08:	f7fa ffbc 	bl	800d984 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012a0c:	f107 0314 	add.w	r3, r7, #20
 8012a10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012a12:	4619      	mov	r1, r3
 8012a14:	68f8      	ldr	r0, [r7, #12]
 8012a16:	47a0      	blx	r4
 8012a18:	f107 0314 	add.w	r3, r7, #20
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f7fc f8fd 	bl	800ec1c <_ZN13EqualsFailureD1Ev>
 8012a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7f9 fa7b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012a2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012a30:	4618      	mov	r0, r3
 8012a32:	f7f9 fa76 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7f9 fa71 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012a40:	bf00      	nop
 8012a42:	3764      	adds	r7, #100	; 0x64
 8012a44:	46bd      	mov	sp, r7
 8012a46:	bd90      	pop	{r4, r7, pc}

08012a48 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012a48:	b590      	push	{r4, r7, lr}
 8012a4a:	b09d      	sub	sp, #116	; 0x74
 8012a4c:	af02      	add	r7, sp, #8
 8012a4e:	6278      	str	r0, [r7, #36]	; 0x24
 8012a50:	ed87 0b06 	vstr	d0, [r7, #24]
 8012a54:	ed87 1b04 	vstr	d1, [r7, #16]
 8012a58:	ed87 2b02 	vstr	d2, [r7, #8]
 8012a5c:	6239      	str	r1, [r7, #32]
 8012a5e:	607a      	str	r2, [r7, #4]
 8012a60:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012a62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a64:	f000 fa6e 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	681a      	ldr	r2, [r3, #0]
 8012a6c:	3228      	adds	r2, #40	; 0x28
 8012a6e:	6812      	ldr	r2, [r2, #0]
 8012a70:	4618      	mov	r0, r3
 8012a72:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8012a74:	ed97 2b02 	vldr	d2, [r7, #8]
 8012a78:	ed97 1b04 	vldr	d1, [r7, #16]
 8012a7c:	ed97 0b06 	vldr	d0, [r7, #24]
 8012a80:	f7fe fd4a 	bl	8011518 <_Z13doubles_equalddd>
 8012a84:	4603      	mov	r3, r0
 8012a86:	f083 0301 	eor.w	r3, r3, #1
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d029      	beq.n	8012ae4 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 8012a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	339c      	adds	r3, #156	; 0x9c
 8012a96:	681c      	ldr	r4, [r3, #0]
 8012a98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012a9c:	6a39      	ldr	r1, [r7, #32]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	f7f8 fe87 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012aa4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8012aa8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	ed97 2b02 	vldr	d2, [r7, #8]
 8012ab2:	ed97 1b04 	vldr	d1, [r7, #16]
 8012ab6:	ed97 0b06 	vldr	d0, [r7, #24]
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ac0:	f7fa ffa2 	bl	800da08 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 8012ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ac8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012aca:	4619      	mov	r1, r3
 8012acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ace:	47a0      	blx	r4
 8012ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fc f87f 	bl	800ebd8 <_ZN19DoublesEqualFailureD1Ev>
 8012ada:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f9 fa1f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012ae4:	bf00      	nop
 8012ae6:	376c      	adds	r7, #108	; 0x6c
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd90      	pop	{r4, r7, pc}

08012aec <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012aec:	b590      	push	{r4, r7, lr}
 8012aee:	b0a7      	sub	sp, #156	; 0x9c
 8012af0:	af04      	add	r7, sp, #16
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	607a      	str	r2, [r7, #4]
 8012af8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012afa:	68f8      	ldr	r0, [r7, #12]
 8012afc:	f000 fa22 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012b00:	4603      	mov	r3, r0
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	3228      	adds	r2, #40	; 0x28
 8012b06:	6812      	ldr	r2, [r2, #0]
 8012b08:	4618      	mov	r0, r3
 8012b0a:	4790      	blx	r2
	if (length == 0) return;
 8012b0c:	683b      	ldr	r3, [r7, #0]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d075      	beq.n	8012bfe <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d071      	beq.n	8012c02 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d002      	beq.n	8012b2a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8012b24:	68bb      	ldr	r3, [r7, #8]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d12d      	bne.n	8012b86 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012b2a:	68fb      	ldr	r3, [r7, #12]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	339c      	adds	r3, #156	; 0x9c
 8012b30:	681c      	ldr	r4, [r3, #0]
 8012b32:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012b36:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7f8 fe39 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012b40:	f107 0010 	add.w	r0, r7, #16
 8012b44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012b48:	9303      	str	r3, [sp, #12]
 8012b4a:	683b      	ldr	r3, [r7, #0]
 8012b4c:	9302      	str	r3, [sp, #8]
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	9301      	str	r3, [sp, #4]
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	9300      	str	r3, [sp, #0]
 8012b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b5a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012b5e:	68f9      	ldr	r1, [r7, #12]
 8012b60:	f7fb fd70 	bl	800e644 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012b64:	f107 0310 	add.w	r3, r7, #16
 8012b68:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	68f8      	ldr	r0, [r7, #12]
 8012b70:	47a0      	blx	r4
 8012b72:	f107 0310 	add.w	r3, r7, #16
 8012b76:	4618      	mov	r0, r3
 8012b78:	f7fb feda 	bl	800e930 <_ZN18BinaryEqualFailureD1Ev>
 8012b7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7f9 f9ce 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 8012b86:	683a      	ldr	r2, [r7, #0]
 8012b88:	6879      	ldr	r1, [r7, #4]
 8012b8a:	68b8      	ldr	r0, [r7, #8]
 8012b8c:	f7f8 fd30 	bl	800b5f0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 8012b90:	4603      	mov	r3, r0
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	bf14      	ite	ne
 8012b96:	2301      	movne	r3, #1
 8012b98:	2300      	moveq	r3, #0
 8012b9a:	b2db      	uxtb	r3, r3
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d031      	beq.n	8012c04 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	339c      	adds	r3, #156	; 0x9c
 8012ba6:	681c      	ldr	r4, [r3, #0]
 8012ba8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bac:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7f8 fdfe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012bb6:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8012bba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bbe:	9303      	str	r3, [sp, #12]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	9302      	str	r3, [sp, #8]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	9301      	str	r3, [sp, #4]
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	9300      	str	r3, [sp, #0]
 8012bcc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012bd0:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8012bd4:	68f9      	ldr	r1, [r7, #12]
 8012bd6:	f7fb fd35 	bl	800e644 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8012bda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012bde:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8012be2:	4619      	mov	r1, r3
 8012be4:	68f8      	ldr	r0, [r7, #12]
 8012be6:	47a0      	blx	r4
 8012be8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fb fe9f 	bl	800e930 <_ZN18BinaryEqualFailureD1Ev>
 8012bf2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f7f9 f993 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012bfc:	e002      	b.n	8012c04 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 8012bfe:	bf00      	nop
 8012c00:	e000      	b.n	8012c04 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8012c02:	bf00      	nop
}
 8012c04:	378c      	adds	r7, #140	; 0x8c
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd90      	pop	{r4, r7, pc}

08012c0a <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8012c0a:	b590      	push	{r4, r7, lr}
 8012c0c:	b09b      	sub	sp, #108	; 0x6c
 8012c0e:	af06      	add	r7, sp, #24
 8012c10:	60f8      	str	r0, [r7, #12]
 8012c12:	60b9      	str	r1, [r7, #8]
 8012c14:	607a      	str	r2, [r7, #4]
 8012c16:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f000 f993 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	681a      	ldr	r2, [r3, #0]
 8012c22:	3228      	adds	r2, #40	; 0x28
 8012c24:	6812      	ldr	r2, [r2, #0]
 8012c26:	4618      	mov	r0, r3
 8012c28:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8012c2a:	68ba      	ldr	r2, [r7, #8]
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	405a      	eors	r2, r3
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	4013      	ands	r3, r2
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d02b      	beq.n	8012c90 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	339c      	adds	r3, #156	; 0x9c
 8012c3e:	681c      	ldr	r4, [r3, #0]
 8012c40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f8 fdb3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012c4c:	f107 0014 	add.w	r0, r7, #20
 8012c50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c54:	9304      	str	r3, [sp, #16]
 8012c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012c58:	9303      	str	r3, [sp, #12]
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	9302      	str	r3, [sp, #8]
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	9301      	str	r3, [sp, #4]
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012c6a:	68f9      	ldr	r1, [r7, #12]
 8012c6c:	f7fb fd7a 	bl	800e764 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 8012c70:	f107 0314 	add.w	r3, r7, #20
 8012c74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012c76:	4619      	mov	r1, r3
 8012c78:	68f8      	ldr	r0, [r7, #12]
 8012c7a:	47a0      	blx	r4
 8012c7c:	f107 0314 	add.w	r3, r7, #20
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7fb fe33 	bl	800e8ec <_ZN16BitsEqualFailureD1Ev>
 8012c86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7f9 f949 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012c90:	bf00      	nop
 8012c92:	3754      	adds	r7, #84	; 0x54
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd90      	pop	{r4, r7, pc}

08012c98 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 8012c98:	b590      	push	{r4, r7, lr}
 8012c9a:	b09d      	sub	sp, #116	; 0x74
 8012c9c:	af04      	add	r7, sp, #16
 8012c9e:	60f8      	str	r0, [r7, #12]
 8012ca0:	607a      	str	r2, [r7, #4]
 8012ca2:	603b      	str	r3, [r7, #0]
 8012ca4:	460b      	mov	r3, r1
 8012ca6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012ca8:	68f8      	ldr	r0, [r7, #12]
 8012caa:	f000 f94b 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	3228      	adds	r2, #40	; 0x28
 8012cb4:	6812      	ldr	r2, [r2, #0]
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	4790      	blx	r2
    if (failed)
 8012cba:	7afb      	ldrb	r3, [r7, #11]
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d03f      	beq.n	8012d40 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	339c      	adds	r3, #156	; 0x9c
 8012cc6:	681c      	ldr	r4, [r3, #0]
 8012cc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012ccc:	6879      	ldr	r1, [r7, #4]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7f8 fd6f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012cd4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7f8 fd69 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012ce0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012ce4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7f8 fd63 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012cec:	f107 0014 	add.w	r0, r7, #20
 8012cf0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012cf4:	9302      	str	r3, [sp, #8]
 8012cf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012cfa:	9301      	str	r3, [sp, #4]
 8012cfc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d00:	9300      	str	r3, [sp, #0]
 8012d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012d04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012d06:	68f9      	ldr	r1, [r7, #12]
 8012d08:	f7fa ff30 	bl	800db6c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012d0c:	f107 0314 	add.w	r3, r7, #20
 8012d10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012d12:	4619      	mov	r1, r3
 8012d14:	68f8      	ldr	r0, [r7, #12]
 8012d16:	47a0      	blx	r4
 8012d18:	f107 0314 	add.w	r3, r7, #20
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7fb ff39 	bl	800eb94 <_ZN17CheckEqualFailureD1Ev>
 8012d22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012d26:	4618      	mov	r0, r3
 8012d28:	f7f9 f8fb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012d2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d30:	4618      	mov	r0, r3
 8012d32:	f7f9 f8f6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012d36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7f9 f8f1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012d40:	bf00      	nop
 8012d42:	3764      	adds	r7, #100	; 0x64
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd90      	pop	{r4, r7, pc}

08012d48 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8012d48:	b590      	push	{r4, r7, lr}
 8012d4a:	b09d      	sub	sp, #116	; 0x74
 8012d4c:	af04      	add	r7, sp, #16
 8012d4e:	60f8      	str	r0, [r7, #12]
 8012d50:	607a      	str	r2, [r7, #4]
 8012d52:	603b      	str	r3, [r7, #0]
 8012d54:	460b      	mov	r3, r1
 8012d56:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8012d58:	68f8      	ldr	r0, [r7, #12]
 8012d5a:	f000 f8f3 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	681a      	ldr	r2, [r3, #0]
 8012d62:	3228      	adds	r2, #40	; 0x28
 8012d64:	6812      	ldr	r2, [r2, #0]
 8012d66:	4618      	mov	r0, r3
 8012d68:	4790      	blx	r2
    if (!comparison)
 8012d6a:	7afb      	ldrb	r3, [r7, #11]
 8012d6c:	f083 0301 	eor.w	r3, r3, #1
 8012d70:	b2db      	uxtb	r3, r3
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d03f      	beq.n	8012df6 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	339c      	adds	r3, #156	; 0x9c
 8012d7c:	681c      	ldr	r4, [r3, #0]
 8012d7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012d82:	6879      	ldr	r1, [r7, #4]
 8012d84:	4618      	mov	r0, r3
 8012d86:	f7f8 fd14 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012d8a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012d8e:	6839      	ldr	r1, [r7, #0]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7f8 fd0e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012d96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012d9a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f7f8 fd08 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8012da2:	f107 0014 	add.w	r0, r7, #20
 8012da6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012daa:	9302      	str	r3, [sp, #8]
 8012dac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012db0:	9301      	str	r3, [sp, #4]
 8012db2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012dbc:	68f9      	ldr	r1, [r7, #12]
 8012dbe:	f7fa ff83 	bl	800dcc8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8012dc2:	f107 0314 	add.w	r3, r7, #20
 8012dc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8012dc8:	4619      	mov	r1, r3
 8012dca:	68f8      	ldr	r0, [r7, #12]
 8012dcc:	47a0      	blx	r4
 8012dce:	f107 0314 	add.w	r3, r7, #20
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fb febc 	bl	800eb50 <_ZN17ComparisonFailureD1Ev>
 8012dd8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7f9 f8a0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012de2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7f9 f89b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8012dec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012df0:	4618      	mov	r0, r3
 8012df2:	f7f9 f896 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012df6:	bf00      	nop
 8012df8:	3764      	adds	r7, #100	; 0x64
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd90      	pop	{r4, r7, pc}
	...

08012e00 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 8012e00:	b5b0      	push	{r4, r5, r7, lr}
 8012e02:	b088      	sub	sp, #32
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 8012e0e:	f107 0310 	add.w	r3, r7, #16
 8012e12:	4924      	ldr	r1, [pc, #144]	; (8012ea4 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7f8 fccc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8012e1a:	f107 0310 	add.w	r3, r7, #16
 8012e1e:	6879      	ldr	r1, [r7, #4]
 8012e20:	4618      	mov	r0, r3
 8012e22:	f7f9 f90d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8012e26:	f107 0310 	add.w	r3, r7, #16
 8012e2a:	491f      	ldr	r1, [pc, #124]	; (8012ea8 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7f9 f907 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 8012e32:	f107 0318 	add.w	r3, r7, #24
 8012e36:	6839      	ldr	r1, [r7, #0]
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7f9 fda1 	bl	800c980 <_Z10StringFromj>
 8012e3e:	f107 0218 	add.w	r2, r7, #24
 8012e42:	f107 0310 	add.w	r3, r7, #16
 8012e46:	4611      	mov	r1, r2
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7f9 f8e7 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8012e4e:	f107 0318 	add.w	r3, r7, #24
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f9 f865 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8012e58:	f107 0310 	add.w	r3, r7, #16
 8012e5c:	4913      	ldr	r1, [pc, #76]	; (8012eac <_ZN10UtestShell5printEPKcS1_j+0xac>)
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f9 f8ee 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8012e64:	f107 0310 	add.w	r3, r7, #16
 8012e68:	68b9      	ldr	r1, [r7, #8]
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	f7f9 f8e8 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 8012e70:	68f8      	ldr	r0, [r7, #12]
 8012e72:	f000 f867 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012e76:	4604      	mov	r4, r0
 8012e78:	6823      	ldr	r3, [r4, #0]
 8012e7a:	3338      	adds	r3, #56	; 0x38
 8012e7c:	681d      	ldr	r5, [r3, #0]
 8012e7e:	f107 0310 	add.w	r3, r7, #16
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7f9 f820 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	4619      	mov	r1, r3
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 8012e90:	f107 0310 	add.w	r3, r7, #16
 8012e94:	4618      	mov	r0, r3
 8012e96:	f7f9 f844 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8012e9a:	bf00      	nop
 8012e9c:	3720      	adds	r7, #32
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	080239d0 	.word	0x080239d0
 8012ea8:	080239d4 	.word	0x080239d4
 8012eac:	080239d8 	.word	0x080239d8

08012eb0 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 8012eb0:	b590      	push	{r4, r7, lr}
 8012eb2:	b085      	sub	sp, #20
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
 8012ebc:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	3370      	adds	r3, #112	; 0x70
 8012ec4:	681c      	ldr	r4, [r3, #0]
 8012ec6:	68b8      	ldr	r0, [r7, #8]
 8012ec8:	f7f8 fffe 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8012ecc:	4601      	mov	r1, r0
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	687a      	ldr	r2, [r7, #4]
 8012ed2:	68f8      	ldr	r0, [r7, #12]
 8012ed4:	47a0      	blx	r4
}
 8012ed6:	bf00      	nop
 8012ed8:	3714      	adds	r7, #20
 8012eda:	46bd      	mov	sp, r7
 8012edc:	bd90      	pop	{r4, r7, pc}

08012ede <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b082      	sub	sp, #8
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f000 f82b 	bl	8012f44 <_ZN10UtestShell13getTestResultEv>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	323c      	adds	r2, #60	; 0x3c
 8012ef4:	6812      	ldr	r2, [r2, #0]
 8012ef6:	6839      	ldr	r1, [r7, #0]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	4790      	blx	r2
}
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8012f04:	b480      	push	{r7}
 8012f06:	b083      	sub	sp, #12
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 8012f0e:	4a04      	ldr	r2, [pc, #16]	; (8012f20 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	6013      	str	r3, [r2, #0]
}
 8012f14:	bf00      	nop
 8012f16:	370c      	adds	r7, #12
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr
 8012f20:	200009c0 	.word	0x200009c0

08012f24 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8012f24:	b480      	push	{r7}
 8012f26:	b083      	sub	sp, #12
 8012f28:	af00      	add	r7, sp, #0
 8012f2a:	6078      	str	r0, [r7, #4]
 8012f2c:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 8012f2e:	4a04      	ldr	r2, [pc, #16]	; (8012f40 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	6013      	str	r3, [r2, #0]
}
 8012f34:	bf00      	nop
 8012f36:	370c      	adds	r7, #12
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3e:	4770      	bx	lr
 8012f40:	200009c4 	.word	0x200009c4

08012f44 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8012f4c:	4b09      	ldr	r3, [pc, #36]	; (8012f74 <_ZN10UtestShell13getTestResultEv+0x30>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d109      	bne.n	8012f68 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8012f54:	f7fe fbb2 	bl	80116bc <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	32a4      	adds	r2, #164	; 0xa4
 8012f5e:	6812      	ldr	r2, [r2, #0]
 8012f60:	4618      	mov	r0, r3
 8012f62:	4790      	blx	r2
 8012f64:	4603      	mov	r3, r0
 8012f66:	e001      	b.n	8012f6c <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8012f68:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <_ZN10UtestShell13getTestResultEv+0x30>)
 8012f6a:	681b      	ldr	r3, [r3, #0]
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3708      	adds	r7, #8
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	200009c0 	.word	0x200009c0

08012f78 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8012f7c:	4b05      	ldr	r3, [pc, #20]	; (8012f94 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d103      	bne.n	8012f8c <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 8012f84:	f7fe fb9a 	bl	80116bc <_ZN22OutsideTestRunnerUTest8instanceEv>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	e001      	b.n	8012f90 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 8012f8c:	4b01      	ldr	r3, [pc, #4]	; (8012f94 <_ZN10UtestShell10getCurrentEv+0x1c>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	bd80      	pop	{r7, pc}
 8012f94:	200009c4 	.word	0x200009c4

08012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 8012f98:	b480      	push	{r7}
 8012f9a:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 8012f9c:	4b03      	ldr	r3, [pc, #12]	; (8012fac <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	46bd      	mov	sp, r7
 8012fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa8:	4770      	bx	lr
 8012faa:	bf00      	nop
 8012fac:	20000098 	.word	0x20000098

08012fb0 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 8012fb4:	4b03      	ldr	r3, [pc, #12]	; (8012fc4 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 8012fb6:	4a04      	ldr	r2, [pc, #16]	; (8012fc8 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 8012fb8:	601a      	str	r2, [r3, #0]
}
 8012fba:	bf00      	nop
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc2:	4770      	bx	lr
 8012fc4:	20000098 	.word	0x20000098
 8012fc8:	20000094 	.word	0x20000094

08012fcc <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 8012fcc:	b480      	push	{r7}
 8012fce:	b083      	sub	sp, #12
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	4a04      	ldr	r2, [pc, #16]	; (8012fe8 <_ZN5UtestC1Ev+0x1c>)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	601a      	str	r2, [r3, #0]
{
}
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	370c      	adds	r7, #12
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe6:	4770      	bx	lr
 8012fe8:	08026d18 	.word	0x08026d18

08012fec <_ZN5UtestD1Ev>:

Utest::~Utest()
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
 8012ff2:	6078      	str	r0, [r7, #4]
 8012ff4:	4a04      	ldr	r2, [pc, #16]	; (8013008 <_ZN5UtestD1Ev+0x1c>)
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	601a      	str	r2, [r3, #0]
{
}
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	4618      	mov	r0, r3
 8012ffe:	370c      	adds	r7, #12
 8013000:	46bd      	mov	sp, r7
 8013002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013006:	4770      	bx	lr
 8013008:	08026d18 	.word	0x08026d18

0801300c <_ZN5UtestD0Ev>:
Utest::~Utest()
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
}
 8013014:	6878      	ldr	r0, [r7, #4]
 8013016:	f7ff ffe9 	bl	8012fec <_ZN5UtestD1Ev>
 801301a:	2104      	movs	r1, #4
 801301c:	6878      	ldr	r0, [r7, #4]
 801301e:	f7f6 f819 	bl	8009054 <_ZdlPvj>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	4618      	mov	r0, r3
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8013034:	4b0d      	ldr	r3, [pc, #52]	; (801306c <_ZN5Utest3runEv+0x40>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6879      	ldr	r1, [r7, #4]
 801303a:	480d      	ldr	r0, [pc, #52]	; (8013070 <_ZN5Utest3runEv+0x44>)
 801303c:	4798      	blx	r3
 801303e:	4603      	mov	r3, r0
 8013040:	2b00      	cmp	r3, #0
 8013042:	bf14      	ite	ne
 8013044:	2301      	movne	r3, #1
 8013046:	2300      	moveq	r3, #0
 8013048:	b2db      	uxtb	r3, r3
 801304a:	2b00      	cmp	r3, #0
 801304c:	d004      	beq.n	8013058 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 801304e:	4b07      	ldr	r3, [pc, #28]	; (801306c <_ZN5Utest3runEv+0x40>)
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	6879      	ldr	r1, [r7, #4]
 8013054:	4807      	ldr	r0, [pc, #28]	; (8013074 <_ZN5Utest3runEv+0x48>)
 8013056:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8013058:	4b04      	ldr	r3, [pc, #16]	; (801306c <_ZN5Utest3runEv+0x40>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	6879      	ldr	r1, [r7, #4]
 801305e:	4806      	ldr	r0, [pc, #24]	; (8013078 <_ZN5Utest3runEv+0x4c>)
 8013060:	4798      	blx	r3
}
 8013062:	bf00      	nop
 8013064:	3708      	adds	r7, #8
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
 801306a:	bf00      	nop
 801306c:	200000a8 	.word	0x200000a8
 8013070:	08011719 	.word	0x08011719
 8013074:	08011735 	.word	0x08011735
 8013078:	08011751 	.word	0x08011751

0801307c <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 801307c:	b480      	push	{r7}
 801307e:	b083      	sub	sp, #12
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
}
 8013084:	bf00      	nop
 8013086:	370c      	adds	r7, #12
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr

08013090 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8013090:	b480      	push	{r7}
 8013092:	b083      	sub	sp, #12
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
}
 8013098:	bf00      	nop
 801309a:	370c      	adds	r7, #12
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr

080130a4 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 80130a4:	b480      	push	{r7}
 80130a6:	b083      	sub	sp, #12
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
}
 80130ac:	bf00      	nop
 80130ae:	370c      	adds	r7, #12
 80130b0:	46bd      	mov	sp, r7
 80130b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b6:	4770      	bx	lr

080130b8 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 80130b8:	b480      	push	{r7}
 80130ba:	b083      	sub	sp, #12
 80130bc:	af00      	add	r7, sp, #0
 80130be:	6078      	str	r0, [r7, #4]
 80130c0:	4a04      	ldr	r2, [pc, #16]	; (80130d4 <_ZN14TestTerminatorD1Ev+0x1c>)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	601a      	str	r2, [r3, #0]
{
}
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4618      	mov	r0, r3
 80130ca:	370c      	adds	r7, #12
 80130cc:	46bd      	mov	sp, r7
 80130ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d2:	4770      	bx	lr
 80130d4:	08026d04 	.word	0x08026d04

080130d8 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 80130e0:	2300      	movs	r3, #0
 80130e2:	60fb      	str	r3, [r7, #12]
 80130e4:	f107 030c 	add.w	r3, r7, #12
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7f6 f975 	bl	80093d8 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 80130ee:	f107 030c 	add.w	r3, r7, #12
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 f82c 	bl	8013150 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 80130f8:	f107 030c 	add.w	r3, r7, #12
 80130fc:	4618      	mov	r0, r3
 80130fe:	f000 f835 	bl	801316c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8013102:	bf00      	nop
 8013104:	3710      	adds	r7, #16
 8013106:	46bd      	mov	sp, r7
 8013108:	bd80      	pop	{r7, pc}
	...

0801310c <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 801310c:	b580      	push	{r7, lr}
 801310e:	b082      	sub	sp, #8
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	4a05      	ldr	r2, [pc, #20]	; (801312c <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	601a      	str	r2, [r3, #0]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4618      	mov	r0, r3
 801311e:	f7ff ffcb 	bl	80130b8 <_ZN14TestTerminatorD1Ev>
{
}
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	4618      	mov	r0, r3
 8013126:	3708      	adds	r7, #8
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	08026cf0 	.word	0x08026cf0

08013130 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
}
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7ff ffe7 	bl	801310c <_ZN20NormalTestTerminatorD1Ev>
 801313e:	2104      	movs	r1, #4
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7f5 ff87 	bl	8009054 <_ZdlPvj>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b082      	sub	sp, #8
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8013158:	4b03      	ldr	r3, [pc, #12]	; (8013168 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 801315e:	bf00      	nop
 8013160:	3708      	adds	r7, #8
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	200000a4 	.word	0x200000a4

0801316c <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 801316c:	b580      	push	{r7, lr}
 801316e:	b082      	sub	sp, #8
 8013170:	af00      	add	r7, sp, #0
 8013172:	6078      	str	r0, [r7, #4]
 8013174:	4a05      	ldr	r2, [pc, #20]	; (801318c <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	601a      	str	r2, [r3, #0]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	4618      	mov	r0, r3
 801317e:	f7ff ff9b 	bl	80130b8 <_ZN14TestTerminatorD1Ev>
{
}
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	4618      	mov	r0, r3
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}
 801318c:	08026cdc 	.word	0x08026cdc

08013190 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
}
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f7ff ffe7 	bl	801316c <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 801319e:	2104      	movs	r1, #4
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7f5 ff57 	bl	8009054 <_ZdlPvj>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	4618      	mov	r0, r3
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 80131b8:	f7fe fbaa 	bl	8011910 <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	4618      	mov	r0, r3
 80131c0:	f7ff ff8a 	bl	80130d8 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 80131c4:	bf00      	nop
 80131c6:	3708      	adds	r7, #8
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}

080131cc <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	4a05      	ldr	r2, [pc, #20]	; (80131ec <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	601a      	str	r2, [r3, #0]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	4618      	mov	r0, r3
 80131de:	f7ff ff95 	bl	801310c <_ZN20NormalTestTerminatorD1Ev>
{
}
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	4618      	mov	r0, r3
 80131e6:	3708      	adds	r7, #8
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	08026cc8 	.word	0x08026cc8

080131f0 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
}
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f7ff ffe7 	bl	80131cc <_ZN22CrashingTestTerminatorD1Ev>
 80131fe:	2104      	movs	r1, #4
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f7f5 ff27 	bl	8009054 <_ZdlPvj>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8013210:	b580      	push	{r7, lr}
 8013212:	b084      	sub	sp, #16
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	601a      	str	r2, [r3, #0]
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2200      	movs	r2, #0
 8013224:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d007      	beq.n	801323c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 801322c:	683b      	ldr	r3, [r7, #0]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	3310      	adds	r3, #16
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	6838      	ldr	r0, [r7, #0]
 8013236:	4798      	blx	r3
 8013238:	4603      	mov	r3, r0
 801323a:	e000      	b.n	801323e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 801323c:	2300      	movs	r3, #0
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	685b      	ldr	r3, [r3, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d02d      	beq.n	80132a6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8013252:	4293      	cmp	r3, r2
 8013254:	d201      	bcs.n	801325a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8013256:	009b      	lsls	r3, r3, #2
 8013258:	e001      	b.n	801325e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 801325a:	f04f 33ff 	mov.w	r3, #4294967295
 801325e:	f240 3237 	movw	r2, #823	; 0x337
 8013262:	4914      	ldr	r1, [pc, #80]	; (80132b4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8013264:	4618      	mov	r0, r3
 8013266:	f7f5 ff05 	bl	8009074 <_ZnajPKci>
 801326a:	4602      	mov	r2, r0
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013274:	2300      	movs	r3, #0
 8013276:	60bb      	str	r3, [r7, #8]
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	68ba      	ldr	r2, [r7, #8]
 801327e:	429a      	cmp	r2, r3
 8013280:	d212      	bcs.n	80132a8 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	681a      	ldr	r2, [r3, #0]
 8013286:	68bb      	ldr	r3, [r7, #8]
 8013288:	009b      	lsls	r3, r3, #2
 801328a:	4413      	add	r3, r2
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	330c      	adds	r3, #12
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	68f8      	ldr	r0, [r7, #12]
 801329a:	4798      	blx	r3
 801329c:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801329e:	68bb      	ldr	r3, [r7, #8]
 80132a0:	3301      	adds	r3, #1
 80132a2:	60bb      	str	r3, [r7, #8]
 80132a4:	e7e8      	b.n	8013278 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 80132a6:	bf00      	nop
    }
}
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4618      	mov	r0, r3
 80132ac:	3710      	adds	r7, #16
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	08023860 	.word	0x08023860

080132b8 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b082      	sub	sp, #8
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d004      	beq.n	80132d2 <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7f5 fee5 	bl	800909c <_ZdaPv>
}
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	4618      	mov	r0, r3
 80132d6:	3708      	adds	r7, #8
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 80132dc:	b480      	push	{r7}
 80132de:	b087      	sub	sp, #28
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	681a      	ldr	r2, [r3, #0]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	009b      	lsls	r3, r3, #2
 80132f0:	4413      	add	r3, r2
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	68bb      	ldr	r3, [r7, #8]
 80132fc:	009b      	lsls	r3, r3, #2
 80132fe:	4413      	add	r3, r2
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	009b      	lsls	r3, r3, #2
 801330c:	4413      	add	r3, r2
 801330e:	697a      	ldr	r2, [r7, #20]
 8013310:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	681a      	ldr	r2, [r3, #0]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	009b      	lsls	r3, r3, #2
 801331a:	4413      	add	r3, r2
 801331c:	693a      	ldr	r2, [r7, #16]
 801331e:	601a      	str	r2, [r3, #0]
}
 8013320:	bf00      	nop
 8013322:	371c      	adds	r7, #28
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	685b      	ldr	r3, [r3, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d028      	beq.n	8013390 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 801333e:	4b17      	ldr	r3, [pc, #92]	; (801339c <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	6838      	ldr	r0, [r7, #0]
 8013344:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	685b      	ldr	r3, [r3, #4]
 801334a:	3b01      	subs	r3, #1
 801334c:	60fb      	str	r3, [r7, #12]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d019      	beq.n	8013388 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d01b      	beq.n	8013394 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 801335c:	4b10      	ldr	r3, [pc, #64]	; (80133a0 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	4798      	blx	r3
 8013362:	4603      	mov	r3, r0
 8013364:	461a      	mov	r2, r3
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	3301      	adds	r3, #1
 801336a:	fbb2 f1f3 	udiv	r1, r2, r3
 801336e:	fb03 f301 	mul.w	r3, r3, r1
 8013372:	1ad3      	subs	r3, r2, r3
 8013374:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8013376:	68ba      	ldr	r2, [r7, #8]
 8013378:	68f9      	ldr	r1, [r7, #12]
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f7ff ffae 	bl	80132dc <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	3b01      	subs	r3, #1
 8013384:	60fb      	str	r3, [r7, #12]
 8013386:	e7e2      	b.n	801334e <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f000 f834 	bl	80133f6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 801338e:	e002      	b.n	8013396 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8013390:	bf00      	nop
 8013392:	e000      	b.n	8013396 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8013394:	bf00      	nop
}
 8013396:	3710      	adds	r7, #16
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}
 801339c:	200000e4 	.word	0x200000e4
 80133a0:	200000e8 	.word	0x200000e8

080133a4 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b086      	sub	sp, #24
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d01c      	beq.n	80133ee <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	685b      	ldr	r3, [r3, #4]
 80133b8:	085b      	lsrs	r3, r3, #1
 80133ba:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 80133bc:	2300      	movs	r3, #0
 80133be:	617b      	str	r3, [r7, #20]
 80133c0:	697a      	ldr	r2, [r7, #20]
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d20e      	bcs.n	80133e6 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	685a      	ldr	r2, [r3, #4]
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	3b01      	subs	r3, #1
 80133d2:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	6979      	ldr	r1, [r7, #20]
 80133d8:	6878      	ldr	r0, [r7, #4]
 80133da:	f7ff ff7f 	bl	80132dc <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	3301      	adds	r3, #1
 80133e2:	617b      	str	r3, [r7, #20]
 80133e4:	e7ec      	b.n	80133c0 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 80133e6:	6878      	ldr	r0, [r7, #4]
 80133e8:	f000 f805 	bl	80133f6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 80133ec:	e000      	b.n	80133f0 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 80133ee:	bf00      	nop
}
 80133f0:	3718      	adds	r7, #24
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}

080133f6 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 80133f6:	b580      	push	{r7, lr}
 80133f8:	b084      	sub	sp, #16
 80133fa:	af00      	add	r7, sp, #0
 80133fc:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 80133fe:	2300      	movs	r3, #0
 8013400:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8013402:	2300      	movs	r3, #0
 8013404:	60bb      	str	r3, [r7, #8]
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	685b      	ldr	r3, [r3, #4]
 801340a:	68ba      	ldr	r2, [r7, #8]
 801340c:	429a      	cmp	r2, r3
 801340e:	d221      	bcs.n	8013454 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681a      	ldr	r2, [r3, #0]
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6859      	ldr	r1, [r3, #4]
 8013418:	68bb      	ldr	r3, [r7, #8]
 801341a:	1acb      	subs	r3, r1, r3
 801341c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013420:	3b01      	subs	r3, #1
 8013422:	009b      	lsls	r3, r3, #2
 8013424:	4413      	add	r3, r2
 8013426:	6818      	ldr	r0, [r3, #0]
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6859      	ldr	r1, [r3, #4]
 8013430:	68bb      	ldr	r3, [r7, #8]
 8013432:	1acb      	subs	r3, r1, r3
 8013434:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013438:	3b01      	subs	r3, #1
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	4413      	add	r3, r2
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	3308      	adds	r3, #8
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	68f9      	ldr	r1, [r7, #12]
 8013448:	4798      	blx	r3
 801344a:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 801344c:	68bb      	ldr	r3, [r7, #8]
 801344e:	3301      	adds	r3, #1
 8013450:	60bb      	str	r3, [r7, #8]
 8013452:	e7d8      	b.n	8013406 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8013454:	bf00      	nop
 8013456:	3710      	adds	r7, #16
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b082      	sub	sp, #8
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
    return get(0);
 8013464:	2100      	movs	r1, #0
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f000 f805 	bl	8013476 <_ZNK22UtestShellPointerArray3getEj>
 801346c:	4603      	mov	r3, r0
}
 801346e:	4618      	mov	r0, r3
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}

08013476 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8013476:	b480      	push	{r7}
 8013478:	b083      	sub	sp, #12
 801347a:	af00      	add	r7, sp, #0
 801347c:	6078      	str	r0, [r7, #4]
 801347e:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	685b      	ldr	r3, [r3, #4]
 8013484:	683a      	ldr	r2, [r7, #0]
 8013486:	429a      	cmp	r2, r3
 8013488:	d301      	bcc.n	801348e <_ZNK22UtestShellPointerArray3getEj+0x18>
 801348a:	2300      	movs	r3, #0
 801348c:	e005      	b.n	801349a <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681a      	ldr	r2, [r3, #0]
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	4413      	add	r3, r2
 8013498:	681b      	ldr	r3, [r3, #0]
}
 801349a:	4618      	mov	r0, r3
 801349c:	370c      	adds	r7, #12
 801349e:	46bd      	mov	sp, r7
 80134a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a4:	4770      	bx	lr
	...

080134a8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
 80134b4:	603b      	str	r3, [r7, #0]
 80134b6:	4a10      	ldr	r2, [pc, #64]	; (80134f8 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 80134bc:	6879      	ldr	r1, [r7, #4]
 80134be:	68b8      	ldr	r0, [r7, #8]
 80134c0:	f7fe fc27 	bl	8011d12 <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 80134c4:	6839      	ldr	r1, [r7, #0]
 80134c6:	68b8      	ldr	r0, [r7, #8]
 80134c8:	f7fe fc31 	bl	8011d2e <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 80134cc:	69b9      	ldr	r1, [r7, #24]
 80134ce:	68b8      	ldr	r0, [r7, #8]
 80134d0:	f7fe fc03 	bl	8011cda <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 80134d4:	69f9      	ldr	r1, [r7, #28]
 80134d6:	68b8      	ldr	r0, [r7, #8]
 80134d8:	f7fe fc0d 	bl	8011cf6 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 80134dc:	f7fd fc20 	bl	8010d20 <_ZN12TestRegistry18getCurrentRegistryEv>
 80134e0:	4603      	mov	r3, r0
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	3208      	adds	r2, #8
 80134e6:	6812      	ldr	r2, [r2, #0]
 80134e8:	68b9      	ldr	r1, [r7, #8]
 80134ea:	4618      	mov	r0, r3
 80134ec:	4790      	blx	r2
}
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	4618      	mov	r0, r3
 80134f2:	3710      	adds	r7, #16
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	08026c0c 	.word	0x08026c0c

080134fc <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 80134fc:	b480      	push	{r7}
 80134fe:	b083      	sub	sp, #12
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
 8013504:	4a04      	ldr	r2, [pc, #16]	; (8013518 <_ZN13TestInstallerD1Ev+0x1c>)
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	601a      	str	r2, [r3, #0]
{
}
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	4618      	mov	r0, r3
 801350e:	370c      	adds	r7, #12
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr
 8013518:	08026c0c 	.word	0x08026c0c

0801351c <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
}
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7ff ffe9 	bl	80134fc <_ZN13TestInstallerD1Ev>
 801352a:	2104      	movs	r1, #4
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7f5 fd91 	bl	8009054 <_ZdlPvj>
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	4618      	mov	r0, r3
 8013536:	3708      	adds	r7, #8
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 801353c:	b580      	push	{r7, lr}
 801353e:	b082      	sub	sp, #8
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d10a      	bne.n	8013562 <_Z41__static_initialization_and_destruction_0ii+0x26>
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013552:	4293      	cmp	r3, r2
 8013554:	d105      	bne.n	8013562 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8013556:	4805      	ldr	r0, [pc, #20]	; (801356c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8013558:	f7ff fe38 	bl	80131cc <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 801355c:	4804      	ldr	r0, [pc, #16]	; (8013570 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 801355e:	f7ff fdd5 	bl	801310c <_ZN20NormalTestTerminatorD1Ev>
}
 8013562:	bf00      	nop
 8013564:	3708      	adds	r7, #8
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	20000094 	.word	0x20000094
 8013570:	20000090 	.word	0x20000090

08013574 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8013574:	b580      	push	{r7, lr}
 8013576:	af00      	add	r7, sp, #0
 8013578:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801357c:	2001      	movs	r0, #1
 801357e:	f7ff ffdd 	bl	801353c <_Z41__static_initialization_and_destruction_0ii>
 8013582:	bd80      	pop	{r7, pc}

08013584 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8013584:	b580      	push	{r7, lr}
 8013586:	af00      	add	r7, sp, #0
 8013588:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801358c:	2000      	movs	r0, #0
 801358e:	f7ff ffd5 	bl	801353c <_Z41__static_initialization_and_destruction_0ii>
 8013592:	bd80      	pop	{r7, pc}

08013594 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8013594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013596:	b083      	sub	sp, #12
 8013598:	af00      	add	r7, sp, #0
 801359a:	ed87 0b00 	vstr	d0, [r7]
 801359e:	683c      	ldr	r4, [r7, #0]
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80135a6:	2301      	movs	r3, #1
 80135a8:	461e      	mov	r6, r3
 80135aa:	f04f 32ff 	mov.w	r2, #4294967295
 80135ae:	4b10      	ldr	r3, [pc, #64]	; (80135f0 <_ZSt5isinfd+0x5c>)
 80135b0:	4620      	mov	r0, r4
 80135b2:	4629      	mov	r1, r5
 80135b4:	f7ed f8e8 	bl	8000788 <__aeabi_dcmpun>
 80135b8:	4603      	mov	r3, r0
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d10b      	bne.n	80135d6 <_ZSt5isinfd+0x42>
 80135be:	f04f 32ff 	mov.w	r2, #4294967295
 80135c2:	4b0b      	ldr	r3, [pc, #44]	; (80135f0 <_ZSt5isinfd+0x5c>)
 80135c4:	4620      	mov	r0, r4
 80135c6:	4629      	mov	r1, r5
 80135c8:	f7ed f8c0 	bl	800074c <__aeabi_dcmple>
 80135cc:	4603      	mov	r3, r0
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d101      	bne.n	80135d6 <_ZSt5isinfd+0x42>
 80135d2:	2300      	movs	r3, #0
 80135d4:	461e      	mov	r6, r3
 80135d6:	b2f3      	uxtb	r3, r6
 80135d8:	f083 0301 	eor.w	r3, r3, #1
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	2b00      	cmp	r3, #0
 80135e0:	bf14      	ite	ne
 80135e2:	2301      	movne	r3, #1
 80135e4:	2300      	moveq	r3, #0
 80135e6:	b2db      	uxtb	r3, r3
 80135e8:	4618      	mov	r0, r3
 80135ea:	370c      	adds	r7, #12
 80135ec:	46bd      	mov	sp, r7
 80135ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135f0:	7fefffff 	.word	0x7fefffff

080135f4 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 80135f4:	b590      	push	{r4, r7, lr}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	ed87 0b00 	vstr	d0, [r7]
 80135fe:	2301      	movs	r3, #1
 8013600:	461c      	mov	r4, r3
 8013602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013606:	e9d7 0100 	ldrd	r0, r1, [r7]
 801360a:	f7ed f8bd 	bl	8000788 <__aeabi_dcmpun>
 801360e:	4603      	mov	r3, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	d101      	bne.n	8013618 <_ZSt5isnand+0x24>
 8013614:	2300      	movs	r3, #0
 8013616:	461c      	mov	r4, r3
 8013618:	b2e3      	uxtb	r3, r4
 801361a:	2b00      	cmp	r3, #0
 801361c:	bf14      	ite	ne
 801361e:	2301      	movne	r3, #1
 8013620:	2300      	moveq	r3, #0
 8013622:	b2db      	uxtb	r3, r3
 8013624:	4618      	mov	r0, r3
 8013626:	370c      	adds	r7, #12
 8013628:	46bd      	mov	sp, r7
 801362a:	bd90      	pop	{r4, r7, pc}

0801362c <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 801362c:	b590      	push	{r4, r7, lr}
 801362e:	b095      	sub	sp, #84	; 0x54
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	3334      	adds	r3, #52	; 0x34
 801363e:	681c      	ldr	r4, [r3, #0]
 8013640:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013644:	490f      	ldr	r1, [pc, #60]	; (8013684 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8013646:	4618      	mov	r0, r3
 8013648:	f7f8 f8b3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801364c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8013650:	f107 0314 	add.w	r3, r7, #20
 8013654:	68f9      	ldr	r1, [r7, #12]
 8013656:	4618      	mov	r0, r3
 8013658:	f7f9 ff0a 	bl	800d470 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801365c:	f107 0314 	add.w	r3, r7, #20
 8013660:	4619      	mov	r1, r3
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	47a0      	blx	r4
 8013666:	f107 0314 	add.w	r3, r7, #20
 801366a:	4618      	mov	r0, r3
 801366c:	f7f9 ffc0 	bl	800d5f0 <_ZN11TestFailureD1Ev>
 8013670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8013674:	4618      	mov	r0, r3
 8013676:	f7f8 fc54 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801367a:	bf00      	nop
 801367c:	3754      	adds	r7, #84	; 0x54
 801367e:	46bd      	mov	sp, r7
 8013680:	bd90      	pop	{r4, r7, pc}
 8013682:	bf00      	nop
 8013684:	080239e8 	.word	0x080239e8

08013688 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 8013688:	b480      	push	{r7}
 801368a:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 801368c:	2301      	movs	r3, #1
}
 801368e:	4618      	mov	r0, r3
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 8013698:	b580      	push	{r7, lr}
 801369a:	b082      	sub	sp, #8
 801369c:	af00      	add	r7, sp, #0
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 80136a2:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <PlatformSpecificSetJmpImplementation+0x58>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	225c      	movs	r2, #92	; 0x5c
 80136a8:	fb02 f303 	mul.w	r3, r2, r3
 80136ac:	4a11      	ldr	r2, [pc, #68]	; (80136f4 <PlatformSpecificSetJmpImplementation+0x5c>)
 80136ae:	4413      	add	r3, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ec fdb5 	bl	8000220 <setjmp>
 80136b6:	4603      	mov	r3, r0
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	bf0c      	ite	eq
 80136bc:	2301      	moveq	r3, #1
 80136be:	2300      	movne	r3, #0
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d00e      	beq.n	80136e4 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80136c6:	4b0a      	ldr	r3, [pc, #40]	; (80136f0 <PlatformSpecificSetJmpImplementation+0x58>)
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	3301      	adds	r3, #1
 80136cc:	4a08      	ldr	r2, [pc, #32]	; (80136f0 <PlatformSpecificSetJmpImplementation+0x58>)
 80136ce:	6013      	str	r3, [r2, #0]
        function(data);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6838      	ldr	r0, [r7, #0]
 80136d4:	4798      	blx	r3
        jmp_buf_index--;
 80136d6:	4b06      	ldr	r3, [pc, #24]	; (80136f0 <PlatformSpecificSetJmpImplementation+0x58>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	3b01      	subs	r3, #1
 80136dc:	4a04      	ldr	r2, [pc, #16]	; (80136f0 <PlatformSpecificSetJmpImplementation+0x58>)
 80136de:	6013      	str	r3, [r2, #0]
        return 1;
 80136e0:	2301      	movs	r3, #1
 80136e2:	e000      	b.n	80136e6 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 80136e4:	2300      	movs	r3, #0
}
 80136e6:	4618      	mov	r0, r3
 80136e8:	3708      	adds	r7, #8
 80136ea:	46bd      	mov	sp, r7
 80136ec:	bd80      	pop	{r7, pc}
 80136ee:	bf00      	nop
 80136f0:	20000d60 	.word	0x20000d60
 80136f4:	200009c8 	.word	0x200009c8

080136f8 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 80136f8:	b580      	push	{r7, lr}
 80136fa:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 80136fc:	4b07      	ldr	r3, [pc, #28]	; (801371c <PlatformSpecificLongJmpImplementation+0x24>)
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	3b01      	subs	r3, #1
 8013702:	4a06      	ldr	r2, [pc, #24]	; (801371c <PlatformSpecificLongJmpImplementation+0x24>)
 8013704:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8013706:	4b05      	ldr	r3, [pc, #20]	; (801371c <PlatformSpecificLongJmpImplementation+0x24>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	225c      	movs	r2, #92	; 0x5c
 801370c:	fb02 f303 	mul.w	r3, r2, r3
 8013710:	4a03      	ldr	r2, [pc, #12]	; (8013720 <PlatformSpecificLongJmpImplementation+0x28>)
 8013712:	4413      	add	r3, r2
 8013714:	2101      	movs	r1, #1
 8013716:	4618      	mov	r0, r3
 8013718:	f7ec fd88 	bl	800022c <longjmp>
 801371c:	20000d60 	.word	0x20000d60
 8013720:	200009c8 	.word	0x200009c8

08013724 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8013724:	b480      	push	{r7}
 8013726:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8013728:	2300      	movs	r3, #0
#endif
}
 801372a:	4618      	mov	r0, r3
 801372c:	46bd      	mov	sp, r7
 801372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013732:	4770      	bx	lr

08013734 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b084      	sub	sp, #16
 8013738:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 801373a:	2000      	movs	r0, #0
 801373c:	f00e ec3c 	blx	8021fb8 <__time_veneer>
 8013740:	4602      	mov	r2, r0
 8013742:	460b      	mov	r3, r1
 8013744:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8013748:	463b      	mov	r3, r7
 801374a:	4618      	mov	r0, r3
 801374c:	f00b fb74 	bl	801ee38 <localtime>
 8013750:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	4a04      	ldr	r2, [pc, #16]	; (8013768 <TimeStringImplementation+0x34>)
 8013756:	2150      	movs	r1, #80	; 0x50
 8013758:	4804      	ldr	r0, [pc, #16]	; (801376c <TimeStringImplementation+0x38>)
 801375a:	f00c fc75 	bl	8020048 <strftime>
    return dateTime;
 801375e:	4b03      	ldr	r3, [pc, #12]	; (801376c <TimeStringImplementation+0x38>)
}
 8013760:	4618      	mov	r0, r3
 8013762:	3710      	adds	r7, #16
 8013764:	46bd      	mov	sp, r7
 8013766:	bd80      	pop	{r7, pc}
 8013768:	08023a24 	.word	0x08023a24
 801376c:	20000d64 	.word	0x20000d64

08013770 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b082      	sub	sp, #8
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 801377a:	6839      	ldr	r1, [r7, #0]
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f00b f991 	bl	801eaa4 <fopen>
 8013782:	4603      	mov	r3, r0
#endif
}
 8013784:	4618      	mov	r0, r3
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}

0801378c <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
 8013794:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 8013796:	6839      	ldr	r1, [r7, #0]
 8013798:	6878      	ldr	r0, [r7, #4]
 801379a:	f00b f9f1 	bl	801eb80 <fputs>
}
 801379e:	bf00      	nop
 80137a0:	3708      	adds	r7, #8
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bd80      	pop	{r7, pc}

080137a6 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b082      	sub	sp, #8
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80137ae:	6878      	ldr	r0, [r7, #4]
 80137b0:	f00a ff72 	bl	801e698 <fclose>
}
 80137b4:	bf00      	nop
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	af00      	add	r7, sp, #0
  fflush(stdout);
 80137c0:	4b03      	ldr	r3, [pc, #12]	; (80137d0 <PlatformSpecificFlushImplementation+0x14>)
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	4618      	mov	r0, r3
 80137c8:	f00b f830 	bl	801e82c <fflush>
}
 80137cc:	bf00      	nop
 80137ce:	bd80      	pop	{r7, pc}
 80137d0:	2000010c 	.word	0x2000010c

080137d4 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b082      	sub	sp, #8
 80137d8:	af00      	add	r7, sp, #0
 80137da:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80137de:	ed97 0b00 	vldr	d0, [r7]
 80137e2:	f7ff ff07 	bl	80135f4 <_ZSt5isnand>
 80137e6:	4603      	mov	r3, r0
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}

080137f0 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 80137fa:	ed97 0b00 	vldr	d0, [r7]
 80137fe:	f7ff fec9 	bl	8013594 <_ZSt5isinfd>
 8013802:	4603      	mov	r3, r0
}
 8013804:	4618      	mov	r0, r3
 8013806:	3708      	adds	r7, #8
 8013808:	46bd      	mov	sp, r7
 801380a:	bd80      	pop	{r7, pc}

0801380c <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 801380c:	b480      	push	{r7}
 801380e:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 8013810:	2300      	movs	r3, #0
#endif

}
 8013812:	4618      	mov	r0, r3
 8013814:	46bd      	mov	sp, r7
 8013816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801381a:	4770      	bx	lr

0801381c <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 801381c:	b480      	push	{r7}
 801381e:	b083      	sub	sp, #12
 8013820:	af00      	add	r7, sp, #0
 8013822:	6078      	str	r0, [r7, #4]
}
 8013824:	bf00      	nop
 8013826:	370c      	adds	r7, #12
 8013828:	46bd      	mov	sp, r7
 801382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801382e:	4770      	bx	lr

08013830 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 8013830:	b480      	push	{r7}
 8013832:	b083      	sub	sp, #12
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
}
 8013838:	bf00      	nop
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr

08013844 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
}
 801384c:	bf00      	nop
 801384e:	370c      	adds	r7, #12
 8013850:	46bd      	mov	sp, r7
 8013852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013856:	4770      	bx	lr

08013858 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8013858:	b580      	push	{r7, lr}
 801385a:	b084      	sub	sp, #16
 801385c:	af00      	add	r7, sp, #0
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8013864:	4a25      	ldr	r2, [pc, #148]	; (80138fc <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	601a      	str	r2, [r3, #0]
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	68ba      	ldr	r2, [r7, #8]
 801386e:	605a      	str	r2, [r3, #4]
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	687a      	ldr	r2, [r7, #4]
 8013874:	609a      	str	r2, [r3, #8]
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	2200      	movs	r2, #0
 801387a:	731a      	strb	r2, [r3, #12]
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	2200      	movs	r2, #0
 8013880:	735a      	strb	r2, [r3, #13]
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	2200      	movs	r2, #0
 8013886:	739a      	strb	r2, [r3, #14]
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	2200      	movs	r2, #0
 801388c:	73da      	strb	r2, [r3, #15]
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2200      	movs	r2, #0
 8013892:	741a      	strb	r2, [r3, #16]
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2200      	movs	r2, #0
 8013898:	745a      	strb	r2, [r3, #17]
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	2200      	movs	r2, #0
 801389e:	749a      	strb	r2, [r3, #18]
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	2200      	movs	r2, #0
 80138a4:	74da      	strb	r2, [r3, #19]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2200      	movs	r2, #0
 80138aa:	751a      	strb	r2, [r3, #20]
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	2200      	movs	r2, #0
 80138b0:	755a      	strb	r2, [r3, #21]
 80138b2:	68fb      	ldr	r3, [r7, #12]
 80138b4:	2200      	movs	r2, #0
 80138b6:	759a      	strb	r2, [r3, #22]
 80138b8:	68fb      	ldr	r3, [r7, #12]
 80138ba:	2200      	movs	r2, #0
 80138bc:	75da      	strb	r2, [r3, #23]
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	2200      	movs	r2, #0
 80138c2:	761a      	strb	r2, [r3, #24]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2201      	movs	r2, #1
 80138c8:	61da      	str	r2, [r3, #28]
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2200      	movs	r2, #0
 80138ce:	621a      	str	r2, [r3, #32]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	2200      	movs	r2, #0
 80138d4:	625a      	str	r2, [r3, #36]	; 0x24
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	629a      	str	r2, [r3, #40]	; 0x28
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2200      	movs	r2, #0
 80138e0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	3330      	adds	r3, #48	; 0x30
 80138e8:	4905      	ldr	r1, [pc, #20]	; (8013900 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f7 ff61 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
{
}
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	4618      	mov	r0, r3
 80138f4:	3710      	adds	r7, #16
 80138f6:	46bd      	mov	sp, r7
 80138f8:	bd80      	pop	{r7, pc}
 80138fa:	bf00      	nop
 80138fc:	08026d38 	.word	0x08026d38
 8013900:	08023a38 	.word	0x08023a38

08013904 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	4618      	mov	r0, r3
 8013910:	f7f8 fb07 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	4618      	mov	r0, r3
 8013918:	3708      	adds	r7, #8
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
	...

08013920 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 8013920:	b590      	push	{r4, r7, lr}
 8013922:	b085      	sub	sp, #20
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	4a20      	ldr	r2, [pc, #128]	; (80139ac <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013932:	2b00      	cmp	r3, #0
 8013934:	d015      	beq.n	8013962 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393a:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013940:	4618      	mov	r0, r3
 8013942:	f00a fda2 	bl	801e48a <_ZNK10TestFilter7getNextEv>
 8013946:	4602      	mov	r2, r0
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 801394c:	68fc      	ldr	r4, [r7, #12]
 801394e:	2c00      	cmp	r4, #0
 8013950:	d0ed      	beq.n	801392e <_ZN20CommandLineArgumentsD1Ev+0xe>
 8013952:	4620      	mov	r0, r4
 8013954:	f7ff ffd6 	bl	8013904 <_ZN10TestFilterD1Ev>
 8013958:	2110      	movs	r1, #16
 801395a:	4620      	mov	r0, r4
 801395c:	f7f5 fb7a 	bl	8009054 <_ZdlPvj>
    while(groupFilters_) {
 8013960:	e7e5      	b.n	801392e <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013966:	2b00      	cmp	r3, #0
 8013968:	d015      	beq.n	8013996 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801396e:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013974:	4618      	mov	r0, r3
 8013976:	f00a fd88 	bl	801e48a <_ZNK10TestFilter7getNextEv>
 801397a:	4602      	mov	r2, r0
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 8013980:	68bc      	ldr	r4, [r7, #8]
 8013982:	2c00      	cmp	r4, #0
 8013984:	d0ed      	beq.n	8013962 <_ZN20CommandLineArgumentsD1Ev+0x42>
 8013986:	4620      	mov	r0, r4
 8013988:	f7ff ffbc 	bl	8013904 <_ZN10TestFilterD1Ev>
 801398c:	2110      	movs	r1, #16
 801398e:	4620      	mov	r0, r4
 8013990:	f7f5 fb60 	bl	8009054 <_ZdlPvj>
    while(nameFilters_) {
 8013994:	e7e5      	b.n	8013962 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	3330      	adds	r3, #48	; 0x30
 801399a:	4618      	mov	r0, r3
 801399c:	f7f8 fac1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
}
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	4618      	mov	r0, r3
 80139a4:	3714      	adds	r7, #20
 80139a6:	46bd      	mov	sp, r7
 80139a8:	bd90      	pop	{r4, r7, pc}
 80139aa:	bf00      	nop
 80139ac:	08026d38 	.word	0x08026d38

080139b0 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b082      	sub	sp, #8
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
}
 80139b8:	6878      	ldr	r0, [r7, #4]
 80139ba:	f7ff ffb1 	bl	8013920 <_ZN20CommandLineArgumentsD1Ev>
 80139be:	2138      	movs	r1, #56	; 0x38
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7f5 fb47 	bl	8009054 <_ZdlPvj>
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	4618      	mov	r0, r3
 80139ca:	3708      	adds	r7, #8
 80139cc:	46bd      	mov	sp, r7
 80139ce:	bd80      	pop	{r7, pc}

080139d0 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80139d0:	b5b0      	push	{r4, r5, r7, lr}
 80139d2:	b0be      	sub	sp, #248	; 0xf8
 80139d4:	af02      	add	r7, sp, #8
 80139d6:	6078      	str	r0, [r7, #4]
 80139d8:	6039      	str	r1, [r7, #0]
 80139da:	2400      	movs	r4, #0
    bool correctParameters = true;
 80139dc:	2301      	movs	r3, #1
 80139de:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80139e2:	2301      	movs	r3, #1
 80139e4:	613b      	str	r3, [r7, #16]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	685a      	ldr	r2, [r3, #4]
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	429a      	cmp	r2, r3
 80139ee:	f340 83a4 	ble.w	801413a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	689a      	ldr	r2, [r3, #8]
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	009b      	lsls	r3, r3, #2
 80139fa:	4413      	add	r3, r2
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	f107 0308 	add.w	r3, r7, #8
 8013a02:	4611      	mov	r1, r2
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7f7 fed4 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8013a0a:	f107 0314 	add.w	r3, r7, #20
 8013a0e:	49c8      	ldr	r1, [pc, #800]	; (8013d30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7f7 fece 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013a16:	f107 0214 	add.w	r2, r7, #20
 8013a1a:	f107 0308 	add.w	r3, r7, #8
 8013a1e:	4611      	mov	r1, r2
 8013a20:	4618      	mov	r0, r3
 8013a22:	f7f8 fa8a 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013a26:	4603      	mov	r3, r0
 8013a28:	461d      	mov	r5, r3
 8013a2a:	f107 0314 	add.w	r3, r7, #20
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f7f8 fa77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013a34:	2d00      	cmp	r5, #0
 8013a36:	d006      	beq.n	8013a46 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	2201      	movs	r2, #1
 8013a3c:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 8013a3e:	2300      	movs	r3, #0
 8013a40:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013a44:	e366      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8013a46:	f107 031c 	add.w	r3, r7, #28
 8013a4a:	49ba      	ldr	r1, [pc, #744]	; (8013d34 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7f7 feb0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013a52:	f107 021c 	add.w	r2, r7, #28
 8013a56:	f107 0308 	add.w	r3, r7, #8
 8013a5a:	4611      	mov	r1, r2
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7f8 fa6c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013a62:	4603      	mov	r3, r0
 8013a64:	461d      	mov	r5, r3
 8013a66:	f107 031c 	add.w	r3, r7, #28
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	f7f8 fa59 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013a70:	2d00      	cmp	r5, #0
 8013a72:	d003      	beq.n	8013a7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2201      	movs	r2, #1
 8013a78:	735a      	strb	r2, [r3, #13]
 8013a7a:	e34b      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8013a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a80:	49ad      	ldr	r1, [pc, #692]	; (8013d38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7f7 fe95 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013a88:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013a8c:	f107 0308 	add.w	r3, r7, #8
 8013a90:	4611      	mov	r1, r2
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7f8 fa51 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	461d      	mov	r5, r3
 8013a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	f7f8 fa3e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013aa6:	2d00      	cmp	r5, #0
 8013aa8:	d003      	beq.n	8013ab2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	2201      	movs	r2, #1
 8013aae:	739a      	strb	r2, [r3, #14]
 8013ab0:	e330      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 8013ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ab6:	49a1      	ldr	r1, [pc, #644]	; (8013d3c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 8013ab8:	4618      	mov	r0, r3
 8013aba:	f7f7 fe7a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013abe:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8013ac2:	f107 0308 	add.w	r3, r7, #8
 8013ac6:	4611      	mov	r1, r2
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f7f8 fa36 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	461d      	mov	r5, r3
 8013ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	f7f8 fa23 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013adc:	2d00      	cmp	r5, #0
 8013ade:	d003      	beq.n	8013ae8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	2201      	movs	r2, #1
 8013ae4:	73da      	strb	r2, [r3, #15]
 8013ae6:	e315      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8013ae8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013aec:	4994      	ldr	r1, [pc, #592]	; (8013d40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7f7 fe5f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013af4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8013af8:	f107 0308 	add.w	r3, r7, #8
 8013afc:	4611      	mov	r1, r2
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7f8 fa1b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013b04:	4603      	mov	r3, r0
 8013b06:	461d      	mov	r5, r3
 8013b08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7f8 fa08 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013b12:	2d00      	cmp	r5, #0
 8013b14:	d003      	beq.n	8013b1e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	741a      	strb	r2, [r3, #16]
 8013b1c:	e2fa      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 8013b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013b22:	4988      	ldr	r1, [pc, #544]	; (8013d44 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8013b24:	4618      	mov	r0, r3
 8013b26:	f7f7 fe44 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013b2a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013b2e:	f107 0308 	add.w	r3, r7, #8
 8013b32:	4611      	mov	r1, r2
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f8 fa00 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	461d      	mov	r5, r3
 8013b3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7f8 f9ed 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013b48:	2d00      	cmp	r5, #0
 8013b4a:	d003      	beq.n	8013b54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2201      	movs	r2, #1
 8013b50:	755a      	strb	r2, [r3, #21]
 8013b52:	e2df      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8013b54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b58:	497b      	ldr	r1, [pc, #492]	; (8013d48 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f7 fe29 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013b60:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8013b64:	f107 0308 	add.w	r3, r7, #8
 8013b68:	4611      	mov	r1, r2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7f8 f9e5 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013b70:	4603      	mov	r3, r0
 8013b72:	461d      	mov	r5, r3
 8013b74:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f7f8 f9d2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013b7e:	2d00      	cmp	r5, #0
 8013b80:	d003      	beq.n	8013b8a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	2201      	movs	r2, #1
 8013b86:	745a      	strb	r2, [r3, #17]
 8013b88:	e2c4      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 8013b8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013b8e:	496f      	ldr	r1, [pc, #444]	; (8013d4c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f7 fe0e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013b96:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8013b9a:	f107 0308 	add.w	r3, r7, #8
 8013b9e:	4611      	mov	r1, r2
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f8 f9ca 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	461d      	mov	r5, r3
 8013baa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7f8 f9b7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013bb4:	2d00      	cmp	r5, #0
 8013bb6:	d003      	beq.n	8013bc0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	2201      	movs	r2, #1
 8013bbc:	749a      	strb	r2, [r3, #18]
 8013bbe:	e2a9      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 8013bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013bc4:	4962      	ldr	r1, [pc, #392]	; (8013d50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f7f7 fdf3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013bcc:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013bd0:	f107 0308 	add.w	r3, r7, #8
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7f8 f9af 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	461d      	mov	r5, r3
 8013be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013be4:	4618      	mov	r0, r3
 8013be6:	f7f8 f99c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013bea:	2d00      	cmp	r5, #0
 8013bec:	d003      	beq.n	8013bf6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	74da      	strb	r2, [r3, #19]
 8013bf4:	e28e      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8013bf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013bfa:	4956      	ldr	r1, [pc, #344]	; (8013d54 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f7 fdd8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013c02:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8013c06:	f107 0308 	add.w	r3, r7, #8
 8013c0a:	4611      	mov	r1, r2
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7f8 f994 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013c12:	4603      	mov	r3, r0
 8013c14:	461d      	mov	r5, r3
 8013c16:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f7f8 f981 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013c20:	2d00      	cmp	r5, #0
 8013c22:	d003      	beq.n	8013c2c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2201      	movs	r2, #1
 8013c28:	751a      	strb	r2, [r3, #20]
 8013c2a:	e273      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8013c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013c30:	4949      	ldr	r1, [pc, #292]	; (8013d58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7f7 fdbd 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013c38:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8013c3c:	f107 0308 	add.w	r3, r7, #8
 8013c40:	4611      	mov	r1, r2
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7f8 f979 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	461d      	mov	r5, r3
 8013c4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7f8 f966 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013c56:	2d00      	cmp	r5, #0
 8013c58:	d003      	beq.n	8013c62 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	2201      	movs	r2, #1
 8013c5e:	759a      	strb	r2, [r3, #22]
 8013c60:	e258      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 8013c62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013c66:	493d      	ldr	r1, [pc, #244]	; (8013d5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7f7 fda2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013c6e:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8013c72:	f107 0308 	add.w	r3, r7, #8
 8013c76:	4611      	mov	r1, r2
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f7 fe5e 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	461d      	mov	r5, r3
 8013c82:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7f8 f94b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013c8c:	2d00      	cmp	r5, #0
 8013c8e:	d009      	beq.n	8013ca4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6859      	ldr	r1, [r3, #4]
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	689a      	ldr	r2, [r3, #8]
 8013c98:	f107 0310 	add.w	r3, r7, #16
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f000 fb33 	bl	8014308 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 8013ca2:	e237      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 8013ca4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013ca8:	492d      	ldr	r1, [pc, #180]	; (8013d60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 8013caa:	4618      	mov	r0, r3
 8013cac:	f7f7 fd81 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013cb0:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8013cb4:	f107 0308 	add.w	r3, r7, #8
 8013cb8:	4611      	mov	r1, r2
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f7f7 fe3d 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	461d      	mov	r5, r3
 8013cc4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8013cc8:	4618      	mov	r0, r3
 8013cca:	f7f8 f92a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013cce:	2d00      	cmp	r5, #0
 8013cd0:	d009      	beq.n	8013ce6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6859      	ldr	r1, [r3, #4]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	689a      	ldr	r2, [r3, #8]
 8013cda:	f107 0310 	add.w	r3, r7, #16
 8013cde:	6878      	ldr	r0, [r7, #4]
 8013ce0:	f000 fc40 	bl	8014564 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8013ce4:	e216      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8013ce6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013cea:	491e      	ldr	r1, [pc, #120]	; (8013d64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f7 fd60 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013cf2:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8013cf6:	f107 0308 	add.w	r3, r7, #8
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7f7 fe1c 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013d02:	4603      	mov	r3, r0
 8013d04:	461d      	mov	r5, r3
 8013d06:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7f8 f909 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	d029      	beq.n	8013d68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	6859      	ldr	r1, [r3, #4]
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	689a      	ldr	r2, [r3, #8]
 8013d1c:	f107 0310 	add.w	r3, r7, #16
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f000 fc61 	bl	80145e8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8013d26:	4603      	mov	r3, r0
 8013d28:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013d2c:	e1f2      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8013d2e:	bf00      	nop
 8013d30:	08023a3c 	.word	0x08023a3c
 8013d34:	08023a40 	.word	0x08023a40
 8013d38:	08023a44 	.word	0x08023a44
 8013d3c:	08023a48 	.word	0x08023a48
 8013d40:	08023a4c 	.word	0x08023a4c
 8013d44:	08023a50 	.word	0x08023a50
 8013d48:	08023a54 	.word	0x08023a54
 8013d4c:	08023a58 	.word	0x08023a58
 8013d50:	08023a5c 	.word	0x08023a5c
 8013d54:	08023a60 	.word	0x08023a60
 8013d58:	08023a64 	.word	0x08023a64
 8013d5c:	08023a68 	.word	0x08023a68
 8013d60:	08023a6c 	.word	0x08023a6c
 8013d64:	08023a70 	.word	0x08023a70
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8013d68:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013d6c:	49b9      	ldr	r1, [pc, #740]	; (8014054 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7f7 fd1f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013d74:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8013d78:	f107 0308 	add.w	r3, r7, #8
 8013d7c:	4611      	mov	r1, r2
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7f7 fddb 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013d84:	4603      	mov	r3, r0
 8013d86:	461d      	mov	r5, r3
 8013d88:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7f8 f8c8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013d92:	2d00      	cmp	r5, #0
 8013d94:	d009      	beq.n	8013daa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6859      	ldr	r1, [r3, #4]
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	689a      	ldr	r2, [r3, #8]
 8013d9e:	f107 0310 	add.w	r3, r7, #16
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 fccc 	bl	8014740 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 8013da8:	e1b4      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 8013daa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013dae:	49aa      	ldr	r1, [pc, #680]	; (8014058 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7f7 fcfe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013db6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8013dba:	f107 0308 	add.w	r3, r7, #8
 8013dbe:	4611      	mov	r1, r2
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	f7f7 fdba 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013dc6:	4603      	mov	r3, r0
 8013dc8:	461d      	mov	r5, r3
 8013dca:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7f8 f8a7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013dd4:	2d00      	cmp	r5, #0
 8013dd6:	d009      	beq.n	8013dec <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	6859      	ldr	r1, [r3, #4]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	689a      	ldr	r2, [r3, #8]
 8013de0:	f107 0310 	add.w	r3, r7, #16
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f000 fcf1 	bl	80147cc <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8013dea:	e193      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8013dec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013df0:	499a      	ldr	r1, [pc, #616]	; (801405c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 8013df2:	4618      	mov	r0, r3
 8013df4:	f7f7 fcdd 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013df8:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8013dfc:	f107 0308 	add.w	r3, r7, #8
 8013e00:	4611      	mov	r1, r2
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7f7 fd99 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	461d      	mov	r5, r3
 8013e0c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7f8 f886 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013e16:	2d00      	cmp	r5, #0
 8013e18:	d009      	beq.n	8013e2e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	6859      	ldr	r1, [r3, #4]
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	689a      	ldr	r2, [r3, #8]
 8013e22:	f107 0310 	add.w	r3, r7, #16
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f000 fd16 	bl	8014858 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8013e2c:	e172      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 8013e2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013e32:	498b      	ldr	r1, [pc, #556]	; (8014060 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7f7 fcbc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013e3a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013e3e:	f107 0308 	add.w	r3, r7, #8
 8013e42:	4611      	mov	r1, r2
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7f7 fd78 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	461d      	mov	r5, r3
 8013e4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7f8 f865 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013e58:	2d00      	cmp	r5, #0
 8013e5a:	d009      	beq.n	8013e70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6859      	ldr	r1, [r3, #4]
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	689a      	ldr	r2, [r3, #8]
 8013e64:	f107 0310 	add.w	r3, r7, #16
 8013e68:	6878      	ldr	r0, [r7, #4]
 8013e6a:	f000 fd3d 	bl	80148e8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 8013e6e:	e151      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 8013e70:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013e74:	497b      	ldr	r1, [pc, #492]	; (8014064 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f7 fc9b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013e7c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8013e80:	f107 0308 	add.w	r3, r7, #8
 8013e84:	4611      	mov	r1, r2
 8013e86:	4618      	mov	r0, r3
 8013e88:	f7f7 fd57 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	461d      	mov	r5, r3
 8013e90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8013e94:	4618      	mov	r0, r3
 8013e96:	f7f8 f844 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013e9a:	2d00      	cmp	r5, #0
 8013e9c:	d009      	beq.n	8013eb2 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	6859      	ldr	r1, [r3, #4]
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	689a      	ldr	r2, [r3, #8]
 8013ea6:	f107 0310 	add.w	r3, r7, #16
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f000 fd5e 	bl	801496c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 8013eb0:	e130      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 8013eb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013eb6:	496c      	ldr	r1, [pc, #432]	; (8014068 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f7 fc7a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013ebe:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8013ec2:	f107 0308 	add.w	r3, r7, #8
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f7 fd36 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	461d      	mov	r5, r3
 8013ed2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	f7f8 f823 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013edc:	2d00      	cmp	r5, #0
 8013ede:	d009      	beq.n	8013ef4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	6859      	ldr	r1, [r3, #4]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	689a      	ldr	r2, [r3, #8]
 8013ee8:	f107 0310 	add.w	r3, r7, #16
 8013eec:	6878      	ldr	r0, [r7, #4]
 8013eee:	f000 fd83 	bl	80149f8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 8013ef2:	e10f      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8013ef4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013ef8:	495c      	ldr	r1, [pc, #368]	; (801406c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7f7 fc59 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013f00:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013f04:	f107 0308 	add.w	r3, r7, #8
 8013f08:	4611      	mov	r1, r2
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7f7 fd15 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013f10:	4603      	mov	r3, r0
 8013f12:	461d      	mov	r5, r3
 8013f14:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7f8 f802 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013f1e:	2d00      	cmp	r5, #0
 8013f20:	d009      	beq.n	8013f36 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6859      	ldr	r1, [r3, #4]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	689a      	ldr	r2, [r3, #8]
 8013f2a:	f107 0310 	add.w	r3, r7, #16
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f000 fda8 	bl	8014a84 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8013f34:	e0ee      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8013f36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013f3a:	494d      	ldr	r1, [pc, #308]	; (8014070 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7f7 fc38 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013f42:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8013f46:	f107 0308 	add.w	r3, r7, #8
 8013f4a:	4611      	mov	r1, r2
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	f7f7 fcf4 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013f52:	4603      	mov	r3, r0
 8013f54:	461d      	mov	r5, r3
 8013f56:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f7f7 ffe1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013f60:	2d00      	cmp	r5, #0
 8013f62:	d00c      	beq.n	8013f7e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6859      	ldr	r1, [r3, #4]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	689a      	ldr	r2, [r3, #8]
 8013f6c:	f107 0310 	add.w	r3, r7, #16
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f000 fa29 	bl	80143c8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8013f76:	4603      	mov	r3, r0
 8013f78:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8013f7c:	e0ca      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 8013f7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013f82:	493c      	ldr	r1, [pc, #240]	; (8014074 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7f7 fc14 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013f8a:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8013f8e:	f107 0308 	add.w	r3, r7, #8
 8013f92:	4611      	mov	r1, r2
 8013f94:	4618      	mov	r0, r3
 8013f96:	f7f7 fcd0 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	461d      	mov	r5, r3
 8013f9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7f7 ffbd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013fa8:	2d00      	cmp	r5, #0
 8013faa:	d00b      	beq.n	8013fc4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	6859      	ldr	r1, [r3, #4]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	689a      	ldr	r2, [r3, #8]
 8013fb4:	f107 0310 	add.w	r3, r7, #16
 8013fb8:	482e      	ldr	r0, [pc, #184]	; (8014074 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 8013fba:	9000      	str	r0, [sp, #0]
 8013fbc:	6878      	ldr	r0, [r7, #4]
 8013fbe:	f000 fda9 	bl	8014b14 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8013fc2:	e0a7      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 8013fc4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013fc8:	492b      	ldr	r1, [pc, #172]	; (8014078 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7f7 fbf1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8013fd0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8013fd4:	f107 0308 	add.w	r3, r7, #8
 8013fd8:	4611      	mov	r1, r2
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f7f7 fcad 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	461d      	mov	r5, r3
 8013fe4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7f7 ff9a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	d00b      	beq.n	801400a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	6859      	ldr	r1, [r3, #4]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	689a      	ldr	r2, [r3, #8]
 8013ffa:	f107 0310 	add.w	r3, r7, #16
 8013ffe:	481e      	ldr	r0, [pc, #120]	; (8014078 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8014000:	9000      	str	r0, [sp, #0]
 8014002:	6878      	ldr	r0, [r7, #4]
 8014004:	f000 fd86 	bl	8014b14 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8014008:	e084      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 801400a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801400e:	491b      	ldr	r1, [pc, #108]	; (801407c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8014010:	4618      	mov	r0, r3
 8014012:	f7f7 fbce 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014016:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 801401a:	f107 0308 	add.w	r3, r7, #8
 801401e:	4611      	mov	r1, r2
 8014020:	4618      	mov	r0, r3
 8014022:	f7f7 fc8a 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 8014026:	4603      	mov	r3, r0
 8014028:	461d      	mov	r5, r3
 801402a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 801402e:	4618      	mov	r0, r3
 8014030:	f7f7 ff77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014034:	2d00      	cmp	r5, #0
 8014036:	d023      	beq.n	8014080 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	6859      	ldr	r1, [r3, #4]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	689a      	ldr	r2, [r3, #8]
 8014040:	f107 0310 	add.w	r3, r7, #16
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 fe3b 	bl	8014cc0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 801404a:	4603      	mov	r3, r0
 801404c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8014050:	e060      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8014052:	bf00      	nop
 8014054:	08023a74 	.word	0x08023a74
 8014058:	08023a78 	.word	0x08023a78
 801405c:	08023a7c 	.word	0x08023a7c
 8014060:	08023a84 	.word	0x08023a84
 8014064:	08023a88 	.word	0x08023a88
 8014068:	08023a8c 	.word	0x08023a8c
 801406c:	08023a90 	.word	0x08023a90
 8014070:	08023a98 	.word	0x08023a98
 8014074:	08023a9c 	.word	0x08023a9c
 8014078:	08023aa4 	.word	0x08023aa4
 801407c:	08023ab4 	.word	0x08023ab4
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8014080:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8014084:	4930      	ldr	r1, [pc, #192]	; (8014148 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8014086:	4618      	mov	r0, r3
 8014088:	f7f7 fb93 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801408c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8014090:	f107 0308 	add.w	r3, r7, #8
 8014094:	4611      	mov	r1, r2
 8014096:	4618      	mov	r0, r3
 8014098:	f7f7 fc4f 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 801409c:	4603      	mov	r3, r0
 801409e:	461d      	mov	r5, r3
 80140a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80140a4:	4618      	mov	r0, r3
 80140a6:	f7f7 ff3c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80140aa:	2d00      	cmp	r5, #0
 80140ac:	d00e      	beq.n	80140cc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 80140ae:	683b      	ldr	r3, [r7, #0]
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	331c      	adds	r3, #28
 80140b4:	681d      	ldr	r5, [r3, #0]
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	6859      	ldr	r1, [r3, #4]
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	689a      	ldr	r2, [r3, #8]
 80140be:	693b      	ldr	r3, [r7, #16]
 80140c0:	6838      	ldr	r0, [r7, #0]
 80140c2:	47a8      	blx	r5
 80140c4:	4603      	mov	r3, r0
 80140c6:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 80140ca:	e023      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 80140cc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80140d0:	491e      	ldr	r1, [pc, #120]	; (801414c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7f7 fb6d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80140d8:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80140dc:	f107 0308 	add.w	r3, r7, #8
 80140e0:	4611      	mov	r1, r2
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7f7 fc29 	bl	800b93a <_ZNK12SimpleString10startsWithERKS_>
 80140e8:	4603      	mov	r3, r0
 80140ea:	461d      	mov	r5, r3
 80140ec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80140f0:	4618      	mov	r0, r3
 80140f2:	f7f7 ff16 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80140f6:	2d00      	cmp	r5, #0
 80140f8:	d009      	beq.n	801410e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	6859      	ldr	r1, [r3, #4]
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	689a      	ldr	r2, [r3, #8]
 8014102:	f107 0310 	add.w	r3, r7, #16
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 fd98 	bl	8014c3c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 801410c:	e002      	b.n	8014114 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 801410e:	2300      	movs	r3, #0
 8014110:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8014114:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8014118:	2b00      	cmp	r3, #0
 801411a:	d102      	bne.n	8014122 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 801411c:	2400      	movs	r4, #0
 801411e:	2500      	movs	r5, #0
 8014120:	e000      	b.n	8014124 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8014122:	2501      	movs	r5, #1
 8014124:	f107 0308 	add.w	r3, r7, #8
 8014128:	4618      	mov	r0, r3
 801412a:	f7f7 fefa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801412e:	2d01      	cmp	r5, #1
 8014130:	d104      	bne.n	801413c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	3301      	adds	r3, #1
 8014136:	613b      	str	r3, [r7, #16]
 8014138:	e455      	b.n	80139e6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 801413a:	2401      	movs	r4, #1
 801413c:	4623      	mov	r3, r4
}
 801413e:	4618      	mov	r0, r3
 8014140:	37f0      	adds	r7, #240	; 0xf0
 8014142:	46bd      	mov	sp, r7
 8014144:	bdb0      	pop	{r4, r5, r7, pc}
 8014146:	bf00      	nop
 8014148:	08023a4c 	.word	0x08023a4c
 801414c:	08023ab8 	.word	0x08023ab8

08014150 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8014150:	b480      	push	{r7}
 8014152:	b083      	sub	sp, #12
 8014154:	af00      	add	r7, sp, #0
 8014156:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8014158:	4b03      	ldr	r3, [pc, #12]	; (8014168 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 801415a:	4618      	mov	r0, r3
 801415c:	370c      	adds	r7, #12
 801415e:	46bd      	mov	sp, r7
 8014160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014164:	4770      	bx	lr
 8014166:	bf00      	nop
 8014168:	08023abc 	.word	0x08023abc

0801416c <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 801416c:	b480      	push	{r7}
 801416e:	b083      	sub	sp, #12
 8014170:	af00      	add	r7, sp, #0
 8014172:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8014174:	4b03      	ldr	r3, [pc, #12]	; (8014184 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8014176:	4618      	mov	r0, r3
 8014178:	370c      	adds	r7, #12
 801417a:	46bd      	mov	sp, r7
 801417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014180:	4770      	bx	lr
 8014182:	bf00      	nop
 8014184:	08023bec 	.word	0x08023bec

08014188 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8014188:	b480      	push	{r7}
 801418a:	b083      	sub	sp, #12
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	7b1b      	ldrb	r3, [r3, #12]
}
 8014194:	4618      	mov	r0, r3
 8014196:	370c      	adds	r7, #12
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 80141a0:	b480      	push	{r7}
 80141a2:	b083      	sub	sp, #12
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
    return verbose_;
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	7b5b      	ldrb	r3, [r3, #13]
}
 80141ac:	4618      	mov	r0, r3
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	7b9b      	ldrb	r3, [r3, #14]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr

080141d0 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
    return color_;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	7bdb      	ldrb	r3, [r3, #15]
}
 80141dc:	4618      	mov	r0, r3
 80141de:	370c      	adds	r7, #12
 80141e0:	46bd      	mov	sp, r7
 80141e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e6:	4770      	bx	lr

080141e8 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 80141e8:	b480      	push	{r7}
 80141ea:	b083      	sub	sp, #12
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	7c5b      	ldrb	r3, [r3, #17]
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	370c      	adds	r7, #12
 80141f8:	46bd      	mov	sp, r7
 80141fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fe:	4770      	bx	lr

08014200 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	7c9b      	ldrb	r3, [r3, #18]
}
 801420c:	4618      	mov	r0, r3
 801420e:	370c      	adds	r7, #12
 8014210:	46bd      	mov	sp, r7
 8014212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014216:	4770      	bx	lr

08014218 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8014218:	b480      	push	{r7}
 801421a:	b083      	sub	sp, #12
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	7cdb      	ldrb	r3, [r3, #19]
}
 8014224:	4618      	mov	r0, r3
 8014226:	370c      	adds	r7, #12
 8014228:	46bd      	mov	sp, r7
 801422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422e:	4770      	bx	lr

08014230 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8014230:	b480      	push	{r7}
 8014232:	b083      	sub	sp, #12
 8014234:	af00      	add	r7, sp, #0
 8014236:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	7d1b      	ldrb	r3, [r3, #20]
}
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr

08014248 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8014248:	b480      	push	{r7}
 801424a:	b083      	sub	sp, #12
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	7c1b      	ldrb	r3, [r3, #16]
}
 8014254:	4618      	mov	r0, r3
 8014256:	370c      	adds	r7, #12
 8014258:	46bd      	mov	sp, r7
 801425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801425e:	4770      	bx	lr

08014260 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8014260:	b480      	push	{r7}
 8014262:	b083      	sub	sp, #12
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
    return repeat_;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	69db      	ldr	r3, [r3, #28]
}
 801426c:	4618      	mov	r0, r3
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
    return reversing_;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	7d5b      	ldrb	r3, [r3, #21]
}
 8014284:	4618      	mov	r0, r3
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8014290:	b480      	push	{r7}
 8014292:	b083      	sub	sp, #12
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	7d9b      	ldrb	r3, [r3, #22]
}
 801429c:	4618      	mov	r0, r3
 801429e:	370c      	adds	r7, #12
 80142a0:	46bd      	mov	sp, r7
 80142a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a6:	4770      	bx	lr

080142a8 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
    return shuffling_;
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	7ddb      	ldrb	r3, [r3, #23]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	370c      	adds	r7, #12
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	6a1b      	ldr	r3, [r3, #32]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	370c      	adds	r7, #12
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 80142d8:	b480      	push	{r7}
 80142da:	b083      	sub	sp, #12
 80142dc:	af00      	add	r7, sp, #0
 80142de:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80142e4:	4618      	mov	r0, r3
 80142e6:	370c      	adds	r7, #12
 80142e8:	46bd      	mov	sp, r7
 80142ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ee:	4770      	bx	lr

080142f0 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 80142f0:	b480      	push	{r7}
 80142f2:	b083      	sub	sp, #12
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b086      	sub	sp, #24
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
 8014314:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	2200      	movs	r2, #0
 801431a:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	687a      	ldr	r2, [r7, #4]
 8014324:	4413      	add	r3, r2
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	f107 0310 	add.w	r3, r7, #16
 801432c:	4611      	mov	r1, r2
 801432e:	4618      	mov	r0, r3
 8014330:	f7f7 fa3f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8014334:	f107 0310 	add.w	r3, r7, #16
 8014338:	4618      	mov	r0, r3
 801433a:	f7f7 fdd1 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 801433e:	4603      	mov	r3, r0
 8014340:	2b02      	cmp	r3, #2
 8014342:	bf8c      	ite	hi
 8014344:	2301      	movhi	r3, #1
 8014346:	2300      	movls	r3, #0
 8014348:	b2db      	uxtb	r3, r3
 801434a:	2b00      	cmp	r3, #0
 801434c:	d00e      	beq.n	801436c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	009b      	lsls	r3, r3, #2
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	4413      	add	r3, r2
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	3302      	adds	r3, #2
 801435c:	4618      	mov	r0, r3
 801435e:	f7f7 f824 	bl	800b3aa <_ZN12SimpleString4AtoIEPKc>
 8014362:	4603      	mov	r3, r0
 8014364:	461a      	mov	r2, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	61da      	str	r2, [r3, #28]
 801436a:	e01c      	b.n	80143a6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	3301      	adds	r3, #1
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	429a      	cmp	r2, r3
 8014376:	dd16      	ble.n	80143a6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	3301      	adds	r3, #1
 801437e:	009b      	lsls	r3, r3, #2
 8014380:	687a      	ldr	r2, [r7, #4]
 8014382:	4413      	add	r3, r2
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4618      	mov	r0, r3
 8014388:	f7f7 f80f 	bl	800b3aa <_ZN12SimpleString4AtoIEPKc>
 801438c:	4603      	mov	r3, r0
 801438e:	461a      	mov	r2, r3
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d004      	beq.n	80143a6 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	1c5a      	adds	r2, r3, #1
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 80143a6:	68fb      	ldr	r3, [r7, #12]
 80143a8:	69db      	ldr	r3, [r3, #28]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d102      	bne.n	80143b4 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	2202      	movs	r2, #2
 80143b2:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 80143b4:	f107 0310 	add.w	r3, r7, #16
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f7 fdb2 	bl	800bf22 <_ZN12SimpleStringD1Ev>

}
 80143be:	bf00      	nop
 80143c0:	3718      	adds	r7, #24
 80143c2:	46bd      	mov	sp, r7
 80143c4:	bd80      	pop	{r7, pc}
	...

080143c8 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 80143c8:	b590      	push	{r4, r7, lr}
 80143ca:	b089      	sub	sp, #36	; 0x24
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	60f8      	str	r0, [r7, #12]
 80143d0:	60b9      	str	r1, [r7, #8]
 80143d2:	607a      	str	r2, [r7, #4]
 80143d4:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	2201      	movs	r2, #1
 80143da:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 80143dc:	4b34      	ldr	r3, [pc, #208]	; (80144b0 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4798      	blx	r3
 80143e2:	4603      	mov	r3, r0
 80143e4:	461a      	mov	r2, r3
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	6a1b      	ldr	r3, [r3, #32]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d104      	bne.n	80143fc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	6a1b      	ldr	r3, [r3, #32]
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	009b      	lsls	r3, r3, #2
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	4413      	add	r3, r2
 8014406:	681a      	ldr	r2, [r3, #0]
 8014408:	f107 0314 	add.w	r3, r7, #20
 801440c:	4611      	mov	r1, r2
 801440e:	4618      	mov	r0, r3
 8014410:	f7f7 f9cf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8014414:	f107 0314 	add.w	r3, r7, #20
 8014418:	4618      	mov	r0, r3
 801441a:	f7f7 fd61 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 801441e:	4603      	mov	r3, r0
 8014420:	2b02      	cmp	r3, #2
 8014422:	bf8c      	ite	hi
 8014424:	2301      	movhi	r3, #1
 8014426:	2300      	movls	r3, #0
 8014428:	b2db      	uxtb	r3, r3
 801442a:	2b00      	cmp	r3, #0
 801442c:	d010      	beq.n	8014450 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	2201      	movs	r2, #1
 8014432:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8014434:	683b      	ldr	r3, [r7, #0]
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	009b      	lsls	r3, r3, #2
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	4413      	add	r3, r2
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	3302      	adds	r3, #2
 8014442:	4618      	mov	r0, r3
 8014444:	f7f6 ff78 	bl	800b338 <_ZN12SimpleString4AtoUEPKc>
 8014448:	4602      	mov	r2, r0
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	621a      	str	r2, [r3, #32]
 801444e:	e01e      	b.n	801448e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8014450:	683b      	ldr	r3, [r7, #0]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	3301      	adds	r3, #1
 8014456:	68ba      	ldr	r2, [r7, #8]
 8014458:	429a      	cmp	r2, r3
 801445a:	dd18      	ble.n	801448e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	3301      	adds	r3, #1
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	4413      	add	r3, r2
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4618      	mov	r0, r3
 801446c:	f7f6 ff64 	bl	800b338 <_ZN12SimpleString4AtoUEPKc>
 8014470:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8014472:	69fb      	ldr	r3, [r7, #28]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d00a      	beq.n	801448e <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2201      	movs	r2, #1
 801447c:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	69fa      	ldr	r2, [r7, #28]
 8014482:	621a      	str	r2, [r3, #32]
            i++;
 8014484:	683b      	ldr	r3, [r7, #0]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	1c5a      	adds	r2, r3, #1
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	6a1b      	ldr	r3, [r3, #32]
 8014492:	2b00      	cmp	r3, #0
 8014494:	bf14      	ite	ne
 8014496:	2301      	movne	r3, #1
 8014498:	2300      	moveq	r3, #0
 801449a:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 801449c:	f107 0314 	add.w	r3, r7, #20
 80144a0:	4618      	mov	r0, r3
 80144a2:	f7f7 fd3e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 80144a6:	4623      	mov	r3, r4
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3724      	adds	r7, #36	; 0x24
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd90      	pop	{r4, r7, pc}
 80144b0:	200000ac 	.word	0x200000ac

080144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b088      	sub	sp, #32
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
 80144c0:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 80144c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144c4:	f7f7 fd0c 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 80144c8:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 80144ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	683a      	ldr	r2, [r7, #0]
 80144d2:	4413      	add	r3, r2
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	f107 0314 	add.w	r3, r7, #20
 80144da:	4611      	mov	r1, r2
 80144dc:	4618      	mov	r0, r3
 80144de:	f7f7 f968 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 80144e2:	f107 0314 	add.w	r3, r7, #20
 80144e6:	4618      	mov	r0, r3
 80144e8:	f7f7 fcfa 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 80144ec:	4602      	mov	r2, r0
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	4293      	cmp	r3, r2
 80144f2:	bf34      	ite	cc
 80144f4:	2301      	movcc	r3, #1
 80144f6:	2300      	movcs	r3, #0
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00c      	beq.n	8014518 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 80144fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	683a      	ldr	r2, [r7, #0]
 8014506:	4413      	add	r3, r2
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	4413      	add	r3, r2
 801450e:	4619      	mov	r1, r3
 8014510:	68f8      	ldr	r0, [r7, #12]
 8014512:	f7f7 f94e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014516:	e019      	b.n	801454c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8014518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	3301      	adds	r3, #1
 801451e:	687a      	ldr	r2, [r7, #4]
 8014520:	429a      	cmp	r2, r3
 8014522:	dd0f      	ble.n	8014544 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8014524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	1c5a      	adds	r2, r3, #1
 801452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801452c:	601a      	str	r2, [r3, #0]
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	009b      	lsls	r3, r3, #2
 8014534:	683a      	ldr	r2, [r7, #0]
 8014536:	4413      	add	r3, r2
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4619      	mov	r1, r3
 801453c:	68f8      	ldr	r0, [r7, #12]
 801453e:	f7f7 f938 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014542:	e003      	b.n	801454c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8014544:	4906      	ldr	r1, [pc, #24]	; (8014560 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8014546:	68f8      	ldr	r0, [r7, #12]
 8014548:	f7f7 f933 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 801454c:	f107 0314 	add.w	r3, r7, #20
 8014550:	4618      	mov	r0, r3
 8014552:	f7f7 fce6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8014556:	68f8      	ldr	r0, [r7, #12]
 8014558:	3720      	adds	r7, #32
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	08023a38 	.word	0x08023a38

08014564 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8014564:	b5b0      	push	{r4, r5, r7, lr}
 8014566:	b08c      	sub	sp, #48	; 0x30
 8014568:	af02      	add	r7, sp, #8
 801456a:	60f8      	str	r0, [r7, #12]
 801456c:	60b9      	str	r1, [r7, #8]
 801456e:	607a      	str	r2, [r7, #4]
 8014570:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8014572:	f107 031c 	add.w	r3, r7, #28
 8014576:	491a      	ldr	r1, [pc, #104]	; (80145e0 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8014578:	4618      	mov	r0, r3
 801457a:	f7f7 f91a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801457e:	f107 0014 	add.w	r0, r7, #20
 8014582:	f107 031c 	add.w	r3, r7, #28
 8014586:	9301      	str	r3, [sp, #4]
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	68ba      	ldr	r2, [r7, #8]
 8014590:	68f9      	ldr	r1, [r7, #12]
 8014592:	f7ff ff8f 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014596:	f107 0514 	add.w	r5, r7, #20
 801459a:	f44f 7289 	mov.w	r2, #274	; 0x112
 801459e:	4911      	ldr	r1, [pc, #68]	; (80145e4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 80145a0:	2010      	movs	r0, #16
 80145a2:	f7f4 fd43 	bl	800902c <_ZnwjPKci>
 80145a6:	4604      	mov	r4, r0
 80145a8:	4629      	mov	r1, r5
 80145aa:	4620      	mov	r0, r4
 80145ac:	f009 ff3e 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 80145b0:	627c      	str	r4, [r7, #36]	; 0x24
 80145b2:	f107 0314 	add.w	r3, r7, #20
 80145b6:	4618      	mov	r0, r3
 80145b8:	f7f7 fcb3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80145bc:	f107 031c 	add.w	r3, r7, #28
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7f7 fcae 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145ca:	4619      	mov	r1, r3
 80145cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145ce:	f009 ff4d 	bl	801e46c <_ZN10TestFilter3addEPS_>
 80145d2:	4602      	mov	r2, r0
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80145d8:	bf00      	nop
 80145da:	3728      	adds	r7, #40	; 0x28
 80145dc:	46bd      	mov	sp, r7
 80145de:	bdb0      	pop	{r4, r5, r7, pc}
 80145e0:	08023a6c 	.word	0x08023a6c
 80145e4:	08024400 	.word	0x08024400

080145e8 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 80145e8:	b5b0      	push	{r4, r5, r7, lr}
 80145ea:	b092      	sub	sp, #72	; 0x48
 80145ec:	af02      	add	r7, sp, #8
 80145ee:	60f8      	str	r0, [r7, #12]
 80145f0:	60b9      	str	r1, [r7, #8]
 80145f2:	607a      	str	r2, [r7, #4]
 80145f4:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 80145f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80145fa:	494e      	ldr	r1, [pc, #312]	; (8014734 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7f7 f8d8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014602:	f107 0020 	add.w	r0, r7, #32
 8014606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801460a:	9301      	str	r3, [sp, #4]
 801460c:	683b      	ldr	r3, [r7, #0]
 801460e:	9300      	str	r3, [sp, #0]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	68ba      	ldr	r2, [r7, #8]
 8014614:	68f9      	ldr	r1, [r7, #12]
 8014616:	f7ff ff4d 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801461a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801461e:	4618      	mov	r0, r3
 8014620:	f7f7 fc7f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8014624:	f107 0310 	add.w	r3, r7, #16
 8014628:	4618      	mov	r0, r3
 801462a:	f7f8 fb8f 	bl	800cd4c <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 801462e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014632:	4941      	ldr	r1, [pc, #260]	; (8014738 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8014634:	4618      	mov	r0, r3
 8014636:	f7f7 f8bc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801463a:	f107 0210 	add.w	r2, r7, #16
 801463e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8014642:	f107 0320 	add.w	r3, r7, #32
 8014646:	4618      	mov	r0, r3
 8014648:	f7f7 fa1f 	bl	800ba8a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 801464c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014650:	4618      	mov	r0, r3
 8014652:	f7f7 fc66 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8014656:	f107 0310 	add.w	r3, r7, #16
 801465a:	4618      	mov	r0, r3
 801465c:	f7f8 fc1b 	bl	800ce96 <_ZNK22SimpleStringCollection4sizeEv>
 8014660:	4603      	mov	r3, r0
 8014662:	2b02      	cmp	r3, #2
 8014664:	bf14      	ite	ne
 8014666:	2301      	movne	r3, #1
 8014668:	2300      	moveq	r3, #0
 801466a:	b2db      	uxtb	r3, r3
 801466c:	2b00      	cmp	r3, #0
 801466e:	d001      	beq.n	8014674 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 8014670:	2400      	movs	r4, #0
 8014672:	e04f      	b.n	8014714 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8014674:	f107 0310 	add.w	r3, r7, #16
 8014678:	2100      	movs	r1, #0
 801467a:	4618      	mov	r0, r3
 801467c:	f7f8 fc18 	bl	800ceb0 <_ZN22SimpleStringCollectionixEj>
 8014680:	4604      	mov	r4, r0
 8014682:	f107 0310 	add.w	r3, r7, #16
 8014686:	2100      	movs	r1, #0
 8014688:	4618      	mov	r0, r3
 801468a:	f7f8 fc11 	bl	800ceb0 <_ZN22SimpleStringCollectionixEj>
 801468e:	4603      	mov	r3, r0
 8014690:	4618      	mov	r0, r3
 8014692:	f7f7 fc25 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 8014696:	4603      	mov	r3, r0
 8014698:	3b01      	subs	r3, #1
 801469a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 801469e:	2200      	movs	r2, #0
 80146a0:	4621      	mov	r1, r4
 80146a2:	f7f7 fd47 	bl	800c134 <_ZNK12SimpleString9subStringEjj>
 80146a6:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80146aa:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80146ae:	4923      	ldr	r1, [pc, #140]	; (801473c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80146b0:	2010      	movs	r0, #16
 80146b2:	f7f4 fcbb 	bl	800902c <_ZnwjPKci>
 80146b6:	4604      	mov	r4, r0
 80146b8:	4629      	mov	r1, r5
 80146ba:	4620      	mov	r0, r4
 80146bc:	f009 feb6 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80146c4:	4619      	mov	r1, r3
 80146c6:	4620      	mov	r0, r4
 80146c8:	f009 fed0 	bl	801e46c <_ZN10TestFilter3addEPS_>
 80146cc:	4602      	mov	r2, r0
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	625a      	str	r2, [r3, #36]	; 0x24
 80146d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80146d6:	4618      	mov	r0, r3
 80146d8:	f7f7 fc23 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80146dc:	f107 0310 	add.w	r3, r7, #16
 80146e0:	2101      	movs	r1, #1
 80146e2:	4618      	mov	r0, r3
 80146e4:	f7f8 fbe4 	bl	800ceb0 <_ZN22SimpleStringCollectionixEj>
 80146e8:	4605      	mov	r5, r0
 80146ea:	f240 121f 	movw	r2, #287	; 0x11f
 80146ee:	4913      	ldr	r1, [pc, #76]	; (801473c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80146f0:	2010      	movs	r0, #16
 80146f2:	f7f4 fc9b 	bl	800902c <_ZnwjPKci>
 80146f6:	4604      	mov	r4, r0
 80146f8:	4629      	mov	r1, r5
 80146fa:	4620      	mov	r0, r4
 80146fc:	f009 fe96 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014704:	4619      	mov	r1, r3
 8014706:	4620      	mov	r0, r4
 8014708:	f009 feb0 	bl	801e46c <_ZN10TestFilter3addEPS_>
 801470c:	4602      	mov	r2, r0
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8014712:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8014714:	f107 0310 	add.w	r3, r7, #16
 8014718:	4618      	mov	r0, r3
 801471a:	f7f8 fb8b 	bl	800ce34 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801471e:	f107 0320 	add.w	r3, r7, #32
 8014722:	4618      	mov	r0, r3
 8014724:	f7f7 fbfd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014728:	4623      	mov	r3, r4
}
 801472a:	4618      	mov	r0, r3
 801472c:	3740      	adds	r7, #64	; 0x40
 801472e:	46bd      	mov	sp, r7
 8014730:	bdb0      	pop	{r4, r5, r7, pc}
 8014732:	bf00      	nop
 8014734:	08023a70 	.word	0x08023a70
 8014738:	08024420 	.word	0x08024420
 801473c:	08024400 	.word	0x08024400

08014740 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8014740:	b5b0      	push	{r4, r5, r7, lr}
 8014742:	b08c      	sub	sp, #48	; 0x30
 8014744:	af02      	add	r7, sp, #8
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	60b9      	str	r1, [r7, #8]
 801474a:	607a      	str	r2, [r7, #4]
 801474c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801474e:	f107 031c 	add.w	r3, r7, #28
 8014752:	491c      	ldr	r1, [pc, #112]	; (80147c4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8014754:	4618      	mov	r0, r3
 8014756:	f7f7 f82c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801475a:	f107 0014 	add.w	r0, r7, #20
 801475e:	f107 031c 	add.w	r3, r7, #28
 8014762:	9301      	str	r3, [sp, #4]
 8014764:	683b      	ldr	r3, [r7, #0]
 8014766:	9300      	str	r3, [sp, #0]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	68ba      	ldr	r2, [r7, #8]
 801476c:	68f9      	ldr	r1, [r7, #12]
 801476e:	f7ff fea1 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014772:	f107 0514 	add.w	r5, r7, #20
 8014776:	f240 1225 	movw	r2, #293	; 0x125
 801477a:	4913      	ldr	r1, [pc, #76]	; (80147c8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 801477c:	2010      	movs	r0, #16
 801477e:	f7f4 fc55 	bl	800902c <_ZnwjPKci>
 8014782:	4604      	mov	r4, r0
 8014784:	4629      	mov	r1, r5
 8014786:	4620      	mov	r0, r4
 8014788:	f009 fe50 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 801478c:	627c      	str	r4, [r7, #36]	; 0x24
 801478e:	f107 0314 	add.w	r3, r7, #20
 8014792:	4618      	mov	r0, r3
 8014794:	f7f7 fbc5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014798:	f107 031c 	add.w	r3, r7, #28
 801479c:	4618      	mov	r0, r3
 801479e:	f7f7 fbc0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80147a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147a4:	f009 fe7d 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ac:	4619      	mov	r1, r3
 80147ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147b0:	f009 fe5c 	bl	801e46c <_ZN10TestFilter3addEPS_>
 80147b4:	4602      	mov	r2, r0
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80147ba:	bf00      	nop
 80147bc:	3728      	adds	r7, #40	; 0x28
 80147be:	46bd      	mov	sp, r7
 80147c0:	bdb0      	pop	{r4, r5, r7, pc}
 80147c2:	bf00      	nop
 80147c4:	08023a74 	.word	0x08023a74
 80147c8:	08024400 	.word	0x08024400

080147cc <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80147cc:	b5b0      	push	{r4, r5, r7, lr}
 80147ce:	b08c      	sub	sp, #48	; 0x30
 80147d0:	af02      	add	r7, sp, #8
 80147d2:	60f8      	str	r0, [r7, #12]
 80147d4:	60b9      	str	r1, [r7, #8]
 80147d6:	607a      	str	r2, [r7, #4]
 80147d8:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80147da:	f107 031c 	add.w	r3, r7, #28
 80147de:	491c      	ldr	r1, [pc, #112]	; (8014850 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7f6 ffe6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80147e6:	f107 0014 	add.w	r0, r7, #20
 80147ea:	f107 031c 	add.w	r3, r7, #28
 80147ee:	9301      	str	r3, [sp, #4]
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	9300      	str	r3, [sp, #0]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	68ba      	ldr	r2, [r7, #8]
 80147f8:	68f9      	ldr	r1, [r7, #12]
 80147fa:	f7ff fe5b 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80147fe:	f107 0514 	add.w	r5, r7, #20
 8014802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014806:	4913      	ldr	r1, [pc, #76]	; (8014854 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8014808:	2010      	movs	r0, #16
 801480a:	f7f4 fc0f 	bl	800902c <_ZnwjPKci>
 801480e:	4604      	mov	r4, r0
 8014810:	4629      	mov	r1, r5
 8014812:	4620      	mov	r0, r4
 8014814:	f009 fe0a 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014818:	627c      	str	r4, [r7, #36]	; 0x24
 801481a:	f107 0314 	add.w	r3, r7, #20
 801481e:	4618      	mov	r0, r3
 8014820:	f7f7 fb7f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014824:	f107 031c 	add.w	r3, r7, #28
 8014828:	4618      	mov	r0, r3
 801482a:	f7f7 fb7a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 801482e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014830:	f009 fe44 	bl	801e4bc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014838:	4619      	mov	r1, r3
 801483a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801483c:	f009 fe16 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014840:	4602      	mov	r2, r0
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	625a      	str	r2, [r3, #36]	; 0x24
}
 8014846:	bf00      	nop
 8014848:	3728      	adds	r7, #40	; 0x28
 801484a:	46bd      	mov	sp, r7
 801484c:	bdb0      	pop	{r4, r5, r7, pc}
 801484e:	bf00      	nop
 8014850:	08023a78 	.word	0x08023a78
 8014854:	08024400 	.word	0x08024400

08014858 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8014858:	b5b0      	push	{r4, r5, r7, lr}
 801485a:	b08c      	sub	sp, #48	; 0x30
 801485c:	af02      	add	r7, sp, #8
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8014866:	f107 031c 	add.w	r3, r7, #28
 801486a:	491d      	ldr	r1, [pc, #116]	; (80148e0 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 801486c:	4618      	mov	r0, r3
 801486e:	f7f6 ffa0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014872:	f107 0014 	add.w	r0, r7, #20
 8014876:	f107 031c 	add.w	r3, r7, #28
 801487a:	9301      	str	r3, [sp, #4]
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	9300      	str	r3, [sp, #0]
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	68ba      	ldr	r2, [r7, #8]
 8014884:	68f9      	ldr	r1, [r7, #12]
 8014886:	f7ff fe15 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801488a:	f107 0514 	add.w	r5, r7, #20
 801488e:	f240 1233 	movw	r2, #307	; 0x133
 8014892:	4914      	ldr	r1, [pc, #80]	; (80148e4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 8014894:	2010      	movs	r0, #16
 8014896:	f7f4 fbc9 	bl	800902c <_ZnwjPKci>
 801489a:	4604      	mov	r4, r0
 801489c:	4629      	mov	r1, r5
 801489e:	4620      	mov	r0, r4
 80148a0:	f009 fdc4 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 80148a4:	627c      	str	r4, [r7, #36]	; 0x24
 80148a6:	f107 0314 	add.w	r3, r7, #20
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7f7 fb39 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80148b0:	f107 031c 	add.w	r3, r7, #28
 80148b4:	4618      	mov	r0, r3
 80148b6:	f7f7 fb34 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80148ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148bc:	f009 fdf1 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80148c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148c2:	f009 fdfb 	bl	801e4bc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ca:	4619      	mov	r1, r3
 80148cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80148ce:	f009 fdcd 	bl	801e46c <_ZN10TestFilter3addEPS_>
 80148d2:	4602      	mov	r2, r0
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80148d8:	bf00      	nop
 80148da:	3728      	adds	r7, #40	; 0x28
 80148dc:	46bd      	mov	sp, r7
 80148de:	bdb0      	pop	{r4, r5, r7, pc}
 80148e0:	08023a7c 	.word	0x08023a7c
 80148e4:	08024400 	.word	0x08024400

080148e8 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 80148e8:	b5b0      	push	{r4, r5, r7, lr}
 80148ea:	b08c      	sub	sp, #48	; 0x30
 80148ec:	af02      	add	r7, sp, #8
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
 80148f4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 80148f6:	f107 031c 	add.w	r3, r7, #28
 80148fa:	491a      	ldr	r1, [pc, #104]	; (8014964 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 80148fc:	4618      	mov	r0, r3
 80148fe:	f7f6 ff58 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014902:	f107 0014 	add.w	r0, r7, #20
 8014906:	f107 031c 	add.w	r3, r7, #28
 801490a:	9301      	str	r3, [sp, #4]
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	9300      	str	r3, [sp, #0]
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	68f9      	ldr	r1, [r7, #12]
 8014916:	f7ff fdcd 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801491a:	f107 0514 	add.w	r5, r7, #20
 801491e:	f240 123b 	movw	r2, #315	; 0x13b
 8014922:	4911      	ldr	r1, [pc, #68]	; (8014968 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8014924:	2010      	movs	r0, #16
 8014926:	f7f4 fb81 	bl	800902c <_ZnwjPKci>
 801492a:	4604      	mov	r4, r0
 801492c:	4629      	mov	r1, r5
 801492e:	4620      	mov	r0, r4
 8014930:	f009 fd7c 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014934:	627c      	str	r4, [r7, #36]	; 0x24
 8014936:	f107 0314 	add.w	r3, r7, #20
 801493a:	4618      	mov	r0, r3
 801493c:	f7f7 faf1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014940:	f107 031c 	add.w	r3, r7, #28
 8014944:	4618      	mov	r0, r3
 8014946:	f7f7 faec 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801494e:	4619      	mov	r1, r3
 8014950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014952:	f009 fd8b 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014956:	4602      	mov	r2, r0
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801495c:	bf00      	nop
 801495e:	3728      	adds	r7, #40	; 0x28
 8014960:	46bd      	mov	sp, r7
 8014962:	bdb0      	pop	{r4, r5, r7, pc}
 8014964:	08023a84 	.word	0x08023a84
 8014968:	08024400 	.word	0x08024400

0801496c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 801496c:	b5b0      	push	{r4, r5, r7, lr}
 801496e:	b08c      	sub	sp, #48	; 0x30
 8014970:	af02      	add	r7, sp, #8
 8014972:	60f8      	str	r0, [r7, #12]
 8014974:	60b9      	str	r1, [r7, #8]
 8014976:	607a      	str	r2, [r7, #4]
 8014978:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 801497a:	f107 031c 	add.w	r3, r7, #28
 801497e:	491c      	ldr	r1, [pc, #112]	; (80149f0 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 8014980:	4618      	mov	r0, r3
 8014982:	f7f6 ff16 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014986:	f107 0014 	add.w	r0, r7, #20
 801498a:	f107 031c 	add.w	r3, r7, #28
 801498e:	9301      	str	r3, [sp, #4]
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	9300      	str	r3, [sp, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	68ba      	ldr	r2, [r7, #8]
 8014998:	68f9      	ldr	r1, [r7, #12]
 801499a:	f7ff fd8b 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801499e:	f107 0514 	add.w	r5, r7, #20
 80149a2:	f240 1241 	movw	r2, #321	; 0x141
 80149a6:	4913      	ldr	r1, [pc, #76]	; (80149f4 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80149a8:	2010      	movs	r0, #16
 80149aa:	f7f4 fb3f 	bl	800902c <_ZnwjPKci>
 80149ae:	4604      	mov	r4, r0
 80149b0:	4629      	mov	r1, r5
 80149b2:	4620      	mov	r0, r4
 80149b4:	f009 fd3a 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 80149b8:	627c      	str	r4, [r7, #36]	; 0x24
 80149ba:	f107 0314 	add.w	r3, r7, #20
 80149be:	4618      	mov	r0, r3
 80149c0:	f7f7 faaf 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80149c4:	f107 031c 	add.w	r3, r7, #28
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7f7 faaa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80149ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149d0:	f009 fd67 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149d8:	4619      	mov	r1, r3
 80149da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80149dc:	f009 fd46 	bl	801e46c <_ZN10TestFilter3addEPS_>
 80149e0:	4602      	mov	r2, r0
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80149e6:	bf00      	nop
 80149e8:	3728      	adds	r7, #40	; 0x28
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bdb0      	pop	{r4, r5, r7, pc}
 80149ee:	bf00      	nop
 80149f0:	08023a88 	.word	0x08023a88
 80149f4:	08024400 	.word	0x08024400

080149f8 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 80149f8:	b5b0      	push	{r4, r5, r7, lr}
 80149fa:	b08c      	sub	sp, #48	; 0x30
 80149fc:	af02      	add	r7, sp, #8
 80149fe:	60f8      	str	r0, [r7, #12]
 8014a00:	60b9      	str	r1, [r7, #8]
 8014a02:	607a      	str	r2, [r7, #4]
 8014a04:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8014a06:	f107 031c 	add.w	r3, r7, #28
 8014a0a:	491c      	ldr	r1, [pc, #112]	; (8014a7c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f7f6 fed0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014a12:	f107 0014 	add.w	r0, r7, #20
 8014a16:	f107 031c 	add.w	r3, r7, #28
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	683b      	ldr	r3, [r7, #0]
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	68ba      	ldr	r2, [r7, #8]
 8014a24:	68f9      	ldr	r1, [r7, #12]
 8014a26:	f7ff fd45 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014a2a:	f107 0514 	add.w	r5, r7, #20
 8014a2e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014a32:	4913      	ldr	r1, [pc, #76]	; (8014a80 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8014a34:	2010      	movs	r0, #16
 8014a36:	f7f4 faf9 	bl	800902c <_ZnwjPKci>
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	4629      	mov	r1, r5
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f009 fcf4 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014a44:	627c      	str	r4, [r7, #36]	; 0x24
 8014a46:	f107 0314 	add.w	r3, r7, #20
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	f7f7 fa69 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014a50:	f107 031c 	add.w	r3, r7, #28
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7f7 fa64 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8014a5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a5c:	f009 fd2e 	bl	801e4bc <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a64:	4619      	mov	r1, r3
 8014a66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a68:	f009 fd00 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014a72:	bf00      	nop
 8014a74:	3728      	adds	r7, #40	; 0x28
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bdb0      	pop	{r4, r5, r7, pc}
 8014a7a:	bf00      	nop
 8014a7c:	08023a8c 	.word	0x08023a8c
 8014a80:	08024400 	.word	0x08024400

08014a84 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 8014a84:	b5b0      	push	{r4, r5, r7, lr}
 8014a86:	b08c      	sub	sp, #48	; 0x30
 8014a88:	af02      	add	r7, sp, #8
 8014a8a:	60f8      	str	r0, [r7, #12]
 8014a8c:	60b9      	str	r1, [r7, #8]
 8014a8e:	607a      	str	r2, [r7, #4]
 8014a90:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 8014a92:	f107 031c 	add.w	r3, r7, #28
 8014a96:	491d      	ldr	r1, [pc, #116]	; (8014b0c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f6 fe8a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014a9e:	f107 0014 	add.w	r0, r7, #20
 8014aa2:	f107 031c 	add.w	r3, r7, #28
 8014aa6:	9301      	str	r3, [sp, #4]
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	9300      	str	r3, [sp, #0]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	68ba      	ldr	r2, [r7, #8]
 8014ab0:	68f9      	ldr	r1, [r7, #12]
 8014ab2:	f7ff fcff 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014ab6:	f107 0514 	add.w	r5, r7, #20
 8014aba:	f240 124f 	movw	r2, #335	; 0x14f
 8014abe:	4914      	ldr	r1, [pc, #80]	; (8014b10 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 8014ac0:	2010      	movs	r0, #16
 8014ac2:	f7f4 fab3 	bl	800902c <_ZnwjPKci>
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	4629      	mov	r1, r5
 8014aca:	4620      	mov	r0, r4
 8014acc:	f009 fcae 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014ad0:	627c      	str	r4, [r7, #36]	; 0x24
 8014ad2:	f107 0314 	add.w	r3, r7, #20
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f7 fa23 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014adc:	f107 031c 	add.w	r3, r7, #28
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7f7 fa1e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8014ae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ae8:	f009 fce8 	bl	801e4bc <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8014aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014aee:	f009 fcd8 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 8014af2:	68fb      	ldr	r3, [r7, #12]
 8014af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014af6:	4619      	mov	r1, r3
 8014af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014afa:	f009 fcb7 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014afe:	4602      	mov	r2, r0
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8014b04:	bf00      	nop
 8014b06:	3728      	adds	r7, #40	; 0x28
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8014b0c:	08023a90 	.word	0x08023a90
 8014b10:	08024400 	.word	0x08024400

08014b14 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8014b14:	b5b0      	push	{r4, r5, r7, lr}
 8014b16:	b092      	sub	sp, #72	; 0x48
 8014b18:	af02      	add	r7, sp, #8
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
 8014b20:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8014b22:	f107 0320 	add.w	r3, r7, #32
 8014b26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f7f6 fe42 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014b2e:	f107 0018 	add.w	r0, r7, #24
 8014b32:	f107 0320 	add.w	r3, r7, #32
 8014b36:	9301      	str	r3, [sp, #4]
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	9300      	str	r3, [sp, #0]
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	68ba      	ldr	r2, [r7, #8]
 8014b40:	68f9      	ldr	r1, [r7, #12]
 8014b42:	f7ff fcb7 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014b46:	f107 0320 	add.w	r3, r7, #32
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7f7 f9e9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8014b50:	f107 0010 	add.w	r0, r7, #16
 8014b54:	f107 0118 	add.w	r1, r7, #24
 8014b58:	2329      	movs	r3, #41	; 0x29
 8014b5a:	222c      	movs	r2, #44	; 0x2c
 8014b5c:	f7f7 fb92 	bl	800c284 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 8014b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014b64:	f107 0110 	add.w	r1, r7, #16
 8014b68:	2202      	movs	r2, #2
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7f7 fb2c 	bl	800c1c8 <_ZNK12SimpleString9subStringEj>
 8014b70:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014b74:	f107 0310 	add.w	r3, r7, #16
 8014b78:	4611      	mov	r1, r2
 8014b7a:	4618      	mov	r0, r3
 8014b7c:	f7f6 fe85 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 8014b80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7f7 f9cc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 8014b8a:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 8014b8e:	492a      	ldr	r1, [pc, #168]	; (8014c38 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014b90:	2010      	movs	r0, #16
 8014b92:	f7f4 fa4b 	bl	800902c <_ZnwjPKci>
 8014b96:	4604      	mov	r4, r0
 8014b98:	f107 0310 	add.w	r3, r7, #16
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f009 fc44 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014ba4:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 8014ba6:	f107 0318 	add.w	r3, r7, #24
 8014baa:	2100      	movs	r1, #0
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f7 fb1c 	bl	800c1ea <_ZNK12SimpleString2atEj>
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	461a      	mov	r2, r3
 8014bb6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8014bba:	f107 0118 	add.w	r1, r7, #24
 8014bbe:	232c      	movs	r3, #44	; 0x2c
 8014bc0:	f7f7 fb60 	bl	800c284 <_ZNK12SimpleString17subStringFromTillEcc>
 8014bc4:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8014bc8:	f240 125b 	movw	r2, #347	; 0x15b
 8014bcc:	491a      	ldr	r1, [pc, #104]	; (8014c38 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 8014bce:	2010      	movs	r0, #16
 8014bd0:	f7f4 fa2c 	bl	800902c <_ZnwjPKci>
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	4629      	mov	r1, r5
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f009 fc27 	bl	801e42c <_ZN10TestFilterC1ERK12SimpleString>
 8014bde:	63bc      	str	r4, [r7, #56]	; 0x38
 8014be0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014be4:	4618      	mov	r0, r3
 8014be6:	f7f7 f99c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8014bea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014bec:	f009 fc59 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 8014bf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bf2:	f009 fc56 	bl	801e4a2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfa:	4619      	mov	r1, r3
 8014bfc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014bfe:	f009 fc35 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014c02:	4602      	mov	r2, r0
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014c10:	f009 fc2c 	bl	801e46c <_ZN10TestFilter3addEPS_>
 8014c14:	4602      	mov	r2, r0
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8014c1a:	f107 0310 	add.w	r3, r7, #16
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7f7 f97f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8014c24:	f107 0318 	add.w	r3, r7, #24
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7f7 f97a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8014c2e:	bf00      	nop
 8014c30:	3740      	adds	r7, #64	; 0x40
 8014c32:	46bd      	mov	sp, r7
 8014c34:	bdb0      	pop	{r4, r5, r7, pc}
 8014c36:	bf00      	nop
 8014c38:	08024400 	.word	0x08024400

08014c3c <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8014c3c:	b590      	push	{r4, r7, lr}
 8014c3e:	b08b      	sub	sp, #44	; 0x2c
 8014c40:	af02      	add	r7, sp, #8
 8014c42:	60f8      	str	r0, [r7, #12]
 8014c44:	60b9      	str	r1, [r7, #8]
 8014c46:	607a      	str	r2, [r7, #4]
 8014c48:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014c4a:	f107 0318 	add.w	r3, r7, #24
 8014c4e:	491b      	ldr	r1, [pc, #108]	; (8014cbc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7f6 fdae 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014c56:	f107 0010 	add.w	r0, r7, #16
 8014c5a:	f107 0318 	add.w	r3, r7, #24
 8014c5e:	9301      	str	r3, [sp, #4]
 8014c60:	683b      	ldr	r3, [r7, #0]
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	68ba      	ldr	r2, [r7, #8]
 8014c68:	68f9      	ldr	r1, [r7, #12]
 8014c6a:	f7ff fc23 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014c6e:	f107 0318 	add.w	r3, r7, #24
 8014c72:	4618      	mov	r0, r3
 8014c74:	f7f7 f955 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8014c78:	f107 0310 	add.w	r3, r7, #16
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7f7 f92f 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 8014c82:	4603      	mov	r3, r0
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	bf0c      	ite	eq
 8014c88:	2301      	moveq	r3, #1
 8014c8a:	2300      	movne	r3, #0
 8014c8c:	b2db      	uxtb	r3, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d001      	beq.n	8014c96 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 8014c92:	2400      	movs	r4, #0
 8014c94:	e008      	b.n	8014ca8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	3330      	adds	r3, #48	; 0x30
 8014c9a:	f107 0210 	add.w	r2, r7, #16
 8014c9e:	4611      	mov	r1, r2
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f7f6 fdf2 	bl	800b88a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8014ca6:	2401      	movs	r4, #1
 8014ca8:	f107 0310 	add.w	r3, r7, #16
 8014cac:	4618      	mov	r0, r3
 8014cae:	f7f7 f938 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014cb2:	2c01      	cmp	r4, #1
}
 8014cb4:	3724      	adds	r7, #36	; 0x24
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd90      	pop	{r4, r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	08023ab8 	.word	0x08023ab8

08014cc0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 8014cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014cc2:	b093      	sub	sp, #76	; 0x4c
 8014cc4:	af02      	add	r7, sp, #8
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	60b9      	str	r1, [r7, #8]
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014cce:	f107 0318 	add.w	r3, r7, #24
 8014cd2:	4953      	ldr	r1, [pc, #332]	; (8014e20 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7f6 fd6c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014cda:	f107 0010 	add.w	r0, r7, #16
 8014cde:	f107 0318 	add.w	r3, r7, #24
 8014ce2:	9301      	str	r3, [sp, #4]
 8014ce4:	683b      	ldr	r3, [r7, #0]
 8014ce6:	9300      	str	r3, [sp, #0]
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	68f9      	ldr	r1, [r7, #12]
 8014cee:	f7ff fbe1 	bl	80144b4 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8014cf2:	f107 0318 	add.w	r3, r7, #24
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f7f7 f913 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8014cfc:	f107 0310 	add.w	r3, r7, #16
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f7 f8ed 	bl	800bee0 <_ZNK12SimpleString4sizeEv>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	bf0c      	ite	eq
 8014d0c:	2301      	moveq	r3, #1
 8014d0e:	2300      	movne	r3, #0
 8014d10:	b2db      	uxtb	r3, r3
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d001      	beq.n	8014d1a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8014d16:	2400      	movs	r4, #0
 8014d18:	e078      	b.n	8014e0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8014d1a:	2500      	movs	r5, #0
 8014d1c:	f107 0320 	add.w	r3, r7, #32
 8014d20:	4940      	ldr	r1, [pc, #256]	; (8014e24 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7f6 fd45 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014d28:	2601      	movs	r6, #1
 8014d2a:	f107 0220 	add.w	r2, r7, #32
 8014d2e:	f107 0310 	add.w	r3, r7, #16
 8014d32:	4611      	mov	r1, r2
 8014d34:	4618      	mov	r0, r3
 8014d36:	f7f7 f900 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d111      	bne.n	8014d64 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 8014d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d44:	4938      	ldr	r1, [pc, #224]	; (8014e28 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7f6 fd33 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014d4c:	2501      	movs	r5, #1
 8014d4e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014d52:	f107 0310 	add.w	r3, r7, #16
 8014d56:	4611      	mov	r1, r2
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f7 f8ee 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8014d64:	2401      	movs	r4, #1
 8014d66:	e000      	b.n	8014d6a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8014d68:	2400      	movs	r4, #0
 8014d6a:	2d00      	cmp	r5, #0
 8014d6c:	d004      	beq.n	8014d78 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 8014d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d72:	4618      	mov	r0, r3
 8014d74:	f7f7 f8d5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014d78:	2e00      	cmp	r6, #0
 8014d7a:	d004      	beq.n	8014d86 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8014d7c:	f107 0320 	add.w	r3, r7, #32
 8014d80:	4618      	mov	r0, r3
 8014d82:	f7f7 f8ce 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014d86:	2c00      	cmp	r4, #0
 8014d88:	d005      	beq.n	8014d96 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014d92:	2401      	movs	r4, #1
 8014d94:	e03a      	b.n	8014e0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 8014d96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014d9a:	4924      	ldr	r1, [pc, #144]	; (8014e2c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7f6 fd08 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014da2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014da6:	f107 0310 	add.w	r3, r7, #16
 8014daa:	4611      	mov	r1, r2
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7f7 f8c4 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8014db2:	4603      	mov	r3, r0
 8014db4:	461c      	mov	r4, r3
 8014db6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f7f7 f8b1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014dc0:	2c00      	cmp	r4, #0
 8014dc2:	d005      	beq.n	8014dd0 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	2201      	movs	r2, #1
 8014dc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014dcc:	2401      	movs	r4, #1
 8014dce:	e01d      	b.n	8014e0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 8014dd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014dd4:	4916      	ldr	r1, [pc, #88]	; (8014e30 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f6 fceb 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8014ddc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8014de0:	f107 0310 	add.w	r3, r7, #16
 8014de4:	4611      	mov	r1, r2
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7f7 f8a7 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8014dec:	4603      	mov	r3, r0
 8014dee:	461c      	mov	r4, r3
 8014df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7f7 f894 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014dfa:	2c00      	cmp	r4, #0
 8014dfc:	d005      	beq.n	8014e0a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	2202      	movs	r2, #2
 8014e02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8014e06:	2401      	movs	r4, #1
 8014e08:	e000      	b.n	8014e0c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8014e0a:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8014e0c:	f107 0310 	add.w	r3, r7, #16
 8014e10:	4618      	mov	r0, r3
 8014e12:	f7f7 f886 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8014e16:	4623      	mov	r3, r4
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	3744      	adds	r7, #68	; 0x44
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e20:	08023ab4 	.word	0x08023ab4
 8014e24:	08024424 	.word	0x08024424
 8014e28:	0802442c 	.word	0x0802442c
 8014e2c:	08024434 	.word	0x08024434
 8014e30:	0802443c 	.word	0x0802443c

08014e34 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8014e34:	b480      	push	{r7}
 8014e36:	b083      	sub	sp, #12
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e42:	2b01      	cmp	r3, #1
 8014e44:	bf0c      	ite	eq
 8014e46:	2301      	moveq	r3, #1
 8014e48:	2300      	movne	r3, #0
 8014e4a:	b2db      	uxtb	r3, r3
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014e66:	2b02      	cmp	r3, #2
 8014e68:	bf0c      	ite	eq
 8014e6a:	2301      	moveq	r3, #1
 8014e6c:	2300      	movne	r3, #0
 8014e6e:	b2db      	uxtb	r3, r3
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	370c      	adds	r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8014e7c:	b480      	push	{r7}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
    return packageName_;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	3330      	adds	r3, #48	; 0x30
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	370c      	adds	r7, #12
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e92:	4770      	bx	lr

08014e94 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 8014e94:	b480      	push	{r7}
 8014e96:	b083      	sub	sp, #12
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	601a      	str	r2, [r3, #0]
    {}
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	370c      	adds	r7, #12
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eae:	4770      	bx	lr

08014eb0 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 8014eb0:	b480      	push	{r7}
 8014eb2:	b083      	sub	sp, #12
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	601a      	str	r2, [r3, #0]
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ec8:	3304      	adds	r3, #4
 8014eca:	f640 72ff 	movw	r2, #4095	; 0xfff
 8014ece:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	701a      	strb	r2, [r3, #0]
}
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	370c      	adds	r7, #12
 8014edc:	46bd      	mov	sp, r7
 8014ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee2:	4770      	bx	lr

08014ee4 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8014ee4:	b480      	push	{r7}
 8014ee6:	b083      	sub	sp, #12
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	701a      	strb	r2, [r3, #0]
}
 8014efc:	bf00      	nop
 8014efe:	370c      	adds	r7, #12
 8014f00:	46bd      	mov	sp, r7
 8014f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f06:	4770      	bx	lr

08014f08 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8014f08:	b40e      	push	{r1, r2, r3}
 8014f0a:	b590      	push	{r4, r7, lr}
 8014f0c:	b086      	sub	sp, #24
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f18:	3304      	adds	r3, #4
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	1ad3      	subs	r3, r2, r3
 8014f26:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8014f28:	697b      	ldr	r3, [r7, #20]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d032      	beq.n	8014f94 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 8014f2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014f32:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8014f34:	4b1b      	ldr	r3, [pc, #108]	; (8014fa4 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8014f36:	681c      	ldr	r4, [r3, #0]
 8014f38:	687a      	ldr	r2, [r7, #4]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	18d0      	adds	r0, r2, r3
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	1c59      	adds	r1, r3, #1
 8014f48:	68fb      	ldr	r3, [r7, #12]
 8014f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f4c:	47a0      	blx	r4
 8014f4e:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 8014f50:	693b      	ldr	r3, [r7, #16]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	dd09      	ble.n	8014f6a <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	441a      	add	r2, r3
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f68:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f70:	681a      	ldr	r2, [r3, #0]
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f78:	3304      	adds	r3, #4
 8014f7a:	681b      	ldr	r3, [r3, #0]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d90a      	bls.n	8014f96 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f86:	3304      	adds	r3, #4
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014f90:	601a      	str	r2, [r3, #0]
 8014f92:	e000      	b.n	8014f96 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 8014f94:	bf00      	nop
    va_end(arguments);
}
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8014f9e:	b003      	add	sp, #12
 8014fa0:	4770      	bx	lr
 8014fa2:	bf00      	nop
 8014fa4:	200000b4 	.word	0x200000b4

08014fa8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b08c      	sub	sp, #48	; 0x30
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	60f8      	str	r0, [r7, #12]
 8014fb0:	60b9      	str	r1, [r7, #8]
 8014fb2:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 8014fb8:	2310      	movs	r3, #16
 8014fba:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 8014fc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d273      	bcs.n	80150b0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 8014fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fca:	493b      	ldr	r1, [pc, #236]	; (80150b8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 8014fcc:	68f8      	ldr	r0, [r7, #12]
 8014fce:	f7ff ff9b 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 8014fd2:	687a      	ldr	r2, [r7, #4]
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	1ad3      	subs	r3, r2, r3
 8014fd8:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	2b10      	cmp	r3, #16
 8014fde:	d901      	bls.n	8014fe4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 8014fe0:	2310      	movs	r3, #16
 8014fe2:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8014fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe6:	f1c3 0310 	rsb	r3, r3, #16
 8014fea:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8014fec:	2300      	movs	r3, #0
 8014fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d215      	bcs.n	8015024 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8014ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ffc:	4413      	add	r3, r2
 8014ffe:	69fa      	ldr	r2, [r7, #28]
 8015000:	4413      	add	r3, r2
 8015002:	781b      	ldrb	r3, [r3, #0]
 8015004:	461a      	mov	r2, r3
 8015006:	492d      	ldr	r1, [pc, #180]	; (80150bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8015008:	68f8      	ldr	r0, [r7, #12]
 801500a:	f7ff ff7d 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 801500e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015010:	2b07      	cmp	r3, #7
 8015012:	d103      	bne.n	801501c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8015014:	492a      	ldr	r1, [pc, #168]	; (80150c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015016:	68f8      	ldr	r0, [r7, #12]
 8015018:	f7ff ff76 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 801501c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801501e:	3301      	adds	r3, #1
 8015020:	62bb      	str	r3, [r7, #40]	; 0x28
 8015022:	e7e5      	b.n	8014ff0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8015024:	2300      	movs	r3, #0
 8015026:	62bb      	str	r3, [r7, #40]	; 0x28
 8015028:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	429a      	cmp	r2, r3
 801502e:	d207      	bcs.n	8015040 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8015030:	4924      	ldr	r1, [pc, #144]	; (80150c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8015032:	68f8      	ldr	r0, [r7, #12]
 8015034:	f7ff ff68 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503a:	3301      	adds	r3, #1
 801503c:	62bb      	str	r3, [r7, #40]	; 0x28
 801503e:	e7f3      	b.n	8015028 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8015040:	697b      	ldr	r3, [r7, #20]
 8015042:	2b08      	cmp	r3, #8
 8015044:	d903      	bls.n	801504e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8015046:	491e      	ldr	r1, [pc, #120]	; (80150c0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8015048:	68f8      	ldr	r0, [r7, #12]
 801504a:	f7ff ff5d 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 801504e:	491e      	ldr	r1, [pc, #120]	; (80150c8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	f7ff ff59 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015056:	2300      	movs	r3, #0
 8015058:	62bb      	str	r3, [r7, #40]	; 0x28
 801505a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505e:	429a      	cmp	r2, r3
 8015060:	d21d      	bcs.n	801509e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8015062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015066:	4413      	add	r3, r2
 8015068:	69fa      	ldr	r2, [r7, #28]
 801506a:	4413      	add	r3, r2
 801506c:	781b      	ldrb	r3, [r3, #0]
 801506e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8015072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015076:	2b1f      	cmp	r3, #31
 8015078:	d903      	bls.n	8015082 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 801507a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801507e:	2b7e      	cmp	r3, #126	; 0x7e
 8015080:	d902      	bls.n	8015088 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8015082:	232e      	movs	r3, #46	; 0x2e
 8015084:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8015088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801508c:	461a      	mov	r2, r3
 801508e:	490f      	ldr	r1, [pc, #60]	; (80150cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8015090:	68f8      	ldr	r0, [r7, #12]
 8015092:	f7ff ff39 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8015096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015098:	3301      	adds	r3, #1
 801509a:	62bb      	str	r3, [r7, #40]	; 0x28
 801509c:	e7dd      	b.n	801505a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 801509e:	490c      	ldr	r1, [pc, #48]	; (80150d0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 80150a0:	68f8      	ldr	r0, [r7, #12]
 80150a2:	f7ff ff31 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 80150a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80150a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150aa:	4413      	add	r3, r2
 80150ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 80150ae:	e787      	b.n	8014fc0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 80150b0:	bf00      	nop
 80150b2:	3730      	adds	r7, #48	; 0x30
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	08024454 	.word	0x08024454
 80150bc:	08024460 	.word	0x08024460
 80150c0:	08024468 	.word	0x08024468
 80150c4:	0802446c 	.word	0x0802446c
 80150c8:	08024470 	.word	0x08024470
 80150cc:	08024474 	.word	0x08024474
 80150d0:	08024478 	.word	0x08024478

080150d4 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
    return buffer_;
 80150dc:	687b      	ldr	r3, [r7, #4]
}
 80150de:	4618      	mov	r0, r3
 80150e0:	370c      	adds	r7, #12
 80150e2:	46bd      	mov	sp, r7
 80150e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150e8:	4770      	bx	lr

080150ea <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 80150ea:	b480      	push	{r7}
 80150ec:	b083      	sub	sp, #12
 80150ee:	af00      	add	r7, sp, #0
 80150f0:	6078      	str	r0, [r7, #4]
 80150f2:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80150fa:	3304      	adds	r3, #4
 80150fc:	683a      	ldr	r2, [r7, #0]
 80150fe:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015106:	3304      	adds	r3, #4
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801510e:	d306      	bcc.n	801511e <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015116:	3304      	adds	r3, #4
 8015118:	f640 72ff 	movw	r2, #4095	; 0xfff
 801511c:	601a      	str	r2, [r3, #0]
}
 801511e:	bf00      	nop
 8015120:	370c      	adds	r7, #12
 8015122:	46bd      	mov	sp, r7
 8015124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015128:	4770      	bx	lr

0801512a <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 801512a:	b480      	push	{r7}
 801512c:	b083      	sub	sp, #12
 801512e:	af00      	add	r7, sp, #0
 8015130:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015138:	3304      	adds	r3, #4
 801513a:	f640 72ff 	movw	r2, #4095	; 0xfff
 801513e:	601a      	str	r2, [r3, #0]
}
 8015140:	bf00      	nop
 8015142:	370c      	adds	r7, #12
 8015144:	46bd      	mov	sp, r7
 8015146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514a:	4770      	bx	lr

0801514c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 801514c:	b480      	push	{r7}
 801514e:	b083      	sub	sp, #12
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801515a:	681a      	ldr	r2, [r3, #0]
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015162:	3304      	adds	r3, #4
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	429a      	cmp	r2, r3
 8015168:	bf2c      	ite	cs
 801516a:	2301      	movcs	r3, #1
 801516c:	2300      	movcc	r3, #0
 801516e:	b2db      	uxtb	r3, r3
}
 8015170:	4618      	mov	r0, r3
 8015172:	370c      	adds	r7, #12
 8015174:	46bd      	mov	sp, r7
 8015176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801517a:	4770      	bx	lr

0801517c <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 801517c:	b580      	push	{r7, lr}
 801517e:	b082      	sub	sp, #8
 8015180:	af00      	add	r7, sp, #0
 8015182:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	2200      	movs	r2, #0
 8015188:	601a      	str	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2200      	movs	r2, #0
 801518e:	711a      	strb	r2, [r3, #4]
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	3308      	adds	r3, #8
 8015194:	4618      	mov	r0, r3
 8015196:	f7ff fe8b 	bl	8014eb0 <_ZN18SimpleStringBufferC1Ev>
{
}
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	4618      	mov	r0, r3
 801519e:	3708      	adds	r7, #8
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}

080151a4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 80151a4:	b5b0      	push	{r4, r5, r7, lr}
 80151a6:	b086      	sub	sp, #24
 80151a8:	af02      	add	r7, sp, #8
 80151aa:	60f8      	str	r0, [r7, #12]
 80151ac:	60b9      	str	r1, [r7, #8]
 80151ae:	607a      	str	r2, [r7, #4]
 80151b0:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f103 0408 	add.w	r4, r3, #8
 80151b8:	687d      	ldr	r5, [r7, #4]
 80151ba:	6a3b      	ldr	r3, [r7, #32]
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	3314      	adds	r3, #20
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	6a38      	ldr	r0, [r7, #32]
 80151c4:	4798      	blx	r3
 80151c6:	4603      	mov	r3, r0
 80151c8:	9301      	str	r3, [sp, #4]
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	9300      	str	r3, [sp, #0]
 80151ce:	462b      	mov	r3, r5
 80151d0:	68ba      	ldr	r2, [r7, #8]
 80151d2:	4904      	ldr	r1, [pc, #16]	; (80151e4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 80151d4:	4620      	mov	r0, r4
 80151d6:	f7ff fe97 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80151da:	bf00      	nop
 80151dc:	3710      	adds	r7, #16
 80151de:	46bd      	mov	sp, r7
 80151e0:	bdb0      	pop	{r4, r5, r7, pc}
 80151e2:	bf00      	nop
 80151e4:	0802447c 	.word	0x0802447c

080151e8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 80151e8:	b5b0      	push	{r4, r5, r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	607a      	str	r2, [r7, #4]
 80151f4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	f103 0408 	add.w	r4, r3, #8
 80151fc:	687d      	ldr	r5, [r7, #4]
 80151fe:	683b      	ldr	r3, [r7, #0]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	3318      	adds	r3, #24
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	6838      	ldr	r0, [r7, #0]
 8015208:	4798      	blx	r3
 801520a:	4603      	mov	r3, r0
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	462b      	mov	r3, r5
 8015210:	68ba      	ldr	r2, [r7, #8]
 8015212:	4904      	ldr	r1, [pc, #16]	; (8015224 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8015214:	4620      	mov	r0, r4
 8015216:	f7ff fe77 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801521a:	bf00      	nop
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bdb0      	pop	{r4, r5, r7, pc}
 8015222:	bf00      	nop
 8015224:	080244b4 	.word	0x080244b4

08015228 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b082      	sub	sp, #8
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	3308      	adds	r3, #8
 8015234:	4903      	ldr	r1, [pc, #12]	; (8015244 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8015236:	4618      	mov	r0, r3
 8015238:	f7ff fe66 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 801523c:	bf00      	nop
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	080244e4 	.word	0x080244e4

08015248 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	2200      	movs	r2, #0
 8015254:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	2200      	movs	r2, #0
 801525a:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 801525c:	2367      	movs	r3, #103	; 0x67
 801525e:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	f203 1311 	addw	r3, r3, #273	; 0x111
 8015266:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f103 0208 	add.w	r2, r3, #8
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8015274:	4619      	mov	r1, r3
 8015276:	4610      	mov	r0, r2
 8015278:	f7ff ff37 	bl	80150ea <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 801527c:	bf00      	nop
 801527e:	3710      	adds	r7, #16
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8015284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015286:	b089      	sub	sp, #36	; 0x24
 8015288:	af04      	add	r7, sp, #16
 801528a:	60f8      	str	r0, [r7, #12]
 801528c:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b00      	cmp	r3, #0
 8015294:	d102      	bne.n	801529c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8015296:	68f8      	ldr	r0, [r7, #12]
 8015298:	f000 f882 	bl	80153a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	1c5a      	adds	r2, r3, #1
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	f103 0508 	add.w	r5, r3, #8
 80152ac:	68bb      	ldr	r3, [r7, #8]
 80152ae:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80152b0:	68bb      	ldr	r3, [r7, #8]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80152be:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80152c0:	68bb      	ldr	r3, [r7, #8]
 80152c2:	695a      	ldr	r2, [r3, #20]
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	695b      	ldr	r3, [r3, #20]
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	3314      	adds	r3, #20
 80152cc:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80152ce:	4610      	mov	r0, r2
 80152d0:	4798      	blx	r3
 80152d2:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 80152d8:	9303      	str	r3, [sp, #12]
 80152da:	9202      	str	r2, [sp, #8]
 80152dc:	683a      	ldr	r2, [r7, #0]
 80152de:	9201      	str	r2, [sp, #4]
 80152e0:	9400      	str	r4, [sp, #0]
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	4632      	mov	r2, r6
 80152e6:	4915      	ldr	r1, [pc, #84]	; (801533c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 80152e8:	4628      	mov	r0, r5
 80152ea:	f7ff fe0d 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	f103 0008 	add.w	r0, r3, #8
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	6899      	ldr	r1, [r3, #8]
 80152f8:	68bb      	ldr	r3, [r7, #8]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	461a      	mov	r2, r3
 80152fe:	f7ff fe53 	bl	8014fa8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	695a      	ldr	r2, [r3, #20]
 8015306:	68bb      	ldr	r3, [r7, #8]
 8015308:	695b      	ldr	r3, [r3, #20]
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	3314      	adds	r3, #20
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4610      	mov	r0, r2
 8015312:	4798      	blx	r3
 8015314:	4603      	mov	r3, r0
 8015316:	490a      	ldr	r1, [pc, #40]	; (8015340 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8015318:	4618      	mov	r0, r3
 801531a:	f7f6 f887 	bl	800b42c <_ZN12SimpleString6StrCmpEPKcS1_>
 801531e:	4603      	mov	r3, r0
 8015320:	2b00      	cmp	r3, #0
 8015322:	bf0c      	ite	eq
 8015324:	2301      	moveq	r3, #1
 8015326:	2300      	movne	r3, #0
 8015328:	b2db      	uxtb	r3, r3
 801532a:	2b00      	cmp	r3, #0
 801532c:	d002      	beq.n	8015334 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	2201      	movs	r2, #1
 8015332:	711a      	strb	r2, [r3, #4]
}
 8015334:	bf00      	nop
 8015336:	3714      	adds	r7, #20
 8015338:	46bd      	mov	sp, r7
 801533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801533c:	08024504 	.word	0x08024504
 8015340:	08024564 	.word	0x08024564

08015344 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d103      	bne.n	801535c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8015354:	6878      	ldr	r0, [r7, #4]
 8015356:	f7ff ff67 	bl	8015228 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 801535a:	e01e      	b.n	801539a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	3308      	adds	r3, #8
 8015360:	4618      	mov	r0, r3
 8015362:	f7ff fef3 	bl	801514c <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8015366:	4603      	mov	r3, r0
 8015368:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	3308      	adds	r3, #8
 801536e:	4618      	mov	r0, r3
 8015370:	f7ff fedb 	bl	801512a <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8015374:	7bfb      	ldrb	r3, [r7, #15]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d002      	beq.n	8015380 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f000 f820 	bl	80153c0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4619      	mov	r1, r3
 8015386:	6878      	ldr	r0, [r7, #4]
 8015388:	f000 f82a 	bl	80153e0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	791b      	ldrb	r3, [r3, #4]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 f839 	bl	801540c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 801539a:	3710      	adds	r7, #16
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	3308      	adds	r3, #8
 80153ac:	4903      	ldr	r1, [pc, #12]	; (80153bc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 80153ae:	4618      	mov	r0, r3
 80153b0:	f7ff fdaa 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80153b4:	bf00      	nop
 80153b6:	3708      	adds	r7, #8
 80153b8:	46bd      	mov	sp, r7
 80153ba:	bd80      	pop	{r7, pc}
 80153bc:	0802456c 	.word	0x0802456c

080153c0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b082      	sub	sp, #8
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	3308      	adds	r3, #8
 80153cc:	4903      	ldr	r1, [pc, #12]	; (80153dc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 80153ce:	4618      	mov	r0, r3
 80153d0:	f7ff fd9a 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80153d4:	bf00      	nop
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	08024584 	.word	0x08024584

080153e0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f103 0008 	add.w	r0, r3, #8
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	4a04      	ldr	r2, [pc, #16]	; (8015404 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 80153f4:	4904      	ldr	r1, [pc, #16]	; (8015408 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 80153f6:	f7ff fd87 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 80153fa:	bf00      	nop
 80153fc:	3708      	adds	r7, #8
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
 8015402:	bf00      	nop
 8015404:	080245cc 	.word	0x080245cc
 8015408:	080245e4 	.word	0x080245e4

0801540c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	3308      	adds	r3, #8
 8015418:	4903      	ldr	r1, [pc, #12]	; (8015428 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 801541a:	4618      	mov	r0, r3
 801541c:	f7ff fd74 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8015420:	bf00      	nop
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	080245ec 	.word	0x080245ec

0801542c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801542c:	b580      	push	{r7, lr}
 801542e:	b08a      	sub	sp, #40	; 0x28
 8015430:	af06      	add	r7, sp, #24
 8015432:	60f8      	str	r0, [r7, #12]
 8015434:	60b9      	str	r1, [r7, #8]
 8015436:	607a      	str	r2, [r7, #4]
 8015438:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 801543a:	f7f9 fe8d 	bl	800f158 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 801543e:	4602      	mov	r2, r0
 8015440:	69bb      	ldr	r3, [r7, #24]
 8015442:	9305      	str	r3, [sp, #20]
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	9304      	str	r3, [sp, #16]
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	9303      	str	r3, [sp, #12]
 801544c:	68bb      	ldr	r3, [r7, #8]
 801544e:	9302      	str	r3, [sp, #8]
 8015450:	9201      	str	r2, [sp, #4]
 8015452:	2300      	movs	r3, #0
 8015454:	9300      	str	r3, [sp, #0]
 8015456:	2300      	movs	r3, #0
 8015458:	4a04      	ldr	r2, [pc, #16]	; (801546c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 801545a:	4905      	ldr	r1, [pc, #20]	; (8015470 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f000 f855 	bl	801550c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8015462:	bf00      	nop
 8015464:	3710      	adds	r7, #16
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	08024448 	.word	0x08024448
 8015470:	08024700 	.word	0x08024700

08015474 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8015474:	b590      	push	{r4, r7, lr}
 8015476:	b08b      	sub	sp, #44	; 0x2c
 8015478:	af06      	add	r7, sp, #24
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	60b9      	str	r1, [r7, #8]
 801547e:	607a      	str	r2, [r7, #4]
 8015480:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8015482:	68bb      	ldr	r3, [r7, #8]
 8015484:	68d8      	ldr	r0, [r3, #12]
 8015486:	68bb      	ldr	r3, [r7, #8]
 8015488:	691c      	ldr	r4, [r3, #16]
 801548a:	68bb      	ldr	r3, [r7, #8]
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	68ba      	ldr	r2, [r7, #8]
 8015490:	6952      	ldr	r2, [r2, #20]
 8015492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015494:	9105      	str	r1, [sp, #20]
 8015496:	6a39      	ldr	r1, [r7, #32]
 8015498:	9104      	str	r1, [sp, #16]
 801549a:	6839      	ldr	r1, [r7, #0]
 801549c:	9103      	str	r1, [sp, #12]
 801549e:	6879      	ldr	r1, [r7, #4]
 80154a0:	9102      	str	r1, [sp, #8]
 80154a2:	9201      	str	r2, [sp, #4]
 80154a4:	9300      	str	r3, [sp, #0]
 80154a6:	4623      	mov	r3, r4
 80154a8:	4602      	mov	r2, r0
 80154aa:	4904      	ldr	r1, [pc, #16]	; (80154bc <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80154ac:	68f8      	ldr	r0, [r7, #12]
 80154ae:	f000 f82d 	bl	801550c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80154b2:	bf00      	nop
 80154b4:	3714      	adds	r7, #20
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd90      	pop	{r4, r7, pc}
 80154ba:	bf00      	nop
 80154bc:	08024724 	.word	0x08024724

080154c0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 80154c0:	b590      	push	{r4, r7, lr}
 80154c2:	b08b      	sub	sp, #44	; 0x2c
 80154c4:	af06      	add	r7, sp, #24
 80154c6:	60f8      	str	r0, [r7, #12]
 80154c8:	60b9      	str	r1, [r7, #8]
 80154ca:	607a      	str	r2, [r7, #4]
 80154cc:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 80154ce:	68bb      	ldr	r3, [r7, #8]
 80154d0:	68d8      	ldr	r0, [r3, #12]
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	691c      	ldr	r4, [r3, #16]
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	681b      	ldr	r3, [r3, #0]
 80154da:	68ba      	ldr	r2, [r7, #8]
 80154dc:	6952      	ldr	r2, [r2, #20]
 80154de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154e0:	9105      	str	r1, [sp, #20]
 80154e2:	6a39      	ldr	r1, [r7, #32]
 80154e4:	9104      	str	r1, [sp, #16]
 80154e6:	6839      	ldr	r1, [r7, #0]
 80154e8:	9103      	str	r1, [sp, #12]
 80154ea:	6879      	ldr	r1, [r7, #4]
 80154ec:	9102      	str	r1, [sp, #8]
 80154ee:	9201      	str	r2, [sp, #4]
 80154f0:	9300      	str	r3, [sp, #0]
 80154f2:	4623      	mov	r3, r4
 80154f4:	4602      	mov	r2, r0
 80154f6:	4904      	ldr	r1, [pc, #16]	; (8015508 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f000 f807 	bl	801550c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 80154fe:	bf00      	nop
 8015500:	3714      	adds	r7, #20
 8015502:	46bd      	mov	sp, r7
 8015504:	bd90      	pop	{r4, r7, pc}
 8015506:	bf00      	nop
 8015508:	0802474c 	.word	0x0802474c

0801550c <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 801550c:	b590      	push	{r4, r7, lr}
 801550e:	b087      	sub	sp, #28
 8015510:	af02      	add	r7, sp, #8
 8015512:	60f8      	str	r0, [r7, #12]
 8015514:	60b9      	str	r1, [r7, #8]
 8015516:	607a      	str	r2, [r7, #4]
 8015518:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	3308      	adds	r3, #8
 801551e:	68ba      	ldr	r2, [r7, #8]
 8015520:	4910      	ldr	r1, [pc, #64]	; (8015564 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8015522:	4618      	mov	r0, r3
 8015524:	f7ff fcf0 	bl	8014f08 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	9300      	str	r3, [sp, #0]
 801552c:	6a3b      	ldr	r3, [r7, #32]
 801552e:	683a      	ldr	r2, [r7, #0]
 8015530:	6879      	ldr	r1, [r7, #4]
 8015532:	68f8      	ldr	r0, [r7, #12]
 8015534:	f7ff fe36 	bl	80151a4 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8015538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801553c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f7ff fe52 	bl	80151e8 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8015544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	3308      	adds	r3, #8
 801554a:	681c      	ldr	r4, [r3, #0]
 801554c:	68f8      	ldr	r0, [r7, #12]
 801554e:	f000 f80b 	bl	8015568 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8015552:	4603      	mov	r3, r0
 8015554:	4619      	mov	r1, r3
 8015556:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015558:	47a0      	blx	r4
}
 801555a:	bf00      	nop
 801555c:	3714      	adds	r7, #20
 801555e:	46bd      	mov	sp, r7
 8015560:	bd90      	pop	{r4, r7, pc}
 8015562:	bf00      	nop
 8015564:	08024778 	.word	0x08024778

08015568 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8015568:	b580      	push	{r7, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8015570:	687b      	ldr	r3, [r7, #4]
 8015572:	3308      	adds	r3, #8
 8015574:	4618      	mov	r0, r3
 8015576:	f7ff fdad 	bl	80150d4 <_ZN18SimpleStringBuffer8toStringEv>
 801557a:	4603      	mov	r3, r0
}
 801557c:	4618      	mov	r0, r3
 801557e:	3708      	adds	r7, #8
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}

08015584 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b082      	sub	sp, #8
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	3308      	adds	r3, #8
 8015590:	4618      	mov	r0, r3
 8015592:	f7ff fca7 	bl	8014ee4 <_ZN18SimpleStringBuffer5clearEv>
}
 8015596:	bf00      	nop
 8015598:	3708      	adds	r7, #8
 801559a:	46bd      	mov	sp, r7
 801559c:	bd80      	pop	{r7, pc}

0801559e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 801559e:	b480      	push	{r7}
 80155a0:	b085      	sub	sp, #20
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	60f8      	str	r0, [r7, #12]
 80155a6:	60b9      	str	r1, [r7, #8]
 80155a8:	607a      	str	r2, [r7, #4]
 80155aa:	603b      	str	r3, [r7, #0]
    number_ = number;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	687a      	ldr	r2, [r7, #4]
 80155b0:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	68ba      	ldr	r2, [r7, #8]
 80155b6:	609a      	str	r2, [r3, #8]
    size_ = size;
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	683a      	ldr	r2, [r7, #0]
 80155bc:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	69ba      	ldr	r2, [r7, #24]
 80155c2:	615a      	str	r2, [r3, #20]
    period_ = period;
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	7f3a      	ldrb	r2, [r7, #28]
 80155c8:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80155d0:	765a      	strb	r2, [r3, #25]
    file_ = file;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155d6:	60da      	str	r2, [r3, #12]
    line_ = line;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80155dc:	611a      	str	r2, [r3, #16]
}
 80155de:	bf00      	nop
 80155e0:	3714      	adds	r7, #20
 80155e2:	46bd      	mov	sp, r7
 80155e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e8:	4770      	bx	lr

080155ea <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80155ea:	b480      	push	{r7}
 80155ec:	b085      	sub	sp, #20
 80155ee:	af00      	add	r7, sp, #0
 80155f0:	60f8      	str	r0, [r7, #12]
 80155f2:	60b9      	str	r1, [r7, #8]
 80155f4:	4613      	mov	r3, r2
 80155f6:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 80155f8:	79fb      	ldrb	r3, [r7, #7]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d00b      	beq.n	8015616 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	7e1b      	ldrb	r3, [r3, #24]
 8015602:	79fa      	ldrb	r2, [r7, #7]
 8015604:	429a      	cmp	r2, r3
 8015606:	d006      	beq.n	8015616 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8015608:	68bb      	ldr	r3, [r7, #8]
 801560a:	7e1b      	ldrb	r3, [r3, #24]
 801560c:	2b01      	cmp	r3, #1
 801560e:	d004      	beq.n	801561a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8015610:	79fb      	ldrb	r3, [r7, #7]
 8015612:	2b02      	cmp	r3, #2
 8015614:	d101      	bne.n	801561a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8015616:	2301      	movs	r3, #1
 8015618:	e000      	b.n	801561c <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3714      	adds	r7, #20
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr

08015628 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8015628:	b480      	push	{r7}
 801562a:	b083      	sub	sp, #12
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	61da      	str	r2, [r3, #28]
    head_ = node;
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	683a      	ldr	r2, [r7, #0]
 801563e:	601a      	str	r2, [r3, #0]
}
 8015640:	bf00      	nop
 8015642:	370c      	adds	r7, #12
 8015644:	46bd      	mov	sp, r7
 8015646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564a:	4770      	bx	lr

0801564c <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 801564c:	b480      	push	{r7}
 801564e:	b085      	sub	sp, #20
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 801565c:	2300      	movs	r3, #0
 801565e:	60bb      	str	r3, [r7, #8]
    while (cur) {
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d019      	beq.n	801569a <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	689b      	ldr	r3, [r3, #8]
 801566a:	683a      	ldr	r2, [r7, #0]
 801566c:	429a      	cmp	r2, r3
 801566e:	d10e      	bne.n	801568e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	2b00      	cmp	r3, #0
 8015674:	d005      	beq.n	8015682 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	69da      	ldr	r2, [r3, #28]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	61da      	str	r2, [r3, #28]
                return cur;
 801567e:	68fb      	ldr	r3, [r7, #12]
 8015680:	e00c      	b.n	801569c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	69da      	ldr	r2, [r3, #28]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	601a      	str	r2, [r3, #0]
                return cur;
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	e006      	b.n	801569c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	69db      	ldr	r3, [r3, #28]
 8015696:	60fb      	str	r3, [r7, #12]
    while (cur) {
 8015698:	e7e2      	b.n	8015660 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 801569a:	2300      	movs	r3, #0
}
 801569c:	4618      	mov	r0, r3
 801569e:	3714      	adds	r7, #20
 80156a0:	46bd      	mov	sp, r7
 80156a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a6:	4770      	bx	lr

080156a8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b085      	sub	sp, #20
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d00a      	beq.n	80156d4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	689b      	ldr	r3, [r3, #8]
 80156c2:	683a      	ldr	r2, [r7, #0]
 80156c4:	429a      	cmp	r2, r3
 80156c6:	d101      	bne.n	80156cc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80156c8:	68fb      	ldr	r3, [r7, #12]
 80156ca:	e004      	b.n	80156d6 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	69db      	ldr	r3, [r3, #28]
 80156d0:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80156d2:	e7f1      	b.n	80156b8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3714      	adds	r7, #20
 80156da:	46bd      	mov	sp, r7
 80156dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e0:	4770      	bx	lr

080156e2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b086      	sub	sp, #24
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	60f8      	str	r0, [r7, #12]
 80156ea:	60b9      	str	r1, [r7, #8]
 80156ec:	4613      	mov	r3, r2
 80156ee:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	617b      	str	r3, [r7, #20]
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d00e      	beq.n	8015718 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 80156fa:	79fb      	ldrb	r3, [r7, #7]
 80156fc:	461a      	mov	r2, r3
 80156fe:	6979      	ldr	r1, [r7, #20]
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f7ff ff72 	bl	80155ea <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015706:	4603      	mov	r3, r0
 8015708:	2b00      	cmp	r3, #0
 801570a:	d001      	beq.n	8015710 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	e004      	b.n	801571a <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	69db      	ldr	r3, [r3, #28]
 8015714:	617b      	str	r3, [r7, #20]
 8015716:	e7ed      	b.n	80156f4 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8015718:	2300      	movs	r3, #0
}
 801571a:	4618      	mov	r0, r3
 801571c:	3718      	adds	r7, #24
 801571e:	46bd      	mov	sp, r7
 8015720:	bd80      	pop	{r7, pc}

08015722 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8015722:	b580      	push	{r7, lr}
 8015724:	b082      	sub	sp, #8
 8015726:	af00      	add	r7, sp, #0
 8015728:	6078      	str	r0, [r7, #4]
 801572a:	460b      	mov	r3, r1
 801572c:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	78fa      	ldrb	r2, [r7, #3]
 8015734:	4619      	mov	r1, r3
 8015736:	6878      	ldr	r0, [r7, #4]
 8015738:	f7ff ffd3 	bl	80156e2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801573c:	4603      	mov	r3, r0
}
 801573e:	4618      	mov	r0, r3
 8015740:	3708      	adds	r7, #8
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}

08015746 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8015746:	b580      	push	{r7, lr}
 8015748:	b084      	sub	sp, #16
 801574a:	af00      	add	r7, sp, #0
 801574c:	60f8      	str	r0, [r7, #12]
 801574e:	60b9      	str	r1, [r7, #8]
 8015750:	4613      	mov	r3, r2
 8015752:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8015754:	68bb      	ldr	r3, [r7, #8]
 8015756:	69db      	ldr	r3, [r3, #28]
 8015758:	79fa      	ldrb	r2, [r7, #7]
 801575a:	4619      	mov	r1, r3
 801575c:	68f8      	ldr	r0, [r7, #12]
 801575e:	f7ff ffc0 	bl	80156e2 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015762:	4603      	mov	r3, r0
}
 8015764:	4618      	mov	r0, r3
 8015766:	3710      	adds	r7, #16
 8015768:	46bd      	mov	sp, r7
 801576a:	bd80      	pop	{r7, pc}

0801576c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b084      	sub	sp, #16
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	460b      	mov	r3, r1
 8015776:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8015778:	2300      	movs	r3, #0
 801577a:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	60bb      	str	r3, [r7, #8]
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d00f      	beq.n	80157a8 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 8015788:	78fb      	ldrb	r3, [r7, #3]
 801578a:	461a      	mov	r2, r3
 801578c:	68b9      	ldr	r1, [r7, #8]
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f7ff ff2b 	bl	80155ea <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8015794:	4603      	mov	r3, r0
 8015796:	2b00      	cmp	r3, #0
 8015798:	d002      	beq.n	80157a0 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	3301      	adds	r3, #1
 801579e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	69db      	ldr	r3, [r3, #28]
 80157a4:	60bb      	str	r3, [r7, #8]
 80157a6:	e7ec      	b.n	8015782 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80157a8:	68fb      	ldr	r3, [r7, #12]
}
 80157aa:	4618      	mov	r0, r3
 80157ac:	3710      	adds	r7, #16
 80157ae:	46bd      	mov	sp, r7
 80157b0:	bd80      	pop	{r7, pc}
	...

080157b4 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80157b4:	b480      	push	{r7}
 80157b6:	b083      	sub	sp, #12
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80157be:	6839      	ldr	r1, [r7, #0]
 80157c0:	4b09      	ldr	r3, [pc, #36]	; (80157e8 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80157c2:	fba3 2301 	umull	r2, r3, r3, r1
 80157c6:	1aca      	subs	r2, r1, r3
 80157c8:	0852      	lsrs	r2, r2, #1
 80157ca:	4413      	add	r3, r2
 80157cc:	099a      	lsrs	r2, r3, #6
 80157ce:	4613      	mov	r3, r2
 80157d0:	00db      	lsls	r3, r3, #3
 80157d2:	4413      	add	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	4413      	add	r3, r2
 80157d8:	1aca      	subs	r2, r1, r3
 80157da:	4613      	mov	r3, r2
}
 80157dc:	4618      	mov	r0, r3
 80157de:	370c      	adds	r7, #12
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr
 80157e8:	c0e07039 	.word	0xc0e07039

080157ec <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b082      	sub	sp, #8
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	4619      	mov	r1, r3
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f7ff ffd9 	bl	80157b4 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015802:	4603      	mov	r3, r0
 8015804:	009b      	lsls	r3, r3, #2
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	4413      	add	r3, r2
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	4618      	mov	r0, r3
 801580e:	f7ff ff0b 	bl	8015628 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015812:	bf00      	nop
 8015814:	3708      	adds	r7, #8
 8015816:	46bd      	mov	sp, r7
 8015818:	bd80      	pop	{r7, pc}

0801581a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801581a:	b580      	push	{r7, lr}
 801581c:	b082      	sub	sp, #8
 801581e:	af00      	add	r7, sp, #0
 8015820:	6078      	str	r0, [r7, #4]
 8015822:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f7ff ffc4 	bl	80157b4 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801582c:	4603      	mov	r3, r0
 801582e:	009b      	lsls	r3, r3, #2
 8015830:	687a      	ldr	r2, [r7, #4]
 8015832:	4413      	add	r3, r2
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	4618      	mov	r0, r3
 8015838:	f7ff ff08 	bl	801564c <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 801583c:	4603      	mov	r3, r0
}
 801583e:	4618      	mov	r0, r3
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b082      	sub	sp, #8
 801584a:	af00      	add	r7, sp, #0
 801584c:	6078      	str	r0, [r7, #4]
 801584e:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8015850:	6839      	ldr	r1, [r7, #0]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f7ff ffae 	bl	80157b4 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015858:	4603      	mov	r3, r0
 801585a:	009b      	lsls	r3, r3, #2
 801585c:	687a      	ldr	r2, [r7, #4]
 801585e:	4413      	add	r3, r2
 8015860:	6839      	ldr	r1, [r7, #0]
 8015862:	4618      	mov	r0, r3
 8015864:	f7ff ff20 	bl	80156a8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8015868:	4603      	mov	r3, r0
}
 801586a:	4618      	mov	r0, r3
 801586c:	3708      	adds	r7, #8
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}

08015872 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8015872:	b580      	push	{r7, lr}
 8015874:	b084      	sub	sp, #16
 8015876:	af00      	add	r7, sp, #0
 8015878:	6078      	str	r0, [r7, #4]
 801587a:	460b      	mov	r3, r1
 801587c:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801587e:	2300      	movs	r3, #0
 8015880:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8015882:	2300      	movs	r3, #0
 8015884:	60bb      	str	r3, [r7, #8]
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	2b48      	cmp	r3, #72	; 0x48
 801588a:	dc10      	bgt.n	80158ae <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	009b      	lsls	r3, r3, #2
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	4413      	add	r3, r2
 8015894:	78fa      	ldrb	r2, [r7, #3]
 8015896:	4611      	mov	r1, r2
 8015898:	4618      	mov	r0, r3
 801589a:	f7ff ff67 	bl	801576c <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 801589e:	4602      	mov	r2, r0
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	4413      	add	r3, r2
 80158a4:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	3301      	adds	r3, #1
 80158aa:	60bb      	str	r3, [r7, #8]
 80158ac:	e7eb      	b.n	8015886 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80158ae:	68fb      	ldr	r3, [r7, #12]
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	3710      	adds	r7, #16
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bd80      	pop	{r7, pc}

080158b8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b084      	sub	sp, #16
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
 80158c0:	460b      	mov	r3, r1
 80158c2:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80158c4:	2300      	movs	r3, #0
 80158c6:	60fb      	str	r3, [r7, #12]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2b48      	cmp	r3, #72	; 0x48
 80158cc:	dc12      	bgt.n	80158f4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	009b      	lsls	r3, r3, #2
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	4413      	add	r3, r2
 80158d6:	78fa      	ldrb	r2, [r7, #3]
 80158d8:	4611      	mov	r1, r2
 80158da:	4618      	mov	r0, r3
 80158dc:	f7ff ff21 	bl	8015722 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80158e0:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d001      	beq.n	80158ec <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	e004      	b.n	80158f6 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	3301      	adds	r3, #1
 80158f0:	60fb      	str	r3, [r7, #12]
 80158f2:	e7e9      	b.n	80158c8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 80158f4:	2300      	movs	r3, #0
}
 80158f6:	4618      	mov	r0, r3
 80158f8:	3710      	adds	r7, #16
 80158fa:	46bd      	mov	sp, r7
 80158fc:	bd80      	pop	{r7, pc}

080158fe <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 80158fe:	b580      	push	{r7, lr}
 8015900:	b086      	sub	sp, #24
 8015902:	af00      	add	r7, sp, #0
 8015904:	60f8      	str	r0, [r7, #12]
 8015906:	60b9      	str	r1, [r7, #8]
 8015908:	4613      	mov	r3, r2
 801590a:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 801590c:	68bb      	ldr	r3, [r7, #8]
 801590e:	689b      	ldr	r3, [r3, #8]
 8015910:	4619      	mov	r1, r3
 8015912:	68f8      	ldr	r0, [r7, #12]
 8015914:	f7ff ff4e 	bl	80157b4 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8015918:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 801591a:	697b      	ldr	r3, [r7, #20]
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	68fa      	ldr	r2, [r7, #12]
 8015920:	4413      	add	r3, r2
 8015922:	79fa      	ldrb	r2, [r7, #7]
 8015924:	68b9      	ldr	r1, [r7, #8]
 8015926:	4618      	mov	r0, r3
 8015928:	f7ff ff0d 	bl	8015746 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801592c:	6138      	str	r0, [r7, #16]
    if (node) return node;
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d001      	beq.n	8015938 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	e019      	b.n	801596c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	3301      	adds	r3, #1
 801593c:	617b      	str	r3, [r7, #20]
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	2b48      	cmp	r3, #72	; 0x48
 8015942:	d812      	bhi.n	801596a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	009b      	lsls	r3, r3, #2
 8015948:	68fa      	ldr	r2, [r7, #12]
 801594a:	4413      	add	r3, r2
 801594c:	79fa      	ldrb	r2, [r7, #7]
 801594e:	4611      	mov	r1, r2
 8015950:	4618      	mov	r0, r3
 8015952:	f7ff fee6 	bl	8015722 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8015956:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	2b00      	cmp	r3, #0
 801595c:	d001      	beq.n	8015962 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	e004      	b.n	801596c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	3301      	adds	r3, #1
 8015966:	617b      	str	r3, [r7, #20]
 8015968:	e7e9      	b.n	801593e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801596a:	2300      	movs	r3, #0
}
 801596c:	4618      	mov	r0, r3
 801596e:	3718      	adds	r7, #24
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8015974:	b5b0      	push	{r4, r5, r7, lr}
 8015976:	b082      	sub	sp, #8
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	2448      	movs	r4, #72	; 0x48
 8015980:	461d      	mov	r5, r3
 8015982:	2c00      	cmp	r4, #0
 8015984:	db05      	blt.n	8015992 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 8015986:	4628      	mov	r0, r5
 8015988:	f7ff fa84 	bl	8014e94 <_ZN22MemoryLeakDetectorListC1Ev>
 801598c:	3504      	adds	r5, #4
 801598e:	3c01      	subs	r4, #1
 8015990:	e7f7      	b.n	8015982 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	4618      	mov	r0, r3
 8015996:	3708      	adds	r7, #8
 8015998:	46bd      	mov	sp, r7
 801599a:	bdb0      	pop	{r4, r5, r7, pc}

0801599c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 801599c:	b590      	push	{r4, r7, lr}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
 80159a6:	4a1d      	ldr	r2, [pc, #116]	; (8015a1c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	601a      	str	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	330c      	adds	r3, #12
 80159b0:	4618      	mov	r0, r3
 80159b2:	f7ff fbe3 	bl	801517c <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80159bc:	331c      	adds	r3, #28
 80159be:	4618      	mov	r0, r3
 80159c0:	f7ff ffd8 	bl	8015974 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80159ca:	2201      	movs	r2, #1
 80159cc:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80159d4:	3304      	adds	r3, #4
 80159d6:	2201      	movs	r2, #1
 80159d8:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2201      	movs	r2, #1
 80159de:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80159e6:	3308      	adds	r3, #8
 80159e8:	2200      	movs	r2, #0
 80159ea:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 80159f2:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80159f6:	490a      	ldr	r1, [pc, #40]	; (8015a20 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 80159f8:	2004      	movs	r0, #4
 80159fa:	f7f3 fb17 	bl	800902c <_ZnwjPKci>
 80159fe:	4604      	mov	r4, r0
 8015a00:	4620      	mov	r0, r4
 8015a02:	f7f5 fbe7 	bl	800b1d4 <_ZN11SimpleMutexC1Ev>
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015a0c:	330c      	adds	r3, #12
 8015a0e:	601c      	str	r4, [r3, #0]
}
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	4618      	mov	r0, r3
 8015a14:	370c      	adds	r7, #12
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd90      	pop	{r4, r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	08026d4c 	.word	0x08026d4c
 8015a20:	0802477c 	.word	0x0802477c

08015a24 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8015a24:	b590      	push	{r4, r7, lr}
 8015a26:	b083      	sub	sp, #12
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	4a0e      	ldr	r2, [pc, #56]	; (8015a68 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015a38:	330c      	adds	r3, #12
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d00d      	beq.n	8015a5c <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015a46:	330c      	adds	r3, #12
 8015a48:	681c      	ldr	r4, [r3, #0]
 8015a4a:	2c00      	cmp	r4, #0
 8015a4c:	d006      	beq.n	8015a5c <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8015a4e:	4620      	mov	r0, r4
 8015a50:	f7f5 fbd2 	bl	800b1f8 <_ZN11SimpleMutexD1Ev>
 8015a54:	2104      	movs	r1, #4
 8015a56:	4620      	mov	r0, r4
 8015a58:	f7f3 fafc 	bl	8009054 <_ZdlPvj>
    }
}
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	4618      	mov	r0, r3
 8015a60:	370c      	adds	r7, #12
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd90      	pop	{r4, r7, pc}
 8015a66:	bf00      	nop
 8015a68:	08026d4c 	.word	0x08026d4c

08015a6c <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b082      	sub	sp, #8
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
}
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f7ff ffd5 	bl	8015a24 <_ZN18MemoryLeakDetectorD1Ev>
 8015a7a:	f241 1150 	movw	r1, #4432	; 0x1150
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f7f3 fae8 	bl	8009054 <_ZdlPvj>
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	4618      	mov	r0, r3
 8015a88:	3708      	adds	r7, #8
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	bd80      	pop	{r7, pc}

08015a8e <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 8015a8e:	b580      	push	{r7, lr}
 8015a90:	b082      	sub	sp, #8
 8015a92:	af00      	add	r7, sp, #0
 8015a94:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	330c      	adds	r3, #12
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7ff fd72 	bl	8015584 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2203      	movs	r2, #3
 8015aa4:	721a      	strb	r2, [r3, #8]
}
 8015aa6:	bf00      	nop
 8015aa8:	3708      	adds	r7, #8
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}

08015aae <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 8015aae:	b480      	push	{r7}
 8015ab0:	b083      	sub	sp, #12
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2202      	movs	r2, #2
 8015aba:	721a      	strb	r2, [r3, #8]
}
 8015abc:	bf00      	nop
 8015abe:	370c      	adds	r7, #12
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac6:	4770      	bx	lr

08015ac8 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 8015ac8:	b480      	push	{r7}
 8015aca:	b083      	sub	sp, #12
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2202      	movs	r2, #2
 8015ad4:	721a      	strb	r2, [r3, #8]
}
 8015ad6:	bf00      	nop
 8015ad8:	370c      	adds	r7, #12
 8015ada:	46bd      	mov	sp, r7
 8015adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae0:	4770      	bx	lr

08015ae2 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 8015ae2:	b480      	push	{r7}
 8015ae4:	b083      	sub	sp, #12
 8015ae6:	af00      	add	r7, sp, #0
 8015ae8:	6078      	str	r0, [r7, #4]
    return mutex_;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015af0:	330c      	adds	r3, #12
 8015af2:	681b      	ldr	r3, [r3, #0]
}
 8015af4:	4618      	mov	r0, r3
 8015af6:	370c      	adds	r7, #12
 8015af8:	46bd      	mov	sp, r7
 8015afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015afe:	4770      	bx	lr

08015b00 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b083      	sub	sp, #12
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f023 0303 	bic.w	r3, r3, #3
 8015b0e:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	370c      	adds	r7, #12
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
 8015b24:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	3303      	adds	r3, #3
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7ff ffe8 	bl	8015b00 <_ZL31calculateVoidPointerAlignedSizej>
 8015b30:	4603      	mov	r3, r0
}
 8015b32:	4618      	mov	r0, r3
 8015b34:	3708      	adds	r7, #8
 8015b36:	46bd      	mov	sp, r7
 8015b38:	bd80      	pop	{r7, pc}

08015b3a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8015b3a:	b580      	push	{r7, lr}
 8015b3c:	b084      	sub	sp, #16
 8015b3e:	af00      	add	r7, sp, #0
 8015b40:	60f8      	str	r0, [r7, #12]
 8015b42:	60b9      	str	r1, [r7, #8]
 8015b44:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8015b46:	6879      	ldr	r1, [r7, #4]
 8015b48:	68f8      	ldr	r0, [r7, #12]
 8015b4a:	f7ff ffe7 	bl	8015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015b4e:	4602      	mov	r2, r0
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	4413      	add	r3, r2
}
 8015b54:	4618      	mov	r0, r3
 8015b56:	3710      	adds	r7, #16
 8015b58:	46bd      	mov	sp, r7
 8015b5a:	bd80      	pop	{r7, pc}

08015b5c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8015b5c:	b580      	push	{r7, lr}
 8015b5e:	b08a      	sub	sp, #40	; 0x28
 8015b60:	af06      	add	r7, sp, #24
 8015b62:	60f8      	str	r0, [r7, #12]
 8015b64:	60b9      	str	r1, [r7, #8]
 8015b66:	607a      	str	r2, [r7, #4]
 8015b68:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015b70:	3304      	adds	r3, #4
 8015b72:	681a      	ldr	r2, [r3, #0]
 8015b74:	1c51      	adds	r1, r2, #1
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	6019      	str	r1, [r3, #0]
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	7a19      	ldrb	r1, [r3, #8]
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015b8a:	3308      	adds	r3, #8
 8015b8c:	781b      	ldrb	r3, [r3, #0]
 8015b8e:	6a38      	ldr	r0, [r7, #32]
 8015b90:	9004      	str	r0, [sp, #16]
 8015b92:	69f8      	ldr	r0, [r7, #28]
 8015b94:	9003      	str	r0, [sp, #12]
 8015b96:	9302      	str	r3, [sp, #8]
 8015b98:	9101      	str	r1, [sp, #4]
 8015b9a:	69bb      	ldr	r3, [r7, #24]
 8015b9c:	9300      	str	r3, [sp, #0]
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	6879      	ldr	r1, [r7, #4]
 8015ba2:	68b8      	ldr	r0, [r7, #8]
 8015ba4:	f7ff fcfb 	bl	801559e <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	689a      	ldr	r2, [r3, #8]
 8015bac:	68bb      	ldr	r3, [r7, #8]
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	4619      	mov	r1, r3
 8015bb4:	68f8      	ldr	r0, [r7, #12]
 8015bb6:	f000 f861 	bl	8015c7c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015bc0:	331c      	adds	r3, #28
 8015bc2:	68b9      	ldr	r1, [r7, #8]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff fe11 	bl	80157ec <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 8015bca:	bf00      	nop
 8015bcc:	3710      	adds	r7, #16
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}

08015bd2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015bd2:	b580      	push	{r7, lr}
 8015bd4:	b08a      	sub	sp, #40	; 0x28
 8015bd6:	af04      	add	r7, sp, #16
 8015bd8:	60f8      	str	r0, [r7, #12]
 8015bda:	60b9      	str	r1, [r7, #8]
 8015bdc:	607a      	str	r2, [r7, #4]
 8015bde:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8015be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015be4:	9302      	str	r3, [sp, #8]
 8015be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be8:	9301      	str	r3, [sp, #4]
 8015bea:	6a3b      	ldr	r3, [r7, #32]
 8015bec:	9300      	str	r3, [sp, #0]
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	687a      	ldr	r2, [r7, #4]
 8015bf2:	68b9      	ldr	r1, [r7, #8]
 8015bf4:	68f8      	ldr	r0, [r7, #12]
 8015bf6:	f000 f96f 	bl	8015ed8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8015bfa:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d101      	bne.n	8015c06 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8015c02:	2300      	movs	r3, #0
 8015c04:	e017      	b.n	8015c36 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8015c06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c0a:	9300      	str	r3, [sp, #0]
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	68b9      	ldr	r1, [r7, #8]
 8015c12:	68f8      	ldr	r0, [r7, #12]
 8015c14:	f000 f98a 	bl	8015f2c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015c18:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8015c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1c:	9302      	str	r3, [sp, #8]
 8015c1e:	6a3b      	ldr	r3, [r7, #32]
 8015c20:	9301      	str	r3, [sp, #4]
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	9300      	str	r3, [sp, #0]
 8015c26:	683b      	ldr	r3, [r7, #0]
 8015c28:	697a      	ldr	r2, [r7, #20]
 8015c2a:	6939      	ldr	r1, [r7, #16]
 8015c2c:	68f8      	ldr	r0, [r7, #12]
 8015c2e:	f7ff ff95 	bl	8015b5c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	689b      	ldr	r3, [r3, #8]
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
	...

08015c40 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b084      	sub	sp, #16
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	6078      	str	r0, [r7, #4]
 8015c48:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015c50:	331c      	adds	r3, #28
 8015c52:	6839      	ldr	r1, [r7, #0]
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7ff fdf6 	bl	8015846 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8015c5a:	60f8      	str	r0, [r7, #12]
  if (node)
 8015c5c:	68fb      	ldr	r3, [r7, #12]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8015c62:	4b05      	ldr	r3, [pc, #20]	; (8015c78 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8015c64:	681b      	ldr	r3, [r3, #0]
 8015c66:	68fa      	ldr	r2, [r7, #12]
 8015c68:	6812      	ldr	r2, [r2, #0]
 8015c6a:	21cd      	movs	r1, #205	; 0xcd
 8015c6c:	6838      	ldr	r0, [r7, #0]
 8015c6e:	4798      	blx	r3
#endif
}
 8015c70:	bf00      	nop
 8015c72:	3710      	adds	r7, #16
 8015c74:	46bd      	mov	sp, r7
 8015c76:	bd80      	pop	{r7, pc}
 8015c78:	200000dc 	.word	0x200000dc

08015c7c <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b085      	sub	sp, #20
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015c86:	2300      	movs	r3, #0
 8015c88:	60fb      	str	r3, [r7, #12]
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	2b02      	cmp	r3, #2
 8015c8e:	d812      	bhi.n	8015cb6 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 8015c90:	68f9      	ldr	r1, [r7, #12]
 8015c92:	4b0c      	ldr	r3, [pc, #48]	; (8015cc4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 8015c94:	fba3 2301 	umull	r2, r3, r3, r1
 8015c98:	085a      	lsrs	r2, r3, #1
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	005b      	lsls	r3, r3, #1
 8015c9e:	4413      	add	r3, r2
 8015ca0:	1aca      	subs	r2, r1, r3
 8015ca2:	6839      	ldr	r1, [r7, #0]
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	440b      	add	r3, r1
 8015ca8:	4907      	ldr	r1, [pc, #28]	; (8015cc8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 8015caa:	5c8a      	ldrb	r2, [r1, r2]
 8015cac:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	3301      	adds	r3, #1
 8015cb2:	60fb      	str	r3, [r7, #12]
 8015cb4:	e7e9      	b.n	8015c8a <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 8015cb6:	bf00      	nop
 8015cb8:	3714      	adds	r7, #20
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cc0:	4770      	bx	lr
 8015cc2:	bf00      	nop
 8015cc4:	aaaaaaab 	.word	0xaaaaaaab
 8015cc8:	08026d40 	.word	0x08026d40

08015ccc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b085      	sub	sp, #20
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
 8015cd4:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	60fb      	str	r3, [r7, #12]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	2b02      	cmp	r3, #2
 8015cde:	d816      	bhi.n	8015d0e <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 8015ce0:	683a      	ldr	r2, [r7, #0]
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	4413      	add	r3, r2
 8015ce6:	7818      	ldrb	r0, [r3, #0]
 8015ce8:	68f9      	ldr	r1, [r7, #12]
 8015cea:	4b0c      	ldr	r3, [pc, #48]	; (8015d1c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8015cec:	fba3 2301 	umull	r2, r3, r3, r1
 8015cf0:	085a      	lsrs	r2, r3, #1
 8015cf2:	4613      	mov	r3, r2
 8015cf4:	005b      	lsls	r3, r3, #1
 8015cf6:	4413      	add	r3, r2
 8015cf8:	1aca      	subs	r2, r1, r3
 8015cfa:	4b09      	ldr	r3, [pc, #36]	; (8015d20 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8015cfc:	5c9b      	ldrb	r3, [r3, r2]
 8015cfe:	4298      	cmp	r0, r3
 8015d00:	d001      	beq.n	8015d06 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8015d02:	2300      	movs	r3, #0
 8015d04:	e004      	b.n	8015d10 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	3301      	adds	r3, #1
 8015d0a:	60fb      	str	r3, [r7, #12]
 8015d0c:	e7e5      	b.n	8015cda <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8015d0e:	2301      	movs	r3, #1
}
 8015d10:	4618      	mov	r0, r3
 8015d12:	3714      	adds	r7, #20
 8015d14:	46bd      	mov	sp, r7
 8015d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1a:	4770      	bx	lr
 8015d1c:	aaaaaaab 	.word	0xaaaaaaab
 8015d20:	08026d40 	.word	0x08026d40

08015d24 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8015d30:	68ba      	ldr	r2, [r7, #8]
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d101      	bne.n	8015d3c <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	e013      	b.n	8015d64 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	f083 0301 	eor.w	r3, r3, #1
 8015d48:	b2db      	uxtb	r3, r3
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d001      	beq.n	8015d52 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8015d4e:	2301      	movs	r3, #1
 8015d50:	e008      	b.n	8015d64 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	681b      	ldr	r3, [r3, #0]
 8015d56:	331c      	adds	r3, #28
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	68b9      	ldr	r1, [r7, #8]
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	4798      	blx	r3
 8015d60:	4603      	mov	r3, r0
 8015d62:	bf00      	nop
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3710      	adds	r7, #16
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8015d6c:	b590      	push	{r4, r7, lr}
 8015d6e:	b087      	sub	sp, #28
 8015d70:	af02      	add	r7, sp, #8
 8015d72:	60f8      	str	r0, [r7, #12]
 8015d74:	60b9      	str	r1, [r7, #8]
 8015d76:	607a      	str	r2, [r7, #4]
 8015d78:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	695a      	ldr	r2, [r3, #20]
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	695b      	ldr	r3, [r3, #20]
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	3328      	adds	r3, #40	; 0x28
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	4610      	mov	r0, r2
 8015d8a:	4798      	blx	r3
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	6a3b      	ldr	r3, [r7, #32]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	3328      	adds	r3, #40	; 0x28
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	6a38      	ldr	r0, [r7, #32]
 8015d98:	4798      	blx	r3
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	4621      	mov	r1, r4
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	f7ff ffbf 	bl	8015d24 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 8015da6:	4603      	mov	r3, r0
 8015da8:	f083 0301 	eor.w	r3, r3, #1
 8015dac:	b2db      	uxtb	r3, r3
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d014      	beq.n	8015ddc <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	f103 040c 	add.w	r4, r3, #12
 8015db8:	6a3b      	ldr	r3, [r7, #32]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	3328      	adds	r3, #40	; 0x28
 8015dbe:	681b      	ldr	r3, [r3, #0]
 8015dc0:	6a38      	ldr	r0, [r7, #32]
 8015dc2:	4798      	blx	r3
 8015dc4:	4602      	mov	r2, r0
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	9301      	str	r3, [sp, #4]
 8015dcc:	9200      	str	r2, [sp, #0]
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	687a      	ldr	r2, [r7, #4]
 8015dd2:	68b9      	ldr	r1, [r7, #8]
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	f7ff fb4d 	bl	8015474 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 8015dda:	e02e      	b.n	8015e3a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	689a      	ldr	r2, [r3, #8]
 8015de0:	68bb      	ldr	r3, [r7, #8]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	4413      	add	r3, r2
 8015de6:	4619      	mov	r1, r3
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f7ff ff6f 	bl	8015ccc <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8015dee:	4603      	mov	r3, r0
 8015df0:	f083 0301 	eor.w	r3, r3, #1
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d014      	beq.n	8015e24 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	f103 040c 	add.w	r4, r3, #12
 8015e00:	6a3b      	ldr	r3, [r7, #32]
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	3328      	adds	r3, #40	; 0x28
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	6a38      	ldr	r0, [r7, #32]
 8015e0a:	4798      	blx	r3
 8015e0c:	4602      	mov	r2, r0
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	685b      	ldr	r3, [r3, #4]
 8015e12:	9301      	str	r3, [sp, #4]
 8015e14:	9200      	str	r2, [sp, #0]
 8015e16:	683b      	ldr	r3, [r7, #0]
 8015e18:	687a      	ldr	r2, [r7, #4]
 8015e1a:	68b9      	ldr	r1, [r7, #8]
 8015e1c:	4620      	mov	r0, r4
 8015e1e:	f7ff fb4f 	bl	80154c0 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8015e22:	e00a      	b.n	8015e3a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8015e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d006      	beq.n	8015e3a <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8015e2c:	6a3b      	ldr	r3, [r7, #32]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	3324      	adds	r3, #36	; 0x24
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	68b9      	ldr	r1, [r7, #8]
 8015e36:	6a38      	ldr	r0, [r7, #32]
 8015e38:	4798      	blx	r3
}
 8015e3a:	bf00      	nop
 8015e3c:	3714      	adds	r7, #20
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd90      	pop	{r4, r7, pc}
	...

08015e44 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b086      	sub	sp, #24
 8015e48:	af02      	add	r7, sp, #8
 8015e4a:	60f8      	str	r0, [r7, #12]
 8015e4c:	60b9      	str	r1, [r7, #8]
 8015e4e:	607a      	str	r2, [r7, #4]
 8015e50:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8015e52:	4b08      	ldr	r3, [pc, #32]	; (8015e74 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8015e54:	681a      	ldr	r2, [r3, #0]
 8015e56:	78fb      	ldrb	r3, [r7, #3]
 8015e58:	9301      	str	r3, [sp, #4]
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	9300      	str	r3, [sp, #0]
 8015e5e:	4613      	mov	r3, r2
 8015e60:	687a      	ldr	r2, [r7, #4]
 8015e62:	68b9      	ldr	r1, [r7, #8]
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	f000 f87f 	bl	8015f68 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8015e6a:	4603      	mov	r3, r0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3710      	adds	r7, #16
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	20000104 	.word	0x20000104

08015e78 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015e78:	b590      	push	{r4, r7, lr}
 8015e7a:	b085      	sub	sp, #20
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	60f8      	str	r0, [r7, #12]
 8015e80:	60b9      	str	r1, [r7, #8]
 8015e82:	607a      	str	r2, [r7, #4]
 8015e84:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 8015e86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d00e      	beq.n	8015eac <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 8015e8e:	68bb      	ldr	r3, [r7, #8]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	3308      	adds	r3, #8
 8015e94:	681c      	ldr	r4, [r3, #0]
 8015e96:	6879      	ldr	r1, [r7, #4]
 8015e98:	68f8      	ldr	r0, [r7, #12]
 8015e9a:	f7ff fe3f 	bl	8015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015e9e:	4601      	mov	r1, r0
 8015ea0:	6a3b      	ldr	r3, [r7, #32]
 8015ea2:	683a      	ldr	r2, [r7, #0]
 8015ea4:	68b8      	ldr	r0, [r7, #8]
 8015ea6:	47a0      	blx	r4
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	e010      	b.n	8015ece <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	3308      	adds	r3, #8
 8015eb2:	681c      	ldr	r4, [r3, #0]
 8015eb4:	6879      	ldr	r1, [r7, #4]
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff fe30 	bl	8015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	f103 0120 	add.w	r1, r3, #32
 8015ec2:	6a3b      	ldr	r3, [r7, #32]
 8015ec4:	683a      	ldr	r2, [r7, #0]
 8015ec6:	68b8      	ldr	r0, [r7, #8]
 8015ec8:	47a0      	blx	r4
 8015eca:	4603      	mov	r3, r0
 8015ecc:	bf00      	nop
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	3714      	adds	r7, #20
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	bd90      	pop	{r4, r7, pc}
	...

08015ed8 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 8015ed8:	b590      	push	{r4, r7, lr}
 8015eda:	b085      	sub	sp, #20
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	60f8      	str	r0, [r7, #12]
 8015ee0:	60b9      	str	r1, [r7, #8]
 8015ee2:	607a      	str	r2, [r7, #4]
 8015ee4:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8015ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d00b      	beq.n	8015f06 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8015eee:	4b0e      	ldr	r3, [pc, #56]	; (8015f28 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015ef0:	681c      	ldr	r4, [r3, #0]
 8015ef2:	6839      	ldr	r1, [r7, #0]
 8015ef4:	68f8      	ldr	r0, [r7, #12]
 8015ef6:	f7ff fe11 	bl	8015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015efa:	4603      	mov	r3, r0
 8015efc:	4619      	mov	r1, r3
 8015efe:	6878      	ldr	r0, [r7, #4]
 8015f00:	47a0      	blx	r4
 8015f02:	4603      	mov	r3, r0
 8015f04:	e00c      	b.n	8015f20 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8015f06:	4b08      	ldr	r3, [pc, #32]	; (8015f28 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8015f08:	681c      	ldr	r4, [r3, #0]
 8015f0a:	6839      	ldr	r1, [r7, #0]
 8015f0c:	68f8      	ldr	r0, [r7, #12]
 8015f0e:	f7ff fe05 	bl	8015b1c <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8015f12:	4603      	mov	r3, r0
 8015f14:	3320      	adds	r3, #32
 8015f16:	4619      	mov	r1, r3
 8015f18:	6878      	ldr	r0, [r7, #4]
 8015f1a:	47a0      	blx	r4
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	bf00      	nop
}
 8015f20:	4618      	mov	r0, r3
 8015f22:	3714      	adds	r7, #20
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd90      	pop	{r4, r7, pc}
 8015f28:	200000d0 	.word	0x200000d0

08015f2c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	60f8      	str	r0, [r7, #12]
 8015f34:	60b9      	str	r1, [r7, #8]
 8015f36:	607a      	str	r2, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8015f3a:	7e3b      	ldrb	r3, [r7, #24]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d008      	beq.n	8015f52 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	3320      	adds	r3, #32
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2120      	movs	r1, #32
 8015f4a:	68b8      	ldr	r0, [r7, #8]
 8015f4c:	4798      	blx	r3
 8015f4e:	4603      	mov	r3, r0
 8015f50:	e006      	b.n	8015f60 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	68f8      	ldr	r0, [r7, #12]
 8015f58:	f7ff fdef 	bl	8015b3a <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8015f5c:	4603      	mov	r3, r0
 8015f5e:	bf00      	nop
}
 8015f60:	4618      	mov	r0, r3
 8015f62:	3710      	adds	r7, #16
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}

08015f68 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015f68:	b580      	push	{r7, lr}
 8015f6a:	b08a      	sub	sp, #40	; 0x28
 8015f6c:	af04      	add	r7, sp, #16
 8015f6e:	60f8      	str	r0, [r7, #12]
 8015f70:	60b9      	str	r1, [r7, #8]
 8015f72:	607a      	str	r2, [r7, #4]
 8015f74:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8015f76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f7a:	9301      	str	r3, [sp, #4]
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	683b      	ldr	r3, [r7, #0]
 8015f82:	687a      	ldr	r2, [r7, #4]
 8015f84:	68b9      	ldr	r1, [r7, #8]
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f7ff ff76 	bl	8015e78 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 8015f8c:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d101      	bne.n	8015f98 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 8015f94:	2300      	movs	r3, #0
 8015f96:	e017      	b.n	8015fc8 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 8015f98:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f9c:	9300      	str	r3, [sp, #0]
 8015f9e:	697b      	ldr	r3, [r7, #20]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	68b9      	ldr	r1, [r7, #8]
 8015fa4:	68f8      	ldr	r0, [r7, #12]
 8015fa6:	f7ff ffc1 	bl	8015f2c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8015faa:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 8015fac:	6a3b      	ldr	r3, [r7, #32]
 8015fae:	9302      	str	r3, [sp, #8]
 8015fb0:	683b      	ldr	r3, [r7, #0]
 8015fb2:	9301      	str	r3, [sp, #4]
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	9300      	str	r3, [sp, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	697a      	ldr	r2, [r7, #20]
 8015fbc:	6939      	ldr	r1, [r7, #16]
 8015fbe:	68f8      	ldr	r0, [r7, #12]
 8015fc0:	f7ff fdcc 	bl	8015b5c <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	689b      	ldr	r3, [r3, #8]
}
 8015fc8:	4618      	mov	r0, r3
 8015fca:	3718      	adds	r7, #24
 8015fcc:	46bd      	mov	sp, r7
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 8015fd0:	b590      	push	{r4, r7, lr}
 8015fd2:	b089      	sub	sp, #36	; 0x24
 8015fd4:	af02      	add	r7, sp, #8
 8015fd6:	60f8      	str	r0, [r7, #12]
 8015fd8:	60b9      	str	r1, [r7, #8]
 8015fda:	607a      	str	r2, [r7, #4]
 8015fdc:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d03a      	beq.n	801605a <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8015fea:	331c      	adds	r3, #28
 8015fec:	6879      	ldr	r1, [r7, #4]
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f7ff fc13 	bl	801581a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8015ff4:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8015ff6:	697b      	ldr	r3, [r7, #20]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10b      	bne.n	8016014 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	f103 000c 	add.w	r0, r3, #12
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	9300      	str	r3, [sp, #0]
 8016008:	68bb      	ldr	r3, [r7, #8]
 801600a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801600c:	6839      	ldr	r1, [r7, #0]
 801600e:	f7ff fa0d 	bl	801542c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8016012:	e023      	b.n	801605c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8016014:	68b8      	ldr	r0, [r7, #8]
 8016016:	f7f8 ff95 	bl	800ef44 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801601a:	4603      	mov	r3, r0
 801601c:	f083 0301 	eor.w	r3, r3, #1
 8016020:	b2db      	uxtb	r3, r3
 8016022:	2b00      	cmp	r3, #0
 8016024:	d01a      	beq.n	801605c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 801602c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8016030:	9301      	str	r3, [sp, #4]
 8016032:	68bb      	ldr	r3, [r7, #8]
 8016034:	9300      	str	r3, [sp, #0]
 8016036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016038:	683a      	ldr	r2, [r7, #0]
 801603a:	6979      	ldr	r1, [r7, #20]
 801603c:	68f8      	ldr	r0, [r7, #12]
 801603e:	f7ff fe95 	bl	8015d6c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8016042:	68bb      	ldr	r3, [r7, #8]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	330c      	adds	r3, #12
 8016048:	681c      	ldr	r4, [r3, #0]
 801604a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604c:	9300      	str	r3, [sp, #0]
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	693a      	ldr	r2, [r7, #16]
 8016052:	6879      	ldr	r1, [r7, #4]
 8016054:	68b8      	ldr	r0, [r7, #8]
 8016056:	47a0      	blx	r4
 8016058:	e000      	b.n	801605c <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801605a:	bf00      	nop
    }
}
 801605c:	371c      	adds	r7, #28
 801605e:	46bd      	mov	sp, r7
 8016060:	bd90      	pop	{r4, r7, pc}
	...

08016064 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b086      	sub	sp, #24
 8016068:	af02      	add	r7, sp, #8
 801606a:	60f8      	str	r0, [r7, #12]
 801606c:	60b9      	str	r1, [r7, #8]
 801606e:	607a      	str	r2, [r7, #4]
 8016070:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8016072:	4b08      	ldr	r3, [pc, #32]	; (8016094 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	78fb      	ldrb	r3, [r7, #3]
 8016078:	9301      	str	r3, [sp, #4]
 801607a:	2300      	movs	r3, #0
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	4613      	mov	r3, r2
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	68b9      	ldr	r1, [r7, #8]
 8016084:	68f8      	ldr	r0, [r7, #12]
 8016086:	f7ff ffa3 	bl	8015fd0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801608a:	bf00      	nop
 801608c:	3710      	adds	r7, #16
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}
 8016092:	bf00      	nop
 8016094:	20000104 	.word	0x20000104

08016098 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b08a      	sub	sp, #40	; 0x28
 801609c:	af04      	add	r7, sp, #16
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	607a      	str	r2, [r7, #4]
 80160a4:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d023      	beq.n	80160f4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80160b2:	331c      	adds	r3, #28
 80160b4:	6879      	ldr	r1, [r7, #4]
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7ff fbaf 	bl	801581a <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80160bc:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d10c      	bne.n	80160de <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	f103 000c 	add.w	r0, r3, #12
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	9300      	str	r3, [sp, #0]
 80160d0:	68bb      	ldr	r3, [r7, #8]
 80160d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160d4:	6a39      	ldr	r1, [r7, #32]
 80160d6:	f7ff f9a9 	bl	801542c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80160da:	2300      	movs	r3, #0
 80160dc:	e019      	b.n	8016112 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80160de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80160e2:	9301      	str	r3, [sp, #4]
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	9300      	str	r3, [sp, #0]
 80160e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ea:	6a3a      	ldr	r2, [r7, #32]
 80160ec:	6979      	ldr	r1, [r7, #20]
 80160ee:	68f8      	ldr	r0, [r7, #12]
 80160f0:	f7ff fe3c 	bl	8015d6c <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80160f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80160f8:	9302      	str	r3, [sp, #8]
 80160fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fc:	9301      	str	r3, [sp, #4]
 80160fe:	6a3b      	ldr	r3, [r7, #32]
 8016100:	9300      	str	r3, [sp, #0]
 8016102:	683b      	ldr	r3, [r7, #0]
 8016104:	687a      	ldr	r2, [r7, #4]
 8016106:	68b9      	ldr	r1, [r7, #8]
 8016108:	68f8      	ldr	r0, [r7, #12]
 801610a:	f7ff fd62 	bl	8015bd2 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 801610e:	4603      	mov	r3, r0
 8016110:	bf00      	nop
}
 8016112:	4618      	mov	r0, r3
 8016114:	3718      	adds	r7, #24
 8016116:	46bd      	mov	sp, r7
 8016118:	bd80      	pop	{r7, pc}

0801611a <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 801611a:	b580      	push	{r7, lr}
 801611c:	b084      	sub	sp, #16
 801611e:	af00      	add	r7, sp, #0
 8016120:	6078      	str	r0, [r7, #4]
 8016122:	460b      	mov	r3, r1
 8016124:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801612c:	331c      	adds	r3, #28
 801612e:	78fa      	ldrb	r2, [r7, #3]
 8016130:	4611      	mov	r1, r2
 8016132:	4618      	mov	r0, r3
 8016134:	f7ff fbc0 	bl	80158b8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8016138:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	330c      	adds	r3, #12
 801613e:	4618      	mov	r0, r3
 8016140:	f7ff f882 	bl	8015248 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8016144:	68fb      	ldr	r3, [r7, #12]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d010      	beq.n	801616c <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	330c      	adds	r3, #12
 801614e:	68f9      	ldr	r1, [r7, #12]
 8016150:	4618      	mov	r0, r3
 8016152:	f7ff f897 	bl	8015284 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801615c:	331c      	adds	r3, #28
 801615e:	78fa      	ldrb	r2, [r7, #3]
 8016160:	68f9      	ldr	r1, [r7, #12]
 8016162:	4618      	mov	r0, r3
 8016164:	f7ff fbcb 	bl	80158fe <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8016168:	60f8      	str	r0, [r7, #12]
    while (leak) {
 801616a:	e7eb      	b.n	8016144 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	330c      	adds	r3, #12
 8016170:	4618      	mov	r0, r3
 8016172:	f7ff f8e7 	bl	8015344 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8016176:	bf00      	nop
 8016178:	3710      	adds	r7, #16
 801617a:	46bd      	mov	sp, r7
 801617c:	bd80      	pop	{r7, pc}

0801617e <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 801617e:	b580      	push	{r7, lr}
 8016180:	b082      	sub	sp, #8
 8016182:	af00      	add	r7, sp, #0
 8016184:	6078      	str	r0, [r7, #4]
 8016186:	460b      	mov	r3, r1
 8016188:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 801618a:	78fb      	ldrb	r3, [r7, #3]
 801618c:	4619      	mov	r1, r3
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f7ff ffc3 	bl	801611a <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	330c      	adds	r3, #12
 8016198:	4618      	mov	r0, r3
 801619a:	f7ff f9e5 	bl	8015568 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 801619e:	4603      	mov	r3, r0
}
 80161a0:	4618      	mov	r0, r3
 80161a2:	3708      	adds	r7, #8
 80161a4:	46bd      	mov	sp, r7
 80161a6:	bd80      	pop	{r7, pc}

080161a8 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b084      	sub	sp, #16
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161b6:	331c      	adds	r3, #28
 80161b8:	2103      	movs	r1, #3
 80161ba:	4618      	mov	r0, r3
 80161bc:	f7ff fb7c 	bl	80158b8 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 80161c0:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d011      	beq.n	80161ec <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	7e1b      	ldrb	r3, [r3, #24]
 80161cc:	2b03      	cmp	r3, #3
 80161ce:	d102      	bne.n	80161d6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	2202      	movs	r2, #2
 80161d4:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80161dc:	331c      	adds	r3, #28
 80161de:	2203      	movs	r2, #3
 80161e0:	68f9      	ldr	r1, [r7, #12]
 80161e2:	4618      	mov	r0, r3
 80161e4:	f7ff fb8b 	bl	80158fe <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80161e8:	60f8      	str	r0, [r7, #12]
    while (leak) {
 80161ea:	e7ea      	b.n	80161c2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 80161ec:	bf00      	nop
 80161ee:	3710      	adds	r7, #16
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}

080161f4 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b082      	sub	sp, #8
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	6078      	str	r0, [r7, #4]
 80161fc:	460b      	mov	r3, r1
 80161fe:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8016200:	687b      	ldr	r3, [r7, #4]
 8016202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016206:	331c      	adds	r3, #28
 8016208:	78fa      	ldrb	r2, [r7, #3]
 801620a:	4611      	mov	r1, r2
 801620c:	4618      	mov	r0, r3
 801620e:	f7ff fb30 	bl	8015872 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8016212:	4603      	mov	r3, r0
}
 8016214:	4618      	mov	r0, r3
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 801621c:	b580      	push	{r7, lr}
 801621e:	b084      	sub	sp, #16
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
 8016228:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	68b9      	ldr	r1, [r7, #8]
 801622e:	4618      	mov	r0, r3
 8016230:	f7f5 fb13 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	3308      	adds	r3, #8
 8016238:	6879      	ldr	r1, [r7, #4]
 801623a:	4618      	mov	r0, r3
 801623c:	f7f5 fb0d 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	683a      	ldr	r2, [r7, #0]
 8016244:	611a      	str	r2, [r3, #16]
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2200      	movs	r2, #0
 801624a:	615a      	str	r2, [r3, #20]
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	4618      	mov	r0, r3
 8016250:	3710      	adds	r7, #16
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}

08016256 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8016256:	b480      	push	{r7}
 8016258:	b083      	sub	sp, #12
 801625a:	af00      	add	r7, sp, #0
 801625c:	6078      	str	r0, [r7, #4]
 801625e:	6039      	str	r1, [r7, #0]
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	4618      	mov	r0, r3
 8016264:	370c      	adds	r7, #12
 8016266:	46bd      	mov	sp, r7
 8016268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626c:	4770      	bx	lr

0801626e <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 801626e:	b480      	push	{r7}
 8016270:	b083      	sub	sp, #12
 8016272:	af00      	add	r7, sp, #0
 8016274:	6078      	str	r0, [r7, #4]
 8016276:	6039      	str	r1, [r7, #0]
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	4618      	mov	r0, r3
 801627c:	370c      	adds	r7, #12
 801627e:	46bd      	mov	sp, r7
 8016280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016284:	4770      	bx	lr

08016286 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8016286:	b480      	push	{r7}
 8016288:	b085      	sub	sp, #20
 801628a:	af00      	add	r7, sp, #0
 801628c:	60f8      	str	r0, [r7, #12]
 801628e:	60b9      	str	r1, [r7, #8]
 8016290:	4613      	mov	r3, r2
 8016292:	71fb      	strb	r3, [r7, #7]
 8016294:	68fb      	ldr	r3, [r7, #12]
 8016296:	4618      	mov	r0, r3
 8016298:	3714      	adds	r7, #20
 801629a:	46bd      	mov	sp, r7
 801629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a0:	4770      	bx	lr

080162a2 <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 80162a2:	b480      	push	{r7}
 80162a4:	b085      	sub	sp, #20
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	60f8      	str	r0, [r7, #12]
 80162aa:	60b9      	str	r1, [r7, #8]
 80162ac:	607a      	str	r2, [r7, #4]
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr

080162bc <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	60f8      	str	r0, [r7, #12]
 80162c4:	60b9      	str	r1, [r7, #8]
 80162c6:	607a      	str	r2, [r7, #4]
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	4618      	mov	r0, r3
 80162cc:	3714      	adds	r7, #20
 80162ce:	46bd      	mov	sp, r7
 80162d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d4:	4770      	bx	lr

080162d6 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80162d6:	b480      	push	{r7}
 80162d8:	b085      	sub	sp, #20
 80162da:	af00      	add	r7, sp, #0
 80162dc:	60f8      	str	r0, [r7, #12]
 80162de:	60b9      	str	r1, [r7, #8]
 80162e0:	607a      	str	r2, [r7, #4]
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	4618      	mov	r0, r3
 80162e6:	3714      	adds	r7, #20
 80162e8:	46bd      	mov	sp, r7
 80162ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ee:	4770      	bx	lr

080162f0 <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80162f0:	b480      	push	{r7}
 80162f2:	b085      	sub	sp, #20
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	60f8      	str	r0, [r7, #12]
 80162f8:	60b9      	str	r1, [r7, #8]
 80162fa:	607a      	str	r2, [r7, #4]
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	4618      	mov	r0, r3
 8016300:	3714      	adds	r7, #20
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr

0801630a <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 801630a:	b480      	push	{r7}
 801630c:	b085      	sub	sp, #20
 801630e:	af00      	add	r7, sp, #0
 8016310:	60f8      	str	r0, [r7, #12]
 8016312:	60b9      	str	r1, [r7, #8]
 8016314:	4639      	mov	r1, r7
 8016316:	e881 000c 	stmia.w	r1, {r2, r3}
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	4618      	mov	r0, r3
 801631e:	3714      	adds	r7, #20
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr

08016328 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8016328:	b480      	push	{r7}
 801632a:	b085      	sub	sp, #20
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	4639      	mov	r1, r7
 8016334:	e881 000c 	stmia.w	r1, {r2, r3}
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	4618      	mov	r0, r3
 801633c:	3714      	adds	r7, #20
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8016346:	b480      	push	{r7}
 8016348:	b085      	sub	sp, #20
 801634a:	af00      	add	r7, sp, #0
 801634c:	60f8      	str	r0, [r7, #12]
 801634e:	60b9      	str	r1, [r7, #8]
 8016350:	ed87 0b00 	vstr	d0, [r7]
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	4618      	mov	r0, r3
 8016358:	3714      	adds	r7, #20
 801635a:	46bd      	mov	sp, r7
 801635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016360:	4770      	bx	lr

08016362 <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8016362:	b480      	push	{r7}
 8016364:	b085      	sub	sp, #20
 8016366:	af00      	add	r7, sp, #0
 8016368:	60f8      	str	r0, [r7, #12]
 801636a:	60b9      	str	r1, [r7, #8]
 801636c:	607a      	str	r2, [r7, #4]
 801636e:	68fb      	ldr	r3, [r7, #12]
 8016370:	4618      	mov	r0, r3
 8016372:	3714      	adds	r7, #20
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr

0801637c <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 801637c:	b480      	push	{r7}
 801637e:	b085      	sub	sp, #20
 8016380:	af00      	add	r7, sp, #0
 8016382:	60f8      	str	r0, [r7, #12]
 8016384:	60b9      	str	r1, [r7, #8]
 8016386:	607a      	str	r2, [r7, #4]
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	4618      	mov	r0, r3
 801638c:	3714      	adds	r7, #20
 801638e:	46bd      	mov	sp, r7
 8016390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016394:	4770      	bx	lr

08016396 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8016396:	b480      	push	{r7}
 8016398:	b085      	sub	sp, #20
 801639a:	af00      	add	r7, sp, #0
 801639c:	60f8      	str	r0, [r7, #12]
 801639e:	60b9      	str	r1, [r7, #8]
 80163a0:	607a      	str	r2, [r7, #4]
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	4618      	mov	r0, r3
 80163a6:	3714      	adds	r7, #20
 80163a8:	46bd      	mov	sp, r7
 80163aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ae:	4770      	bx	lr

080163b0 <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 80163b0:	b480      	push	{r7}
 80163b2:	b085      	sub	sp, #20
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	4618      	mov	r0, r3
 80163c0:	3714      	adds	r7, #20
 80163c2:	46bd      	mov	sp, r7
 80163c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c8:	4770      	bx	lr

080163ca <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 80163ca:	b480      	push	{r7}
 80163cc:	b085      	sub	sp, #20
 80163ce:	af00      	add	r7, sp, #0
 80163d0:	60f8      	str	r0, [r7, #12]
 80163d2:	60b9      	str	r1, [r7, #8]
 80163d4:	607a      	str	r2, [r7, #4]
 80163d6:	603b      	str	r3, [r7, #0]
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	4618      	mov	r0, r3
 80163dc:	3714      	adds	r7, #20
 80163de:	46bd      	mov	sp, r7
 80163e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163e4:	4770      	bx	lr

080163e6 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80163e6:	b480      	push	{r7}
 80163e8:	b085      	sub	sp, #20
 80163ea:	af00      	add	r7, sp, #0
 80163ec:	60f8      	str	r0, [r7, #12]
 80163ee:	60b9      	str	r1, [r7, #8]
 80163f0:	607a      	str	r2, [r7, #4]
 80163f2:	603b      	str	r3, [r7, #0]
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	4618      	mov	r0, r3
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr

08016402 <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8016402:	b480      	push	{r7}
 8016404:	b085      	sub	sp, #20
 8016406:	af00      	add	r7, sp, #0
 8016408:	60f8      	str	r0, [r7, #12]
 801640a:	60b9      	str	r1, [r7, #8]
 801640c:	607a      	str	r2, [r7, #4]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	4618      	mov	r0, r3
 8016412:	3714      	adds	r7, #20
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr

0801641c <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 801641c:	b480      	push	{r7}
 801641e:	b085      	sub	sp, #20
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	60b9      	str	r1, [r7, #8]
 8016426:	607a      	str	r2, [r7, #4]
 8016428:	603b      	str	r3, [r7, #0]
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	4618      	mov	r0, r3
 801642e:	3714      	adds	r7, #20
 8016430:	46bd      	mov	sp, r7
 8016432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016436:	4770      	bx	lr

08016438 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8016438:	b480      	push	{r7}
 801643a:	b083      	sub	sp, #12
 801643c:	af00      	add	r7, sp, #0
 801643e:	6078      	str	r0, [r7, #4]
 8016440:	2300      	movs	r3, #0
 8016442:	4618      	mov	r0, r3
 8016444:	370c      	adds	r7, #12
 8016446:	46bd      	mov	sp, r7
 8016448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644c:	4770      	bx	lr
	...

08016450 <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	6078      	str	r0, [r7, #4]
 8016458:	6039      	str	r1, [r7, #0]
 801645a:	f107 0308 	add.w	r3, r7, #8
 801645e:	4909      	ldr	r1, [pc, #36]	; (8016484 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8016460:	4618      	mov	r0, r3
 8016462:	f7f5 f9a6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8016466:	f107 0308 	add.w	r3, r7, #8
 801646a:	4619      	mov	r1, r3
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f005 fec5 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 8016472:	f107 0308 	add.w	r3, r7, #8
 8016476:	4618      	mov	r0, r3
 8016478:	f7f5 fd53 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	3710      	adds	r7, #16
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}
 8016484:	0802479c 	.word	0x0802479c

08016488 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8016488:	b480      	push	{r7}
 801648a:	b083      	sub	sp, #12
 801648c:	af00      	add	r7, sp, #0
 801648e:	6078      	str	r0, [r7, #4]
 8016490:	460b      	mov	r3, r1
 8016492:	70fb      	strb	r3, [r7, #3]
 8016494:	78fb      	ldrb	r3, [r7, #3]
 8016496:	4618      	mov	r0, r3
 8016498:	370c      	adds	r7, #12
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr

080164a2 <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 80164a2:	b480      	push	{r7}
 80164a4:	b083      	sub	sp, #12
 80164a6:	af00      	add	r7, sp, #0
 80164a8:	6078      	str	r0, [r7, #4]
 80164aa:	2300      	movs	r3, #0
 80164ac:	4618      	mov	r0, r3
 80164ae:	370c      	adds	r7, #12
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 80164b8:	b480      	push	{r7}
 80164ba:	b083      	sub	sp, #12
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	2300      	movs	r3, #0
 80164c2:	4618      	mov	r0, r3
 80164c4:	370c      	adds	r7, #12
 80164c6:	46bd      	mov	sp, r7
 80164c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164cc:	4770      	bx	lr

080164ce <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 80164ce:	b480      	push	{r7}
 80164d0:	b083      	sub	sp, #12
 80164d2:	af00      	add	r7, sp, #0
 80164d4:	6078      	str	r0, [r7, #4]
 80164d6:	6039      	str	r1, [r7, #0]
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	4618      	mov	r0, r3
 80164dc:	370c      	adds	r7, #12
 80164de:	46bd      	mov	sp, r7
 80164e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e4:	4770      	bx	lr

080164e6 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 80164e6:	b480      	push	{r7}
 80164e8:	b083      	sub	sp, #12
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
 80164ee:	2300      	movs	r3, #0
 80164f0:	4618      	mov	r0, r3
 80164f2:	370c      	adds	r7, #12
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr

080164fc <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 80164fc:	b480      	push	{r7}
 80164fe:	b083      	sub	sp, #12
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	4618      	mov	r0, r3
 801650a:	370c      	adds	r7, #12
 801650c:	46bd      	mov	sp, r7
 801650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016512:	4770      	bx	lr

08016514 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8016514:	b480      	push	{r7}
 8016516:	b083      	sub	sp, #12
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
 801651c:	2300      	movs	r3, #0
 801651e:	4618      	mov	r0, r3
 8016520:	370c      	adds	r7, #12
 8016522:	46bd      	mov	sp, r7
 8016524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016528:	4770      	bx	lr

0801652a <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 801652a:	b480      	push	{r7}
 801652c:	b083      	sub	sp, #12
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
 8016532:	6039      	str	r1, [r7, #0]
 8016534:	683b      	ldr	r3, [r7, #0]
 8016536:	4618      	mov	r0, r3
 8016538:	370c      	adds	r7, #12
 801653a:	46bd      	mov	sp, r7
 801653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016540:	4770      	bx	lr

08016542 <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8016542:	b580      	push	{r7, lr}
 8016544:	b082      	sub	sp, #8
 8016546:	af00      	add	r7, sp, #0
 8016548:	6078      	str	r0, [r7, #4]
 801654a:	6039      	str	r1, [r7, #0]
 801654c:	2100      	movs	r1, #0
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	f7f3 f972 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	3708      	adds	r7, #8
 8016558:	46bd      	mov	sp, r7
 801655a:	bd80      	pop	{r7, pc}

0801655c <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 801655c:	b480      	push	{r7}
 801655e:	b085      	sub	sp, #20
 8016560:	af00      	add	r7, sp, #0
 8016562:	60f8      	str	r0, [r7, #12]
 8016564:	60b9      	str	r1, [r7, #8]
 8016566:	4639      	mov	r1, r7
 8016568:	e881 000c 	stmia.w	r1, {r2, r3}
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	461a      	mov	r2, r3
 8016570:	463b      	mov	r3, r7
 8016572:	cb03      	ldmia	r3!, {r0, r1}
 8016574:	6010      	str	r0, [r2, #0]
 8016576:	6051      	str	r1, [r2, #4]
 8016578:	68f8      	ldr	r0, [r7, #12]
 801657a:	3714      	adds	r7, #20
 801657c:	46bd      	mov	sp, r7
 801657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016582:	4770      	bx	lr

08016584 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8016584:	b580      	push	{r7, lr}
 8016586:	b082      	sub	sp, #8
 8016588:	af00      	add	r7, sp, #0
 801658a:	6078      	str	r0, [r7, #4]
 801658c:	6039      	str	r1, [r7, #0]
 801658e:	2100      	movs	r1, #0
 8016590:	6878      	ldr	r0, [r7, #4]
 8016592:	f7f3 f945 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
 8016596:	6878      	ldr	r0, [r7, #4]
 8016598:	3708      	adds	r7, #8
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}

0801659e <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 801659e:	b480      	push	{r7}
 80165a0:	b085      	sub	sp, #20
 80165a2:	af00      	add	r7, sp, #0
 80165a4:	60f8      	str	r0, [r7, #12]
 80165a6:	60b9      	str	r1, [r7, #8]
 80165a8:	4639      	mov	r1, r7
 80165aa:	e881 000c 	stmia.w	r1, {r2, r3}
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	461a      	mov	r2, r3
 80165b2:	463b      	mov	r3, r7
 80165b4:	cb03      	ldmia	r3!, {r0, r1}
 80165b6:	6010      	str	r0, [r2, #0]
 80165b8:	6051      	str	r1, [r2, #4]
 80165ba:	68f8      	ldr	r0, [r7, #12]
 80165bc:	3714      	adds	r7, #20
 80165be:	46bd      	mov	sp, r7
 80165c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c4:	4770      	bx	lr

080165c6 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 80165c6:	b480      	push	{r7}
 80165c8:	b083      	sub	sp, #12
 80165ca:	af00      	add	r7, sp, #0
 80165cc:	6078      	str	r0, [r7, #4]
 80165ce:	2300      	movs	r3, #0
 80165d0:	4618      	mov	r0, r3
 80165d2:	370c      	adds	r7, #12
 80165d4:	46bd      	mov	sp, r7
 80165d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165da:	4770      	bx	lr

080165dc <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 80165dc:	b480      	push	{r7}
 80165de:	b083      	sub	sp, #12
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	6039      	str	r1, [r7, #0]
 80165e6:	683b      	ldr	r3, [r7, #0]
 80165e8:	4618      	mov	r0, r3
 80165ea:	370c      	adds	r7, #12
 80165ec:	46bd      	mov	sp, r7
 80165ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f2:	4770      	bx	lr

080165f4 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 80165f4:	b480      	push	{r7}
 80165f6:	b083      	sub	sp, #12
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	6078      	str	r0, [r7, #4]
 80165fc:	f04f 0200 	mov.w	r2, #0
 8016600:	f04f 0300 	mov.w	r3, #0
 8016604:	ec43 2b17 	vmov	d7, r2, r3
 8016608:	eeb0 0a47 	vmov.f32	s0, s14
 801660c:	eef0 0a67 	vmov.f32	s1, s15
 8016610:	370c      	adds	r7, #12
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr

0801661a <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 801661a:	b480      	push	{r7}
 801661c:	b085      	sub	sp, #20
 801661e:	af00      	add	r7, sp, #0
 8016620:	60f8      	str	r0, [r7, #12]
 8016622:	ed87 0b00 	vstr	d0, [r7]
 8016626:	e9d7 2300 	ldrd	r2, r3, [r7]
 801662a:	ec43 2b17 	vmov	d7, r2, r3
 801662e:	eeb0 0a47 	vmov.f32	s0, s14
 8016632:	eef0 0a67 	vmov.f32	s1, s15
 8016636:	3714      	adds	r7, #20
 8016638:	46bd      	mov	sp, r7
 801663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663e:	4770      	bx	lr

08016640 <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 8016640:	b480      	push	{r7}
 8016642:	b083      	sub	sp, #12
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
 8016648:	4b03      	ldr	r3, [pc, #12]	; (8016658 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 801664a:	4618      	mov	r0, r3
 801664c:	370c      	adds	r7, #12
 801664e:	46bd      	mov	sp, r7
 8016650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016654:	4770      	bx	lr
 8016656:	bf00      	nop
 8016658:	0802479c 	.word	0x0802479c

0801665c <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 801665c:	b480      	push	{r7}
 801665e:	b083      	sub	sp, #12
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	6039      	str	r1, [r7, #0]
 8016666:	683b      	ldr	r3, [r7, #0]
 8016668:	4618      	mov	r0, r3
 801666a:	370c      	adds	r7, #12
 801666c:	46bd      	mov	sp, r7
 801666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016672:	4770      	bx	lr

08016674 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8016674:	b480      	push	{r7}
 8016676:	b083      	sub	sp, #12
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
 801667c:	2300      	movs	r3, #0
 801667e:	4618      	mov	r0, r3
 8016680:	370c      	adds	r7, #12
 8016682:	46bd      	mov	sp, r7
 8016684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016688:	4770      	bx	lr

0801668a <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 801668a:	b480      	push	{r7}
 801668c:	b083      	sub	sp, #12
 801668e:	af00      	add	r7, sp, #0
 8016690:	6078      	str	r0, [r7, #4]
 8016692:	6039      	str	r1, [r7, #0]
 8016694:	683b      	ldr	r3, [r7, #0]
 8016696:	4618      	mov	r0, r3
 8016698:	370c      	adds	r7, #12
 801669a:	46bd      	mov	sp, r7
 801669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a0:	4770      	bx	lr

080166a2 <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 80166a2:	b480      	push	{r7}
 80166a4:	b083      	sub	sp, #12
 80166a6:	af00      	add	r7, sp, #0
 80166a8:	6078      	str	r0, [r7, #4]
 80166aa:	2300      	movs	r3, #0
 80166ac:	4618      	mov	r0, r3
 80166ae:	370c      	adds	r7, #12
 80166b0:	46bd      	mov	sp, r7
 80166b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b6:	4770      	bx	lr

080166b8 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80166b8:	b480      	push	{r7}
 80166ba:	b083      	sub	sp, #12
 80166bc:	af00      	add	r7, sp, #0
 80166be:	6078      	str	r0, [r7, #4]
 80166c0:	6039      	str	r1, [r7, #0]
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	4618      	mov	r0, r3
 80166c6:	370c      	adds	r7, #12
 80166c8:	46bd      	mov	sp, r7
 80166ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166ce:	4770      	bx	lr

080166d0 <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80166d0:	b480      	push	{r7}
 80166d2:	b083      	sub	sp, #12
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	2300      	movs	r3, #0
 80166da:	4618      	mov	r0, r3
 80166dc:	370c      	adds	r7, #12
 80166de:	46bd      	mov	sp, r7
 80166e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e4:	4770      	bx	lr

080166e6 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 80166e6:	b480      	push	{r7}
 80166e8:	b083      	sub	sp, #12
 80166ea:	af00      	add	r7, sp, #0
 80166ec:	6078      	str	r0, [r7, #4]
 80166ee:	6039      	str	r1, [r7, #0]
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	4618      	mov	r0, r3
 80166f4:	370c      	adds	r7, #12
 80166f6:	46bd      	mov	sp, r7
 80166f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fc:	4770      	bx	lr

080166fe <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 80166fe:	b480      	push	{r7}
 8016700:	b083      	sub	sp, #12
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
 8016706:	6039      	str	r1, [r7, #0]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	4618      	mov	r0, r3
 801670c:	370c      	adds	r7, #12
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr
	...

08016718 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8016718:	b480      	push	{r7}
 801671a:	b083      	sub	sp, #12
 801671c:	af00      	add	r7, sp, #0
 801671e:	6078      	str	r0, [r7, #4]
 8016720:	4a04      	ldr	r2, [pc, #16]	; (8016734 <_ZN14MockActualCallC1Ev+0x1c>)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	601a      	str	r2, [r3, #0]
{
}
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	4618      	mov	r0, r3
 801672a:	370c      	adds	r7, #12
 801672c:	46bd      	mov	sp, r7
 801672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016732:	4770      	bx	lr
 8016734:	08027144 	.word	0x08027144

08016738 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8016738:	b480      	push	{r7}
 801673a:	b083      	sub	sp, #12
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	4a04      	ldr	r2, [pc, #16]	; (8016754 <_ZN14MockActualCallD1Ev+0x1c>)
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	601a      	str	r2, [r3, #0]
{
}
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	4618      	mov	r0, r3
 801674a:	370c      	adds	r7, #12
 801674c:	46bd      	mov	sp, r7
 801674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016752:	4770      	bx	lr
 8016754:	08027144 	.word	0x08027144

08016758 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b082      	sub	sp, #8
 801675c:	af00      	add	r7, sp, #0
 801675e:	6078      	str	r0, [r7, #4]
 8016760:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	3304      	adds	r3, #4
 8016766:	6839      	ldr	r1, [r7, #0]
 8016768:	4618      	mov	r0, r3
 801676a:	f7f5 f88e 	bl	800b88a <_ZN12SimpleStringaSERKS_>
}
 801676e:	bf00      	nop
 8016770:	3708      	adds	r7, #8
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}

08016776 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8016776:	b580      	push	{r7, lr}
 8016778:	b082      	sub	sp, #8
 801677a:	af00      	add	r7, sp, #0
 801677c:	6078      	str	r0, [r7, #4]
 801677e:	6039      	str	r1, [r7, #0]
    return functionName_;
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	3304      	adds	r3, #4
 8016784:	4619      	mov	r1, r3
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	f7f5 f867 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 801678c:	6878      	ldr	r0, [r7, #4]
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	60b9      	str	r1, [r7, #8]
 801679e:	607a      	str	r2, [r7, #4]
 80167a0:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	4618      	mov	r0, r3
 80167a6:	f7ff ffb7 	bl	8016718 <_ZN14MockActualCallC1Ev>
 80167aa:	4a17      	ldr	r2, [pc, #92]	; (8016808 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	601a      	str	r2, [r3, #0]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	3304      	adds	r3, #4
 80167b4:	4915      	ldr	r1, [pc, #84]	; (801680c <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7f4 fffb 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80167bc:	68fb      	ldr	r3, [r7, #12]
 80167be:	68ba      	ldr	r2, [r7, #8]
 80167c0:	60da      	str	r2, [r3, #12]
 80167c2:	68fb      	ldr	r3, [r7, #12]
 80167c4:	687a      	ldr	r2, [r7, #4]
 80167c6:	611a      	str	r2, [r3, #16]
 80167c8:	68fb      	ldr	r3, [r7, #12]
 80167ca:	2202      	movs	r2, #2
 80167cc:	751a      	strb	r2, [r3, #20]
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	2200      	movs	r2, #0
 80167d2:	755a      	strb	r2, [r3, #21]
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	2200      	movs	r2, #0
 80167d8:	619a      	str	r2, [r3, #24]
 80167da:	68fb      	ldr	r3, [r7, #12]
 80167dc:	331c      	adds	r3, #28
 80167de:	4618      	mov	r0, r3
 80167e0:	f004 f814 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	683a      	ldr	r2, [r7, #0]
 80167e8:	625a      	str	r2, [r3, #36]	; 0x24
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2200      	movs	r2, #0
 80167ee:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	331c      	adds	r3, #28
 80167f4:	6839      	ldr	r1, [r7, #0]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f004 f986 	bl	801ab08 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	4618      	mov	r0, r3
 8016800:	3710      	adds	r7, #16
 8016802:	46bd      	mov	sp, r7
 8016804:	bd80      	pop	{r7, pc}
 8016806:	bf00      	nop
 8016808:	08027044 	.word	0x08027044
 801680c:	0802479c 	.word	0x0802479c

08016810 <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	4a0c      	ldr	r2, [pc, #48]	; (801684c <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f001 fae4 	bl	8017dec <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	331c      	adds	r3, #28
 8016828:	4618      	mov	r0, r3
 801682a:	f004 f803 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	3304      	adds	r3, #4
 8016832:	4618      	mov	r0, r3
 8016834:	f7f5 fb75 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	4618      	mov	r0, r3
 801683c:	f7ff ff7c 	bl	8016738 <_ZN14MockActualCallD1Ev>
}
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	4618      	mov	r0, r3
 8016844:	3708      	adds	r7, #8
 8016846:	46bd      	mov	sp, r7
 8016848:	bd80      	pop	{r7, pc}
 801684a:	bf00      	nop
 801684c:	08027044 	.word	0x08027044

08016850 <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
}
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f7ff ffd9 	bl	8016810 <_ZN21MockCheckedActualCallD1Ev>
 801685e:	212c      	movs	r1, #44	; 0x2c
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f7f2 fbf7 	bl	8009054 <_ZdlPvj>
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	4618      	mov	r0, r3
 801686a:	3708      	adds	r7, #8
 801686c:	46bd      	mov	sp, r7
 801686e:	bd80      	pop	{r7, pc}

08016870 <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 8016870:	b480      	push	{r7}
 8016872:	b083      	sub	sp, #12
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	683a      	ldr	r2, [r7, #0]
 801687e:	611a      	str	r2, [r3, #16]
}
 8016880:	bf00      	nop
 8016882:	370c      	adds	r7, #12
 8016884:	46bd      	mov	sp, r7
 8016886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688a:	4770      	bx	lr

0801688c <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	691a      	ldr	r2, [r3, #16]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	691b      	ldr	r3, [r3, #16]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	330c      	adds	r3, #12
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	4610      	mov	r0, r2
 80168a4:	4798      	blx	r3
 80168a6:	4603      	mov	r3, r0
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	33c0      	adds	r3, #192	; 0xc0
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	4798      	blx	r3
 80168c6:	4603      	mov	r3, r0
 80168c8:	f083 0301 	eor.w	r3, r3, #1
 80168cc:	b2db      	uxtb	r3, r3
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d010      	beq.n	80168f4 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	33ec      	adds	r3, #236	; 0xec
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	2101      	movs	r1, #1
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	4798      	blx	r3
        reporter_->failTest(failure);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	691a      	ldr	r2, [r3, #16]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	691b      	ldr	r3, [r3, #16]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	3308      	adds	r3, #8
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	6839      	ldr	r1, [r7, #0]
 80168f0:	4610      	mov	r0, r2
 80168f2:	4798      	blx	r3
    }
}
 80168f4:	bf00      	nop
 80168f6:	3708      	adds	r7, #8
 80168f8:	46bd      	mov	sp, r7
 80168fa:	bd80      	pop	{r7, pc}

080168fc <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 80168fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016900:	b0bc      	sub	sp, #240	; 0xf0
 8016902:	af00      	add	r7, sp, #0
 8016904:	6078      	str	r0, [r7, #4]
 8016906:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801690c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016910:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016914:	2b00      	cmp	r3, #0
 8016916:	f000 80f5 	beq.w	8016b04 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801691a:	683b      	ldr	r3, [r7, #0]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	339c      	adds	r3, #156	; 0x9c
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016926:	f107 0040 	add.w	r0, r7, #64	; 0x40
 801692a:	6839      	ldr	r1, [r7, #0]
 801692c:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 801692e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016932:	4618      	mov	r0, r3
 8016934:	f006 fa6c 	bl	801ce10 <_ZNK14MockNamedValue9getCopierEv>
 8016938:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 801693c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016940:	2b00      	cmp	r3, #0
 8016942:	d013      	beq.n	801696c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8016944:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	3308      	adds	r3, #8
 801694c:	681c      	ldr	r4, [r3, #0]
 801694e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016952:	691d      	ldr	r5, [r3, #16]
 8016954:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016958:	4618      	mov	r0, r3
 801695a:	f006 fa29 	bl	801cdb0 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801695e:	4603      	mov	r3, r0
 8016960:	461a      	mov	r2, r3
 8016962:	4629      	mov	r1, r5
 8016964:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8016968:	47a0      	blx	r4
 801696a:	e0c0      	b.n	8016aee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 801696c:	2500      	movs	r5, #0
 801696e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016972:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016976:	4611      	mov	r1, r2
 8016978:	4618      	mov	r0, r3
 801697a:	f005 ff0c 	bl	801c796 <_ZNK14MockNamedValue7getTypeEv>
 801697e:	2601      	movs	r6, #1
 8016980:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8016984:	4962      	ldr	r1, [pc, #392]	; (8016b10 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 8016986:	4618      	mov	r0, r3
 8016988:	f7f4 ff13 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801698c:	f04f 0801 	mov.w	r8, #1
 8016990:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8016994:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8016998:	4611      	mov	r1, r2
 801699a:	4618      	mov	r0, r3
 801699c:	f7f5 facd 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 80169a0:	4603      	mov	r3, r0
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d015      	beq.n	80169d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80169a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80169aa:	f103 0408 	add.w	r4, r3, #8
 80169ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80169b2:	4958      	ldr	r1, [pc, #352]	; (8016b14 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80169b4:	4618      	mov	r0, r3
 80169b6:	f7f4 fefc 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80169ba:	2501      	movs	r5, #1
 80169bc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80169c0:	4619      	mov	r1, r3
 80169c2:	4620      	mov	r0, r4
 80169c4:	f7f5 fab9 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 80169c8:	4603      	mov	r3, r0
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d001      	beq.n	80169d2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80169ce:	2401      	movs	r4, #1
 80169d0:	e000      	b.n	80169d4 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80169d2:	2400      	movs	r4, #0
 80169d4:	2d00      	cmp	r5, #0
 80169d6:	d004      	beq.n	80169e2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80169d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80169dc:	4618      	mov	r0, r3
 80169de:	f7f5 faa0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80169e2:	f1b8 0f00 	cmp.w	r8, #0
 80169e6:	d004      	beq.n	80169f2 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 80169e8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7f5 fa98 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80169f2:	2e00      	cmp	r6, #0
 80169f4:	d004      	beq.n	8016a00 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 80169f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7f5 fa91 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8016a00:	2c00      	cmp	r4, #0
 8016a02:	d018      	beq.n	8016a36 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8016a04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f006 f959 	bl	801ccc0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8016a0e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 8016a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016a16:	4618      	mov	r0, r3
 8016a18:	f006 f9e2 	bl	801cde0 <_ZNK14MockNamedValue7getSizeEv>
 8016a1c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 8016a20:	4b3d      	ldr	r3, [pc, #244]	; (8016b18 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016a28:	6910      	ldr	r0, [r2, #16]
 8016a2a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8016a2e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8016a32:	4798      	blx	r3
 8016a34:	e05b      	b.n	8016aee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8016a36:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016a3a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016a3e:	4611      	mov	r1, r2
 8016a40:	4618      	mov	r0, r3
 8016a42:	f005 fe99 	bl	801c778 <_ZNK14MockNamedValue7getNameEv>
 8016a46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016a4a:	4934      	ldr	r1, [pc, #208]	; (8016b1c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7f4 feb0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8016a52:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8016a56:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016a5a:	4611      	mov	r1, r2
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7f5 fab1 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 8016a62:	4603      	mov	r3, r0
 8016a64:	461c      	mov	r4, r3
 8016a66:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f7f5 fa59 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8016a70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8016a74:	4618      	mov	r0, r3
 8016a76:	f7f5 fa54 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8016a7a:	2c00      	cmp	r4, #0
 8016a7c:	d037      	beq.n	8016aee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8016a7e:	683b      	ldr	r3, [r7, #0]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	339c      	adds	r3, #156	; 0x9c
 8016a84:	681b      	ldr	r3, [r3, #0]
 8016a86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8016a8a:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8016a8e:	6839      	ldr	r1, [r7, #0]
 8016a90:	4798      	blx	r3
 8016a92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016a96:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8016a9a:	4611      	mov	r1, r2
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	f005 fe7a 	bl	801c796 <_ZNK14MockNamedValue7getTypeEv>
 8016aa2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f005 fbd2 	bl	801c250 <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	33cc      	adds	r3, #204	; 0xcc
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	6878      	ldr	r0, [r7, #4]
 8016ab6:	4798      	blx	r3
 8016ab8:	4601      	mov	r1, r0
 8016aba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8016abe:	f107 030c 	add.w	r3, r7, #12
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f005 faee 	bl	801c0a4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	33dc      	adds	r3, #220	; 0xdc
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	f107 020c 	add.w	r2, r7, #12
 8016ad4:	4611      	mov	r1, r2
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 8016ada:	f107 030c 	add.w	r3, r7, #12
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f001 ffe2 	bl	8018aa8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8016ae4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8016ae8:	4618      	mov	r0, r3
 8016aea:	f7f5 fa1a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8016aee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016af2:	4618      	mov	r0, r3
 8016af4:	f005 fbac 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8016af8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8016afc:	695b      	ldr	r3, [r3, #20]
 8016afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8016b02:	e705      	b.n	8016910 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8016b04:	bf00      	nop
 8016b06:	37f0      	adds	r7, #240	; 0xf0
 8016b08:	46bd      	mov	sp, r7
 8016b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b0e:	bf00      	nop
 8016b10:	080247a0 	.word	0x080247a0
 8016b14:	080247ac 	.word	0x080247ac
 8016b18:	200000d8 	.word	0x200000d8
 8016b1c:	0802479c 	.word	0x0802479c

08016b20 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 8016b20:	b580      	push	{r7, lr}
 8016b22:	b084      	sub	sp, #16
 8016b24:	af00      	add	r7, sp, #0
 8016b26:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	331c      	adds	r3, #28
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f004 f9bb 	bl	801aea8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 8016b32:	4602      	mov	r2, r0
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	699b      	ldr	r3, [r3, #24]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d00f      	beq.n	8016b60 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	33d4      	adds	r3, #212	; 0xd4
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	6992      	ldr	r2, [r2, #24]
 8016b4c:	4611      	mov	r1, r2
 8016b4e:	6878      	ldr	r0, [r7, #4]
 8016b50:	4798      	blx	r3
        callHasSucceeded();
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	33d0      	adds	r3, #208	; 0xd0
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	6878      	ldr	r0, [r7, #4]
 8016b5c:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 8016b5e:	e00f      	b.n	8016b80 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	331c      	adds	r3, #28
 8016b64:	4618      	mov	r0, r3
 8016b66:	f004 f9cc 	bl	801af02 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8016b6a:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d006      	beq.n	8016b80 <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	33d4      	adds	r3, #212	; 0xd4
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	68f9      	ldr	r1, [r7, #12]
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	4798      	blx	r3
}
 8016b80:	bf00      	nop
 8016b82:	3710      	adds	r7, #16
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}

08016b88 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	33ec      	adds	r3, #236	; 0xec
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	2102      	movs	r1, #2
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	4798      	blx	r3
}
 8016b9e:	bf00      	nop
 8016ba0:	3708      	adds	r7, #8
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}

08016ba6 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 8016ba6:	b580      	push	{r7, lr}
 8016ba8:	b082      	sub	sp, #8
 8016baa:	af00      	add	r7, sp, #0
 8016bac:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	699b      	ldr	r3, [r3, #24]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d00b      	beq.n	8016bce <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	699a      	ldr	r2, [r3, #24]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	699b      	ldr	r3, [r3, #24]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	33ec      	adds	r3, #236	; 0xec
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	4610      	mov	r0, r2
 8016bc6:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	331c      	adds	r3, #28
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f004 f85c 	bl	801ac90 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 8016bd8:	bf00      	nop
 8016bda:	3708      	adds	r7, #8
 8016bdc:	46bd      	mov	sp, r7
 8016bde:	bd80      	pop	{r7, pc}

08016be0 <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 8016be0:	b590      	push	{r4, r7, lr}
 8016be2:	b091      	sub	sp, #68	; 0x44
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	6039      	str	r1, [r7, #0]
    setName(name);
 8016bea:	6839      	ldr	r1, [r7, #0]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f7ff fdb3 	bl	8016758 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	33ec      	adds	r3, #236	; 0xec
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	331c      	adds	r3, #28
 8016c04:	6839      	ldr	r1, [r7, #0]
 8016c06:	4618      	mov	r0, r3
 8016c08:	f003 ffec 	bl	801abe4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	331c      	adds	r3, #28
 8016c10:	4618      	mov	r0, r3
 8016c12:	f003 fe7c 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016c16:	4603      	mov	r3, r0
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d01d      	beq.n	8016c58 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	33cc      	adds	r3, #204	; 0xcc
 8016c22:	681b      	ldr	r3, [r3, #0]
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	4798      	blx	r3
 8016c28:	4601      	mov	r1, r0
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c2e:	f107 000c 	add.w	r0, r7, #12
 8016c32:	683a      	ldr	r2, [r7, #0]
 8016c34:	f004 fe24 	bl	801b880 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	33dc      	adds	r3, #220	; 0xdc
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	f107 020c 	add.w	r2, r7, #12
 8016c44:	4611      	mov	r1, r2
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	4798      	blx	r3
        return *this;
 8016c4a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8016c4c:	f107 030c 	add.w	r3, r7, #12
 8016c50:	4618      	mov	r0, r3
 8016c52:	f001 ff4b 	bl	8018aec <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8016c56:	e006      	b.n	8016c66 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	33d8      	adds	r3, #216	; 0xd8
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	6878      	ldr	r0, [r7, #4]
 8016c62:	4798      	blx	r3

    return *this;
 8016c64:	687c      	ldr	r4, [r7, #4]
 8016c66:	4623      	mov	r3, r4
}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3744      	adds	r7, #68	; 0x44
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd90      	pop	{r4, r7, pc}

08016c70 <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 8016c70:	b480      	push	{r7}
 8016c72:	b083      	sub	sp, #12
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	6039      	str	r1, [r7, #0]
    return *this;
 8016c7a:	687b      	ldr	r3, [r7, #4]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	370c      	adds	r7, #12
 8016c80:	46bd      	mov	sp, r7
 8016c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c86:	4770      	bx	lr

08016c88 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 8016c88:	b590      	push	{r4, r7, lr}
 8016c8a:	b097      	sub	sp, #92	; 0x5c
 8016c8c:	af02      	add	r7, sp, #8
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	33c0      	adds	r3, #192	; 0xc0
 8016c98:	681b      	ldr	r3, [r3, #0]
 8016c9a:	6878      	ldr	r0, [r7, #4]
 8016c9c:	4798      	blx	r3
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d164      	bne.n	8016d6e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	33ec      	adds	r3, #236	; 0xec
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	2100      	movs	r1, #0
 8016cae:	6878      	ldr	r0, [r7, #4]
 8016cb0:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	33e8      	adds	r3, #232	; 0xe8
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	331c      	adds	r3, #28
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f004 f86b 	bl	801ada0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	331c      	adds	r3, #28
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f003 fe1d 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d02b      	beq.n	8016d32 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	33cc      	adds	r3, #204	; 0xcc
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	6878      	ldr	r0, [r7, #4]
 8016ce4:	4798      	blx	r3
 8016ce6:	4604      	mov	r4, r0
 8016ce8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016cec:	6879      	ldr	r1, [r7, #4]
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7ff fd41 	bl	8016776 <_ZNK21MockCheckedActualCall7getNameEv>
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016cf8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016cfc:	f107 000c 	add.w	r0, r7, #12
 8016d00:	9300      	str	r3, [sp, #0]
 8016d02:	683b      	ldr	r3, [r7, #0]
 8016d04:	4621      	mov	r1, r4
 8016d06:	f004 fe7f 	bl	801ba08 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016d0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7f5 f907 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	33dc      	adds	r3, #220	; 0xdc
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f107 020c 	add.w	r2, r7, #12
 8016d20:	4611      	mov	r1, r2
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8016d26:	f107 030c 	add.w	r3, r7, #12
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f001 ff00 	bl	8018b30 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8016d30:	e01e      	b.n	8016d70 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	f103 041c 	add.w	r4, r3, #28
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	335c      	adds	r3, #92	; 0x5c
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016d44:	6839      	ldr	r1, [r7, #0]
 8016d46:	4610      	mov	r0, r2
 8016d48:	4798      	blx	r3
 8016d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016d4e:	4619      	mov	r1, r3
 8016d50:	4620      	mov	r0, r4
 8016d52:	f004 f9b8 	bl	801b0c6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8016d56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	f7f5 f8e1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	33d8      	adds	r3, #216	; 0xd8
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	6878      	ldr	r0, [r7, #4]
 8016d6a:	4798      	blx	r3
 8016d6c:	e000      	b.n	8016d70 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 8016d6e:	bf00      	nop
}
 8016d70:	3754      	adds	r7, #84	; 0x54
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd90      	pop	{r4, r7, pc}

08016d76 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8016d76:	b590      	push	{r4, r7, lr}
 8016d78:	b097      	sub	sp, #92	; 0x5c
 8016d7a:	af02      	add	r7, sp, #8
 8016d7c:	6078      	str	r0, [r7, #4]
 8016d7e:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	33c0      	adds	r3, #192	; 0xc0
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	6878      	ldr	r0, [r7, #4]
 8016d8a:	4798      	blx	r3
 8016d8c:	4603      	mov	r3, r0
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d164      	bne.n	8016e5c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	33ec      	adds	r3, #236	; 0xec
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	33e8      	adds	r3, #232	; 0xe8
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	6878      	ldr	r0, [r7, #4]
 8016daa:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	331c      	adds	r3, #28
 8016db0:	6839      	ldr	r1, [r7, #0]
 8016db2:	4618      	mov	r0, r3
 8016db4:	f004 f820 	bl	801adf8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	331c      	adds	r3, #28
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f003 fda6 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d02b      	beq.n	8016e20 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	33cc      	adds	r3, #204	; 0xcc
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	4798      	blx	r3
 8016dd4:	4604      	mov	r4, r0
 8016dd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016dda:	6879      	ldr	r1, [r7, #4]
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ff fcca 	bl	8016776 <_ZNK21MockCheckedActualCall7getNameEv>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016de6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8016dea:	f107 000c 	add.w	r0, r7, #12
 8016dee:	9300      	str	r3, [sp, #0]
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	4621      	mov	r1, r4
 8016df4:	f004 ff6a 	bl	801bccc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8016df8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f7f5 f890 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	33dc      	adds	r3, #220	; 0xdc
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	f107 020c 	add.w	r2, r7, #12
 8016e0e:	4611      	mov	r1, r2
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8016e14:	f107 030c 	add.w	r3, r7, #12
 8016e18:	4618      	mov	r0, r3
 8016e1a:	f001 feab 	bl	8018b74 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8016e1e:	e01e      	b.n	8016e5e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	f103 041c 	add.w	r4, r3, #28
 8016e26:	683b      	ldr	r3, [r7, #0]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	335c      	adds	r3, #92	; 0x5c
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8016e32:	6839      	ldr	r1, [r7, #0]
 8016e34:	4610      	mov	r0, r2
 8016e36:	4798      	blx	r3
 8016e38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e3c:	4619      	mov	r1, r3
 8016e3e:	4620      	mov	r0, r4
 8016e40:	f004 f95e 	bl	801b100 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8016e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016e48:	4618      	mov	r0, r3
 8016e4a:	f7f5 f86a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	33d8      	adds	r3, #216	; 0xd8
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	6878      	ldr	r0, [r7, #4]
 8016e58:	4798      	blx	r3
 8016e5a:	e000      	b.n	8016e5e <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8016e5c:	bf00      	nop
}
 8016e5e:	3754      	adds	r7, #84	; 0x54
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd90      	pop	{r4, r7, pc}

08016e64 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8016e64:	b590      	push	{r4, r7, lr}
 8016e66:	b093      	sub	sp, #76	; 0x4c
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	60f8      	str	r0, [r7, #12]
 8016e6c:	60b9      	str	r1, [r7, #8]
 8016e6e:	4613      	mov	r3, r2
 8016e70:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 8016e72:	f107 0310 	add.w	r3, r7, #16
 8016e76:	68b9      	ldr	r1, [r7, #8]
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f005 f9bf 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016e7e:	79fa      	ldrb	r2, [r7, #7]
 8016e80:	f107 0310 	add.w	r3, r7, #16
 8016e84:	4611      	mov	r1, r2
 8016e86:	4618      	mov	r0, r3
 8016e88:	f005 fa0a 	bl	801c2a0 <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	33e0      	adds	r3, #224	; 0xe0
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	f107 0210 	add.w	r2, r7, #16
 8016e98:	4611      	mov	r1, r2
 8016e9a:	68f8      	ldr	r0, [r7, #12]
 8016e9c:	4798      	blx	r3
    return *this;
 8016e9e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016ea0:	f107 0310 	add.w	r3, r7, #16
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f005 f9d3 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016eaa:	4623      	mov	r3, r4
}
 8016eac:	4618      	mov	r0, r3
 8016eae:	374c      	adds	r7, #76	; 0x4c
 8016eb0:	46bd      	mov	sp, r7
 8016eb2:	bd90      	pop	{r4, r7, pc}

08016eb4 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8016eb4:	b590      	push	{r4, r7, lr}
 8016eb6:	b093      	sub	sp, #76	; 0x4c
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016ec0:	f107 0310 	add.w	r3, r7, #16
 8016ec4:	68b9      	ldr	r1, [r7, #8]
 8016ec6:	4618      	mov	r0, r3
 8016ec8:	f005 f998 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016ecc:	f107 0310 	add.w	r3, r7, #16
 8016ed0:	6879      	ldr	r1, [r7, #4]
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f005 fa08 	bl	801c2e8 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	33e0      	adds	r3, #224	; 0xe0
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	f107 0210 	add.w	r2, r7, #16
 8016ee4:	4611      	mov	r1, r2
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	4798      	blx	r3
    return *this;
 8016eea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016eec:	f107 0310 	add.w	r3, r7, #16
 8016ef0:	4618      	mov	r0, r3
 8016ef2:	f005 f9ad 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016ef6:	4623      	mov	r3, r4
}
 8016ef8:	4618      	mov	r0, r3
 8016efa:	374c      	adds	r7, #76	; 0x4c
 8016efc:	46bd      	mov	sp, r7
 8016efe:	bd90      	pop	{r4, r7, pc}

08016f00 <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 8016f00:	b590      	push	{r4, r7, lr}
 8016f02:	b093      	sub	sp, #76	; 0x4c
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	60f8      	str	r0, [r7, #12]
 8016f08:	60b9      	str	r1, [r7, #8]
 8016f0a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016f0c:	f107 0310 	add.w	r3, r7, #16
 8016f10:	68b9      	ldr	r1, [r7, #8]
 8016f12:	4618      	mov	r0, r3
 8016f14:	f005 f972 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016f18:	f107 0310 	add.w	r3, r7, #16
 8016f1c:	6879      	ldr	r1, [r7, #4]
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f005 fa04 	bl	801c32c <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	33e0      	adds	r3, #224	; 0xe0
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	f107 0210 	add.w	r2, r7, #16
 8016f30:	4611      	mov	r1, r2
 8016f32:	68f8      	ldr	r0, [r7, #12]
 8016f34:	4798      	blx	r3
    return *this;
 8016f36:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016f38:	f107 0310 	add.w	r3, r7, #16
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f005 f987 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f42:	4623      	mov	r3, r4
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	374c      	adds	r7, #76	; 0x4c
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	bd90      	pop	{r4, r7, pc}

08016f4c <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016f4c:	b590      	push	{r4, r7, lr}
 8016f4e:	b093      	sub	sp, #76	; 0x4c
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	60f8      	str	r0, [r7, #12]
 8016f54:	60b9      	str	r1, [r7, #8]
 8016f56:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016f58:	f107 0310 	add.w	r3, r7, #16
 8016f5c:	68b9      	ldr	r1, [r7, #8]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f005 f94c 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016f64:	f107 0310 	add.w	r3, r7, #16
 8016f68:	6879      	ldr	r1, [r7, #4]
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f005 fa22 	bl	801c3b4 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	33e0      	adds	r3, #224	; 0xe0
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	f107 0210 	add.w	r2, r7, #16
 8016f7c:	4611      	mov	r1, r2
 8016f7e:	68f8      	ldr	r0, [r7, #12]
 8016f80:	4798      	blx	r3
    return *this;
 8016f82:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016f84:	f107 0310 	add.w	r3, r7, #16
 8016f88:	4618      	mov	r0, r3
 8016f8a:	f005 f961 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016f8e:	4623      	mov	r3, r4
}
 8016f90:	4618      	mov	r0, r3
 8016f92:	374c      	adds	r7, #76	; 0x4c
 8016f94:	46bd      	mov	sp, r7
 8016f96:	bd90      	pop	{r4, r7, pc}

08016f98 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8016f98:	b590      	push	{r4, r7, lr}
 8016f9a:	b093      	sub	sp, #76	; 0x4c
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	60f8      	str	r0, [r7, #12]
 8016fa0:	60b9      	str	r1, [r7, #8]
 8016fa2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8016fa4:	f107 0310 	add.w	r3, r7, #16
 8016fa8:	68b9      	ldr	r1, [r7, #8]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f005 f926 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8016fb0:	f107 0310 	add.w	r3, r7, #16
 8016fb4:	6879      	ldr	r1, [r7, #4]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f005 f9da 	bl	801c370 <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	33e0      	adds	r3, #224	; 0xe0
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	f107 0210 	add.w	r2, r7, #16
 8016fc8:	4611      	mov	r1, r2
 8016fca:	68f8      	ldr	r0, [r7, #12]
 8016fcc:	4798      	blx	r3
    return *this;
 8016fce:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8016fd0:	f107 0310 	add.w	r3, r7, #16
 8016fd4:	4618      	mov	r0, r3
 8016fd6:	f005 f93b 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8016fda:	4623      	mov	r3, r4
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	374c      	adds	r7, #76	; 0x4c
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd90      	pop	{r4, r7, pc}

08016fe4 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016fe4:	b5b0      	push	{r4, r5, r7, lr}
 8016fe6:	b086      	sub	sp, #24
 8016fe8:	af02      	add	r7, sp, #8
 8016fea:	60f8      	str	r0, [r7, #12]
 8016fec:	60b9      	str	r1, [r7, #8]
 8016fee:	4639      	mov	r1, r7
 8016ff0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016ff4:	f7fb ffc0 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8016ff8:	4604      	mov	r4, r0
 8016ffa:	6823      	ldr	r3, [r4, #0]
 8016ffc:	3368      	adds	r3, #104	; 0x68
 8016ffe:	681d      	ldr	r5, [r3, #0]
 8017000:	f7fb ffca 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017004:	4603      	mov	r3, r0
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	f44f 7385 	mov.w	r3, #266	; 0x10a
 801700c:	4a04      	ldr	r2, [pc, #16]	; (8017020 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801700e:	4905      	ldr	r1, [pc, #20]	; (8017024 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8017010:	4620      	mov	r0, r4
 8017012:	47a8      	blx	r5
    return *this;
 8017014:	68fb      	ldr	r3, [r7, #12]
}
 8017016:	4618      	mov	r0, r3
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bdb0      	pop	{r4, r5, r7, pc}
 801701e:	bf00      	nop
 8017020:	080247b4 	.word	0x080247b4
 8017024:	080247d0 	.word	0x080247d0

08017028 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017028:	b5b0      	push	{r4, r5, r7, lr}
 801702a:	b086      	sub	sp, #24
 801702c:	af02      	add	r7, sp, #8
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	4639      	mov	r1, r7
 8017034:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017038:	f7fb ff9e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801703c:	4604      	mov	r4, r0
 801703e:	6823      	ldr	r3, [r4, #0]
 8017040:	3368      	adds	r3, #104	; 0x68
 8017042:	681d      	ldr	r5, [r3, #0]
 8017044:	f7fb ffa8 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017048:	4603      	mov	r3, r0
 801704a:	9300      	str	r3, [sp, #0]
 801704c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017050:	4a04      	ldr	r2, [pc, #16]	; (8017064 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017052:	4905      	ldr	r1, [pc, #20]	; (8017068 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8017054:	4620      	mov	r0, r4
 8017056:	47a8      	blx	r5
    return *this;
 8017058:	68fb      	ldr	r3, [r7, #12]
}
 801705a:	4618      	mov	r0, r3
 801705c:	3710      	adds	r7, #16
 801705e:	46bd      	mov	sp, r7
 8017060:	bdb0      	pop	{r4, r5, r7, pc}
 8017062:	bf00      	nop
 8017064:	080247b4 	.word	0x080247b4
 8017068:	080247fc 	.word	0x080247fc

0801706c <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 801706c:	b590      	push	{r4, r7, lr}
 801706e:	b093      	sub	sp, #76	; 0x4c
 8017070:	af00      	add	r7, sp, #0
 8017072:	60f8      	str	r0, [r7, #12]
 8017074:	60b9      	str	r1, [r7, #8]
 8017076:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 801707a:	f107 0310 	add.w	r3, r7, #16
 801707e:	68b9      	ldr	r1, [r7, #8]
 8017080:	4618      	mov	r0, r3
 8017082:	f005 f8bb 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017086:	f107 0310 	add.w	r3, r7, #16
 801708a:	ed97 0b00 	vldr	d0, [r7]
 801708e:	4618      	mov	r0, r3
 8017090:	f005 f9ee 	bl	801c470 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	33e0      	adds	r3, #224	; 0xe0
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f107 0210 	add.w	r2, r7, #16
 80170a0:	4611      	mov	r1, r2
 80170a2:	68f8      	ldr	r0, [r7, #12]
 80170a4:	4798      	blx	r3
    return *this;
 80170a6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80170a8:	f107 0310 	add.w	r3, r7, #16
 80170ac:	4618      	mov	r0, r3
 80170ae:	f005 f8cf 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 80170b2:	4623      	mov	r3, r4
}
 80170b4:	4618      	mov	r0, r3
 80170b6:	374c      	adds	r7, #76	; 0x4c
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd90      	pop	{r4, r7, pc}

080170bc <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 80170bc:	b590      	push	{r4, r7, lr}
 80170be:	b093      	sub	sp, #76	; 0x4c
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	60b9      	str	r1, [r7, #8]
 80170c6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80170c8:	f107 0310 	add.w	r3, r7, #16
 80170cc:	68b9      	ldr	r1, [r7, #8]
 80170ce:	4618      	mov	r0, r3
 80170d0:	f005 f894 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80170d4:	f107 0310 	add.w	r3, r7, #16
 80170d8:	6879      	ldr	r1, [r7, #4]
 80170da:	4618      	mov	r0, r3
 80170dc:	f005 fa72 	bl	801c5c4 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	33e0      	adds	r3, #224	; 0xe0
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	f107 0210 	add.w	r2, r7, #16
 80170ec:	4611      	mov	r1, r2
 80170ee:	68f8      	ldr	r0, [r7, #12]
 80170f0:	4798      	blx	r3
    return *this;
 80170f2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80170f4:	f107 0310 	add.w	r3, r7, #16
 80170f8:	4618      	mov	r0, r3
 80170fa:	f005 f8a9 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 80170fe:	4623      	mov	r3, r4
}
 8017100:	4618      	mov	r0, r3
 8017102:	374c      	adds	r7, #76	; 0x4c
 8017104:	46bd      	mov	sp, r7
 8017106:	bd90      	pop	{r4, r7, pc}

08017108 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017108:	b590      	push	{r4, r7, lr}
 801710a:	b093      	sub	sp, #76	; 0x4c
 801710c:	af00      	add	r7, sp, #0
 801710e:	60f8      	str	r0, [r7, #12]
 8017110:	60b9      	str	r1, [r7, #8]
 8017112:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017114:	f107 0310 	add.w	r3, r7, #16
 8017118:	68b9      	ldr	r1, [r7, #8]
 801711a:	4618      	mov	r0, r3
 801711c:	f005 f86e 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8017120:	f107 0310 	add.w	r3, r7, #16
 8017124:	6879      	ldr	r1, [r7, #4]
 8017126:	4618      	mov	r0, r3
 8017128:	f005 f9e6 	bl	801c4f8 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	33e0      	adds	r3, #224	; 0xe0
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	f107 0210 	add.w	r2, r7, #16
 8017138:	4611      	mov	r1, r2
 801713a:	68f8      	ldr	r0, [r7, #12]
 801713c:	4798      	blx	r3
    return *this;
 801713e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017140:	f107 0310 	add.w	r3, r7, #16
 8017144:	4618      	mov	r0, r3
 8017146:	f005 f883 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 801714a:	4623      	mov	r3, r4
}
 801714c:	4618      	mov	r0, r3
 801714e:	374c      	adds	r7, #76	; 0x4c
 8017150:	46bd      	mov	sp, r7
 8017152:	bd90      	pop	{r4, r7, pc}

08017154 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017154:	b590      	push	{r4, r7, lr}
 8017156:	b093      	sub	sp, #76	; 0x4c
 8017158:	af00      	add	r7, sp, #0
 801715a:	60f8      	str	r0, [r7, #12]
 801715c:	60b9      	str	r1, [r7, #8]
 801715e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8017160:	f107 0310 	add.w	r3, r7, #16
 8017164:	68b9      	ldr	r1, [r7, #8]
 8017166:	4618      	mov	r0, r3
 8017168:	f005 f848 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801716c:	f107 0310 	add.w	r3, r7, #16
 8017170:	6879      	ldr	r1, [r7, #4]
 8017172:	4618      	mov	r0, r3
 8017174:	f005 f9e2 	bl	801c53c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	33e0      	adds	r3, #224	; 0xe0
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f107 0210 	add.w	r2, r7, #16
 8017184:	4611      	mov	r1, r2
 8017186:	68f8      	ldr	r0, [r7, #12]
 8017188:	4798      	blx	r3
    return *this;
 801718a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 801718c:	f107 0310 	add.w	r3, r7, #16
 8017190:	4618      	mov	r0, r3
 8017192:	f005 f85d 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017196:	4623      	mov	r3, r4
}
 8017198:	4618      	mov	r0, r3
 801719a:	374c      	adds	r7, #76	; 0x4c
 801719c:	46bd      	mov	sp, r7
 801719e:	bd90      	pop	{r4, r7, pc}

080171a0 <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 80171a0:	b590      	push	{r4, r7, lr}
 80171a2:	b093      	sub	sp, #76	; 0x4c
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80171ac:	f107 0310 	add.w	r3, r7, #16
 80171b0:	68b9      	ldr	r1, [r7, #8]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f005 f822 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80171b8:	f107 0310 	add.w	r3, r7, #16
 80171bc:	6879      	ldr	r1, [r7, #4]
 80171be:	4618      	mov	r0, r3
 80171c0:	f005 f9de 	bl	801c580 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	33e0      	adds	r3, #224	; 0xe0
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	f107 0210 	add.w	r2, r7, #16
 80171d0:	4611      	mov	r1, r2
 80171d2:	68f8      	ldr	r0, [r7, #12]
 80171d4:	4798      	blx	r3
    return *this;
 80171d6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80171d8:	f107 0310 	add.w	r3, r7, #16
 80171dc:	4618      	mov	r0, r3
 80171de:	f005 f837 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 80171e2:	4623      	mov	r3, r4
}
 80171e4:	4618      	mov	r0, r3
 80171e6:	374c      	adds	r7, #76	; 0x4c
 80171e8:	46bd      	mov	sp, r7
 80171ea:	bd90      	pop	{r4, r7, pc}

080171ec <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 80171ec:	b590      	push	{r4, r7, lr}
 80171ee:	b093      	sub	sp, #76	; 0x4c
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	607a      	str	r2, [r7, #4]
 80171f8:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 80171fa:	f107 0310 	add.w	r3, r7, #16
 80171fe:	68b9      	ldr	r1, [r7, #8]
 8017200:	4618      	mov	r0, r3
 8017202:	f004 fffb 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8017206:	f107 0310 	add.w	r3, r7, #16
 801720a:	683a      	ldr	r2, [r7, #0]
 801720c:	6879      	ldr	r1, [r7, #4]
 801720e:	4618      	mov	r0, r3
 8017210:	f005 f9fa 	bl	801c608 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	33e0      	adds	r3, #224	; 0xe0
 801721a:	681b      	ldr	r3, [r3, #0]
 801721c:	f107 0210 	add.w	r2, r7, #16
 8017220:	4611      	mov	r1, r2
 8017222:	68f8      	ldr	r0, [r7, #12]
 8017224:	4798      	blx	r3
    return *this;
 8017226:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8017228:	f107 0310 	add.w	r3, r7, #16
 801722c:	4618      	mov	r0, r3
 801722e:	f005 f80f 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 8017232:	4623      	mov	r3, r4
}
 8017234:	4618      	mov	r0, r3
 8017236:	374c      	adds	r7, #76	; 0x4c
 8017238:	46bd      	mov	sp, r7
 801723a:	bd90      	pop	{r4, r7, pc}

0801723c <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 801723c:	b590      	push	{r4, r7, lr}
 801723e:	b0a1      	sub	sp, #132	; 0x84
 8017240:	af00      	add	r7, sp, #0
 8017242:	60f8      	str	r0, [r7, #12]
 8017244:	60b9      	str	r1, [r7, #8]
 8017246:	607a      	str	r2, [r7, #4]
 8017248:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 801724a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801724e:	6879      	ldr	r1, [r7, #4]
 8017250:	4618      	mov	r0, r3
 8017252:	f004 ffd3 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8017256:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801725a:	683a      	ldr	r2, [r7, #0]
 801725c:	68b9      	ldr	r1, [r7, #8]
 801725e:	4618      	mov	r0, r3
 8017260:	f005 f9f8 	bl	801c654 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8017264:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017268:	4618      	mov	r0, r3
 801726a:	f005 fdc5 	bl	801cdf8 <_ZNK14MockNamedValue13getComparatorEv>
 801726e:	4603      	mov	r3, r0
 8017270:	2b00      	cmp	r3, #0
 8017272:	bf0c      	ite	eq
 8017274:	2301      	moveq	r3, #1
 8017276:	2300      	movne	r3, #0
 8017278:	b2db      	uxtb	r3, r3
 801727a:	2b00      	cmp	r3, #0
 801727c:	d01c      	beq.n	80172b8 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	33cc      	adds	r3, #204	; 0xcc
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	68f8      	ldr	r0, [r7, #12]
 8017288:	4798      	blx	r3
 801728a:	4601      	mov	r1, r0
 801728c:	f107 0314 	add.w	r3, r7, #20
 8017290:	68ba      	ldr	r2, [r7, #8]
 8017292:	4618      	mov	r0, r3
 8017294:	f004 fed6 	bl	801c044 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8017298:	68fb      	ldr	r3, [r7, #12]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	33dc      	adds	r3, #220	; 0xdc
 801729e:	681b      	ldr	r3, [r3, #0]
 80172a0:	f107 0214 	add.w	r2, r7, #20
 80172a4:	4611      	mov	r1, r2
 80172a6:	68f8      	ldr	r0, [r7, #12]
 80172a8:	4798      	blx	r3
        return *this;
 80172aa:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 80172ac:	f107 0314 	add.w	r3, r7, #20
 80172b0:	4618      	mov	r0, r3
 80172b2:	f001 fc81 	bl	8018bb8 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 80172b6:	e009      	b.n	80172cc <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	33e0      	adds	r3, #224	; 0xe0
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80172c4:	4611      	mov	r1, r2
 80172c6:	68f8      	ldr	r0, [r7, #12]
 80172c8:	4798      	blx	r3
    return *this;
 80172ca:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80172cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80172d0:	4618      	mov	r0, r3
 80172d2:	f004 ffbd 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 80172d6:	4623      	mov	r3, r4
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3784      	adds	r7, #132	; 0x84
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd90      	pop	{r4, r7, pc}

080172e0 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 80172e0:	b590      	push	{r4, r7, lr}
 80172e2:	b095      	sub	sp, #84	; 0x54
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	33f0      	adds	r3, #240	; 0xf0
 80172f2:	681c      	ldr	r4, [r3, #0]
 80172f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80172f8:	4917      	ldr	r1, [pc, #92]	; (8017358 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 80172fa:	4618      	mov	r0, r3
 80172fc:	f7f4 fa59 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8017300:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	68b9      	ldr	r1, [r7, #8]
 8017308:	68f8      	ldr	r0, [r7, #12]
 801730a:	47a0      	blx	r4
 801730c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017310:	4618      	mov	r0, r3
 8017312:	f7f4 fe06 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8017316:	f107 0310 	add.w	r3, r7, #16
 801731a:	68b9      	ldr	r1, [r7, #8]
 801731c:	4618      	mov	r0, r3
 801731e:	f004 ff6d 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8017322:	f107 0310 	add.w	r3, r7, #16
 8017326:	6879      	ldr	r1, [r7, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	f005 f8e5 	bl	801c4f8 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	33e4      	adds	r3, #228	; 0xe4
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	f107 0210 	add.w	r2, r7, #16
 801733a:	4611      	mov	r1, r2
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	4798      	blx	r3

    return *this;
 8017340:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8017342:	f107 0310 	add.w	r3, r7, #16
 8017346:	4618      	mov	r0, r3
 8017348:	f004 ff82 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 801734c:	4623      	mov	r3, r4
}
 801734e:	4618      	mov	r0, r3
 8017350:	3754      	adds	r7, #84	; 0x54
 8017352:	46bd      	mov	sp, r7
 8017354:	bd90      	pop	{r4, r7, pc}
 8017356:	bf00      	nop
 8017358:	080247ac 	.word	0x080247ac

0801735c <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 801735c:	b590      	push	{r4, r7, lr}
 801735e:	b093      	sub	sp, #76	; 0x4c
 8017360:	af00      	add	r7, sp, #0
 8017362:	60f8      	str	r0, [r7, #12]
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
 8017368:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	33f0      	adds	r3, #240	; 0xf0
 8017370:	681c      	ldr	r4, [r3, #0]
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	68ba      	ldr	r2, [r7, #8]
 8017376:	6879      	ldr	r1, [r7, #4]
 8017378:	68f8      	ldr	r0, [r7, #12]
 801737a:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 801737c:	f107 0310 	add.w	r3, r7, #16
 8017380:	6879      	ldr	r1, [r7, #4]
 8017382:	4618      	mov	r0, r3
 8017384:	f004 ff3a 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8017388:	f107 0310 	add.w	r3, r7, #16
 801738c:	683a      	ldr	r2, [r7, #0]
 801738e:	68b9      	ldr	r1, [r7, #8]
 8017390:	4618      	mov	r0, r3
 8017392:	f005 f95f 	bl	801c654 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	33e4      	adds	r3, #228	; 0xe4
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	f107 0210 	add.w	r2, r7, #16
 80173a2:	4611      	mov	r1, r2
 80173a4:	68f8      	ldr	r0, [r7, #12]
 80173a6:	4798      	blx	r3

    return *this;
 80173a8:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 80173aa:	f107 0310 	add.w	r3, r7, #16
 80173ae:	4618      	mov	r0, r3
 80173b0:	f004 ff4e 	bl	801c250 <_ZN14MockNamedValueD1Ev>
    return *this;
 80173b4:	4623      	mov	r3, r4
}
 80173b6:	4618      	mov	r0, r3
 80173b8:	374c      	adds	r7, #76	; 0x4c
 80173ba:	46bd      	mov	sp, r7
 80173bc:	bd90      	pop	{r4, r7, pc}

080173be <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 80173be:	b480      	push	{r7}
 80173c0:	b083      	sub	sp, #12
 80173c2:	af00      	add	r7, sp, #0
 80173c4:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	7d1b      	ldrb	r3, [r3, #20]
 80173ca:	2b02      	cmp	r3, #2
 80173cc:	bf0c      	ite	eq
 80173ce:	2301      	moveq	r3, #1
 80173d0:	2300      	movne	r3, #0
 80173d2:	b2db      	uxtb	r3, r3
}
 80173d4:	4618      	mov	r0, r3
 80173d6:	370c      	adds	r7, #12
 80173d8:	46bd      	mov	sp, r7
 80173da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173de:	4770      	bx	lr

080173e0 <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 80173e0:	b480      	push	{r7}
 80173e2:	b083      	sub	sp, #12
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	7d1b      	ldrb	r3, [r3, #20]
 80173ec:	2b01      	cmp	r3, #1
 80173ee:	bf0c      	ite	eq
 80173f0:	2301      	moveq	r3, #1
 80173f2:	2300      	movne	r3, #0
 80173f4:	b2db      	uxtb	r3, r3
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	370c      	adds	r7, #12
 80173fa:	46bd      	mov	sp, r7
 80173fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017400:	4770      	bx	lr
	...

08017404 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8017404:	b5b0      	push	{r4, r5, r7, lr}
 8017406:	b096      	sub	sp, #88	; 0x58
 8017408:	af02      	add	r7, sp, #8
 801740a:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	7d5b      	ldrb	r3, [r3, #21]
 8017410:	2b00      	cmp	r3, #0
 8017412:	f040 80bc 	bne.w	801758e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2201      	movs	r2, #1
 801741a:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	7d1b      	ldrb	r3, [r3, #20]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d014      	beq.n	801744e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	7d1b      	ldrb	r3, [r3, #20]
 8017428:	2b02      	cmp	r3, #2
 801742a:	d10a      	bne.n	8017442 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	6998      	ldr	r0, [r3, #24]
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	699b      	ldr	r3, [r3, #24]
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	33d8      	adds	r3, #216	; 0xd8
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	687a      	ldr	r2, [r7, #4]
 801743c:	68d2      	ldr	r2, [r2, #12]
 801743e:	4611      	mov	r1, r2
 8017440:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	331c      	adds	r3, #28
 8017446:	4618      	mov	r0, r3
 8017448:	f003 fe07 	bl	801b05a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 801744c:	e0a0      	b.n	8017590 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	331c      	adds	r3, #28
 8017452:	4618      	mov	r0, r3
 8017454:	f003 fac3 	bl	801a9de <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8017458:	4603      	mov	r3, r0
 801745a:	2b00      	cmp	r3, #0
 801745c:	d00f      	beq.n	801747e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 801745e:	f7fb fd8b 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8017462:	4604      	mov	r4, r0
 8017464:	6823      	ldr	r3, [r4, #0]
 8017466:	3368      	adds	r3, #104	; 0x68
 8017468:	681d      	ldr	r5, [r3, #0]
 801746a:	f7fb fd95 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801746e:	4603      	mov	r3, r0
 8017470:	9300      	str	r3, [sp, #0]
 8017472:	f240 1385 	movw	r3, #389	; 0x185
 8017476:	4a48      	ldr	r2, [pc, #288]	; (8017598 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8017478:	4948      	ldr	r1, [pc, #288]	; (801759c <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 801747a:	4620      	mov	r0, r4
 801747c:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	331c      	adds	r3, #28
 8017482:	4618      	mov	r0, r3
 8017484:	f003 fd5f 	bl	801af46 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8017488:	4602      	mov	r2, r0
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	699b      	ldr	r3, [r3, #24]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d01f      	beq.n	80174d6 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	699a      	ldr	r2, [r3, #24]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	699b      	ldr	r3, [r3, #24]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	33e4      	adds	r3, #228	; 0xe4
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	4610      	mov	r0, r2
 80174a6:	4798      	blx	r3
        callHasSucceeded();
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	33d0      	adds	r3, #208	; 0xd0
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	6878      	ldr	r0, [r7, #4]
 80174b2:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	6998      	ldr	r0, [r3, #24]
 80174b8:	687b      	ldr	r3, [r7, #4]
 80174ba:	699b      	ldr	r3, [r3, #24]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	33d8      	adds	r3, #216	; 0xd8
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	687a      	ldr	r2, [r7, #4]
 80174c4:	68d2      	ldr	r2, [r2, #12]
 80174c6:	4611      	mov	r1, r2
 80174c8:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	331c      	adds	r3, #28
 80174ce:	4618      	mov	r0, r3
 80174d0:	f003 fdc3 	bl	801b05a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 80174d4:	e05c      	b.n	8017590 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	331c      	adds	r3, #28
 80174da:	4618      	mov	r0, r3
 80174dc:	f003 ffc4 	bl	801b468 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 80174e0:	4603      	mov	r3, r0
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d029      	beq.n	801753a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	33cc      	adds	r3, #204	; 0xcc
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	4798      	blx	r3
 80174f2:	4604      	mov	r4, r0
 80174f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80174f8:	6879      	ldr	r1, [r7, #4]
 80174fa:	4618      	mov	r0, r3
 80174fc:	f7ff f93b 	bl	8016776 <_ZNK21MockCheckedActualCall7getNameEv>
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017504:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017508:	f107 000c 	add.w	r0, r7, #12
 801750c:	4621      	mov	r1, r4
 801750e:	f004 fd21 	bl	801bf54 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8017512:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017516:	4618      	mov	r0, r3
 8017518:	f7f4 fd03 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	33dc      	adds	r3, #220	; 0xdc
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	f107 020c 	add.w	r2, r7, #12
 8017528:	4611      	mov	r1, r2
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801752e:	f107 030c 	add.w	r3, r7, #12
 8017532:	4618      	mov	r0, r3
 8017534:	f001 fb62 	bl	8018bfc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8017538:	e02a      	b.n	8017590 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	33cc      	adds	r3, #204	; 0xcc
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	4798      	blx	r3
 8017546:	4604      	mov	r4, r0
 8017548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801754c:	6879      	ldr	r1, [r7, #4]
 801754e:	4618      	mov	r0, r3
 8017550:	f7ff f911 	bl	8016776 <_ZNK21MockCheckedActualCall7getNameEv>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017558:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801755c:	f107 000c 	add.w	r0, r7, #12
 8017560:	4621      	mov	r1, r4
 8017562:	f004 fe05 	bl	801c170 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8017566:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801756a:	4618      	mov	r0, r3
 801756c:	f7f4 fcd9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	33dc      	adds	r3, #220	; 0xdc
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	f107 020c 	add.w	r2, r7, #12
 801757c:	4611      	mov	r1, r2
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8017582:	f107 030c 	add.w	r3, r7, #12
 8017586:	4618      	mov	r0, r3
 8017588:	f001 fb5a 	bl	8018c40 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801758c:	e000      	b.n	8017590 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 801758e:	bf00      	nop
    }
}
 8017590:	3750      	adds	r7, #80	; 0x50
 8017592:	46bd      	mov	sp, r7
 8017594:	bdb0      	pop	{r4, r5, r7, pc}
 8017596:	bf00      	nop
 8017598:	080247b4 	.word	0x080247b4
 801759c:	0802481c 	.word	0x0802481c

080175a0 <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 80175a0:	b480      	push	{r7}
 80175a2:	b083      	sub	sp, #12
 80175a4:	af00      	add	r7, sp, #0
 80175a6:	6078      	str	r0, [r7, #4]
 80175a8:	460b      	mov	r3, r1
 80175aa:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	78fa      	ldrb	r2, [r7, #3]
 80175b0:	751a      	strb	r2, [r3, #20]
}
 80175b2:	bf00      	nop
 80175b4:	370c      	adds	r7, #12
 80175b6:	46bd      	mov	sp, r7
 80175b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175bc:	4770      	bx	lr
	...

080175c0 <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b084      	sub	sp, #16
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	6039      	str	r1, [r7, #0]
    checkExpectations();
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	33c4      	adds	r3, #196	; 0xc4
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	6838      	ldr	r0, [r7, #0]
 80175d4:	4798      	blx	r3
    if (matchingExpectation_)
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	699b      	ldr	r3, [r3, #24]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d00a      	beq.n	80175f4 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	6999      	ldr	r1, [r3, #24]
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	699b      	ldr	r3, [r3, #24]
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	3394      	adds	r3, #148	; 0x94
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	687a      	ldr	r2, [r7, #4]
 80175ee:	4610      	mov	r0, r2
 80175f0:	4798      	blx	r3
 80175f2:	e010      	b.n	8017616 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 80175f4:	f107 0308 	add.w	r3, r7, #8
 80175f8:	4909      	ldr	r1, [pc, #36]	; (8017620 <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7f4 f8d9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8017600:	f107 0308 	add.w	r3, r7, #8
 8017604:	4619      	mov	r1, r3
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f004 fdf8 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 801760c:	f107 0308 	add.w	r3, r7, #8
 8017610:	4618      	mov	r0, r3
 8017612:	f7f4 fc86 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	3710      	adds	r7, #16
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	08024898 	.word	0x08024898

08017624 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8017624:	b580      	push	{r7, lr}
 8017626:	b082      	sub	sp, #8
 8017628:	af00      	add	r7, sp, #0
 801762a:	6078      	str	r0, [r7, #4]
 801762c:	460b      	mov	r3, r1
 801762e:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	3350      	adds	r3, #80	; 0x50
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	6878      	ldr	r0, [r7, #4]
 801763a:	4798      	blx	r3
 801763c:	4603      	mov	r3, r0
 801763e:	f083 0301 	eor.w	r3, r3, #1
 8017642:	b2db      	uxtb	r3, r3
 8017644:	2b00      	cmp	r3, #0
 8017646:	d001      	beq.n	801764c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8017648:	78fb      	ldrb	r3, [r7, #3]
 801764a:	e007      	b.n	801765c <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	335c      	adds	r3, #92	; 0x5c
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	6878      	ldr	r0, [r7, #4]
 8017656:	4798      	blx	r3
 8017658:	4603      	mov	r3, r0
 801765a:	bf00      	nop
}
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8017664:	b590      	push	{r4, r7, lr}
 8017666:	b091      	sub	sp, #68	; 0x44
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	3354      	adds	r3, #84	; 0x54
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	f107 0208 	add.w	r2, r7, #8
 8017678:	6879      	ldr	r1, [r7, #4]
 801767a:	4610      	mov	r0, r2
 801767c:	4798      	blx	r3
 801767e:	f107 0308 	add.w	r3, r7, #8
 8017682:	4618      	mov	r0, r3
 8017684:	f005 f896 	bl	801c7b4 <_ZNK14MockNamedValue12getBoolValueEv>
 8017688:	4603      	mov	r3, r0
 801768a:	461c      	mov	r4, r3
 801768c:	bf00      	nop
 801768e:	f107 0308 	add.w	r3, r7, #8
 8017692:	4618      	mov	r0, r3
 8017694:	f004 fddc 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017698:	4623      	mov	r3, r4
}
 801769a:	4618      	mov	r0, r3
 801769c:	3744      	adds	r7, #68	; 0x44
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd90      	pop	{r4, r7, pc}

080176a2 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 80176a2:	b580      	push	{r7, lr}
 80176a4:	b082      	sub	sp, #8
 80176a6:	af00      	add	r7, sp, #0
 80176a8:	6078      	str	r0, [r7, #4]
 80176aa:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	3350      	adds	r3, #80	; 0x50
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	6878      	ldr	r0, [r7, #4]
 80176b6:	4798      	blx	r3
 80176b8:	4603      	mov	r3, r0
 80176ba:	f083 0301 	eor.w	r3, r3, #1
 80176be:	b2db      	uxtb	r3, r3
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d001      	beq.n	80176c8 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80176c4:	683b      	ldr	r3, [r7, #0]
 80176c6:	e007      	b.n	80176d8 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	3364      	adds	r3, #100	; 0x64
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	6878      	ldr	r0, [r7, #4]
 80176d2:	4798      	blx	r3
 80176d4:	4603      	mov	r3, r0
 80176d6:	bf00      	nop
}
 80176d8:	4618      	mov	r0, r3
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80176e0:	b590      	push	{r4, r7, lr}
 80176e2:	b091      	sub	sp, #68	; 0x44
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 80176e8:	687b      	ldr	r3, [r7, #4]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	3354      	adds	r3, #84	; 0x54
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f107 0208 	add.w	r2, r7, #8
 80176f4:	6879      	ldr	r1, [r7, #4]
 80176f6:	4610      	mov	r0, r2
 80176f8:	4798      	blx	r3
 80176fa:	f107 0308 	add.w	r3, r7, #8
 80176fe:	4618      	mov	r0, r3
 8017700:	f005 f8d0 	bl	801c8a4 <_ZNK14MockNamedValue11getIntValueEv>
 8017704:	4604      	mov	r4, r0
 8017706:	bf00      	nop
 8017708:	f107 0308 	add.w	r3, r7, #8
 801770c:	4618      	mov	r0, r3
 801770e:	f004 fd9f 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017712:	4623      	mov	r3, r4
}
 8017714:	4618      	mov	r0, r3
 8017716:	3744      	adds	r7, #68	; 0x44
 8017718:	46bd      	mov	sp, r7
 801771a:	bd90      	pop	{r4, r7, pc}

0801771c <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 801771c:	b590      	push	{r4, r7, lr}
 801771e:	b091      	sub	sp, #68	; 0x44
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8017724:	687b      	ldr	r3, [r7, #4]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	3354      	adds	r3, #84	; 0x54
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f107 0208 	add.w	r2, r7, #8
 8017730:	6879      	ldr	r1, [r7, #4]
 8017732:	4610      	mov	r0, r2
 8017734:	4798      	blx	r3
 8017736:	f107 0308 	add.w	r3, r7, #8
 801773a:	4618      	mov	r0, r3
 801773c:	f005 f93c 	bl	801c9b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8017740:	4604      	mov	r4, r0
 8017742:	bf00      	nop
 8017744:	f107 0308 	add.w	r3, r7, #8
 8017748:	4618      	mov	r0, r3
 801774a:	f004 fd81 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 801774e:	4623      	mov	r3, r4
}
 8017750:	4618      	mov	r0, r3
 8017752:	3744      	adds	r7, #68	; 0x44
 8017754:	46bd      	mov	sp, r7
 8017756:	bd90      	pop	{r4, r7, pc}

08017758 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b082      	sub	sp, #8
 801775c:	af00      	add	r7, sp, #0
 801775e:	6078      	str	r0, [r7, #4]
 8017760:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	3350      	adds	r3, #80	; 0x50
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	4798      	blx	r3
 801776e:	4603      	mov	r3, r0
 8017770:	f083 0301 	eor.w	r3, r3, #1
 8017774:	b2db      	uxtb	r3, r3
 8017776:	2b00      	cmp	r3, #0
 8017778:	d001      	beq.n	801777e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	e007      	b.n	801778e <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	3368      	adds	r3, #104	; 0x68
 8017784:	681b      	ldr	r3, [r3, #0]
 8017786:	6878      	ldr	r0, [r7, #4]
 8017788:	4798      	blx	r3
 801778a:	4603      	mov	r3, r0
 801778c:	bf00      	nop
}
 801778e:	4618      	mov	r0, r3
 8017790:	3708      	adds	r7, #8
 8017792:	46bd      	mov	sp, r7
 8017794:	bd80      	pop	{r7, pc}

08017796 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 8017796:	b590      	push	{r4, r7, lr}
 8017798:	b091      	sub	sp, #68	; 0x44
 801779a:	af00      	add	r7, sp, #0
 801779c:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	3354      	adds	r3, #84	; 0x54
 80177a4:	681b      	ldr	r3, [r3, #0]
 80177a6:	f107 0208 	add.w	r2, r7, #8
 80177aa:	6879      	ldr	r1, [r7, #4]
 80177ac:	4610      	mov	r0, r2
 80177ae:	4798      	blx	r3
 80177b0:	f107 0308 	add.w	r3, r7, #8
 80177b4:	4618      	mov	r0, r3
 80177b6:	f005 f89d 	bl	801c8f4 <_ZNK14MockNamedValue15getLongIntValueEv>
 80177ba:	4604      	mov	r4, r0
 80177bc:	bf00      	nop
 80177be:	f107 0308 	add.w	r3, r7, #8
 80177c2:	4618      	mov	r0, r3
 80177c4:	f004 fd44 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 80177c8:	4623      	mov	r3, r4
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3744      	adds	r7, #68	; 0x44
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd90      	pop	{r4, r7, pc}

080177d2 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80177d2:	b580      	push	{r7, lr}
 80177d4:	b082      	sub	sp, #8
 80177d6:	af00      	add	r7, sp, #0
 80177d8:	6078      	str	r0, [r7, #4]
 80177da:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	3350      	adds	r3, #80	; 0x50
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	6878      	ldr	r0, [r7, #4]
 80177e6:	4798      	blx	r3
 80177e8:	4603      	mov	r3, r0
 80177ea:	f083 0301 	eor.w	r3, r3, #1
 80177ee:	b2db      	uxtb	r3, r3
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d001      	beq.n	80177f8 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 80177f4:	683b      	ldr	r3, [r7, #0]
 80177f6:	e007      	b.n	8017808 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	3370      	adds	r3, #112	; 0x70
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	6878      	ldr	r0, [r7, #4]
 8017802:	4798      	blx	r3
 8017804:	4603      	mov	r3, r0
 8017806:	bf00      	nop
}
 8017808:	4618      	mov	r0, r3
 801780a:	3708      	adds	r7, #8
 801780c:	46bd      	mov	sp, r7
 801780e:	bd80      	pop	{r7, pc}

08017810 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 8017810:	b5b0      	push	{r4, r5, r7, lr}
 8017812:	b084      	sub	sp, #16
 8017814:	af02      	add	r7, sp, #8
 8017816:	6078      	str	r0, [r7, #4]
 8017818:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801781a:	f7fb fbad 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801781e:	4604      	mov	r4, r0
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	3368      	adds	r3, #104	; 0x68
 8017824:	681d      	ldr	r5, [r3, #0]
 8017826:	f7fb fbb7 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801782a:	4603      	mov	r3, r0
 801782c:	9300      	str	r3, [sp, #0]
 801782e:	f240 13fb 	movw	r3, #507	; 0x1fb
 8017832:	4a06      	ldr	r2, [pc, #24]	; (801784c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8017834:	4906      	ldr	r1, [pc, #24]	; (8017850 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8017836:	4620      	mov	r0, r4
 8017838:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801783a:	2100      	movs	r1, #0
 801783c:	6878      	ldr	r0, [r7, #4]
 801783e:	f7f1 fffb 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
}
 8017842:	6878      	ldr	r0, [r7, #4]
 8017844:	3708      	adds	r7, #8
 8017846:	46bd      	mov	sp, r7
 8017848:	bdb0      	pop	{r4, r5, r7, pc}
 801784a:	bf00      	nop
 801784c:	080247b4 	.word	0x080247b4
 8017850:	080247d0 	.word	0x080247d0

08017854 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8017854:	b5b0      	push	{r4, r5, r7, lr}
 8017856:	b086      	sub	sp, #24
 8017858:	af02      	add	r7, sp, #8
 801785a:	60f8      	str	r0, [r7, #12]
 801785c:	60b9      	str	r1, [r7, #8]
 801785e:	4639      	mov	r1, r7
 8017860:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017864:	f7fb fb88 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8017868:	4604      	mov	r4, r0
 801786a:	6823      	ldr	r3, [r4, #0]
 801786c:	3368      	adds	r3, #104	; 0x68
 801786e:	681d      	ldr	r5, [r3, #0]
 8017870:	f7fb fb92 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017874:	4603      	mov	r3, r0
 8017876:	9300      	str	r3, [sp, #0]
 8017878:	f240 2301 	movw	r3, #513	; 0x201
 801787c:	4a06      	ldr	r2, [pc, #24]	; (8017898 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801787e:	4907      	ldr	r1, [pc, #28]	; (801789c <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 8017880:	4620      	mov	r0, r4
 8017882:	47a8      	blx	r5
    return default_value;
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	461a      	mov	r2, r3
 8017888:	463b      	mov	r3, r7
 801788a:	cb03      	ldmia	r3!, {r0, r1}
 801788c:	6010      	str	r0, [r2, #0]
 801788e:	6051      	str	r1, [r2, #4]
}
 8017890:	68f8      	ldr	r0, [r7, #12]
 8017892:	3710      	adds	r7, #16
 8017894:	46bd      	mov	sp, r7
 8017896:	bdb0      	pop	{r4, r5, r7, pc}
 8017898:	080247b4 	.word	0x080247b4
 801789c:	080247d0 	.word	0x080247d0

080178a0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 80178a0:	b5b0      	push	{r4, r5, r7, lr}
 80178a2:	b084      	sub	sp, #16
 80178a4:	af02      	add	r7, sp, #8
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80178aa:	f7fb fb65 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80178ae:	4604      	mov	r4, r0
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	3368      	adds	r3, #104	; 0x68
 80178b4:	681d      	ldr	r5, [r3, #0]
 80178b6:	f7fb fb6f 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80178ba:	4603      	mov	r3, r0
 80178bc:	9300      	str	r3, [sp, #0]
 80178be:	f240 2307 	movw	r3, #519	; 0x207
 80178c2:	4a06      	ldr	r2, [pc, #24]	; (80178dc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80178c4:	4906      	ldr	r1, [pc, #24]	; (80178e0 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80178c6:	4620      	mov	r0, r4
 80178c8:	47a8      	blx	r5
    return cpputest_longlong(0);
 80178ca:	2100      	movs	r1, #0
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7f1 ffa7 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
}
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	3708      	adds	r7, #8
 80178d6:	46bd      	mov	sp, r7
 80178d8:	bdb0      	pop	{r4, r5, r7, pc}
 80178da:	bf00      	nop
 80178dc:	080247b4 	.word	0x080247b4
 80178e0:	080247fc 	.word	0x080247fc

080178e4 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 80178e4:	b5b0      	push	{r4, r5, r7, lr}
 80178e6:	b086      	sub	sp, #24
 80178e8:	af02      	add	r7, sp, #8
 80178ea:	60f8      	str	r0, [r7, #12]
 80178ec:	60b9      	str	r1, [r7, #8]
 80178ee:	4639      	mov	r1, r7
 80178f0:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80178f4:	f7fb fb40 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80178f8:	4604      	mov	r4, r0
 80178fa:	6823      	ldr	r3, [r4, #0]
 80178fc:	3368      	adds	r3, #104	; 0x68
 80178fe:	681d      	ldr	r5, [r3, #0]
 8017900:	f7fb fb4a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017904:	4603      	mov	r3, r0
 8017906:	9300      	str	r3, [sp, #0]
 8017908:	f240 230d 	movw	r3, #525	; 0x20d
 801790c:	4a06      	ldr	r2, [pc, #24]	; (8017928 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801790e:	4907      	ldr	r1, [pc, #28]	; (801792c <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8017910:	4620      	mov	r0, r4
 8017912:	47a8      	blx	r5
    return default_value;
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	461a      	mov	r2, r3
 8017918:	463b      	mov	r3, r7
 801791a:	cb03      	ldmia	r3!, {r0, r1}
 801791c:	6010      	str	r0, [r2, #0]
 801791e:	6051      	str	r1, [r2, #4]
}
 8017920:	68f8      	ldr	r0, [r7, #12]
 8017922:	3710      	adds	r7, #16
 8017924:	46bd      	mov	sp, r7
 8017926:	bdb0      	pop	{r4, r5, r7, pc}
 8017928:	080247b4 	.word	0x080247b4
 801792c:	080247fc 	.word	0x080247fc

08017930 <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 8017930:	b580      	push	{r7, lr}
 8017932:	ed2d 8b02 	vpush	{d8}
 8017936:	b090      	sub	sp, #64	; 0x40
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	3354      	adds	r3, #84	; 0x54
 8017942:	681b      	ldr	r3, [r3, #0]
 8017944:	f107 0208 	add.w	r2, r7, #8
 8017948:	6879      	ldr	r1, [r7, #4]
 801794a:	4610      	mov	r0, r2
 801794c:	4798      	blx	r3
 801794e:	f107 0308 	add.w	r3, r7, #8
 8017952:	4618      	mov	r0, r3
 8017954:	f005 f908 	bl	801cb68 <_ZNK14MockNamedValue14getDoubleValueEv>
 8017958:	eeb0 8a40 	vmov.f32	s16, s0
 801795c:	eef0 8a60 	vmov.f32	s17, s1
 8017960:	bf00      	nop
 8017962:	f107 0308 	add.w	r3, r7, #8
 8017966:	4618      	mov	r0, r3
 8017968:	f004 fc72 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 801796c:	eeb0 7a48 	vmov.f32	s14, s16
 8017970:	eef0 7a68 	vmov.f32	s15, s17
}
 8017974:	eeb0 0a47 	vmov.f32	s0, s14
 8017978:	eef0 0a67 	vmov.f32	s1, s15
 801797c:	3740      	adds	r7, #64	; 0x40
 801797e:	46bd      	mov	sp, r7
 8017980:	ecbd 8b02 	vpop	{d8}
 8017984:	bd80      	pop	{r7, pc}

08017986 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 8017986:	b580      	push	{r7, lr}
 8017988:	b084      	sub	sp, #16
 801798a:	af00      	add	r7, sp, #0
 801798c:	60f8      	str	r0, [r7, #12]
 801798e:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	3350      	adds	r3, #80	; 0x50
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	68f8      	ldr	r0, [r7, #12]
 801799c:	4798      	blx	r3
 801799e:	4603      	mov	r3, r0
 80179a0:	f083 0301 	eor.w	r3, r3, #1
 80179a4:	b2db      	uxtb	r3, r3
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d002      	beq.n	80179b0 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 80179aa:	ed97 7b00 	vldr	d7, [r7]
 80179ae:	e00a      	b.n	80179c6 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	3398      	adds	r3, #152	; 0x98
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	68f8      	ldr	r0, [r7, #12]
 80179ba:	4798      	blx	r3
 80179bc:	eeb0 7a40 	vmov.f32	s14, s0
 80179c0:	eef0 7a60 	vmov.f32	s15, s1
 80179c4:	bf00      	nop
}
 80179c6:	eeb0 0a47 	vmov.f32	s0, s14
 80179ca:	eef0 0a67 	vmov.f32	s1, s15
 80179ce:	3710      	adds	r7, #16
 80179d0:	46bd      	mov	sp, r7
 80179d2:	bd80      	pop	{r7, pc}

080179d4 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80179d4:	b590      	push	{r4, r7, lr}
 80179d6:	b091      	sub	sp, #68	; 0x44
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	3354      	adds	r3, #84	; 0x54
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f107 0208 	add.w	r2, r7, #8
 80179e8:	6879      	ldr	r1, [r7, #4]
 80179ea:	4610      	mov	r0, r2
 80179ec:	4798      	blx	r3
 80179ee:	f107 0308 	add.w	r3, r7, #8
 80179f2:	4618      	mov	r0, r3
 80179f4:	f004 ff06 	bl	801c804 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 80179f8:	4604      	mov	r4, r0
 80179fa:	bf00      	nop
 80179fc:	f107 0308 	add.w	r3, r7, #8
 8017a00:	4618      	mov	r0, r3
 8017a02:	f004 fc25 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017a06:	4623      	mov	r3, r4
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3744      	adds	r7, #68	; 0x44
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd90      	pop	{r4, r7, pc}

08017a10 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]
 8017a18:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	3350      	adds	r3, #80	; 0x50
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	6878      	ldr	r0, [r7, #4]
 8017a24:	4798      	blx	r3
 8017a26:	4603      	mov	r3, r0
 8017a28:	f083 0301 	eor.w	r3, r3, #1
 8017a2c:	b2db      	uxtb	r3, r3
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	d001      	beq.n	8017a36 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 8017a32:	683b      	ldr	r3, [r7, #0]
 8017a34:	e007      	b.n	8017a46 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	3388      	adds	r3, #136	; 0x88
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	6878      	ldr	r0, [r7, #4]
 8017a40:	4798      	blx	r3
 8017a42:	4603      	mov	r3, r0
 8017a44:	bf00      	nop
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3708      	adds	r7, #8
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}

08017a4e <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 8017a4e:	b580      	push	{r7, lr}
 8017a50:	b082      	sub	sp, #8
 8017a52:	af00      	add	r7, sp, #0
 8017a54:	6078      	str	r0, [r7, #4]
 8017a56:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	3350      	adds	r3, #80	; 0x50
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	6878      	ldr	r0, [r7, #4]
 8017a62:	4798      	blx	r3
 8017a64:	4603      	mov	r3, r0
 8017a66:	f083 0301 	eor.w	r3, r3, #1
 8017a6a:	b2db      	uxtb	r3, r3
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d001      	beq.n	8017a74 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	e007      	b.n	8017a84 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	33a0      	adds	r3, #160	; 0xa0
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	4798      	blx	r3
 8017a80:	4603      	mov	r3, r0
 8017a82:	bf00      	nop
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3708      	adds	r7, #8
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}

08017a8c <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 8017a8c:	b590      	push	{r4, r7, lr}
 8017a8e:	b091      	sub	sp, #68	; 0x44
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	681b      	ldr	r3, [r3, #0]
 8017a98:	3354      	adds	r3, #84	; 0x54
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	f107 0208 	add.w	r2, r7, #8
 8017aa0:	6879      	ldr	r1, [r7, #4]
 8017aa2:	4610      	mov	r0, r2
 8017aa4:	4798      	blx	r3
 8017aa6:	f107 0308 	add.w	r3, r7, #8
 8017aaa:	4618      	mov	r0, r3
 8017aac:	f005 f8e0 	bl	801cc70 <_ZNK14MockNamedValue15getPointerValueEv>
 8017ab0:	4604      	mov	r4, r0
 8017ab2:	bf00      	nop
 8017ab4:	f107 0308 	add.w	r3, r7, #8
 8017ab8:	4618      	mov	r0, r3
 8017aba:	f004 fbc9 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017abe:	4623      	mov	r3, r4
}
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	3744      	adds	r7, #68	; 0x44
 8017ac4:	46bd      	mov	sp, r7
 8017ac6:	bd90      	pop	{r4, r7, pc}

08017ac8 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 8017ac8:	b590      	push	{r4, r7, lr}
 8017aca:	b091      	sub	sp, #68	; 0x44
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	3354      	adds	r3, #84	; 0x54
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	f107 0208 	add.w	r2, r7, #8
 8017adc:	6879      	ldr	r1, [r7, #4]
 8017ade:	4610      	mov	r0, r2
 8017ae0:	4798      	blx	r3
 8017ae2:	f107 0308 	add.w	r3, r7, #8
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f005 f8ea 	bl	801ccc0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8017aec:	4604      	mov	r4, r0
 8017aee:	bf00      	nop
 8017af0:	f107 0308 	add.w	r3, r7, #8
 8017af4:	4618      	mov	r0, r3
 8017af6:	f004 fbab 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017afa:	4623      	mov	r3, r4
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3744      	adds	r7, #68	; 0x44
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd90      	pop	{r4, r7, pc}

08017b04 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
 8017b0c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	3350      	adds	r3, #80	; 0x50
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	4798      	blx	r3
 8017b1a:	4603      	mov	r3, r0
 8017b1c:	f083 0301 	eor.w	r3, r3, #1
 8017b20:	b2db      	uxtb	r3, r3
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d001      	beq.n	8017b2a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8017b26:	683b      	ldr	r3, [r7, #0]
 8017b28:	e007      	b.n	8017b3a <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	33a8      	adds	r3, #168	; 0xa8
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	6878      	ldr	r0, [r7, #4]
 8017b34:	4798      	blx	r3
 8017b36:	4603      	mov	r3, r0
 8017b38:	bf00      	nop
}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3708      	adds	r7, #8
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}

08017b42 <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 8017b42:	b590      	push	{r4, r7, lr}
 8017b44:	b091      	sub	sp, #68	; 0x44
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	681b      	ldr	r3, [r3, #0]
 8017b4e:	3354      	adds	r3, #84	; 0x54
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	f107 0208 	add.w	r2, r7, #8
 8017b56:	6879      	ldr	r1, [r7, #4]
 8017b58:	4610      	mov	r0, r2
 8017b5a:	4798      	blx	r3
 8017b5c:	f107 0308 	add.w	r3, r7, #8
 8017b60:	4618      	mov	r0, r3
 8017b62:	f005 f8d5 	bl	801cd10 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8017b66:	4604      	mov	r4, r0
 8017b68:	bf00      	nop
 8017b6a:	f107 0308 	add.w	r3, r7, #8
 8017b6e:	4618      	mov	r0, r3
 8017b70:	f004 fb6e 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017b74:	4623      	mov	r3, r4
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3744      	adds	r7, #68	; 0x44
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bd90      	pop	{r4, r7, pc}

08017b7e <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 8017b7e:	b580      	push	{r7, lr}
 8017b80:	b082      	sub	sp, #8
 8017b82:	af00      	add	r7, sp, #0
 8017b84:	6078      	str	r0, [r7, #4]
 8017b86:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	3350      	adds	r3, #80	; 0x50
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	4798      	blx	r3
 8017b94:	4603      	mov	r3, r0
 8017b96:	f083 0301 	eor.w	r3, r3, #1
 8017b9a:	b2db      	uxtb	r3, r3
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d001      	beq.n	8017ba4 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	e007      	b.n	8017bb4 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	33b0      	adds	r3, #176	; 0xb0
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	6878      	ldr	r0, [r7, #4]
 8017bae:	4798      	blx	r3
 8017bb0:	4603      	mov	r3, r0
 8017bb2:	bf00      	nop
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b082      	sub	sp, #8
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	3350      	adds	r3, #80	; 0x50
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	6878      	ldr	r0, [r7, #4]
 8017bd0:	4798      	blx	r3
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	f083 0301 	eor.w	r3, r3, #1
 8017bd8:	b2db      	uxtb	r3, r3
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d001      	beq.n	8017be2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 8017bde:	683b      	ldr	r3, [r7, #0]
 8017be0:	e007      	b.n	8017bf2 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	3394      	adds	r3, #148	; 0x94
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	6878      	ldr	r0, [r7, #4]
 8017bec:	4798      	blx	r3
 8017bee:	4603      	mov	r3, r0
 8017bf0:	bf00      	nop
}
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3708      	adds	r7, #8
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd80      	pop	{r7, pc}

08017bfa <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8017bfa:	b590      	push	{r4, r7, lr}
 8017bfc:	b091      	sub	sp, #68	; 0x44
 8017bfe:	af00      	add	r7, sp, #0
 8017c00:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	3354      	adds	r3, #84	; 0x54
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	f107 0208 	add.w	r2, r7, #8
 8017c0e:	6879      	ldr	r1, [r7, #4]
 8017c10:	4610      	mov	r0, r2
 8017c12:	4798      	blx	r3
 8017c14:	f107 0308 	add.w	r3, r7, #8
 8017c18:	4618      	mov	r0, r3
 8017c1a:	f005 f801 	bl	801cc20 <_ZNK14MockNamedValue14getStringValueEv>
 8017c1e:	4604      	mov	r4, r0
 8017c20:	bf00      	nop
 8017c22:	f107 0308 	add.w	r3, r7, #8
 8017c26:	4618      	mov	r0, r3
 8017c28:	f004 fb12 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017c2c:	4623      	mov	r3, r4
}
 8017c2e:	4618      	mov	r0, r3
 8017c30:	3744      	adds	r7, #68	; 0x44
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd90      	pop	{r4, r7, pc}

08017c36 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8017c36:	b590      	push	{r4, r7, lr}
 8017c38:	b093      	sub	sp, #76	; 0x4c
 8017c3a:	af00      	add	r7, sp, #0
 8017c3c:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	3354      	adds	r3, #84	; 0x54
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	f107 0210 	add.w	r2, r7, #16
 8017c4a:	6879      	ldr	r1, [r7, #4]
 8017c4c:	4610      	mov	r0, r2
 8017c4e:	4798      	blx	r3
 8017c50:	f107 0308 	add.w	r3, r7, #8
 8017c54:	f107 0210 	add.w	r2, r7, #16
 8017c58:	4611      	mov	r1, r2
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f004 fd8c 	bl	801c778 <_ZNK14MockNamedValue7getNameEv>
 8017c60:	f107 0308 	add.w	r3, r7, #8
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7f4 f94b 	bl	800bf00 <_ZNK12SimpleString7isEmptyEv>
 8017c6a:	4603      	mov	r3, r0
 8017c6c:	f083 0301 	eor.w	r3, r3, #1
 8017c70:	b2dc      	uxtb	r4, r3
 8017c72:	f107 0308 	add.w	r3, r7, #8
 8017c76:	4618      	mov	r0, r3
 8017c78:	f7f4 f953 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8017c7c:	f107 0310 	add.w	r3, r7, #16
 8017c80:	4618      	mov	r0, r3
 8017c82:	f004 fae5 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8017c86:	4623      	mov	r3, r4
}
 8017c88:	4618      	mov	r0, r3
 8017c8a:	374c      	adds	r7, #76	; 0x4c
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd90      	pop	{r4, r7, pc}

08017c90 <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 8017c90:	b590      	push	{r4, r7, lr}
 8017c92:	b095      	sub	sp, #84	; 0x54
 8017c94:	af02      	add	r7, sp, #8
 8017c96:	6078      	str	r0, [r7, #4]
 8017c98:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	33c0      	adds	r3, #192	; 0xc0
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	6878      	ldr	r0, [r7, #4]
 8017ca4:	4798      	blx	r3
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	2b00      	cmp	r3, #0
 8017caa:	d001      	beq.n	8017cb0 <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 8017cac:	687c      	ldr	r4, [r7, #4]
 8017cae:	e053      	b.n	8017d58 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	331c      	adds	r3, #28
 8017cb4:	6839      	ldr	r1, [r7, #0]
 8017cb6:	4618      	mov	r0, r3
 8017cb8:	f003 f8ca 	bl	801ae50 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	699b      	ldr	r3, [r3, #24]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d109      	bne.n	8017cd8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	331c      	adds	r3, #28
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f002 fe20 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d001      	beq.n	8017cd8 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 8017cd4:	2301      	movs	r3, #1
 8017cd6:	e000      	b.n	8017cda <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 8017cd8:	2300      	movs	r3, #0
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	d02c      	beq.n	8017d38 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	33cc      	adds	r3, #204	; 0xcc
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	6878      	ldr	r0, [r7, #4]
 8017ce8:	4798      	blx	r3
 8017cea:	4604      	mov	r4, r0
 8017cec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017cf0:	6879      	ldr	r1, [r7, #4]
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	f7fe fd3f 	bl	8016776 <_ZNK21MockCheckedActualCall7getNameEv>
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cfc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8017d00:	f107 000c 	add.w	r0, r7, #12
 8017d04:	9300      	str	r3, [sp, #0]
 8017d06:	683b      	ldr	r3, [r7, #0]
 8017d08:	4621      	mov	r1, r4
 8017d0a:	f004 f9fb 	bl	801c104 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 8017d0e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017d12:	4618      	mov	r0, r3
 8017d14:	f7f4 f905 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	33dc      	adds	r3, #220	; 0xdc
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f107 020c 	add.w	r2, r7, #12
 8017d24:	4611      	mov	r1, r2
 8017d26:	6878      	ldr	r0, [r7, #4]
 8017d28:	4798      	blx	r3
        return *this;
 8017d2a:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8017d2c:	f107 030c 	add.w	r3, r7, #12
 8017d30:	4618      	mov	r0, r3
 8017d32:	f000 ffa7 	bl	8018c84 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8017d36:	e00f      	b.n	8017d58 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	331c      	adds	r3, #28
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f003 f9a7 	bl	801b090 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	699b      	ldr	r3, [r3, #24]
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d105      	bne.n	8017d56 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	33d8      	adds	r3, #216	; 0xd8
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	6878      	ldr	r0, [r7, #4]
 8017d54:	4798      	blx	r3
    }

    return *this;
 8017d56:	687c      	ldr	r4, [r7, #4]
 8017d58:	4623      	mov	r3, r4
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	374c      	adds	r7, #76	; 0x4c
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	bd90      	pop	{r4, r7, pc}
	...

08017d64 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8017d64:	b590      	push	{r4, r7, lr}
 8017d66:	b087      	sub	sp, #28
 8017d68:	af00      	add	r7, sp, #0
 8017d6a:	60f8      	str	r0, [r7, #12]
 8017d6c:	60b9      	str	r1, [r7, #8]
 8017d6e:	607a      	str	r2, [r7, #4]
 8017d70:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 8017d72:	f240 2282 	movw	r2, #642	; 0x282
 8017d76:	4913      	ldr	r1, [pc, #76]	; (8017dc4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8017d78:	2018      	movs	r0, #24
 8017d7a:	f7f1 f957 	bl	800902c <_ZnwjPKci>
 8017d7e:	4604      	mov	r4, r0
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	687a      	ldr	r2, [r7, #4]
 8017d84:	68b9      	ldr	r1, [r7, #8]
 8017d86:	4620      	mov	r0, r4
 8017d88:	f7fe fa48 	bl	801621c <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 8017d8c:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d103      	bne.n	8017d9e <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	693a      	ldr	r2, [r7, #16]
 8017d9a:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 8017d9c:	e00d      	b.n	8017dba <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 8017d9e:	68fb      	ldr	r3, [r7, #12]
 8017da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017da2:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 8017da4:	697b      	ldr	r3, [r7, #20]
 8017da6:	695b      	ldr	r3, [r3, #20]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d003      	beq.n	8017db4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 8017dac:	697b      	ldr	r3, [r7, #20]
 8017dae:	695b      	ldr	r3, [r3, #20]
 8017db0:	617b      	str	r3, [r7, #20]
 8017db2:	e7f7      	b.n	8017da4 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 8017db4:	697b      	ldr	r3, [r7, #20]
 8017db6:	693a      	ldr	r2, [r7, #16]
 8017db8:	615a      	str	r2, [r3, #20]
}
 8017dba:	bf00      	nop
 8017dbc:	371c      	adds	r7, #28
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bd90      	pop	{r4, r7, pc}
 8017dc2:	bf00      	nop
 8017dc4:	080247b4 	.word	0x080247b4

08017dc8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 8017dc8:	b580      	push	{r7, lr}
 8017dca:	b082      	sub	sp, #8
 8017dcc:	af00      	add	r7, sp, #0
 8017dce:	6078      	str	r0, [r7, #4]
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	3308      	adds	r3, #8
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7f4 f8a4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	4618      	mov	r0, r3
 8017dde:	f7f4 f8a0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	4618      	mov	r0, r3
 8017de6:	3708      	adds	r7, #8
 8017de8:	46bd      	mov	sp, r7
 8017dea:	bd80      	pop	{r7, pc}

08017dec <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8017dec:	b590      	push	{r4, r7, lr}
 8017dee:	b085      	sub	sp, #20
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017df8:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	60bb      	str	r3, [r7, #8]

    while (current) {
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d012      	beq.n	8017e2a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	695b      	ldr	r3, [r3, #20]
 8017e0c:	60fb      	str	r3, [r7, #12]
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	68fa      	ldr	r2, [r7, #12]
 8017e12:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8017e14:	68bc      	ldr	r4, [r7, #8]
 8017e16:	2c00      	cmp	r4, #0
 8017e18:	d0f1      	beq.n	8017dfe <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f7ff ffd4 	bl	8017dc8 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 8017e20:	2118      	movs	r1, #24
 8017e22:	4620      	mov	r0, r4
 8017e24:	f7f1 f916 	bl	8009054 <_ZdlPvj>
    while (current) {
 8017e28:	e7e9      	b.n	8017dfe <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8017e2a:	bf00      	nop
 8017e2c:	3714      	adds	r7, #20
 8017e2e:	46bd      	mov	sp, r7
 8017e30:	bd90      	pop	{r4, r7, pc}
	...

08017e34 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8017e34:	b580      	push	{r7, lr}
 8017e36:	b082      	sub	sp, #8
 8017e38:	af00      	add	r7, sp, #0
 8017e3a:	6078      	str	r0, [r7, #4]
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7fe fc6a 	bl	8016718 <_ZN14MockActualCallC1Ev>
 8017e44:	4a06      	ldr	r2, [pc, #24]	; (8017e60 <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	3304      	adds	r3, #4
 8017e4e:	4905      	ldr	r1, [pc, #20]	; (8017e64 <_ZN19MockActualCallTraceC1Ev+0x30>)
 8017e50:	4618      	mov	r0, r3
 8017e52:	f7f3 fcae 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
{
}
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3708      	adds	r7, #8
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}
 8017e60:	08026f80 	.word	0x08026f80
 8017e64:	0802479c 	.word	0x0802479c

08017e68 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8017e68:	b580      	push	{r7, lr}
 8017e6a:	b082      	sub	sp, #8
 8017e6c:	af00      	add	r7, sp, #0
 8017e6e:	6078      	str	r0, [r7, #4]
 8017e70:	4a08      	ldr	r2, [pc, #32]	; (8017e94 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	601a      	str	r2, [r3, #0]
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	3304      	adds	r3, #4
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	f7f4 f851 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	4618      	mov	r0, r3
 8017e84:	f7fe fc58 	bl	8016738 <_ZN14MockActualCallD1Ev>
{
}
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3708      	adds	r7, #8
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	08026f80 	.word	0x08026f80

08017e98 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
}
 8017ea0:	6878      	ldr	r0, [r7, #4]
 8017ea2:	f7ff ffe1 	bl	8017e68 <_ZN19MockActualCallTraceD1Ev>
 8017ea6:	210c      	movs	r1, #12
 8017ea8:	6878      	ldr	r0, [r7, #4]
 8017eaa:	f7f1 f8d3 	bl	8009054 <_ZdlPvj>
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	3708      	adds	r7, #8
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	bd80      	pop	{r7, pc}

08017eb8 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b082      	sub	sp, #8
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
 8017ec0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	3304      	adds	r3, #4
 8017ec6:	4907      	ldr	r1, [pc, #28]	; (8017ee4 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 8017ec8:	4618      	mov	r0, r3
 8017eca:	f7f4 f8b9 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	3304      	adds	r3, #4
 8017ed2:	6839      	ldr	r1, [r7, #0]
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7f4 f8a1 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    return *this;
 8017eda:	687b      	ldr	r3, [r7, #4]
}
 8017edc:	4618      	mov	r0, r3
 8017ede:	3708      	adds	r7, #8
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	bd80      	pop	{r7, pc}
 8017ee4:	080248a8 	.word	0x080248a8

08017ee8 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8017ee8:	b590      	push	{r4, r7, lr}
 8017eea:	b085      	sub	sp, #20
 8017eec:	af00      	add	r7, sp, #0
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	3304      	adds	r3, #4
 8017ef6:	490e      	ldr	r1, [pc, #56]	; (8017f30 <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8017ef8:	4618      	mov	r0, r3
 8017efa:	f7f4 f8a1 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 8017efe:	687b      	ldr	r3, [r7, #4]
 8017f00:	1d1c      	adds	r4, r3, #4
 8017f02:	f107 0308 	add.w	r3, r7, #8
 8017f06:	6839      	ldr	r1, [r7, #0]
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f4 fd39 	bl	800c980 <_Z10StringFromj>
 8017f0e:	f107 0308 	add.w	r3, r7, #8
 8017f12:	4619      	mov	r1, r3
 8017f14:	4620      	mov	r0, r4
 8017f16:	f7f4 f881 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8017f1a:	f107 0308 	add.w	r3, r7, #8
 8017f1e:	4618      	mov	r0, r3
 8017f20:	f7f3 ffff 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8017f24:	687b      	ldr	r3, [r7, #4]
}
 8017f26:	4618      	mov	r0, r3
 8017f28:	3714      	adds	r7, #20
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd90      	pop	{r4, r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	080248b8 	.word	0x080248b8

08017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b082      	sub	sp, #8
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
 8017f3c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	3304      	adds	r3, #4
 8017f42:	490a      	ldr	r1, [pc, #40]	; (8017f6c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8017f44:	4618      	mov	r0, r3
 8017f46:	f7f4 f87b 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	3304      	adds	r3, #4
 8017f4e:	6839      	ldr	r1, [r7, #0]
 8017f50:	4618      	mov	r0, r3
 8017f52:	f7f4 f863 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	3304      	adds	r3, #4
 8017f5a:	4905      	ldr	r1, [pc, #20]	; (8017f70 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7f4 f86f 	bl	800c040 <_ZN12SimpleStringpLEPKc>
}
 8017f62:	bf00      	nop
 8017f64:	3708      	adds	r7, #8
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	080248c8 	.word	0x080248c8
 8017f70:	080248cc 	.word	0x080248cc

08017f74 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8017f74:	b590      	push	{r4, r7, lr}
 8017f76:	b087      	sub	sp, #28
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	60b9      	str	r1, [r7, #8]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 8017f82:	68b9      	ldr	r1, [r7, #8]
 8017f84:	68f8      	ldr	r0, [r7, #12]
 8017f86:	f7ff ffd5 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	1d1c      	adds	r4, r3, #4
 8017f8e:	f107 0310 	add.w	r3, r7, #16
 8017f92:	79fa      	ldrb	r2, [r7, #7]
 8017f94:	4611      	mov	r1, r2
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7f4 fa34 	bl	800c404 <_Z10StringFromb>
 8017f9c:	f107 0310 	add.w	r3, r7, #16
 8017fa0:	4619      	mov	r1, r3
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f7f4 f83a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8017fa8:	f107 0310 	add.w	r3, r7, #16
 8017fac:	4618      	mov	r0, r3
 8017fae:	f7f3 ffb8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8017fb2:	68fb      	ldr	r3, [r7, #12]
}
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	371c      	adds	r7, #28
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd90      	pop	{r4, r7, pc}

08017fbc <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017fbc:	b590      	push	{r4, r7, lr}
 8017fbe:	b08f      	sub	sp, #60	; 0x3c
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	60f8      	str	r0, [r7, #12]
 8017fc4:	60b9      	str	r1, [r7, #8]
 8017fc6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8017fc8:	68b9      	ldr	r1, [r7, #8]
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	f7ff ffb2 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	1d1c      	adds	r4, r3, #4
 8017fd4:	f107 0320 	add.w	r3, r7, #32
 8017fd8:	6879      	ldr	r1, [r7, #4]
 8017fda:	4618      	mov	r0, r3
 8017fdc:	f7f4 fcd0 	bl	800c980 <_Z10StringFromj>
 8017fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017fe4:	491f      	ldr	r1, [pc, #124]	; (8018064 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	f7f3 fbe3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8017fec:	f107 0318 	add.w	r3, r7, #24
 8017ff0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8017ff4:	f107 0120 	add.w	r1, r7, #32
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7f3 fff4 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8017ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018002:	6879      	ldr	r1, [r7, #4]
 8018004:	4618      	mov	r0, r3
 8018006:	f7f4 fb5f 	bl	800c6c8 <_Z30BracketsFormattedHexStringFromj>
 801800a:	f107 0310 	add.w	r3, r7, #16
 801800e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018012:	f107 0118 	add.w	r1, r7, #24
 8018016:	4618      	mov	r0, r3
 8018018:	f7f3 ffe5 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801801c:	f107 0310 	add.w	r3, r7, #16
 8018020:	4619      	mov	r1, r3
 8018022:	4620      	mov	r0, r4
 8018024:	f7f3 fffa 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8018028:	f107 0310 	add.w	r3, r7, #16
 801802c:	4618      	mov	r0, r3
 801802e:	f7f3 ff78 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018036:	4618      	mov	r0, r3
 8018038:	f7f3 ff73 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801803c:	f107 0318 	add.w	r3, r7, #24
 8018040:	4618      	mov	r0, r3
 8018042:	f7f3 ff6e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801804a:	4618      	mov	r0, r3
 801804c:	f7f3 ff69 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018050:	f107 0320 	add.w	r3, r7, #32
 8018054:	4618      	mov	r0, r3
 8018056:	f7f3 ff64 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 801805a:	68fb      	ldr	r3, [r7, #12]
}
 801805c:	4618      	mov	r0, r3
 801805e:	373c      	adds	r7, #60	; 0x3c
 8018060:	46bd      	mov	sp, r7
 8018062:	bd90      	pop	{r4, r7, pc}
 8018064:	080248c8 	.word	0x080248c8

08018068 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8018068:	b590      	push	{r4, r7, lr}
 801806a:	b08f      	sub	sp, #60	; 0x3c
 801806c:	af00      	add	r7, sp, #0
 801806e:	60f8      	str	r0, [r7, #12]
 8018070:	60b9      	str	r1, [r7, #8]
 8018072:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018074:	68b9      	ldr	r1, [r7, #8]
 8018076:	68f8      	ldr	r0, [r7, #12]
 8018078:	f7ff ff5c 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	1d1c      	adds	r4, r3, #4
 8018080:	f107 0320 	add.w	r3, r7, #32
 8018084:	6879      	ldr	r1, [r7, #4]
 8018086:	4618      	mov	r0, r3
 8018088:	f7f4 fa12 	bl	800c4b0 <_Z10StringFromi>
 801808c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018090:	491f      	ldr	r1, [pc, #124]	; (8018110 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8018092:	4618      	mov	r0, r3
 8018094:	f7f3 fb8d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8018098:	f107 0318 	add.w	r3, r7, #24
 801809c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80180a0:	f107 0120 	add.w	r1, r7, #32
 80180a4:	4618      	mov	r0, r3
 80180a6:	f7f3 ff9e 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 80180aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80180ae:	6879      	ldr	r1, [r7, #4]
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7f4 faed 	bl	800c690 <_Z30BracketsFormattedHexStringFromi>
 80180b6:	f107 0310 	add.w	r3, r7, #16
 80180ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80180be:	f107 0118 	add.w	r1, r7, #24
 80180c2:	4618      	mov	r0, r3
 80180c4:	f7f3 ff8f 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 80180c8:	f107 0310 	add.w	r3, r7, #16
 80180cc:	4619      	mov	r1, r3
 80180ce:	4620      	mov	r0, r4
 80180d0:	f7f3 ffa4 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80180d4:	f107 0310 	add.w	r3, r7, #16
 80180d8:	4618      	mov	r0, r3
 80180da:	f7f3 ff22 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80180de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80180e2:	4618      	mov	r0, r3
 80180e4:	f7f3 ff1d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80180e8:	f107 0318 	add.w	r3, r7, #24
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7f3 ff18 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80180f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80180f6:	4618      	mov	r0, r3
 80180f8:	f7f3 ff13 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80180fc:	f107 0320 	add.w	r3, r7, #32
 8018100:	4618      	mov	r0, r3
 8018102:	f7f3 ff0e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018106:	68fb      	ldr	r3, [r7, #12]
}
 8018108:	4618      	mov	r0, r3
 801810a:	373c      	adds	r7, #60	; 0x3c
 801810c:	46bd      	mov	sp, r7
 801810e:	bd90      	pop	{r4, r7, pc}
 8018110:	080248c8 	.word	0x080248c8

08018114 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8018114:	b590      	push	{r4, r7, lr}
 8018116:	b08f      	sub	sp, #60	; 0x3c
 8018118:	af00      	add	r7, sp, #0
 801811a:	60f8      	str	r0, [r7, #12]
 801811c:	60b9      	str	r1, [r7, #8]
 801811e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018120:	68b9      	ldr	r1, [r7, #8]
 8018122:	68f8      	ldr	r0, [r7, #12]
 8018124:	f7ff ff06 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	1d1c      	adds	r4, r3, #4
 801812c:	f107 0320 	add.w	r3, r7, #32
 8018130:	6879      	ldr	r1, [r7, #4]
 8018132:	4618      	mov	r0, r3
 8018134:	f7f4 fc36 	bl	800c9a4 <_Z10StringFromm>
 8018138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801813c:	491f      	ldr	r1, [pc, #124]	; (80181bc <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 801813e:	4618      	mov	r0, r3
 8018140:	f7f3 fb37 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8018144:	f107 0318 	add.w	r3, r7, #24
 8018148:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801814c:	f107 0120 	add.w	r1, r7, #32
 8018150:	4618      	mov	r0, r3
 8018152:	f7f3 ff48 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8018156:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801815a:	6879      	ldr	r1, [r7, #4]
 801815c:	4618      	mov	r0, r3
 801815e:	f7f4 faeb 	bl	800c738 <_Z30BracketsFormattedHexStringFromm>
 8018162:	f107 0310 	add.w	r3, r7, #16
 8018166:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801816a:	f107 0118 	add.w	r1, r7, #24
 801816e:	4618      	mov	r0, r3
 8018170:	f7f3 ff39 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8018174:	f107 0310 	add.w	r3, r7, #16
 8018178:	4619      	mov	r1, r3
 801817a:	4620      	mov	r0, r4
 801817c:	f7f3 ff4e 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8018180:	f107 0310 	add.w	r3, r7, #16
 8018184:	4618      	mov	r0, r3
 8018186:	f7f3 fecc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801818a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801818e:	4618      	mov	r0, r3
 8018190:	f7f3 fec7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018194:	f107 0318 	add.w	r3, r7, #24
 8018198:	4618      	mov	r0, r3
 801819a:	f7f3 fec2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801819e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80181a2:	4618      	mov	r0, r3
 80181a4:	f7f3 febd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 80181a8:	f107 0320 	add.w	r3, r7, #32
 80181ac:	4618      	mov	r0, r3
 80181ae:	f7f3 feb8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 80181b2:	68fb      	ldr	r3, [r7, #12]
}
 80181b4:	4618      	mov	r0, r3
 80181b6:	373c      	adds	r7, #60	; 0x3c
 80181b8:	46bd      	mov	sp, r7
 80181ba:	bd90      	pop	{r4, r7, pc}
 80181bc:	080248c8 	.word	0x080248c8

080181c0 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 80181c0:	b590      	push	{r4, r7, lr}
 80181c2:	b08f      	sub	sp, #60	; 0x3c
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	60f8      	str	r0, [r7, #12]
 80181c8:	60b9      	str	r1, [r7, #8]
 80181ca:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80181cc:	68b9      	ldr	r1, [r7, #8]
 80181ce:	68f8      	ldr	r0, [r7, #12]
 80181d0:	f7ff feb0 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	1d1c      	adds	r4, r3, #4
 80181d8:	f107 0320 	add.w	r3, r7, #32
 80181dc:	6879      	ldr	r1, [r7, #4]
 80181de:	4618      	mov	r0, r3
 80181e0:	f7f4 f978 	bl	800c4d4 <_Z10StringFroml>
 80181e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80181e8:	491f      	ldr	r1, [pc, #124]	; (8018268 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 80181ea:	4618      	mov	r0, r3
 80181ec:	f7f3 fae1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80181f0:	f107 0318 	add.w	r3, r7, #24
 80181f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80181f8:	f107 0120 	add.w	r1, r7, #32
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f3 fef2 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8018202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018206:	6879      	ldr	r1, [r7, #4]
 8018208:	4618      	mov	r0, r3
 801820a:	f7f4 fa79 	bl	800c700 <_Z30BracketsFormattedHexStringFroml>
 801820e:	f107 0310 	add.w	r3, r7, #16
 8018212:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8018216:	f107 0118 	add.w	r1, r7, #24
 801821a:	4618      	mov	r0, r3
 801821c:	f7f3 fee3 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 8018220:	f107 0310 	add.w	r3, r7, #16
 8018224:	4619      	mov	r1, r3
 8018226:	4620      	mov	r0, r4
 8018228:	f7f3 fef8 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801822c:	f107 0310 	add.w	r3, r7, #16
 8018230:	4618      	mov	r0, r3
 8018232:	f7f3 fe76 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801823a:	4618      	mov	r0, r3
 801823c:	f7f3 fe71 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018240:	f107 0318 	add.w	r3, r7, #24
 8018244:	4618      	mov	r0, r3
 8018246:	f7f3 fe6c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801824a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801824e:	4618      	mov	r0, r3
 8018250:	f7f3 fe67 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8018254:	f107 0320 	add.w	r3, r7, #32
 8018258:	4618      	mov	r0, r3
 801825a:	f7f3 fe62 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 801825e:	68fb      	ldr	r3, [r7, #12]
}
 8018260:	4618      	mov	r0, r3
 8018262:	373c      	adds	r7, #60	; 0x3c
 8018264:	46bd      	mov	sp, r7
 8018266:	bd90      	pop	{r4, r7, pc}
 8018268:	080248c8 	.word	0x080248c8

0801826c <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 801826c:	b5b0      	push	{r4, r5, r7, lr}
 801826e:	b086      	sub	sp, #24
 8018270:	af02      	add	r7, sp, #8
 8018272:	60f8      	str	r0, [r7, #12]
 8018274:	60b9      	str	r1, [r7, #8]
 8018276:	4639      	mov	r1, r7
 8018278:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 801827c:	f7fa fe7c 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8018280:	4604      	mov	r4, r0
 8018282:	6823      	ldr	r3, [r4, #0]
 8018284:	3368      	adds	r3, #104	; 0x68
 8018286:	681d      	ldr	r5, [r3, #0]
 8018288:	f7fa fe86 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801828c:	4603      	mov	r3, r0
 801828e:	9300      	str	r3, [sp, #0]
 8018290:	f240 23ee 	movw	r3, #750	; 0x2ee
 8018294:	4a04      	ldr	r2, [pc, #16]	; (80182a8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8018296:	4905      	ldr	r1, [pc, #20]	; (80182ac <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8018298:	4620      	mov	r0, r4
 801829a:	47a8      	blx	r5
    return *this;
 801829c:	68fb      	ldr	r3, [r7, #12]
}
 801829e:	4618      	mov	r0, r3
 80182a0:	3710      	adds	r7, #16
 80182a2:	46bd      	mov	sp, r7
 80182a4:	bdb0      	pop	{r4, r5, r7, pc}
 80182a6:	bf00      	nop
 80182a8:	080247b4 	.word	0x080247b4
 80182ac:	080247d0 	.word	0x080247d0

080182b0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 80182b0:	b5b0      	push	{r4, r5, r7, lr}
 80182b2:	b086      	sub	sp, #24
 80182b4:	af02      	add	r7, sp, #8
 80182b6:	60f8      	str	r0, [r7, #12]
 80182b8:	60b9      	str	r1, [r7, #8]
 80182ba:	4639      	mov	r1, r7
 80182bc:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 80182c0:	f7fa fe5a 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80182c4:	4604      	mov	r4, r0
 80182c6:	6823      	ldr	r3, [r4, #0]
 80182c8:	3368      	adds	r3, #104	; 0x68
 80182ca:	681d      	ldr	r5, [r3, #0]
 80182cc:	f7fa fe64 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80182d0:	4603      	mov	r3, r0
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 80182d8:	4a04      	ldr	r2, [pc, #16]	; (80182ec <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 80182da:	4905      	ldr	r1, [pc, #20]	; (80182f0 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 80182dc:	4620      	mov	r0, r4
 80182de:	47a8      	blx	r5
    return *this;
 80182e0:	68fb      	ldr	r3, [r7, #12]
}
 80182e2:	4618      	mov	r0, r3
 80182e4:	3710      	adds	r7, #16
 80182e6:	46bd      	mov	sp, r7
 80182e8:	bdb0      	pop	{r4, r5, r7, pc}
 80182ea:	bf00      	nop
 80182ec:	080247b4 	.word	0x080247b4
 80182f0:	080247fc 	.word	0x080247fc

080182f4 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 80182f4:	b590      	push	{r4, r7, lr}
 80182f6:	b087      	sub	sp, #28
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	60f8      	str	r0, [r7, #12]
 80182fc:	60b9      	str	r1, [r7, #8]
 80182fe:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8018302:	68b9      	ldr	r1, [r7, #8]
 8018304:	68f8      	ldr	r0, [r7, #12]
 8018306:	f7ff fe15 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	1d1c      	adds	r4, r3, #4
 801830e:	f107 0310 	add.w	r3, r7, #16
 8018312:	2106      	movs	r1, #6
 8018314:	ed97 0b00 	vldr	d0, [r7]
 8018318:	4618      	mov	r0, r3
 801831a:	f7f4 fac7 	bl	800c8ac <_Z10StringFromdi>
 801831e:	f107 0310 	add.w	r3, r7, #16
 8018322:	4619      	mov	r1, r3
 8018324:	4620      	mov	r0, r4
 8018326:	f7f3 fe79 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801832a:	f107 0310 	add.w	r3, r7, #16
 801832e:	4618      	mov	r0, r3
 8018330:	f7f3 fdf7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018334:	68fb      	ldr	r3, [r7, #12]
}
 8018336:	4618      	mov	r0, r3
 8018338:	371c      	adds	r7, #28
 801833a:	46bd      	mov	sp, r7
 801833c:	bd90      	pop	{r4, r7, pc}

0801833e <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 801833e:	b590      	push	{r4, r7, lr}
 8018340:	b087      	sub	sp, #28
 8018342:	af00      	add	r7, sp, #0
 8018344:	60f8      	str	r0, [r7, #12]
 8018346:	60b9      	str	r1, [r7, #8]
 8018348:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801834a:	68b9      	ldr	r1, [r7, #8]
 801834c:	68f8      	ldr	r0, [r7, #12]
 801834e:	f7ff fdf1 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	1d1c      	adds	r4, r3, #4
 8018356:	f107 0310 	add.w	r3, r7, #16
 801835a:	6879      	ldr	r1, [r7, #4]
 801835c:	4618      	mov	r0, r3
 801835e:	f7f4 f86d 	bl	800c43c <_Z10StringFromPKc>
 8018362:	f107 0310 	add.w	r3, r7, #16
 8018366:	4619      	mov	r1, r3
 8018368:	4620      	mov	r0, r4
 801836a:	f7f3 fe57 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801836e:	f107 0310 	add.w	r3, r7, #16
 8018372:	4618      	mov	r0, r3
 8018374:	f7f3 fdd5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018378:	68fb      	ldr	r3, [r7, #12]
}
 801837a:	4618      	mov	r0, r3
 801837c:	371c      	adds	r7, #28
 801837e:	46bd      	mov	sp, r7
 8018380:	bd90      	pop	{r4, r7, pc}

08018382 <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8018382:	b590      	push	{r4, r7, lr}
 8018384:	b087      	sub	sp, #28
 8018386:	af00      	add	r7, sp, #0
 8018388:	60f8      	str	r0, [r7, #12]
 801838a:	60b9      	str	r1, [r7, #8]
 801838c:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 801838e:	68b9      	ldr	r1, [r7, #8]
 8018390:	68f8      	ldr	r0, [r7, #12]
 8018392:	f7ff fdcf 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	1d1c      	adds	r4, r3, #4
 801839a:	f107 0310 	add.w	r3, r7, #16
 801839e:	6879      	ldr	r1, [r7, #4]
 80183a0:	4618      	mov	r0, r3
 80183a2:	f7f4 f8a9 	bl	800c4f8 <_Z10StringFromPKv>
 80183a6:	f107 0310 	add.w	r3, r7, #16
 80183aa:	4619      	mov	r1, r3
 80183ac:	4620      	mov	r0, r4
 80183ae:	f7f3 fe35 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80183b2:	f107 0310 	add.w	r3, r7, #16
 80183b6:	4618      	mov	r0, r3
 80183b8:	f7f3 fdb3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 80183bc:	68fb      	ldr	r3, [r7, #12]
}
 80183be:	4618      	mov	r0, r3
 80183c0:	371c      	adds	r7, #28
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bd90      	pop	{r4, r7, pc}

080183c6 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80183c6:	b590      	push	{r4, r7, lr}
 80183c8:	b087      	sub	sp, #28
 80183ca:	af00      	add	r7, sp, #0
 80183cc:	60f8      	str	r0, [r7, #12]
 80183ce:	60b9      	str	r1, [r7, #8]
 80183d0:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80183d2:	68b9      	ldr	r1, [r7, #8]
 80183d4:	68f8      	ldr	r0, [r7, #12]
 80183d6:	f7ff fdad 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	1d1c      	adds	r4, r3, #4
 80183de:	f107 0310 	add.w	r3, r7, #16
 80183e2:	6879      	ldr	r1, [r7, #4]
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7f4 f887 	bl	800c4f8 <_Z10StringFromPKv>
 80183ea:	f107 0310 	add.w	r3, r7, #16
 80183ee:	4619      	mov	r1, r3
 80183f0:	4620      	mov	r0, r4
 80183f2:	f7f3 fe13 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80183f6:	f107 0310 	add.w	r3, r7, #16
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7f3 fd91 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018400:	68fb      	ldr	r3, [r7, #12]
}
 8018402:	4618      	mov	r0, r3
 8018404:	371c      	adds	r7, #28
 8018406:	46bd      	mov	sp, r7
 8018408:	bd90      	pop	{r4, r7, pc}

0801840a <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801840a:	b590      	push	{r4, r7, lr}
 801840c:	b087      	sub	sp, #28
 801840e:	af00      	add	r7, sp, #0
 8018410:	60f8      	str	r0, [r7, #12]
 8018412:	60b9      	str	r1, [r7, #8]
 8018414:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018416:	68b9      	ldr	r1, [r7, #8]
 8018418:	68f8      	ldr	r0, [r7, #12]
 801841a:	f7ff fd8b 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 801841e:	68fb      	ldr	r3, [r7, #12]
 8018420:	1d1c      	adds	r4, r3, #4
 8018422:	f107 0310 	add.w	r3, r7, #16
 8018426:	6879      	ldr	r1, [r7, #4]
 8018428:	4618      	mov	r0, r3
 801842a:	f7f4 f88f 	bl	800c54c <_Z10StringFromPFvvE>
 801842e:	f107 0310 	add.w	r3, r7, #16
 8018432:	4619      	mov	r1, r3
 8018434:	4620      	mov	r0, r4
 8018436:	f7f3 fdf1 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801843a:	f107 0310 	add.w	r3, r7, #16
 801843e:	4618      	mov	r0, r3
 8018440:	f7f3 fd6f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018444:	68fb      	ldr	r3, [r7, #12]
}
 8018446:	4618      	mov	r0, r3
 8018448:	371c      	adds	r7, #28
 801844a:	46bd      	mov	sp, r7
 801844c:	bd90      	pop	{r4, r7, pc}

0801844e <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801844e:	b590      	push	{r4, r7, lr}
 8018450:	b087      	sub	sp, #28
 8018452:	af00      	add	r7, sp, #0
 8018454:	60f8      	str	r0, [r7, #12]
 8018456:	60b9      	str	r1, [r7, #8]
 8018458:	607a      	str	r2, [r7, #4]
 801845a:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 801845c:	68b9      	ldr	r1, [r7, #8]
 801845e:	68f8      	ldr	r0, [r7, #12]
 8018460:	f7ff fd68 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	1d1c      	adds	r4, r3, #4
 8018468:	f107 0310 	add.w	r3, r7, #16
 801846c:	683a      	ldr	r2, [r7, #0]
 801846e:	6879      	ldr	r1, [r7, #4]
 8018470:	4618      	mov	r0, r3
 8018472:	f7f4 fbaf 	bl	800cbd4 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8018476:	f107 0310 	add.w	r3, r7, #16
 801847a:	4619      	mov	r1, r3
 801847c:	4620      	mov	r0, r4
 801847e:	f7f3 fdcd 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8018482:	f107 0310 	add.w	r3, r7, #16
 8018486:	4618      	mov	r0, r3
 8018488:	f7f3 fd4b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 801848c:	68fb      	ldr	r3, [r7, #12]
}
 801848e:	4618      	mov	r0, r3
 8018490:	371c      	adds	r7, #28
 8018492:	46bd      	mov	sp, r7
 8018494:	bd90      	pop	{r4, r7, pc}
	...

08018498 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8018498:	b590      	push	{r4, r7, lr}
 801849a:	b087      	sub	sp, #28
 801849c:	af00      	add	r7, sp, #0
 801849e:	60f8      	str	r0, [r7, #12]
 80184a0:	60b9      	str	r1, [r7, #8]
 80184a2:	607a      	str	r2, [r7, #4]
 80184a4:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	3304      	adds	r3, #4
 80184aa:	4913      	ldr	r1, [pc, #76]	; (80184f8 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 80184ac:	4618      	mov	r0, r3
 80184ae:	f7f3 fdc7 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	3304      	adds	r3, #4
 80184b6:	68b9      	ldr	r1, [r7, #8]
 80184b8:	4618      	mov	r0, r3
 80184ba:	f7f3 fdaf 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 80184be:	6879      	ldr	r1, [r7, #4]
 80184c0:	68f8      	ldr	r0, [r7, #12]
 80184c2:	f7ff fd37 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	1d1c      	adds	r4, r3, #4
 80184ca:	f107 0310 	add.w	r3, r7, #16
 80184ce:	6839      	ldr	r1, [r7, #0]
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7f4 f811 	bl	800c4f8 <_Z10StringFromPKv>
 80184d6:	f107 0310 	add.w	r3, r7, #16
 80184da:	4619      	mov	r1, r3
 80184dc:	4620      	mov	r0, r4
 80184de:	f7f3 fd9d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 80184e2:	f107 0310 	add.w	r3, r7, #16
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f3 fd1b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 80184ec:	68fb      	ldr	r3, [r7, #12]
}
 80184ee:	4618      	mov	r0, r3
 80184f0:	371c      	adds	r7, #28
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd90      	pop	{r4, r7, pc}
 80184f6:	bf00      	nop
 80184f8:	080248c8 	.word	0x080248c8

080184fc <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 80184fc:	b590      	push	{r4, r7, lr}
 80184fe:	b087      	sub	sp, #28
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8018508:	68b9      	ldr	r1, [r7, #8]
 801850a:	68f8      	ldr	r0, [r7, #12]
 801850c:	f7ff fd12 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	1d1c      	adds	r4, r3, #4
 8018514:	f107 0310 	add.w	r3, r7, #16
 8018518:	6879      	ldr	r1, [r7, #4]
 801851a:	4618      	mov	r0, r3
 801851c:	f7f3 ffec 	bl	800c4f8 <_Z10StringFromPKv>
 8018520:	f107 0310 	add.w	r3, r7, #16
 8018524:	4619      	mov	r1, r3
 8018526:	4620      	mov	r0, r4
 8018528:	f7f3 fd78 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801852c:	f107 0310 	add.w	r3, r7, #16
 8018530:	4618      	mov	r0, r3
 8018532:	f7f3 fcf6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018536:	68fb      	ldr	r3, [r7, #12]
}
 8018538:	4618      	mov	r0, r3
 801853a:	371c      	adds	r7, #28
 801853c:	46bd      	mov	sp, r7
 801853e:	bd90      	pop	{r4, r7, pc}

08018540 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8018540:	b590      	push	{r4, r7, lr}
 8018542:	b087      	sub	sp, #28
 8018544:	af00      	add	r7, sp, #0
 8018546:	60f8      	str	r0, [r7, #12]
 8018548:	60b9      	str	r1, [r7, #8]
 801854a:	607a      	str	r2, [r7, #4]
 801854c:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 801854e:	68fb      	ldr	r3, [r7, #12]
 8018550:	3304      	adds	r3, #4
 8018552:	4913      	ldr	r1, [pc, #76]	; (80185a0 <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8018554:	4618      	mov	r0, r3
 8018556:	f7f3 fd73 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	3304      	adds	r3, #4
 801855e:	68b9      	ldr	r1, [r7, #8]
 8018560:	4618      	mov	r0, r3
 8018562:	f7f3 fd5b 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8018566:	6879      	ldr	r1, [r7, #4]
 8018568:	68f8      	ldr	r0, [r7, #12]
 801856a:	f7ff fce3 	bl	8017f34 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	1d1c      	adds	r4, r3, #4
 8018572:	f107 0310 	add.w	r3, r7, #16
 8018576:	6839      	ldr	r1, [r7, #0]
 8018578:	4618      	mov	r0, r3
 801857a:	f7f3 ffbd 	bl	800c4f8 <_Z10StringFromPKv>
 801857e:	f107 0310 	add.w	r3, r7, #16
 8018582:	4619      	mov	r1, r3
 8018584:	4620      	mov	r0, r4
 8018586:	f7f3 fd49 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801858a:	f107 0310 	add.w	r3, r7, #16
 801858e:	4618      	mov	r0, r3
 8018590:	f7f3 fcc7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 8018594:	68fb      	ldr	r3, [r7, #12]
}
 8018596:	4618      	mov	r0, r3
 8018598:	371c      	adds	r7, #28
 801859a:	46bd      	mov	sp, r7
 801859c:	bd90      	pop	{r4, r7, pc}
 801859e:	bf00      	nop
 80185a0:	080248c8 	.word	0x080248c8

080185a4 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 80185a4:	b480      	push	{r7}
 80185a6:	b083      	sub	sp, #12
 80185a8:	af00      	add	r7, sp, #0
 80185aa:	6078      	str	r0, [r7, #4]
    return false;
 80185ac:	2300      	movs	r3, #0
}
 80185ae:	4618      	mov	r0, r3
 80185b0:	370c      	adds	r7, #12
 80185b2:	46bd      	mov	sp, r7
 80185b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185b8:	4770      	bx	lr
	...

080185bc <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b084      	sub	sp, #16
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
 80185c4:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 80185c6:	f107 0308 	add.w	r3, r7, #8
 80185ca:	4909      	ldr	r1, [pc, #36]	; (80185f0 <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 80185cc:	4618      	mov	r0, r3
 80185ce:	f7f3 f8f0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80185d2:	f107 0308 	add.w	r3, r7, #8
 80185d6:	4619      	mov	r1, r3
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f003 fe0f 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 80185de:	f107 0308 	add.w	r3, r7, #8
 80185e2:	4618      	mov	r0, r3
 80185e4:	f7f3 fc9d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 80185e8:	6878      	ldr	r0, [r7, #4]
 80185ea:	3710      	adds	r7, #16
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}
 80185f0:	0802479c 	.word	0x0802479c

080185f4 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 80185f4:	b480      	push	{r7}
 80185f6:	b083      	sub	sp, #12
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
    return 0;
 80185fc:	2300      	movs	r3, #0
}
 80185fe:	4618      	mov	r0, r3
 8018600:	370c      	adds	r7, #12
 8018602:	46bd      	mov	sp, r7
 8018604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018608:	4770      	bx	lr

0801860a <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 801860a:	b480      	push	{r7}
 801860c:	b083      	sub	sp, #12
 801860e:	af00      	add	r7, sp, #0
 8018610:	6078      	str	r0, [r7, #4]
    return 0;
 8018612:	2300      	movs	r3, #0
}
 8018614:	4618      	mov	r0, r3
 8018616:	370c      	adds	r7, #12
 8018618:	46bd      	mov	sp, r7
 801861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801861e:	4770      	bx	lr

08018620 <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 8018620:	b480      	push	{r7}
 8018622:	b083      	sub	sp, #12
 8018624:	af00      	add	r7, sp, #0
 8018626:	6078      	str	r0, [r7, #4]
 8018628:	6039      	str	r1, [r7, #0]
    return 0;
 801862a:	2300      	movs	r3, #0
}
 801862c:	4618      	mov	r0, r3
 801862e:	370c      	adds	r7, #12
 8018630:	46bd      	mov	sp, r7
 8018632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018636:	4770      	bx	lr

08018638 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8018638:	b480      	push	{r7}
 801863a:	b083      	sub	sp, #12
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	6039      	str	r1, [r7, #0]
    return 0;
 8018642:	2300      	movs	r3, #0
}
 8018644:	4618      	mov	r0, r3
 8018646:	370c      	adds	r7, #12
 8018648:	46bd      	mov	sp, r7
 801864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801864e:	4770      	bx	lr

08018650 <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 8018650:	b5b0      	push	{r4, r5, r7, lr}
 8018652:	b084      	sub	sp, #16
 8018654:	af02      	add	r7, sp, #8
 8018656:	6078      	str	r0, [r7, #4]
 8018658:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801865a:	f7fa fc8d 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801865e:	4604      	mov	r4, r0
 8018660:	6823      	ldr	r3, [r4, #0]
 8018662:	3368      	adds	r3, #104	; 0x68
 8018664:	681d      	ldr	r5, [r3, #0]
 8018666:	f7fa fc97 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801866a:	4603      	mov	r3, r0
 801866c:	9300      	str	r3, [sp, #0]
 801866e:	f240 3375 	movw	r3, #885	; 0x375
 8018672:	4a06      	ldr	r2, [pc, #24]	; (801868c <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8018674:	4906      	ldr	r1, [pc, #24]	; (8018690 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8018676:	4620      	mov	r0, r4
 8018678:	47a8      	blx	r5
    return cpputest_longlong(0);
 801867a:	2100      	movs	r1, #0
 801867c:	6878      	ldr	r0, [r7, #4]
 801867e:	f7f1 f8cf 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
}
 8018682:	6878      	ldr	r0, [r7, #4]
 8018684:	3708      	adds	r7, #8
 8018686:	46bd      	mov	sp, r7
 8018688:	bdb0      	pop	{r4, r5, r7, pc}
 801868a:	bf00      	nop
 801868c:	080247b4 	.word	0x080247b4
 8018690:	080247fc 	.word	0x080247fc

08018694 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 8018694:	b5b0      	push	{r4, r5, r7, lr}
 8018696:	b084      	sub	sp, #16
 8018698:	af02      	add	r7, sp, #8
 801869a:	6078      	str	r0, [r7, #4]
 801869c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801869e:	f7fa fc6b 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80186a2:	4604      	mov	r4, r0
 80186a4:	6823      	ldr	r3, [r4, #0]
 80186a6:	3368      	adds	r3, #104	; 0x68
 80186a8:	681d      	ldr	r5, [r3, #0]
 80186aa:	f7fa fc75 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80186ae:	4603      	mov	r3, r0
 80186b0:	9300      	str	r3, [sp, #0]
 80186b2:	f240 337b 	movw	r3, #891	; 0x37b
 80186b6:	4a06      	ldr	r2, [pc, #24]	; (80186d0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 80186b8:	4906      	ldr	r1, [pc, #24]	; (80186d4 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 80186ba:	4620      	mov	r0, r4
 80186bc:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80186be:	2100      	movs	r1, #0
 80186c0:	6878      	ldr	r0, [r7, #4]
 80186c2:	f7f1 f8b9 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
}
 80186c6:	6878      	ldr	r0, [r7, #4]
 80186c8:	3708      	adds	r7, #8
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bdb0      	pop	{r4, r5, r7, pc}
 80186ce:	bf00      	nop
 80186d0:	080247b4 	.word	0x080247b4
 80186d4:	080247d0 	.word	0x080247d0

080186d8 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80186d8:	b5b0      	push	{r4, r5, r7, lr}
 80186da:	b086      	sub	sp, #24
 80186dc:	af02      	add	r7, sp, #8
 80186de:	60f8      	str	r0, [r7, #12]
 80186e0:	60b9      	str	r1, [r7, #8]
 80186e2:	4639      	mov	r1, r7
 80186e4:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 80186e8:	f7fa fc46 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 80186ec:	4604      	mov	r4, r0
 80186ee:	6823      	ldr	r3, [r4, #0]
 80186f0:	3368      	adds	r3, #104	; 0x68
 80186f2:	681d      	ldr	r5, [r3, #0]
 80186f4:	f7fa fc50 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80186f8:	4603      	mov	r3, r0
 80186fa:	9300      	str	r3, [sp, #0]
 80186fc:	f240 3381 	movw	r3, #897	; 0x381
 8018700:	4a05      	ldr	r2, [pc, #20]	; (8018718 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 8018702:	4906      	ldr	r1, [pc, #24]	; (801871c <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8018704:	4620      	mov	r0, r4
 8018706:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8018708:	2100      	movs	r1, #0
 801870a:	68f8      	ldr	r0, [r7, #12]
 801870c:	f7f1 f894 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
}
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	3710      	adds	r7, #16
 8018714:	46bd      	mov	sp, r7
 8018716:	bdb0      	pop	{r4, r5, r7, pc}
 8018718:	080247b4 	.word	0x080247b4
 801871c:	080247d0 	.word	0x080247d0

08018720 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 8018720:	b5b0      	push	{r4, r5, r7, lr}
 8018722:	b086      	sub	sp, #24
 8018724:	af02      	add	r7, sp, #8
 8018726:	60f8      	str	r0, [r7, #12]
 8018728:	60b9      	str	r1, [r7, #8]
 801872a:	4639      	mov	r1, r7
 801872c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8018730:	f7fa fc22 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8018734:	4604      	mov	r4, r0
 8018736:	6823      	ldr	r3, [r4, #0]
 8018738:	3368      	adds	r3, #104	; 0x68
 801873a:	681d      	ldr	r5, [r3, #0]
 801873c:	f7fa fc2c 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018740:	4603      	mov	r3, r0
 8018742:	9300      	str	r3, [sp, #0]
 8018744:	f240 3387 	movw	r3, #903	; 0x387
 8018748:	4a05      	ldr	r2, [pc, #20]	; (8018760 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 801874a:	4906      	ldr	r1, [pc, #24]	; (8018764 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801874c:	4620      	mov	r0, r4
 801874e:	47a8      	blx	r5
    return cpputest_longlong(0);
 8018750:	2100      	movs	r1, #0
 8018752:	68f8      	ldr	r0, [r7, #12]
 8018754:	f7f1 f864 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
}
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	3710      	adds	r7, #16
 801875c:	46bd      	mov	sp, r7
 801875e:	bdb0      	pop	{r4, r5, r7, pc}
 8018760:	080247b4 	.word	0x080247b4
 8018764:	080247fc 	.word	0x080247fc

08018768 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8018768:	b480      	push	{r7}
 801876a:	b083      	sub	sp, #12
 801876c:	af00      	add	r7, sp, #0
 801876e:	6078      	str	r0, [r7, #4]
    return false;
 8018770:	2300      	movs	r3, #0
}
 8018772:	4618      	mov	r0, r3
 8018774:	370c      	adds	r7, #12
 8018776:	46bd      	mov	sp, r7
 8018778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801877c:	4770      	bx	lr

0801877e <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801877e:	b480      	push	{r7}
 8018780:	b083      	sub	sp, #12
 8018782:	af00      	add	r7, sp, #0
 8018784:	6078      	str	r0, [r7, #4]
 8018786:	460b      	mov	r3, r1
 8018788:	70fb      	strb	r3, [r7, #3]
    return false;
 801878a:	2300      	movs	r3, #0
}
 801878c:	4618      	mov	r0, r3
 801878e:	370c      	adds	r7, #12
 8018790:	46bd      	mov	sp, r7
 8018792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018796:	4770      	bx	lr

08018798 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 8018798:	b480      	push	{r7}
 801879a:	b083      	sub	sp, #12
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
    return 0;
 80187a0:	2300      	movs	r3, #0
}
 80187a2:	4618      	mov	r0, r3
 80187a4:	370c      	adds	r7, #12
 80187a6:	46bd      	mov	sp, r7
 80187a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187ac:	4770      	bx	lr

080187ae <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 80187ae:	b480      	push	{r7}
 80187b0:	b083      	sub	sp, #12
 80187b2:	af00      	add	r7, sp, #0
 80187b4:	6078      	str	r0, [r7, #4]
    return 0.0;
 80187b6:	f04f 0200 	mov.w	r2, #0
 80187ba:	f04f 0300 	mov.w	r3, #0
 80187be:	ec43 2b17 	vmov	d7, r2, r3
}
 80187c2:	eeb0 0a47 	vmov.f32	s0, s14
 80187c6:	eef0 0a67 	vmov.f32	s1, s15
 80187ca:	370c      	adds	r7, #12
 80187cc:	46bd      	mov	sp, r7
 80187ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187d2:	4770      	bx	lr

080187d4 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b084      	sub	sp, #16
 80187d8:	af00      	add	r7, sp, #0
 80187da:	60f8      	str	r0, [r7, #12]
 80187dc:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	3398      	adds	r3, #152	; 0x98
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	68f8      	ldr	r0, [r7, #12]
 80187ea:	4798      	blx	r3
 80187ec:	eeb0 7a40 	vmov.f32	s14, s0
 80187f0:	eef0 7a60 	vmov.f32	s15, s1
}
 80187f4:	eeb0 0a47 	vmov.f32	s0, s14
 80187f8:	eef0 0a67 	vmov.f32	s1, s15
 80187fc:	3710      	adds	r7, #16
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}

08018802 <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 8018802:	b480      	push	{r7}
 8018804:	b083      	sub	sp, #12
 8018806:	af00      	add	r7, sp, #0
 8018808:	6078      	str	r0, [r7, #4]
    return 0;
 801880a:	2300      	movs	r3, #0
}
 801880c:	4618      	mov	r0, r3
 801880e:	370c      	adds	r7, #12
 8018810:	46bd      	mov	sp, r7
 8018812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018816:	4770      	bx	lr

08018818 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8018818:	b480      	push	{r7}
 801881a:	b083      	sub	sp, #12
 801881c:	af00      	add	r7, sp, #0
 801881e:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8018820:	2300      	movs	r3, #0
}
 8018822:	4618      	mov	r0, r3
 8018824:	370c      	adds	r7, #12
 8018826:	46bd      	mov	sp, r7
 8018828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882c:	4770      	bx	lr

0801882e <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801882e:	b480      	push	{r7}
 8018830:	b083      	sub	sp, #12
 8018832:	af00      	add	r7, sp, #0
 8018834:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8018836:	2300      	movs	r3, #0
}
 8018838:	4618      	mov	r0, r3
 801883a:	370c      	adds	r7, #12
 801883c:	46bd      	mov	sp, r7
 801883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018842:	4770      	bx	lr

08018844 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8018844:	b480      	push	{r7}
 8018846:	b083      	sub	sp, #12
 8018848:	af00      	add	r7, sp, #0
 801884a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801884c:	2300      	movs	r3, #0
}
 801884e:	4618      	mov	r0, r3
 8018850:	370c      	adds	r7, #12
 8018852:	46bd      	mov	sp, r7
 8018854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018858:	4770      	bx	lr

0801885a <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 801885a:	b580      	push	{r7, lr}
 801885c:	b082      	sub	sp, #8
 801885e:	af00      	add	r7, sp, #0
 8018860:	6078      	str	r0, [r7, #4]
 8018862:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	33a8      	adds	r3, #168	; 0xa8
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	6878      	ldr	r0, [r7, #4]
 801886e:	4798      	blx	r3
 8018870:	4603      	mov	r3, r0
}
 8018872:	4618      	mov	r0, r3
 8018874:	3708      	adds	r7, #8
 8018876:	46bd      	mov	sp, r7
 8018878:	bd80      	pop	{r7, pc}

0801887a <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 801887a:	b580      	push	{r7, lr}
 801887c:	b082      	sub	sp, #8
 801887e:	af00      	add	r7, sp, #0
 8018880:	6078      	str	r0, [r7, #4]
 8018882:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	33a0      	adds	r3, #160	; 0xa0
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	6878      	ldr	r0, [r7, #4]
 801888e:	4798      	blx	r3
 8018890:	4603      	mov	r3, r0
}
 8018892:	4618      	mov	r0, r3
 8018894:	3708      	adds	r7, #8
 8018896:	46bd      	mov	sp, r7
 8018898:	bd80      	pop	{r7, pc}

0801889a <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 801889a:	b580      	push	{r7, lr}
 801889c:	b082      	sub	sp, #8
 801889e:	af00      	add	r7, sp, #0
 80188a0:	6078      	str	r0, [r7, #4]
 80188a2:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	681b      	ldr	r3, [r3, #0]
 80188a8:	33b0      	adds	r3, #176	; 0xb0
 80188aa:	681b      	ldr	r3, [r3, #0]
 80188ac:	6878      	ldr	r0, [r7, #4]
 80188ae:	4798      	blx	r3
 80188b0:	4603      	mov	r3, r0
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3708      	adds	r7, #8
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
	...

080188bc <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	6078      	str	r0, [r7, #4]
    return "";
 80188c4:	4b03      	ldr	r3, [pc, #12]	; (80188d4 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	370c      	adds	r7, #12
 80188ca:	46bd      	mov	sp, r7
 80188cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188d0:	4770      	bx	lr
 80188d2:	bf00      	nop
 80188d4:	0802479c 	.word	0x0802479c

080188d8 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80188d8:	b580      	push	{r7, lr}
 80188da:	b082      	sub	sp, #8
 80188dc:	af00      	add	r7, sp, #0
 80188de:	6078      	str	r0, [r7, #4]
 80188e0:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	3394      	adds	r3, #148	; 0x94
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	6878      	ldr	r0, [r7, #4]
 80188ec:	4798      	blx	r3
 80188ee:	4603      	mov	r3, r0
}
 80188f0:	4618      	mov	r0, r3
 80188f2:	3708      	adds	r7, #8
 80188f4:	46bd      	mov	sp, r7
 80188f6:	bd80      	pop	{r7, pc}

080188f8 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 80188f8:	b480      	push	{r7}
 80188fa:	b083      	sub	sp, #12
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
 8018900:	6039      	str	r1, [r7, #0]
    return 0;
 8018902:	2300      	movs	r3, #0
}
 8018904:	4618      	mov	r0, r3
 8018906:	370c      	adds	r7, #12
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr

08018910 <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 8018910:	b580      	push	{r7, lr}
 8018912:	b082      	sub	sp, #8
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
 8018918:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	3388      	adds	r3, #136	; 0x88
 8018920:	681b      	ldr	r3, [r3, #0]
 8018922:	6878      	ldr	r0, [r7, #4]
 8018924:	4798      	blx	r3
 8018926:	4603      	mov	r3, r0
}
 8018928:	4618      	mov	r0, r3
 801892a:	3708      	adds	r7, #8
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}

08018930 <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 8018930:	b590      	push	{r4, r7, lr}
 8018932:	b085      	sub	sp, #20
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
 8018938:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	3304      	adds	r3, #4
 801893e:	490e      	ldr	r1, [pc, #56]	; (8018978 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 8018940:	4618      	mov	r0, r3
 8018942:	f7f3 fb7d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	1d1c      	adds	r4, r3, #4
 801894a:	f107 0308 	add.w	r3, r7, #8
 801894e:	6839      	ldr	r1, [r7, #0]
 8018950:	4618      	mov	r0, r3
 8018952:	f7f3 fdd1 	bl	800c4f8 <_Z10StringFromPKv>
 8018956:	f107 0308 	add.w	r3, r7, #8
 801895a:	4619      	mov	r1, r3
 801895c:	4620      	mov	r0, r4
 801895e:	f7f3 fb5d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8018962:	f107 0308 	add.w	r3, r7, #8
 8018966:	4618      	mov	r0, r3
 8018968:	f7f3 fadb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return *this;
 801896c:	687b      	ldr	r3, [r7, #4]
}
 801896e:	4618      	mov	r0, r3
 8018970:	3714      	adds	r7, #20
 8018972:	46bd      	mov	sp, r7
 8018974:	bd90      	pop	{r4, r7, pc}
 8018976:	bf00      	nop
 8018978:	080248d0 	.word	0x080248d0

0801897c <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 801897c:	b598      	push	{r3, r4, r7, lr}
 801897e:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 8018980:	4b09      	ldr	r3, [pc, #36]	; (80189a8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	2b00      	cmp	r3, #0
 8018986:	d10b      	bne.n	80189a0 <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 8018988:	f240 32f3 	movw	r2, #1011	; 0x3f3
 801898c:	4907      	ldr	r1, [pc, #28]	; (80189ac <_ZN19MockActualCallTrace8instanceEv+0x30>)
 801898e:	200c      	movs	r0, #12
 8018990:	f7f0 fb4c 	bl	800902c <_ZnwjPKci>
 8018994:	4604      	mov	r4, r0
 8018996:	4620      	mov	r0, r4
 8018998:	f7ff fa4c 	bl	8017e34 <_ZN19MockActualCallTraceC1Ev>
 801899c:	4b02      	ldr	r3, [pc, #8]	; (80189a8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801899e:	601c      	str	r4, [r3, #0]
    return *instance_;
 80189a0:	4b01      	ldr	r3, [pc, #4]	; (80189a8 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80189a2:	681b      	ldr	r3, [r3, #0]
}
 80189a4:	4618      	mov	r0, r3
 80189a6:	bd98      	pop	{r3, r4, r7, pc}
 80189a8:	20000db4 	.word	0x20000db4
 80189ac:	080247b4 	.word	0x080247b4

080189b0 <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 80189b0:	b580      	push	{r7, lr}
 80189b2:	af00      	add	r7, sp, #0
    delete instance_;
 80189b4:	4b06      	ldr	r3, [pc, #24]	; (80189d0 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	2b00      	cmp	r3, #0
 80189ba:	d004      	beq.n	80189c6 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 80189bc:	681a      	ldr	r2, [r3, #0]
 80189be:	3204      	adds	r2, #4
 80189c0:	6812      	ldr	r2, [r2, #0]
 80189c2:	4618      	mov	r0, r3
 80189c4:	4790      	blx	r2
    instance_ = NULLPTR;
 80189c6:	4b02      	ldr	r3, [pc, #8]	; (80189d0 <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80189c8:	2200      	movs	r2, #0
 80189ca:	601a      	str	r2, [r3, #0]
}
 80189cc:	bf00      	nop
 80189ce:	bd80      	pop	{r7, pc}
 80189d0:	20000db4 	.word	0x20000db4

080189d4 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80189d4:	b580      	push	{r7, lr}
 80189d6:	b082      	sub	sp, #8
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	4618      	mov	r0, r3
 80189e0:	f7fd fe9a 	bl	8016718 <_ZN14MockActualCallC1Ev>
 80189e4:	4a03      	ldr	r2, [pc, #12]	; (80189f4 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	601a      	str	r2, [r3, #0]
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	4618      	mov	r0, r3
 80189ee:	3708      	adds	r7, #8
 80189f0:	46bd      	mov	sp, r7
 80189f2:	bd80      	pop	{r7, pc}
 80189f4:	08026ebc 	.word	0x08026ebc

080189f8 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 80189f8:	b580      	push	{r7, lr}
 80189fa:	af00      	add	r7, sp, #0
 80189fc:	4801      	ldr	r0, [pc, #4]	; (8018a04 <__tcf_0+0xc>)
 80189fe:	f000 f831 	bl	8018a64 <_ZN21MockIgnoredActualCallD1Ev>
 8018a02:	bd80      	pop	{r7, pc}
 8018a04:	20000db8 	.word	0x20000db8

08018a08 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8018a0c:	4b12      	ldr	r3, [pc, #72]	; (8018a58 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018a0e:	781b      	ldrb	r3, [r3, #0]
 8018a10:	f3bf 8f5b 	dmb	ish
 8018a14:	b2db      	uxtb	r3, r3
 8018a16:	f003 0301 	and.w	r3, r3, #1
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	bf0c      	ite	eq
 8018a1e:	2301      	moveq	r3, #1
 8018a20:	2300      	movne	r3, #0
 8018a22:	b2db      	uxtb	r3, r3
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d013      	beq.n	8018a50 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8018a28:	480b      	ldr	r0, [pc, #44]	; (8018a58 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018a2a:	f005 fd81 	bl	801e530 <__cxa_guard_acquire>
 8018a2e:	4603      	mov	r3, r0
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	bf14      	ite	ne
 8018a34:	2301      	movne	r3, #1
 8018a36:	2300      	moveq	r3, #0
 8018a38:	b2db      	uxtb	r3, r3
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d008      	beq.n	8018a50 <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8018a3e:	4807      	ldr	r0, [pc, #28]	; (8018a5c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 8018a40:	f7ff ffc8 	bl	80189d4 <_ZN21MockIgnoredActualCallC1Ev>
 8018a44:	4804      	ldr	r0, [pc, #16]	; (8018a58 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8018a46:	f005 fd7f 	bl	801e548 <__cxa_guard_release>
 8018a4a:	4805      	ldr	r0, [pc, #20]	; (8018a60 <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8018a4c:	f005 fda3 	bl	801e596 <atexit>
    return call;
 8018a50:	4b02      	ldr	r3, [pc, #8]	; (8018a5c <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 8018a52:	4618      	mov	r0, r3
 8018a54:	bd80      	pop	{r7, pc}
 8018a56:	bf00      	nop
 8018a58:	20000dbc 	.word	0x20000dbc
 8018a5c:	20000db8 	.word	0x20000db8
 8018a60:	080189f9 	.word	0x080189f9

08018a64 <_ZN21MockIgnoredActualCallD1Ev>:
 8018a64:	b580      	push	{r7, lr}
 8018a66:	b082      	sub	sp, #8
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
 8018a6c:	4a05      	ldr	r2, [pc, #20]	; (8018a84 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	601a      	str	r2, [r3, #0]
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7fd fe5f 	bl	8016738 <_ZN14MockActualCallD1Ev>
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	3708      	adds	r7, #8
 8018a80:	46bd      	mov	sp, r7
 8018a82:	bd80      	pop	{r7, pc}
 8018a84:	08026ebc 	.word	0x08026ebc

08018a88 <_ZN21MockIgnoredActualCallD0Ev>:
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	6078      	str	r0, [r7, #4]
 8018a90:	6878      	ldr	r0, [r7, #4]
 8018a92:	f7ff ffe7 	bl	8018a64 <_ZN21MockIgnoredActualCallD1Ev>
 8018a96:	2104      	movs	r1, #4
 8018a98:	6878      	ldr	r0, [r7, #4]
 8018a9a:	f7f0 fadb 	bl	8009054 <_ZdlPvj>
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}

08018aa8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b082      	sub	sp, #8
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	4a05      	ldr	r2, [pc, #20]	; (8018ac8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	601a      	str	r2, [r3, #0]
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	4618      	mov	r0, r3
 8018aba:	f7f0 fefd 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	4618      	mov	r0, r3
 8018ac2:	3708      	adds	r7, #8
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd80      	pop	{r7, pc}
 8018ac8:	08026db4 	.word	0x08026db4

08018acc <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
 8018ad4:	6878      	ldr	r0, [r7, #4]
 8018ad6:	f7ff ffe7 	bl	8018aa8 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 8018ada:	2134      	movs	r1, #52	; 0x34
 8018adc:	6878      	ldr	r0, [r7, #4]
 8018ade:	f7f0 fab9 	bl	8009054 <_ZdlPvj>
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	4618      	mov	r0, r3
 8018ae6:	3708      	adds	r7, #8
 8018ae8:	46bd      	mov	sp, r7
 8018aea:	bd80      	pop	{r7, pc}

08018aec <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8018aec:	b580      	push	{r7, lr}
 8018aee:	b082      	sub	sp, #8
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	6078      	str	r0, [r7, #4]
 8018af4:	4a05      	ldr	r2, [pc, #20]	; (8018b0c <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8018af6:	687b      	ldr	r3, [r7, #4]
 8018af8:	601a      	str	r2, [r3, #0]
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7f0 fedb 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018b02:	687b      	ldr	r3, [r7, #4]
 8018b04:	4618      	mov	r0, r3
 8018b06:	3708      	adds	r7, #8
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}
 8018b0c:	08026e90 	.word	0x08026e90

08018b10 <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b082      	sub	sp, #8
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
 8018b18:	6878      	ldr	r0, [r7, #4]
 8018b1a:	f7ff ffe7 	bl	8018aec <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8018b1e:	2134      	movs	r1, #52	; 0x34
 8018b20:	6878      	ldr	r0, [r7, #4]
 8018b22:	f7f0 fa97 	bl	8009054 <_ZdlPvj>
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	4a05      	ldr	r2, [pc, #20]	; (8018b50 <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8018b3a:	687b      	ldr	r3, [r7, #4]
 8018b3c:	601a      	str	r2, [r3, #0]
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	4618      	mov	r0, r3
 8018b42:	f7f0 feb9 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	4618      	mov	r0, r3
 8018b4a:	3708      	adds	r7, #8
 8018b4c:	46bd      	mov	sp, r7
 8018b4e:	bd80      	pop	{r7, pc}
 8018b50:	08026e64 	.word	0x08026e64

08018b54 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	6878      	ldr	r0, [r7, #4]
 8018b5e:	f7ff ffe7 	bl	8018b30 <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 8018b62:	2134      	movs	r1, #52	; 0x34
 8018b64:	6878      	ldr	r0, [r7, #4]
 8018b66:	f7f0 fa75 	bl	8009054 <_ZdlPvj>
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	3708      	adds	r7, #8
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b082      	sub	sp, #8
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
 8018b7c:	4a05      	ldr	r2, [pc, #20]	; (8018b94 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	601a      	str	r2, [r3, #0]
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	4618      	mov	r0, r3
 8018b86:	f7f0 fe97 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	3708      	adds	r7, #8
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	08026e38 	.word	0x08026e38

08018b98 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
 8018ba0:	6878      	ldr	r0, [r7, #4]
 8018ba2:	f7ff ffe7 	bl	8018b74 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 8018ba6:	2134      	movs	r1, #52	; 0x34
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	f7f0 fa53 	bl	8009054 <_ZdlPvj>
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3708      	adds	r7, #8
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b082      	sub	sp, #8
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
 8018bc0:	4a05      	ldr	r2, [pc, #20]	; (8018bd8 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	601a      	str	r2, [r3, #0]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	4618      	mov	r0, r3
 8018bca:	f7f0 fe75 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	4618      	mov	r0, r3
 8018bd2:	3708      	adds	r7, #8
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	08026de0 	.word	0x08026de0

08018bdc <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b082      	sub	sp, #8
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	6078      	str	r0, [r7, #4]
 8018be4:	6878      	ldr	r0, [r7, #4]
 8018be6:	f7ff ffe7 	bl	8018bb8 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8018bea:	2134      	movs	r1, #52	; 0x34
 8018bec:	6878      	ldr	r0, [r7, #4]
 8018bee:	f7f0 fa31 	bl	8009054 <_ZdlPvj>
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b082      	sub	sp, #8
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
 8018c04:	4a05      	ldr	r2, [pc, #20]	; (8018c1c <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	601a      	str	r2, [r3, #0]
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f7f0 fe53 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	4618      	mov	r0, r3
 8018c16:	3708      	adds	r7, #8
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	bd80      	pop	{r7, pc}
 8018c1c:	08026e0c 	.word	0x08026e0c

08018c20 <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b082      	sub	sp, #8
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	6078      	str	r0, [r7, #4]
 8018c28:	6878      	ldr	r0, [r7, #4]
 8018c2a:	f7ff ffe7 	bl	8018bfc <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8018c2e:	2134      	movs	r1, #52	; 0x34
 8018c30:	6878      	ldr	r0, [r7, #4]
 8018c32:	f7f0 fa0f 	bl	8009054 <_ZdlPvj>
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	4618      	mov	r0, r3
 8018c3a:	3708      	adds	r7, #8
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}

08018c40 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 8018c40:	b580      	push	{r7, lr}
 8018c42:	b082      	sub	sp, #8
 8018c44:	af00      	add	r7, sp, #0
 8018c46:	6078      	str	r0, [r7, #4]
 8018c48:	4a05      	ldr	r2, [pc, #20]	; (8018c60 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	601a      	str	r2, [r3, #0]
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7f0 fe31 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	4618      	mov	r0, r3
 8018c5a:	3708      	adds	r7, #8
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	08026d5c 	.word	0x08026d5c

08018c64 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b082      	sub	sp, #8
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
 8018c6c:	6878      	ldr	r0, [r7, #4]
 8018c6e:	f7ff ffe7 	bl	8018c40 <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8018c72:	2134      	movs	r1, #52	; 0x34
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f7f0 f9ed 	bl	8009054 <_ZdlPvj>
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	4618      	mov	r0, r3
 8018c7e:	3708      	adds	r7, #8
 8018c80:	46bd      	mov	sp, r7
 8018c82:	bd80      	pop	{r7, pc}

08018c84 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b082      	sub	sp, #8
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	6078      	str	r0, [r7, #4]
 8018c8c:	4a05      	ldr	r2, [pc, #20]	; (8018ca4 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	601a      	str	r2, [r3, #0]
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7f0 fe0f 	bl	80098b8 <_ZN11MockFailureD1Ev>
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	3708      	adds	r7, #8
 8018ca0:	46bd      	mov	sp, r7
 8018ca2:	bd80      	pop	{r7, pc}
 8018ca4:	08026d88 	.word	0x08026d88

08018ca8 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b082      	sub	sp, #8
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
 8018cb0:	6878      	ldr	r0, [r7, #4]
 8018cb2:	f7ff ffe7 	bl	8018c84 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8018cb6:	2134      	movs	r1, #52	; 0x34
 8018cb8:	6878      	ldr	r0, [r7, #4]
 8018cba:	f7f0 f9cb 	bl	8009054 <_ZdlPvj>
 8018cbe:	687b      	ldr	r3, [r7, #4]
 8018cc0:	4618      	mov	r0, r3
 8018cc2:	3708      	adds	r7, #8
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}

08018cc8 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 8018cc8:	b580      	push	{r7, lr}
 8018cca:	b082      	sub	sp, #8
 8018ccc:	af00      	add	r7, sp, #0
 8018cce:	6078      	str	r0, [r7, #4]
 8018cd0:	6039      	str	r1, [r7, #0]
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	3310      	adds	r3, #16
 8018cd8:	681b      	ldr	r3, [r3, #0]
 8018cda:	683a      	ldr	r2, [r7, #0]
 8018cdc:	6839      	ldr	r1, [r7, #0]
 8018cde:	6878      	ldr	r0, [r7, #4]
 8018ce0:	4798      	blx	r3
 8018ce2:	4603      	mov	r3, r0
 8018ce4:	4618      	mov	r0, r3
 8018ce6:	3708      	adds	r7, #8
 8018ce8:	46bd      	mov	sp, r7
 8018cea:	bd80      	pop	{r7, pc}

08018cec <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8018cec:	b480      	push	{r7}
 8018cee:	b083      	sub	sp, #12
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
 8018cf4:	6039      	str	r1, [r7, #0]
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	370c      	adds	r7, #12
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d02:	4770      	bx	lr

08018d04 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
 8018d0c:	6039      	str	r1, [r7, #0]
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	4618      	mov	r0, r3
 8018d12:	370c      	adds	r7, #12
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr

08018d1c <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8018d1c:	b480      	push	{r7}
 8018d1e:	b085      	sub	sp, #20
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	60f8      	str	r0, [r7, #12]
 8018d24:	60b9      	str	r1, [r7, #8]
 8018d26:	607a      	str	r2, [r7, #4]
 8018d28:	68fb      	ldr	r3, [r7, #12]
 8018d2a:	4618      	mov	r0, r3
 8018d2c:	3714      	adds	r7, #20
 8018d2e:	46bd      	mov	sp, r7
 8018d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d34:	4770      	bx	lr

08018d36 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8018d36:	b480      	push	{r7}
 8018d38:	b085      	sub	sp, #20
 8018d3a:	af00      	add	r7, sp, #0
 8018d3c:	60f8      	str	r0, [r7, #12]
 8018d3e:	60b9      	str	r1, [r7, #8]
 8018d40:	4613      	mov	r3, r2
 8018d42:	71fb      	strb	r3, [r7, #7]
 8018d44:	68fb      	ldr	r3, [r7, #12]
 8018d46:	4618      	mov	r0, r3
 8018d48:	3714      	adds	r7, #20
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d50:	4770      	bx	lr

08018d52 <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8018d52:	b480      	push	{r7}
 8018d54:	b085      	sub	sp, #20
 8018d56:	af00      	add	r7, sp, #0
 8018d58:	60f8      	str	r0, [r7, #12]
 8018d5a:	60b9      	str	r1, [r7, #8]
 8018d5c:	607a      	str	r2, [r7, #4]
 8018d5e:	68fb      	ldr	r3, [r7, #12]
 8018d60:	4618      	mov	r0, r3
 8018d62:	3714      	adds	r7, #20
 8018d64:	46bd      	mov	sp, r7
 8018d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6a:	4770      	bx	lr

08018d6c <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8018d6c:	b480      	push	{r7}
 8018d6e:	b085      	sub	sp, #20
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	60b9      	str	r1, [r7, #8]
 8018d76:	607a      	str	r2, [r7, #4]
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	4618      	mov	r0, r3
 8018d7c:	3714      	adds	r7, #20
 8018d7e:	46bd      	mov	sp, r7
 8018d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d84:	4770      	bx	lr

08018d86 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8018d86:	b480      	push	{r7}
 8018d88:	b085      	sub	sp, #20
 8018d8a:	af00      	add	r7, sp, #0
 8018d8c:	60f8      	str	r0, [r7, #12]
 8018d8e:	60b9      	str	r1, [r7, #8]
 8018d90:	607a      	str	r2, [r7, #4]
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	4618      	mov	r0, r3
 8018d96:	3714      	adds	r7, #20
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d9e:	4770      	bx	lr

08018da0 <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8018da0:	b480      	push	{r7}
 8018da2:	b085      	sub	sp, #20
 8018da4:	af00      	add	r7, sp, #0
 8018da6:	60f8      	str	r0, [r7, #12]
 8018da8:	60b9      	str	r1, [r7, #8]
 8018daa:	607a      	str	r2, [r7, #4]
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	4618      	mov	r0, r3
 8018db0:	3714      	adds	r7, #20
 8018db2:	46bd      	mov	sp, r7
 8018db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db8:	4770      	bx	lr

08018dba <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8018dba:	b480      	push	{r7}
 8018dbc:	b085      	sub	sp, #20
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	60f8      	str	r0, [r7, #12]
 8018dc2:	60b9      	str	r1, [r7, #8]
 8018dc4:	4639      	mov	r1, r7
 8018dc6:	e881 000c 	stmia.w	r1, {r2, r3}
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	4618      	mov	r0, r3
 8018dce:	3714      	adds	r7, #20
 8018dd0:	46bd      	mov	sp, r7
 8018dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd6:	4770      	bx	lr

08018dd8 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8018dd8:	b480      	push	{r7}
 8018dda:	b085      	sub	sp, #20
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	60f8      	str	r0, [r7, #12]
 8018de0:	60b9      	str	r1, [r7, #8]
 8018de2:	4639      	mov	r1, r7
 8018de4:	e881 000c 	stmia.w	r1, {r2, r3}
 8018de8:	68fb      	ldr	r3, [r7, #12]
 8018dea:	4618      	mov	r0, r3
 8018dec:	3714      	adds	r7, #20
 8018dee:	46bd      	mov	sp, r7
 8018df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df4:	4770      	bx	lr

08018df6 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8018df6:	b480      	push	{r7}
 8018df8:	b085      	sub	sp, #20
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	60f8      	str	r0, [r7, #12]
 8018dfe:	60b9      	str	r1, [r7, #8]
 8018e00:	ed87 0b00 	vstr	d0, [r7]
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	4618      	mov	r0, r3
 8018e08:	3714      	adds	r7, #20
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e10:	4770      	bx	lr

08018e12 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 8018e12:	b480      	push	{r7}
 8018e14:	b087      	sub	sp, #28
 8018e16:	af00      	add	r7, sp, #0
 8018e18:	6178      	str	r0, [r7, #20]
 8018e1a:	6139      	str	r1, [r7, #16]
 8018e1c:	ed87 0b02 	vstr	d0, [r7, #8]
 8018e20:	ed87 1b00 	vstr	d1, [r7]
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	4618      	mov	r0, r3
 8018e28:	371c      	adds	r7, #28
 8018e2a:	46bd      	mov	sp, r7
 8018e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e30:	4770      	bx	lr

08018e32 <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8018e32:	b480      	push	{r7}
 8018e34:	b085      	sub	sp, #20
 8018e36:	af00      	add	r7, sp, #0
 8018e38:	60f8      	str	r0, [r7, #12]
 8018e3a:	60b9      	str	r1, [r7, #8]
 8018e3c:	607a      	str	r2, [r7, #4]
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	4618      	mov	r0, r3
 8018e42:	3714      	adds	r7, #20
 8018e44:	46bd      	mov	sp, r7
 8018e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e4a:	4770      	bx	lr

08018e4c <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8018e4c:	b480      	push	{r7}
 8018e4e:	b085      	sub	sp, #20
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	60f8      	str	r0, [r7, #12]
 8018e54:	60b9      	str	r1, [r7, #8]
 8018e56:	607a      	str	r2, [r7, #4]
 8018e58:	68fb      	ldr	r3, [r7, #12]
 8018e5a:	4618      	mov	r0, r3
 8018e5c:	3714      	adds	r7, #20
 8018e5e:	46bd      	mov	sp, r7
 8018e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e64:	4770      	bx	lr

08018e66 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8018e66:	b480      	push	{r7}
 8018e68:	b085      	sub	sp, #20
 8018e6a:	af00      	add	r7, sp, #0
 8018e6c:	60f8      	str	r0, [r7, #12]
 8018e6e:	60b9      	str	r1, [r7, #8]
 8018e70:	607a      	str	r2, [r7, #4]
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	4618      	mov	r0, r3
 8018e76:	3714      	adds	r7, #20
 8018e78:	46bd      	mov	sp, r7
 8018e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7e:	4770      	bx	lr

08018e80 <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 8018e80:	b480      	push	{r7}
 8018e82:	b085      	sub	sp, #20
 8018e84:	af00      	add	r7, sp, #0
 8018e86:	60f8      	str	r0, [r7, #12]
 8018e88:	60b9      	str	r1, [r7, #8]
 8018e8a:	607a      	str	r2, [r7, #4]
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3714      	adds	r7, #20
 8018e92:	46bd      	mov	sp, r7
 8018e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e98:	4770      	bx	lr

08018e9a <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 8018e9a:	b480      	push	{r7}
 8018e9c:	b085      	sub	sp, #20
 8018e9e:	af00      	add	r7, sp, #0
 8018ea0:	60f8      	str	r0, [r7, #12]
 8018ea2:	60b9      	str	r1, [r7, #8]
 8018ea4:	607a      	str	r2, [r7, #4]
 8018ea6:	603b      	str	r3, [r7, #0]
 8018ea8:	68fb      	ldr	r3, [r7, #12]
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3714      	adds	r7, #20
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb4:	4770      	bx	lr

08018eb6 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018eb6:	b480      	push	{r7}
 8018eb8:	b085      	sub	sp, #20
 8018eba:	af00      	add	r7, sp, #0
 8018ebc:	60f8      	str	r0, [r7, #12]
 8018ebe:	60b9      	str	r1, [r7, #8]
 8018ec0:	607a      	str	r2, [r7, #4]
 8018ec2:	603b      	str	r3, [r7, #0]
 8018ec4:	68fb      	ldr	r3, [r7, #12]
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3714      	adds	r7, #20
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed0:	4770      	bx	lr

08018ed2 <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 8018ed2:	b480      	push	{r7}
 8018ed4:	b085      	sub	sp, #20
 8018ed6:	af00      	add	r7, sp, #0
 8018ed8:	60f8      	str	r0, [r7, #12]
 8018eda:	60b9      	str	r1, [r7, #8]
 8018edc:	607a      	str	r2, [r7, #4]
 8018ede:	603b      	str	r3, [r7, #0]
 8018ee0:	68fb      	ldr	r3, [r7, #12]
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	3714      	adds	r7, #20
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eec:	4770      	bx	lr

08018eee <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8018eee:	b480      	push	{r7}
 8018ef0:	b085      	sub	sp, #20
 8018ef2:	af00      	add	r7, sp, #0
 8018ef4:	60f8      	str	r0, [r7, #12]
 8018ef6:	60b9      	str	r1, [r7, #8]
 8018ef8:	607a      	str	r2, [r7, #4]
 8018efa:	603b      	str	r3, [r7, #0]
 8018efc:	68fb      	ldr	r3, [r7, #12]
 8018efe:	4618      	mov	r0, r3
 8018f00:	3714      	adds	r7, #20
 8018f02:	46bd      	mov	sp, r7
 8018f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f08:	4770      	bx	lr

08018f0a <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8018f0a:	b480      	push	{r7}
 8018f0c:	b083      	sub	sp, #12
 8018f0e:	af00      	add	r7, sp, #0
 8018f10:	6078      	str	r0, [r7, #4]
 8018f12:	6039      	str	r1, [r7, #0]
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	4618      	mov	r0, r3
 8018f18:	370c      	adds	r7, #12
 8018f1a:	46bd      	mov	sp, r7
 8018f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f20:	4770      	bx	lr

08018f22 <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 8018f22:	b480      	push	{r7}
 8018f24:	b083      	sub	sp, #12
 8018f26:	af00      	add	r7, sp, #0
 8018f28:	6078      	str	r0, [r7, #4]
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	370c      	adds	r7, #12
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr

08018f38 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8018f38:	b480      	push	{r7}
 8018f3a:	b083      	sub	sp, #12
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
 8018f40:	460b      	mov	r3, r1
 8018f42:	70fb      	strb	r3, [r7, #3]
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	4618      	mov	r0, r3
 8018f48:	370c      	adds	r7, #12
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f50:	4770      	bx	lr

08018f52 <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 8018f52:	b480      	push	{r7}
 8018f54:	b083      	sub	sp, #12
 8018f56:	af00      	add	r7, sp, #0
 8018f58:	6078      	str	r0, [r7, #4]
 8018f5a:	6039      	str	r1, [r7, #0]
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	4618      	mov	r0, r3
 8018f60:	370c      	adds	r7, #12
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr

08018f6a <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8018f6a:	b480      	push	{r7}
 8018f6c:	b083      	sub	sp, #12
 8018f6e:	af00      	add	r7, sp, #0
 8018f70:	6078      	str	r0, [r7, #4]
 8018f72:	6039      	str	r1, [r7, #0]
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	4618      	mov	r0, r3
 8018f78:	370c      	adds	r7, #12
 8018f7a:	46bd      	mov	sp, r7
 8018f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f80:	4770      	bx	lr

08018f82 <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 8018f82:	b480      	push	{r7}
 8018f84:	b083      	sub	sp, #12
 8018f86:	af00      	add	r7, sp, #0
 8018f88:	6078      	str	r0, [r7, #4]
 8018f8a:	6039      	str	r1, [r7, #0]
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	4618      	mov	r0, r3
 8018f90:	370c      	adds	r7, #12
 8018f92:	46bd      	mov	sp, r7
 8018f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f98:	4770      	bx	lr

08018f9a <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 8018f9a:	b480      	push	{r7}
 8018f9c:	b083      	sub	sp, #12
 8018f9e:	af00      	add	r7, sp, #0
 8018fa0:	6078      	str	r0, [r7, #4]
 8018fa2:	6039      	str	r1, [r7, #0]
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	370c      	adds	r7, #12
 8018faa:	46bd      	mov	sp, r7
 8018fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb0:	4770      	bx	lr

08018fb2 <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 8018fb2:	b480      	push	{r7}
 8018fb4:	b085      	sub	sp, #20
 8018fb6:	af00      	add	r7, sp, #0
 8018fb8:	60f8      	str	r0, [r7, #12]
 8018fba:	1d3b      	adds	r3, r7, #4
 8018fbc:	e883 0006 	stmia.w	r3, {r1, r2}
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	4618      	mov	r0, r3
 8018fc4:	3714      	adds	r7, #20
 8018fc6:	46bd      	mov	sp, r7
 8018fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fcc:	4770      	bx	lr

08018fce <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 8018fce:	b480      	push	{r7}
 8018fd0:	b085      	sub	sp, #20
 8018fd2:	af00      	add	r7, sp, #0
 8018fd4:	60f8      	str	r0, [r7, #12]
 8018fd6:	1d3b      	adds	r3, r7, #4
 8018fd8:	e883 0006 	stmia.w	r3, {r1, r2}
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	4618      	mov	r0, r3
 8018fe0:	3714      	adds	r7, #20
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fe8:	4770      	bx	lr

08018fea <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8018fea:	b480      	push	{r7}
 8018fec:	b085      	sub	sp, #20
 8018fee:	af00      	add	r7, sp, #0
 8018ff0:	60f8      	str	r0, [r7, #12]
 8018ff2:	ed87 0b00 	vstr	d0, [r7]
 8018ff6:	68fb      	ldr	r3, [r7, #12]
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	3714      	adds	r7, #20
 8018ffc:	46bd      	mov	sp, r7
 8018ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019002:	4770      	bx	lr

08019004 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8019004:	b480      	push	{r7}
 8019006:	b083      	sub	sp, #12
 8019008:	af00      	add	r7, sp, #0
 801900a:	6078      	str	r0, [r7, #4]
 801900c:	6039      	str	r1, [r7, #0]
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	4618      	mov	r0, r3
 8019012:	370c      	adds	r7, #12
 8019014:	46bd      	mov	sp, r7
 8019016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801901a:	4770      	bx	lr

0801901c <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 801901c:	b480      	push	{r7}
 801901e:	b083      	sub	sp, #12
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	6039      	str	r1, [r7, #0]
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	4618      	mov	r0, r3
 801902a:	370c      	adds	r7, #12
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr

08019034 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8019034:	b480      	push	{r7}
 8019036:	b083      	sub	sp, #12
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
 801903c:	6039      	str	r1, [r7, #0]
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	4618      	mov	r0, r3
 8019042:	370c      	adds	r7, #12
 8019044:	46bd      	mov	sp, r7
 8019046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904a:	4770      	bx	lr

0801904c <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 801904c:	b480      	push	{r7}
 801904e:	b083      	sub	sp, #12
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
 8019054:	6039      	str	r1, [r7, #0]
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	4618      	mov	r0, r3
 801905a:	370c      	adds	r7, #12
 801905c:	46bd      	mov	sp, r7
 801905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019062:	4770      	bx	lr

08019064 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8019064:	b480      	push	{r7}
 8019066:	b083      	sub	sp, #12
 8019068:	af00      	add	r7, sp, #0
 801906a:	6078      	str	r0, [r7, #4]
 801906c:	6039      	str	r1, [r7, #0]
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	4618      	mov	r0, r3
 8019072:	370c      	adds	r7, #12
 8019074:	46bd      	mov	sp, r7
 8019076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801907a:	4770      	bx	lr

0801907c <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 801907c:	b480      	push	{r7}
 801907e:	b083      	sub	sp, #12
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	4a04      	ldr	r2, [pc, #16]	; (8019098 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	601a      	str	r2, [r3, #0]
{
}
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	4618      	mov	r0, r3
 801908e:	370c      	adds	r7, #12
 8019090:	46bd      	mov	sp, r7
 8019092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019096:	4770      	bx	lr
 8019098:	08027460 	.word	0x08027460

0801909c <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 801909c:	b480      	push	{r7}
 801909e:	b083      	sub	sp, #12
 80190a0:	af00      	add	r7, sp, #0
 80190a2:	6078      	str	r0, [r7, #4]
 80190a4:	4a04      	ldr	r2, [pc, #16]	; (80190b8 <_ZN16MockExpectedCallD1Ev+0x1c>)
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	601a      	str	r2, [r3, #0]
{
}
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	4618      	mov	r0, r3
 80190ae:	370c      	adds	r7, #12
 80190b0:	46bd      	mov	sp, r7
 80190b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b6:	4770      	bx	lr
 80190b8:	08027460 	.word	0x08027460

080190bc <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 80190bc:	b580      	push	{r7, lr}
 80190be:	b082      	sub	sp, #8
 80190c0:	af00      	add	r7, sp, #0
 80190c2:	6078      	str	r0, [r7, #4]
 80190c4:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 80190c6:	683b      	ldr	r3, [r7, #0]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	3358      	adds	r3, #88	; 0x58
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	6839      	ldr	r1, [r7, #0]
 80190d2:	4610      	mov	r0, r2
 80190d4:	4798      	blx	r3
}
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	3708      	adds	r7, #8
 80190da:	46bd      	mov	sp, r7
 80190dc:	bd80      	pop	{r7, pc}

080190de <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 80190de:	b580      	push	{r7, lr}
 80190e0:	b082      	sub	sp, #8
 80190e2:	af00      	add	r7, sp, #0
 80190e4:	6078      	str	r0, [r7, #4]
 80190e6:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	3304      	adds	r3, #4
 80190ec:	6839      	ldr	r1, [r7, #0]
 80190ee:	4618      	mov	r0, r3
 80190f0:	f7f2 fbcb 	bl	800b88a <_ZN12SimpleStringaSERKS_>
}
 80190f4:	bf00      	nop
 80190f6:	3708      	adds	r7, #8
 80190f8:	46bd      	mov	sp, r7
 80190fa:	bd80      	pop	{r7, pc}

080190fc <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 80190fc:	b580      	push	{r7, lr}
 80190fe:	b082      	sub	sp, #8
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
 8019104:	6039      	str	r1, [r7, #0]
    return functionName_;
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	3304      	adds	r3, #4
 801910a:	4619      	mov	r1, r3
 801910c:	6878      	ldr	r0, [r7, #4]
 801910e:	f7f2 fba4 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	3708      	adds	r7, #8
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
	...

0801911c <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 801911c:	b590      	push	{r4, r7, lr}
 801911e:	b085      	sub	sp, #20
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
 8019124:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	4618      	mov	r0, r3
 801912a:	f7ff ffa7 	bl	801907c <_ZN16MockExpectedCallC1Ev>
 801912e:	4a2c      	ldr	r2, [pc, #176]	; (80191e0 <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	601a      	str	r2, [r3, #0]
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	3304      	adds	r3, #4
 8019138:	492a      	ldr	r1, [pc, #168]	; (80191e4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801913a:	4618      	mov	r0, r3
 801913c:	f7f2 fb39 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2200      	movs	r2, #0
 8019144:	731a      	strb	r2, [r3, #12]
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2200      	movs	r2, #0
 801914a:	735a      	strb	r2, [r3, #13]
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2200      	movs	r2, #0
 8019150:	611a      	str	r2, [r3, #16]
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2200      	movs	r2, #0
 8019156:	615a      	str	r2, [r3, #20]
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2200      	movs	r2, #0
 801915c:	761a      	strb	r2, [r3, #24]
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8019164:	f107 0308 	add.w	r3, r7, #8
 8019168:	491e      	ldr	r1, [pc, #120]	; (80191e4 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 801916a:	4618      	mov	r0, r3
 801916c:	f7f2 fb21 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8019170:	f107 0308 	add.w	r3, r7, #8
 8019174:	4619      	mov	r1, r3
 8019176:	4620      	mov	r0, r4
 8019178:	f003 f840 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 801917c:	f107 0308 	add.w	r3, r7, #8
 8019180:	4618      	mov	r0, r3
 8019182:	f7f2 fece 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	2200      	movs	r2, #0
 801918a:	661a      	str	r2, [r3, #96]	; 0x60
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	2200      	movs	r2, #0
 8019190:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	2201      	movs	r2, #1
 8019198:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801919c:	687b      	ldr	r3, [r7, #4]
 801919e:	2200      	movs	r2, #0
 80191a0:	669a      	str	r2, [r3, #104]	; 0x68
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	683a      	ldr	r2, [r7, #0]
 80191a6:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 80191a8:	2246      	movs	r2, #70	; 0x46
 80191aa:	490f      	ldr	r1, [pc, #60]	; (80191e8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80191ac:	2004      	movs	r0, #4
 80191ae:	f7ef ff3d 	bl	800902c <_ZnwjPKci>
 80191b2:	4604      	mov	r4, r0
 80191b4:	4620      	mov	r0, r4
 80191b6:	f004 ff34 	bl	801e022 <_ZN18MockNamedValueListC1Ev>
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 80191be:	2247      	movs	r2, #71	; 0x47
 80191c0:	4909      	ldr	r1, [pc, #36]	; (80191e8 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 80191c2:	2004      	movs	r0, #4
 80191c4:	f7ef ff32 	bl	800902c <_ZnwjPKci>
 80191c8:	4604      	mov	r4, r0
 80191ca:	4620      	mov	r0, r4
 80191cc:	f004 ff29 	bl	801e022 <_ZN18MockNamedValueListC1Ev>
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	621c      	str	r4, [r3, #32]
}
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	4618      	mov	r0, r3
 80191d8:	3714      	adds	r7, #20
 80191da:	46bd      	mov	sp, r7
 80191dc:	bd90      	pop	{r4, r7, pc}
 80191de:	bf00      	nop
 80191e0:	080272a4 	.word	0x080272a4
 80191e4:	080248dc 	.word	0x080248dc
 80191e8:	080248e0 	.word	0x080248e0

080191ec <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 80191ec:	b580      	push	{r7, lr}
 80191ee:	b082      	sub	sp, #8
 80191f0:	af00      	add	r7, sp, #0
 80191f2:	6078      	str	r0, [r7, #4]
 80191f4:	4a17      	ldr	r2, [pc, #92]	; (8019254 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	69db      	ldr	r3, [r3, #28]
 80191fe:	4618      	mov	r0, r3
 8019200:	f004 ff1d 	bl	801e03e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	69db      	ldr	r3, [r3, #28]
 8019208:	2b00      	cmp	r3, #0
 801920a:	d003      	beq.n	8019214 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 801920c:	2104      	movs	r1, #4
 801920e:	4618      	mov	r0, r3
 8019210:	f7ef ff20 	bl	8009054 <_ZdlPvj>
    outputParameters_->clear();
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	6a1b      	ldr	r3, [r3, #32]
 8019218:	4618      	mov	r0, r3
 801921a:	f004 ff10 	bl	801e03e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	6a1b      	ldr	r3, [r3, #32]
 8019222:	2b00      	cmp	r3, #0
 8019224:	d003      	beq.n	801922e <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8019226:	2104      	movs	r1, #4
 8019228:	4618      	mov	r0, r3
 801922a:	f7ef ff13 	bl	8009054 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	3328      	adds	r3, #40	; 0x28
 8019232:	4618      	mov	r0, r3
 8019234:	f003 f80c 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	3304      	adds	r3, #4
 801923c:	4618      	mov	r0, r3
 801923e:	f7f2 fe70 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	4618      	mov	r0, r3
 8019246:	f7ff ff29 	bl	801909c <_ZN16MockExpectedCallD1Ev>
}
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	4618      	mov	r0, r3
 801924e:	3708      	adds	r7, #8
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	080272a4 	.word	0x080272a4

08019258 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8019258:	b580      	push	{r7, lr}
 801925a:	b082      	sub	sp, #8
 801925c:	af00      	add	r7, sp, #0
 801925e:	6078      	str	r0, [r7, #4]
}
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7ff ffc3 	bl	80191ec <_ZN23MockCheckedExpectedCallD1Ev>
 8019266:	2170      	movs	r1, #112	; 0x70
 8019268:	6878      	ldr	r0, [r7, #4]
 801926a:	f7ef fef3 	bl	8009054 <_ZdlPvj>
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	4618      	mov	r0, r3
 8019272:	3708      	adds	r7, #8
 8019274:	46bd      	mov	sp, r7
 8019276:	bd80      	pop	{r7, pc}

08019278 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8019278:	b580      	push	{r7, lr}
 801927a:	b082      	sub	sp, #8
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
 8019280:	6039      	str	r1, [r7, #0]
    setName(name);
 8019282:	6839      	ldr	r1, [r7, #0]
 8019284:	6878      	ldr	r0, [r7, #4]
 8019286:	f7ff ff2a 	bl	80190de <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 801928a:	687b      	ldr	r3, [r7, #4]
}
 801928c:	4618      	mov	r0, r3
 801928e:	3708      	adds	r7, #8
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}

08019294 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8019294:	b590      	push	{r4, r7, lr}
 8019296:	b087      	sub	sp, #28
 8019298:	af00      	add	r7, sp, #0
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	4613      	mov	r3, r2
 80192a0:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80192a2:	225a      	movs	r2, #90	; 0x5a
 80192a4:	490e      	ldr	r1, [pc, #56]	; (80192e0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 80192a6:	2038      	movs	r0, #56	; 0x38
 80192a8:	f7ef fec0 	bl	800902c <_ZnwjPKci>
 80192ac:	4604      	mov	r4, r0
 80192ae:	68b9      	ldr	r1, [r7, #8]
 80192b0:	4620      	mov	r0, r4
 80192b2:	f001 f851 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80192b6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80192b8:	68fb      	ldr	r3, [r7, #12]
 80192ba:	69db      	ldr	r3, [r3, #28]
 80192bc:	6979      	ldr	r1, [r7, #20]
 80192be:	4618      	mov	r0, r3
 80192c0:	f004 fee0 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80192c4:	697b      	ldr	r3, [r7, #20]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	3308      	adds	r3, #8
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	79fa      	ldrb	r2, [r7, #7]
 80192ce:	4611      	mov	r1, r2
 80192d0:	6978      	ldr	r0, [r7, #20]
 80192d2:	4798      	blx	r3
    return *this;
 80192d4:	68fb      	ldr	r3, [r7, #12]
}
 80192d6:	4618      	mov	r0, r3
 80192d8:	371c      	adds	r7, #28
 80192da:	46bd      	mov	sp, r7
 80192dc:	bd90      	pop	{r4, r7, pc}
 80192de:	bf00      	nop
 80192e0:	080248e0 	.word	0x080248e0

080192e4 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80192e4:	b590      	push	{r4, r7, lr}
 80192e6:	b087      	sub	sp, #28
 80192e8:	af00      	add	r7, sp, #0
 80192ea:	60f8      	str	r0, [r7, #12]
 80192ec:	60b9      	str	r1, [r7, #8]
 80192ee:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80192f0:	2262      	movs	r2, #98	; 0x62
 80192f2:	490e      	ldr	r1, [pc, #56]	; (801932c <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 80192f4:	2038      	movs	r0, #56	; 0x38
 80192f6:	f7ef fe99 	bl	800902c <_ZnwjPKci>
 80192fa:	4604      	mov	r4, r0
 80192fc:	68b9      	ldr	r1, [r7, #8]
 80192fe:	4620      	mov	r0, r4
 8019300:	f001 f82a 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019304:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	69db      	ldr	r3, [r3, #28]
 801930a:	6979      	ldr	r1, [r7, #20]
 801930c:	4618      	mov	r0, r3
 801930e:	f004 feb9 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019312:	697b      	ldr	r3, [r7, #20]
 8019314:	681b      	ldr	r3, [r3, #0]
 8019316:	3310      	adds	r3, #16
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	6879      	ldr	r1, [r7, #4]
 801931c:	6978      	ldr	r0, [r7, #20]
 801931e:	4798      	blx	r3
    return *this;
 8019320:	68fb      	ldr	r3, [r7, #12]
}
 8019322:	4618      	mov	r0, r3
 8019324:	371c      	adds	r7, #28
 8019326:	46bd      	mov	sp, r7
 8019328:	bd90      	pop	{r4, r7, pc}
 801932a:	bf00      	nop
 801932c:	080248e0 	.word	0x080248e0

08019330 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8019330:	b590      	push	{r4, r7, lr}
 8019332:	b087      	sub	sp, #28
 8019334:	af00      	add	r7, sp, #0
 8019336:	60f8      	str	r0, [r7, #12]
 8019338:	60b9      	str	r1, [r7, #8]
 801933a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801933c:	226a      	movs	r2, #106	; 0x6a
 801933e:	490e      	ldr	r1, [pc, #56]	; (8019378 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8019340:	2038      	movs	r0, #56	; 0x38
 8019342:	f7ef fe73 	bl	800902c <_ZnwjPKci>
 8019346:	4604      	mov	r4, r0
 8019348:	68b9      	ldr	r1, [r7, #8]
 801934a:	4620      	mov	r0, r4
 801934c:	f001 f804 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019350:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	69db      	ldr	r3, [r3, #28]
 8019356:	6979      	ldr	r1, [r7, #20]
 8019358:	4618      	mov	r0, r3
 801935a:	f004 fe93 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	681b      	ldr	r3, [r3, #0]
 8019362:	330c      	adds	r3, #12
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	6879      	ldr	r1, [r7, #4]
 8019368:	6978      	ldr	r0, [r7, #20]
 801936a:	4798      	blx	r3
    return *this;
 801936c:	68fb      	ldr	r3, [r7, #12]
}
 801936e:	4618      	mov	r0, r3
 8019370:	371c      	adds	r7, #28
 8019372:	46bd      	mov	sp, r7
 8019374:	bd90      	pop	{r4, r7, pc}
 8019376:	bf00      	nop
 8019378:	080248e0 	.word	0x080248e0

0801937c <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 801937c:	b590      	push	{r4, r7, lr}
 801937e:	b087      	sub	sp, #28
 8019380:	af00      	add	r7, sp, #0
 8019382:	60f8      	str	r0, [r7, #12]
 8019384:	60b9      	str	r1, [r7, #8]
 8019386:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019388:	2272      	movs	r2, #114	; 0x72
 801938a:	490e      	ldr	r1, [pc, #56]	; (80193c4 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 801938c:	2038      	movs	r0, #56	; 0x38
 801938e:	f7ef fe4d 	bl	800902c <_ZnwjPKci>
 8019392:	4604      	mov	r4, r0
 8019394:	68b9      	ldr	r1, [r7, #8]
 8019396:	4620      	mov	r0, r4
 8019398:	f000 ffde 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801939c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	69db      	ldr	r3, [r3, #28]
 80193a2:	6979      	ldr	r1, [r7, #20]
 80193a4:	4618      	mov	r0, r3
 80193a6:	f004 fe6d 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80193aa:	697b      	ldr	r3, [r7, #20]
 80193ac:	681b      	ldr	r3, [r3, #0]
 80193ae:	3314      	adds	r3, #20
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	6879      	ldr	r1, [r7, #4]
 80193b4:	6978      	ldr	r0, [r7, #20]
 80193b6:	4798      	blx	r3
    return *this;
 80193b8:	68fb      	ldr	r3, [r7, #12]
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	371c      	adds	r7, #28
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd90      	pop	{r4, r7, pc}
 80193c2:	bf00      	nop
 80193c4:	080248e0 	.word	0x080248e0

080193c8 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 80193c8:	b590      	push	{r4, r7, lr}
 80193ca:	b087      	sub	sp, #28
 80193cc:	af00      	add	r7, sp, #0
 80193ce:	60f8      	str	r0, [r7, #12]
 80193d0:	60b9      	str	r1, [r7, #8]
 80193d2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80193d4:	227a      	movs	r2, #122	; 0x7a
 80193d6:	490e      	ldr	r1, [pc, #56]	; (8019410 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 80193d8:	2038      	movs	r0, #56	; 0x38
 80193da:	f7ef fe27 	bl	800902c <_ZnwjPKci>
 80193de:	4604      	mov	r4, r0
 80193e0:	68b9      	ldr	r1, [r7, #8]
 80193e2:	4620      	mov	r0, r4
 80193e4:	f000 ffb8 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80193e8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80193ea:	68fb      	ldr	r3, [r7, #12]
 80193ec:	69db      	ldr	r3, [r3, #28]
 80193ee:	6979      	ldr	r1, [r7, #20]
 80193f0:	4618      	mov	r0, r3
 80193f2:	f004 fe47 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80193f6:	697b      	ldr	r3, [r7, #20]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	3318      	adds	r3, #24
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	6879      	ldr	r1, [r7, #4]
 8019400:	6978      	ldr	r0, [r7, #20]
 8019402:	4798      	blx	r3
    return *this;
 8019404:	68fb      	ldr	r3, [r7, #12]
}
 8019406:	4618      	mov	r0, r3
 8019408:	371c      	adds	r7, #28
 801940a:	46bd      	mov	sp, r7
 801940c:	bd90      	pop	{r4, r7, pc}
 801940e:	bf00      	nop
 8019410:	080248e0 	.word	0x080248e0

08019414 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8019414:	b5b0      	push	{r4, r5, r7, lr}
 8019416:	b086      	sub	sp, #24
 8019418:	af02      	add	r7, sp, #8
 801941a:	60f8      	str	r0, [r7, #12]
 801941c:	60b9      	str	r1, [r7, #8]
 801941e:	4639      	mov	r1, r7
 8019420:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8019424:	f7f9 fda8 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8019428:	4604      	mov	r4, r0
 801942a:	6823      	ldr	r3, [r4, #0]
 801942c:	3368      	adds	r3, #104	; 0x68
 801942e:	681d      	ldr	r5, [r3, #0]
 8019430:	f7f9 fdb2 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019434:	4603      	mov	r3, r0
 8019436:	9300      	str	r3, [sp, #0]
 8019438:	2396      	movs	r3, #150	; 0x96
 801943a:	4a04      	ldr	r2, [pc, #16]	; (801944c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 801943c:	4904      	ldr	r1, [pc, #16]	; (8019450 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 801943e:	4620      	mov	r0, r4
 8019440:	47a8      	blx	r5
    return *this;
 8019442:	68fb      	ldr	r3, [r7, #12]
}
 8019444:	4618      	mov	r0, r3
 8019446:	3710      	adds	r7, #16
 8019448:	46bd      	mov	sp, r7
 801944a:	bdb0      	pop	{r4, r5, r7, pc}
 801944c:	080248e0 	.word	0x080248e0
 8019450:	080248fc 	.word	0x080248fc

08019454 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8019454:	b5b0      	push	{r4, r5, r7, lr}
 8019456:	b086      	sub	sp, #24
 8019458:	af02      	add	r7, sp, #8
 801945a:	60f8      	str	r0, [r7, #12]
 801945c:	60b9      	str	r1, [r7, #8]
 801945e:	4639      	mov	r1, r7
 8019460:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8019464:	f7f9 fd88 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 8019468:	4604      	mov	r4, r0
 801946a:	6823      	ldr	r3, [r4, #0]
 801946c:	3368      	adds	r3, #104	; 0x68
 801946e:	681d      	ldr	r5, [r3, #0]
 8019470:	f7f9 fd92 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019474:	4603      	mov	r3, r0
 8019476:	9300      	str	r3, [sp, #0]
 8019478:	239c      	movs	r3, #156	; 0x9c
 801947a:	4a04      	ldr	r2, [pc, #16]	; (801948c <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 801947c:	4904      	ldr	r1, [pc, #16]	; (8019490 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 801947e:	4620      	mov	r0, r4
 8019480:	47a8      	blx	r5
    return *this;
 8019482:	68fb      	ldr	r3, [r7, #12]
}
 8019484:	4618      	mov	r0, r3
 8019486:	3710      	adds	r7, #16
 8019488:	46bd      	mov	sp, r7
 801948a:	bdb0      	pop	{r4, r5, r7, pc}
 801948c:	080248e0 	.word	0x080248e0
 8019490:	0802491c 	.word	0x0802491c

08019494 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8019494:	b590      	push	{r4, r7, lr}
 8019496:	b087      	sub	sp, #28
 8019498:	af00      	add	r7, sp, #0
 801949a:	60f8      	str	r0, [r7, #12]
 801949c:	60b9      	str	r1, [r7, #8]
 801949e:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80194a2:	22a4      	movs	r2, #164	; 0xa4
 80194a4:	490e      	ldr	r1, [pc, #56]	; (80194e0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 80194a6:	2038      	movs	r0, #56	; 0x38
 80194a8:	f7ef fdc0 	bl	800902c <_ZnwjPKci>
 80194ac:	4604      	mov	r4, r0
 80194ae:	68b9      	ldr	r1, [r7, #8]
 80194b0:	4620      	mov	r0, r4
 80194b2:	f000 ff51 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80194b6:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	69db      	ldr	r3, [r3, #28]
 80194bc:	6979      	ldr	r1, [r7, #20]
 80194be:	4618      	mov	r0, r3
 80194c0:	f004 fde0 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	3324      	adds	r3, #36	; 0x24
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	ed97 0b00 	vldr	d0, [r7]
 80194d0:	6978      	ldr	r0, [r7, #20]
 80194d2:	4798      	blx	r3
    return *this;
 80194d4:	68fb      	ldr	r3, [r7, #12]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	371c      	adds	r7, #28
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd90      	pop	{r4, r7, pc}
 80194de:	bf00      	nop
 80194e0:	080248e0 	.word	0x080248e0

080194e4 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 80194e4:	b590      	push	{r4, r7, lr}
 80194e6:	b089      	sub	sp, #36	; 0x24
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6178      	str	r0, [r7, #20]
 80194ec:	6139      	str	r1, [r7, #16]
 80194ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80194f2:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80194f6:	22ac      	movs	r2, #172	; 0xac
 80194f8:	490f      	ldr	r1, [pc, #60]	; (8019538 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 80194fa:	2038      	movs	r0, #56	; 0x38
 80194fc:	f7ef fd96 	bl	800902c <_ZnwjPKci>
 8019500:	4604      	mov	r4, r0
 8019502:	6939      	ldr	r1, [r7, #16]
 8019504:	4620      	mov	r0, r4
 8019506:	f000 ff27 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801950a:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	69db      	ldr	r3, [r3, #28]
 8019510:	69f9      	ldr	r1, [r7, #28]
 8019512:	4618      	mov	r0, r3
 8019514:	f004 fdb6 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8019518:	69fb      	ldr	r3, [r7, #28]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	3328      	adds	r3, #40	; 0x28
 801951e:	681b      	ldr	r3, [r3, #0]
 8019520:	ed97 1b00 	vldr	d1, [r7]
 8019524:	ed97 0b02 	vldr	d0, [r7, #8]
 8019528:	69f8      	ldr	r0, [r7, #28]
 801952a:	4798      	blx	r3
    return *this;
 801952c:	697b      	ldr	r3, [r7, #20]
}
 801952e:	4618      	mov	r0, r3
 8019530:	3724      	adds	r7, #36	; 0x24
 8019532:	46bd      	mov	sp, r7
 8019534:	bd90      	pop	{r4, r7, pc}
 8019536:	bf00      	nop
 8019538:	080248e0 	.word	0x080248e0

0801953c <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 801953c:	b590      	push	{r4, r7, lr}
 801953e:	b087      	sub	sp, #28
 8019540:	af00      	add	r7, sp, #0
 8019542:	60f8      	str	r0, [r7, #12]
 8019544:	60b9      	str	r1, [r7, #8]
 8019546:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019548:	22b4      	movs	r2, #180	; 0xb4
 801954a:	490e      	ldr	r1, [pc, #56]	; (8019584 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 801954c:	2038      	movs	r0, #56	; 0x38
 801954e:	f7ef fd6d 	bl	800902c <_ZnwjPKci>
 8019552:	4604      	mov	r4, r0
 8019554:	68b9      	ldr	r1, [r7, #8]
 8019556:	4620      	mov	r0, r4
 8019558:	f000 fefe 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801955c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	69db      	ldr	r3, [r3, #28]
 8019562:	6979      	ldr	r1, [r7, #20]
 8019564:	4618      	mov	r0, r3
 8019566:	f004 fd8d 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	3338      	adds	r3, #56	; 0x38
 8019570:	681b      	ldr	r3, [r3, #0]
 8019572:	6879      	ldr	r1, [r7, #4]
 8019574:	6978      	ldr	r0, [r7, #20]
 8019576:	4798      	blx	r3
    return *this;
 8019578:	68fb      	ldr	r3, [r7, #12]
}
 801957a:	4618      	mov	r0, r3
 801957c:	371c      	adds	r7, #28
 801957e:	46bd      	mov	sp, r7
 8019580:	bd90      	pop	{r4, r7, pc}
 8019582:	bf00      	nop
 8019584:	080248e0 	.word	0x080248e0

08019588 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8019588:	b590      	push	{r4, r7, lr}
 801958a:	b087      	sub	sp, #28
 801958c:	af00      	add	r7, sp, #0
 801958e:	60f8      	str	r0, [r7, #12]
 8019590:	60b9      	str	r1, [r7, #8]
 8019592:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019594:	22bc      	movs	r2, #188	; 0xbc
 8019596:	490e      	ldr	r1, [pc, #56]	; (80195d0 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8019598:	2038      	movs	r0, #56	; 0x38
 801959a:	f7ef fd47 	bl	800902c <_ZnwjPKci>
 801959e:	4604      	mov	r4, r0
 80195a0:	68b9      	ldr	r1, [r7, #8]
 80195a2:	4620      	mov	r0, r4
 80195a4:	f000 fed8 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80195a8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	69db      	ldr	r3, [r3, #28]
 80195ae:	6979      	ldr	r1, [r7, #20]
 80195b0:	4618      	mov	r0, r3
 80195b2:	f004 fd67 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 80195b6:	697b      	ldr	r3, [r7, #20]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	332c      	adds	r3, #44	; 0x2c
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	6879      	ldr	r1, [r7, #4]
 80195c0:	6978      	ldr	r0, [r7, #20]
 80195c2:	4798      	blx	r3
    return *this;
 80195c4:	68fb      	ldr	r3, [r7, #12]
}
 80195c6:	4618      	mov	r0, r3
 80195c8:	371c      	adds	r7, #28
 80195ca:	46bd      	mov	sp, r7
 80195cc:	bd90      	pop	{r4, r7, pc}
 80195ce:	bf00      	nop
 80195d0:	080248e0 	.word	0x080248e0

080195d4 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 80195d4:	b590      	push	{r4, r7, lr}
 80195d6:	b087      	sub	sp, #28
 80195d8:	af00      	add	r7, sp, #0
 80195da:	60f8      	str	r0, [r7, #12]
 80195dc:	60b9      	str	r1, [r7, #8]
 80195de:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80195e0:	22c4      	movs	r2, #196	; 0xc4
 80195e2:	490e      	ldr	r1, [pc, #56]	; (801961c <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 80195e4:	2038      	movs	r0, #56	; 0x38
 80195e6:	f7ef fd21 	bl	800902c <_ZnwjPKci>
 80195ea:	4604      	mov	r4, r0
 80195ec:	68b9      	ldr	r1, [r7, #8]
 80195ee:	4620      	mov	r0, r4
 80195f0:	f000 feb2 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80195f4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	69db      	ldr	r3, [r3, #28]
 80195fa:	6979      	ldr	r1, [r7, #20]
 80195fc:	4618      	mov	r0, r3
 80195fe:	f004 fd41 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	681b      	ldr	r3, [r3, #0]
 8019606:	3330      	adds	r3, #48	; 0x30
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	6879      	ldr	r1, [r7, #4]
 801960c:	6978      	ldr	r0, [r7, #20]
 801960e:	4798      	blx	r3
    return *this;
 8019610:	68fb      	ldr	r3, [r7, #12]
}
 8019612:	4618      	mov	r0, r3
 8019614:	371c      	adds	r7, #28
 8019616:	46bd      	mov	sp, r7
 8019618:	bd90      	pop	{r4, r7, pc}
 801961a:	bf00      	nop
 801961c:	080248e0 	.word	0x080248e0

08019620 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8019620:	b590      	push	{r4, r7, lr}
 8019622:	b087      	sub	sp, #28
 8019624:	af00      	add	r7, sp, #0
 8019626:	60f8      	str	r0, [r7, #12]
 8019628:	60b9      	str	r1, [r7, #8]
 801962a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801962c:	22cc      	movs	r2, #204	; 0xcc
 801962e:	490e      	ldr	r1, [pc, #56]	; (8019668 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 8019630:	2038      	movs	r0, #56	; 0x38
 8019632:	f7ef fcfb 	bl	800902c <_ZnwjPKci>
 8019636:	4604      	mov	r4, r0
 8019638:	68b9      	ldr	r1, [r7, #8]
 801963a:	4620      	mov	r0, r4
 801963c:	f000 fe8c 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8019640:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	69db      	ldr	r3, [r3, #28]
 8019646:	6979      	ldr	r1, [r7, #20]
 8019648:	4618      	mov	r0, r3
 801964a:	f004 fd1b 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801964e:	697b      	ldr	r3, [r7, #20]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	3334      	adds	r3, #52	; 0x34
 8019654:	681b      	ldr	r3, [r3, #0]
 8019656:	6879      	ldr	r1, [r7, #4]
 8019658:	6978      	ldr	r0, [r7, #20]
 801965a:	4798      	blx	r3
    return *this;
 801965c:	68fb      	ldr	r3, [r7, #12]
}
 801965e:	4618      	mov	r0, r3
 8019660:	371c      	adds	r7, #28
 8019662:	46bd      	mov	sp, r7
 8019664:	bd90      	pop	{r4, r7, pc}
 8019666:	bf00      	nop
 8019668:	080248e0 	.word	0x080248e0

0801966c <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 801966c:	b590      	push	{r4, r7, lr}
 801966e:	b087      	sub	sp, #28
 8019670:	af00      	add	r7, sp, #0
 8019672:	60f8      	str	r0, [r7, #12]
 8019674:	60b9      	str	r1, [r7, #8]
 8019676:	607a      	str	r2, [r7, #4]
 8019678:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801967a:	22d4      	movs	r2, #212	; 0xd4
 801967c:	490e      	ldr	r1, [pc, #56]	; (80196b8 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801967e:	2038      	movs	r0, #56	; 0x38
 8019680:	f7ef fcd4 	bl	800902c <_ZnwjPKci>
 8019684:	4604      	mov	r4, r0
 8019686:	68b9      	ldr	r1, [r7, #8]
 8019688:	4620      	mov	r0, r4
 801968a:	f000 fe65 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801968e:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	69db      	ldr	r3, [r3, #28]
 8019694:	6979      	ldr	r1, [r7, #20]
 8019696:	4618      	mov	r0, r3
 8019698:	f004 fcf4 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	333c      	adds	r3, #60	; 0x3c
 80196a2:	681b      	ldr	r3, [r3, #0]
 80196a4:	683a      	ldr	r2, [r7, #0]
 80196a6:	6879      	ldr	r1, [r7, #4]
 80196a8:	6978      	ldr	r0, [r7, #20]
 80196aa:	4798      	blx	r3
    return *this;
 80196ac:	68fb      	ldr	r3, [r7, #12]
}
 80196ae:	4618      	mov	r0, r3
 80196b0:	371c      	adds	r7, #28
 80196b2:	46bd      	mov	sp, r7
 80196b4:	bd90      	pop	{r4, r7, pc}
 80196b6:	bf00      	nop
 80196b8:	080248e0 	.word	0x080248e0

080196bc <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80196bc:	b590      	push	{r4, r7, lr}
 80196be:	b087      	sub	sp, #28
 80196c0:	af00      	add	r7, sp, #0
 80196c2:	60f8      	str	r0, [r7, #12]
 80196c4:	60b9      	str	r1, [r7, #8]
 80196c6:	607a      	str	r2, [r7, #4]
 80196c8:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80196ca:	22dc      	movs	r2, #220	; 0xdc
 80196cc:	490e      	ldr	r1, [pc, #56]	; (8019708 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 80196ce:	2038      	movs	r0, #56	; 0x38
 80196d0:	f7ef fcac 	bl	800902c <_ZnwjPKci>
 80196d4:	4604      	mov	r4, r0
 80196d6:	6879      	ldr	r1, [r7, #4]
 80196d8:	4620      	mov	r0, r4
 80196da:	f000 fe3d 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80196de:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	69db      	ldr	r3, [r3, #28]
 80196e4:	6979      	ldr	r1, [r7, #20]
 80196e6:	4618      	mov	r0, r3
 80196e8:	f004 fccc 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80196ec:	697b      	ldr	r3, [r7, #20]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	3340      	adds	r3, #64	; 0x40
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	683a      	ldr	r2, [r7, #0]
 80196f6:	68b9      	ldr	r1, [r7, #8]
 80196f8:	6978      	ldr	r0, [r7, #20]
 80196fa:	4798      	blx	r3
    return *this;
 80196fc:	68fb      	ldr	r3, [r7, #12]
}
 80196fe:	4618      	mov	r0, r3
 8019700:	371c      	adds	r7, #28
 8019702:	46bd      	mov	sp, r7
 8019704:	bd90      	pop	{r4, r7, pc}
 8019706:	bf00      	nop
 8019708:	080248e0 	.word	0x080248e0

0801970c <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 801970c:	b590      	push	{r4, r7, lr}
 801970e:	b087      	sub	sp, #28
 8019710:	af00      	add	r7, sp, #0
 8019712:	60f8      	str	r0, [r7, #12]
 8019714:	60b9      	str	r1, [r7, #8]
 8019716:	607a      	str	r2, [r7, #4]
 8019718:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 801971a:	22e4      	movs	r2, #228	; 0xe4
 801971c:	4911      	ldr	r1, [pc, #68]	; (8019764 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801971e:	2038      	movs	r0, #56	; 0x38
 8019720:	f7ef fc84 	bl	800902c <_ZnwjPKci>
 8019724:	4604      	mov	r4, r0
 8019726:	68b9      	ldr	r1, [r7, #8]
 8019728:	4620      	mov	r0, r4
 801972a:	f000 fe15 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801972e:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 8019730:	68fb      	ldr	r3, [r7, #12]
 8019732:	6a1b      	ldr	r3, [r3, #32]
 8019734:	6979      	ldr	r1, [r7, #20]
 8019736:	4618      	mov	r0, r3
 8019738:	f004 fca4 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801973c:	697b      	ldr	r3, [r7, #20]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	3330      	adds	r3, #48	; 0x30
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	6879      	ldr	r1, [r7, #4]
 8019746:	6978      	ldr	r0, [r7, #20]
 8019748:	4798      	blx	r3
    newParameter->setSize(size);
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	3348      	adds	r3, #72	; 0x48
 8019750:	681b      	ldr	r3, [r3, #0]
 8019752:	6839      	ldr	r1, [r7, #0]
 8019754:	6978      	ldr	r0, [r7, #20]
 8019756:	4798      	blx	r3
    return *this;
 8019758:	68fb      	ldr	r3, [r7, #12]
}
 801975a:	4618      	mov	r0, r3
 801975c:	371c      	adds	r7, #28
 801975e:	46bd      	mov	sp, r7
 8019760:	bd90      	pop	{r4, r7, pc}
 8019762:	bf00      	nop
 8019764:	080248e0 	.word	0x080248e0

08019768 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8019768:	b590      	push	{r4, r7, lr}
 801976a:	b087      	sub	sp, #28
 801976c:	af00      	add	r7, sp, #0
 801976e:	60f8      	str	r0, [r7, #12]
 8019770:	60b9      	str	r1, [r7, #8]
 8019772:	607a      	str	r2, [r7, #4]
 8019774:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8019776:	22ed      	movs	r2, #237	; 0xed
 8019778:	490e      	ldr	r1, [pc, #56]	; (80197b4 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 801977a:	2038      	movs	r0, #56	; 0x38
 801977c:	f7ef fc56 	bl	800902c <_ZnwjPKci>
 8019780:	4604      	mov	r4, r0
 8019782:	6879      	ldr	r1, [r7, #4]
 8019784:	4620      	mov	r0, r4
 8019786:	f000 fde7 	bl	801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801978a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801978c:	68fb      	ldr	r3, [r7, #12]
 801978e:	6a1b      	ldr	r3, [r3, #32]
 8019790:	6979      	ldr	r1, [r7, #20]
 8019792:	4618      	mov	r0, r3
 8019794:	f004 fc76 	bl	801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8019798:	697b      	ldr	r3, [r7, #20]
 801979a:	681b      	ldr	r3, [r3, #0]
 801979c:	3340      	adds	r3, #64	; 0x40
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	683a      	ldr	r2, [r7, #0]
 80197a2:	68b9      	ldr	r1, [r7, #8]
 80197a4:	6978      	ldr	r0, [r7, #20]
 80197a6:	4798      	blx	r3
    return *this;
 80197a8:	68fb      	ldr	r3, [r7, #12]
}
 80197aa:	4618      	mov	r0, r3
 80197ac:	371c      	adds	r7, #28
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd90      	pop	{r4, r7, pc}
 80197b2:	bf00      	nop
 80197b4:	080248e0 	.word	0x080248e0

080197b8 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 80197b8:	b590      	push	{r4, r7, lr}
 80197ba:	b083      	sub	sp, #12
 80197bc:	af00      	add	r7, sp, #0
 80197be:	6078      	str	r0, [r7, #4]
 80197c0:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	3318      	adds	r3, #24
 80197c8:	681c      	ldr	r4, [r3, #0]
 80197ca:	2300      	movs	r3, #0
 80197cc:	2200      	movs	r2, #0
 80197ce:	6839      	ldr	r1, [r7, #0]
 80197d0:	6878      	ldr	r0, [r7, #4]
 80197d2:	47a0      	blx	r4
 80197d4:	4603      	mov	r3, r0
}
 80197d6:	4618      	mov	r0, r3
 80197d8:	370c      	adds	r7, #12
 80197da:	46bd      	mov	sp, r7
 80197dc:	bd90      	pop	{r4, r7, pc}
	...

080197e0 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 80197e0:	b580      	push	{r7, lr}
 80197e2:	b086      	sub	sp, #24
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	60b9      	str	r1, [r7, #8]
 80197ea:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80197ec:	68bb      	ldr	r3, [r7, #8]
 80197ee:	69db      	ldr	r3, [r3, #28]
 80197f0:	6879      	ldr	r1, [r7, #4]
 80197f2:	4618      	mov	r0, r3
 80197f4:	f004 fc7c 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80197f8:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 80197fa:	697b      	ldr	r3, [r7, #20]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d008      	beq.n	8019812 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 8019800:	697b      	ldr	r3, [r7, #20]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	3360      	adds	r3, #96	; 0x60
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	68fa      	ldr	r2, [r7, #12]
 801980a:	6979      	ldr	r1, [r7, #20]
 801980c:	4610      	mov	r0, r2
 801980e:	4798      	blx	r3
 8019810:	e004      	b.n	801981c <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	4903      	ldr	r1, [pc, #12]	; (8019824 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8019816:	4618      	mov	r0, r3
 8019818:	f7f2 fe10 	bl	800c43c <_Z10StringFromPKc>
}
 801981c:	68f8      	ldr	r0, [r7, #12]
 801981e:	3718      	adds	r7, #24
 8019820:	46bd      	mov	sp, r7
 8019822:	bd80      	pop	{r7, pc}
 8019824:	080248dc 	.word	0x080248dc

08019828 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b084      	sub	sp, #16
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
 8019830:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	69db      	ldr	r3, [r3, #28]
 8019836:	6839      	ldr	r1, [r7, #0]
 8019838:	4618      	mov	r0, r3
 801983a:	f004 fc59 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801983e:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8019840:	68fb      	ldr	r3, [r7, #12]
 8019842:	2b00      	cmp	r3, #0
 8019844:	bf14      	ite	ne
 8019846:	2301      	movne	r3, #1
 8019848:	2300      	moveq	r3, #0
 801984a:	b2db      	uxtb	r3, r3
}
 801984c:	4618      	mov	r0, r3
 801984e:	3710      	adds	r7, #16
 8019850:	46bd      	mov	sp, r7
 8019852:	bd80      	pop	{r7, pc}

08019854 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b084      	sub	sp, #16
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
 801985c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	6a1b      	ldr	r3, [r3, #32]
 8019862:	6839      	ldr	r1, [r7, #0]
 8019864:	4618      	mov	r0, r3
 8019866:	f004 fc43 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801986a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801986c:	68fb      	ldr	r3, [r7, #12]
 801986e:	2b00      	cmp	r3, #0
 8019870:	bf14      	ite	ne
 8019872:	2301      	movne	r3, #1
 8019874:	2300      	moveq	r3, #0
 8019876:	b2db      	uxtb	r3, r3
}
 8019878:	4618      	mov	r0, r3
 801987a:	3710      	adds	r7, #16
 801987c:	46bd      	mov	sp, r7
 801987e:	bd80      	pop	{r7, pc}

08019880 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 8019880:	b590      	push	{r4, r7, lr}
 8019882:	b089      	sub	sp, #36	; 0x24
 8019884:	af00      	add	r7, sp, #0
 8019886:	60f8      	str	r0, [r7, #12]
 8019888:	60b9      	str	r1, [r7, #8]
 801988a:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	69db      	ldr	r3, [r3, #28]
 8019890:	6879      	ldr	r1, [r7, #4]
 8019892:	4618      	mov	r0, r3
 8019894:	f004 fc2c 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019898:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 801989a:	2400      	movs	r4, #0
 801989c:	69fb      	ldr	r3, [r7, #28]
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d004      	beq.n	80198ac <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 80198a2:	69f9      	ldr	r1, [r7, #28]
 80198a4:	68f8      	ldr	r0, [r7, #12]
 80198a6:	f7f0 f829 	bl	80098fc <_ZN14MockNamedValueC1ERKS_>
 80198aa:	e00c      	b.n	80198c6 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 80198ac:	f107 0314 	add.w	r3, r7, #20
 80198b0:	490a      	ldr	r1, [pc, #40]	; (80198dc <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 80198b2:	4618      	mov	r0, r3
 80198b4:	f7f1 ff7d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 80198b8:	2401      	movs	r4, #1
 80198ba:	f107 0314 	add.w	r3, r7, #20
 80198be:	4619      	mov	r1, r3
 80198c0:	68f8      	ldr	r0, [r7, #12]
 80198c2:	f002 fc9b 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 80198c6:	2c00      	cmp	r4, #0
 80198c8:	d004      	beq.n	80198d4 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 80198ca:	f107 0314 	add.w	r3, r7, #20
 80198ce:	4618      	mov	r0, r3
 80198d0:	f7f2 fb27 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 80198d4:	68f8      	ldr	r0, [r7, #12]
 80198d6:	3724      	adds	r7, #36	; 0x24
 80198d8:	46bd      	mov	sp, r7
 80198da:	bd90      	pop	{r4, r7, pc}
 80198dc:	080248dc 	.word	0x080248dc

080198e0 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 80198e0:	b590      	push	{r4, r7, lr}
 80198e2:	b089      	sub	sp, #36	; 0x24
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	60f8      	str	r0, [r7, #12]
 80198e8:	60b9      	str	r1, [r7, #8]
 80198ea:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 80198ec:	68bb      	ldr	r3, [r7, #8]
 80198ee:	6a1b      	ldr	r3, [r3, #32]
 80198f0:	6879      	ldr	r1, [r7, #4]
 80198f2:	4618      	mov	r0, r3
 80198f4:	f004 fbfc 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80198f8:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 80198fa:	2400      	movs	r4, #0
 80198fc:	69fb      	ldr	r3, [r7, #28]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d004      	beq.n	801990c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 8019902:	69f9      	ldr	r1, [r7, #28]
 8019904:	68f8      	ldr	r0, [r7, #12]
 8019906:	f7ef fff9 	bl	80098fc <_ZN14MockNamedValueC1ERKS_>
 801990a:	e00c      	b.n	8019926 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 801990c:	f107 0314 	add.w	r3, r7, #20
 8019910:	490a      	ldr	r1, [pc, #40]	; (801993c <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 8019912:	4618      	mov	r0, r3
 8019914:	f7f1 ff4d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 8019918:	2401      	movs	r4, #1
 801991a:	f107 0314 	add.w	r3, r7, #20
 801991e:	4619      	mov	r1, r3
 8019920:	68f8      	ldr	r0, [r7, #12]
 8019922:	f002 fc6b 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 8019926:	2c00      	cmp	r4, #0
 8019928:	d004      	beq.n	8019934 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 801992a:	f107 0314 	add.w	r3, r7, #20
 801992e:	4618      	mov	r0, r3
 8019930:	f7f2 faf7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 8019934:	68f8      	ldr	r0, [r7, #12]
 8019936:	3724      	adds	r7, #36	; 0x24
 8019938:	46bd      	mov	sp, r7
 801993a:	bd90      	pop	{r4, r7, pc}
 801993c:	080248dc 	.word	0x080248dc

08019940 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 8019940:	b580      	push	{r7, lr}
 8019942:	b084      	sub	sp, #16
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	69db      	ldr	r3, [r3, #28]
 801994c:	4618      	mov	r0, r3
 801994e:	f004 fbfe 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019952:	60f8      	str	r0, [r7, #12]
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d014      	beq.n	8019984 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 801995a:	68f9      	ldr	r1, [r7, #12]
 801995c:	6878      	ldr	r0, [r7, #4]
 801995e:	f000 fced 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019962:	4603      	mov	r3, r0
 8019964:	4618      	mov	r0, r3
 8019966:	f000 fd1f 	bl	801a3a8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801996a:	4603      	mov	r3, r0
 801996c:	f083 0301 	eor.w	r3, r3, #1
 8019970:	b2db      	uxtb	r3, r3
 8019972:	2b00      	cmp	r3, #0
 8019974:	d001      	beq.n	801997a <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8019976:	2300      	movs	r3, #0
 8019978:	e023      	b.n	80199c2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 801997a:	68f8      	ldr	r0, [r7, #12]
 801997c:	f004 faf0 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019980:	60f8      	str	r0, [r7, #12]
 8019982:	e7e7      	b.n	8019954 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	6a1b      	ldr	r3, [r3, #32]
 8019988:	4618      	mov	r0, r3
 801998a:	f004 fbe0 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	68fb      	ldr	r3, [r7, #12]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d014      	beq.n	80199c0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 8019996:	68f9      	ldr	r1, [r7, #12]
 8019998:	6878      	ldr	r0, [r7, #4]
 801999a:	f000 fccf 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801999e:	4603      	mov	r3, r0
 80199a0:	4618      	mov	r0, r3
 80199a2:	f000 fd01 	bl	801a3a8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80199a6:	4603      	mov	r3, r0
 80199a8:	f083 0301 	eor.w	r3, r3, #1
 80199ac:	b2db      	uxtb	r3, r3
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d001      	beq.n	80199b6 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 80199b2:	2300      	movs	r3, #0
 80199b4:	e005      	b.n	80199c2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 80199b6:	68f8      	ldr	r0, [r7, #12]
 80199b8:	f004 fad2 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 80199bc:	60f8      	str	r0, [r7, #12]
 80199be:	e7e7      	b.n	8019990 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 80199c0:	2301      	movs	r3, #1
}
 80199c2:	4618      	mov	r0, r3
 80199c4:	3710      	adds	r7, #16
 80199c6:	46bd      	mov	sp, r7
 80199c8:	bd80      	pop	{r7, pc}

080199ca <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 80199ca:	b480      	push	{r7}
 80199cc:	b083      	sub	sp, #12
 80199ce:	af00      	add	r7, sp, #0
 80199d0:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	2201      	movs	r2, #1
 80199d6:	731a      	strb	r2, [r3, #12]
    return *this;
 80199d8:	687b      	ldr	r3, [r7, #4]
}
 80199da:	4618      	mov	r0, r3
 80199dc:	370c      	adds	r7, #12
 80199de:	46bd      	mov	sp, r7
 80199e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199e4:	4770      	bx	lr

080199e6 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 80199e6:	b480      	push	{r7}
 80199e8:	b083      	sub	sp, #12
 80199ea:	af00      	add	r7, sp, #0
 80199ec:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199f6:	429a      	cmp	r2, r3
 80199f8:	bf0c      	ite	eq
 80199fa:	2301      	moveq	r3, #1
 80199fc:	2300      	movne	r3, #0
 80199fe:	b2db      	uxtb	r3, r3
}
 8019a00:	4618      	mov	r0, r3
 8019a02:	370c      	adds	r7, #12
 8019a04:	46bd      	mov	sp, r7
 8019a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a0a:	4770      	bx	lr

08019a0c <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8019a0c:	b480      	push	{r7}
 8019a0e:	b083      	sub	sp, #12
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019a1c:	429a      	cmp	r2, r3
 8019a1e:	bf34      	ite	cc
 8019a20:	2301      	movcc	r3, #1
 8019a22:	2300      	movcs	r3, #0
 8019a24:	b2db      	uxtb	r3, r3
}
 8019a26:	4618      	mov	r0, r3
 8019a28:	370c      	adds	r7, #12
 8019a2a:	46bd      	mov	sp, r7
 8019a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a30:	4770      	bx	lr

08019a32 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 8019a32:	b580      	push	{r7, lr}
 8019a34:	b082      	sub	sp, #8
 8019a36:	af00      	add	r7, sp, #0
 8019a38:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	33cc      	adds	r3, #204	; 0xcc
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	4798      	blx	r3
 8019a46:	4603      	mov	r3, r0
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d00c      	beq.n	8019a66 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	7b1b      	ldrb	r3, [r3, #12]
 8019a50:	f083 0301 	eor.w	r3, r3, #1
 8019a54:	b2db      	uxtb	r3, r3
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d103      	bne.n	8019a62 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	7b5b      	ldrb	r3, [r3, #13]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d001      	beq.n	8019a66 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8019a62:	2301      	movs	r3, #1
 8019a64:	e000      	b.n	8019a68 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8019a66:	2300      	movs	r3, #0
}
 8019a68:	4618      	mov	r0, r3
 8019a6a:	3708      	adds	r7, #8
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}

08019a70 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b082      	sub	sp, #8
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	33d0      	adds	r3, #208	; 0xd0
 8019a7e:	681b      	ldr	r3, [r3, #0]
 8019a80:	6878      	ldr	r0, [r7, #4]
 8019a82:	4798      	blx	r3
 8019a84:	4603      	mov	r3, r0
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d006      	beq.n	8019a98 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d001      	beq.n	8019a98 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 8019a94:	2301      	movs	r3, #1
 8019a96:	e000      	b.n	8019a9a <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 8019a98:	2300      	movs	r3, #0
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	3708      	adds	r7, #8
 8019a9e:	46bd      	mov	sp, r7
 8019aa0:	bd80      	pop	{r7, pc}

08019aa2 <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 8019aa2:	b580      	push	{r7, lr}
 8019aa4:	b082      	sub	sp, #8
 8019aa6:	af00      	add	r7, sp, #0
 8019aa8:	6078      	str	r0, [r7, #4]
 8019aaa:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019ab0:	1c5a      	adds	r2, r3, #1
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	691b      	ldr	r3, [r3, #16]
 8019aba:	2b00      	cmp	r3, #0
 8019abc:	d00c      	beq.n	8019ad8 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 8019ac2:	683a      	ldr	r2, [r7, #0]
 8019ac4:	429a      	cmp	r2, r3
 8019ac6:	d304      	bcc.n	8019ad2 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	695b      	ldr	r3, [r3, #20]
 8019acc:	683a      	ldr	r2, [r7, #0]
 8019ace:	429a      	cmp	r2, r3
 8019ad0:	d902      	bls.n	8019ad8 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	2201      	movs	r2, #1
 8019ad6:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	681b      	ldr	r3, [r3, #0]
 8019adc:	33ec      	adds	r3, #236	; 0xec
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	6878      	ldr	r0, [r7, #4]
 8019ae2:	4798      	blx	r3
}
 8019ae4:	bf00      	nop
 8019ae6:	3708      	adds	r7, #8
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}

08019aec <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8019aec:	b480      	push	{r7}
 8019aee:	b083      	sub	sp, #12
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	2201      	movs	r2, #1
 8019af8:	735a      	strb	r2, [r3, #13]
}
 8019afa:	bf00      	nop
 8019afc:	370c      	adds	r7, #12
 8019afe:	46bd      	mov	sp, r7
 8019b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b04:	4770      	bx	lr

08019b06 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 8019b06:	b480      	push	{r7}
 8019b08:	b083      	sub	sp, #12
 8019b0a:	af00      	add	r7, sp, #0
 8019b0c:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	2201      	movs	r2, #1
 8019b12:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8019b16:	bf00      	nop
 8019b18:	370c      	adds	r7, #12
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b20:	4770      	bx	lr

08019b22 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 8019b22:	b580      	push	{r7, lr}
 8019b24:	b084      	sub	sp, #16
 8019b26:	af00      	add	r7, sp, #0
 8019b28:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019b30:	f083 0301 	eor.w	r3, r3, #1
 8019b34:	b2da      	uxtb	r2, r3
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	2200      	movs	r2, #0
 8019b40:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	69db      	ldr	r3, [r3, #28]
 8019b46:	4618      	mov	r0, r3
 8019b48:	f004 fb01 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019b4c:	60f8      	str	r0, [r7, #12]
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d00d      	beq.n	8019b70 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8019b54:	68f9      	ldr	r1, [r7, #12]
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f000 fbf0 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019b5c:	4603      	mov	r3, r0
 8019b5e:	2100      	movs	r1, #0
 8019b60:	4618      	mov	r0, r3
 8019b62:	f000 fc11 	bl	801a388 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f004 f9fa 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019b6c:	60f8      	str	r0, [r7, #12]
 8019b6e:	e7ee      	b.n	8019b4e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	6a1b      	ldr	r3, [r3, #32]
 8019b74:	4618      	mov	r0, r3
 8019b76:	f004 faea 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019b7a:	60f8      	str	r0, [r7, #12]
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d00d      	beq.n	8019b9e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 8019b82:	68f9      	ldr	r1, [r7, #12]
 8019b84:	6878      	ldr	r0, [r7, #4]
 8019b86:	f000 fbd9 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	2100      	movs	r1, #0
 8019b8e:	4618      	mov	r0, r3
 8019b90:	f000 fbfa 	bl	801a388 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 8019b94:	68f8      	ldr	r0, [r7, #12]
 8019b96:	f004 f9e3 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019b9a:	60f8      	str	r0, [r7, #12]
 8019b9c:	e7ee      	b.n	8019b7c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 8019b9e:	bf00      	nop
 8019ba0:	3710      	adds	r7, #16
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}

08019ba6 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 8019ba6:	b590      	push	{r4, r7, lr}
 8019ba8:	b087      	sub	sp, #28
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	6078      	str	r0, [r7, #4]
 8019bae:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	69db      	ldr	r3, [r3, #28]
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f004 faca 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019bba:	6178      	str	r0, [r7, #20]
 8019bbc:	697b      	ldr	r3, [r7, #20]
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d022      	beq.n	8019c08 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8019bc2:	f107 030c 	add.w	r3, r7, #12
 8019bc6:	6979      	ldr	r1, [r7, #20]
 8019bc8:	4618      	mov	r0, r3
 8019bca:	f004 fa04 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019bce:	f107 030c 	add.w	r3, r7, #12
 8019bd2:	6839      	ldr	r1, [r7, #0]
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7f2 f9b0 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8019bda:	4603      	mov	r3, r0
 8019bdc:	461c      	mov	r4, r3
 8019bde:	f107 030c 	add.w	r3, r7, #12
 8019be2:	4618      	mov	r0, r3
 8019be4:	f7f2 f99d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019be8:	2c00      	cmp	r4, #0
 8019bea:	d008      	beq.n	8019bfe <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8019bec:	6979      	ldr	r1, [r7, #20]
 8019bee:	6878      	ldr	r0, [r7, #4]
 8019bf0:	f000 fba4 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019bf4:	4603      	mov	r3, r0
 8019bf6:	2101      	movs	r1, #1
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	f000 fbc5 	bl	801a388 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 8019bfe:	6978      	ldr	r0, [r7, #20]
 8019c00:	f004 f9ae 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019c04:	6178      	str	r0, [r7, #20]
 8019c06:	e7d9      	b.n	8019bbc <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8019c08:	bf00      	nop
 8019c0a:	371c      	adds	r7, #28
 8019c0c:	46bd      	mov	sp, r7
 8019c0e:	bd90      	pop	{r4, r7, pc}

08019c10 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 8019c10:	b590      	push	{r4, r7, lr}
 8019c12:	b087      	sub	sp, #28
 8019c14:	af00      	add	r7, sp, #0
 8019c16:	6078      	str	r0, [r7, #4]
 8019c18:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	6a1b      	ldr	r3, [r3, #32]
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f004 fa95 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019c24:	6178      	str	r0, [r7, #20]
 8019c26:	697b      	ldr	r3, [r7, #20]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d022      	beq.n	8019c72 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8019c2c:	f107 030c 	add.w	r3, r7, #12
 8019c30:	6979      	ldr	r1, [r7, #20]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f004 f9cf 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019c38:	f107 030c 	add.w	r3, r7, #12
 8019c3c:	6839      	ldr	r1, [r7, #0]
 8019c3e:	4618      	mov	r0, r3
 8019c40:	f7f2 f97b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 8019c44:	4603      	mov	r3, r0
 8019c46:	461c      	mov	r4, r3
 8019c48:	f107 030c 	add.w	r3, r7, #12
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7f2 f968 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019c52:	2c00      	cmp	r4, #0
 8019c54:	d008      	beq.n	8019c68 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8019c56:	6979      	ldr	r1, [r7, #20]
 8019c58:	6878      	ldr	r0, [r7, #4]
 8019c5a:	f000 fb6f 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	2101      	movs	r1, #1
 8019c62:	4618      	mov	r0, r3
 8019c64:	f000 fb90 	bl	801a388 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8019c68:	6978      	ldr	r0, [r7, #20]
 8019c6a:	f004 f979 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019c6e:	6178      	str	r0, [r7, #20]
 8019c70:	e7d9      	b.n	8019c26 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8019c72:	bf00      	nop
 8019c74:	371c      	adds	r7, #28
 8019c76:	46bd      	mov	sp, r7
 8019c78:	bd90      	pop	{r4, r7, pc}
	...

08019c7c <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b086      	sub	sp, #24
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	60f8      	str	r0, [r7, #12]
 8019c84:	60b9      	str	r1, [r7, #8]
 8019c86:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8019c88:	68bb      	ldr	r3, [r7, #8]
 8019c8a:	69db      	ldr	r3, [r3, #28]
 8019c8c:	6879      	ldr	r1, [r7, #4]
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f004 fa2e 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019c94:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 8019c96:	697b      	ldr	r3, [r7, #20]
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	d005      	beq.n	8019ca8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	6979      	ldr	r1, [r7, #20]
 8019ca0:	4618      	mov	r0, r3
 8019ca2:	f7ff fa0b 	bl	80190bc <_Z10StringFromRK14MockNamedValue>
 8019ca6:	e003      	b.n	8019cb0 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 8019ca8:	4903      	ldr	r1, [pc, #12]	; (8019cb8 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 8019caa:	68f8      	ldr	r0, [r7, #12]
 8019cac:	f7f1 fd81 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
}
 8019cb0:	68f8      	ldr	r0, [r7, #12]
 8019cb2:	3718      	adds	r7, #24
 8019cb4:	46bd      	mov	sp, r7
 8019cb6:	bd80      	pop	{r7, pc}
 8019cb8:	08024948 	.word	0x08024948

08019cbc <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 8019cbc:	b590      	push	{r4, r7, lr}
 8019cbe:	b087      	sub	sp, #28
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	6078      	str	r0, [r7, #4]
 8019cc4:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	69dc      	ldr	r4, [r3, #28]
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	335c      	adds	r3, #92	; 0x5c
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	f107 020c 	add.w	r2, r7, #12
 8019cd6:	6839      	ldr	r1, [r7, #0]
 8019cd8:	4610      	mov	r0, r2
 8019cda:	4798      	blx	r3
 8019cdc:	f107 030c 	add.w	r3, r7, #12
 8019ce0:	4619      	mov	r1, r3
 8019ce2:	4620      	mov	r0, r4
 8019ce4:	f004 fa04 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019ce8:	6178      	str	r0, [r7, #20]
 8019cea:	f107 030c 	add.w	r3, r7, #12
 8019cee:	4618      	mov	r0, r3
 8019cf0:	f7f2 f917 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8019cf4:	697b      	ldr	r3, [r7, #20]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d00d      	beq.n	8019d16 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8019cfa:	697b      	ldr	r3, [r7, #20]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	3350      	adds	r3, #80	; 0x50
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	6839      	ldr	r1, [r7, #0]
 8019d04:	6978      	ldr	r0, [r7, #20]
 8019d06:	4798      	blx	r3
 8019d08:	4603      	mov	r3, r0
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	bf14      	ite	ne
 8019d0e:	2301      	movne	r3, #1
 8019d10:	2300      	moveq	r3, #0
 8019d12:	b2db      	uxtb	r3, r3
 8019d14:	e006      	b.n	8019d24 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	7b1b      	ldrb	r3, [r3, #12]
 8019d1a:	2b00      	cmp	r3, #0
 8019d1c:	bf14      	ite	ne
 8019d1e:	2301      	movne	r3, #1
 8019d20:	2300      	moveq	r3, #0
 8019d22:	b2db      	uxtb	r3, r3
}
 8019d24:	4618      	mov	r0, r3
 8019d26:	371c      	adds	r7, #28
 8019d28:	46bd      	mov	sp, r7
 8019d2a:	bd90      	pop	{r4, r7, pc}

08019d2c <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8019d2c:	b590      	push	{r4, r7, lr}
 8019d2e:	b087      	sub	sp, #28
 8019d30:	af00      	add	r7, sp, #0
 8019d32:	6078      	str	r0, [r7, #4]
 8019d34:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	6a1c      	ldr	r4, [r3, #32]
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	681b      	ldr	r3, [r3, #0]
 8019d3e:	335c      	adds	r3, #92	; 0x5c
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	f107 020c 	add.w	r2, r7, #12
 8019d46:	6839      	ldr	r1, [r7, #0]
 8019d48:	4610      	mov	r0, r2
 8019d4a:	4798      	blx	r3
 8019d4c:	f107 030c 	add.w	r3, r7, #12
 8019d50:	4619      	mov	r1, r3
 8019d52:	4620      	mov	r0, r4
 8019d54:	f004 f9cc 	bl	801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8019d58:	6178      	str	r0, [r7, #20]
 8019d5a:	f107 030c 	add.w	r3, r7, #12
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f7f2 f8df 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8019d64:	697b      	ldr	r3, [r7, #20]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d00d      	beq.n	8019d86 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8019d6a:	697b      	ldr	r3, [r7, #20]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	3354      	adds	r3, #84	; 0x54
 8019d70:	681b      	ldr	r3, [r3, #0]
 8019d72:	6839      	ldr	r1, [r7, #0]
 8019d74:	6978      	ldr	r0, [r7, #20]
 8019d76:	4798      	blx	r3
 8019d78:	4603      	mov	r3, r0
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	bf14      	ite	ne
 8019d7e:	2301      	movne	r3, #1
 8019d80:	2300      	moveq	r3, #0
 8019d82:	b2db      	uxtb	r3, r3
 8019d84:	e006      	b.n	8019d94 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	7b1b      	ldrb	r3, [r3, #12]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	bf14      	ite	ne
 8019d8e:	2301      	movne	r3, #1
 8019d90:	2300      	moveq	r3, #0
 8019d92:	b2db      	uxtb	r3, r3
}
 8019d94:	4618      	mov	r0, r3
 8019d96:	371c      	adds	r7, #28
 8019d98:	46bd      	mov	sp, r7
 8019d9a:	bd90      	pop	{r4, r7, pc}

08019d9c <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 8019d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d9e:	b0a1      	sub	sp, #132	; 0x84
 8019da0:	af02      	add	r7, sp, #8
 8019da2:	6078      	str	r0, [r7, #4]
 8019da4:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019da6:	49bc      	ldr	r1, [pc, #752]	; (801a098 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8019da8:	6878      	ldr	r0, [r7, #4]
 8019daa:	f7f1 fd02 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d012      	beq.n	8019dde <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 8019db8:	683b      	ldr	r3, [r7, #0]
 8019dba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8019dbc:	f107 030c 	add.w	r3, r7, #12
 8019dc0:	49b6      	ldr	r1, [pc, #728]	; (801a09c <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f7f2 fdb4 	bl	800c930 <_Z16StringFromFormatPKcz>
 8019dc8:	f107 030c 	add.w	r3, r7, #12
 8019dcc:	4619      	mov	r1, r3
 8019dce:	6878      	ldr	r0, [r7, #4]
 8019dd0:	f7f1 fd5b 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 8019dd4:	f107 030c 	add.w	r3, r7, #12
 8019dd8:	4618      	mov	r0, r3
 8019dda:	f7f2 f8a2 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    str += getName();
 8019dde:	f107 0314 	add.w	r3, r7, #20
 8019de2:	6839      	ldr	r1, [r7, #0]
 8019de4:	4618      	mov	r0, r3
 8019de6:	f7ff f989 	bl	80190fc <_ZNK23MockCheckedExpectedCall7getNameEv>
 8019dea:	f107 0314 	add.w	r3, r7, #20
 8019dee:	4619      	mov	r1, r3
 8019df0:	6878      	ldr	r0, [r7, #4]
 8019df2:	f7f2 f913 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8019df6:	f107 0314 	add.w	r3, r7, #20
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f7f2 f891 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    str += " -> ";
 8019e00:	49a7      	ldr	r1, [pc, #668]	; (801a0a0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 8019e02:	6878      	ldr	r0, [r7, #4]
 8019e04:	f7f2 f91c 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8019e08:	683b      	ldr	r3, [r7, #0]
 8019e0a:	691b      	ldr	r3, [r3, #16]
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d02d      	beq.n	8019e6c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 8019e10:	683b      	ldr	r3, [r7, #0]
 8019e12:	691a      	ldr	r2, [r3, #16]
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	695b      	ldr	r3, [r3, #20]
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	d113      	bne.n	8019e44 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	691a      	ldr	r2, [r3, #16]
 8019e20:	f107 031c 	add.w	r3, r7, #28
 8019e24:	499f      	ldr	r1, [pc, #636]	; (801a0a4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8019e26:	4618      	mov	r0, r3
 8019e28:	f7f2 fd82 	bl	800c930 <_Z16StringFromFormatPKcz>
 8019e2c:	f107 031c 	add.w	r3, r7, #28
 8019e30:	4619      	mov	r1, r3
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7f2 f8f2 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8019e38:	f107 031c 	add.w	r3, r7, #28
 8019e3c:	4618      	mov	r0, r3
 8019e3e:	f7f2 f870 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019e42:	e013      	b.n	8019e6c <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8019e44:	683b      	ldr	r3, [r7, #0]
 8019e46:	691a      	ldr	r2, [r3, #16]
 8019e48:	683b      	ldr	r3, [r7, #0]
 8019e4a:	695b      	ldr	r3, [r3, #20]
 8019e4c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8019e50:	4995      	ldr	r1, [pc, #596]	; (801a0a8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 8019e52:	f7f2 fd6d 	bl	800c930 <_Z16StringFromFormatPKcz>
 8019e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019e5a:	4619      	mov	r1, r3
 8019e5c:	6878      	ldr	r0, [r7, #4]
 8019e5e:	f7f2 f8dd 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8019e62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7f2 f85b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	69db      	ldr	r3, [r3, #28]
 8019e70:	4618      	mov	r0, r3
 8019e72:	f004 f96c 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019e76:	4603      	mov	r3, r0
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d109      	bne.n	8019e90 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019e7c:	683b      	ldr	r3, [r7, #0]
 8019e7e:	6a1b      	ldr	r3, [r3, #32]
 8019e80:	4618      	mov	r0, r3
 8019e82:	f004 f964 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019e86:	4603      	mov	r3, r0
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d101      	bne.n	8019e90 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e000      	b.n	8019e92 <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 8019e90:	2300      	movs	r3, #0
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d00b      	beq.n	8019eae <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 8019e96:	683b      	ldr	r3, [r7, #0]
 8019e98:	7b1b      	ldrb	r3, [r3, #12]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d001      	beq.n	8019ea2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 8019e9e:	4b83      	ldr	r3, [pc, #524]	; (801a0ac <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 8019ea0:	e000      	b.n	8019ea4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 8019ea2:	4b83      	ldr	r3, [pc, #524]	; (801a0b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 8019ea4:	4619      	mov	r1, r3
 8019ea6:	6878      	ldr	r0, [r7, #4]
 8019ea8:	f7f2 f8ca 	bl	800c040 <_ZN12SimpleStringpLEPKc>
 8019eac:	e0e3      	b.n	801a076 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	69db      	ldr	r3, [r3, #28]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f004 f94b 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019eb8:	6778      	str	r0, [r7, #116]	; 0x74
 8019eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d069      	beq.n	8019f94 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 8019ec0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019ec4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f004 f898 	bl	801dffc <_ZNK22MockNamedValueListNode7getTypeEv>
 8019ecc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	f7f1 fff9 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8019ed6:	4605      	mov	r5, r0
 8019ed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019edc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019ede:	4618      	mov	r0, r3
 8019ee0:	f004 f879 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019ee4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019ee8:	4618      	mov	r0, r3
 8019eea:	f7f1 ffed 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8019eee:	4606      	mov	r6, r0
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	681b      	ldr	r3, [r3, #0]
 8019ef4:	33a4      	adds	r3, #164	; 0xa4
 8019ef6:	681c      	ldr	r4, [r3, #0]
 8019ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019efc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019efe:	4618      	mov	r0, r3
 8019f00:	f004 f869 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019f04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019f08:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019f0c:	6839      	ldr	r1, [r7, #0]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	47a0      	blx	r4
 8019f12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019f16:	4618      	mov	r0, r3
 8019f18:	f7f1 ffd6 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019f22:	9300      	str	r3, [sp, #0]
 8019f24:	4633      	mov	r3, r6
 8019f26:	462a      	mov	r2, r5
 8019f28:	4962      	ldr	r1, [pc, #392]	; (801a0b4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8019f2a:	f7f2 fd01 	bl	800c930 <_Z16StringFromFormatPKcz>
 8019f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f32:	4619      	mov	r1, r3
 8019f34:	6878      	ldr	r0, [r7, #4]
 8019f36:	f7f2 f871 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 8019f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7f1 ffef 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019f44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7f1 ffea 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8019f52:	4618      	mov	r0, r3
 8019f54:	f7f1 ffe5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019f58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019f5c:	4618      	mov	r0, r3
 8019f5e:	f7f1 ffe0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 8019f62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8019f66:	4618      	mov	r0, r3
 8019f68:	f7f1 ffdb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8019f6c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019f6e:	f003 fff7 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019f72:	4603      	mov	r3, r0
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	bf14      	ite	ne
 8019f78:	2301      	movne	r3, #1
 8019f7a:	2300      	moveq	r3, #0
 8019f7c:	b2db      	uxtb	r3, r3
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d003      	beq.n	8019f8a <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 8019f82:	494d      	ldr	r1, [pc, #308]	; (801a0b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019f84:	6878      	ldr	r0, [r7, #4]
 8019f86:	f7f2 f85b 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 8019f8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8019f8c:	f003 ffe8 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 8019f90:	6778      	str	r0, [r7, #116]	; 0x74
 8019f92:	e792      	b.n	8019eba <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	69db      	ldr	r3, [r3, #28]
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f004 f8d8 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019f9e:	4603      	mov	r3, r0
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d009      	beq.n	8019fb8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019fa4:	683b      	ldr	r3, [r7, #0]
 8019fa6:	6a1b      	ldr	r3, [r3, #32]
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f004 f8d0 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d001      	beq.n	8019fb8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 8019fb4:	2301      	movs	r3, #1
 8019fb6:	e000      	b.n	8019fba <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 8019fb8:	2300      	movs	r3, #0
 8019fba:	2b00      	cmp	r3, #0
 8019fbc:	d003      	beq.n	8019fc6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 8019fbe:	493e      	ldr	r1, [pc, #248]	; (801a0b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8019fc0:	6878      	ldr	r0, [r7, #4]
 8019fc2:	f7f2 f83d 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 8019fc6:	683b      	ldr	r3, [r7, #0]
 8019fc8:	6a1b      	ldr	r3, [r3, #32]
 8019fca:	4618      	mov	r0, r3
 8019fcc:	f004 f8bf 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 8019fd0:	6778      	str	r0, [r7, #116]	; 0x74
 8019fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d046      	beq.n	801a066 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 8019fd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019fdc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f004 f80c 	bl	801dffc <_ZNK22MockNamedValueListNode7getTypeEv>
 8019fe4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7f1 ff6d 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 8019fee:	4604      	mov	r4, r0
 8019ff0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019ff4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8019ff6:	4618      	mov	r0, r3
 8019ff8:	f003 ffed 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 8019ffc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a000:	4618      	mov	r0, r3
 801a002:	f7f1 ff61 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801a006:	4603      	mov	r3, r0
 801a008:	f107 0054 	add.w	r0, r7, #84	; 0x54
 801a00c:	4622      	mov	r2, r4
 801a00e:	492b      	ldr	r1, [pc, #172]	; (801a0bc <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 801a010:	f7f2 fc8e 	bl	800c930 <_Z16StringFromFormatPKcz>
 801a014:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a018:	4619      	mov	r1, r3
 801a01a:	6878      	ldr	r0, [r7, #4]
 801a01c:	f7f1 fffe 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801a020:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801a024:	4618      	mov	r0, r3
 801a026:	f7f1 ff7c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a02a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801a02e:	4618      	mov	r0, r3
 801a030:	f7f1 ff77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801a038:	4618      	mov	r0, r3
 801a03a:	f7f1 ff72 	bl	800bf22 <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 801a03e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801a040:	f003 ff8e 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801a044:	4603      	mov	r3, r0
 801a046:	2b00      	cmp	r3, #0
 801a048:	bf14      	ite	ne
 801a04a:	2301      	movne	r3, #1
 801a04c:	2300      	moveq	r3, #0
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	2b00      	cmp	r3, #0
 801a052:	d003      	beq.n	801a05c <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 801a054:	4918      	ldr	r1, [pc, #96]	; (801a0b8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 801a056:	6878      	ldr	r0, [r7, #4]
 801a058:	f7f1 fff2 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 801a05c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801a05e:	f003 ff7f 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801a062:	6778      	str	r0, [r7, #116]	; 0x74
 801a064:	e7b5      	b.n	8019fd2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	7b1b      	ldrb	r3, [r3, #12]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d003      	beq.n	801a076 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 801a06e:	4914      	ldr	r1, [pc, #80]	; (801a0c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 801a070:	6878      	ldr	r0, [r7, #4]
 801a072:	f7f1 ffe5 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801a076:	683b      	ldr	r3, [r7, #0]
 801a078:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801a07a:	683b      	ldr	r3, [r7, #0]
 801a07c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801a07e:	2b01      	cmp	r3, #1
 801a080:	d101      	bne.n	801a086 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 801a082:	4c05      	ldr	r4, [pc, #20]	; (801a098 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801a084:	e000      	b.n	801a088 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 801a086:	4c0f      	ldr	r4, [pc, #60]	; (801a0c4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801a08c:	683a      	ldr	r2, [r7, #0]
 801a08e:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 801a090:	2a01      	cmp	r2, #1
 801a092:	d119      	bne.n	801a0c8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 801a094:	4a00      	ldr	r2, [pc, #0]	; (801a098 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 801a096:	e018      	b.n	801a0ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 801a098:	080248dc 	.word	0x080248dc
 801a09c:	08024950 	.word	0x08024950
 801a0a0:	08024968 	.word	0x08024968
 801a0a4:	08024970 	.word	0x08024970
 801a0a8:	08024990 	.word	0x08024990
 801a0ac:	080249b4 	.word	0x080249b4
 801a0b0:	080249cc 	.word	0x080249cc
 801a0b4:	080249dc 	.word	0x080249dc
 801a0b8:	080249e8 	.word	0x080249e8
 801a0bc:	080249ec 	.word	0x080249ec
 801a0c0:	080249fc 	.word	0x080249fc
 801a0c4:	08024a1c 	.word	0x08024a1c
 801a0c8:	4a0c      	ldr	r2, [pc, #48]	; (801a0fc <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 801a0ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 801a0ce:	9201      	str	r2, [sp, #4]
 801a0d0:	9300      	str	r3, [sp, #0]
 801a0d2:	4623      	mov	r3, r4
 801a0d4:	460a      	mov	r2, r1
 801a0d6:	490a      	ldr	r1, [pc, #40]	; (801a100 <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 801a0d8:	f7f2 fc2a 	bl	800c930 <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 801a0dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a0e0:	4619      	mov	r1, r3
 801a0e2:	6878      	ldr	r0, [r7, #4]
 801a0e4:	f7f1 ff9a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801a0e8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7f1 ff18 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    return str;
 801a0f2:	bf00      	nop
}
 801a0f4:	6878      	ldr	r0, [r7, #4]
 801a0f6:	377c      	adds	r7, #124	; 0x7c
 801a0f8:	46bd      	mov	sp, r7
 801a0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0fc:	08024a1c 	.word	0x08024a1c
 801a100:	08024a20 	.word	0x08024a20

0801a104 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 801a104:	b590      	push	{r4, r7, lr}
 801a106:	b095      	sub	sp, #84	; 0x54
 801a108:	af00      	add	r7, sp, #0
 801a10a:	6078      	str	r0, [r7, #4]
 801a10c:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801a10e:	496c      	ldr	r1, [pc, #432]	; (801a2c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801a110:	6878      	ldr	r0, [r7, #4]
 801a112:	f7f1 fb4e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 801a116:	683b      	ldr	r3, [r7, #0]
 801a118:	69db      	ldr	r3, [r3, #28]
 801a11a:	4618      	mov	r0, r3
 801a11c:	f004 f817 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 801a120:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a124:	2b00      	cmp	r3, #0
 801a126:	d05e      	beq.n	801a1e6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 801a128:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a12a:	6838      	ldr	r0, [r7, #0]
 801a12c:	f000 f906 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a130:	4603      	mov	r3, r0
 801a132:	4618      	mov	r0, r3
 801a134:	f000 f938 	bl	801a3a8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a138:	4603      	mov	r3, r0
 801a13a:	f083 0301 	eor.w	r3, r3, #1
 801a13e:	b2db      	uxtb	r3, r3
 801a140:	2b00      	cmp	r3, #0
 801a142:	d04b      	beq.n	801a1dc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 801a144:	f107 030c 	add.w	r3, r7, #12
 801a148:	495d      	ldr	r1, [pc, #372]	; (801a2c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801a14a:	4618      	mov	r0, r3
 801a14c:	f7f1 fb31 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801a150:	f107 030c 	add.w	r3, r7, #12
 801a154:	4619      	mov	r1, r3
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	f7f1 ff34 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 801a15c:	4603      	mov	r3, r0
 801a15e:	461c      	mov	r4, r3
 801a160:	f107 030c 	add.w	r3, r7, #12
 801a164:	4618      	mov	r0, r3
 801a166:	f7f1 fedc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a16a:	2c00      	cmp	r4, #0
 801a16c:	d003      	beq.n	801a176 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 801a16e:	4955      	ldr	r1, [pc, #340]	; (801a2c4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801a170:	6878      	ldr	r0, [r7, #4]
 801a172:	f7f1 ff65 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801a176:	f107 031c 	add.w	r3, r7, #28
 801a17a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a17c:	4618      	mov	r0, r3
 801a17e:	f003 ff3d 	bl	801dffc <_ZNK22MockNamedValueListNode7getTypeEv>
 801a182:	f107 031c 	add.w	r3, r7, #28
 801a186:	4618      	mov	r0, r3
 801a188:	f7f1 fe9e 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801a18c:	4604      	mov	r4, r0
 801a18e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a192:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a194:	4618      	mov	r0, r3
 801a196:	f003 ff1e 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 801a19a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7f1 fe92 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	f107 0014 	add.w	r0, r7, #20
 801a1aa:	4622      	mov	r2, r4
 801a1ac:	4946      	ldr	r1, [pc, #280]	; (801a2c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801a1ae:	f7f2 fbbf 	bl	800c930 <_Z16StringFromFormatPKcz>
 801a1b2:	f107 0314 	add.w	r3, r7, #20
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	6878      	ldr	r0, [r7, #4]
 801a1ba:	f7f1 ff2f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801a1be:	f107 0314 	add.w	r3, r7, #20
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7f1 fead 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a1c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a1cc:	4618      	mov	r0, r3
 801a1ce:	f7f1 fea8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a1d2:	f107 031c 	add.w	r3, r7, #28
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	f7f1 fea3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 801a1dc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a1de:	f003 febf 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801a1e2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a1e4:	e79d      	b.n	801a122 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801a1e6:	683b      	ldr	r3, [r7, #0]
 801a1e8:	6a1b      	ldr	r3, [r3, #32]
 801a1ea:	4618      	mov	r0, r3
 801a1ec:	f003 ffaf 	bl	801e14e <_ZN18MockNamedValueList5beginEv>
 801a1f0:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d05e      	beq.n	801a2b6 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 801a1f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a1fa:	6838      	ldr	r0, [r7, #0]
 801a1fc:	f000 f89e 	bl	801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801a200:	4603      	mov	r3, r0
 801a202:	4618      	mov	r0, r3
 801a204:	f000 f8d0 	bl	801a3a8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 801a208:	4603      	mov	r3, r0
 801a20a:	f083 0301 	eor.w	r3, r3, #1
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	2b00      	cmp	r3, #0
 801a212:	d04b      	beq.n	801a2ac <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 801a214:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a218:	4929      	ldr	r1, [pc, #164]	; (801a2c0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 801a21a:	4618      	mov	r0, r3
 801a21c:	f7f1 fac9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801a220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a224:	4619      	mov	r1, r3
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f7f1 fecc 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 801a22c:	4603      	mov	r3, r0
 801a22e:	461c      	mov	r4, r3
 801a230:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801a234:	4618      	mov	r0, r3
 801a236:	f7f1 fe74 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a23a:	2c00      	cmp	r4, #0
 801a23c:	d003      	beq.n	801a246 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 801a23e:	4921      	ldr	r1, [pc, #132]	; (801a2c4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 801a240:	6878      	ldr	r0, [r7, #4]
 801a242:	f7f1 fefd 	bl	800c040 <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 801a246:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a24a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a24c:	4618      	mov	r0, r3
 801a24e:	f003 fed5 	bl	801dffc <_ZNK22MockNamedValueListNode7getTypeEv>
 801a252:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a256:	4618      	mov	r0, r3
 801a258:	f7f1 fe36 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801a25c:	4604      	mov	r4, r0
 801a25e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a262:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a264:	4618      	mov	r0, r3
 801a266:	f003 feb6 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 801a26a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a26e:	4618      	mov	r0, r3
 801a270:	f7f1 fe2a 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801a274:	4603      	mov	r3, r0
 801a276:	f107 0034 	add.w	r0, r7, #52	; 0x34
 801a27a:	4622      	mov	r2, r4
 801a27c:	4912      	ldr	r1, [pc, #72]	; (801a2c8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 801a27e:	f7f2 fb57 	bl	800c930 <_Z16StringFromFormatPKcz>
 801a282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a286:	4619      	mov	r1, r3
 801a288:	6878      	ldr	r0, [r7, #4]
 801a28a:	f7f1 fec7 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801a28e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801a292:	4618      	mov	r0, r3
 801a294:	f7f1 fe45 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a298:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f1 fe40 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a2a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	f7f1 fe3b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 801a2ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801a2ae:	f003 fe57 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801a2b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801a2b4:	e79d      	b.n	801a1f2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 801a2b6:	bf00      	nop
}
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	3754      	adds	r7, #84	; 0x54
 801a2bc:	46bd      	mov	sp, r7
 801a2be:	bd90      	pop	{r4, r7, pc}
 801a2c0:	080248dc 	.word	0x080248dc
 801a2c4:	080249e8 	.word	0x080249e8
 801a2c8:	08024a48 	.word	0x08024a48

0801a2cc <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 801a2cc:	b590      	push	{r4, r7, lr}
 801a2ce:	b085      	sub	sp, #20
 801a2d0:	af00      	add	r7, sp, #0
 801a2d2:	6078      	str	r0, [r7, #4]
 801a2d4:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 801a2d6:	f107 0308 	add.w	r3, r7, #8
 801a2da:	6879      	ldr	r1, [r7, #4]
 801a2dc:	4618      	mov	r0, r3
 801a2de:	f7fe ff0d 	bl	80190fc <_ZNK23MockCheckedExpectedCall7getNameEv>
 801a2e2:	f107 0308 	add.w	r3, r7, #8
 801a2e6:	4619      	mov	r1, r3
 801a2e8:	6838      	ldr	r0, [r7, #0]
 801a2ea:	f7f1 fe26 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801a2ee:	4603      	mov	r3, r0
 801a2f0:	461c      	mov	r4, r3
 801a2f2:	f107 0308 	add.w	r3, r7, #8
 801a2f6:	4618      	mov	r0, r3
 801a2f8:	f7f1 fe13 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801a2fc:	4623      	mov	r3, r4
}
 801a2fe:	4618      	mov	r0, r3
 801a300:	3714      	adds	r7, #20
 801a302:	46bd      	mov	sp, r7
 801a304:	bd90      	pop	{r4, r7, pc}

0801a306 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 801a306:	b480      	push	{r7}
 801a308:	b083      	sub	sp, #12
 801a30a:	af00      	add	r7, sp, #0
 801a30c:	6078      	str	r0, [r7, #4]
 801a30e:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801a316:	f083 0301 	eor.w	r3, r3, #1
 801a31a:	b2db      	uxtb	r3, r3
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d104      	bne.n	801a32a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a324:	683a      	ldr	r2, [r7, #0]
 801a326:	429a      	cmp	r2, r3
 801a328:	d101      	bne.n	801a32e <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 801a32a:	2301      	movs	r3, #1
 801a32c:	e000      	b.n	801a330 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 801a32e:	2300      	movs	r3, #0
}
 801a330:	4618      	mov	r0, r3
 801a332:	370c      	adds	r7, #12
 801a334:	46bd      	mov	sp, r7
 801a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a33a:	4770      	bx	lr

0801a33c <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 801a33c:	b580      	push	{r7, lr}
 801a33e:	b082      	sub	sp, #8
 801a340:	af00      	add	r7, sp, #0
 801a342:	6078      	str	r0, [r7, #4]
 801a344:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 801a346:	6838      	ldr	r0, [r7, #0]
 801a348:	f003 fe16 	bl	801df78 <_ZN22MockNamedValueListNode4itemEv>
 801a34c:	4603      	mov	r3, r0
}
 801a34e:	4618      	mov	r0, r3
 801a350:	3708      	adds	r7, #8
 801a352:	46bd      	mov	sp, r7
 801a354:	bd80      	pop	{r7, pc}
	...

0801a358 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 801a358:	b580      	push	{r7, lr}
 801a35a:	b082      	sub	sp, #8
 801a35c:	af00      	add	r7, sp, #0
 801a35e:	6078      	str	r0, [r7, #4]
 801a360:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	6839      	ldr	r1, [r7, #0]
 801a366:	4618      	mov	r0, r3
 801a368:	f001 ff48 	bl	801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>
 801a36c:	4a05      	ldr	r2, [pc, #20]	; (801a384 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	601a      	str	r2, [r3, #0]
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	2200      	movs	r2, #0
 801a376:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	4618      	mov	r0, r3
 801a37e:	3708      	adds	r7, #8
 801a380:	46bd      	mov	sp, r7
 801a382:	bd80      	pop	{r7, pc}
 801a384:	080273a8 	.word	0x080273a8

0801a388 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 801a388:	b480      	push	{r7}
 801a38a:	b083      	sub	sp, #12
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
 801a390:	460b      	mov	r3, r1
 801a392:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	78fa      	ldrb	r2, [r7, #3]
 801a398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 801a39c:	bf00      	nop
 801a39e:	370c      	adds	r7, #12
 801a3a0:	46bd      	mov	sp, r7
 801a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a6:	4770      	bx	lr

0801a3a8 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 801a3a8:	b480      	push	{r7}
 801a3aa:	b083      	sub	sp, #12
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 801a3b6:	4618      	mov	r0, r3
 801a3b8:	370c      	adds	r7, #12
 801a3ba:	46bd      	mov	sp, r7
 801a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3c0:	4770      	bx	lr
	...

0801a3c4 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 801a3c4:	b580      	push	{r7, lr}
 801a3c6:	b082      	sub	sp, #8
 801a3c8:	af00      	add	r7, sp, #0
 801a3ca:	6078      	str	r0, [r7, #4]
 801a3cc:	460b      	mov	r3, r1
 801a3ce:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	3328      	adds	r3, #40	; 0x28
 801a3d4:	4907      	ldr	r1, [pc, #28]	; (801a3f4 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 801a3d6:	4618      	mov	r0, r3
 801a3d8:	f002 f9b2 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	3328      	adds	r3, #40	; 0x28
 801a3e0:	78fa      	ldrb	r2, [r7, #3]
 801a3e2:	4611      	mov	r1, r2
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	f001 ff5b 	bl	801c2a0 <_ZN14MockNamedValue8setValueEb>
    return *this;
 801a3ea:	687b      	ldr	r3, [r7, #4]
}
 801a3ec:	4618      	mov	r0, r3
 801a3ee:	3708      	adds	r7, #8
 801a3f0:	46bd      	mov	sp, r7
 801a3f2:	bd80      	pop	{r7, pc}
 801a3f4:	08024a50 	.word	0x08024a50

0801a3f8 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b082      	sub	sp, #8
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	3328      	adds	r3, #40	; 0x28
 801a406:	4907      	ldr	r1, [pc, #28]	; (801a424 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 801a408:	4618      	mov	r0, r3
 801a40a:	f002 f999 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	3328      	adds	r3, #40	; 0x28
 801a412:	6839      	ldr	r1, [r7, #0]
 801a414:	4618      	mov	r0, r3
 801a416:	f001 ff67 	bl	801c2e8 <_ZN14MockNamedValue8setValueEj>
    return *this;
 801a41a:	687b      	ldr	r3, [r7, #4]
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	08024a50 	.word	0x08024a50

0801a428 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b082      	sub	sp, #8
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
 801a430:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	3328      	adds	r3, #40	; 0x28
 801a436:	4907      	ldr	r1, [pc, #28]	; (801a454 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 801a438:	4618      	mov	r0, r3
 801a43a:	f002 f981 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	3328      	adds	r3, #40	; 0x28
 801a442:	6839      	ldr	r1, [r7, #0]
 801a444:	4618      	mov	r0, r3
 801a446:	f001 ff71 	bl	801c32c <_ZN14MockNamedValue8setValueEi>
    return *this;
 801a44a:	687b      	ldr	r3, [r7, #4]
}
 801a44c:	4618      	mov	r0, r3
 801a44e:	3708      	adds	r7, #8
 801a450:	46bd      	mov	sp, r7
 801a452:	bd80      	pop	{r7, pc}
 801a454:	08024a50 	.word	0x08024a50

0801a458 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b082      	sub	sp, #8
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	6078      	str	r0, [r7, #4]
 801a460:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	3328      	adds	r3, #40	; 0x28
 801a466:	4907      	ldr	r1, [pc, #28]	; (801a484 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 801a468:	4618      	mov	r0, r3
 801a46a:	f002 f969 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	3328      	adds	r3, #40	; 0x28
 801a472:	6839      	ldr	r1, [r7, #0]
 801a474:	4618      	mov	r0, r3
 801a476:	f001 ff7b 	bl	801c370 <_ZN14MockNamedValue8setValueEl>
    return *this;
 801a47a:	687b      	ldr	r3, [r7, #4]
}
 801a47c:	4618      	mov	r0, r3
 801a47e:	3708      	adds	r7, #8
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}
 801a484:	08024a50 	.word	0x08024a50

0801a488 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b082      	sub	sp, #8
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
 801a490:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	3328      	adds	r3, #40	; 0x28
 801a496:	4907      	ldr	r1, [pc, #28]	; (801a4b4 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 801a498:	4618      	mov	r0, r3
 801a49a:	f002 f951 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	3328      	adds	r3, #40	; 0x28
 801a4a2:	6839      	ldr	r1, [r7, #0]
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	f001 ff85 	bl	801c3b4 <_ZN14MockNamedValue8setValueEm>
    return *this;
 801a4aa:	687b      	ldr	r3, [r7, #4]
}
 801a4ac:	4618      	mov	r0, r3
 801a4ae:	3708      	adds	r7, #8
 801a4b0:	46bd      	mov	sp, r7
 801a4b2:	bd80      	pop	{r7, pc}
 801a4b4:	08024a50 	.word	0x08024a50

0801a4b8 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 801a4b8:	b5b0      	push	{r4, r5, r7, lr}
 801a4ba:	b086      	sub	sp, #24
 801a4bc:	af02      	add	r7, sp, #8
 801a4be:	60f8      	str	r0, [r7, #12]
 801a4c0:	1d3b      	adds	r3, r7, #4
 801a4c2:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801a4c6:	f7f8 fd57 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801a4ca:	4604      	mov	r4, r0
 801a4cc:	6823      	ldr	r3, [r4, #0]
 801a4ce:	3368      	adds	r3, #104	; 0x68
 801a4d0:	681d      	ldr	r5, [r3, #0]
 801a4d2:	f7f8 fd61 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a4d6:	4603      	mov	r3, r0
 801a4d8:	9300      	str	r3, [sp, #0]
 801a4da:	f240 2319 	movw	r3, #537	; 0x219
 801a4de:	4a04      	ldr	r2, [pc, #16]	; (801a4f0 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 801a4e0:	4904      	ldr	r1, [pc, #16]	; (801a4f4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	47a8      	blx	r5
    return *this;
 801a4e6:	68fb      	ldr	r3, [r7, #12]
}
 801a4e8:	4618      	mov	r0, r3
 801a4ea:	3710      	adds	r7, #16
 801a4ec:	46bd      	mov	sp, r7
 801a4ee:	bdb0      	pop	{r4, r5, r7, pc}
 801a4f0:	080248e0 	.word	0x080248e0
 801a4f4:	080248fc 	.word	0x080248fc

0801a4f8 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 801a4f8:	b5b0      	push	{r4, r5, r7, lr}
 801a4fa:	b086      	sub	sp, #24
 801a4fc:	af02      	add	r7, sp, #8
 801a4fe:	60f8      	str	r0, [r7, #12]
 801a500:	1d3b      	adds	r3, r7, #4
 801a502:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801a506:	f7f8 fd37 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801a50a:	4604      	mov	r4, r0
 801a50c:	6823      	ldr	r3, [r4, #0]
 801a50e:	3368      	adds	r3, #104	; 0x68
 801a510:	681d      	ldr	r5, [r3, #0]
 801a512:	f7f8 fd41 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801a516:	4603      	mov	r3, r0
 801a518:	9300      	str	r3, [sp, #0]
 801a51a:	f240 231f 	movw	r3, #543	; 0x21f
 801a51e:	4a04      	ldr	r2, [pc, #16]	; (801a530 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 801a520:	4904      	ldr	r1, [pc, #16]	; (801a534 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 801a522:	4620      	mov	r0, r4
 801a524:	47a8      	blx	r5
    return *this;
 801a526:	68fb      	ldr	r3, [r7, #12]
}
 801a528:	4618      	mov	r0, r3
 801a52a:	3710      	adds	r7, #16
 801a52c:	46bd      	mov	sp, r7
 801a52e:	bdb0      	pop	{r4, r5, r7, pc}
 801a530:	080248e0 	.word	0x080248e0
 801a534:	0802491c 	.word	0x0802491c

0801a538 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 801a538:	b580      	push	{r7, lr}
 801a53a:	b082      	sub	sp, #8
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
 801a540:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	3328      	adds	r3, #40	; 0x28
 801a546:	4907      	ldr	r1, [pc, #28]	; (801a564 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 801a548:	4618      	mov	r0, r3
 801a54a:	f002 f8f9 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	3328      	adds	r3, #40	; 0x28
 801a552:	6839      	ldr	r1, [r7, #0]
 801a554:	4618      	mov	r0, r3
 801a556:	f002 f835 	bl	801c5c4 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 801a55a:	687b      	ldr	r3, [r7, #4]
}
 801a55c:	4618      	mov	r0, r3
 801a55e:	3708      	adds	r7, #8
 801a560:	46bd      	mov	sp, r7
 801a562:	bd80      	pop	{r7, pc}
 801a564:	08024a50 	.word	0x08024a50

0801a568 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 801a568:	b580      	push	{r7, lr}
 801a56a:	b084      	sub	sp, #16
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	60f8      	str	r0, [r7, #12]
 801a570:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	3328      	adds	r3, #40	; 0x28
 801a578:	4907      	ldr	r1, [pc, #28]	; (801a598 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 801a57a:	4618      	mov	r0, r3
 801a57c:	f002 f8e0 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	3328      	adds	r3, #40	; 0x28
 801a584:	ed97 0b00 	vldr	d0, [r7]
 801a588:	4618      	mov	r0, r3
 801a58a:	f001 ff71 	bl	801c470 <_ZN14MockNamedValue8setValueEd>
    return *this;
 801a58e:	68fb      	ldr	r3, [r7, #12]
}
 801a590:	4618      	mov	r0, r3
 801a592:	3710      	adds	r7, #16
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08024a50 	.word	0x08024a50

0801a59c <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b082      	sub	sp, #8
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
 801a5a4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	3328      	adds	r3, #40	; 0x28
 801a5aa:	4907      	ldr	r1, [pc, #28]	; (801a5c8 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f002 f8c7 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	3328      	adds	r3, #40	; 0x28
 801a5b6:	6839      	ldr	r1, [r7, #0]
 801a5b8:	4618      	mov	r0, r3
 801a5ba:	f001 ff9d 	bl	801c4f8 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 801a5be:	687b      	ldr	r3, [r7, #4]
}
 801a5c0:	4618      	mov	r0, r3
 801a5c2:	3708      	adds	r7, #8
 801a5c4:	46bd      	mov	sp, r7
 801a5c6:	bd80      	pop	{r7, pc}
 801a5c8:	08024a50 	.word	0x08024a50

0801a5cc <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 801a5cc:	b580      	push	{r7, lr}
 801a5ce:	b082      	sub	sp, #8
 801a5d0:	af00      	add	r7, sp, #0
 801a5d2:	6078      	str	r0, [r7, #4]
 801a5d4:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	3328      	adds	r3, #40	; 0x28
 801a5da:	4907      	ldr	r1, [pc, #28]	; (801a5f8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 801a5dc:	4618      	mov	r0, r3
 801a5de:	f002 f8af 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	3328      	adds	r3, #40	; 0x28
 801a5e6:	6839      	ldr	r1, [r7, #0]
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	f001 ffa7 	bl	801c53c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801a5ee:	687b      	ldr	r3, [r7, #4]
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3708      	adds	r7, #8
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	bd80      	pop	{r7, pc}
 801a5f8:	08024a50 	.word	0x08024a50

0801a5fc <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b082      	sub	sp, #8
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
 801a604:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	3328      	adds	r3, #40	; 0x28
 801a60a:	4907      	ldr	r1, [pc, #28]	; (801a628 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 801a60c:	4618      	mov	r0, r3
 801a60e:	f002 f897 	bl	801c740 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	3328      	adds	r3, #40	; 0x28
 801a616:	6839      	ldr	r1, [r7, #0]
 801a618:	4618      	mov	r0, r3
 801a61a:	f001 ffb1 	bl	801c580 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801a61e:	687b      	ldr	r3, [r7, #4]
}
 801a620:	4618      	mov	r0, r3
 801a622:	3708      	adds	r7, #8
 801a624:	46bd      	mov	sp, r7
 801a626:	bd80      	pop	{r7, pc}
 801a628:	08024a50 	.word	0x08024a50

0801a62c <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 801a62c:	b480      	push	{r7}
 801a62e:	b083      	sub	sp, #12
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
 801a634:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	2201      	movs	r2, #1
 801a63a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	2200      	movs	r2, #0
 801a642:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	683a      	ldr	r2, [r7, #0]
 801a64a:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 801a64c:	687b      	ldr	r3, [r7, #4]
}
 801a64e:	4618      	mov	r0, r3
 801a650:	370c      	adds	r7, #12
 801a652:	46bd      	mov	sp, r7
 801a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a658:	4770      	bx	lr

0801a65a <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 801a65a:	b580      	push	{r7, lr}
 801a65c:	b082      	sub	sp, #8
 801a65e:	af00      	add	r7, sp, #0
 801a660:	6078      	str	r0, [r7, #4]
 801a662:	6039      	str	r1, [r7, #0]
    return returnValue_;
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	3328      	adds	r3, #40	; 0x28
 801a668:	4619      	mov	r1, r3
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	f7ef f946 	bl	80098fc <_ZN14MockNamedValueC1ERKS_>
}
 801a670:	6878      	ldr	r0, [r7, #4]
 801a672:	3708      	adds	r7, #8
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}

0801a678 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 801a678:	b480      	push	{r7}
 801a67a:	b085      	sub	sp, #20
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	60f8      	str	r0, [r7, #12]
 801a680:	60b9      	str	r1, [r7, #8]
 801a682:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	68ba      	ldr	r2, [r7, #8]
 801a688:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	687a      	ldr	r2, [r7, #4]
 801a68e:	615a      	str	r2, [r3, #20]
    return *this;
 801a690:	68fb      	ldr	r3, [r7, #12]
}
 801a692:	4618      	mov	r0, r3
 801a694:	3714      	adds	r7, #20
 801a696:	46bd      	mov	sp, r7
 801a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69c:	4770      	bx	lr

0801a69e <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 801a69e:	b480      	push	{r7}
 801a6a0:	b083      	sub	sp, #12
 801a6a2:	af00      	add	r7, sp, #0
 801a6a4:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	7e1b      	ldrb	r3, [r3, #24]
}
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	370c      	adds	r7, #12
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6b4:	4770      	bx	lr

0801a6b6 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 801a6b6:	b480      	push	{r7}
 801a6b8:	b083      	sub	sp, #12
 801a6ba:	af00      	add	r7, sp, #0
 801a6bc:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 801a6c2:	4618      	mov	r0, r3
 801a6c4:	370c      	adds	r7, #12
 801a6c6:	46bd      	mov	sp, r7
 801a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6cc:	4770      	bx	lr
	...

0801a6d0 <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b082      	sub	sp, #8
 801a6d4:	af00      	add	r7, sp, #0
 801a6d6:	6078      	str	r0, [r7, #4]
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	4618      	mov	r0, r3
 801a6dc:	f7fe fcce 	bl	801907c <_ZN16MockExpectedCallC1Ev>
 801a6e0:	4a03      	ldr	r2, [pc, #12]	; (801a6f0 <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	601a      	str	r2, [r3, #0]
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	4618      	mov	r0, r3
 801a6ea:	3708      	adds	r7, #8
 801a6ec:	46bd      	mov	sp, r7
 801a6ee:	bd80      	pop	{r7, pc}
 801a6f0:	08027208 	.word	0x08027208

0801a6f4 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 801a6f4:	b580      	push	{r7, lr}
 801a6f6:	af00      	add	r7, sp, #0
 801a6f8:	4801      	ldr	r0, [pc, #4]	; (801a700 <__tcf_0+0xc>)
 801a6fa:	f000 f831 	bl	801a760 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	20000dc0 	.word	0x20000dc0

0801a704 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 801a704:	b580      	push	{r7, lr}
 801a706:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 801a708:	4b12      	ldr	r3, [pc, #72]	; (801a754 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a70a:	781b      	ldrb	r3, [r3, #0]
 801a70c:	f3bf 8f5b 	dmb	ish
 801a710:	b2db      	uxtb	r3, r3
 801a712:	f003 0301 	and.w	r3, r3, #1
 801a716:	2b00      	cmp	r3, #0
 801a718:	bf0c      	ite	eq
 801a71a:	2301      	moveq	r3, #1
 801a71c:	2300      	movne	r3, #0
 801a71e:	b2db      	uxtb	r3, r3
 801a720:	2b00      	cmp	r3, #0
 801a722:	d013      	beq.n	801a74c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a724:	480b      	ldr	r0, [pc, #44]	; (801a754 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a726:	f003 ff03 	bl	801e530 <__cxa_guard_acquire>
 801a72a:	4603      	mov	r3, r0
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	bf14      	ite	ne
 801a730:	2301      	movne	r3, #1
 801a732:	2300      	moveq	r3, #0
 801a734:	b2db      	uxtb	r3, r3
 801a736:	2b00      	cmp	r3, #0
 801a738:	d008      	beq.n	801a74c <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 801a73a:	4807      	ldr	r0, [pc, #28]	; (801a758 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 801a73c:	f7ff ffc8 	bl	801a6d0 <_ZN23MockIgnoredExpectedCallC1Ev>
 801a740:	4804      	ldr	r0, [pc, #16]	; (801a754 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801a742:	f003 ff01 	bl	801e548 <__cxa_guard_release>
 801a746:	4805      	ldr	r0, [pc, #20]	; (801a75c <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 801a748:	f003 ff25 	bl	801e596 <atexit>
    return call;
 801a74c:	4b02      	ldr	r3, [pc, #8]	; (801a758 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801a74e:	4618      	mov	r0, r3
 801a750:	bd80      	pop	{r7, pc}
 801a752:	bf00      	nop
 801a754:	20000dc4 	.word	0x20000dc4
 801a758:	20000dc0 	.word	0x20000dc0
 801a75c:	0801a6f5 	.word	0x0801a6f5

0801a760 <_ZN23MockIgnoredExpectedCallD1Ev>:
 801a760:	b580      	push	{r7, lr}
 801a762:	b082      	sub	sp, #8
 801a764:	af00      	add	r7, sp, #0
 801a766:	6078      	str	r0, [r7, #4]
 801a768:	4a05      	ldr	r2, [pc, #20]	; (801a780 <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	601a      	str	r2, [r3, #0]
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	4618      	mov	r0, r3
 801a772:	f7fe fc93 	bl	801909c <_ZN16MockExpectedCallD1Ev>
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	4618      	mov	r0, r3
 801a77a:	3708      	adds	r7, #8
 801a77c:	46bd      	mov	sp, r7
 801a77e:	bd80      	pop	{r7, pc}
 801a780:	08027208 	.word	0x08027208

0801a784 <_ZN23MockIgnoredExpectedCallD0Ev>:
 801a784:	b580      	push	{r7, lr}
 801a786:	b082      	sub	sp, #8
 801a788:	af00      	add	r7, sp, #0
 801a78a:	6078      	str	r0, [r7, #4]
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f7ff ffe7 	bl	801a760 <_ZN23MockIgnoredExpectedCallD1Ev>
 801a792:	2104      	movs	r1, #4
 801a794:	6878      	ldr	r0, [r7, #4]
 801a796:	f7ee fc5d 	bl	8009054 <_ZdlPvj>
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	4618      	mov	r0, r3
 801a79e:	3708      	adds	r7, #8
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	bd80      	pop	{r7, pc}

0801a7a4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 801a7a4:	b580      	push	{r7, lr}
 801a7a6:	b082      	sub	sp, #8
 801a7a8:	af00      	add	r7, sp, #0
 801a7aa:	6078      	str	r0, [r7, #4]
 801a7ac:	4a05      	ldr	r2, [pc, #20]	; (801a7c4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	601a      	str	r2, [r3, #0]
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	4618      	mov	r0, r3
 801a7b6:	f001 fd4b 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	4618      	mov	r0, r3
 801a7be:	3708      	adds	r7, #8
 801a7c0:	46bd      	mov	sp, r7
 801a7c2:	bd80      	pop	{r7, pc}
 801a7c4:	080273a8 	.word	0x080273a8

0801a7c8 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 801a7c8:	b580      	push	{r7, lr}
 801a7ca:	b082      	sub	sp, #8
 801a7cc:	af00      	add	r7, sp, #0
 801a7ce:	6078      	str	r0, [r7, #4]
 801a7d0:	6878      	ldr	r0, [r7, #4]
 801a7d2:	f7ff ffe7 	bl	801a7a4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 801a7d6:	2138      	movs	r1, #56	; 0x38
 801a7d8:	6878      	ldr	r0, [r7, #4]
 801a7da:	f7ee fc3b 	bl	8009054 <_ZdlPvj>
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	3708      	adds	r7, #8
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	bd80      	pop	{r7, pc}

0801a7e8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 801a7e8:	b480      	push	{r7}
 801a7ea:	b083      	sub	sp, #12
 801a7ec:	af00      	add	r7, sp, #0
 801a7ee:	6078      	str	r0, [r7, #4]
 801a7f0:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	683a      	ldr	r2, [r7, #0]
 801a7f6:	601a      	str	r2, [r3, #0]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	2200      	movs	r2, #0
 801a7fc:	605a      	str	r2, [r3, #4]
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	4618      	mov	r0, r3
 801a802:	370c      	adds	r7, #12
 801a804:	46bd      	mov	sp, r7
 801a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a80a:	4770      	bx	lr

0801a80c <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 801a80c:	b480      	push	{r7}
 801a80e:	b083      	sub	sp, #12
 801a810:	af00      	add	r7, sp, #0
 801a812:	6078      	str	r0, [r7, #4]
 801a814:	4a06      	ldr	r2, [pc, #24]	; (801a830 <_ZN21MockExpectedCallsListC1Ev+0x24>)
 801a816:	687b      	ldr	r3, [r7, #4]
 801a818:	601a      	str	r2, [r3, #0]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	2200      	movs	r2, #0
 801a81e:	605a      	str	r2, [r3, #4]
{
}
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	4618      	mov	r0, r3
 801a824:	370c      	adds	r7, #12
 801a826:	46bd      	mov	sp, r7
 801a828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a82c:	4770      	bx	lr
 801a82e:	bf00      	nop
 801a830:	080274fc 	.word	0x080274fc

0801a834 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 801a834:	b580      	push	{r7, lr}
 801a836:	b084      	sub	sp, #16
 801a838:	af00      	add	r7, sp, #0
 801a83a:	6078      	str	r0, [r7, #4]
 801a83c:	4a0d      	ldr	r2, [pc, #52]	; (801a874 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	685b      	ldr	r3, [r3, #4]
 801a846:	2b00      	cmp	r3, #0
 801a848:	d00f      	beq.n	801a86a <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	685b      	ldr	r3, [r3, #4]
 801a84e:	685b      	ldr	r3, [r3, #4]
 801a850:	60fb      	str	r3, [r7, #12]
        delete head_;
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	685b      	ldr	r3, [r3, #4]
 801a856:	2b00      	cmp	r3, #0
 801a858:	d003      	beq.n	801a862 <_ZN21MockExpectedCallsListD1Ev+0x2e>
 801a85a:	2108      	movs	r1, #8
 801a85c:	4618      	mov	r0, r3
 801a85e:	f7ee fbf9 	bl	8009054 <_ZdlPvj>
        head_ = next;
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	68fa      	ldr	r2, [r7, #12]
 801a866:	605a      	str	r2, [r3, #4]
    while (head_) {
 801a868:	e7eb      	b.n	801a842 <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	4618      	mov	r0, r3
 801a86e:	3710      	adds	r7, #16
 801a870:	46bd      	mov	sp, r7
 801a872:	bd80      	pop	{r7, pc}
 801a874:	080274fc 	.word	0x080274fc

0801a878 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 801a878:	b580      	push	{r7, lr}
 801a87a:	b082      	sub	sp, #8
 801a87c:	af00      	add	r7, sp, #0
 801a87e:	6078      	str	r0, [r7, #4]
}
 801a880:	6878      	ldr	r0, [r7, #4]
 801a882:	f7ff ffd7 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
 801a886:	2108      	movs	r1, #8
 801a888:	6878      	ldr	r0, [r7, #4]
 801a88a:	f7ee fbe3 	bl	8009054 <_ZdlPvj>
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	4618      	mov	r0, r3
 801a892:	3708      	adds	r7, #8
 801a894:	46bd      	mov	sp, r7
 801a896:	bd80      	pop	{r7, pc}

0801a898 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b084      	sub	sp, #16
 801a89c:	af00      	add	r7, sp, #0
 801a89e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	685b      	ldr	r3, [r3, #4]
 801a8a4:	60fb      	str	r3, [r7, #12]
 801a8a6:	68fb      	ldr	r3, [r7, #12]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d011      	beq.n	801a8d0 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	681a      	ldr	r2, [r3, #0]
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	33d4      	adds	r3, #212	; 0xd4
 801a8b8:	681b      	ldr	r3, [r3, #0]
 801a8ba:	4610      	mov	r0, r2
 801a8bc:	4798      	blx	r3
 801a8be:	4603      	mov	r3, r0
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d001      	beq.n	801a8c8 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	e004      	b.n	801a8d2 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	60fb      	str	r3, [r7, #12]
 801a8ce:	e7ea      	b.n	801a8a6 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 801a8d0:	2300      	movs	r3, #0
}
 801a8d2:	4618      	mov	r0, r3
 801a8d4:	3710      	adds	r7, #16
 801a8d6:	46bd      	mov	sp, r7
 801a8d8:	bd80      	pop	{r7, pc}

0801a8da <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 801a8da:	b480      	push	{r7}
 801a8dc:	b085      	sub	sp, #20
 801a8de:	af00      	add	r7, sp, #0
 801a8e0:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	685b      	ldr	r3, [r3, #4]
 801a8ea:	60bb      	str	r3, [r7, #8]
 801a8ec:	68bb      	ldr	r3, [r7, #8]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d006      	beq.n	801a900 <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801a8f2:	68fb      	ldr	r3, [r7, #12]
 801a8f4:	3301      	adds	r3, #1
 801a8f6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a8f8:	68bb      	ldr	r3, [r7, #8]
 801a8fa:	685b      	ldr	r3, [r3, #4]
 801a8fc:	60bb      	str	r3, [r7, #8]
 801a8fe:	e7f5      	b.n	801a8ec <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801a900:	68fb      	ldr	r3, [r7, #12]
}
 801a902:	4618      	mov	r0, r3
 801a904:	3714      	adds	r7, #20
 801a906:	46bd      	mov	sp, r7
 801a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a90c:	4770      	bx	lr

0801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801a90e:	b480      	push	{r7}
 801a910:	b083      	sub	sp, #12
 801a912:	af00      	add	r7, sp, #0
 801a914:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	685b      	ldr	r3, [r3, #4]
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	bf0c      	ite	eq
 801a91e:	2301      	moveq	r3, #1
 801a920:	2300      	movne	r3, #0
 801a922:	b2db      	uxtb	r3, r3
}
 801a924:	4618      	mov	r0, r3
 801a926:	370c      	adds	r7, #12
 801a928:	46bd      	mov	sp, r7
 801a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92e:	4770      	bx	lr

0801a930 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b084      	sub	sp, #16
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
 801a938:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 801a93a:	2300      	movs	r3, #0
 801a93c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a93e:	687b      	ldr	r3, [r7, #4]
 801a940:	685b      	ldr	r3, [r3, #4]
 801a942:	60bb      	str	r3, [r7, #8]
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	2b00      	cmp	r3, #0
 801a948:	d01d      	beq.n	801a986 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 801a94a:	68bb      	ldr	r3, [r7, #8]
 801a94c:	681a      	ldr	r2, [r3, #0]
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	33b8      	adds	r3, #184	; 0xb8
 801a956:	681b      	ldr	r3, [r3, #0]
 801a958:	6839      	ldr	r1, [r7, #0]
 801a95a:	4610      	mov	r0, r2
 801a95c:	4798      	blx	r3
 801a95e:	4603      	mov	r3, r0
 801a960:	2b00      	cmp	r3, #0
 801a962:	d00c      	beq.n	801a97e <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	681a      	ldr	r2, [r3, #0]
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	33f8      	adds	r3, #248	; 0xf8
 801a970:	681b      	ldr	r3, [r3, #0]
 801a972:	4610      	mov	r0, r2
 801a974:	4798      	blx	r3
 801a976:	4602      	mov	r2, r0
 801a978:	68fb      	ldr	r3, [r7, #12]
 801a97a:	4413      	add	r3, r2
 801a97c:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	60bb      	str	r3, [r7, #8]
 801a984:	e7de      	b.n	801a944 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 801a986:	68fb      	ldr	r3, [r7, #12]
}
 801a988:	4618      	mov	r0, r3
 801a98a:	3710      	adds	r7, #16
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd80      	pop	{r7, pc}

0801a990 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b084      	sub	sp, #16
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 801a998:	2300      	movs	r3, #0
 801a99a:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a99c:	687b      	ldr	r3, [r7, #4]
 801a99e:	685b      	ldr	r3, [r3, #4]
 801a9a0:	60bb      	str	r3, [r7, #8]
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d015      	beq.n	801a9d4 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	681a      	ldr	r2, [r3, #0]
 801a9ac:	68bb      	ldr	r3, [r7, #8]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	33c0      	adds	r3, #192	; 0xc0
 801a9b4:	681b      	ldr	r3, [r3, #0]
 801a9b6:	4610      	mov	r0, r2
 801a9b8:	4798      	blx	r3
 801a9ba:	4603      	mov	r3, r0
 801a9bc:	f083 0301 	eor.w	r3, r3, #1
 801a9c0:	b2db      	uxtb	r3, r3
 801a9c2:	2b00      	cmp	r3, #0
 801a9c4:	d002      	beq.n	801a9cc <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	3301      	adds	r3, #1
 801a9ca:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	685b      	ldr	r3, [r3, #4]
 801a9d0:	60bb      	str	r3, [r7, #8]
 801a9d2:	e7e6      	b.n	801a9a2 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
}
 801a9d6:	4618      	mov	r0, r3
 801a9d8:	3710      	adds	r7, #16
 801a9da:	46bd      	mov	sp, r7
 801a9dc:	bd80      	pop	{r7, pc}

0801a9de <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 801a9de:	b580      	push	{r7, lr}
 801a9e0:	b084      	sub	sp, #16
 801a9e2:	af00      	add	r7, sp, #0
 801a9e4:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	685b      	ldr	r3, [r3, #4]
 801a9ea:	60fb      	str	r3, [r7, #12]
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d011      	beq.n	801aa16 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	681a      	ldr	r2, [r3, #0]
 801a9f6:	68fb      	ldr	r3, [r7, #12]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	681b      	ldr	r3, [r3, #0]
 801a9fc:	33c8      	adds	r3, #200	; 0xc8
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	4610      	mov	r0, r2
 801aa02:	4798      	blx	r3
 801aa04:	4603      	mov	r3, r0
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d001      	beq.n	801aa0e <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 801aa0a:	2301      	movs	r3, #1
 801aa0c:	e004      	b.n	801aa18 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	685b      	ldr	r3, [r3, #4]
 801aa12:	60fb      	str	r3, [r7, #12]
 801aa14:	e7ea      	b.n	801a9ec <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 801aa16:	2300      	movs	r3, #0
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	3710      	adds	r7, #16
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	bd80      	pop	{r7, pc}

0801aa20 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801aa20:	b580      	push	{r7, lr}
 801aa22:	b084      	sub	sp, #16
 801aa24:	af00      	add	r7, sp, #0
 801aa26:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	685b      	ldr	r3, [r3, #4]
 801aa2c:	60fb      	str	r3, [r7, #12]
 801aa2e:	68fb      	ldr	r3, [r7, #12]
 801aa30:	2b00      	cmp	r3, #0
 801aa32:	d014      	beq.n	801aa5e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	681a      	ldr	r2, [r3, #0]
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	33c0      	adds	r3, #192	; 0xc0
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	4610      	mov	r0, r2
 801aa44:	4798      	blx	r3
 801aa46:	4603      	mov	r3, r0
 801aa48:	f083 0301 	eor.w	r3, r3, #1
 801aa4c:	b2db      	uxtb	r3, r3
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d001      	beq.n	801aa56 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801aa52:	2301      	movs	r3, #1
 801aa54:	e004      	b.n	801aa60 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	685b      	ldr	r3, [r3, #4]
 801aa5a:	60fb      	str	r3, [r7, #12]
 801aa5c:	e7e7      	b.n	801aa2e <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801aa5e:	2300      	movs	r3, #0
}
 801aa60:	4618      	mov	r0, r3
 801aa62:	3710      	adds	r7, #16
 801aa64:	46bd      	mov	sp, r7
 801aa66:	bd80      	pop	{r7, pc}

0801aa68 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b084      	sub	sp, #16
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
 801aa70:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa72:	687b      	ldr	r3, [r7, #4]
 801aa74:	685b      	ldr	r3, [r3, #4]
 801aa76:	60fb      	str	r3, [r7, #12]
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d012      	beq.n	801aaa4 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	681a      	ldr	r2, [r3, #0]
 801aa82:	68fb      	ldr	r3, [r7, #12]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	33b8      	adds	r3, #184	; 0xb8
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	6839      	ldr	r1, [r7, #0]
 801aa8e:	4610      	mov	r0, r2
 801aa90:	4798      	blx	r3
 801aa92:	4603      	mov	r3, r0
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d001      	beq.n	801aa9c <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 801aa98:	2301      	movs	r3, #1
 801aa9a:	e004      	b.n	801aaa6 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801aa9c:	68fb      	ldr	r3, [r7, #12]
 801aa9e:	685b      	ldr	r3, [r3, #4]
 801aaa0:	60fb      	str	r3, [r7, #12]
 801aaa2:	e7e9      	b.n	801aa78 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 801aaa4:	2300      	movs	r3, #0
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}
	...

0801aab0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 801aab0:	b590      	push	{r4, r7, lr}
 801aab2:	b085      	sub	sp, #20
 801aab4:	af00      	add	r7, sp, #0
 801aab6:	6078      	str	r0, [r7, #4]
 801aab8:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 801aaba:	2273      	movs	r2, #115	; 0x73
 801aabc:	4911      	ldr	r1, [pc, #68]	; (801ab04 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 801aabe:	2008      	movs	r0, #8
 801aac0:	f7ee fab4 	bl	800902c <_ZnwjPKci>
 801aac4:	4604      	mov	r4, r0
 801aac6:	6839      	ldr	r1, [r7, #0]
 801aac8:	4620      	mov	r0, r4
 801aaca:	f7ff fe8d 	bl	801a7e8 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 801aace:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	685b      	ldr	r3, [r3, #4]
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d103      	bne.n	801aae0 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	68ba      	ldr	r2, [r7, #8]
 801aadc:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 801aade:	e00d      	b.n	801aafc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	685b      	ldr	r3, [r3, #4]
 801aae4:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 801aae6:	68fb      	ldr	r3, [r7, #12]
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d003      	beq.n	801aaf6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801aaee:	68fb      	ldr	r3, [r7, #12]
 801aaf0:	685b      	ldr	r3, [r3, #4]
 801aaf2:	60fb      	str	r3, [r7, #12]
 801aaf4:	e7f7      	b.n	801aae6 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	68ba      	ldr	r2, [r7, #8]
 801aafa:	605a      	str	r2, [r3, #4]
}
 801aafc:	bf00      	nop
 801aafe:	3714      	adds	r7, #20
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd90      	pop	{r4, r7, pc}
 801ab04:	08024a5c 	.word	0x08024a5c

0801ab08 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b084      	sub	sp, #16
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	685b      	ldr	r3, [r3, #4]
 801ab16:	60fb      	str	r3, [r7, #12]
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d018      	beq.n	801ab50 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	681a      	ldr	r2, [r3, #0]
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	33c4      	adds	r3, #196	; 0xc4
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	4610      	mov	r0, r2
 801ab2e:	4798      	blx	r3
 801ab30:	4603      	mov	r3, r0
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d008      	beq.n	801ab48 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681b      	ldr	r3, [r3, #0]
 801ab3a:	3330      	adds	r3, #48	; 0x30
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	68fa      	ldr	r2, [r7, #12]
 801ab40:	6812      	ldr	r2, [r2, #0]
 801ab42:	4611      	mov	r1, r2
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	685b      	ldr	r3, [r3, #4]
 801ab4c:	60fb      	str	r3, [r7, #12]
 801ab4e:	e7e3      	b.n	801ab18 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801ab50:	bf00      	nop
 801ab52:	3710      	adds	r7, #16
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd80      	pop	{r7, pc}

0801ab58 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b086      	sub	sp, #24
 801ab5c:	af00      	add	r7, sp, #0
 801ab5e:	60f8      	str	r0, [r7, #12]
 801ab60:	60b9      	str	r1, [r7, #8]
 801ab62:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	685b      	ldr	r3, [r3, #4]
 801ab68:	617b      	str	r3, [r7, #20]
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	d019      	beq.n	801aba4 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801ab70:	697b      	ldr	r3, [r7, #20]
 801ab72:	681a      	ldr	r2, [r3, #0]
 801ab74:	697b      	ldr	r3, [r7, #20]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	33b8      	adds	r3, #184	; 0xb8
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	68b9      	ldr	r1, [r7, #8]
 801ab80:	4610      	mov	r0, r2
 801ab82:	4798      	blx	r3
 801ab84:	4603      	mov	r3, r0
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d008      	beq.n	801ab9c <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 801ab8a:	68fb      	ldr	r3, [r7, #12]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	3330      	adds	r3, #48	; 0x30
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	697a      	ldr	r2, [r7, #20]
 801ab94:	6812      	ldr	r2, [r2, #0]
 801ab96:	4611      	mov	r1, r2
 801ab98:	68f8      	ldr	r0, [r7, #12]
 801ab9a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801ab9c:	697b      	ldr	r3, [r7, #20]
 801ab9e:	685b      	ldr	r3, [r3, #4]
 801aba0:	617b      	str	r3, [r7, #20]
 801aba2:	e7e2      	b.n	801ab6a <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 801aba4:	bf00      	nop
 801aba6:	3718      	adds	r7, #24
 801aba8:	46bd      	mov	sp, r7
 801abaa:	bd80      	pop	{r7, pc}

0801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 801abac:	b580      	push	{r7, lr}
 801abae:	b084      	sub	sp, #16
 801abb0:	af00      	add	r7, sp, #0
 801abb2:	6078      	str	r0, [r7, #4]
 801abb4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	685b      	ldr	r3, [r3, #4]
 801abba:	60fb      	str	r3, [r7, #12]
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	d00c      	beq.n	801abdc <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	3330      	adds	r3, #48	; 0x30
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	68fa      	ldr	r2, [r7, #12]
 801abcc:	6812      	ldr	r2, [r2, #0]
 801abce:	4611      	mov	r1, r2
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	685b      	ldr	r3, [r3, #4]
 801abd8:	60fb      	str	r3, [r7, #12]
 801abda:	e7ef      	b.n	801abbc <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 801abdc:	bf00      	nop
 801abde:	3710      	adds	r7, #16
 801abe0:	46bd      	mov	sp, r7
 801abe2:	bd80      	pop	{r7, pc}

0801abe4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 801abe4:	b580      	push	{r7, lr}
 801abe6:	b084      	sub	sp, #16
 801abe8:	af00      	add	r7, sp, #0
 801abea:	6078      	str	r0, [r7, #4]
 801abec:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	685b      	ldr	r3, [r3, #4]
 801abf2:	60fb      	str	r3, [r7, #12]
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d016      	beq.n	801ac28 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 801abfa:	68fb      	ldr	r3, [r7, #12]
 801abfc:	681a      	ldr	r2, [r3, #0]
 801abfe:	68fb      	ldr	r3, [r7, #12]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	33b8      	adds	r3, #184	; 0xb8
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	6839      	ldr	r1, [r7, #0]
 801ac0a:	4610      	mov	r0, r2
 801ac0c:	4798      	blx	r3
 801ac0e:	4603      	mov	r3, r0
 801ac10:	f083 0301 	eor.w	r3, r3, #1
 801ac14:	b2db      	uxtb	r3, r3
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d002      	beq.n	801ac20 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ac1a:	68fb      	ldr	r3, [r7, #12]
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	685b      	ldr	r3, [r3, #4]
 801ac24:	60fb      	str	r3, [r7, #12]
 801ac26:	e7e5      	b.n	801abf4 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	3388      	adds	r3, #136	; 0x88
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	6878      	ldr	r0, [r7, #4]
 801ac32:	4798      	blx	r3
}
 801ac34:	bf00      	nop
 801ac36:	3710      	adds	r7, #16
 801ac38:	46bd      	mov	sp, r7
 801ac3a:	bd80      	pop	{r7, pc}

0801ac3c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 801ac3c:	b580      	push	{r7, lr}
 801ac3e:	b084      	sub	sp, #16
 801ac40:	af00      	add	r7, sp, #0
 801ac42:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	685b      	ldr	r3, [r3, #4]
 801ac48:	60fb      	str	r3, [r7, #12]
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d015      	beq.n	801ac7c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801ac50:	68fb      	ldr	r3, [r7, #12]
 801ac52:	681a      	ldr	r2, [r3, #0]
 801ac54:	68fb      	ldr	r3, [r7, #12]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	33d4      	adds	r3, #212	; 0xd4
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	4610      	mov	r0, r2
 801ac60:	4798      	blx	r3
 801ac62:	4603      	mov	r3, r0
 801ac64:	f083 0301 	eor.w	r3, r3, #1
 801ac68:	b2db      	uxtb	r3, r3
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d002      	beq.n	801ac74 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801ac6e:	68fb      	ldr	r3, [r7, #12]
 801ac70:	2200      	movs	r2, #0
 801ac72:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	685b      	ldr	r3, [r3, #4]
 801ac78:	60fb      	str	r3, [r7, #12]
 801ac7a:	e7e6      	b.n	801ac4a <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	3388      	adds	r3, #136	; 0x88
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	6878      	ldr	r0, [r7, #4]
 801ac86:	4798      	blx	r3
}
 801ac88:	bf00      	nop
 801ac8a:	3710      	adds	r7, #16
 801ac8c:	46bd      	mov	sp, r7
 801ac8e:	bd80      	pop	{r7, pc}

0801ac90 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 801ac90:	b580      	push	{r7, lr}
 801ac92:	b084      	sub	sp, #16
 801ac94:	af00      	add	r7, sp, #0
 801ac96:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	685b      	ldr	r3, [r3, #4]
 801ac9c:	60fb      	str	r3, [r7, #12]
 801ac9e:	68fb      	ldr	r3, [r7, #12]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d01b      	beq.n	801acdc <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	681a      	ldr	r2, [r3, #0]
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	33c8      	adds	r3, #200	; 0xc8
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	4610      	mov	r0, r2
 801acb4:	4798      	blx	r3
 801acb6:	4603      	mov	r3, r0
 801acb8:	2b00      	cmp	r3, #0
 801acba:	d00b      	beq.n	801acd4 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	681a      	ldr	r2, [r3, #0]
 801acc0:	68fb      	ldr	r3, [r7, #12]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	33ec      	adds	r3, #236	; 0xec
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	4610      	mov	r0, r2
 801accc:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	2200      	movs	r2, #0
 801acd2:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	685b      	ldr	r3, [r3, #4]
 801acd8:	60fb      	str	r3, [r7, #12]
 801acda:	e7e0      	b.n	801ac9e <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	3388      	adds	r3, #136	; 0x88
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	6878      	ldr	r0, [r7, #4]
 801ace6:	4798      	blx	r3
}
 801ace8:	bf00      	nop
 801acea:	3710      	adds	r7, #16
 801acec:	46bd      	mov	sp, r7
 801acee:	bd80      	pop	{r7, pc}

0801acf0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801acf0:	b580      	push	{r7, lr}
 801acf2:	b084      	sub	sp, #16
 801acf4:	af00      	add	r7, sp, #0
 801acf6:	6078      	str	r0, [r7, #4]
 801acf8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	685b      	ldr	r3, [r3, #4]
 801acfe:	60fb      	str	r3, [r7, #12]
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d016      	beq.n	801ad34 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	681a      	ldr	r2, [r3, #0]
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	33a8      	adds	r3, #168	; 0xa8
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	6839      	ldr	r1, [r7, #0]
 801ad16:	4610      	mov	r0, r2
 801ad18:	4798      	blx	r3
 801ad1a:	4603      	mov	r3, r0
 801ad1c:	f083 0301 	eor.w	r3, r3, #1
 801ad20:	b2db      	uxtb	r3, r3
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d002      	beq.n	801ad2c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	2200      	movs	r2, #0
 801ad2a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	685b      	ldr	r3, [r3, #4]
 801ad30:	60fb      	str	r3, [r7, #12]
 801ad32:	e7e5      	b.n	801ad00 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	3388      	adds	r3, #136	; 0x88
 801ad3a:	681b      	ldr	r3, [r3, #0]
 801ad3c:	6878      	ldr	r0, [r7, #4]
 801ad3e:	4798      	blx	r3
}
 801ad40:	bf00      	nop
 801ad42:	3710      	adds	r7, #16
 801ad44:	46bd      	mov	sp, r7
 801ad46:	bd80      	pop	{r7, pc}

0801ad48 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b084      	sub	sp, #16
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	685b      	ldr	r3, [r3, #4]
 801ad56:	60fb      	str	r3, [r7, #12]
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d016      	beq.n	801ad8c <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	68fb      	ldr	r3, [r7, #12]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	33b0      	adds	r3, #176	; 0xb0
 801ad6a:	681b      	ldr	r3, [r3, #0]
 801ad6c:	6839      	ldr	r1, [r7, #0]
 801ad6e:	4610      	mov	r0, r2
 801ad70:	4798      	blx	r3
 801ad72:	4603      	mov	r3, r0
 801ad74:	f083 0301 	eor.w	r3, r3, #1
 801ad78:	b2db      	uxtb	r3, r3
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d002      	beq.n	801ad84 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	2200      	movs	r2, #0
 801ad82:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	685b      	ldr	r3, [r3, #4]
 801ad88:	60fb      	str	r3, [r7, #12]
 801ad8a:	e7e5      	b.n	801ad58 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	3388      	adds	r3, #136	; 0x88
 801ad92:	681b      	ldr	r3, [r3, #0]
 801ad94:	6878      	ldr	r0, [r7, #4]
 801ad96:	4798      	blx	r3
}
 801ad98:	bf00      	nop
 801ad9a:	3710      	adds	r7, #16
 801ad9c:	46bd      	mov	sp, r7
 801ad9e:	bd80      	pop	{r7, pc}

0801ada0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 801ada0:	b580      	push	{r7, lr}
 801ada2:	b084      	sub	sp, #16
 801ada4:	af00      	add	r7, sp, #0
 801ada6:	6078      	str	r0, [r7, #4]
 801ada8:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	685b      	ldr	r3, [r3, #4]
 801adae:	60fb      	str	r3, [r7, #12]
 801adb0:	68fb      	ldr	r3, [r7, #12]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d016      	beq.n	801ade4 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 801adb6:	68fb      	ldr	r3, [r7, #12]
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	33ac      	adds	r3, #172	; 0xac
 801adc2:	681b      	ldr	r3, [r3, #0]
 801adc4:	6839      	ldr	r1, [r7, #0]
 801adc6:	4610      	mov	r0, r2
 801adc8:	4798      	blx	r3
 801adca:	4603      	mov	r3, r0
 801adcc:	f083 0301 	eor.w	r3, r3, #1
 801add0:	b2db      	uxtb	r3, r3
 801add2:	2b00      	cmp	r3, #0
 801add4:	d002      	beq.n	801addc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801add6:	68fb      	ldr	r3, [r7, #12]
 801add8:	2200      	movs	r2, #0
 801adda:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	60fb      	str	r3, [r7, #12]
 801ade2:	e7e5      	b.n	801adb0 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	3388      	adds	r3, #136	; 0x88
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	4798      	blx	r3
}
 801adf0:	bf00      	nop
 801adf2:	3710      	adds	r7, #16
 801adf4:	46bd      	mov	sp, r7
 801adf6:	bd80      	pop	{r7, pc}

0801adf8 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 801adf8:	b580      	push	{r7, lr}
 801adfa:	b084      	sub	sp, #16
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	6078      	str	r0, [r7, #4]
 801ae00:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	685b      	ldr	r3, [r3, #4]
 801ae06:	60fb      	str	r3, [r7, #12]
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d016      	beq.n	801ae3c <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	681a      	ldr	r2, [r3, #0]
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	33b4      	adds	r3, #180	; 0xb4
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	6839      	ldr	r1, [r7, #0]
 801ae1e:	4610      	mov	r0, r2
 801ae20:	4798      	blx	r3
 801ae22:	4603      	mov	r3, r0
 801ae24:	f083 0301 	eor.w	r3, r3, #1
 801ae28:	b2db      	uxtb	r3, r3
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	d002      	beq.n	801ae34 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	2200      	movs	r2, #0
 801ae32:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae34:	68fb      	ldr	r3, [r7, #12]
 801ae36:	685b      	ldr	r3, [r3, #4]
 801ae38:	60fb      	str	r3, [r7, #12]
 801ae3a:	e7e5      	b.n	801ae08 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	3388      	adds	r3, #136	; 0x88
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	6878      	ldr	r0, [r7, #4]
 801ae46:	4798      	blx	r3
}
 801ae48:	bf00      	nop
 801ae4a:	3710      	adds	r7, #16
 801ae4c:	46bd      	mov	sp, r7
 801ae4e:	bd80      	pop	{r7, pc}

0801ae50 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801ae50:	b580      	push	{r7, lr}
 801ae52:	b084      	sub	sp, #16
 801ae54:	af00      	add	r7, sp, #0
 801ae56:	6078      	str	r0, [r7, #4]
 801ae58:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	685b      	ldr	r3, [r3, #4]
 801ae5e:	60fb      	str	r3, [r7, #12]
 801ae60:	68fb      	ldr	r3, [r7, #12]
 801ae62:	2b00      	cmp	r3, #0
 801ae64:	d016      	beq.n	801ae94 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 801ae66:	68fb      	ldr	r3, [r7, #12]
 801ae68:	681a      	ldr	r2, [r3, #0]
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	33bc      	adds	r3, #188	; 0xbc
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	6839      	ldr	r1, [r7, #0]
 801ae76:	4610      	mov	r0, r2
 801ae78:	4798      	blx	r3
 801ae7a:	4603      	mov	r3, r0
 801ae7c:	f083 0301 	eor.w	r3, r3, #1
 801ae80:	b2db      	uxtb	r3, r3
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d002      	beq.n	801ae8c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 801ae86:	68fb      	ldr	r3, [r7, #12]
 801ae88:	2200      	movs	r2, #0
 801ae8a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801ae8c:	68fb      	ldr	r3, [r7, #12]
 801ae8e:	685b      	ldr	r3, [r3, #4]
 801ae90:	60fb      	str	r3, [r7, #12]
 801ae92:	e7e5      	b.n	801ae60 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	3388      	adds	r3, #136	; 0x88
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	6878      	ldr	r0, [r7, #4]
 801ae9e:	4798      	blx	r3
}
 801aea0:	bf00      	nop
 801aea2:	3710      	adds	r7, #16
 801aea4:	46bd      	mov	sp, r7
 801aea6:	bd80      	pop	{r7, pc}

0801aea8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b084      	sub	sp, #16
 801aeac:	af00      	add	r7, sp, #0
 801aeae:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	685b      	ldr	r3, [r3, #4]
 801aeb4:	60fb      	str	r3, [r7, #12]
 801aeb6:	68fb      	ldr	r3, [r7, #12]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d01d      	beq.n	801aef8 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	681a      	ldr	r2, [r3, #0]
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	33c8      	adds	r3, #200	; 0xc8
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	4610      	mov	r0, r2
 801aecc:	4798      	blx	r3
 801aece:	4603      	mov	r3, r0
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d00d      	beq.n	801aef0 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	2200      	movs	r2, #0
 801aede:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	3388      	adds	r3, #136	; 0x88
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	6878      	ldr	r0, [r7, #4]
 801aeea:	4798      	blx	r3
            return matchingCall;
 801aeec:	68bb      	ldr	r3, [r7, #8]
 801aeee:	e004      	b.n	801aefa <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	685b      	ldr	r3, [r3, #4]
 801aef4:	60fb      	str	r3, [r7, #12]
 801aef6:	e7de      	b.n	801aeb6 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801aef8:	2300      	movs	r3, #0
}
 801aefa:	4618      	mov	r0, r3
 801aefc:	3710      	adds	r7, #16
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}

0801af02 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801af02:	b580      	push	{r7, lr}
 801af04:	b084      	sub	sp, #16
 801af06:	af00      	add	r7, sp, #0
 801af08:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	685b      	ldr	r3, [r3, #4]
 801af0e:	60fb      	str	r3, [r7, #12]
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	2b00      	cmp	r3, #0
 801af14:	d012      	beq.n	801af3c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 801af16:	68fb      	ldr	r3, [r7, #12]
 801af18:	681a      	ldr	r2, [r3, #0]
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	681b      	ldr	r3, [r3, #0]
 801af20:	33cc      	adds	r3, #204	; 0xcc
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	4610      	mov	r0, r2
 801af26:	4798      	blx	r3
 801af28:	4603      	mov	r3, r0
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d002      	beq.n	801af34 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	e004      	b.n	801af3e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	685b      	ldr	r3, [r3, #4]
 801af38:	60fb      	str	r3, [r7, #12]
 801af3a:	e7e9      	b.n	801af10 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801af3c:	2300      	movs	r3, #0
}
 801af3e:	4618      	mov	r0, r3
 801af40:	3710      	adds	r7, #16
 801af42:	46bd      	mov	sp, r7
 801af44:	bd80      	pop	{r7, pc}

0801af46 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 801af46:	b580      	push	{r7, lr}
 801af48:	b084      	sub	sp, #16
 801af4a:	af00      	add	r7, sp, #0
 801af4c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	685b      	ldr	r3, [r3, #4]
 801af52:	60fb      	str	r3, [r7, #12]
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d01d      	beq.n	801af96 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	681a      	ldr	r2, [r3, #0]
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	33cc      	adds	r3, #204	; 0xcc
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	4610      	mov	r0, r2
 801af6a:	4798      	blx	r3
 801af6c:	4603      	mov	r3, r0
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d00d      	beq.n	801af8e <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 801af78:	68fb      	ldr	r3, [r7, #12]
 801af7a:	2200      	movs	r2, #0
 801af7c:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	3388      	adds	r3, #136	; 0x88
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	6878      	ldr	r0, [r7, #4]
 801af88:	4798      	blx	r3
            return matchingCall;
 801af8a:	68bb      	ldr	r3, [r7, #8]
 801af8c:	e004      	b.n	801af98 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	685b      	ldr	r3, [r3, #4]
 801af92:	60fb      	str	r3, [r7, #12]
 801af94:	e7de      	b.n	801af54 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 801af96:	2300      	movs	r3, #0
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3710      	adds	r7, #16
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}

0801afa0 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b086      	sub	sp, #24
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	685b      	ldr	r3, [r3, #4]
 801afac:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 801afae:	2300      	movs	r3, #0
 801afb0:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 801afb2:	2300      	movs	r3, #0
 801afb4:	60fb      	str	r3, [r7, #12]

    while (current) {
 801afb6:	697b      	ldr	r3, [r7, #20]
 801afb8:	2b00      	cmp	r3, #0
 801afba:	d024      	beq.n	801b006 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 801afbc:	697b      	ldr	r3, [r7, #20]
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d11a      	bne.n	801affa <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 801afc4:	697b      	ldr	r3, [r7, #20]
 801afc6:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 801afc8:	693b      	ldr	r3, [r7, #16]
 801afca:	2b00      	cmp	r3, #0
 801afcc:	d106      	bne.n	801afdc <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 801afce:	697b      	ldr	r3, [r7, #20]
 801afd0:	685b      	ldr	r3, [r3, #4]
 801afd2:	617b      	str	r3, [r7, #20]
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	697a      	ldr	r2, [r7, #20]
 801afd8:	605a      	str	r2, [r3, #4]
 801afda:	e006      	b.n	801afea <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 801afdc:	697b      	ldr	r3, [r7, #20]
 801afde:	685a      	ldr	r2, [r3, #4]
 801afe0:	693b      	ldr	r3, [r7, #16]
 801afe2:	605a      	str	r2, [r3, #4]
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	685b      	ldr	r3, [r3, #4]
 801afe8:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d0e2      	beq.n	801afb6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 801aff0:	2108      	movs	r1, #8
 801aff2:	4618      	mov	r0, r3
 801aff4:	f7ee f82e 	bl	8009054 <_ZdlPvj>
 801aff8:	e7dd      	b.n	801afb6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	613b      	str	r3, [r7, #16]
            current = current->next_;
 801affe:	697b      	ldr	r3, [r7, #20]
 801b000:	685b      	ldr	r3, [r3, #4]
 801b002:	617b      	str	r3, [r7, #20]
    while (current) {
 801b004:	e7d7      	b.n	801afb6 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 801b006:	bf00      	nop
 801b008:	3718      	adds	r7, #24
 801b00a:	46bd      	mov	sp, r7
 801b00c:	bd80      	pop	{r7, pc}

0801b00e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 801b00e:	b580      	push	{r7, lr}
 801b010:	b084      	sub	sp, #16
 801b012:	af00      	add	r7, sp, #0
 801b014:	6078      	str	r0, [r7, #4]
    while (head_) {
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	685b      	ldr	r3, [r3, #4]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d019      	beq.n	801b052 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	685b      	ldr	r3, [r3, #4]
 801b024:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	685b      	ldr	r3, [r3, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d004      	beq.n	801b03a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 801b030:	681a      	ldr	r2, [r3, #0]
 801b032:	3204      	adds	r2, #4
 801b034:	6812      	ldr	r2, [r2, #0]
 801b036:	4618      	mov	r0, r3
 801b038:	4790      	blx	r2
        delete head_;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	685b      	ldr	r3, [r3, #4]
 801b03e:	2b00      	cmp	r3, #0
 801b040:	d003      	beq.n	801b04a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 801b042:	2108      	movs	r1, #8
 801b044:	4618      	mov	r0, r3
 801b046:	f7ee f805 	bl	8009054 <_ZdlPvj>
        head_ = next;
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	68fa      	ldr	r2, [r7, #12]
 801b04e:	605a      	str	r2, [r3, #4]
    while (head_) {
 801b050:	e7e1      	b.n	801b016 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 801b052:	bf00      	nop
 801b054:	3710      	adds	r7, #16
 801b056:	46bd      	mov	sp, r7
 801b058:	bd80      	pop	{r7, pc}

0801b05a <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 801b05a:	b580      	push	{r7, lr}
 801b05c:	b084      	sub	sp, #16
 801b05e:	af00      	add	r7, sp, #0
 801b060:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	685b      	ldr	r3, [r3, #4]
 801b066:	60fb      	str	r3, [r7, #12]
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d00c      	beq.n	801b088 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 801b06e:	68fb      	ldr	r3, [r7, #12]
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	33ec      	adds	r3, #236	; 0xec
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4610      	mov	r0, r2
 801b07e:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	685b      	ldr	r3, [r3, #4]
 801b084:	60fb      	str	r3, [r7, #12]
 801b086:	e7ef      	b.n	801b068 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 801b088:	bf00      	nop
 801b08a:	3710      	adds	r7, #16
 801b08c:	46bd      	mov	sp, r7
 801b08e:	bd80      	pop	{r7, pc}

0801b090 <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b084      	sub	sp, #16
 801b094:	af00      	add	r7, sp, #0
 801b096:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	685b      	ldr	r3, [r3, #4]
 801b09c:	60fb      	str	r3, [r7, #12]
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d00c      	beq.n	801b0be <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 801b0a4:	68fb      	ldr	r3, [r7, #12]
 801b0a6:	681a      	ldr	r2, [r3, #0]
 801b0a8:	68fb      	ldr	r3, [r7, #12]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	33e8      	adds	r3, #232	; 0xe8
 801b0b0:	681b      	ldr	r3, [r3, #0]
 801b0b2:	4610      	mov	r0, r2
 801b0b4:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	685b      	ldr	r3, [r3, #4]
 801b0ba:	60fb      	str	r3, [r7, #12]
 801b0bc:	e7ef      	b.n	801b09e <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 801b0be:	bf00      	nop
 801b0c0:	3710      	adds	r7, #16
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bd80      	pop	{r7, pc}

0801b0c6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 801b0c6:	b580      	push	{r7, lr}
 801b0c8:	b084      	sub	sp, #16
 801b0ca:	af00      	add	r7, sp, #0
 801b0cc:	6078      	str	r0, [r7, #4]
 801b0ce:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	685b      	ldr	r3, [r3, #4]
 801b0d4:	60fb      	str	r3, [r7, #12]
 801b0d6:	68fb      	ldr	r3, [r7, #12]
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d00d      	beq.n	801b0f8 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 801b0dc:	68fb      	ldr	r3, [r7, #12]
 801b0de:	681a      	ldr	r2, [r3, #0]
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	33dc      	adds	r3, #220	; 0xdc
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	6839      	ldr	r1, [r7, #0]
 801b0ec:	4610      	mov	r0, r2
 801b0ee:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	685b      	ldr	r3, [r3, #4]
 801b0f4:	60fb      	str	r3, [r7, #12]
 801b0f6:	e7ee      	b.n	801b0d6 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 801b0f8:	bf00      	nop
 801b0fa:	3710      	adds	r7, #16
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bd80      	pop	{r7, pc}

0801b100 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b084      	sub	sp, #16
 801b104:	af00      	add	r7, sp, #0
 801b106:	6078      	str	r0, [r7, #4]
 801b108:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	685b      	ldr	r3, [r3, #4]
 801b10e:	60fb      	str	r3, [r7, #12]
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d00d      	beq.n	801b132 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	681a      	ldr	r2, [r3, #0]
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	681b      	ldr	r3, [r3, #0]
 801b120:	33e0      	adds	r3, #224	; 0xe0
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	6839      	ldr	r1, [r7, #0]
 801b126:	4610      	mov	r0, r2
 801b128:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b12a:	68fb      	ldr	r3, [r7, #12]
 801b12c:	685b      	ldr	r3, [r3, #4]
 801b12e:	60fb      	str	r3, [r7, #12]
 801b130:	e7ee      	b.n	801b110 <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 801b132:	bf00      	nop
 801b134:	3710      	adds	r7, #16
 801b136:	46bd      	mov	sp, r7
 801b138:	bd80      	pop	{r7, pc}
	...

0801b13c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 801b13c:	b590      	push	{r4, r7, lr}
 801b13e:	b087      	sub	sp, #28
 801b140:	af00      	add	r7, sp, #0
 801b142:	60f8      	str	r0, [r7, #12]
 801b144:	60b9      	str	r1, [r7, #8]
 801b146:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 801b148:	68b9      	ldr	r1, [r7, #8]
 801b14a:	68f8      	ldr	r0, [r7, #12]
 801b14c:	f7f0 fb85 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 801b150:	f107 0310 	add.w	r3, r7, #16
 801b154:	490f      	ldr	r1, [pc, #60]	; (801b194 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 801b156:	4618      	mov	r0, r3
 801b158:	f7f0 fb2b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b15c:	f107 0310 	add.w	r3, r7, #16
 801b160:	4619      	mov	r1, r3
 801b162:	68f8      	ldr	r0, [r7, #12]
 801b164:	f7f0 fee9 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801b168:	4603      	mov	r3, r0
 801b16a:	461c      	mov	r4, r3
 801b16c:	f107 0310 	add.w	r3, r7, #16
 801b170:	4618      	mov	r0, r3
 801b172:	f7f0 fed6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b176:	2c00      	cmp	r4, #0
 801b178:	d007      	beq.n	801b18a <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 801b17a:	6879      	ldr	r1, [r7, #4]
 801b17c:	68f8      	ldr	r0, [r7, #12]
 801b17e:	f7f0 ff4d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 801b182:	4905      	ldr	r1, [pc, #20]	; (801b198 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 801b184:	68f8      	ldr	r0, [r7, #12]
 801b186:	f7f0 ff5b 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }
    return str;
 801b18a:	bf00      	nop
}
 801b18c:	68f8      	ldr	r0, [r7, #12]
 801b18e:	371c      	adds	r7, #28
 801b190:	46bd      	mov	sp, r7
 801b192:	bd90      	pop	{r4, r7, pc}
 801b194:	08024a80 	.word	0x08024a80
 801b198:	08024a84 	.word	0x08024a84

0801b19c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 801b19c:	b590      	push	{r4, r7, lr}
 801b19e:	b087      	sub	sp, #28
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	60f8      	str	r0, [r7, #12]
 801b1a4:	60b9      	str	r1, [r7, #8]
 801b1a6:	607a      	str	r2, [r7, #4]
 801b1a8:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 801b1aa:	68b9      	ldr	r1, [r7, #8]
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	f7f0 fb54 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 801b1b2:	f107 0310 	add.w	r3, r7, #16
 801b1b6:	4912      	ldr	r1, [pc, #72]	; (801b200 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 801b1b8:	4618      	mov	r0, r3
 801b1ba:	f7f0 fafa 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b1be:	f107 0310 	add.w	r3, r7, #16
 801b1c2:	4619      	mov	r1, r3
 801b1c4:	68f8      	ldr	r0, [r7, #12]
 801b1c6:	f7f0 fefd 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 801b1ca:	4603      	mov	r3, r0
 801b1cc:	461c      	mov	r4, r3
 801b1ce:	f107 0310 	add.w	r3, r7, #16
 801b1d2:	4618      	mov	r0, r3
 801b1d4:	f7f0 fea5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b1d8:	2c00      	cmp	r4, #0
 801b1da:	d003      	beq.n	801b1e4 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 801b1dc:	4909      	ldr	r1, [pc, #36]	; (801b204 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 801b1de:	68f8      	ldr	r0, [r7, #12]
 801b1e0:	f7f0 ff2e 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 801b1e4:	6879      	ldr	r1, [r7, #4]
 801b1e6:	68f8      	ldr	r0, [r7, #12]
 801b1e8:	f7f0 ff18 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 801b1ec:	6839      	ldr	r1, [r7, #0]
 801b1ee:	68f8      	ldr	r0, [r7, #12]
 801b1f0:	f7f0 ff14 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    return str;
 801b1f4:	bf00      	nop
}
 801b1f6:	68f8      	ldr	r0, [r7, #12]
 801b1f8:	371c      	adds	r7, #28
 801b1fa:	46bd      	mov	sp, r7
 801b1fc:	bd90      	pop	{r4, r7, pc}
 801b1fe:	bf00      	nop
 801b200:	08024a80 	.word	0x08024a80
 801b204:	08024a8c 	.word	0x08024a8c

0801b208 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 801b208:	b580      	push	{r7, lr}
 801b20a:	b08c      	sub	sp, #48	; 0x30
 801b20c:	af00      	add	r7, sp, #0
 801b20e:	60f8      	str	r0, [r7, #12]
 801b210:	60b9      	str	r1, [r7, #8]
 801b212:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801b214:	f107 0314 	add.w	r3, r7, #20
 801b218:	4929      	ldr	r1, [pc, #164]	; (801b2c0 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7f0 fac9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	685b      	ldr	r3, [r3, #4]
 801b224:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d038      	beq.n	801b29e <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 801b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b22e:	681a      	ldr	r2, [r3, #0]
 801b230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	33c0      	adds	r3, #192	; 0xc0
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	4610      	mov	r0, r2
 801b23c:	4798      	blx	r3
 801b23e:	4603      	mov	r3, r0
 801b240:	f083 0301 	eor.w	r3, r3, #1
 801b244:	b2db      	uxtb	r3, r3
 801b246:	2b00      	cmp	r3, #0
 801b248:	d025      	beq.n	801b296 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801b24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b24c:	6819      	ldr	r1, [r3, #0]
 801b24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	33f0      	adds	r3, #240	; 0xf0
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b25c:	4610      	mov	r0, r2
 801b25e:	4798      	blx	r3
 801b260:	f107 001c 	add.w	r0, r7, #28
 801b264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b268:	f107 0114 	add.w	r1, r7, #20
 801b26c:	687a      	ldr	r2, [r7, #4]
 801b26e:	f7ff ff95 	bl	801b19c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801b272:	f107 021c 	add.w	r2, r7, #28
 801b276:	f107 0314 	add.w	r3, r7, #20
 801b27a:	4611      	mov	r1, r2
 801b27c:	4618      	mov	r0, r3
 801b27e:	f7f0 fb04 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b282:	f107 031c 	add.w	r3, r7, #28
 801b286:	4618      	mov	r0, r3
 801b288:	f7f0 fe4b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b28c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b290:	4618      	mov	r0, r3
 801b292:	f7f0 fe46 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b298:	685b      	ldr	r3, [r3, #4]
 801b29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b29c:	e7c3      	b.n	801b226 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b29e:	68fb      	ldr	r3, [r7, #12]
 801b2a0:	f107 0114 	add.w	r1, r7, #20
 801b2a4:	687a      	ldr	r2, [r7, #4]
 801b2a6:	4618      	mov	r0, r3
 801b2a8:	f7ff ff48 	bl	801b13c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801b2ac:	f107 0314 	add.w	r3, r7, #20
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	f7f0 fe36 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b2b6:	bf00      	nop
}
 801b2b8:	68f8      	ldr	r0, [r7, #12]
 801b2ba:	3730      	adds	r7, #48	; 0x30
 801b2bc:	46bd      	mov	sp, r7
 801b2be:	bd80      	pop	{r7, pc}
 801b2c0:	08024a80 	.word	0x08024a80

0801b2c4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b08c      	sub	sp, #48	; 0x30
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	60f8      	str	r0, [r7, #12]
 801b2cc:	60b9      	str	r1, [r7, #8]
 801b2ce:	607a      	str	r2, [r7, #4]
    SimpleString str;
 801b2d0:	f107 0314 	add.w	r3, r7, #20
 801b2d4:	4928      	ldr	r1, [pc, #160]	; (801b378 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	f7f0 fa6b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b2dc:	68bb      	ldr	r3, [r7, #8]
 801b2de:	685b      	ldr	r3, [r3, #4]
 801b2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d035      	beq.n	801b354 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 801b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ea:	681a      	ldr	r2, [r3, #0]
 801b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b2ee:	681b      	ldr	r3, [r3, #0]
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	33c0      	adds	r3, #192	; 0xc0
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	4610      	mov	r0, r2
 801b2f8:	4798      	blx	r3
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d025      	beq.n	801b34c <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 801b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b302:	6819      	ldr	r1, [r3, #0]
 801b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	33f0      	adds	r3, #240	; 0xf0
 801b30c:	681b      	ldr	r3, [r3, #0]
 801b30e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b312:	4610      	mov	r0, r2
 801b314:	4798      	blx	r3
 801b316:	f107 001c 	add.w	r0, r7, #28
 801b31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b31e:	f107 0114 	add.w	r1, r7, #20
 801b322:	687a      	ldr	r2, [r7, #4]
 801b324:	f7ff ff3a 	bl	801b19c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801b328:	f107 021c 	add.w	r2, r7, #28
 801b32c:	f107 0314 	add.w	r3, r7, #20
 801b330:	4611      	mov	r1, r2
 801b332:	4618      	mov	r0, r3
 801b334:	f7f0 faa9 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b338:	f107 031c 	add.w	r3, r7, #28
 801b33c:	4618      	mov	r0, r3
 801b33e:	f7f0 fdf0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b346:	4618      	mov	r0, r3
 801b348:	f7f0 fdeb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b352:	e7c6      	b.n	801b2e2 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	f107 0114 	add.w	r1, r7, #20
 801b35a:	687a      	ldr	r2, [r7, #4]
 801b35c:	4618      	mov	r0, r3
 801b35e:	f7ff feed 	bl	801b13c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 801b362:	f107 0314 	add.w	r3, r7, #20
 801b366:	4618      	mov	r0, r3
 801b368:	f7f0 fddb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 801b36c:	bf00      	nop
}
 801b36e:	68f8      	ldr	r0, [r7, #12]
 801b370:	3730      	adds	r7, #48	; 0x30
 801b372:	46bd      	mov	sp, r7
 801b374:	bd80      	pop	{r7, pc}
 801b376:	bf00      	nop
 801b378:	08024a80 	.word	0x08024a80

0801b37c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b08e      	sub	sp, #56	; 0x38
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	6039      	str	r1, [r7, #0]
    SimpleString str;
 801b386:	f107 030c 	add.w	r3, r7, #12
 801b38a:	4936      	ldr	r1, [pc, #216]	; (801b464 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b38c:	4618      	mov	r0, r3
 801b38e:	f7f0 fa10 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	685b      	ldr	r3, [r3, #4]
 801b396:	637b      	str	r3, [r7, #52]	; 0x34
 801b398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b39a:	2b00      	cmp	r3, #0
 801b39c:	d044      	beq.n	801b428 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 801b39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3a0:	681a      	ldr	r2, [r3, #0]
 801b3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	33cc      	adds	r3, #204	; 0xcc
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	4610      	mov	r0, r2
 801b3ae:	4798      	blx	r3
 801b3b0:	4603      	mov	r3, r0
 801b3b2:	f083 0301 	eor.w	r3, r3, #1
 801b3b6:	b2db      	uxtb	r3, r3
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d031      	beq.n	801b420 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 801b3bc:	f107 031c 	add.w	r3, r7, #28
 801b3c0:	4928      	ldr	r1, [pc, #160]	; (801b464 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b3c2:	4618      	mov	r0, r3
 801b3c4:	f7f0 f9f5 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3ca:	6819      	ldr	r1, [r3, #0]
 801b3cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	33f4      	adds	r3, #244	; 0xf4
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801b3da:	4610      	mov	r0, r2
 801b3dc:	4798      	blx	r3
 801b3de:	f107 0014 	add.w	r0, r7, #20
 801b3e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b3e6:	f107 021c 	add.w	r2, r7, #28
 801b3ea:	f107 010c 	add.w	r1, r7, #12
 801b3ee:	f7ff fed5 	bl	801b19c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 801b3f2:	f107 0214 	add.w	r2, r7, #20
 801b3f6:	f107 030c 	add.w	r3, r7, #12
 801b3fa:	4611      	mov	r1, r2
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7f0 fa44 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b402:	f107 0314 	add.w	r3, r7, #20
 801b406:	4618      	mov	r0, r3
 801b408:	f7f0 fd8b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b40c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b410:	4618      	mov	r0, r3
 801b412:	f7f0 fd86 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b416:	f107 031c 	add.w	r3, r7, #28
 801b41a:	4618      	mov	r0, r3
 801b41c:	f7f0 fd81 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b422:	685b      	ldr	r3, [r3, #4]
 801b424:	637b      	str	r3, [r7, #52]	; 0x34
 801b426:	e7b7      	b.n	801b398 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 801b428:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b42c:	490d      	ldr	r1, [pc, #52]	; (801b464 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 801b42e:	4618      	mov	r0, r3
 801b430:	f7f0 f9bf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b43a:	f107 010c 	add.w	r1, r7, #12
 801b43e:	4618      	mov	r0, r3
 801b440:	f7ff fe7c 	bl	801b13c <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 801b444:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b448:	4618      	mov	r0, r3
 801b44a:	f7f0 fd6a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    SimpleString str;
 801b44e:	f107 030c 	add.w	r3, r7, #12
 801b452:	4618      	mov	r0, r3
 801b454:	f7f0 fd65 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 801b458:	bf00      	nop
}
 801b45a:	6878      	ldr	r0, [r7, #4]
 801b45c:	3738      	adds	r7, #56	; 0x38
 801b45e:	46bd      	mov	sp, r7
 801b460:	bd80      	pop	{r7, pc}
 801b462:	bf00      	nop
 801b464:	08024a80 	.word	0x08024a80

0801b468 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 801b468:	b580      	push	{r7, lr}
 801b46a:	b084      	sub	sp, #16
 801b46c:	af00      	add	r7, sp, #0
 801b46e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	685b      	ldr	r3, [r3, #4]
 801b474:	60fb      	str	r3, [r7, #12]
 801b476:	68fb      	ldr	r3, [r7, #12]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d014      	beq.n	801b4a6 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 801b47c:	68fb      	ldr	r3, [r7, #12]
 801b47e:	681a      	ldr	r2, [r3, #0]
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	33d0      	adds	r3, #208	; 0xd0
 801b488:	681b      	ldr	r3, [r3, #0]
 801b48a:	4610      	mov	r0, r2
 801b48c:	4798      	blx	r3
 801b48e:	4603      	mov	r3, r0
 801b490:	f083 0301 	eor.w	r3, r3, #1
 801b494:	b2db      	uxtb	r3, r3
 801b496:	2b00      	cmp	r3, #0
 801b498:	d001      	beq.n	801b49e <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 801b49a:	2301      	movs	r3, #1
 801b49c:	e004      	b.n	801b4a8 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801b49e:	68fb      	ldr	r3, [r7, #12]
 801b4a0:	685b      	ldr	r3, [r3, #4]
 801b4a2:	60fb      	str	r3, [r7, #12]
 801b4a4:	e7e7      	b.n	801b476 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 801b4a6:	2300      	movs	r3, #0
}
 801b4a8:	4618      	mov	r0, r3
 801b4aa:	3710      	adds	r7, #16
 801b4ac:	46bd      	mov	sp, r7
 801b4ae:	bd80      	pop	{r7, pc}

0801b4b0 <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 801b4b0:	b480      	push	{r7}
 801b4b2:	b083      	sub	sp, #12
 801b4b4:	af00      	add	r7, sp, #0
 801b4b6:	6078      	str	r0, [r7, #4]
 801b4b8:	460b      	mov	r3, r1
 801b4ba:	70fb      	strb	r3, [r7, #3]
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	78fa      	ldrb	r2, [r7, #3]
 801b4c0:	711a      	strb	r2, [r3, #4]
 801b4c2:	bf00      	nop
 801b4c4:	370c      	adds	r7, #12
 801b4c6:	46bd      	mov	sp, r7
 801b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4cc:	4770      	bx	lr
	...

0801b4d0 <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 801b4d0:	b580      	push	{r7, lr}
 801b4d2:	b082      	sub	sp, #8
 801b4d4:	af00      	add	r7, sp, #0
 801b4d6:	6078      	str	r0, [r7, #4]
 801b4d8:	460b      	mov	r3, r1
 801b4da:	70fb      	strb	r3, [r7, #3]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	4618      	mov	r0, r3
 801b4e0:	f7ed ff6a 	bl	80093b8 <_ZN14TestTerminatorC1Ev>
 801b4e4:	4a05      	ldr	r2, [pc, #20]	; (801b4fc <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	601a      	str	r2, [r3, #0]
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	78fa      	ldrb	r2, [r7, #3]
 801b4ee:	711a      	strb	r2, [r3, #4]
    {
    }
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3708      	adds	r7, #8
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	bd80      	pop	{r7, pc}
 801b4fa:	bf00      	nop
 801b4fc:	08027590 	.word	0x08027590

0801b500 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 801b500:	b580      	push	{r7, lr}
 801b502:	b082      	sub	sp, #8
 801b504:	af00      	add	r7, sp, #0
 801b506:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	791b      	ldrb	r3, [r3, #4]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d001      	beq.n	801b514 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 801b510:	f7f6 f9fe 	bl	8011910 <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 801b514:	f7f7 fd40 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b518:	4603      	mov	r3, r0
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	6812      	ldr	r2, [r2, #0]
 801b51e:	4618      	mov	r0, r3
 801b520:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 801b522:	bf00      	nop
 801b524:	3708      	adds	r7, #8
 801b526:	46bd      	mov	sp, r7
 801b528:	bd80      	pop	{r7, pc}
	...

0801b52c <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b52c:	b580      	push	{r7, lr}
 801b52e:	b082      	sub	sp, #8
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
    {
 801b534:	4a05      	ldr	r2, [pc, #20]	; (801b54c <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	601a      	str	r2, [r3, #0]
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	4618      	mov	r0, r3
 801b53e:	f7f7 fdbb 	bl	80130b8 <_ZN14TestTerminatorD1Ev>
    }
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	4618      	mov	r0, r3
 801b546:	3708      	adds	r7, #8
 801b548:	46bd      	mov	sp, r7
 801b54a:	bd80      	pop	{r7, pc}
 801b54c:	08027590 	.word	0x08027590

0801b550 <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 801b550:	b580      	push	{r7, lr}
 801b552:	b082      	sub	sp, #8
 801b554:	af00      	add	r7, sp, #0
 801b556:	6078      	str	r0, [r7, #4]
    }
 801b558:	6878      	ldr	r0, [r7, #4]
 801b55a:	f7ff ffe7 	bl	801b52c <_ZN33MockFailureReporterTestTerminatorD1Ev>
 801b55e:	2108      	movs	r1, #8
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f7ed fd77 	bl	8009054 <_ZdlPvj>
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	4618      	mov	r0, r3
 801b56a:	3708      	adds	r7, #8
 801b56c:	46bd      	mov	sp, r7
 801b56e:	bd80      	pop	{r7, pc}

0801b570 <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 801b570:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b572:	b085      	sub	sp, #20
 801b574:	af00      	add	r7, sp, #0
 801b576:	6078      	str	r0, [r7, #4]
 801b578:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	330c      	adds	r3, #12
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	6878      	ldr	r0, [r7, #4]
 801b584:	4798      	blx	r3
 801b586:	4603      	mov	r3, r0
 801b588:	681a      	ldr	r2, [r3, #0]
 801b58a:	321c      	adds	r2, #28
 801b58c:	6812      	ldr	r2, [r2, #0]
 801b58e:	4618      	mov	r0, r3
 801b590:	4790      	blx	r2
 801b592:	4603      	mov	r3, r0
 801b594:	f083 0301 	eor.w	r3, r3, #1
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d01d      	beq.n	801b5da <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	681b      	ldr	r3, [r3, #0]
 801b5a2:	330c      	adds	r3, #12
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	6878      	ldr	r0, [r7, #4]
 801b5a8:	4798      	blx	r3
 801b5aa:	4604      	mov	r4, r0
 801b5ac:	6823      	ldr	r3, [r4, #0]
 801b5ae:	339c      	adds	r3, #156	; 0x9c
 801b5b0:	681d      	ldr	r5, [r3, #0]
 801b5b2:	683e      	ldr	r6, [r7, #0]
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	791a      	ldrb	r2, [r3, #4]
 801b5b8:	f107 0308 	add.w	r3, r7, #8
 801b5bc:	4611      	mov	r1, r2
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f7ff ff86 	bl	801b4d0 <_ZN33MockFailureReporterTestTerminatorC1Eb>
 801b5c4:	f107 0308 	add.w	r3, r7, #8
 801b5c8:	461a      	mov	r2, r3
 801b5ca:	4631      	mov	r1, r6
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	47a8      	blx	r5
 801b5d0:	f107 0308 	add.w	r3, r7, #8
 801b5d4:	4618      	mov	r0, r3
 801b5d6:	f7ff ffa9 	bl	801b52c <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 801b5da:	bf00      	nop
 801b5dc:	3714      	adds	r7, #20
 801b5de:	46bd      	mov	sp, r7
 801b5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b5e2 <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 801b5e2:	b580      	push	{r7, lr}
 801b5e4:	b082      	sub	sp, #8
 801b5e6:	af00      	add	r7, sp, #0
 801b5e8:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801b5ea:	f7f7 fcc5 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801b5ee:	4603      	mov	r3, r0
}
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	3708      	adds	r7, #8
 801b5f4:	46bd      	mov	sp, r7
 801b5f6:	bd80      	pop	{r7, pc}

0801b5f8 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801b5f8:	b590      	push	{r4, r7, lr}
 801b5fa:	b085      	sub	sp, #20
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
 801b600:	6039      	str	r1, [r7, #0]
 801b602:	687c      	ldr	r4, [r7, #4]
 801b604:	f107 0308 	add.w	r3, r7, #8
 801b608:	490b      	ldr	r1, [pc, #44]	; (801b638 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801b60a:	4618      	mov	r0, r3
 801b60c:	f7f0 f8d1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b610:	f107 0308 	add.w	r3, r7, #8
 801b614:	461a      	mov	r2, r3
 801b616:	6839      	ldr	r1, [r7, #0]
 801b618:	4620      	mov	r0, r4
 801b61a:	f7f1 ff29 	bl	800d470 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801b61e:	f107 0308 	add.w	r3, r7, #8
 801b622:	4618      	mov	r0, r3
 801b624:	f7f0 fc7d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b628:	4a04      	ldr	r2, [pc, #16]	; (801b63c <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	601a      	str	r2, [r3, #0]
{
}
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	4618      	mov	r0, r3
 801b632:	3714      	adds	r7, #20
 801b634:	46bd      	mov	sp, r7
 801b636:	bd90      	pop	{r4, r7, pc}
 801b638:	08024a90 	.word	0x08024a90
 801b63c:	0802651c 	.word	0x0802651c

0801b640 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801b640:	b5b0      	push	{r4, r5, r7, lr}
 801b642:	b08a      	sub	sp, #40	; 0x28
 801b644:	af00      	add	r7, sp, #0
 801b646:	6078      	str	r0, [r7, #4]
 801b648:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	332c      	adds	r3, #44	; 0x2c
 801b64e:	492b      	ldr	r1, [pc, #172]	; (801b6fc <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801b650:	4618      	mov	r0, r3
 801b652:	f7f0 fcf5 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801b656:	687b      	ldr	r3, [r7, #4]
 801b658:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b65c:	683b      	ldr	r3, [r7, #0]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	337c      	adds	r3, #124	; 0x7c
 801b662:	681c      	ldr	r4, [r3, #0]
 801b664:	f107 0310 	add.w	r3, r7, #16
 801b668:	4925      	ldr	r1, [pc, #148]	; (801b700 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b66a:	4618      	mov	r0, r3
 801b66c:	f7f0 f8a1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b670:	f107 0308 	add.w	r3, r7, #8
 801b674:	f107 0210 	add.w	r2, r7, #16
 801b678:	6839      	ldr	r1, [r7, #0]
 801b67a:	4618      	mov	r0, r3
 801b67c:	47a0      	blx	r4
 801b67e:	f107 0308 	add.w	r3, r7, #8
 801b682:	4619      	mov	r1, r3
 801b684:	4628      	mov	r0, r5
 801b686:	f7f0 fcc9 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801b68a:	f107 0308 	add.w	r3, r7, #8
 801b68e:	4618      	mov	r0, r3
 801b690:	f7f0 fc47 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b694:	f107 0310 	add.w	r3, r7, #16
 801b698:	4618      	mov	r0, r3
 801b69a:	f7f0 fc42 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	332c      	adds	r3, #44	; 0x2c
 801b6a2:	4918      	ldr	r1, [pc, #96]	; (801b704 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	f7f0 fccb 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801b6b0:	683b      	ldr	r3, [r7, #0]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	3380      	adds	r3, #128	; 0x80
 801b6b6:	681c      	ldr	r4, [r3, #0]
 801b6b8:	f107 0320 	add.w	r3, r7, #32
 801b6bc:	4910      	ldr	r1, [pc, #64]	; (801b700 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801b6be:	4618      	mov	r0, r3
 801b6c0:	f7f0 f877 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b6c4:	f107 0318 	add.w	r3, r7, #24
 801b6c8:	f107 0220 	add.w	r2, r7, #32
 801b6cc:	6839      	ldr	r1, [r7, #0]
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	47a0      	blx	r4
 801b6d2:	f107 0318 	add.w	r3, r7, #24
 801b6d6:	4619      	mov	r1, r3
 801b6d8:	4628      	mov	r0, r5
 801b6da:	f7f0 fc9f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801b6de:	f107 0318 	add.w	r3, r7, #24
 801b6e2:	4618      	mov	r0, r3
 801b6e4:	f7f0 fc1d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b6e8:	f107 0320 	add.w	r3, r7, #32
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f7f0 fc18 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801b6f2:	bf00      	nop
 801b6f4:	3728      	adds	r7, #40	; 0x28
 801b6f6:	46bd      	mov	sp, r7
 801b6f8:	bdb0      	pop	{r4, r5, r7, pc}
 801b6fa:	bf00      	nop
 801b6fc:	08024ae0 	.word	0x08024ae0
 801b700:	08024b0c 	.word	0x08024b0c
 801b704:	08024b10 	.word	0x08024b10

0801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801b708:	b590      	push	{r4, r7, lr}
 801b70a:	b08f      	sub	sp, #60	; 0x3c
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	60f8      	str	r0, [r7, #12]
 801b710:	60b9      	str	r1, [r7, #8]
 801b712:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801b714:	f107 0310 	add.w	r3, r7, #16
 801b718:	4618      	mov	r0, r3
 801b71a:	f7ff f877 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801b71e:	f107 0310 	add.w	r3, r7, #16
 801b722:	687a      	ldr	r2, [r7, #4]
 801b724:	68b9      	ldr	r1, [r7, #8]
 801b726:	4618      	mov	r0, r3
 801b728:	f7ff fa16 	bl	801ab58 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801b72c:	68fb      	ldr	r3, [r7, #12]
 801b72e:	332c      	adds	r3, #44	; 0x2c
 801b730:	4937      	ldr	r1, [pc, #220]	; (801b810 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801b732:	4618      	mov	r0, r3
 801b734:	f7f0 fc84 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	332c      	adds	r3, #44	; 0x2c
 801b73c:	68b9      	ldr	r1, [r7, #8]
 801b73e:	4618      	mov	r0, r3
 801b740:	f7f0 fc6c 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b744:	68fb      	ldr	r3, [r7, #12]
 801b746:	332c      	adds	r3, #44	; 0x2c
 801b748:	4932      	ldr	r1, [pc, #200]	; (801b814 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b74a:	4618      	mov	r0, r3
 801b74c:	f7f0 fc78 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801b750:	68fb      	ldr	r3, [r7, #12]
 801b752:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b756:	f107 0320 	add.w	r3, r7, #32
 801b75a:	492f      	ldr	r1, [pc, #188]	; (801b818 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b75c:	4618      	mov	r0, r3
 801b75e:	f7f0 f828 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b762:	f107 0318 	add.w	r3, r7, #24
 801b766:	f107 0220 	add.w	r2, r7, #32
 801b76a:	f107 0110 	add.w	r1, r7, #16
 801b76e:	4618      	mov	r0, r3
 801b770:	f7ff fd4a 	bl	801b208 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801b774:	f107 0318 	add.w	r3, r7, #24
 801b778:	4619      	mov	r1, r3
 801b77a:	4620      	mov	r0, r4
 801b77c:	f7f0 fc4e 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801b780:	f107 0318 	add.w	r3, r7, #24
 801b784:	4618      	mov	r0, r3
 801b786:	f7f0 fbcc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b78a:	f107 0320 	add.w	r3, r7, #32
 801b78e:	4618      	mov	r0, r3
 801b790:	f7f0 fbc7 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801b794:	68fb      	ldr	r3, [r7, #12]
 801b796:	332c      	adds	r3, #44	; 0x2c
 801b798:	4920      	ldr	r1, [pc, #128]	; (801b81c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801b79a:	4618      	mov	r0, r3
 801b79c:	f7f0 fc50 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801b7a0:	68fb      	ldr	r3, [r7, #12]
 801b7a2:	332c      	adds	r3, #44	; 0x2c
 801b7a4:	68b9      	ldr	r1, [r7, #8]
 801b7a6:	4618      	mov	r0, r3
 801b7a8:	f7f0 fc38 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	332c      	adds	r3, #44	; 0x2c
 801b7b0:	4918      	ldr	r1, [pc, #96]	; (801b814 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7f0 fc44 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801b7b8:	68fb      	ldr	r3, [r7, #12]
 801b7ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b7be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7c2:	4915      	ldr	r1, [pc, #84]	; (801b818 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801b7c4:	4618      	mov	r0, r3
 801b7c6:	f7ef fff4 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b7ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b7ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801b7d2:	f107 0110 	add.w	r1, r7, #16
 801b7d6:	4618      	mov	r0, r3
 801b7d8:	f7ff fd74 	bl	801b2c4 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801b7dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b7e0:	4619      	mov	r1, r3
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f7f0 fc1a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801b7e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	f7f0 fb98 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b7f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b7f6:	4618      	mov	r0, r3
 801b7f8:	f7f0 fb93 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801b7fc:	f107 0310 	add.w	r3, r7, #16
 801b800:	4618      	mov	r0, r3
 801b802:	f7ff f817 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 801b806:	bf00      	nop
 801b808:	373c      	adds	r7, #60	; 0x3c
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd90      	pop	{r4, r7, pc}
 801b80e:	bf00      	nop
 801b810:	08024b38 	.word	0x08024b38
 801b814:	08024b78 	.word	0x08024b78
 801b818:	08024b0c 	.word	0x08024b0c
 801b81c:	08024b7c 	.word	0x08024b7c

0801b820 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b820:	b590      	push	{r4, r7, lr}
 801b822:	b087      	sub	sp, #28
 801b824:	af00      	add	r7, sp, #0
 801b826:	60f8      	str	r0, [r7, #12]
 801b828:	60b9      	str	r1, [r7, #8]
 801b82a:	607a      	str	r2, [r7, #4]
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	68b9      	ldr	r1, [r7, #8]
 801b830:	4618      	mov	r0, r3
 801b832:	f7ff fee1 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801b836:	4a10      	ldr	r2, [pc, #64]	; (801b878 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b842:	f107 0310 	add.w	r3, r7, #16
 801b846:	490d      	ldr	r1, [pc, #52]	; (801b87c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801b848:	4618      	mov	r0, r3
 801b84a:	f7ef ffb2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b84e:	f107 0310 	add.w	r3, r7, #16
 801b852:	4619      	mov	r1, r3
 801b854:	4620      	mov	r0, r4
 801b856:	f7f0 f818 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b85a:	f107 0310 	add.w	r3, r7, #16
 801b85e:	4618      	mov	r0, r3
 801b860:	f7f0 fb5f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	6879      	ldr	r1, [r7, #4]
 801b868:	4618      	mov	r0, r3
 801b86a:	f7ff fee9 	bl	801b640 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	4618      	mov	r0, r3
 801b872:	371c      	adds	r7, #28
 801b874:	46bd      	mov	sp, r7
 801b876:	bd90      	pop	{r4, r7, pc}
 801b878:	080264f0 	.word	0x080264f0
 801b87c:	08024bb8 	.word	0x08024bb8

0801b880 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b880:	b590      	push	{r4, r7, lr}
 801b882:	b08d      	sub	sp, #52	; 0x34
 801b884:	af00      	add	r7, sp, #0
 801b886:	60f8      	str	r0, [r7, #12]
 801b888:	60b9      	str	r1, [r7, #8]
 801b88a:	607a      	str	r2, [r7, #4]
 801b88c:	603b      	str	r3, [r7, #0]
 801b88e:	68fb      	ldr	r3, [r7, #12]
 801b890:	68b9      	ldr	r1, [r7, #8]
 801b892:	4618      	mov	r0, r3
 801b894:	f7ff feb0 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801b898:	4a2f      	ldr	r2, [pc, #188]	; (801b958 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801b89a:	68fb      	ldr	r3, [r7, #12]
 801b89c:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801b89e:	683b      	ldr	r3, [r7, #0]
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	3310      	adds	r3, #16
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	6879      	ldr	r1, [r7, #4]
 801b8a8:	6838      	ldr	r0, [r7, #0]
 801b8aa:	4798      	blx	r3
 801b8ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801b8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8b0:	2b00      	cmp	r3, #0
 801b8b2:	d027      	beq.n	801b904 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8b6:	1c5a      	adds	r2, r3, #1
 801b8b8:	f107 0314 	add.w	r3, r7, #20
 801b8bc:	4611      	mov	r1, r2
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f7f1 fa00 	bl	800ccc4 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b8ca:	f107 0314 	add.w	r3, r7, #20
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	f7f0 fafa 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	f107 031c 	add.w	r3, r7, #28
 801b8da:	4920      	ldr	r1, [pc, #128]	; (801b95c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801b8dc:	4618      	mov	r0, r3
 801b8de:	f7f1 f827 	bl	800c930 <_Z16StringFromFormatPKcz>
 801b8e2:	f107 031c 	add.w	r3, r7, #28
 801b8e6:	4619      	mov	r1, r3
 801b8e8:	4620      	mov	r0, r4
 801b8ea:	f7ef ffce 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b8ee:	f107 031c 	add.w	r3, r7, #28
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	f7f0 fb15 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801b8f8:	f107 0314 	add.w	r3, r7, #20
 801b8fc:	4618      	mov	r0, r3
 801b8fe:	f7f0 fb10 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801b902:	e013      	b.n	801b92c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801b904:	68fb      	ldr	r3, [r7, #12]
 801b906:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b90e:	4914      	ldr	r1, [pc, #80]	; (801b960 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801b910:	4618      	mov	r0, r3
 801b912:	f7ef ff4e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b91a:	4619      	mov	r1, r3
 801b91c:	4620      	mov	r0, r4
 801b91e:	f7ef ffb4 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b926:	4618      	mov	r0, r3
 801b928:	f7f0 fafb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	332c      	adds	r3, #44	; 0x2c
 801b930:	6879      	ldr	r1, [r7, #4]
 801b932:	4618      	mov	r0, r3
 801b934:	f7f0 fb72 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	332c      	adds	r3, #44	; 0x2c
 801b93c:	4909      	ldr	r1, [pc, #36]	; (801b964 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801b93e:	4618      	mov	r0, r3
 801b940:	f7f0 fb7e 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	6839      	ldr	r1, [r7, #0]
 801b948:	4618      	mov	r0, r3
 801b94a:	f7ff fe79 	bl	801b640 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801b94e:	68fb      	ldr	r3, [r7, #12]
 801b950:	4618      	mov	r0, r3
 801b952:	3734      	adds	r7, #52	; 0x34
 801b954:	46bd      	mov	sp, r7
 801b956:	bd90      	pop	{r4, r7, pc}
 801b958:	08026e90 	.word	0x08026e90
 801b95c:	08024be8 	.word	0x08024be8
 801b960:	08024c24 	.word	0x08024c24
 801b964:	08024b78 	.word	0x08024b78

0801b968 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801b968:	b590      	push	{r4, r7, lr}
 801b96a:	b089      	sub	sp, #36	; 0x24
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	60f8      	str	r0, [r7, #12]
 801b970:	60b9      	str	r1, [r7, #8]
 801b972:	607a      	str	r2, [r7, #4]
 801b974:	68fb      	ldr	r3, [r7, #12]
 801b976:	68b9      	ldr	r1, [r7, #8]
 801b978:	4618      	mov	r0, r3
 801b97a:	f7ff fe3d 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801b97e:	4a1f      	ldr	r2, [pc, #124]	; (801b9fc <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801b980:	68fb      	ldr	r3, [r7, #12]
 801b982:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801b984:	f107 0310 	add.w	r3, r7, #16
 801b988:	4618      	mov	r0, r3
 801b98a:	f7fe ff3f 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801b98e:	f107 0310 	add.w	r3, r7, #16
 801b992:	6879      	ldr	r1, [r7, #4]
 801b994:	4618      	mov	r0, r3
 801b996:	f7ff f909 	bl	801abac <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801b99a:	f107 0310 	add.w	r3, r7, #16
 801b99e:	4618      	mov	r0, r3
 801b9a0:	f7ff f94c 	bl	801ac3c <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801b9a4:	68fb      	ldr	r3, [r7, #12]
 801b9a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801b9aa:	f107 0318 	add.w	r3, r7, #24
 801b9ae:	4914      	ldr	r1, [pc, #80]	; (801ba00 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801b9b0:	4618      	mov	r0, r3
 801b9b2:	f7ef fefe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801b9b6:	f107 0318 	add.w	r3, r7, #24
 801b9ba:	4619      	mov	r1, r3
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ef ff64 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801b9c2:	f107 0318 	add.w	r3, r7, #24
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	f7f0 faab 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801b9cc:	68fb      	ldr	r3, [r7, #12]
 801b9ce:	332c      	adds	r3, #44	; 0x2c
 801b9d0:	490c      	ldr	r1, [pc, #48]	; (801ba04 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7f0 fb34 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801b9d8:	68fb      	ldr	r3, [r7, #12]
 801b9da:	f107 0210 	add.w	r2, r7, #16
 801b9de:	4611      	mov	r1, r2
 801b9e0:	4618      	mov	r0, r3
 801b9e2:	f7ff fe2d 	bl	801b640 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801b9e6:	f107 0310 	add.w	r3, r7, #16
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f7fe ff22 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 801b9f0:	68fb      	ldr	r3, [r7, #12]
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	3724      	adds	r7, #36	; 0x24
 801b9f6:	46bd      	mov	sp, r7
 801b9f8:	bd90      	pop	{r4, r7, pc}
 801b9fa:	bf00      	nop
 801b9fc:	080264c4 	.word	0x080264c4
 801ba00:	08024c50 	.word	0x08024c50
 801ba04:	08024b78 	.word	0x08024b78

0801ba08 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801ba08:	b590      	push	{r4, r7, lr}
 801ba0a:	b099      	sub	sp, #100	; 0x64
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	60f8      	str	r0, [r7, #12]
 801ba10:	60b9      	str	r1, [r7, #8]
 801ba12:	607a      	str	r2, [r7, #4]
 801ba14:	603b      	str	r3, [r7, #0]
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	68b9      	ldr	r1, [r7, #8]
 801ba1a:	4618      	mov	r0, r3
 801ba1c:	f7ff fdec 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801ba20:	4a9e      	ldr	r2, [pc, #632]	; (801bc9c <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801ba22:	68fb      	ldr	r3, [r7, #12]
 801ba24:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801ba26:	f107 0310 	add.w	r3, r7, #16
 801ba2a:	4618      	mov	r0, r3
 801ba2c:	f7fe feee 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801ba30:	f107 0310 	add.w	r3, r7, #16
 801ba34:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801ba36:	6879      	ldr	r1, [r7, #4]
 801ba38:	4618      	mov	r0, r3
 801ba3a:	f7ff f88d 	bl	801ab58 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801ba3e:	683b      	ldr	r3, [r7, #0]
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	335c      	adds	r3, #92	; 0x5c
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	f107 0218 	add.w	r2, r7, #24
 801ba4a:	6839      	ldr	r1, [r7, #0]
 801ba4c:	4610      	mov	r0, r2
 801ba4e:	4798      	blx	r3
 801ba50:	f107 0218 	add.w	r2, r7, #24
 801ba54:	f107 0310 	add.w	r3, r7, #16
 801ba58:	4611      	mov	r1, r2
 801ba5a:	4618      	mov	r0, r3
 801ba5c:	f7ff f948 	bl	801acf0 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801ba60:	f107 0318 	add.w	r3, r7, #24
 801ba64:	4618      	mov	r0, r3
 801ba66:	f7f0 fa5c 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801ba6a:	f107 0310 	add.w	r3, r7, #16
 801ba6e:	4618      	mov	r0, r3
 801ba70:	f7fe ff4d 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 801ba74:	4603      	mov	r3, r0
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d037      	beq.n	801baea <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801ba80:	f107 0320 	add.w	r3, r7, #32
 801ba84:	4986      	ldr	r1, [pc, #536]	; (801bca0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7ef fe93 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ba8c:	f107 0320 	add.w	r3, r7, #32
 801ba90:	4619      	mov	r1, r3
 801ba92:	4620      	mov	r0, r4
 801ba94:	f7ef fef9 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801ba98:	f107 0320 	add.w	r3, r7, #32
 801ba9c:	4618      	mov	r0, r3
 801ba9e:	f7f0 fa40 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801baa2:	68fb      	ldr	r3, [r7, #12]
 801baa4:	332c      	adds	r3, #44	; 0x2c
 801baa6:	6879      	ldr	r1, [r7, #4]
 801baa8:	4618      	mov	r0, r3
 801baaa:	f7f0 fab7 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801baae:	68fb      	ldr	r3, [r7, #12]
 801bab0:	332c      	adds	r3, #44	; 0x2c
 801bab2:	497c      	ldr	r1, [pc, #496]	; (801bca4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7f0 fac3 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801baba:	68fb      	ldr	r3, [r7, #12]
 801babc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bac0:	683b      	ldr	r3, [r7, #0]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	335c      	adds	r3, #92	; 0x5c
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bacc:	6839      	ldr	r1, [r7, #0]
 801bace:	4610      	mov	r0, r2
 801bad0:	4798      	blx	r3
 801bad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bad6:	4619      	mov	r1, r3
 801bad8:	4620      	mov	r0, r4
 801bada:	f7f0 fa9f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bae2:	4618      	mov	r0, r3
 801bae4:	f7f0 fa1d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801bae8:	e056      	b.n	801bb98 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801baea:	68fb      	ldr	r3, [r7, #12]
 801baec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801baf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801baf4:	496c      	ldr	r1, [pc, #432]	; (801bca8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801baf6:	4618      	mov	r0, r3
 801baf8:	f7ef fe5b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801bafc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bb00:	4619      	mov	r1, r3
 801bb02:	4620      	mov	r0, r4
 801bb04:	f7ef fec1 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801bb08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bb0c:	4618      	mov	r0, r3
 801bb0e:	f7f0 fa08 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801bb12:	68fb      	ldr	r3, [r7, #12]
 801bb14:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb18:	683b      	ldr	r3, [r7, #0]
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	335c      	adds	r3, #92	; 0x5c
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bb24:	6839      	ldr	r1, [r7, #0]
 801bb26:	4610      	mov	r0, r2
 801bb28:	4798      	blx	r3
 801bb2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb2e:	4619      	mov	r1, r3
 801bb30:	4620      	mov	r0, r4
 801bb32:	f7f0 fa73 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bb36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bb3a:	4618      	mov	r0, r3
 801bb3c:	f7f0 f9f1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	332c      	adds	r3, #44	; 0x2c
 801bb44:	4959      	ldr	r1, [pc, #356]	; (801bcac <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801bb46:	4618      	mov	r0, r3
 801bb48:	f7f0 fa7a 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	332c      	adds	r3, #44	; 0x2c
 801bb50:	6879      	ldr	r1, [r7, #4]
 801bb52:	4618      	mov	r0, r3
 801bb54:	f7f0 fa62 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801bb58:	68fb      	ldr	r3, [r7, #12]
 801bb5a:	332c      	adds	r3, #44	; 0x2c
 801bb5c:	4954      	ldr	r1, [pc, #336]	; (801bcb0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7f0 fa6e 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801bb64:	68fb      	ldr	r3, [r7, #12]
 801bb66:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bb6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb6e:	6839      	ldr	r1, [r7, #0]
 801bb70:	4618      	mov	r0, r3
 801bb72:	f7fd faa3 	bl	80190bc <_Z10StringFromRK14MockNamedValue>
 801bb76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb7a:	4619      	mov	r1, r3
 801bb7c:	4620      	mov	r0, r4
 801bb7e:	f7f0 fa4d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bb82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801bb86:	4618      	mov	r0, r3
 801bb88:	f7f0 f9cb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801bb8c:	68fb      	ldr	r3, [r7, #12]
 801bb8e:	332c      	adds	r3, #44	; 0x2c
 801bb90:	4948      	ldr	r1, [pc, #288]	; (801bcb4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801bb92:	4618      	mov	r0, r3
 801bb94:	f7f0 fa54 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	332c      	adds	r3, #44	; 0x2c
 801bb9c:	4946      	ldr	r1, [pc, #280]	; (801bcb8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801bb9e:	4618      	mov	r0, r3
 801bba0:	f7f0 fa4e 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801bba8:	6879      	ldr	r1, [r7, #4]
 801bbaa:	4618      	mov	r0, r3
 801bbac:	f7ff fdac 	bl	801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	332c      	adds	r3, #44	; 0x2c
 801bbb4:	4941      	ldr	r1, [pc, #260]	; (801bcbc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801bbb6:	4618      	mov	r0, r3
 801bbb8:	f7f0 fa42 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801bbbc:	68fb      	ldr	r3, [r7, #12]
 801bbbe:	332c      	adds	r3, #44	; 0x2c
 801bbc0:	6879      	ldr	r1, [r7, #4]
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	f7f0 fa2a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801bbc8:	68fb      	ldr	r3, [r7, #12]
 801bbca:	332c      	adds	r3, #44	; 0x2c
 801bbcc:	493a      	ldr	r1, [pc, #232]	; (801bcb8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801bbce:	4618      	mov	r0, r3
 801bbd0:	f7f0 fa36 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	332c      	adds	r3, #44	; 0x2c
 801bbd8:	4939      	ldr	r1, [pc, #228]	; (801bcc0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801bbda:	4618      	mov	r0, r3
 801bbdc:	f7f0 fa30 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801bbe0:	68fb      	ldr	r3, [r7, #12]
 801bbe2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bbe6:	683b      	ldr	r3, [r7, #0]
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	3360      	adds	r3, #96	; 0x60
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bbf2:	6839      	ldr	r1, [r7, #0]
 801bbf4:	4610      	mov	r0, r2
 801bbf6:	4798      	blx	r3
 801bbf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bbfc:	4619      	mov	r1, r3
 801bbfe:	4620      	mov	r0, r4
 801bc00:	f7f0 fa0c 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bc04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bc08:	4618      	mov	r0, r3
 801bc0a:	f7f0 f98a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	332c      	adds	r3, #44	; 0x2c
 801bc12:	492c      	ldr	r1, [pc, #176]	; (801bcc4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801bc14:	4618      	mov	r0, r3
 801bc16:	f7f0 fa13 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc20:	683b      	ldr	r3, [r7, #0]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	335c      	adds	r3, #92	; 0x5c
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bc2c:	6839      	ldr	r1, [r7, #0]
 801bc2e:	4610      	mov	r0, r2
 801bc30:	4798      	blx	r3
 801bc32:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc36:	4619      	mov	r1, r3
 801bc38:	4620      	mov	r0, r4
 801bc3a:	f7f0 f9ef 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bc3e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bc42:	4618      	mov	r0, r3
 801bc44:	f7f0 f96d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801bc48:	68fb      	ldr	r3, [r7, #12]
 801bc4a:	332c      	adds	r3, #44	; 0x2c
 801bc4c:	491e      	ldr	r1, [pc, #120]	; (801bcc8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801bc4e:	4618      	mov	r0, r3
 801bc50:	f7f0 f9f6 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bc5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc5e:	6839      	ldr	r1, [r7, #0]
 801bc60:	4618      	mov	r0, r3
 801bc62:	f7fd fa2b 	bl	80190bc <_Z10StringFromRK14MockNamedValue>
 801bc66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc6a:	4619      	mov	r1, r3
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	f7f0 f9d5 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bc72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bc76:	4618      	mov	r0, r3
 801bc78:	f7f0 f953 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801bc7c:	68fb      	ldr	r3, [r7, #12]
 801bc7e:	332c      	adds	r3, #44	; 0x2c
 801bc80:	490c      	ldr	r1, [pc, #48]	; (801bcb4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801bc82:	4618      	mov	r0, r3
 801bc84:	f7f0 f9dc 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801bc88:	f107 0310 	add.w	r3, r7, #16
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f7fe fdd1 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 801bc92:	68fb      	ldr	r3, [r7, #12]
 801bc94:	4618      	mov	r0, r3
 801bc96:	3764      	adds	r7, #100	; 0x64
 801bc98:	46bd      	mov	sp, r7
 801bc9a:	bd90      	pop	{r4, r7, pc}
 801bc9c:	08026e64 	.word	0x08026e64
 801bca0:	08024c74 	.word	0x08024c74
 801bca4:	08024cac 	.word	0x08024cac
 801bca8:	08024cb0 	.word	0x08024cb0
 801bcac:	08024ce8 	.word	0x08024ce8
 801bcb0:	08024cf8 	.word	0x08024cf8
 801bcb4:	08024d00 	.word	0x08024d00
 801bcb8:	08024b78 	.word	0x08024b78
 801bcbc:	08024d04 	.word	0x08024d04
 801bcc0:	08024b0c 	.word	0x08024b0c
 801bcc4:	08024d38 	.word	0x08024d38
 801bcc8:	08024d3c 	.word	0x08024d3c

0801bccc <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801bccc:	b590      	push	{r4, r7, lr}
 801bcce:	b097      	sub	sp, #92	; 0x5c
 801bcd0:	af00      	add	r7, sp, #0
 801bcd2:	60f8      	str	r0, [r7, #12]
 801bcd4:	60b9      	str	r1, [r7, #8]
 801bcd6:	607a      	str	r2, [r7, #4]
 801bcd8:	603b      	str	r3, [r7, #0]
 801bcda:	68fb      	ldr	r3, [r7, #12]
 801bcdc:	68b9      	ldr	r1, [r7, #8]
 801bcde:	4618      	mov	r0, r3
 801bce0:	f7ff fc8a 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801bce4:	4a90      	ldr	r2, [pc, #576]	; (801bf28 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801bce6:	68fb      	ldr	r3, [r7, #12]
 801bce8:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801bcea:	f107 0310 	add.w	r3, r7, #16
 801bcee:	4618      	mov	r0, r3
 801bcf0:	f7fe fd8c 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801bcf4:	f107 0310 	add.w	r3, r7, #16
 801bcf8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801bcfa:	6879      	ldr	r1, [r7, #4]
 801bcfc:	4618      	mov	r0, r3
 801bcfe:	f7fe ff2b 	bl	801ab58 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801bd02:	683b      	ldr	r3, [r7, #0]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	335c      	adds	r3, #92	; 0x5c
 801bd08:	681b      	ldr	r3, [r3, #0]
 801bd0a:	f107 0218 	add.w	r2, r7, #24
 801bd0e:	6839      	ldr	r1, [r7, #0]
 801bd10:	4610      	mov	r0, r2
 801bd12:	4798      	blx	r3
 801bd14:	f107 0218 	add.w	r2, r7, #24
 801bd18:	f107 0310 	add.w	r3, r7, #16
 801bd1c:	4611      	mov	r1, r2
 801bd1e:	4618      	mov	r0, r3
 801bd20:	f7ff f812 	bl	801ad48 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801bd24:	f107 0318 	add.w	r3, r7, #24
 801bd28:	4618      	mov	r0, r3
 801bd2a:	f7f0 f8fa 	bl	800bf22 <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801bd2e:	f107 0310 	add.w	r3, r7, #16
 801bd32:	4618      	mov	r0, r3
 801bd34:	f7fe fdeb 	bl	801a90e <_ZNK21MockExpectedCallsList7isEmptyEv>
 801bd38:	4603      	mov	r3, r0
 801bd3a:	2b00      	cmp	r3, #0
 801bd3c:	d037      	beq.n	801bdae <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bd44:	f107 0320 	add.w	r3, r7, #32
 801bd48:	4978      	ldr	r1, [pc, #480]	; (801bf2c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801bd4a:	4618      	mov	r0, r3
 801bd4c:	f7ef fd31 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801bd50:	f107 0320 	add.w	r3, r7, #32
 801bd54:	4619      	mov	r1, r3
 801bd56:	4620      	mov	r0, r4
 801bd58:	f7ef fd97 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801bd5c:	f107 0320 	add.w	r3, r7, #32
 801bd60:	4618      	mov	r0, r3
 801bd62:	f7f0 f8de 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801bd66:	68fb      	ldr	r3, [r7, #12]
 801bd68:	332c      	adds	r3, #44	; 0x2c
 801bd6a:	6879      	ldr	r1, [r7, #4]
 801bd6c:	4618      	mov	r0, r3
 801bd6e:	f7f0 f955 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	332c      	adds	r3, #44	; 0x2c
 801bd76:	496e      	ldr	r1, [pc, #440]	; (801bf30 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801bd78:	4618      	mov	r0, r3
 801bd7a:	f7f0 f961 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801bd7e:	68fb      	ldr	r3, [r7, #12]
 801bd80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bd84:	683b      	ldr	r3, [r7, #0]
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	335c      	adds	r3, #92	; 0x5c
 801bd8a:	681b      	ldr	r3, [r3, #0]
 801bd8c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801bd90:	6839      	ldr	r1, [r7, #0]
 801bd92:	4610      	mov	r0, r2
 801bd94:	4798      	blx	r3
 801bd96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bd9a:	4619      	mov	r1, r3
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	f7f0 f93d 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bda2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801bda6:	4618      	mov	r0, r3
 801bda8:	f7f0 f8bb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801bdac:	e059      	b.n	801be62 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801bdae:	68fb      	ldr	r3, [r7, #12]
 801bdb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bdb4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bdb8:	495e      	ldr	r1, [pc, #376]	; (801bf34 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801bdba:	4618      	mov	r0, r3
 801bdbc:	f7ef fcf9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801bdc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bdc4:	4619      	mov	r1, r3
 801bdc6:	4620      	mov	r0, r4
 801bdc8:	f7ef fd5f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801bdcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7f0 f8a6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bddc:	683b      	ldr	r3, [r7, #0]
 801bdde:	681b      	ldr	r3, [r3, #0]
 801bde0:	3360      	adds	r3, #96	; 0x60
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801bde8:	6839      	ldr	r1, [r7, #0]
 801bdea:	4610      	mov	r0, r2
 801bdec:	4798      	blx	r3
 801bdee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bdf2:	4619      	mov	r1, r3
 801bdf4:	4620      	mov	r0, r4
 801bdf6:	f7f0 f911 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bdfa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801bdfe:	4618      	mov	r0, r3
 801be00:	f7f0 f88f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	332c      	adds	r3, #44	; 0x2c
 801be08:	494b      	ldr	r1, [pc, #300]	; (801bf38 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801be0a:	4618      	mov	r0, r3
 801be0c:	f7f0 f918 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801be16:	683b      	ldr	r3, [r7, #0]
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	335c      	adds	r3, #92	; 0x5c
 801be1c:	681b      	ldr	r3, [r3, #0]
 801be1e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801be22:	6839      	ldr	r1, [r7, #0]
 801be24:	4610      	mov	r0, r2
 801be26:	4798      	blx	r3
 801be28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be2c:	4619      	mov	r1, r3
 801be2e:	4620      	mov	r0, r4
 801be30:	f7f0 f8f4 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801be34:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801be38:	4618      	mov	r0, r3
 801be3a:	f7f0 f872 	bl	800bf22 <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801be3e:	68fb      	ldr	r3, [r7, #12]
 801be40:	332c      	adds	r3, #44	; 0x2c
 801be42:	493e      	ldr	r1, [pc, #248]	; (801bf3c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801be44:	4618      	mov	r0, r3
 801be46:	f7f0 f8fb 	bl	800c040 <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	332c      	adds	r3, #44	; 0x2c
 801be4e:	6879      	ldr	r1, [r7, #4]
 801be50:	4618      	mov	r0, r3
 801be52:	f7f0 f8e3 	bl	800c01c <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	332c      	adds	r3, #44	; 0x2c
 801be5a:	4939      	ldr	r1, [pc, #228]	; (801bf40 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801be5c:	4618      	mov	r0, r3
 801be5e:	f7f0 f8ef 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801be62:	68fb      	ldr	r3, [r7, #12]
 801be64:	332c      	adds	r3, #44	; 0x2c
 801be66:	4937      	ldr	r1, [pc, #220]	; (801bf44 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801be68:	4618      	mov	r0, r3
 801be6a:	f7f0 f8e9 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801be72:	6879      	ldr	r1, [r7, #4]
 801be74:	4618      	mov	r0, r3
 801be76:	f7ff fc47 	bl	801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	332c      	adds	r3, #44	; 0x2c
 801be7e:	4932      	ldr	r1, [pc, #200]	; (801bf48 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801be80:	4618      	mov	r0, r3
 801be82:	f7f0 f8dd 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	332c      	adds	r3, #44	; 0x2c
 801be8a:	6879      	ldr	r1, [r7, #4]
 801be8c:	4618      	mov	r0, r3
 801be8e:	f7f0 f8c5 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	332c      	adds	r3, #44	; 0x2c
 801be96:	492b      	ldr	r1, [pc, #172]	; (801bf44 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801be98:	4618      	mov	r0, r3
 801be9a:	f7f0 f8d1 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	332c      	adds	r3, #44	; 0x2c
 801bea2:	492a      	ldr	r1, [pc, #168]	; (801bf4c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7f0 f8cb 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801beb0:	683b      	ldr	r3, [r7, #0]
 801beb2:	681b      	ldr	r3, [r3, #0]
 801beb4:	3360      	adds	r3, #96	; 0x60
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801bebc:	6839      	ldr	r1, [r7, #0]
 801bebe:	4610      	mov	r0, r2
 801bec0:	4798      	blx	r3
 801bec2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bec6:	4619      	mov	r1, r3
 801bec8:	4620      	mov	r0, r4
 801beca:	f7f0 f8a7 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bece:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bed2:	4618      	mov	r0, r3
 801bed4:	f7f0 f825 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	332c      	adds	r3, #44	; 0x2c
 801bedc:	491c      	ldr	r1, [pc, #112]	; (801bf50 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801bede:	4618      	mov	r0, r3
 801bee0:	f7f0 f8ae 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801beea:	683b      	ldr	r3, [r7, #0]
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	335c      	adds	r3, #92	; 0x5c
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801bef6:	6839      	ldr	r1, [r7, #0]
 801bef8:	4610      	mov	r0, r2
 801befa:	4798      	blx	r3
 801befc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bf00:	4619      	mov	r1, r3
 801bf02:	4620      	mov	r0, r4
 801bf04:	f7f0 f88a 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801bf08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bf0c:	4618      	mov	r0, r3
 801bf0e:	f7f0 f808 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801bf12:	f107 0310 	add.w	r3, r7, #16
 801bf16:	4618      	mov	r0, r3
 801bf18:	f7fe fc8c 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 801bf1c:	68fb      	ldr	r3, [r7, #12]
 801bf1e:	4618      	mov	r0, r3
 801bf20:	375c      	adds	r7, #92	; 0x5c
 801bf22:	46bd      	mov	sp, r7
 801bf24:	bd90      	pop	{r4, r7, pc}
 801bf26:	bf00      	nop
 801bf28:	08026e38 	.word	0x08026e38
 801bf2c:	08024d40 	.word	0x08024d40
 801bf30:	08024cac 	.word	0x08024cac
 801bf34:	08024d80 	.word	0x08024d80
 801bf38:	08024dac 	.word	0x08024dac
 801bf3c:	08024ce8 	.word	0x08024ce8
 801bf40:	08024dc4 	.word	0x08024dc4
 801bf44:	08024b78 	.word	0x08024b78
 801bf48:	08024dc8 	.word	0x08024dc8
 801bf4c:	08024b0c 	.word	0x08024b0c
 801bf50:	08024d38 	.word	0x08024d38

0801bf54 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801bf54:	b590      	push	{r4, r7, lr}
 801bf56:	b08b      	sub	sp, #44	; 0x2c
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	60f8      	str	r0, [r7, #12]
 801bf5c:	60b9      	str	r1, [r7, #8]
 801bf5e:	607a      	str	r2, [r7, #4]
 801bf60:	603b      	str	r3, [r7, #0]
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	68b9      	ldr	r1, [r7, #8]
 801bf66:	4618      	mov	r0, r3
 801bf68:	f7ff fb46 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801bf6c:	4a30      	ldr	r2, [pc, #192]	; (801c030 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801bf6e:	68fb      	ldr	r3, [r7, #12]
 801bf70:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801bf72:	f107 0310 	add.w	r3, r7, #16
 801bf76:	4618      	mov	r0, r3
 801bf78:	f7fe fc48 	bl	801a80c <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801bf7c:	f107 0310 	add.w	r3, r7, #16
 801bf80:	683a      	ldr	r2, [r7, #0]
 801bf82:	6879      	ldr	r1, [r7, #4]
 801bf84:	4618      	mov	r0, r3
 801bf86:	f7fe fde7 	bl	801ab58 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801bf8a:	68fb      	ldr	r3, [r7, #12]
 801bf8c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bf90:	f107 0318 	add.w	r3, r7, #24
 801bf94:	4927      	ldr	r1, [pc, #156]	; (801c034 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801bf96:	4618      	mov	r0, r3
 801bf98:	f7ef fc0b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801bf9c:	f107 0318 	add.w	r3, r7, #24
 801bfa0:	4619      	mov	r1, r3
 801bfa2:	4620      	mov	r0, r4
 801bfa4:	f7ef fc71 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801bfa8:	f107 0318 	add.w	r3, r7, #24
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7ef ffb8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	332c      	adds	r3, #44	; 0x2c
 801bfb6:	6879      	ldr	r1, [r7, #4]
 801bfb8:	4618      	mov	r0, r3
 801bfba:	f7f0 f82f 	bl	800c01c <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	332c      	adds	r3, #44	; 0x2c
 801bfc2:	491d      	ldr	r1, [pc, #116]	; (801c038 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	f7f0 f83b 	bl	800c040 <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	683a      	ldr	r2, [r7, #0]
 801bfce:	6879      	ldr	r1, [r7, #4]
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	f7ff fb99 	bl	801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	332c      	adds	r3, #44	; 0x2c
 801bfda:	4918      	ldr	r1, [pc, #96]	; (801c03c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f7f0 f82f 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	332c      	adds	r3, #44	; 0x2c
 801bfe6:	4916      	ldr	r1, [pc, #88]	; (801c040 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801bfe8:	4618      	mov	r0, r3
 801bfea:	f7f0 f829 	bl	800c040 <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801bfee:	68fb      	ldr	r3, [r7, #12]
 801bff0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801bff4:	f107 0320 	add.w	r3, r7, #32
 801bff8:	f107 0210 	add.w	r2, r7, #16
 801bffc:	4611      	mov	r1, r2
 801bffe:	4618      	mov	r0, r3
 801c000:	f7ff f9bc 	bl	801b37c <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801c004:	f107 0320 	add.w	r3, r7, #32
 801c008:	4619      	mov	r1, r3
 801c00a:	4620      	mov	r0, r4
 801c00c:	f7f0 f806 	bl	800c01c <_ZN12SimpleStringpLERKS_>
 801c010:	f107 0320 	add.w	r3, r7, #32
 801c014:	4618      	mov	r0, r3
 801c016:	f7ef ff84 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801c01a:	f107 0310 	add.w	r3, r7, #16
 801c01e:	4618      	mov	r0, r3
 801c020:	f7fe fc08 	bl	801a834 <_ZN21MockExpectedCallsListD1Ev>
}
 801c024:	68fb      	ldr	r3, [r7, #12]
 801c026:	4618      	mov	r0, r3
 801c028:	372c      	adds	r7, #44	; 0x2c
 801c02a:	46bd      	mov	sp, r7
 801c02c:	bd90      	pop	{r4, r7, pc}
 801c02e:	bf00      	nop
 801c030:	08026e0c 	.word	0x08026e0c
 801c034:	08024e04 	.word	0x08024e04
 801c038:	08024e34 	.word	0x08024e34
 801c03c:	08024e48 	.word	0x08024e48
 801c040:	08024b0c 	.word	0x08024b0c

0801c044 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801c044:	b590      	push	{r4, r7, lr}
 801c046:	b087      	sub	sp, #28
 801c048:	af00      	add	r7, sp, #0
 801c04a:	60f8      	str	r0, [r7, #12]
 801c04c:	60b9      	str	r1, [r7, #8]
 801c04e:	607a      	str	r2, [r7, #4]
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	68b9      	ldr	r1, [r7, #8]
 801c054:	4618      	mov	r0, r3
 801c056:	f7ff facf 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801c05a:	4a10      	ldr	r2, [pc, #64]	; (801c09c <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801c060:	68fb      	ldr	r3, [r7, #12]
 801c062:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	f7ef ff2e 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c06c:	4602      	mov	r2, r0
 801c06e:	f107 0310 	add.w	r3, r7, #16
 801c072:	490b      	ldr	r1, [pc, #44]	; (801c0a0 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801c074:	4618      	mov	r0, r3
 801c076:	f7f0 fc5b 	bl	800c930 <_Z16StringFromFormatPKcz>
 801c07a:	f107 0310 	add.w	r3, r7, #16
 801c07e:	4619      	mov	r1, r3
 801c080:	4620      	mov	r0, r4
 801c082:	f7ef fc02 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c086:	f107 0310 	add.w	r3, r7, #16
 801c08a:	4618      	mov	r0, r3
 801c08c:	f7ef ff49 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801c090:	68fb      	ldr	r3, [r7, #12]
 801c092:	4618      	mov	r0, r3
 801c094:	371c      	adds	r7, #28
 801c096:	46bd      	mov	sp, r7
 801c098:	bd90      	pop	{r4, r7, pc}
 801c09a:	bf00      	nop
 801c09c:	08026de0 	.word	0x08026de0
 801c0a0:	08024e74 	.word	0x08024e74

0801c0a4 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801c0a4:	b590      	push	{r4, r7, lr}
 801c0a6:	b087      	sub	sp, #28
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	60f8      	str	r0, [r7, #12]
 801c0ac:	60b9      	str	r1, [r7, #8]
 801c0ae:	607a      	str	r2, [r7, #4]
 801c0b0:	68fb      	ldr	r3, [r7, #12]
 801c0b2:	68b9      	ldr	r1, [r7, #8]
 801c0b4:	4618      	mov	r0, r3
 801c0b6:	f7ff fa9f 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801c0ba:	4a10      	ldr	r2, [pc, #64]	; (801c0fc <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c0c6:	6878      	ldr	r0, [r7, #4]
 801c0c8:	f7ef fefe 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c0cc:	4602      	mov	r2, r0
 801c0ce:	f107 0310 	add.w	r3, r7, #16
 801c0d2:	490b      	ldr	r1, [pc, #44]	; (801c100 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f7f0 fc2b 	bl	800c930 <_Z16StringFromFormatPKcz>
 801c0da:	f107 0310 	add.w	r3, r7, #16
 801c0de:	4619      	mov	r1, r3
 801c0e0:	4620      	mov	r0, r4
 801c0e2:	f7ef fbd2 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c0e6:	f107 0310 	add.w	r3, r7, #16
 801c0ea:	4618      	mov	r0, r3
 801c0ec:	f7ef ff19 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	4618      	mov	r0, r3
 801c0f4:	371c      	adds	r7, #28
 801c0f6:	46bd      	mov	sp, r7
 801c0f8:	bd90      	pop	{r4, r7, pc}
 801c0fa:	bf00      	nop
 801c0fc:	08026db4 	.word	0x08026db4
 801c100:	08024ecc 	.word	0x08024ecc

0801c104 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c104:	b590      	push	{r4, r7, lr}
 801c106:	b087      	sub	sp, #28
 801c108:	af00      	add	r7, sp, #0
 801c10a:	60f8      	str	r0, [r7, #12]
 801c10c:	60b9      	str	r1, [r7, #8]
 801c10e:	607a      	str	r2, [r7, #4]
 801c110:	603b      	str	r3, [r7, #0]
 801c112:	68fb      	ldr	r3, [r7, #12]
 801c114:	68b9      	ldr	r1, [r7, #8]
 801c116:	4618      	mov	r0, r3
 801c118:	f7ff fa6e 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801c11c:	4a12      	ldr	r2, [pc, #72]	; (801c168 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801c122:	68fb      	ldr	r3, [r7, #12]
 801c124:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801c128:	6878      	ldr	r0, [r7, #4]
 801c12a:	f7ef fecd 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c12e:	4602      	mov	r2, r0
 801c130:	f107 0010 	add.w	r0, r7, #16
 801c134:	683b      	ldr	r3, [r7, #0]
 801c136:	490d      	ldr	r1, [pc, #52]	; (801c16c <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801c138:	f7f0 fbfa 	bl	800c930 <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801c13c:	f107 0310 	add.w	r3, r7, #16
 801c140:	4619      	mov	r1, r3
 801c142:	4620      	mov	r0, r4
 801c144:	f7ef fba1 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c148:	f107 0310 	add.w	r3, r7, #16
 801c14c:	4618      	mov	r0, r3
 801c14e:	f7ef fee8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801c152:	68fb      	ldr	r3, [r7, #12]
 801c154:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c156:	6879      	ldr	r1, [r7, #4]
 801c158:	4618      	mov	r0, r3
 801c15a:	f7ff fad5 	bl	801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801c15e:	68fb      	ldr	r3, [r7, #12]
 801c160:	4618      	mov	r0, r3
 801c162:	371c      	adds	r7, #28
 801c164:	46bd      	mov	sp, r7
 801c166:	bd90      	pop	{r4, r7, pc}
 801c168:	08026d88 	.word	0x08026d88
 801c16c:	08024f1c 	.word	0x08024f1c

0801c170 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801c170:	b590      	push	{r4, r7, lr}
 801c172:	b087      	sub	sp, #28
 801c174:	af00      	add	r7, sp, #0
 801c176:	60f8      	str	r0, [r7, #12]
 801c178:	60b9      	str	r1, [r7, #8]
 801c17a:	607a      	str	r2, [r7, #4]
 801c17c:	603b      	str	r3, [r7, #0]
 801c17e:	68fb      	ldr	r3, [r7, #12]
 801c180:	68b9      	ldr	r1, [r7, #8]
 801c182:	4618      	mov	r0, r3
 801c184:	f7ff fa38 	bl	801b5f8 <_ZN11MockFailureC1EP10UtestShell>
 801c188:	4a12      	ldr	r2, [pc, #72]	; (801c1d4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801c18e:	68fb      	ldr	r3, [r7, #12]
 801c190:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f7ef fe97 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c19a:	4602      	mov	r2, r0
 801c19c:	f107 0310 	add.w	r3, r7, #16
 801c1a0:	490d      	ldr	r1, [pc, #52]	; (801c1d8 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801c1a2:	4618      	mov	r0, r3
 801c1a4:	f7f0 fbc4 	bl	800c930 <_Z16StringFromFormatPKcz>
 801c1a8:	f107 0310 	add.w	r3, r7, #16
 801c1ac:	4619      	mov	r1, r3
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	f7ef fb6b 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c1b4:	f107 0310 	add.w	r3, r7, #16
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7ef feb2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801c1be:	68fb      	ldr	r3, [r7, #12]
 801c1c0:	683a      	ldr	r2, [r7, #0]
 801c1c2:	6879      	ldr	r1, [r7, #4]
 801c1c4:	4618      	mov	r0, r3
 801c1c6:	f7ff fa9f 	bl	801b708 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	4618      	mov	r0, r3
 801c1ce:	371c      	adds	r7, #28
 801c1d0:	46bd      	mov	sp, r7
 801c1d2:	bd90      	pop	{r4, r7, pc}
 801c1d4:	08026d5c 	.word	0x08026d5c
 801c1d8:	08024f80 	.word	0x08024f80

0801c1dc <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801c1dc:	b480      	push	{r7}
 801c1de:	b083      	sub	sp, #12
 801c1e0:	af00      	add	r7, sp, #0
 801c1e2:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801c1e4:	4a04      	ldr	r2, [pc, #16]	; (801c1f8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	6013      	str	r3, [r2, #0]
}
 801c1ea:	bf00      	nop
 801c1ec:	370c      	adds	r7, #12
 801c1ee:	46bd      	mov	sp, r7
 801c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1f4:	4770      	bx	lr
 801c1f6:	bf00      	nop
 801c1f8:	20000dc8 	.word	0x20000dc8

0801c1fc <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b082      	sub	sp, #8
 801c200:	af00      	add	r7, sp, #0
 801c202:	6078      	str	r0, [r7, #4]
 801c204:	6039      	str	r1, [r7, #0]
 801c206:	4a10      	ldr	r2, [pc, #64]	; (801c248 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	601a      	str	r2, [r3, #0]
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	3304      	adds	r3, #4
 801c210:	6839      	ldr	r1, [r7, #0]
 801c212:	4618      	mov	r0, r3
 801c214:	f7ef fb21 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	330c      	adds	r3, #12
 801c21c:	490b      	ldr	r1, [pc, #44]	; (801c24c <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801c21e:	4618      	mov	r0, r3
 801c220:	f7ef fac7 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c224:	687b      	ldr	r3, [r7, #4]
 801c226:	2200      	movs	r2, #0
 801c228:	629a      	str	r2, [r3, #40]	; 0x28
 801c22a:	687b      	ldr	r3, [r7, #4]
 801c22c:	2200      	movs	r2, #0
 801c22e:	62da      	str	r2, [r3, #44]	; 0x2c
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	2200      	movs	r2, #0
 801c234:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801c236:	687b      	ldr	r3, [r7, #4]
 801c238:	2200      	movs	r2, #0
 801c23a:	619a      	str	r2, [r3, #24]
}
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	4618      	mov	r0, r3
 801c240:	3708      	adds	r7, #8
 801c242:	46bd      	mov	sp, r7
 801c244:	bd80      	pop	{r7, pc}
 801c246:	bf00      	nop
 801c248:	080275e4 	.word	0x080275e4
 801c24c:	08024fd0 	.word	0x08024fd0

0801c250 <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801c250:	b580      	push	{r7, lr}
 801c252:	b082      	sub	sp, #8
 801c254:	af00      	add	r7, sp, #0
 801c256:	6078      	str	r0, [r7, #4]
 801c258:	4a08      	ldr	r2, [pc, #32]	; (801c27c <_ZN14MockNamedValueD1Ev+0x2c>)
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	601a      	str	r2, [r3, #0]
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	330c      	adds	r3, #12
 801c262:	4618      	mov	r0, r3
 801c264:	f7ef fe5d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	3304      	adds	r3, #4
 801c26c:	4618      	mov	r0, r3
 801c26e:	f7ef fe58 	bl	800bf22 <_ZN12SimpleStringD1Ev>
{
}
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	4618      	mov	r0, r3
 801c276:	3708      	adds	r7, #8
 801c278:	46bd      	mov	sp, r7
 801c27a:	bd80      	pop	{r7, pc}
 801c27c:	080275e4 	.word	0x080275e4

0801c280 <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801c280:	b580      	push	{r7, lr}
 801c282:	b082      	sub	sp, #8
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
}
 801c288:	6878      	ldr	r0, [r7, #4]
 801c28a:	f7ff ffe1 	bl	801c250 <_ZN14MockNamedValueD1Ev>
 801c28e:	2138      	movs	r1, #56	; 0x38
 801c290:	6878      	ldr	r0, [r7, #4]
 801c292:	f7ec fedf 	bl	8009054 <_ZdlPvj>
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	4618      	mov	r0, r3
 801c29a:	3708      	adds	r7, #8
 801c29c:	46bd      	mov	sp, r7
 801c29e:	bd80      	pop	{r7, pc}

0801c2a0 <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801c2a0:	b590      	push	{r4, r7, lr}
 801c2a2:	b085      	sub	sp, #20
 801c2a4:	af00      	add	r7, sp, #0
 801c2a6:	6078      	str	r0, [r7, #4]
 801c2a8:	460b      	mov	r3, r1
 801c2aa:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	f103 040c 	add.w	r4, r3, #12
 801c2b2:	f107 0308 	add.w	r3, r7, #8
 801c2b6:	490b      	ldr	r1, [pc, #44]	; (801c2e4 <_ZN14MockNamedValue8setValueEb+0x44>)
 801c2b8:	4618      	mov	r0, r3
 801c2ba:	f7ef fa7a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c2be:	f107 0308 	add.w	r3, r7, #8
 801c2c2:	4619      	mov	r1, r3
 801c2c4:	4620      	mov	r0, r4
 801c2c6:	f7ef fae0 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c2ca:	f107 0308 	add.w	r3, r7, #8
 801c2ce:	4618      	mov	r0, r3
 801c2d0:	f7ef fe27 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	78fa      	ldrb	r2, [r7, #3]
 801c2d8:	761a      	strb	r2, [r3, #24]
}
 801c2da:	bf00      	nop
 801c2dc:	3714      	adds	r7, #20
 801c2de:	46bd      	mov	sp, r7
 801c2e0:	bd90      	pop	{r4, r7, pc}
 801c2e2:	bf00      	nop
 801c2e4:	08024fd4 	.word	0x08024fd4

0801c2e8 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801c2e8:	b590      	push	{r4, r7, lr}
 801c2ea:	b085      	sub	sp, #20
 801c2ec:	af00      	add	r7, sp, #0
 801c2ee:	6078      	str	r0, [r7, #4]
 801c2f0:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801c2f2:	687b      	ldr	r3, [r7, #4]
 801c2f4:	f103 040c 	add.w	r4, r3, #12
 801c2f8:	f107 0308 	add.w	r3, r7, #8
 801c2fc:	490a      	ldr	r1, [pc, #40]	; (801c328 <_ZN14MockNamedValue8setValueEj+0x40>)
 801c2fe:	4618      	mov	r0, r3
 801c300:	f7ef fa57 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c304:	f107 0308 	add.w	r3, r7, #8
 801c308:	4619      	mov	r1, r3
 801c30a:	4620      	mov	r0, r4
 801c30c:	f7ef fabd 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c310:	f107 0308 	add.w	r3, r7, #8
 801c314:	4618      	mov	r0, r3
 801c316:	f7ef fe04 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	683a      	ldr	r2, [r7, #0]
 801c31e:	619a      	str	r2, [r3, #24]
}
 801c320:	bf00      	nop
 801c322:	3714      	adds	r7, #20
 801c324:	46bd      	mov	sp, r7
 801c326:	bd90      	pop	{r4, r7, pc}
 801c328:	08024fdc 	.word	0x08024fdc

0801c32c <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801c32c:	b590      	push	{r4, r7, lr}
 801c32e:	b085      	sub	sp, #20
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
 801c334:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	f103 040c 	add.w	r4, r3, #12
 801c33c:	f107 0308 	add.w	r3, r7, #8
 801c340:	490a      	ldr	r1, [pc, #40]	; (801c36c <_ZN14MockNamedValue8setValueEi+0x40>)
 801c342:	4618      	mov	r0, r3
 801c344:	f7ef fa35 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c348:	f107 0308 	add.w	r3, r7, #8
 801c34c:	4619      	mov	r1, r3
 801c34e:	4620      	mov	r0, r4
 801c350:	f7ef fa9b 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c354:	f107 0308 	add.w	r3, r7, #8
 801c358:	4618      	mov	r0, r3
 801c35a:	f7ef fde2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801c35e:	687b      	ldr	r3, [r7, #4]
 801c360:	683a      	ldr	r2, [r7, #0]
 801c362:	619a      	str	r2, [r3, #24]
}
 801c364:	bf00      	nop
 801c366:	3714      	adds	r7, #20
 801c368:	46bd      	mov	sp, r7
 801c36a:	bd90      	pop	{r4, r7, pc}
 801c36c:	08024fd0 	.word	0x08024fd0

0801c370 <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801c370:	b590      	push	{r4, r7, lr}
 801c372:	b085      	sub	sp, #20
 801c374:	af00      	add	r7, sp, #0
 801c376:	6078      	str	r0, [r7, #4]
 801c378:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801c37a:	687b      	ldr	r3, [r7, #4]
 801c37c:	f103 040c 	add.w	r4, r3, #12
 801c380:	f107 0308 	add.w	r3, r7, #8
 801c384:	490a      	ldr	r1, [pc, #40]	; (801c3b0 <_ZN14MockNamedValue8setValueEl+0x40>)
 801c386:	4618      	mov	r0, r3
 801c388:	f7ef fa13 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c38c:	f107 0308 	add.w	r3, r7, #8
 801c390:	4619      	mov	r1, r3
 801c392:	4620      	mov	r0, r4
 801c394:	f7ef fa79 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c398:	f107 0308 	add.w	r3, r7, #8
 801c39c:	4618      	mov	r0, r3
 801c39e:	f7ef fdc0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	683a      	ldr	r2, [r7, #0]
 801c3a6:	619a      	str	r2, [r3, #24]
}
 801c3a8:	bf00      	nop
 801c3aa:	3714      	adds	r7, #20
 801c3ac:	46bd      	mov	sp, r7
 801c3ae:	bd90      	pop	{r4, r7, pc}
 801c3b0:	08024fec 	.word	0x08024fec

0801c3b4 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801c3b4:	b590      	push	{r4, r7, lr}
 801c3b6:	b085      	sub	sp, #20
 801c3b8:	af00      	add	r7, sp, #0
 801c3ba:	6078      	str	r0, [r7, #4]
 801c3bc:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	f103 040c 	add.w	r4, r3, #12
 801c3c4:	f107 0308 	add.w	r3, r7, #8
 801c3c8:	490a      	ldr	r1, [pc, #40]	; (801c3f4 <_ZN14MockNamedValue8setValueEm+0x40>)
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	f7ef f9f1 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c3d0:	f107 0308 	add.w	r3, r7, #8
 801c3d4:	4619      	mov	r1, r3
 801c3d6:	4620      	mov	r0, r4
 801c3d8:	f7ef fa57 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c3dc:	f107 0308 	add.w	r3, r7, #8
 801c3e0:	4618      	mov	r0, r3
 801c3e2:	f7ef fd9e 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	683a      	ldr	r2, [r7, #0]
 801c3ea:	619a      	str	r2, [r3, #24]
}
 801c3ec:	bf00      	nop
 801c3ee:	3714      	adds	r7, #20
 801c3f0:	46bd      	mov	sp, r7
 801c3f2:	bd90      	pop	{r4, r7, pc}
 801c3f4:	08024ff8 	.word	0x08024ff8

0801c3f8 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801c3f8:	b5b0      	push	{r4, r5, r7, lr}
 801c3fa:	b086      	sub	sp, #24
 801c3fc:	af02      	add	r7, sp, #8
 801c3fe:	60f8      	str	r0, [r7, #12]
 801c400:	1d3b      	adds	r3, r7, #4
 801c402:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801c406:	f7f6 fdb7 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c40a:	4604      	mov	r4, r0
 801c40c:	6823      	ldr	r3, [r4, #0]
 801c40e:	3368      	adds	r3, #104	; 0x68
 801c410:	681d      	ldr	r5, [r3, #0]
 801c412:	f7f6 fdc1 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c416:	4603      	mov	r3, r0
 801c418:	9300      	str	r3, [sp, #0]
 801c41a:	2367      	movs	r3, #103	; 0x67
 801c41c:	4a03      	ldr	r2, [pc, #12]	; (801c42c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801c41e:	4904      	ldr	r1, [pc, #16]	; (801c430 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801c420:	4620      	mov	r0, r4
 801c422:	47a8      	blx	r5
}
 801c424:	bf00      	nop
 801c426:	3710      	adds	r7, #16
 801c428:	46bd      	mov	sp, r7
 801c42a:	bdb0      	pop	{r4, r5, r7, pc}
 801c42c:	0802500c 	.word	0x0802500c
 801c430:	08025028 	.word	0x08025028

0801c434 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801c434:	b5b0      	push	{r4, r5, r7, lr}
 801c436:	b086      	sub	sp, #24
 801c438:	af02      	add	r7, sp, #8
 801c43a:	60f8      	str	r0, [r7, #12]
 801c43c:	1d3b      	adds	r3, r7, #4
 801c43e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801c442:	f7f6 fd99 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c446:	4604      	mov	r4, r0
 801c448:	6823      	ldr	r3, [r4, #0]
 801c44a:	3368      	adds	r3, #104	; 0x68
 801c44c:	681d      	ldr	r5, [r3, #0]
 801c44e:	f7f6 fda3 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c452:	4603      	mov	r3, r0
 801c454:	9300      	str	r3, [sp, #0]
 801c456:	236c      	movs	r3, #108	; 0x6c
 801c458:	4a03      	ldr	r2, [pc, #12]	; (801c468 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801c45a:	4904      	ldr	r1, [pc, #16]	; (801c46c <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801c45c:	4620      	mov	r0, r4
 801c45e:	47a8      	blx	r5
}
 801c460:	bf00      	nop
 801c462:	3710      	adds	r7, #16
 801c464:	46bd      	mov	sp, r7
 801c466:	bdb0      	pop	{r4, r5, r7, pc}
 801c468:	0802500c 	.word	0x0802500c
 801c46c:	08025048 	.word	0x08025048

0801c470 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b084      	sub	sp, #16
 801c474:	af00      	add	r7, sp, #0
 801c476:	60f8      	str	r0, [r7, #12]
 801c478:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	681b      	ldr	r3, [r3, #0]
 801c480:	3328      	adds	r3, #40	; 0x28
 801c482:	681b      	ldr	r3, [r3, #0]
 801c484:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801c498 <_ZN14MockNamedValue8setValueEd+0x28>
 801c488:	ed97 0b00 	vldr	d0, [r7]
 801c48c:	68f8      	ldr	r0, [r7, #12]
 801c48e:	4798      	blx	r3
}
 801c490:	bf00      	nop
 801c492:	3710      	adds	r7, #16
 801c494:	46bd      	mov	sp, r7
 801c496:	bd80      	pop	{r7, pc}
 801c498:	47ae147b 	.word	0x47ae147b
 801c49c:	3f747ae1 	.word	0x3f747ae1

0801c4a0 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801c4a0:	b590      	push	{r4, r7, lr}
 801c4a2:	b089      	sub	sp, #36	; 0x24
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6178      	str	r0, [r7, #20]
 801c4a8:	ed87 0b02 	vstr	d0, [r7, #8]
 801c4ac:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801c4b0:	697b      	ldr	r3, [r7, #20]
 801c4b2:	f103 040c 	add.w	r4, r3, #12
 801c4b6:	f107 0318 	add.w	r3, r7, #24
 801c4ba:	490e      	ldr	r1, [pc, #56]	; (801c4f4 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801c4bc:	4618      	mov	r0, r3
 801c4be:	f7ef f978 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c4c2:	f107 0318 	add.w	r3, r7, #24
 801c4c6:	4619      	mov	r1, r3
 801c4c8:	4620      	mov	r0, r4
 801c4ca:	f7ef f9de 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c4ce:	f107 0318 	add.w	r3, r7, #24
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7ef fd25 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801c4d8:	6979      	ldr	r1, [r7, #20]
 801c4da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c4de:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801c4e2:	6979      	ldr	r1, [r7, #20]
 801c4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c4e8:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801c4ec:	bf00      	nop
 801c4ee:	3724      	adds	r7, #36	; 0x24
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bd90      	pop	{r4, r7, pc}
 801c4f4:	08025074 	.word	0x08025074

0801c4f8 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801c4f8:	b590      	push	{r4, r7, lr}
 801c4fa:	b085      	sub	sp, #20
 801c4fc:	af00      	add	r7, sp, #0
 801c4fe:	6078      	str	r0, [r7, #4]
 801c500:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	f103 040c 	add.w	r4, r3, #12
 801c508:	f107 0308 	add.w	r3, r7, #8
 801c50c:	490a      	ldr	r1, [pc, #40]	; (801c538 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801c50e:	4618      	mov	r0, r3
 801c510:	f7ef f94f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c514:	f107 0308 	add.w	r3, r7, #8
 801c518:	4619      	mov	r1, r3
 801c51a:	4620      	mov	r0, r4
 801c51c:	f7ef f9b5 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c520:	f107 0308 	add.w	r3, r7, #8
 801c524:	4618      	mov	r0, r3
 801c526:	f7ef fcfc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801c52a:	687b      	ldr	r3, [r7, #4]
 801c52c:	683a      	ldr	r2, [r7, #0]
 801c52e:	619a      	str	r2, [r3, #24]
}
 801c530:	bf00      	nop
 801c532:	3714      	adds	r7, #20
 801c534:	46bd      	mov	sp, r7
 801c536:	bd90      	pop	{r4, r7, pc}
 801c538:	0802507c 	.word	0x0802507c

0801c53c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801c53c:	b590      	push	{r4, r7, lr}
 801c53e:	b085      	sub	sp, #20
 801c540:	af00      	add	r7, sp, #0
 801c542:	6078      	str	r0, [r7, #4]
 801c544:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	f103 040c 	add.w	r4, r3, #12
 801c54c:	f107 0308 	add.w	r3, r7, #8
 801c550:	490a      	ldr	r1, [pc, #40]	; (801c57c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801c552:	4618      	mov	r0, r3
 801c554:	f7ef f92d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c558:	f107 0308 	add.w	r3, r7, #8
 801c55c:	4619      	mov	r1, r3
 801c55e:	4620      	mov	r0, r4
 801c560:	f7ef f993 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c564:	f107 0308 	add.w	r3, r7, #8
 801c568:	4618      	mov	r0, r3
 801c56a:	f7ef fcda 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	683a      	ldr	r2, [r7, #0]
 801c572:	619a      	str	r2, [r3, #24]
}
 801c574:	bf00      	nop
 801c576:	3714      	adds	r7, #20
 801c578:	46bd      	mov	sp, r7
 801c57a:	bd90      	pop	{r4, r7, pc}
 801c57c:	08025084 	.word	0x08025084

0801c580 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801c580:	b590      	push	{r4, r7, lr}
 801c582:	b085      	sub	sp, #20
 801c584:	af00      	add	r7, sp, #0
 801c586:	6078      	str	r0, [r7, #4]
 801c588:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	f103 040c 	add.w	r4, r3, #12
 801c590:	f107 0308 	add.w	r3, r7, #8
 801c594:	490a      	ldr	r1, [pc, #40]	; (801c5c0 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801c596:	4618      	mov	r0, r3
 801c598:	f7ef f90b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c59c:	f107 0308 	add.w	r3, r7, #8
 801c5a0:	4619      	mov	r1, r3
 801c5a2:	4620      	mov	r0, r4
 801c5a4:	f7ef f971 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c5a8:	f107 0308 	add.w	r3, r7, #8
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7ef fcb8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	683a      	ldr	r2, [r7, #0]
 801c5b6:	619a      	str	r2, [r3, #24]
}
 801c5b8:	bf00      	nop
 801c5ba:	3714      	adds	r7, #20
 801c5bc:	46bd      	mov	sp, r7
 801c5be:	bd90      	pop	{r4, r7, pc}
 801c5c0:	08025090 	.word	0x08025090

0801c5c4 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801c5c4:	b590      	push	{r4, r7, lr}
 801c5c6:	b085      	sub	sp, #20
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	6078      	str	r0, [r7, #4]
 801c5cc:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	f103 040c 	add.w	r4, r3, #12
 801c5d4:	f107 0308 	add.w	r3, r7, #8
 801c5d8:	490a      	ldr	r1, [pc, #40]	; (801c604 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801c5da:	4618      	mov	r0, r3
 801c5dc:	f7ef f8e9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c5e0:	f107 0308 	add.w	r3, r7, #8
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	4620      	mov	r0, r4
 801c5e8:	f7ef f94f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c5ec:	f107 0308 	add.w	r3, r7, #8
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ef fc96 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	683a      	ldr	r2, [r7, #0]
 801c5fa:	619a      	str	r2, [r3, #24]
}
 801c5fc:	bf00      	nop
 801c5fe:	3714      	adds	r7, #20
 801c600:	46bd      	mov	sp, r7
 801c602:	bd90      	pop	{r4, r7, pc}
 801c604:	0802509c 	.word	0x0802509c

0801c608 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801c608:	b590      	push	{r4, r7, lr}
 801c60a:	b087      	sub	sp, #28
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	60f8      	str	r0, [r7, #12]
 801c610:	60b9      	str	r1, [r7, #8]
 801c612:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	f103 040c 	add.w	r4, r3, #12
 801c61a:	f107 0310 	add.w	r3, r7, #16
 801c61e:	490c      	ldr	r1, [pc, #48]	; (801c650 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801c620:	4618      	mov	r0, r3
 801c622:	f7ef f8c6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c626:	f107 0310 	add.w	r3, r7, #16
 801c62a:	4619      	mov	r1, r3
 801c62c:	4620      	mov	r0, r4
 801c62e:	f7ef f92c 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c632:	f107 0310 	add.w	r3, r7, #16
 801c636:	4618      	mov	r0, r3
 801c638:	f7ef fc73 	bl	800bf22 <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801c63c:	68fb      	ldr	r3, [r7, #12]
 801c63e:	68ba      	ldr	r2, [r7, #8]
 801c640:	619a      	str	r2, [r3, #24]
    size_ = size;
 801c642:	68fb      	ldr	r3, [r7, #12]
 801c644:	687a      	ldr	r2, [r7, #4]
 801c646:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c648:	bf00      	nop
 801c64a:	371c      	adds	r7, #28
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd90      	pop	{r4, r7, pc}
 801c650:	080250a8 	.word	0x080250a8

0801c654 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801c654:	b580      	push	{r7, lr}
 801c656:	b084      	sub	sp, #16
 801c658:	af00      	add	r7, sp, #0
 801c65a:	60f8      	str	r0, [r7, #12]
 801c65c:	60b9      	str	r1, [r7, #8]
 801c65e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	330c      	adds	r3, #12
 801c664:	68b9      	ldr	r1, [r7, #8]
 801c666:	4618      	mov	r0, r3
 801c668:	f7ef f90f 	bl	800b88a <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	687a      	ldr	r2, [r7, #4]
 801c670:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c672:	4b11      	ldr	r3, [pc, #68]	; (801c6b8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c674:	681b      	ldr	r3, [r3, #0]
 801c676:	2b00      	cmp	r3, #0
 801c678:	d019      	beq.n	801c6ae <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c67a:	4b0f      	ldr	r3, [pc, #60]	; (801c6b8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c67c:	681a      	ldr	r2, [r3, #0]
 801c67e:	4b0e      	ldr	r3, [pc, #56]	; (801c6b8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c680:	681b      	ldr	r3, [r3, #0]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	3314      	adds	r3, #20
 801c686:	681b      	ldr	r3, [r3, #0]
 801c688:	68b9      	ldr	r1, [r7, #8]
 801c68a:	4610      	mov	r0, r2
 801c68c:	4798      	blx	r3
 801c68e:	4602      	mov	r2, r0
 801c690:	68fb      	ldr	r3, [r7, #12]
 801c692:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c694:	4b08      	ldr	r3, [pc, #32]	; (801c6b8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c696:	681a      	ldr	r2, [r3, #0]
 801c698:	4b07      	ldr	r3, [pc, #28]	; (801c6b8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	681b      	ldr	r3, [r3, #0]
 801c69e:	3318      	adds	r3, #24
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	68b9      	ldr	r1, [r7, #8]
 801c6a4:	4610      	mov	r0, r2
 801c6a6:	4798      	blx	r3
 801c6a8:	4602      	mov	r2, r0
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c6ae:	bf00      	nop
 801c6b0:	3710      	adds	r7, #16
 801c6b2:	46bd      	mov	sp, r7
 801c6b4:	bd80      	pop	{r7, pc}
 801c6b6:	bf00      	nop
 801c6b8:	20000dc8 	.word	0x20000dc8

0801c6bc <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801c6bc:	b580      	push	{r7, lr}
 801c6be:	b084      	sub	sp, #16
 801c6c0:	af00      	add	r7, sp, #0
 801c6c2:	60f8      	str	r0, [r7, #12]
 801c6c4:	60b9      	str	r1, [r7, #8]
 801c6c6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801c6c8:	68fb      	ldr	r3, [r7, #12]
 801c6ca:	330c      	adds	r3, #12
 801c6cc:	68b9      	ldr	r1, [r7, #8]
 801c6ce:	4618      	mov	r0, r3
 801c6d0:	f7ef f8db 	bl	800b88a <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801c6d4:	68fb      	ldr	r3, [r7, #12]
 801c6d6:	687a      	ldr	r2, [r7, #4]
 801c6d8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801c6da:	4b11      	ldr	r3, [pc, #68]	; (801c720 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c6dc:	681b      	ldr	r3, [r3, #0]
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d019      	beq.n	801c716 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801c6e2:	4b0f      	ldr	r3, [pc, #60]	; (801c720 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c6e4:	681a      	ldr	r2, [r3, #0]
 801c6e6:	4b0e      	ldr	r3, [pc, #56]	; (801c720 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	681b      	ldr	r3, [r3, #0]
 801c6ec:	3314      	adds	r3, #20
 801c6ee:	681b      	ldr	r3, [r3, #0]
 801c6f0:	68b9      	ldr	r1, [r7, #8]
 801c6f2:	4610      	mov	r0, r2
 801c6f4:	4798      	blx	r3
 801c6f6:	4602      	mov	r2, r0
 801c6f8:	68fb      	ldr	r3, [r7, #12]
 801c6fa:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801c6fc:	4b08      	ldr	r3, [pc, #32]	; (801c720 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c6fe:	681a      	ldr	r2, [r3, #0]
 801c700:	4b07      	ldr	r3, [pc, #28]	; (801c720 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801c702:	681b      	ldr	r3, [r3, #0]
 801c704:	681b      	ldr	r3, [r3, #0]
 801c706:	3318      	adds	r3, #24
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	68b9      	ldr	r1, [r7, #8]
 801c70c:	4610      	mov	r0, r2
 801c70e:	4798      	blx	r3
 801c710:	4602      	mov	r2, r0
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801c716:	bf00      	nop
 801c718:	3710      	adds	r7, #16
 801c71a:	46bd      	mov	sp, r7
 801c71c:	bd80      	pop	{r7, pc}
 801c71e:	bf00      	nop
 801c720:	20000dc8 	.word	0x20000dc8

0801c724 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801c724:	b480      	push	{r7}
 801c726:	b083      	sub	sp, #12
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	683a      	ldr	r2, [r7, #0]
 801c732:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c734:	bf00      	nop
 801c736:	370c      	adds	r7, #12
 801c738:	46bd      	mov	sp, r7
 801c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c73e:	4770      	bx	lr

0801c740 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801c740:	b590      	push	{r4, r7, lr}
 801c742:	b085      	sub	sp, #20
 801c744:	af00      	add	r7, sp, #0
 801c746:	6078      	str	r0, [r7, #4]
 801c748:	6039      	str	r1, [r7, #0]
    name_ = name;
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	1d1c      	adds	r4, r3, #4
 801c74e:	f107 0308 	add.w	r3, r7, #8
 801c752:	6839      	ldr	r1, [r7, #0]
 801c754:	4618      	mov	r0, r3
 801c756:	f7ef f82c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c75a:	f107 0308 	add.w	r3, r7, #8
 801c75e:	4619      	mov	r1, r3
 801c760:	4620      	mov	r0, r4
 801c762:	f7ef f892 	bl	800b88a <_ZN12SimpleStringaSERKS_>
 801c766:	f107 0308 	add.w	r3, r7, #8
 801c76a:	4618      	mov	r0, r3
 801c76c:	f7ef fbd9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
}
 801c770:	bf00      	nop
 801c772:	3714      	adds	r7, #20
 801c774:	46bd      	mov	sp, r7
 801c776:	bd90      	pop	{r4, r7, pc}

0801c778 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b082      	sub	sp, #8
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
 801c780:	6039      	str	r1, [r7, #0]
    return name_;
 801c782:	683b      	ldr	r3, [r7, #0]
 801c784:	3304      	adds	r3, #4
 801c786:	4619      	mov	r1, r3
 801c788:	6878      	ldr	r0, [r7, #4]
 801c78a:	f7ef f866 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 801c78e:	6878      	ldr	r0, [r7, #4]
 801c790:	3708      	adds	r7, #8
 801c792:	46bd      	mov	sp, r7
 801c794:	bd80      	pop	{r7, pc}

0801c796 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801c796:	b580      	push	{r7, lr}
 801c798:	b082      	sub	sp, #8
 801c79a:	af00      	add	r7, sp, #0
 801c79c:	6078      	str	r0, [r7, #4]
 801c79e:	6039      	str	r1, [r7, #0]
    return type_;
 801c7a0:	683b      	ldr	r3, [r7, #0]
 801c7a2:	330c      	adds	r3, #12
 801c7a4:	4619      	mov	r1, r3
 801c7a6:	6878      	ldr	r0, [r7, #4]
 801c7a8:	f7ef f857 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
}
 801c7ac:	6878      	ldr	r0, [r7, #4]
 801c7ae:	3708      	adds	r7, #8
 801c7b0:	46bd      	mov	sp, r7
 801c7b2:	bd80      	pop	{r7, pc}

0801c7b4 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7b6:	b087      	sub	sp, #28
 801c7b8:	af04      	add	r7, sp, #16
 801c7ba:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801c7bc:	f7f6 fbdc 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c7c0:	4604      	mov	r4, r0
 801c7c2:	6823      	ldr	r3, [r4, #0]
 801c7c4:	3324      	adds	r3, #36	; 0x24
 801c7c6:	681d      	ldr	r5, [r3, #0]
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	330c      	adds	r3, #12
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	f7ef fb7b 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c7d2:	4606      	mov	r6, r0
 801c7d4:	f7f6 fbe0 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c7d8:	4603      	mov	r3, r0
 801c7da:	9302      	str	r3, [sp, #8]
 801c7dc:	23c8      	movs	r3, #200	; 0xc8
 801c7de:	9301      	str	r3, [sp, #4]
 801c7e0:	4b06      	ldr	r3, [pc, #24]	; (801c7fc <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801c7e2:	9300      	str	r3, [sp, #0]
 801c7e4:	2300      	movs	r3, #0
 801c7e6:	4632      	mov	r2, r6
 801c7e8:	4905      	ldr	r1, [pc, #20]	; (801c800 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801c7ea:	4620      	mov	r0, r4
 801c7ec:	47a8      	blx	r5
    return value_.boolValue_;
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	7e1b      	ldrb	r3, [r3, #24]
}
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	370c      	adds	r7, #12
 801c7f6:	46bd      	mov	sp, r7
 801c7f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7fa:	bf00      	nop
 801c7fc:	0802500c 	.word	0x0802500c
 801c800:	08024fd4 	.word	0x08024fd4

0801c804 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801c804:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c806:	b089      	sub	sp, #36	; 0x24
 801c808:	af04      	add	r7, sp, #16
 801c80a:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	f103 040c 	add.w	r4, r3, #12
 801c812:	f107 0308 	add.w	r3, r7, #8
 801c816:	4920      	ldr	r1, [pc, #128]	; (801c898 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801c818:	4618      	mov	r0, r3
 801c81a:	f7ee ffca 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c81e:	2501      	movs	r5, #1
 801c820:	f107 0308 	add.w	r3, r7, #8
 801c824:	4619      	mov	r1, r3
 801c826:	4620      	mov	r0, r4
 801c828:	f7ef fb87 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801c82c:	4603      	mov	r3, r0
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d005      	beq.n	801c83e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	699b      	ldr	r3, [r3, #24]
 801c836:	2b00      	cmp	r3, #0
 801c838:	db01      	blt.n	801c83e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801c83a:	2401      	movs	r4, #1
 801c83c:	e000      	b.n	801c840 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801c83e:	2400      	movs	r4, #0
 801c840:	2d00      	cmp	r5, #0
 801c842:	d004      	beq.n	801c84e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801c844:	f107 0308 	add.w	r3, r7, #8
 801c848:	4618      	mov	r0, r3
 801c84a:	f7ef fb6a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801c84e:	2c00      	cmp	r4, #0
 801c850:	d002      	beq.n	801c858 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	699b      	ldr	r3, [r3, #24]
 801c856:	e01a      	b.n	801c88e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801c858:	f7f6 fb8e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c85c:	4604      	mov	r4, r0
 801c85e:	6823      	ldr	r3, [r4, #0]
 801c860:	3324      	adds	r3, #36	; 0x24
 801c862:	681d      	ldr	r5, [r3, #0]
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	330c      	adds	r3, #12
 801c868:	4618      	mov	r0, r3
 801c86a:	f7ef fb2d 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c86e:	4606      	mov	r6, r0
 801c870:	f7f6 fb92 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c874:	4603      	mov	r3, r0
 801c876:	9302      	str	r3, [sp, #8]
 801c878:	23d2      	movs	r3, #210	; 0xd2
 801c87a:	9301      	str	r3, [sp, #4]
 801c87c:	4b07      	ldr	r3, [pc, #28]	; (801c89c <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801c87e:	9300      	str	r3, [sp, #0]
 801c880:	2300      	movs	r3, #0
 801c882:	4632      	mov	r2, r6
 801c884:	4906      	ldr	r1, [pc, #24]	; (801c8a0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801c886:	4620      	mov	r0, r4
 801c888:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	699b      	ldr	r3, [r3, #24]
    }
}
 801c88e:	4618      	mov	r0, r3
 801c890:	3714      	adds	r7, #20
 801c892:	46bd      	mov	sp, r7
 801c894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c896:	bf00      	nop
 801c898:	08024fd0 	.word	0x08024fd0
 801c89c:	0802500c 	.word	0x0802500c
 801c8a0:	08024fdc 	.word	0x08024fdc

0801c8a4 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801c8a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8a6:	b087      	sub	sp, #28
 801c8a8:	af04      	add	r7, sp, #16
 801c8aa:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801c8ac:	f7f6 fb64 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c8b0:	4604      	mov	r4, r0
 801c8b2:	6823      	ldr	r3, [r4, #0]
 801c8b4:	3324      	adds	r3, #36	; 0x24
 801c8b6:	681d      	ldr	r5, [r3, #0]
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	330c      	adds	r3, #12
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f7ef fb03 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c8c2:	4606      	mov	r6, r0
 801c8c4:	f7f6 fb68 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c8c8:	4603      	mov	r3, r0
 801c8ca:	9302      	str	r3, [sp, #8]
 801c8cc:	23d9      	movs	r3, #217	; 0xd9
 801c8ce:	9301      	str	r3, [sp, #4]
 801c8d0:	4b06      	ldr	r3, [pc, #24]	; (801c8ec <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801c8d2:	9300      	str	r3, [sp, #0]
 801c8d4:	2300      	movs	r3, #0
 801c8d6:	4632      	mov	r2, r6
 801c8d8:	4905      	ldr	r1, [pc, #20]	; (801c8f0 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801c8da:	4620      	mov	r0, r4
 801c8dc:	47a8      	blx	r5
    return value_.intValue_;
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	699b      	ldr	r3, [r3, #24]
}
 801c8e2:	4618      	mov	r0, r3
 801c8e4:	370c      	adds	r7, #12
 801c8e6:	46bd      	mov	sp, r7
 801c8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c8ea:	bf00      	nop
 801c8ec:	0802500c 	.word	0x0802500c
 801c8f0:	08024fd0 	.word	0x08024fd0

0801c8f4 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801c8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8f6:	b08b      	sub	sp, #44	; 0x2c
 801c8f8:	af04      	add	r7, sp, #16
 801c8fa:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	f103 040c 	add.w	r4, r3, #12
 801c902:	f107 0308 	add.w	r3, r7, #8
 801c906:	4928      	ldr	r1, [pc, #160]	; (801c9a8 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801c908:	4618      	mov	r0, r3
 801c90a:	f7ee ff52 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c90e:	f107 0308 	add.w	r3, r7, #8
 801c912:	4619      	mov	r1, r3
 801c914:	4620      	mov	r0, r4
 801c916:	f7ef fb10 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801c91a:	4603      	mov	r3, r0
 801c91c:	461c      	mov	r4, r3
 801c91e:	f107 0308 	add.w	r3, r7, #8
 801c922:	4618      	mov	r0, r3
 801c924:	f7ef fafd 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801c928:	2c00      	cmp	r4, #0
 801c92a:	d002      	beq.n	801c932 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	699b      	ldr	r3, [r3, #24]
 801c930:	e035      	b.n	801c99e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	f103 040c 	add.w	r4, r3, #12
 801c938:	f107 0310 	add.w	r3, r7, #16
 801c93c:	491b      	ldr	r1, [pc, #108]	; (801c9ac <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801c93e:	4618      	mov	r0, r3
 801c940:	f7ee ff37 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c944:	f107 0310 	add.w	r3, r7, #16
 801c948:	4619      	mov	r1, r3
 801c94a:	4620      	mov	r0, r4
 801c94c:	f7ef faf5 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801c950:	4603      	mov	r3, r0
 801c952:	461c      	mov	r4, r3
 801c954:	f107 0310 	add.w	r3, r7, #16
 801c958:	4618      	mov	r0, r3
 801c95a:	f7ef fae2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801c95e:	2c00      	cmp	r4, #0
 801c960:	d002      	beq.n	801c968 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	699b      	ldr	r3, [r3, #24]
 801c966:	e01a      	b.n	801c99e <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801c968:	f7f6 fb06 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801c96c:	4604      	mov	r4, r0
 801c96e:	6823      	ldr	r3, [r4, #0]
 801c970:	3324      	adds	r3, #36	; 0x24
 801c972:	681d      	ldr	r5, [r3, #0]
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	330c      	adds	r3, #12
 801c978:	4618      	mov	r0, r3
 801c97a:	f7ef faa5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801c97e:	4606      	mov	r6, r0
 801c980:	f7f6 fb0a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801c984:	4603      	mov	r3, r0
 801c986:	9302      	str	r3, [sp, #8]
 801c988:	23e5      	movs	r3, #229	; 0xe5
 801c98a:	9301      	str	r3, [sp, #4]
 801c98c:	4b08      	ldr	r3, [pc, #32]	; (801c9b0 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801c98e:	9300      	str	r3, [sp, #0]
 801c990:	2300      	movs	r3, #0
 801c992:	4632      	mov	r2, r6
 801c994:	4907      	ldr	r1, [pc, #28]	; (801c9b4 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801c996:	4620      	mov	r0, r4
 801c998:	47a8      	blx	r5
        return value_.longIntValue_;
 801c99a:	687b      	ldr	r3, [r7, #4]
 801c99c:	699b      	ldr	r3, [r3, #24]
    }
}
 801c99e:	4618      	mov	r0, r3
 801c9a0:	371c      	adds	r7, #28
 801c9a2:	46bd      	mov	sp, r7
 801c9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c9a6:	bf00      	nop
 801c9a8:	08024fd0 	.word	0x08024fd0
 801c9ac:	08024fdc 	.word	0x08024fdc
 801c9b0:	0802500c 	.word	0x0802500c
 801c9b4:	08024fec 	.word	0x08024fec

0801c9b8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801c9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9ba:	b08d      	sub	sp, #52	; 0x34
 801c9bc:	af04      	add	r7, sp, #16
 801c9be:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	f103 040c 	add.w	r4, r3, #12
 801c9c6:	f107 0308 	add.w	r3, r7, #8
 801c9ca:	4940      	ldr	r1, [pc, #256]	; (801cacc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	f7ee fef0 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801c9d2:	f107 0308 	add.w	r3, r7, #8
 801c9d6:	4619      	mov	r1, r3
 801c9d8:	4620      	mov	r0, r4
 801c9da:	f7ef faae 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801c9de:	4603      	mov	r3, r0
 801c9e0:	461c      	mov	r4, r3
 801c9e2:	f107 0308 	add.w	r3, r7, #8
 801c9e6:	4618      	mov	r0, r3
 801c9e8:	f7ef fa9b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801c9ec:	2c00      	cmp	r4, #0
 801c9ee:	d002      	beq.n	801c9f6 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	699b      	ldr	r3, [r3, #24]
 801c9f4:	e066      	b.n	801cac4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801c9f6:	687b      	ldr	r3, [r7, #4]
 801c9f8:	f103 040c 	add.w	r4, r3, #12
 801c9fc:	f107 0310 	add.w	r3, r7, #16
 801ca00:	4933      	ldr	r1, [pc, #204]	; (801cad0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801ca02:	4618      	mov	r0, r3
 801ca04:	f7ee fed5 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ca08:	2501      	movs	r5, #1
 801ca0a:	f107 0310 	add.w	r3, r7, #16
 801ca0e:	4619      	mov	r1, r3
 801ca10:	4620      	mov	r0, r4
 801ca12:	f7ef fa92 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801ca16:	4603      	mov	r3, r0
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d005      	beq.n	801ca28 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	699b      	ldr	r3, [r3, #24]
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	db01      	blt.n	801ca28 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801ca24:	2401      	movs	r4, #1
 801ca26:	e000      	b.n	801ca2a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801ca28:	2400      	movs	r4, #0
 801ca2a:	2d00      	cmp	r5, #0
 801ca2c:	d004      	beq.n	801ca38 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801ca2e:	f107 0310 	add.w	r3, r7, #16
 801ca32:	4618      	mov	r0, r3
 801ca34:	f7ef fa75 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801ca38:	2c00      	cmp	r4, #0
 801ca3a:	d002      	beq.n	801ca42 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801ca3c:	687b      	ldr	r3, [r7, #4]
 801ca3e:	699b      	ldr	r3, [r3, #24]
 801ca40:	e040      	b.n	801cac4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801ca42:	687b      	ldr	r3, [r7, #4]
 801ca44:	f103 040c 	add.w	r4, r3, #12
 801ca48:	f107 0318 	add.w	r3, r7, #24
 801ca4c:	4921      	ldr	r1, [pc, #132]	; (801cad4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801ca4e:	4618      	mov	r0, r3
 801ca50:	f7ee feaf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ca54:	2501      	movs	r5, #1
 801ca56:	f107 0318 	add.w	r3, r7, #24
 801ca5a:	4619      	mov	r1, r3
 801ca5c:	4620      	mov	r0, r4
 801ca5e:	f7ef fa6c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801ca62:	4603      	mov	r3, r0
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d005      	beq.n	801ca74 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	699b      	ldr	r3, [r3, #24]
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	db01      	blt.n	801ca74 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801ca70:	2401      	movs	r4, #1
 801ca72:	e000      	b.n	801ca76 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801ca74:	2400      	movs	r4, #0
 801ca76:	2d00      	cmp	r5, #0
 801ca78:	d004      	beq.n	801ca84 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801ca7a:	f107 0318 	add.w	r3, r7, #24
 801ca7e:	4618      	mov	r0, r3
 801ca80:	f7ef fa4f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801ca84:	2c00      	cmp	r4, #0
 801ca86:	d002      	beq.n	801ca8e <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	699b      	ldr	r3, [r3, #24]
 801ca8c:	e01a      	b.n	801cac4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801ca8e:	f7f6 fa73 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801ca92:	4604      	mov	r4, r0
 801ca94:	6823      	ldr	r3, [r4, #0]
 801ca96:	3324      	adds	r3, #36	; 0x24
 801ca98:	681d      	ldr	r5, [r3, #0]
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	330c      	adds	r3, #12
 801ca9e:	4618      	mov	r0, r3
 801caa0:	f7ef fa12 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801caa4:	4606      	mov	r6, r0
 801caa6:	f7f6 fa77 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801caaa:	4603      	mov	r3, r0
 801caac:	9302      	str	r3, [sp, #8]
 801caae:	23f4      	movs	r3, #244	; 0xf4
 801cab0:	9301      	str	r3, [sp, #4]
 801cab2:	4b09      	ldr	r3, [pc, #36]	; (801cad8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801cab4:	9300      	str	r3, [sp, #0]
 801cab6:	2300      	movs	r3, #0
 801cab8:	4632      	mov	r2, r6
 801caba:	4908      	ldr	r1, [pc, #32]	; (801cadc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801cabc:	4620      	mov	r0, r4
 801cabe:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	699b      	ldr	r3, [r3, #24]
    }
}
 801cac4:	4618      	mov	r0, r3
 801cac6:	3724      	adds	r7, #36	; 0x24
 801cac8:	46bd      	mov	sp, r7
 801caca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cacc:	08024fdc 	.word	0x08024fdc
 801cad0:	08024fd0 	.word	0x08024fd0
 801cad4:	08024fec 	.word	0x08024fec
 801cad8:	0802500c 	.word	0x0802500c
 801cadc:	08024ff8 	.word	0x08024ff8

0801cae0 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801cae0:	b5b0      	push	{r4, r5, r7, lr}
 801cae2:	b084      	sub	sp, #16
 801cae4:	af02      	add	r7, sp, #8
 801cae6:	6078      	str	r0, [r7, #4]
 801cae8:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801caea:	f7f6 fa45 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801caee:	4604      	mov	r4, r0
 801caf0:	6823      	ldr	r3, [r4, #0]
 801caf2:	3368      	adds	r3, #104	; 0x68
 801caf4:	681d      	ldr	r5, [r3, #0]
 801caf6:	f7f6 fa4f 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cafa:	4603      	mov	r3, r0
 801cafc:	9300      	str	r3, [sp, #0]
 801cafe:	f240 1323 	movw	r3, #291	; 0x123
 801cb02:	4a06      	ldr	r2, [pc, #24]	; (801cb1c <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801cb04:	4906      	ldr	r1, [pc, #24]	; (801cb20 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801cb06:	4620      	mov	r0, r4
 801cb08:	47a8      	blx	r5
    return cpputest_longlong(0);
 801cb0a:	2100      	movs	r1, #0
 801cb0c:	6878      	ldr	r0, [r7, #4]
 801cb0e:	f7ec fe87 	bl	8009820 <_ZN17cpputest_longlongC1Ei>
}
 801cb12:	6878      	ldr	r0, [r7, #4]
 801cb14:	3708      	adds	r7, #8
 801cb16:	46bd      	mov	sp, r7
 801cb18:	bdb0      	pop	{r4, r5, r7, pc}
 801cb1a:	bf00      	nop
 801cb1c:	0802500c 	.word	0x0802500c
 801cb20:	08025028 	.word	0x08025028

0801cb24 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801cb24:	b5b0      	push	{r4, r5, r7, lr}
 801cb26:	b084      	sub	sp, #16
 801cb28:	af02      	add	r7, sp, #8
 801cb2a:	6078      	str	r0, [r7, #4]
 801cb2c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801cb2e:	f7f6 fa23 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cb32:	4604      	mov	r4, r0
 801cb34:	6823      	ldr	r3, [r4, #0]
 801cb36:	3368      	adds	r3, #104	; 0x68
 801cb38:	681d      	ldr	r5, [r3, #0]
 801cb3a:	f7f6 fa2d 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cb3e:	4603      	mov	r3, r0
 801cb40:	9300      	str	r3, [sp, #0]
 801cb42:	f240 1329 	movw	r3, #297	; 0x129
 801cb46:	4a06      	ldr	r2, [pc, #24]	; (801cb60 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801cb48:	4906      	ldr	r1, [pc, #24]	; (801cb64 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801cb4a:	4620      	mov	r0, r4
 801cb4c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801cb4e:	2100      	movs	r1, #0
 801cb50:	6878      	ldr	r0, [r7, #4]
 801cb52:	f7ec fe71 	bl	8009838 <_ZN18cpputest_ulonglongC1Ei>
}
 801cb56:	6878      	ldr	r0, [r7, #4]
 801cb58:	3708      	adds	r7, #8
 801cb5a:	46bd      	mov	sp, r7
 801cb5c:	bdb0      	pop	{r4, r5, r7, pc}
 801cb5e:	bf00      	nop
 801cb60:	0802500c 	.word	0x0802500c
 801cb64:	08025048 	.word	0x08025048

0801cb68 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801cb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb6a:	b087      	sub	sp, #28
 801cb6c:	af04      	add	r7, sp, #16
 801cb6e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801cb70:	f7f6 fa02 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cb74:	4604      	mov	r4, r0
 801cb76:	6823      	ldr	r3, [r4, #0]
 801cb78:	3324      	adds	r3, #36	; 0x24
 801cb7a:	681d      	ldr	r5, [r3, #0]
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	330c      	adds	r3, #12
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ef f9a1 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cb86:	4606      	mov	r6, r0
 801cb88:	f7f6 fa06 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cb8c:	4603      	mov	r3, r0
 801cb8e:	9302      	str	r3, [sp, #8]
 801cb90:	f240 1331 	movw	r3, #305	; 0x131
 801cb94:	9301      	str	r3, [sp, #4]
 801cb96:	4b09      	ldr	r3, [pc, #36]	; (801cbbc <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801cb98:	9300      	str	r3, [sp, #0]
 801cb9a:	2300      	movs	r3, #0
 801cb9c:	4632      	mov	r2, r6
 801cb9e:	4908      	ldr	r1, [pc, #32]	; (801cbc0 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801cba0:	4620      	mov	r0, r4
 801cba2:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801cbaa:	ec43 2b17 	vmov	d7, r2, r3
}
 801cbae:	eeb0 0a47 	vmov.f32	s0, s14
 801cbb2:	eef0 0a67 	vmov.f32	s1, s15
 801cbb6:	370c      	adds	r7, #12
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbbc:	0802500c 	.word	0x0802500c
 801cbc0:	08025074 	.word	0x08025074

0801cbc4 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801cbc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cbc6:	b087      	sub	sp, #28
 801cbc8:	af04      	add	r7, sp, #16
 801cbca:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801cbcc:	f7f6 f9d4 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cbd0:	4604      	mov	r4, r0
 801cbd2:	6823      	ldr	r3, [r4, #0]
 801cbd4:	3324      	adds	r3, #36	; 0x24
 801cbd6:	681d      	ldr	r5, [r3, #0]
 801cbd8:	687b      	ldr	r3, [r7, #4]
 801cbda:	330c      	adds	r3, #12
 801cbdc:	4618      	mov	r0, r3
 801cbde:	f7ef f973 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cbe2:	4606      	mov	r6, r0
 801cbe4:	f7f6 f9d8 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cbe8:	4603      	mov	r3, r0
 801cbea:	9302      	str	r3, [sp, #8]
 801cbec:	f240 1337 	movw	r3, #311	; 0x137
 801cbf0:	9301      	str	r3, [sp, #4]
 801cbf2:	4b09      	ldr	r3, [pc, #36]	; (801cc18 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801cbf4:	9300      	str	r3, [sp, #0]
 801cbf6:	2300      	movs	r3, #0
 801cbf8:	4632      	mov	r2, r6
 801cbfa:	4908      	ldr	r1, [pc, #32]	; (801cc1c <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801cbfc:	4620      	mov	r0, r4
 801cbfe:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cc06:	ec43 2b17 	vmov	d7, r2, r3
}
 801cc0a:	eeb0 0a47 	vmov.f32	s0, s14
 801cc0e:	eef0 0a67 	vmov.f32	s1, s15
 801cc12:	370c      	adds	r7, #12
 801cc14:	46bd      	mov	sp, r7
 801cc16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc18:	0802500c 	.word	0x0802500c
 801cc1c:	08025074 	.word	0x08025074

0801cc20 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801cc20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc22:	b087      	sub	sp, #28
 801cc24:	af04      	add	r7, sp, #16
 801cc26:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801cc28:	f7f6 f9a6 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cc2c:	4604      	mov	r4, r0
 801cc2e:	6823      	ldr	r3, [r4, #0]
 801cc30:	3324      	adds	r3, #36	; 0x24
 801cc32:	681d      	ldr	r5, [r3, #0]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	330c      	adds	r3, #12
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f7ef f945 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cc3e:	4606      	mov	r6, r0
 801cc40:	f7f6 f9aa 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cc44:	4603      	mov	r3, r0
 801cc46:	9302      	str	r3, [sp, #8]
 801cc48:	f240 133d 	movw	r3, #317	; 0x13d
 801cc4c:	9301      	str	r3, [sp, #4]
 801cc4e:	4b06      	ldr	r3, [pc, #24]	; (801cc68 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801cc50:	9300      	str	r3, [sp, #0]
 801cc52:	2300      	movs	r3, #0
 801cc54:	4632      	mov	r2, r6
 801cc56:	4905      	ldr	r1, [pc, #20]	; (801cc6c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801cc58:	4620      	mov	r0, r4
 801cc5a:	47a8      	blx	r5
    return value_.stringValue_;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	699b      	ldr	r3, [r3, #24]
}
 801cc60:	4618      	mov	r0, r3
 801cc62:	370c      	adds	r7, #12
 801cc64:	46bd      	mov	sp, r7
 801cc66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cc68:	0802500c 	.word	0x0802500c
 801cc6c:	0802509c 	.word	0x0802509c

0801cc70 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cc72:	b087      	sub	sp, #28
 801cc74:	af04      	add	r7, sp, #16
 801cc76:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801cc78:	f7f6 f97e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cc7c:	4604      	mov	r4, r0
 801cc7e:	6823      	ldr	r3, [r4, #0]
 801cc80:	3324      	adds	r3, #36	; 0x24
 801cc82:	681d      	ldr	r5, [r3, #0]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	330c      	adds	r3, #12
 801cc88:	4618      	mov	r0, r3
 801cc8a:	f7ef f91d 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cc8e:	4606      	mov	r6, r0
 801cc90:	f7f6 f982 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cc94:	4603      	mov	r3, r0
 801cc96:	9302      	str	r3, [sp, #8]
 801cc98:	f240 1343 	movw	r3, #323	; 0x143
 801cc9c:	9301      	str	r3, [sp, #4]
 801cc9e:	4b06      	ldr	r3, [pc, #24]	; (801ccb8 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801cca0:	9300      	str	r3, [sp, #0]
 801cca2:	2300      	movs	r3, #0
 801cca4:	4632      	mov	r2, r6
 801cca6:	4905      	ldr	r1, [pc, #20]	; (801ccbc <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801cca8:	4620      	mov	r0, r4
 801ccaa:	47a8      	blx	r5
    return value_.pointerValue_;
 801ccac:	687b      	ldr	r3, [r7, #4]
 801ccae:	699b      	ldr	r3, [r3, #24]
}
 801ccb0:	4618      	mov	r0, r3
 801ccb2:	370c      	adds	r7, #12
 801ccb4:	46bd      	mov	sp, r7
 801ccb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ccb8:	0802500c 	.word	0x0802500c
 801ccbc:	0802507c 	.word	0x0802507c

0801ccc0 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801ccc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ccc2:	b087      	sub	sp, #28
 801ccc4:	af04      	add	r7, sp, #16
 801ccc6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801ccc8:	f7f6 f956 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cccc:	4604      	mov	r4, r0
 801ccce:	6823      	ldr	r3, [r4, #0]
 801ccd0:	3324      	adds	r3, #36	; 0x24
 801ccd2:	681d      	ldr	r5, [r3, #0]
 801ccd4:	687b      	ldr	r3, [r7, #4]
 801ccd6:	330c      	adds	r3, #12
 801ccd8:	4618      	mov	r0, r3
 801ccda:	f7ef f8f5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801ccde:	4606      	mov	r6, r0
 801cce0:	f7f6 f95a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cce4:	4603      	mov	r3, r0
 801cce6:	9302      	str	r3, [sp, #8]
 801cce8:	f240 1349 	movw	r3, #329	; 0x149
 801ccec:	9301      	str	r3, [sp, #4]
 801ccee:	4b06      	ldr	r3, [pc, #24]	; (801cd08 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801ccf0:	9300      	str	r3, [sp, #0]
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	4632      	mov	r2, r6
 801ccf6:	4905      	ldr	r1, [pc, #20]	; (801cd0c <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801ccf8:	4620      	mov	r0, r4
 801ccfa:	47a8      	blx	r5
    return value_.pointerValue_;
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	699b      	ldr	r3, [r3, #24]
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	370c      	adds	r7, #12
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd08:	0802500c 	.word	0x0802500c
 801cd0c:	08025084 	.word	0x08025084

0801cd10 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd12:	b087      	sub	sp, #28
 801cd14:	af04      	add	r7, sp, #16
 801cd16:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801cd18:	f7f6 f92e 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cd1c:	4604      	mov	r4, r0
 801cd1e:	6823      	ldr	r3, [r4, #0]
 801cd20:	3324      	adds	r3, #36	; 0x24
 801cd22:	681d      	ldr	r5, [r3, #0]
 801cd24:	687b      	ldr	r3, [r7, #4]
 801cd26:	330c      	adds	r3, #12
 801cd28:	4618      	mov	r0, r3
 801cd2a:	f7ef f8cd 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cd2e:	4606      	mov	r6, r0
 801cd30:	f7f6 f932 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cd34:	4603      	mov	r3, r0
 801cd36:	9302      	str	r3, [sp, #8]
 801cd38:	f240 134f 	movw	r3, #335	; 0x14f
 801cd3c:	9301      	str	r3, [sp, #4]
 801cd3e:	4b06      	ldr	r3, [pc, #24]	; (801cd58 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801cd40:	9300      	str	r3, [sp, #0]
 801cd42:	2300      	movs	r3, #0
 801cd44:	4632      	mov	r2, r6
 801cd46:	4905      	ldr	r1, [pc, #20]	; (801cd5c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801cd48:	4620      	mov	r0, r4
 801cd4a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	699b      	ldr	r3, [r3, #24]
}
 801cd50:	4618      	mov	r0, r3
 801cd52:	370c      	adds	r7, #12
 801cd54:	46bd      	mov	sp, r7
 801cd56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cd58:	0802500c 	.word	0x0802500c
 801cd5c:	08025090 	.word	0x08025090

0801cd60 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801cd60:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cd62:	b087      	sub	sp, #28
 801cd64:	af04      	add	r7, sp, #16
 801cd66:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801cd68:	f7f6 f906 	bl	8012f78 <_ZN10UtestShell10getCurrentEv>
 801cd6c:	4604      	mov	r4, r0
 801cd6e:	6823      	ldr	r3, [r4, #0]
 801cd70:	3324      	adds	r3, #36	; 0x24
 801cd72:	681d      	ldr	r5, [r3, #0]
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	330c      	adds	r3, #12
 801cd78:	4618      	mov	r0, r3
 801cd7a:	f7ef f8a5 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801cd7e:	4606      	mov	r6, r0
 801cd80:	f7f6 f90a 	bl	8012f98 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801cd84:	4603      	mov	r3, r0
 801cd86:	9302      	str	r3, [sp, #8]
 801cd88:	f240 1355 	movw	r3, #341	; 0x155
 801cd8c:	9301      	str	r3, [sp, #4]
 801cd8e:	4b06      	ldr	r3, [pc, #24]	; (801cda8 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801cd90:	9300      	str	r3, [sp, #0]
 801cd92:	2300      	movs	r3, #0
 801cd94:	4632      	mov	r2, r6
 801cd96:	4905      	ldr	r1, [pc, #20]	; (801cdac <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801cd98:	4620      	mov	r0, r4
 801cd9a:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801cd9c:	687b      	ldr	r3, [r7, #4]
 801cd9e:	699b      	ldr	r3, [r3, #24]
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	370c      	adds	r7, #12
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cda8:	0802500c 	.word	0x0802500c
 801cdac:	080250a8 	.word	0x080250a8

0801cdb0 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801cdb0:	b480      	push	{r7}
 801cdb2:	b083      	sub	sp, #12
 801cdb4:	af00      	add	r7, sp, #0
 801cdb6:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	699b      	ldr	r3, [r3, #24]
}
 801cdbc:	4618      	mov	r0, r3
 801cdbe:	370c      	adds	r7, #12
 801cdc0:	46bd      	mov	sp, r7
 801cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdc6:	4770      	bx	lr

0801cdc8 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801cdc8:	b480      	push	{r7}
 801cdca:	b083      	sub	sp, #12
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	699b      	ldr	r3, [r3, #24]
}
 801cdd4:	4618      	mov	r0, r3
 801cdd6:	370c      	adds	r7, #12
 801cdd8:	46bd      	mov	sp, r7
 801cdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdde:	4770      	bx	lr

0801cde0 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801cde0:	b480      	push	{r7}
 801cde2:	b083      	sub	sp, #12
 801cde4:	af00      	add	r7, sp, #0
 801cde6:	6078      	str	r0, [r7, #4]
    return size_;
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801cdec:	4618      	mov	r0, r3
 801cdee:	370c      	adds	r7, #12
 801cdf0:	46bd      	mov	sp, r7
 801cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdf6:	4770      	bx	lr

0801cdf8 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801cdf8:	b480      	push	{r7}
 801cdfa:	b083      	sub	sp, #12
 801cdfc:	af00      	add	r7, sp, #0
 801cdfe:	6078      	str	r0, [r7, #4]
    return comparator_;
 801ce00:	687b      	ldr	r3, [r7, #4]
 801ce02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801ce04:	4618      	mov	r0, r3
 801ce06:	370c      	adds	r7, #12
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce0e:	4770      	bx	lr

0801ce10 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801ce10:	b480      	push	{r7}
 801ce12:	b083      	sub	sp, #12
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	6078      	str	r0, [r7, #4]
    return copier_;
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	370c      	adds	r7, #12
 801ce20:	46bd      	mov	sp, r7
 801ce22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce26:	4770      	bx	lr

0801ce28 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ce2a:	b0cd      	sub	sp, #308	; 0x134
 801ce2c:	af00      	add	r7, sp, #0
 801ce2e:	1d3b      	adds	r3, r7, #4
 801ce30:	6018      	str	r0, [r3, #0]
 801ce32:	463b      	mov	r3, r7
 801ce34:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801ce36:	2500      	movs	r5, #0
 801ce38:	1d3b      	adds	r3, r7, #4
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	f103 040c 	add.w	r4, r3, #12
 801ce40:	f107 0308 	add.w	r3, r7, #8
 801ce44:	49bb      	ldr	r1, [pc, #748]	; (801d134 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801ce46:	4618      	mov	r0, r3
 801ce48:	f7ee fcb3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ce4c:	2601      	movs	r6, #1
 801ce4e:	f107 0308 	add.w	r3, r7, #8
 801ce52:	4619      	mov	r1, r3
 801ce54:	4620      	mov	r0, r4
 801ce56:	f7ef f870 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801ce5a:	4603      	mov	r3, r0
 801ce5c:	2b00      	cmp	r3, #0
 801ce5e:	d015      	beq.n	801ce8c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ce60:	463b      	mov	r3, r7
 801ce62:	681b      	ldr	r3, [r3, #0]
 801ce64:	f103 040c 	add.w	r4, r3, #12
 801ce68:	f107 0310 	add.w	r3, r7, #16
 801ce6c:	49b2      	ldr	r1, [pc, #712]	; (801d138 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f7ee fc9f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ce74:	2501      	movs	r5, #1
 801ce76:	f107 0310 	add.w	r3, r7, #16
 801ce7a:	4619      	mov	r1, r3
 801ce7c:	4620      	mov	r0, r4
 801ce7e:	f7ef f85c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801ce82:	4603      	mov	r3, r0
 801ce84:	2b00      	cmp	r3, #0
 801ce86:	d001      	beq.n	801ce8c <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801ce88:	2401      	movs	r4, #1
 801ce8a:	e000      	b.n	801ce8e <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801ce8c:	2400      	movs	r4, #0
 801ce8e:	2d00      	cmp	r5, #0
 801ce90:	d004      	beq.n	801ce9c <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801ce92:	f107 0310 	add.w	r3, r7, #16
 801ce96:	4618      	mov	r0, r3
 801ce98:	f7ef f843 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801ce9c:	2e00      	cmp	r6, #0
 801ce9e:	d004      	beq.n	801ceaa <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801cea0:	f107 0308 	add.w	r3, r7, #8
 801cea4:	4618      	mov	r0, r3
 801cea6:	f7ef f83c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801ceaa:	2c00      	cmp	r4, #0
 801ceac:	d00c      	beq.n	801cec8 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801ceae:	1d3b      	adds	r3, r7, #4
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	699a      	ldr	r2, [r3, #24]
 801ceb4:	463b      	mov	r3, r7
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	699b      	ldr	r3, [r3, #24]
 801ceba:	429a      	cmp	r2, r3
 801cebc:	bf0c      	ite	eq
 801cebe:	2301      	moveq	r3, #1
 801cec0:	2300      	movne	r3, #0
 801cec2:	b2dc      	uxtb	r4, r3
 801cec4:	f000 bd60 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801cec8:	2500      	movs	r5, #0
 801ceca:	1d3b      	adds	r3, r7, #4
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f103 040c 	add.w	r4, r3, #12
 801ced2:	f107 0318 	add.w	r3, r7, #24
 801ced6:	4998      	ldr	r1, [pc, #608]	; (801d138 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ced8:	4618      	mov	r0, r3
 801ceda:	f7ee fc6a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801cede:	2601      	movs	r6, #1
 801cee0:	f107 0318 	add.w	r3, r7, #24
 801cee4:	4619      	mov	r1, r3
 801cee6:	4620      	mov	r0, r4
 801cee8:	f7ef f827 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801ceec:	4603      	mov	r3, r0
 801ceee:	2b00      	cmp	r3, #0
 801cef0:	d015      	beq.n	801cf1e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801cef2:	463b      	mov	r3, r7
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	f103 040c 	add.w	r4, r3, #12
 801cefa:	f107 0320 	add.w	r3, r7, #32
 801cefe:	498d      	ldr	r1, [pc, #564]	; (801d134 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801cf00:	4618      	mov	r0, r3
 801cf02:	f7ee fc56 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801cf06:	2501      	movs	r5, #1
 801cf08:	f107 0320 	add.w	r3, r7, #32
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	4620      	mov	r0, r4
 801cf10:	f7ef f813 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801cf14:	4603      	mov	r3, r0
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d001      	beq.n	801cf1e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801cf1a:	2401      	movs	r4, #1
 801cf1c:	e000      	b.n	801cf20 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801cf1e:	2400      	movs	r4, #0
 801cf20:	2d00      	cmp	r5, #0
 801cf22:	d004      	beq.n	801cf2e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801cf24:	f107 0320 	add.w	r3, r7, #32
 801cf28:	4618      	mov	r0, r3
 801cf2a:	f7ee fffa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801cf2e:	2e00      	cmp	r6, #0
 801cf30:	d004      	beq.n	801cf3c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801cf32:	f107 0318 	add.w	r3, r7, #24
 801cf36:	4618      	mov	r0, r3
 801cf38:	f7ee fff3 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801cf3c:	2c00      	cmp	r4, #0
 801cf3e:	d00c      	beq.n	801cf5a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801cf40:	1d3b      	adds	r3, r7, #4
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	699a      	ldr	r2, [r3, #24]
 801cf46:	463b      	mov	r3, r7
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	699b      	ldr	r3, [r3, #24]
 801cf4c:	429a      	cmp	r2, r3
 801cf4e:	bf0c      	ite	eq
 801cf50:	2301      	moveq	r3, #1
 801cf52:	2300      	movne	r3, #0
 801cf54:	b2dc      	uxtb	r4, r3
 801cf56:	f000 bd17 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801cf5a:	2500      	movs	r5, #0
 801cf5c:	1d3b      	adds	r3, r7, #4
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	f103 040c 	add.w	r4, r3, #12
 801cf64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf68:	4974      	ldr	r1, [pc, #464]	; (801d13c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7ee fc21 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801cf70:	2601      	movs	r6, #1
 801cf72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cf76:	4619      	mov	r1, r3
 801cf78:	4620      	mov	r0, r4
 801cf7a:	f7ee ffde 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d015      	beq.n	801cfb0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801cf84:	463b      	mov	r3, r7
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	f103 040c 	add.w	r4, r3, #12
 801cf8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf90:	4969      	ldr	r1, [pc, #420]	; (801d138 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801cf92:	4618      	mov	r0, r3
 801cf94:	f7ee fc0d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801cf98:	2501      	movs	r5, #1
 801cf9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cf9e:	4619      	mov	r1, r3
 801cfa0:	4620      	mov	r0, r4
 801cfa2:	f7ee ffca 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d001      	beq.n	801cfb0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801cfac:	2401      	movs	r4, #1
 801cfae:	e000      	b.n	801cfb2 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801cfb0:	2400      	movs	r4, #0
 801cfb2:	2d00      	cmp	r5, #0
 801cfb4:	d004      	beq.n	801cfc0 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801cfb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801cfba:	4618      	mov	r0, r3
 801cfbc:	f7ee ffb1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801cfc0:	2e00      	cmp	r6, #0
 801cfc2:	d004      	beq.n	801cfce <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801cfc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801cfc8:	4618      	mov	r0, r3
 801cfca:	f7ee ffaa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801cfce:	2c00      	cmp	r4, #0
 801cfd0:	d012      	beq.n	801cff8 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801cfd2:	463b      	mov	r3, r7
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	699b      	ldr	r3, [r3, #24]
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	db0a      	blt.n	801cff2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cfdc:	1d3b      	adds	r3, r7, #4
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	699b      	ldr	r3, [r3, #24]
 801cfe2:	463a      	mov	r2, r7
 801cfe4:	6812      	ldr	r2, [r2, #0]
 801cfe6:	6992      	ldr	r2, [r2, #24]
 801cfe8:	4293      	cmp	r3, r2
 801cfea:	d102      	bne.n	801cff2 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801cfec:	2401      	movs	r4, #1
 801cfee:	f000 bccb 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801cff2:	2400      	movs	r4, #0
 801cff4:	f000 bcc8 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801cff8:	2500      	movs	r5, #0
 801cffa:	1d3b      	adds	r3, r7, #4
 801cffc:	681b      	ldr	r3, [r3, #0]
 801cffe:	f103 040c 	add.w	r4, r3, #12
 801d002:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d006:	494c      	ldr	r1, [pc, #304]	; (801d138 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801d008:	4618      	mov	r0, r3
 801d00a:	f7ee fbd2 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d00e:	2601      	movs	r6, #1
 801d010:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d014:	4619      	mov	r1, r3
 801d016:	4620      	mov	r0, r4
 801d018:	f7ee ff8f 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d01c:	4603      	mov	r3, r0
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d015      	beq.n	801d04e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801d022:	463b      	mov	r3, r7
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	f103 040c 	add.w	r4, r3, #12
 801d02a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d02e:	4943      	ldr	r1, [pc, #268]	; (801d13c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801d030:	4618      	mov	r0, r3
 801d032:	f7ee fbbe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d036:	2501      	movs	r5, #1
 801d038:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d03c:	4619      	mov	r1, r3
 801d03e:	4620      	mov	r0, r4
 801d040:	f7ee ff7b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d044:	4603      	mov	r3, r0
 801d046:	2b00      	cmp	r3, #0
 801d048:	d001      	beq.n	801d04e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801d04a:	2401      	movs	r4, #1
 801d04c:	e000      	b.n	801d050 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801d04e:	2400      	movs	r4, #0
 801d050:	2d00      	cmp	r5, #0
 801d052:	d004      	beq.n	801d05e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801d054:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801d058:	4618      	mov	r0, r3
 801d05a:	f7ee ff62 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d05e:	2e00      	cmp	r6, #0
 801d060:	d004      	beq.n	801d06c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801d062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801d066:	4618      	mov	r0, r3
 801d068:	f7ee ff5b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d06c:	2c00      	cmp	r4, #0
 801d06e:	d012      	beq.n	801d096 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801d070:	1d3b      	adds	r3, r7, #4
 801d072:	681b      	ldr	r3, [r3, #0]
 801d074:	699b      	ldr	r3, [r3, #24]
 801d076:	2b00      	cmp	r3, #0
 801d078:	db0a      	blt.n	801d090 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801d07a:	1d3b      	adds	r3, r7, #4
 801d07c:	681b      	ldr	r3, [r3, #0]
 801d07e:	699b      	ldr	r3, [r3, #24]
 801d080:	463a      	mov	r2, r7
 801d082:	6812      	ldr	r2, [r2, #0]
 801d084:	6992      	ldr	r2, [r2, #24]
 801d086:	4293      	cmp	r3, r2
 801d088:	d102      	bne.n	801d090 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801d08a:	2401      	movs	r4, #1
 801d08c:	f000 bc7c 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d090:	2400      	movs	r4, #0
 801d092:	f000 bc79 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801d096:	2500      	movs	r5, #0
 801d098:	1d3b      	adds	r3, r7, #4
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	f103 040c 	add.w	r4, r3, #12
 801d0a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d0a4:	4926      	ldr	r1, [pc, #152]	; (801d140 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801d0a6:	4618      	mov	r0, r3
 801d0a8:	f7ee fb83 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d0ac:	2601      	movs	r6, #1
 801d0ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d0b2:	4619      	mov	r1, r3
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7ee ff40 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d0ba:	4603      	mov	r3, r0
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d015      	beq.n	801d0ec <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801d0c0:	463b      	mov	r3, r7
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	f103 040c 	add.w	r4, r3, #12
 801d0c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d0cc:	491a      	ldr	r1, [pc, #104]	; (801d138 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7ee fb6f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d0d4:	2501      	movs	r5, #1
 801d0d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d0da:	4619      	mov	r1, r3
 801d0dc:	4620      	mov	r0, r4
 801d0de:	f7ee ff2c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	d001      	beq.n	801d0ec <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801d0e8:	2401      	movs	r4, #1
 801d0ea:	e000      	b.n	801d0ee <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801d0ec:	2400      	movs	r4, #0
 801d0ee:	2d00      	cmp	r5, #0
 801d0f0:	d004      	beq.n	801d0fc <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801d0f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7ee ff13 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d0fc:	2e00      	cmp	r6, #0
 801d0fe:	d004      	beq.n	801d10a <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801d100:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801d104:	4618      	mov	r0, r3
 801d106:	f7ee ff0c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d10a:	2c00      	cmp	r4, #0
 801d10c:	d01a      	beq.n	801d144 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801d10e:	463b      	mov	r3, r7
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	699b      	ldr	r3, [r3, #24]
 801d114:	2b00      	cmp	r3, #0
 801d116:	db0a      	blt.n	801d12e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801d118:	1d3b      	adds	r3, r7, #4
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	699b      	ldr	r3, [r3, #24]
 801d11e:	463a      	mov	r2, r7
 801d120:	6812      	ldr	r2, [r2, #0]
 801d122:	6992      	ldr	r2, [r2, #24]
 801d124:	4293      	cmp	r3, r2
 801d126:	d102      	bne.n	801d12e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801d128:	2401      	movs	r4, #1
 801d12a:	f000 bc2d 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d12e:	2400      	movs	r4, #0
 801d130:	f000 bc2a 	b.w	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d134:	08024fec 	.word	0x08024fec
 801d138:	08024fd0 	.word	0x08024fd0
 801d13c:	08024fdc 	.word	0x08024fdc
 801d140:	08024ff8 	.word	0x08024ff8
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801d144:	2500      	movs	r5, #0
 801d146:	1d3b      	adds	r3, r7, #4
 801d148:	681b      	ldr	r3, [r3, #0]
 801d14a:	f103 040c 	add.w	r4, r3, #12
 801d14e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d152:	49b8      	ldr	r1, [pc, #736]	; (801d434 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801d154:	4618      	mov	r0, r3
 801d156:	f7ee fb2c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d15a:	2601      	movs	r6, #1
 801d15c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d160:	4619      	mov	r1, r3
 801d162:	4620      	mov	r0, r4
 801d164:	f7ee fee9 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d168:	4603      	mov	r3, r0
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d015      	beq.n	801d19a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801d16e:	463b      	mov	r3, r7
 801d170:	681b      	ldr	r3, [r3, #0]
 801d172:	f103 040c 	add.w	r4, r3, #12
 801d176:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d17a:	49af      	ldr	r1, [pc, #700]	; (801d438 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801d17c:	4618      	mov	r0, r3
 801d17e:	f7ee fb18 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d182:	2501      	movs	r5, #1
 801d184:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d188:	4619      	mov	r1, r3
 801d18a:	4620      	mov	r0, r4
 801d18c:	f7ee fed5 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d190:	4603      	mov	r3, r0
 801d192:	2b00      	cmp	r3, #0
 801d194:	d001      	beq.n	801d19a <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801d196:	2401      	movs	r4, #1
 801d198:	e000      	b.n	801d19c <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801d19a:	2400      	movs	r4, #0
 801d19c:	2d00      	cmp	r5, #0
 801d19e:	d004      	beq.n	801d1aa <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801d1a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801d1a4:	4618      	mov	r0, r3
 801d1a6:	f7ee febc 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d1aa:	2e00      	cmp	r6, #0
 801d1ac:	d004      	beq.n	801d1b8 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801d1ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f7ee feb5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d1b8:	2c00      	cmp	r4, #0
 801d1ba:	d010      	beq.n	801d1de <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801d1bc:	1d3b      	adds	r3, r7, #4
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	699b      	ldr	r3, [r3, #24]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	db09      	blt.n	801d1da <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801d1c6:	1d3b      	adds	r3, r7, #4
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	699b      	ldr	r3, [r3, #24]
 801d1cc:	463a      	mov	r2, r7
 801d1ce:	6812      	ldr	r2, [r2, #0]
 801d1d0:	6992      	ldr	r2, [r2, #24]
 801d1d2:	4293      	cmp	r3, r2
 801d1d4:	d101      	bne.n	801d1da <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801d1d6:	2401      	movs	r4, #1
 801d1d8:	e3d6      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d1da:	2400      	movs	r4, #0
 801d1dc:	e3d4      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801d1de:	2500      	movs	r5, #0
 801d1e0:	1d3b      	adds	r3, r7, #4
 801d1e2:	681b      	ldr	r3, [r3, #0]
 801d1e4:	f103 040c 	add.w	r4, r3, #12
 801d1e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1ec:	4993      	ldr	r1, [pc, #588]	; (801d43c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d1ee:	4618      	mov	r0, r3
 801d1f0:	f7ee fadf 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d1f4:	2601      	movs	r6, #1
 801d1f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d1fa:	4619      	mov	r1, r3
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	f7ee fe9c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d202:	4603      	mov	r3, r0
 801d204:	2b00      	cmp	r3, #0
 801d206:	d015      	beq.n	801d234 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801d208:	463b      	mov	r3, r7
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	f103 040c 	add.w	r4, r3, #12
 801d210:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d214:	498a      	ldr	r1, [pc, #552]	; (801d440 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801d216:	4618      	mov	r0, r3
 801d218:	f7ee facb 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d21c:	2501      	movs	r5, #1
 801d21e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d222:	4619      	mov	r1, r3
 801d224:	4620      	mov	r0, r4
 801d226:	f7ee fe88 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d22a:	4603      	mov	r3, r0
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	d001      	beq.n	801d234 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801d230:	2401      	movs	r4, #1
 801d232:	e000      	b.n	801d236 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801d234:	2400      	movs	r4, #0
 801d236:	2d00      	cmp	r5, #0
 801d238:	d004      	beq.n	801d244 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801d23a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801d23e:	4618      	mov	r0, r3
 801d240:	f7ee fe6f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d244:	2e00      	cmp	r6, #0
 801d246:	d004      	beq.n	801d252 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801d248:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801d24c:	4618      	mov	r0, r3
 801d24e:	f7ee fe68 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d252:	2c00      	cmp	r4, #0
 801d254:	d010      	beq.n	801d278 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801d256:	463b      	mov	r3, r7
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	699b      	ldr	r3, [r3, #24]
 801d25c:	2b00      	cmp	r3, #0
 801d25e:	db09      	blt.n	801d274 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801d260:	1d3b      	adds	r3, r7, #4
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	699b      	ldr	r3, [r3, #24]
 801d266:	463a      	mov	r2, r7
 801d268:	6812      	ldr	r2, [r2, #0]
 801d26a:	6992      	ldr	r2, [r2, #24]
 801d26c:	4293      	cmp	r3, r2
 801d26e:	d101      	bne.n	801d274 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801d270:	2401      	movs	r4, #1
 801d272:	e389      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d274:	2400      	movs	r4, #0
 801d276:	e387      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801d278:	2500      	movs	r5, #0
 801d27a:	1d3b      	adds	r3, r7, #4
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	f103 040c 	add.w	r4, r3, #12
 801d282:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d286:	496e      	ldr	r1, [pc, #440]	; (801d440 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801d288:	4618      	mov	r0, r3
 801d28a:	f7ee fa92 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d28e:	2601      	movs	r6, #1
 801d290:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d294:	4619      	mov	r1, r3
 801d296:	4620      	mov	r0, r4
 801d298:	f7ee fe4f 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d29c:	4603      	mov	r3, r0
 801d29e:	2b00      	cmp	r3, #0
 801d2a0:	d015      	beq.n	801d2ce <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801d2a2:	463b      	mov	r3, r7
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	f103 040c 	add.w	r4, r3, #12
 801d2aa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d2ae:	4963      	ldr	r1, [pc, #396]	; (801d43c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d2b0:	4618      	mov	r0, r3
 801d2b2:	f7ee fa7e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d2b6:	2501      	movs	r5, #1
 801d2b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d2bc:	4619      	mov	r1, r3
 801d2be:	4620      	mov	r0, r4
 801d2c0:	f7ee fe3b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d2c4:	4603      	mov	r3, r0
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d001      	beq.n	801d2ce <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801d2ca:	2401      	movs	r4, #1
 801d2cc:	e000      	b.n	801d2d0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801d2ce:	2400      	movs	r4, #0
 801d2d0:	2d00      	cmp	r5, #0
 801d2d2:	d004      	beq.n	801d2de <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801d2d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801d2d8:	4618      	mov	r0, r3
 801d2da:	f7ee fe22 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d2de:	2e00      	cmp	r6, #0
 801d2e0:	d004      	beq.n	801d2ec <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801d2e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801d2e6:	4618      	mov	r0, r3
 801d2e8:	f7ee fe1b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d2ec:	2c00      	cmp	r4, #0
 801d2ee:	d010      	beq.n	801d312 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801d2f0:	1d3b      	adds	r3, r7, #4
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	699b      	ldr	r3, [r3, #24]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	db09      	blt.n	801d30e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801d2fa:	1d3b      	adds	r3, r7, #4
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	699b      	ldr	r3, [r3, #24]
 801d300:	463a      	mov	r2, r7
 801d302:	6812      	ldr	r2, [r2, #0]
 801d304:	6992      	ldr	r2, [r2, #24]
 801d306:	4293      	cmp	r3, r2
 801d308:	d101      	bne.n	801d30e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801d30a:	2401      	movs	r4, #1
 801d30c:	e33c      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d30e:	2400      	movs	r4, #0
 801d310:	e33a      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801d312:	2500      	movs	r5, #0
 801d314:	1d3b      	adds	r3, r7, #4
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	f103 040c 	add.w	r4, r3, #12
 801d31c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d320:	4946      	ldr	r1, [pc, #280]	; (801d43c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d322:	4618      	mov	r0, r3
 801d324:	f7ee fa45 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d328:	2601      	movs	r6, #1
 801d32a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d32e:	4619      	mov	r1, r3
 801d330:	4620      	mov	r0, r4
 801d332:	f7ee fe02 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d336:	4603      	mov	r3, r0
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d015      	beq.n	801d368 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801d33c:	463b      	mov	r3, r7
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	f103 040c 	add.w	r4, r3, #12
 801d344:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d348:	493b      	ldr	r1, [pc, #236]	; (801d438 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801d34a:	4618      	mov	r0, r3
 801d34c:	f7ee fa31 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d350:	2501      	movs	r5, #1
 801d352:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d356:	4619      	mov	r1, r3
 801d358:	4620      	mov	r0, r4
 801d35a:	f7ee fdee 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d35e:	4603      	mov	r3, r0
 801d360:	2b00      	cmp	r3, #0
 801d362:	d001      	beq.n	801d368 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801d364:	2401      	movs	r4, #1
 801d366:	e000      	b.n	801d36a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801d368:	2400      	movs	r4, #0
 801d36a:	2d00      	cmp	r5, #0
 801d36c:	d004      	beq.n	801d378 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801d36e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801d372:	4618      	mov	r0, r3
 801d374:	f7ee fdd5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d378:	2e00      	cmp	r6, #0
 801d37a:	d004      	beq.n	801d386 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801d37c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801d380:	4618      	mov	r0, r3
 801d382:	f7ee fdce 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d386:	2c00      	cmp	r4, #0
 801d388:	d00b      	beq.n	801d3a2 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801d38a:	1d3b      	adds	r3, r7, #4
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	699a      	ldr	r2, [r3, #24]
 801d390:	463b      	mov	r3, r7
 801d392:	681b      	ldr	r3, [r3, #0]
 801d394:	699b      	ldr	r3, [r3, #24]
 801d396:	429a      	cmp	r2, r3
 801d398:	bf0c      	ite	eq
 801d39a:	2301      	moveq	r3, #1
 801d39c:	2300      	movne	r3, #0
 801d39e:	b2dc      	uxtb	r4, r3
 801d3a0:	e2f2      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801d3a2:	2500      	movs	r5, #0
 801d3a4:	1d3b      	adds	r3, r7, #4
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	f103 040c 	add.w	r4, r3, #12
 801d3ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d3b0:	4921      	ldr	r1, [pc, #132]	; (801d438 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801d3b2:	4618      	mov	r0, r3
 801d3b4:	f7ee f9fd 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d3b8:	2601      	movs	r6, #1
 801d3ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d3be:	4619      	mov	r1, r3
 801d3c0:	4620      	mov	r0, r4
 801d3c2:	f7ee fdba 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d3c6:	4603      	mov	r3, r0
 801d3c8:	2b00      	cmp	r3, #0
 801d3ca:	d015      	beq.n	801d3f8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801d3cc:	463b      	mov	r3, r7
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	f103 040c 	add.w	r4, r3, #12
 801d3d4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d3d8:	4918      	ldr	r1, [pc, #96]	; (801d43c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801d3da:	4618      	mov	r0, r3
 801d3dc:	f7ee f9e9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d3e0:	2501      	movs	r5, #1
 801d3e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d3e6:	4619      	mov	r1, r3
 801d3e8:	4620      	mov	r0, r4
 801d3ea:	f7ee fda6 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d3ee:	4603      	mov	r3, r0
 801d3f0:	2b00      	cmp	r3, #0
 801d3f2:	d001      	beq.n	801d3f8 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801d3f4:	2401      	movs	r4, #1
 801d3f6:	e000      	b.n	801d3fa <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801d3f8:	2400      	movs	r4, #0
 801d3fa:	2d00      	cmp	r5, #0
 801d3fc:	d004      	beq.n	801d408 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801d3fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801d402:	4618      	mov	r0, r3
 801d404:	f7ee fd8d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d408:	2e00      	cmp	r6, #0
 801d40a:	d004      	beq.n	801d416 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801d40c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801d410:	4618      	mov	r0, r3
 801d412:	f7ee fd86 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d416:	2c00      	cmp	r4, #0
 801d418:	d014      	beq.n	801d444 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801d41a:	1d3b      	adds	r3, r7, #4
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	699a      	ldr	r2, [r3, #24]
 801d420:	463b      	mov	r3, r7
 801d422:	681b      	ldr	r3, [r3, #0]
 801d424:	699b      	ldr	r3, [r3, #24]
 801d426:	429a      	cmp	r2, r3
 801d428:	bf0c      	ite	eq
 801d42a:	2301      	moveq	r3, #1
 801d42c:	2300      	movne	r3, #0
 801d42e:	b2dc      	uxtb	r4, r3
 801d430:	e2aa      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d432:	bf00      	nop
 801d434:	08024fd0 	.word	0x08024fd0
 801d438:	08024ff8 	.word	0x08024ff8
 801d43c:	08024fdc 	.word	0x08024fdc
 801d440:	08024fec 	.word	0x08024fec
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801d444:	2500      	movs	r5, #0
 801d446:	1d3b      	adds	r3, r7, #4
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	f103 040c 	add.w	r4, r3, #12
 801d44e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d452:	49ae      	ldr	r1, [pc, #696]	; (801d70c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d454:	4618      	mov	r0, r3
 801d456:	f7ee f9ac 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d45a:	2601      	movs	r6, #1
 801d45c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d460:	4619      	mov	r1, r3
 801d462:	4620      	mov	r0, r4
 801d464:	f7ee fd69 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d468:	4603      	mov	r3, r0
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d015      	beq.n	801d49a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d46e:	463b      	mov	r3, r7
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	f103 040c 	add.w	r4, r3, #12
 801d476:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d47a:	49a5      	ldr	r1, [pc, #660]	; (801d710 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d47c:	4618      	mov	r0, r3
 801d47e:	f7ee f998 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d482:	2501      	movs	r5, #1
 801d484:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d488:	4619      	mov	r1, r3
 801d48a:	4620      	mov	r0, r4
 801d48c:	f7ee fd55 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d490:	4603      	mov	r3, r0
 801d492:	2b00      	cmp	r3, #0
 801d494:	d001      	beq.n	801d49a <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801d496:	2401      	movs	r4, #1
 801d498:	e000      	b.n	801d49c <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801d49a:	2400      	movs	r4, #0
 801d49c:	2d00      	cmp	r5, #0
 801d49e:	d004      	beq.n	801d4aa <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801d4a0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f7ee fd3c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d4aa:	2e00      	cmp	r6, #0
 801d4ac:	d004      	beq.n	801d4b8 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801d4ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801d4b2:	4618      	mov	r0, r3
 801d4b4:	f7ee fd35 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d4b8:	2c00      	cmp	r4, #0
 801d4ba:	d010      	beq.n	801d4de <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801d4bc:	1d3b      	adds	r3, r7, #4
 801d4be:	681b      	ldr	r3, [r3, #0]
 801d4c0:	699b      	ldr	r3, [r3, #24]
 801d4c2:	2b00      	cmp	r3, #0
 801d4c4:	db09      	blt.n	801d4da <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d4c6:	1d3b      	adds	r3, r7, #4
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	699b      	ldr	r3, [r3, #24]
 801d4cc:	463a      	mov	r2, r7
 801d4ce:	6812      	ldr	r2, [r2, #0]
 801d4d0:	6992      	ldr	r2, [r2, #24]
 801d4d2:	4293      	cmp	r3, r2
 801d4d4:	d101      	bne.n	801d4da <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801d4d6:	2401      	movs	r4, #1
 801d4d8:	e256      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d4da:	2400      	movs	r4, #0
 801d4dc:	e254      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801d4de:	2500      	movs	r5, #0
 801d4e0:	1d3b      	adds	r3, r7, #4
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	f103 040c 	add.w	r4, r3, #12
 801d4e8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d4ec:	4988      	ldr	r1, [pc, #544]	; (801d710 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d4ee:	4618      	mov	r0, r3
 801d4f0:	f7ee f95f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d4f4:	2601      	movs	r6, #1
 801d4f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d4fa:	4619      	mov	r1, r3
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	f7ee fd1c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d502:	4603      	mov	r3, r0
 801d504:	2b00      	cmp	r3, #0
 801d506:	d015      	beq.n	801d534 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d508:	463b      	mov	r3, r7
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	f103 040c 	add.w	r4, r3, #12
 801d510:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d514:	497d      	ldr	r1, [pc, #500]	; (801d70c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d516:	4618      	mov	r0, r3
 801d518:	f7ee f94b 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d51c:	2501      	movs	r5, #1
 801d51e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d522:	4619      	mov	r1, r3
 801d524:	4620      	mov	r0, r4
 801d526:	f7ee fd08 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d52a:	4603      	mov	r3, r0
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d001      	beq.n	801d534 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801d530:	2401      	movs	r4, #1
 801d532:	e000      	b.n	801d536 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801d534:	2400      	movs	r4, #0
 801d536:	2d00      	cmp	r5, #0
 801d538:	d004      	beq.n	801d544 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801d53a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801d53e:	4618      	mov	r0, r3
 801d540:	f7ee fcef 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d544:	2e00      	cmp	r6, #0
 801d546:	d004      	beq.n	801d552 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801d548:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801d54c:	4618      	mov	r0, r3
 801d54e:	f7ee fce8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d552:	2c00      	cmp	r4, #0
 801d554:	d010      	beq.n	801d578 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801d556:	463b      	mov	r3, r7
 801d558:	681b      	ldr	r3, [r3, #0]
 801d55a:	699b      	ldr	r3, [r3, #24]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	db09      	blt.n	801d574 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d560:	1d3b      	adds	r3, r7, #4
 801d562:	681b      	ldr	r3, [r3, #0]
 801d564:	699b      	ldr	r3, [r3, #24]
 801d566:	463a      	mov	r2, r7
 801d568:	6812      	ldr	r2, [r2, #0]
 801d56a:	6992      	ldr	r2, [r2, #24]
 801d56c:	4293      	cmp	r3, r2
 801d56e:	d101      	bne.n	801d574 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801d570:	2401      	movs	r4, #1
 801d572:	e209      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d574:	2400      	movs	r4, #0
 801d576:	e207      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801d578:	1d3b      	adds	r3, r7, #4
 801d57a:	681b      	ldr	r3, [r3, #0]
 801d57c:	f103 020c 	add.w	r2, r3, #12
 801d580:	463b      	mov	r3, r7
 801d582:	681b      	ldr	r3, [r3, #0]
 801d584:	330c      	adds	r3, #12
 801d586:	4619      	mov	r1, r3
 801d588:	4610      	mov	r0, r2
 801d58a:	f7ee fd1b 	bl	800bfc4 <_ZneRK12SimpleStringS1_>
 801d58e:	4603      	mov	r3, r0
 801d590:	2b00      	cmp	r3, #0
 801d592:	d001      	beq.n	801d598 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801d594:	2400      	movs	r4, #0
 801d596:	e1f7      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801d598:	1d3b      	adds	r3, r7, #4
 801d59a:	681b      	ldr	r3, [r3, #0]
 801d59c:	f103 040c 	add.w	r4, r3, #12
 801d5a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d5a4:	495b      	ldr	r1, [pc, #364]	; (801d714 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801d5a6:	4618      	mov	r0, r3
 801d5a8:	f7ee f903 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d5ac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d5b0:	4619      	mov	r1, r3
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	f7ee fcc1 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d5b8:	4603      	mov	r3, r0
 801d5ba:	461c      	mov	r4, r3
 801d5bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801d5c0:	4618      	mov	r0, r3
 801d5c2:	f7ee fcae 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d5c6:	2c00      	cmp	r4, #0
 801d5c8:	d00b      	beq.n	801d5e2 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801d5ca:	1d3b      	adds	r3, r7, #4
 801d5cc:	681b      	ldr	r3, [r3, #0]
 801d5ce:	7e1a      	ldrb	r2, [r3, #24]
 801d5d0:	463b      	mov	r3, r7
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	7e1b      	ldrb	r3, [r3, #24]
 801d5d6:	429a      	cmp	r2, r3
 801d5d8:	bf0c      	ite	eq
 801d5da:	2301      	moveq	r3, #1
 801d5dc:	2300      	movne	r3, #0
 801d5de:	b2dc      	uxtb	r4, r3
 801d5e0:	e1d2      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801d5e2:	1d3b      	adds	r3, r7, #4
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	f103 040c 	add.w	r4, r3, #12
 801d5ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d5ee:	494a      	ldr	r1, [pc, #296]	; (801d718 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801d5f0:	4618      	mov	r0, r3
 801d5f2:	f7ee f8de 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d5f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d5fa:	4619      	mov	r1, r3
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f7ee fc9c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d602:	4603      	mov	r3, r0
 801d604:	461c      	mov	r4, r3
 801d606:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801d60a:	4618      	mov	r0, r3
 801d60c:	f7ee fc89 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d610:	2c00      	cmp	r4, #0
 801d612:	d00b      	beq.n	801d62c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801d614:	1d3b      	adds	r3, r7, #4
 801d616:	681b      	ldr	r3, [r3, #0]
 801d618:	699a      	ldr	r2, [r3, #24]
 801d61a:	463b      	mov	r3, r7
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	699b      	ldr	r3, [r3, #24]
 801d620:	429a      	cmp	r2, r3
 801d622:	bf0c      	ite	eq
 801d624:	2301      	moveq	r3, #1
 801d626:	2300      	movne	r3, #0
 801d628:	b2dc      	uxtb	r4, r3
 801d62a:	e1ad      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801d62c:	1d3b      	adds	r3, r7, #4
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	f103 040c 	add.w	r4, r3, #12
 801d634:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d638:	4938      	ldr	r1, [pc, #224]	; (801d71c <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801d63a:	4618      	mov	r0, r3
 801d63c:	f7ee f8b9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d640:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d644:	4619      	mov	r1, r3
 801d646:	4620      	mov	r0, r4
 801d648:	f7ee fc77 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d64c:	4603      	mov	r3, r0
 801d64e:	461c      	mov	r4, r3
 801d650:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801d654:	4618      	mov	r0, r3
 801d656:	f7ee fc64 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d65a:	2c00      	cmp	r4, #0
 801d65c:	d00b      	beq.n	801d676 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801d65e:	1d3b      	adds	r3, r7, #4
 801d660:	681b      	ldr	r3, [r3, #0]
 801d662:	699a      	ldr	r2, [r3, #24]
 801d664:	463b      	mov	r3, r7
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	699b      	ldr	r3, [r3, #24]
 801d66a:	429a      	cmp	r2, r3
 801d66c:	bf0c      	ite	eq
 801d66e:	2301      	moveq	r3, #1
 801d670:	2300      	movne	r3, #0
 801d672:	b2dc      	uxtb	r4, r3
 801d674:	e188      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801d676:	1d3b      	adds	r3, r7, #4
 801d678:	681b      	ldr	r3, [r3, #0]
 801d67a:	f103 040c 	add.w	r4, r3, #12
 801d67e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d682:	4922      	ldr	r1, [pc, #136]	; (801d70c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801d684:	4618      	mov	r0, r3
 801d686:	f7ee f894 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d68a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d68e:	4619      	mov	r1, r3
 801d690:	4620      	mov	r0, r4
 801d692:	f7ee fc52 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d696:	4603      	mov	r3, r0
 801d698:	461c      	mov	r4, r3
 801d69a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801d69e:	4618      	mov	r0, r3
 801d6a0:	f7ee fc3f 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d6a4:	2c00      	cmp	r4, #0
 801d6a6:	d00b      	beq.n	801d6c0 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801d6a8:	1d3b      	adds	r3, r7, #4
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	699a      	ldr	r2, [r3, #24]
 801d6ae:	463b      	mov	r3, r7
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	699b      	ldr	r3, [r3, #24]
 801d6b4:	429a      	cmp	r2, r3
 801d6b6:	bf0c      	ite	eq
 801d6b8:	2301      	moveq	r3, #1
 801d6ba:	2300      	movne	r3, #0
 801d6bc:	b2dc      	uxtb	r4, r3
 801d6be:	e163      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801d6c0:	1d3b      	adds	r3, r7, #4
 801d6c2:	681b      	ldr	r3, [r3, #0]
 801d6c4:	f103 040c 	add.w	r4, r3, #12
 801d6c8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d6cc:	4910      	ldr	r1, [pc, #64]	; (801d710 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7ee f86f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d6d4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d6d8:	4619      	mov	r1, r3
 801d6da:	4620      	mov	r0, r4
 801d6dc:	f7ee fc2d 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d6e0:	4603      	mov	r3, r0
 801d6e2:	461c      	mov	r4, r3
 801d6e4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801d6e8:	4618      	mov	r0, r3
 801d6ea:	f7ee fc1a 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d6ee:	2c00      	cmp	r4, #0
 801d6f0:	d016      	beq.n	801d720 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801d6f2:	1d3b      	adds	r3, r7, #4
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	699a      	ldr	r2, [r3, #24]
 801d6f8:	463b      	mov	r3, r7
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	699b      	ldr	r3, [r3, #24]
 801d6fe:	429a      	cmp	r2, r3
 801d700:	bf0c      	ite	eq
 801d702:	2301      	moveq	r3, #1
 801d704:	2300      	movne	r3, #0
 801d706:	b2dc      	uxtb	r4, r3
 801d708:	e13e      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801d70a:	bf00      	nop
 801d70c:	08024fec 	.word	0x08024fec
 801d710:	08024ff8 	.word	0x08024ff8
 801d714:	08024fd4 	.word	0x08024fd4
 801d718:	08024fd0 	.word	0x08024fd0
 801d71c:	08024fdc 	.word	0x08024fdc
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801d720:	1d3b      	adds	r3, r7, #4
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	f103 040c 	add.w	r4, r3, #12
 801d728:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d72c:	4999      	ldr	r1, [pc, #612]	; (801d994 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801d72e:	4618      	mov	r0, r3
 801d730:	f7ee f83f 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d734:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d738:	4619      	mov	r1, r3
 801d73a:	4620      	mov	r0, r4
 801d73c:	f7ee fbfd 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d740:	4603      	mov	r3, r0
 801d742:	461c      	mov	r4, r3
 801d744:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801d748:	4618      	mov	r0, r3
 801d74a:	f7ee fbea 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d74e:	2c00      	cmp	r4, #0
 801d750:	d026      	beq.n	801d7a0 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801d752:	1d3b      	adds	r3, r7, #4
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	699a      	ldr	r2, [r3, #24]
 801d758:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d75c:	4611      	mov	r1, r2
 801d75e:	4618      	mov	r0, r3
 801d760:	f7ee f827 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d764:	463b      	mov	r3, r7
 801d766:	681b      	ldr	r3, [r3, #0]
 801d768:	699a      	ldr	r2, [r3, #24]
 801d76a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d76e:	4611      	mov	r1, r2
 801d770:	4618      	mov	r0, r3
 801d772:	f7ee f81e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d776:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801d77a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d77e:	4611      	mov	r1, r2
 801d780:	4618      	mov	r0, r3
 801d782:	f7ee fbda 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d786:	4603      	mov	r3, r0
 801d788:	461c      	mov	r4, r3
 801d78a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801d78e:	4618      	mov	r0, r3
 801d790:	f7ee fbc7 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d794:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801d798:	4618      	mov	r0, r3
 801d79a:	f7ee fbc2 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d79e:	e0f3      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801d7a0:	1d3b      	adds	r3, r7, #4
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	f103 040c 	add.w	r4, r3, #12
 801d7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d7ac:	497a      	ldr	r1, [pc, #488]	; (801d998 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f7ed ffff 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d7b8:	4619      	mov	r1, r3
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	f7ee fbbd 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d7c0:	4603      	mov	r3, r0
 801d7c2:	461c      	mov	r4, r3
 801d7c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7ee fbaa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d7ce:	2c00      	cmp	r4, #0
 801d7d0:	d00b      	beq.n	801d7ea <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801d7d2:	1d3b      	adds	r3, r7, #4
 801d7d4:	681b      	ldr	r3, [r3, #0]
 801d7d6:	699a      	ldr	r2, [r3, #24]
 801d7d8:	463b      	mov	r3, r7
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	699b      	ldr	r3, [r3, #24]
 801d7de:	429a      	cmp	r2, r3
 801d7e0:	bf0c      	ite	eq
 801d7e2:	2301      	moveq	r3, #1
 801d7e4:	2300      	movne	r3, #0
 801d7e6:	b2dc      	uxtb	r4, r3
 801d7e8:	e0ce      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801d7ea:	1d3b      	adds	r3, r7, #4
 801d7ec:	681b      	ldr	r3, [r3, #0]
 801d7ee:	f103 040c 	add.w	r4, r3, #12
 801d7f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d7f6:	4969      	ldr	r1, [pc, #420]	; (801d99c <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	f7ed ffda 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d7fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d802:	4619      	mov	r1, r3
 801d804:	4620      	mov	r0, r4
 801d806:	f7ee fb98 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d80a:	4603      	mov	r3, r0
 801d80c:	461c      	mov	r4, r3
 801d80e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801d812:	4618      	mov	r0, r3
 801d814:	f7ee fb85 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d818:	2c00      	cmp	r4, #0
 801d81a:	d00b      	beq.n	801d834 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801d81c:	1d3b      	adds	r3, r7, #4
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	699a      	ldr	r2, [r3, #24]
 801d822:	463b      	mov	r3, r7
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	699b      	ldr	r3, [r3, #24]
 801d828:	429a      	cmp	r2, r3
 801d82a:	bf0c      	ite	eq
 801d82c:	2301      	moveq	r3, #1
 801d82e:	2300      	movne	r3, #0
 801d830:	b2dc      	uxtb	r4, r3
 801d832:	e0a9      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801d834:	1d3b      	adds	r3, r7, #4
 801d836:	681b      	ldr	r3, [r3, #0]
 801d838:	f103 040c 	add.w	r4, r3, #12
 801d83c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d840:	4957      	ldr	r1, [pc, #348]	; (801d9a0 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801d842:	4618      	mov	r0, r3
 801d844:	f7ed ffb5 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d848:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d84c:	4619      	mov	r1, r3
 801d84e:	4620      	mov	r0, r4
 801d850:	f7ee fb73 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d854:	4603      	mov	r3, r0
 801d856:	461c      	mov	r4, r3
 801d858:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801d85c:	4618      	mov	r0, r3
 801d85e:	f7ee fb60 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d862:	2c00      	cmp	r4, #0
 801d864:	d00b      	beq.n	801d87e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801d866:	1d3b      	adds	r3, r7, #4
 801d868:	681b      	ldr	r3, [r3, #0]
 801d86a:	699a      	ldr	r2, [r3, #24]
 801d86c:	463b      	mov	r3, r7
 801d86e:	681b      	ldr	r3, [r3, #0]
 801d870:	699b      	ldr	r3, [r3, #24]
 801d872:	429a      	cmp	r2, r3
 801d874:	bf0c      	ite	eq
 801d876:	2301      	moveq	r3, #1
 801d878:	2300      	movne	r3, #0
 801d87a:	b2dc      	uxtb	r4, r3
 801d87c:	e084      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801d87e:	1d3b      	adds	r3, r7, #4
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	f103 040c 	add.w	r4, r3, #12
 801d886:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d88a:	4946      	ldr	r1, [pc, #280]	; (801d9a4 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801d88c:	4618      	mov	r0, r3
 801d88e:	f7ed ff90 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d892:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d896:	4619      	mov	r1, r3
 801d898:	4620      	mov	r0, r4
 801d89a:	f7ee fb4e 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d89e:	4603      	mov	r3, r0
 801d8a0:	461c      	mov	r4, r3
 801d8a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801d8a6:	4618      	mov	r0, r3
 801d8a8:	f7ee fb3b 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d8ac:	2c00      	cmp	r4, #0
 801d8ae:	d01c      	beq.n	801d8ea <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801d8b0:	1d3b      	adds	r3, r7, #4
 801d8b2:	681b      	ldr	r3, [r3, #0]
 801d8b4:	ed93 7b06 	vldr	d7, [r3, #24]
 801d8b8:	463b      	mov	r3, r7
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	ed93 6b06 	vldr	d6, [r3, #24]
 801d8c0:	1d3b      	adds	r3, r7, #4
 801d8c2:	681b      	ldr	r3, [r3, #0]
 801d8c4:	ed93 5b08 	vldr	d5, [r3, #32]
 801d8c8:	eeb0 2a45 	vmov.f32	s4, s10
 801d8cc:	eef0 2a65 	vmov.f32	s5, s11
 801d8d0:	eeb0 1a46 	vmov.f32	s2, s12
 801d8d4:	eef0 1a66 	vmov.f32	s3, s13
 801d8d8:	eeb0 0a47 	vmov.f32	s0, s14
 801d8dc:	eef0 0a67 	vmov.f32	s1, s15
 801d8e0:	f7f3 fe1a 	bl	8011518 <_Z13doubles_equalddd>
 801d8e4:	4603      	mov	r3, r0
 801d8e6:	461c      	mov	r4, r3
 801d8e8:	e04e      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801d8ea:	1d3b      	adds	r3, r7, #4
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	f103 040c 	add.w	r4, r3, #12
 801d8f2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d8f6:	492c      	ldr	r1, [pc, #176]	; (801d9a8 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	f7ed ff5a 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d8fe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d902:	4619      	mov	r1, r3
 801d904:	4620      	mov	r0, r4
 801d906:	f7ee fb18 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d90a:	4603      	mov	r3, r0
 801d90c:	461c      	mov	r4, r3
 801d90e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801d912:	4618      	mov	r0, r3
 801d914:	f7ee fb05 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801d918:	2c00      	cmp	r4, #0
 801d91a:	d01c      	beq.n	801d956 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801d91c:	1d3b      	adds	r3, r7, #4
 801d91e:	681b      	ldr	r3, [r3, #0]
 801d920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801d922:	463b      	mov	r3, r7
 801d924:	681b      	ldr	r3, [r3, #0]
 801d926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d928:	429a      	cmp	r2, r3
 801d92a:	d001      	beq.n	801d930 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801d92c:	2400      	movs	r4, #0
 801d92e:	e02b      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801d930:	1d3b      	adds	r3, r7, #4
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	6998      	ldr	r0, [r3, #24]
 801d936:	463b      	mov	r3, r7
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	6999      	ldr	r1, [r3, #24]
 801d93c:	1d3b      	adds	r3, r7, #4
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d942:	461a      	mov	r2, r3
 801d944:	f7ed fe54 	bl	800b5f0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 801d948:	4603      	mov	r3, r0
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	bf0c      	ite	eq
 801d94e:	2301      	moveq	r3, #1
 801d950:	2300      	movne	r3, #0
 801d952:	b2dc      	uxtb	r4, r3
 801d954:	e018      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801d956:	1d3b      	adds	r3, r7, #4
 801d958:	681b      	ldr	r3, [r3, #0]
 801d95a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d012      	beq.n	801d986 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801d960:	1d3b      	adds	r3, r7, #4
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801d966:	1d3b      	adds	r3, r7, #4
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	3308      	adds	r3, #8
 801d970:	681b      	ldr	r3, [r3, #0]
 801d972:	1d3a      	adds	r2, r7, #4
 801d974:	6812      	ldr	r2, [r2, #0]
 801d976:	6991      	ldr	r1, [r2, #24]
 801d978:	463a      	mov	r2, r7
 801d97a:	6812      	ldr	r2, [r2, #0]
 801d97c:	6992      	ldr	r2, [r2, #24]
 801d97e:	4798      	blx	r3
 801d980:	4603      	mov	r3, r0
 801d982:	461c      	mov	r4, r3
 801d984:	e000      	b.n	801d988 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801d986:	2400      	movs	r4, #0
 801d988:	4623      	mov	r3, r4
}
 801d98a:	4618      	mov	r0, r3
 801d98c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801d990:	46bd      	mov	sp, r7
 801d992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d994:	0802509c 	.word	0x0802509c
 801d998:	0802507c 	.word	0x0802507c
 801d99c:	08025084 	.word	0x08025084
 801d9a0:	08025090 	.word	0x08025090
 801d9a4:	08025074 	.word	0x08025074
 801d9a8:	080250a8 	.word	0x080250a8

0801d9ac <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801d9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d9ae:	b087      	sub	sp, #28
 801d9b0:	af00      	add	r7, sp, #0
 801d9b2:	6078      	str	r0, [r7, #4]
 801d9b4:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801d9b6:	687b      	ldr	r3, [r7, #4]
 801d9b8:	f103 020c 	add.w	r2, r3, #12
 801d9bc:	683b      	ldr	r3, [r7, #0]
 801d9be:	330c      	adds	r3, #12
 801d9c0:	4619      	mov	r1, r3
 801d9c2:	4610      	mov	r0, r2
 801d9c4:	f7ee fab9 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d001      	beq.n	801d9d2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801d9ce:	2301      	movs	r3, #1
 801d9d0:	e03c      	b.n	801da4c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801d9d2:	2500      	movs	r5, #0
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	f103 040c 	add.w	r4, r3, #12
 801d9da:	f107 0308 	add.w	r3, r7, #8
 801d9de:	491d      	ldr	r1, [pc, #116]	; (801da54 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801d9e0:	4618      	mov	r0, r3
 801d9e2:	f7ed fee6 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801d9e6:	2601      	movs	r6, #1
 801d9e8:	f107 0308 	add.w	r3, r7, #8
 801d9ec:	4619      	mov	r1, r3
 801d9ee:	4620      	mov	r0, r4
 801d9f0:	f7ee faa3 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801d9f4:	4603      	mov	r3, r0
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	d014      	beq.n	801da24 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801d9fa:	683b      	ldr	r3, [r7, #0]
 801d9fc:	f103 040c 	add.w	r4, r3, #12
 801da00:	f107 0310 	add.w	r3, r7, #16
 801da04:	4914      	ldr	r1, [pc, #80]	; (801da58 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801da06:	4618      	mov	r0, r3
 801da08:	f7ed fed3 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801da0c:	2501      	movs	r5, #1
 801da0e:	f107 0310 	add.w	r3, r7, #16
 801da12:	4619      	mov	r1, r3
 801da14:	4620      	mov	r0, r4
 801da16:	f7ee fa90 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801da1a:	4603      	mov	r3, r0
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d001      	beq.n	801da24 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801da20:	2401      	movs	r4, #1
 801da22:	e000      	b.n	801da26 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801da24:	2400      	movs	r4, #0
 801da26:	2d00      	cmp	r5, #0
 801da28:	d004      	beq.n	801da34 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801da2a:	f107 0310 	add.w	r3, r7, #16
 801da2e:	4618      	mov	r0, r3
 801da30:	f7ee fa77 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801da34:	2e00      	cmp	r6, #0
 801da36:	d004      	beq.n	801da42 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801da38:	f107 0308 	add.w	r3, r7, #8
 801da3c:	4618      	mov	r0, r3
 801da3e:	f7ee fa70 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801da42:	2c00      	cmp	r4, #0
 801da44:	d001      	beq.n	801da4a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801da46:	2301      	movs	r3, #1
 801da48:	e000      	b.n	801da4c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801da4a:	2300      	movs	r3, #0
}
 801da4c:	4618      	mov	r0, r3
 801da4e:	371c      	adds	r7, #28
 801da50:	46bd      	mov	sp, r7
 801da52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da54:	08025084 	.word	0x08025084
 801da58:	0802507c 	.word	0x0802507c

0801da5c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801da5c:	b590      	push	{r4, r7, lr}
 801da5e:	b0b9      	sub	sp, #228	; 0xe4
 801da60:	af00      	add	r7, sp, #0
 801da62:	6078      	str	r0, [r7, #4]
 801da64:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801da66:	683b      	ldr	r3, [r7, #0]
 801da68:	f103 040c 	add.w	r4, r3, #12
 801da6c:	f107 0308 	add.w	r3, r7, #8
 801da70:	49d4      	ldr	r1, [pc, #848]	; (801ddc4 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801da72:	4618      	mov	r0, r3
 801da74:	f7ed fe9d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801da78:	f107 0308 	add.w	r3, r7, #8
 801da7c:	4619      	mov	r1, r3
 801da7e:	4620      	mov	r0, r4
 801da80:	f7ee fa5b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801da84:	4603      	mov	r3, r0
 801da86:	461c      	mov	r4, r3
 801da88:	f107 0308 	add.w	r3, r7, #8
 801da8c:	4618      	mov	r0, r3
 801da8e:	f7ee fa48 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801da92:	2c00      	cmp	r4, #0
 801da94:	d007      	beq.n	801daa6 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801da96:	683b      	ldr	r3, [r7, #0]
 801da98:	7e1a      	ldrb	r2, [r3, #24]
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	4611      	mov	r1, r2
 801da9e:	4618      	mov	r0, r3
 801daa0:	f7ee fcb0 	bl	800c404 <_Z10StringFromb>
 801daa4:	e23f      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801daa6:	683b      	ldr	r3, [r7, #0]
 801daa8:	f103 040c 	add.w	r4, r3, #12
 801daac:	f107 0310 	add.w	r3, r7, #16
 801dab0:	49c5      	ldr	r1, [pc, #788]	; (801ddc8 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801dab2:	4618      	mov	r0, r3
 801dab4:	f7ed fe7d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dab8:	f107 0310 	add.w	r3, r7, #16
 801dabc:	4619      	mov	r1, r3
 801dabe:	4620      	mov	r0, r4
 801dac0:	f7ee fa3b 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801dac4:	4603      	mov	r3, r0
 801dac6:	461c      	mov	r4, r3
 801dac8:	f107 0310 	add.w	r3, r7, #16
 801dacc:	4618      	mov	r0, r3
 801dace:	f7ee fa28 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dad2:	2c00      	cmp	r4, #0
 801dad4:	d03b      	beq.n	801db4e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801dad6:	683b      	ldr	r3, [r7, #0]
 801dad8:	699a      	ldr	r2, [r3, #24]
 801dada:	f107 0320 	add.w	r3, r7, #32
 801dade:	4611      	mov	r1, r2
 801dae0:	4618      	mov	r0, r3
 801dae2:	f7ee fce5 	bl	800c4b0 <_Z10StringFromi>
 801dae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801daea:	49b8      	ldr	r1, [pc, #736]	; (801ddcc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801daec:	4618      	mov	r0, r3
 801daee:	f7ed fe60 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801daf2:	f107 0318 	add.w	r3, r7, #24
 801daf6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801dafa:	f107 0120 	add.w	r1, r7, #32
 801dafe:	4618      	mov	r0, r3
 801db00:	f7ee fa71 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801db04:	683b      	ldr	r3, [r7, #0]
 801db06:	699a      	ldr	r2, [r3, #24]
 801db08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801db0c:	4611      	mov	r1, r2
 801db0e:	4618      	mov	r0, r3
 801db10:	f7ee fdbe 	bl	800c690 <_Z30BracketsFormattedHexStringFromi>
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801db1a:	f107 0118 	add.w	r1, r7, #24
 801db1e:	4618      	mov	r0, r3
 801db20:	f7ee fa61 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801db24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801db28:	4618      	mov	r0, r3
 801db2a:	f7ee f9fa 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801db2e:	f107 0318 	add.w	r3, r7, #24
 801db32:	4618      	mov	r0, r3
 801db34:	f7ee f9f5 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801db38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801db3c:	4618      	mov	r0, r3
 801db3e:	f7ee f9f0 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801db42:	f107 0320 	add.w	r3, r7, #32
 801db46:	4618      	mov	r0, r3
 801db48:	f7ee f9eb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801db4c:	e1eb      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801db4e:	683b      	ldr	r3, [r7, #0]
 801db50:	f103 040c 	add.w	r4, r3, #12
 801db54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db58:	499d      	ldr	r1, [pc, #628]	; (801ddd0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801db5a:	4618      	mov	r0, r3
 801db5c:	f7ed fe29 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801db60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db64:	4619      	mov	r1, r3
 801db66:	4620      	mov	r0, r4
 801db68:	f7ee f9e7 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801db6c:	4603      	mov	r3, r0
 801db6e:	461c      	mov	r4, r3
 801db70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801db74:	4618      	mov	r0, r3
 801db76:	f7ee f9d4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801db7a:	2c00      	cmp	r4, #0
 801db7c:	d03b      	beq.n	801dbf6 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801db7e:	683b      	ldr	r3, [r7, #0]
 801db80:	699a      	ldr	r2, [r3, #24]
 801db82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801db86:	4611      	mov	r1, r2
 801db88:	4618      	mov	r0, r3
 801db8a:	f7ee fef9 	bl	800c980 <_Z10StringFromj>
 801db8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801db92:	498e      	ldr	r1, [pc, #568]	; (801ddcc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801db94:	4618      	mov	r0, r3
 801db96:	f7ed fe0c 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801db9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801db9e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801dba2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801dba6:	4618      	mov	r0, r3
 801dba8:	f7ee fa1d 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dbac:	683b      	ldr	r3, [r7, #0]
 801dbae:	699a      	ldr	r2, [r3, #24]
 801dbb0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dbb4:	4611      	mov	r1, r2
 801dbb6:	4618      	mov	r0, r3
 801dbb8:	f7ee fd86 	bl	800c6c8 <_Z30BracketsFormattedHexStringFromj>
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801dbc2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	f7ee fa0d 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dbcc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801dbd0:	4618      	mov	r0, r3
 801dbd2:	f7ee f9a6 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dbd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801dbda:	4618      	mov	r0, r3
 801dbdc:	f7ee f9a1 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dbe0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	f7ee f99c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dbea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801dbee:	4618      	mov	r0, r3
 801dbf0:	f7ee f997 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dbf4:	e197      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801dbf6:	683b      	ldr	r3, [r7, #0]
 801dbf8:	f103 040c 	add.w	r4, r3, #12
 801dbfc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dc00:	4974      	ldr	r1, [pc, #464]	; (801ddd4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801dc02:	4618      	mov	r0, r3
 801dc04:	f7ed fdd5 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dc08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	4620      	mov	r0, r4
 801dc10:	f7ee f993 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801dc14:	4603      	mov	r3, r0
 801dc16:	461c      	mov	r4, r3
 801dc18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801dc1c:	4618      	mov	r0, r3
 801dc1e:	f7ee f980 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dc22:	2c00      	cmp	r4, #0
 801dc24:	d03b      	beq.n	801dc9e <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801dc26:	683b      	ldr	r3, [r7, #0]
 801dc28:	699a      	ldr	r2, [r3, #24]
 801dc2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dc2e:	4611      	mov	r1, r2
 801dc30:	4618      	mov	r0, r3
 801dc32:	f7ee fc4f 	bl	800c4d4 <_Z10StringFroml>
 801dc36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801dc3a:	4964      	ldr	r1, [pc, #400]	; (801ddcc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f7ed fdb8 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dc42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dc46:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801dc4a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801dc4e:	4618      	mov	r0, r3
 801dc50:	f7ee f9c9 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dc54:	683b      	ldr	r3, [r7, #0]
 801dc56:	699a      	ldr	r2, [r3, #24]
 801dc58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dc5c:	4611      	mov	r1, r2
 801dc5e:	4618      	mov	r0, r3
 801dc60:	f7ee fd4e 	bl	800c700 <_Z30BracketsFormattedHexStringFroml>
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801dc6a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801dc6e:	4618      	mov	r0, r3
 801dc70:	f7ee f9b9 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dc74:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801dc78:	4618      	mov	r0, r3
 801dc7a:	f7ee f952 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dc7e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801dc82:	4618      	mov	r0, r3
 801dc84:	f7ee f94d 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dc88:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801dc8c:	4618      	mov	r0, r3
 801dc8e:	f7ee f948 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dc92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801dc96:	4618      	mov	r0, r3
 801dc98:	f7ee f943 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dc9c:	e143      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801dc9e:	683b      	ldr	r3, [r7, #0]
 801dca0:	f103 040c 	add.w	r4, r3, #12
 801dca4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801dca8:	494b      	ldr	r1, [pc, #300]	; (801ddd8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801dcaa:	4618      	mov	r0, r3
 801dcac:	f7ed fd81 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dcb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801dcb4:	4619      	mov	r1, r3
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	f7ee f93f 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801dcbc:	4603      	mov	r3, r0
 801dcbe:	461c      	mov	r4, r3
 801dcc0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801dcc4:	4618      	mov	r0, r3
 801dcc6:	f7ee f92c 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dcca:	2c00      	cmp	r4, #0
 801dccc:	d03b      	beq.n	801dd46 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801dcce:	683b      	ldr	r3, [r7, #0]
 801dcd0:	699a      	ldr	r2, [r3, #24]
 801dcd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801dcd6:	4611      	mov	r1, r2
 801dcd8:	4618      	mov	r0, r3
 801dcda:	f7ee fe63 	bl	800c9a4 <_Z10StringFromm>
 801dcde:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801dce2:	493a      	ldr	r1, [pc, #232]	; (801ddcc <_ZNK14MockNamedValue8toStringEv+0x370>)
 801dce4:	4618      	mov	r0, r3
 801dce6:	f7ed fd64 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dcea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801dcee:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801dcf2:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801dcf6:	4618      	mov	r0, r3
 801dcf8:	f7ee f975 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dcfc:	683b      	ldr	r3, [r7, #0]
 801dcfe:	699a      	ldr	r2, [r3, #24]
 801dd00:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801dd04:	4611      	mov	r1, r2
 801dd06:	4618      	mov	r0, r3
 801dd08:	f7ee fd16 	bl	800c738 <_Z30BracketsFormattedHexStringFromm>
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801dd12:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801dd16:	4618      	mov	r0, r3
 801dd18:	f7ee f965 	bl	800bfe6 <_ZNK12SimpleStringplERKS_>
 801dd1c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801dd20:	4618      	mov	r0, r3
 801dd22:	f7ee f8fe 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dd26:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801dd2a:	4618      	mov	r0, r3
 801dd2c:	f7ee f8f9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dd30:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801dd34:	4618      	mov	r0, r3
 801dd36:	f7ee f8f4 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dd3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801dd3e:	4618      	mov	r0, r3
 801dd40:	f7ee f8ef 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dd44:	e0ef      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801dd46:	683b      	ldr	r3, [r7, #0]
 801dd48:	f103 040c 	add.w	r4, r3, #12
 801dd4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dd50:	4922      	ldr	r1, [pc, #136]	; (801dddc <_ZNK14MockNamedValue8toStringEv+0x380>)
 801dd52:	4618      	mov	r0, r3
 801dd54:	f7ed fd2d 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dd58:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dd5c:	4619      	mov	r1, r3
 801dd5e:	4620      	mov	r0, r4
 801dd60:	f7ee f8eb 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801dd64:	4603      	mov	r3, r0
 801dd66:	461c      	mov	r4, r3
 801dd68:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801dd6c:	4618      	mov	r0, r3
 801dd6e:	f7ee f8d8 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801dd72:	2c00      	cmp	r4, #0
 801dd74:	d006      	beq.n	801dd84 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801dd76:	683b      	ldr	r3, [r7, #0]
 801dd78:	699b      	ldr	r3, [r3, #24]
 801dd7a:	4619      	mov	r1, r3
 801dd7c:	6878      	ldr	r0, [r7, #4]
 801dd7e:	f7ed fd18 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dd82:	e0d0      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801dd84:	683b      	ldr	r3, [r7, #0]
 801dd86:	f103 040c 	add.w	r4, r3, #12
 801dd8a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801dd8e:	4914      	ldr	r1, [pc, #80]	; (801dde0 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801dd90:	4618      	mov	r0, r3
 801dd92:	f7ed fd0e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dd96:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801dd9a:	4619      	mov	r1, r3
 801dd9c:	4620      	mov	r0, r4
 801dd9e:	f7ee f8cc 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801dda2:	4603      	mov	r3, r0
 801dda4:	461c      	mov	r4, r3
 801dda6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801ddaa:	4618      	mov	r0, r3
 801ddac:	f7ee f8b9 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801ddb0:	2c00      	cmp	r4, #0
 801ddb2:	d017      	beq.n	801dde4 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801ddb4:	683b      	ldr	r3, [r7, #0]
 801ddb6:	699a      	ldr	r2, [r3, #24]
 801ddb8:	687b      	ldr	r3, [r7, #4]
 801ddba:	4611      	mov	r1, r2
 801ddbc:	4618      	mov	r0, r3
 801ddbe:	f7ee fb9b 	bl	800c4f8 <_Z10StringFromPKv>
 801ddc2:	e0b0      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801ddc4:	08024fd4 	.word	0x08024fd4
 801ddc8:	08024fd0 	.word	0x08024fd0
 801ddcc:	080250c0 	.word	0x080250c0
 801ddd0:	08024fdc 	.word	0x08024fdc
 801ddd4:	08024fec 	.word	0x08024fec
 801ddd8:	08024ff8 	.word	0x08024ff8
 801dddc:	0802509c 	.word	0x0802509c
 801dde0:	0802507c 	.word	0x0802507c
    else if (type_ == "void (*)()")
 801dde4:	683b      	ldr	r3, [r7, #0]
 801dde6:	f103 040c 	add.w	r4, r3, #12
 801ddea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ddee:	4950      	ldr	r1, [pc, #320]	; (801df30 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801ddf0:	4618      	mov	r0, r3
 801ddf2:	f7ed fcde 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801ddf6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801ddfa:	4619      	mov	r1, r3
 801ddfc:	4620      	mov	r0, r4
 801ddfe:	f7ee f89c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801de02:	4603      	mov	r3, r0
 801de04:	461c      	mov	r4, r3
 801de06:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801de0a:	4618      	mov	r0, r3
 801de0c:	f7ee f889 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801de10:	2c00      	cmp	r4, #0
 801de12:	d007      	beq.n	801de24 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801de14:	683b      	ldr	r3, [r7, #0]
 801de16:	699a      	ldr	r2, [r3, #24]
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	4611      	mov	r1, r2
 801de1c:	4618      	mov	r0, r3
 801de1e:	f7ee fb95 	bl	800c54c <_Z10StringFromPFvvE>
 801de22:	e080      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801de24:	683b      	ldr	r3, [r7, #0]
 801de26:	f103 040c 	add.w	r4, r3, #12
 801de2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801de2e:	4941      	ldr	r1, [pc, #260]	; (801df34 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801de30:	4618      	mov	r0, r3
 801de32:	f7ed fcbe 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801de36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801de3a:	4619      	mov	r1, r3
 801de3c:	4620      	mov	r0, r4
 801de3e:	f7ee f87c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801de42:	4603      	mov	r3, r0
 801de44:	461c      	mov	r4, r3
 801de46:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801de4a:	4618      	mov	r0, r3
 801de4c:	f7ee f869 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801de50:	2c00      	cmp	r4, #0
 801de52:	d007      	beq.n	801de64 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801de54:	683b      	ldr	r3, [r7, #0]
 801de56:	699a      	ldr	r2, [r3, #24]
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	4611      	mov	r1, r2
 801de5c:	4618      	mov	r0, r3
 801de5e:	f7ee fb4b 	bl	800c4f8 <_Z10StringFromPKv>
 801de62:	e060      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801de64:	683b      	ldr	r3, [r7, #0]
 801de66:	f103 040c 	add.w	r4, r3, #12
 801de6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801de6e:	4932      	ldr	r1, [pc, #200]	; (801df38 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801de70:	4618      	mov	r0, r3
 801de72:	f7ed fc9e 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801de76:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801de7a:	4619      	mov	r1, r3
 801de7c:	4620      	mov	r0, r4
 801de7e:	f7ee f85c 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801de82:	4603      	mov	r3, r0
 801de84:	461c      	mov	r4, r3
 801de86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801de8a:	4618      	mov	r0, r3
 801de8c:	f7ee f849 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801de90:	2c00      	cmp	r4, #0
 801de92:	d00c      	beq.n	801deae <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801de94:	683b      	ldr	r3, [r7, #0]
 801de96:	ed93 7b06 	vldr	d7, [r3, #24]
 801de9a:	687b      	ldr	r3, [r7, #4]
 801de9c:	2106      	movs	r1, #6
 801de9e:	eeb0 0a47 	vmov.f32	s0, s14
 801dea2:	eef0 0a67 	vmov.f32	s1, s15
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7ee fd00 	bl	800c8ac <_Z10StringFromdi>
 801deac:	e03b      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801deae:	683b      	ldr	r3, [r7, #0]
 801deb0:	f103 040c 	add.w	r4, r3, #12
 801deb4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801deb8:	4920      	ldr	r1, [pc, #128]	; (801df3c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801deba:	4618      	mov	r0, r3
 801debc:	f7ed fc79 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801dec0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801dec4:	4619      	mov	r1, r3
 801dec6:	4620      	mov	r0, r4
 801dec8:	f7ee f837 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801decc:	4603      	mov	r3, r0
 801dece:	461c      	mov	r4, r3
 801ded0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801ded4:	4618      	mov	r0, r3
 801ded6:	f7ee f824 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801deda:	2c00      	cmp	r4, #0
 801dedc:	d008      	beq.n	801def0 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801dede:	683b      	ldr	r3, [r7, #0]
 801dee0:	6999      	ldr	r1, [r3, #24]
 801dee2:	683b      	ldr	r3, [r7, #0]
 801dee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	4618      	mov	r0, r3
 801deea:	f7ee fe73 	bl	800cbd4 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801deee:	e01a      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801def0:	683b      	ldr	r3, [r7, #0]
 801def2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801def4:	2b00      	cmp	r3, #0
 801def6:	d00b      	beq.n	801df10 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801def8:	683b      	ldr	r3, [r7, #0]
 801defa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801defc:	683b      	ldr	r3, [r7, #0]
 801defe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	330c      	adds	r3, #12
 801df04:	681b      	ldr	r3, [r3, #0]
 801df06:	683a      	ldr	r2, [r7, #0]
 801df08:	6992      	ldr	r2, [r2, #24]
 801df0a:	6878      	ldr	r0, [r7, #4]
 801df0c:	4798      	blx	r3
 801df0e:	e00a      	b.n	801df26 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801df10:	683b      	ldr	r3, [r7, #0]
 801df12:	330c      	adds	r3, #12
 801df14:	4618      	mov	r0, r3
 801df16:	f7ed ffd7 	bl	800bec8 <_ZNK12SimpleString12asCharStringEv>
 801df1a:	4602      	mov	r2, r0
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	4908      	ldr	r1, [pc, #32]	; (801df40 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801df20:	4618      	mov	r0, r3
 801df22:	f7ee fd05 	bl	800c930 <_Z16StringFromFormatPKcz>

}
 801df26:	6878      	ldr	r0, [r7, #4]
 801df28:	37e4      	adds	r7, #228	; 0xe4
 801df2a:	46bd      	mov	sp, r7
 801df2c:	bd90      	pop	{r4, r7, pc}
 801df2e:	bf00      	nop
 801df30:	08025090 	.word	0x08025090
 801df34:	08025084 	.word	0x08025084
 801df38:	08025074 	.word	0x08025074
 801df3c:	080250a8 	.word	0x080250a8
 801df40:	080250c4 	.word	0x080250c4

0801df44 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801df44:	b480      	push	{r7}
 801df46:	b083      	sub	sp, #12
 801df48:	af00      	add	r7, sp, #0
 801df4a:	6078      	str	r0, [r7, #4]
 801df4c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	683a      	ldr	r2, [r7, #0]
 801df52:	605a      	str	r2, [r3, #4]
}
 801df54:	bf00      	nop
 801df56:	370c      	adds	r7, #12
 801df58:	46bd      	mov	sp, r7
 801df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df5e:	4770      	bx	lr

0801df60 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801df60:	b480      	push	{r7}
 801df62:	b083      	sub	sp, #12
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
    return next_;
 801df68:	687b      	ldr	r3, [r7, #4]
 801df6a:	685b      	ldr	r3, [r3, #4]
}
 801df6c:	4618      	mov	r0, r3
 801df6e:	370c      	adds	r7, #12
 801df70:	46bd      	mov	sp, r7
 801df72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df76:	4770      	bx	lr

0801df78 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801df78:	b480      	push	{r7}
 801df7a:	b083      	sub	sp, #12
 801df7c:	af00      	add	r7, sp, #0
 801df7e:	6078      	str	r0, [r7, #4]
    return data_;
 801df80:	687b      	ldr	r3, [r7, #4]
 801df82:	681b      	ldr	r3, [r3, #0]
}
 801df84:	4618      	mov	r0, r3
 801df86:	370c      	adds	r7, #12
 801df88:	46bd      	mov	sp, r7
 801df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df8e:	4770      	bx	lr

0801df90 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801df90:	b580      	push	{r7, lr}
 801df92:	b082      	sub	sp, #8
 801df94:	af00      	add	r7, sp, #0
 801df96:	6078      	str	r0, [r7, #4]
    delete data_;
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	2b00      	cmp	r3, #0
 801df9e:	d004      	beq.n	801dfaa <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801dfa0:	681a      	ldr	r2, [r3, #0]
 801dfa2:	3204      	adds	r2, #4
 801dfa4:	6812      	ldr	r2, [r2, #0]
 801dfa6:	4618      	mov	r0, r3
 801dfa8:	4790      	blx	r2
}
 801dfaa:	bf00      	nop
 801dfac:	3708      	adds	r7, #8
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	bd80      	pop	{r7, pc}

0801dfb2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801dfb2:	b480      	push	{r7}
 801dfb4:	b083      	sub	sp, #12
 801dfb6:	af00      	add	r7, sp, #0
 801dfb8:	6078      	str	r0, [r7, #4]
 801dfba:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801dfbc:	687b      	ldr	r3, [r7, #4]
 801dfbe:	683a      	ldr	r2, [r7, #0]
 801dfc0:	601a      	str	r2, [r3, #0]
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	2200      	movs	r2, #0
 801dfc6:	605a      	str	r2, [r3, #4]
{
}
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	4618      	mov	r0, r3
 801dfcc:	370c      	adds	r7, #12
 801dfce:	46bd      	mov	sp, r7
 801dfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfd4:	4770      	bx	lr

0801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801dfd6:	b580      	push	{r7, lr}
 801dfd8:	b082      	sub	sp, #8
 801dfda:	af00      	add	r7, sp, #0
 801dfdc:	6078      	str	r0, [r7, #4]
 801dfde:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801dfe0:	683b      	ldr	r3, [r7, #0]
 801dfe2:	6819      	ldr	r1, [r3, #0]
 801dfe4:	683b      	ldr	r3, [r7, #0]
 801dfe6:	681b      	ldr	r3, [r3, #0]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	335c      	adds	r3, #92	; 0x5c
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	687a      	ldr	r2, [r7, #4]
 801dff0:	4610      	mov	r0, r2
 801dff2:	4798      	blx	r3
}
 801dff4:	6878      	ldr	r0, [r7, #4]
 801dff6:	3708      	adds	r7, #8
 801dff8:	46bd      	mov	sp, r7
 801dffa:	bd80      	pop	{r7, pc}

0801dffc <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b082      	sub	sp, #8
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
 801e004:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801e006:	683b      	ldr	r3, [r7, #0]
 801e008:	6819      	ldr	r1, [r3, #0]
 801e00a:	683b      	ldr	r3, [r7, #0]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	681b      	ldr	r3, [r3, #0]
 801e010:	3360      	adds	r3, #96	; 0x60
 801e012:	681b      	ldr	r3, [r3, #0]
 801e014:	687a      	ldr	r2, [r7, #4]
 801e016:	4610      	mov	r0, r2
 801e018:	4798      	blx	r3
}
 801e01a:	6878      	ldr	r0, [r7, #4]
 801e01c:	3708      	adds	r7, #8
 801e01e:	46bd      	mov	sp, r7
 801e020:	bd80      	pop	{r7, pc}

0801e022 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801e022:	b480      	push	{r7}
 801e024:	b083      	sub	sp, #12
 801e026:	af00      	add	r7, sp, #0
 801e028:	6078      	str	r0, [r7, #4]
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	2200      	movs	r2, #0
 801e02e:	601a      	str	r2, [r3, #0]
{
}
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	4618      	mov	r0, r3
 801e034:	370c      	adds	r7, #12
 801e036:	46bd      	mov	sp, r7
 801e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e03c:	4770      	bx	lr

0801e03e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801e03e:	b580      	push	{r7, lr}
 801e040:	b084      	sub	sp, #16
 801e042:	af00      	add	r7, sp, #0
 801e044:	6078      	str	r0, [r7, #4]
    while (head_) {
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	d016      	beq.n	801e07c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	4618      	mov	r0, r3
 801e054:	f7ff ff84 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801e058:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	681b      	ldr	r3, [r3, #0]
 801e05e:	4618      	mov	r0, r3
 801e060:	f7ff ff96 	bl	801df90 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	681b      	ldr	r3, [r3, #0]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d003      	beq.n	801e074 <_ZN18MockNamedValueList5clearEv+0x36>
 801e06c:	2108      	movs	r1, #8
 801e06e:	4618      	mov	r0, r3
 801e070:	f7ea fff0 	bl	8009054 <_ZdlPvj>
        head_ = n;
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	68fa      	ldr	r2, [r7, #12]
 801e078:	601a      	str	r2, [r3, #0]
    while (head_) {
 801e07a:	e7e4      	b.n	801e046 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801e07c:	bf00      	nop
 801e07e:	3710      	adds	r7, #16
 801e080:	46bd      	mov	sp, r7
 801e082:	bd80      	pop	{r7, pc}

0801e084 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801e084:	b590      	push	{r4, r7, lr}
 801e086:	b085      	sub	sp, #20
 801e088:	af00      	add	r7, sp, #0
 801e08a:	6078      	str	r0, [r7, #4]
 801e08c:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801e08e:	f44f 7210 	mov.w	r2, #576	; 0x240
 801e092:	4916      	ldr	r1, [pc, #88]	; (801e0ec <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801e094:	2008      	movs	r0, #8
 801e096:	f7ea ffc9 	bl	800902c <_ZnwjPKci>
 801e09a:	4604      	mov	r4, r0
 801e09c:	6839      	ldr	r1, [r7, #0]
 801e09e:	4620      	mov	r0, r4
 801e0a0:	f7ff ff87 	bl	801dfb2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801e0a4:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	681b      	ldr	r3, [r3, #0]
 801e0aa:	2b00      	cmp	r3, #0
 801e0ac:	d103      	bne.n	801e0b6 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	68ba      	ldr	r2, [r7, #8]
 801e0b2:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801e0b4:	e016      	b.n	801e0e4 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801e0b6:	687b      	ldr	r3, [r7, #4]
 801e0b8:	681b      	ldr	r3, [r3, #0]
 801e0ba:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801e0bc:	68f8      	ldr	r0, [r7, #12]
 801e0be:	f7ff ff4f 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801e0c2:	4603      	mov	r3, r0
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	bf14      	ite	ne
 801e0c8:	2301      	movne	r3, #1
 801e0ca:	2300      	moveq	r3, #0
 801e0cc:	b2db      	uxtb	r3, r3
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d004      	beq.n	801e0dc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801e0d2:	68f8      	ldr	r0, [r7, #12]
 801e0d4:	f7ff ff44 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801e0d8:	60f8      	str	r0, [r7, #12]
 801e0da:	e7ef      	b.n	801e0bc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801e0dc:	68b9      	ldr	r1, [r7, #8]
 801e0de:	68f8      	ldr	r0, [r7, #12]
 801e0e0:	f7ff ff30 	bl	801df44 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801e0e4:	bf00      	nop
 801e0e6:	3714      	adds	r7, #20
 801e0e8:	46bd      	mov	sp, r7
 801e0ea:	bd90      	pop	{r4, r7, pc}
 801e0ec:	0802500c 	.word	0x0802500c

0801e0f0 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801e0f0:	b590      	push	{r4, r7, lr}
 801e0f2:	b087      	sub	sp, #28
 801e0f4:	af00      	add	r7, sp, #0
 801e0f6:	6078      	str	r0, [r7, #4]
 801e0f8:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801e0fa:	687b      	ldr	r3, [r7, #4]
 801e0fc:	681b      	ldr	r3, [r3, #0]
 801e0fe:	617b      	str	r3, [r7, #20]
 801e100:	697b      	ldr	r3, [r7, #20]
 801e102:	2b00      	cmp	r3, #0
 801e104:	d01e      	beq.n	801e144 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801e106:	f107 030c 	add.w	r3, r7, #12
 801e10a:	6979      	ldr	r1, [r7, #20]
 801e10c:	4618      	mov	r0, r3
 801e10e:	f7ff ff62 	bl	801dfd6 <_ZNK22MockNamedValueListNode7getNameEv>
 801e112:	f107 030c 	add.w	r3, r7, #12
 801e116:	6839      	ldr	r1, [r7, #0]
 801e118:	4618      	mov	r0, r3
 801e11a:	f7ed ff0e 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801e11e:	4603      	mov	r3, r0
 801e120:	461c      	mov	r4, r3
 801e122:	f107 030c 	add.w	r3, r7, #12
 801e126:	4618      	mov	r0, r3
 801e128:	f7ed fefb 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801e12c:	2c00      	cmp	r4, #0
 801e12e:	d004      	beq.n	801e13a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801e130:	6978      	ldr	r0, [r7, #20]
 801e132:	f7ff ff21 	bl	801df78 <_ZN22MockNamedValueListNode4itemEv>
 801e136:	4603      	mov	r3, r0
 801e138:	e005      	b.n	801e146 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801e13a:	6978      	ldr	r0, [r7, #20]
 801e13c:	f7ff ff10 	bl	801df60 <_ZN22MockNamedValueListNode4nextEv>
 801e140:	6178      	str	r0, [r7, #20]
 801e142:	e7dd      	b.n	801e100 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801e144:	2300      	movs	r3, #0
}
 801e146:	4618      	mov	r0, r3
 801e148:	371c      	adds	r7, #28
 801e14a:	46bd      	mov	sp, r7
 801e14c:	bd90      	pop	{r4, r7, pc}

0801e14e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801e14e:	b480      	push	{r7}
 801e150:	b083      	sub	sp, #12
 801e152:	af00      	add	r7, sp, #0
 801e154:	6078      	str	r0, [r7, #4]
    return head_;
 801e156:	687b      	ldr	r3, [r7, #4]
 801e158:	681b      	ldr	r3, [r3, #0]
}
 801e15a:	4618      	mov	r0, r3
 801e15c:	370c      	adds	r7, #12
 801e15e:	46bd      	mov	sp, r7
 801e160:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e164:	4770      	bx	lr

0801e166 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801e166:	b580      	push	{r7, lr}
 801e168:	b084      	sub	sp, #16
 801e16a:	af00      	add	r7, sp, #0
 801e16c:	60f8      	str	r0, [r7, #12]
 801e16e:	60b9      	str	r1, [r7, #8]
 801e170:	607a      	str	r2, [r7, #4]
 801e172:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	68b9      	ldr	r1, [r7, #8]
 801e178:	4618      	mov	r0, r3
 801e17a:	f7ed fb6e 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	687a      	ldr	r2, [r7, #4]
 801e182:	609a      	str	r2, [r3, #8]
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	2200      	movs	r2, #0
 801e188:	60da      	str	r2, [r3, #12]
 801e18a:	68fb      	ldr	r3, [r7, #12]
 801e18c:	683a      	ldr	r2, [r7, #0]
 801e18e:	611a      	str	r2, [r3, #16]
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	4618      	mov	r0, r3
 801e194:	3710      	adds	r7, #16
 801e196:	46bd      	mov	sp, r7
 801e198:	bd80      	pop	{r7, pc}

0801e19a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801e19a:	b580      	push	{r7, lr}
 801e19c:	b084      	sub	sp, #16
 801e19e:	af00      	add	r7, sp, #0
 801e1a0:	60f8      	str	r0, [r7, #12]
 801e1a2:	60b9      	str	r1, [r7, #8]
 801e1a4:	607a      	str	r2, [r7, #4]
 801e1a6:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	68b9      	ldr	r1, [r7, #8]
 801e1ac:	4618      	mov	r0, r3
 801e1ae:	f7ed fb54 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 801e1b2:	68fb      	ldr	r3, [r7, #12]
 801e1b4:	2200      	movs	r2, #0
 801e1b6:	609a      	str	r2, [r3, #8]
 801e1b8:	68fb      	ldr	r3, [r7, #12]
 801e1ba:	687a      	ldr	r2, [r7, #4]
 801e1bc:	60da      	str	r2, [r3, #12]
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	683a      	ldr	r2, [r7, #0]
 801e1c2:	611a      	str	r2, [r3, #16]
 801e1c4:	68fb      	ldr	r3, [r7, #12]
 801e1c6:	4618      	mov	r0, r3
 801e1c8:	3710      	adds	r7, #16
 801e1ca:	46bd      	mov	sp, r7
 801e1cc:	bd80      	pop	{r7, pc}

0801e1ce <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801e1ce:	b580      	push	{r7, lr}
 801e1d0:	b084      	sub	sp, #16
 801e1d2:	af00      	add	r7, sp, #0
 801e1d4:	60f8      	str	r0, [r7, #12]
 801e1d6:	60b9      	str	r1, [r7, #8]
 801e1d8:	607a      	str	r2, [r7, #4]
 801e1da:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	68b9      	ldr	r1, [r7, #8]
 801e1e0:	4618      	mov	r0, r3
 801e1e2:	f7ed fb3a 	bl	800b85a <_ZN12SimpleStringC1ERKS_>
 801e1e6:	68fb      	ldr	r3, [r7, #12]
 801e1e8:	687a      	ldr	r2, [r7, #4]
 801e1ea:	609a      	str	r2, [r3, #8]
 801e1ec:	68fb      	ldr	r3, [r7, #12]
 801e1ee:	683a      	ldr	r2, [r7, #0]
 801e1f0:	60da      	str	r2, [r3, #12]
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	69ba      	ldr	r2, [r7, #24]
 801e1f6:	611a      	str	r2, [r3, #16]
 801e1f8:	68fb      	ldr	r3, [r7, #12]
 801e1fa:	4618      	mov	r0, r3
 801e1fc:	3710      	adds	r7, #16
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd80      	pop	{r7, pc}
	...

0801e204 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801e204:	b480      	push	{r7}
 801e206:	b083      	sub	sp, #12
 801e208:	af00      	add	r7, sp, #0
 801e20a:	6078      	str	r0, [r7, #4]
 801e20c:	4a06      	ldr	r2, [pc, #24]	; (801e228 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	601a      	str	r2, [r3, #0]
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	2200      	movs	r2, #0
 801e216:	605a      	str	r2, [r3, #4]
{

}
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	4618      	mov	r0, r3
 801e21c:	370c      	adds	r7, #12
 801e21e:	46bd      	mov	sp, r7
 801e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e224:	4770      	bx	lr
 801e226:	bf00      	nop
 801e228:	080275c0 	.word	0x080275c0

0801e22c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b082      	sub	sp, #8
 801e230:	af00      	add	r7, sp, #0
 801e232:	6078      	str	r0, [r7, #4]
 801e234:	4a05      	ldr	r2, [pc, #20]	; (801e24c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801e236:	687b      	ldr	r3, [r7, #4]
 801e238:	601a      	str	r2, [r3, #0]
{
    clear();
 801e23a:	6878      	ldr	r0, [r7, #4]
 801e23c:	f000 f825 	bl	801e28a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801e240:	687b      	ldr	r3, [r7, #4]
 801e242:	4618      	mov	r0, r3
 801e244:	3708      	adds	r7, #8
 801e246:	46bd      	mov	sp, r7
 801e248:	bd80      	pop	{r7, pc}
 801e24a:	bf00      	nop
 801e24c:	080275c0 	.word	0x080275c0

0801e250 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801e250:	b580      	push	{r7, lr}
 801e252:	b082      	sub	sp, #8
 801e254:	af00      	add	r7, sp, #0
 801e256:	6078      	str	r0, [r7, #4]
}
 801e258:	6878      	ldr	r0, [r7, #4]
 801e25a:	f7ff ffe7 	bl	801e22c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801e25e:	2108      	movs	r1, #8
 801e260:	6878      	ldr	r0, [r7, #4]
 801e262:	f7ea fef7 	bl	8009054 <_ZdlPvj>
 801e266:	687b      	ldr	r3, [r7, #4]
 801e268:	4618      	mov	r0, r3
 801e26a:	3708      	adds	r7, #8
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd80      	pop	{r7, pc}

0801e270 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801e270:	b580      	push	{r7, lr}
 801e272:	b082      	sub	sp, #8
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	4618      	mov	r0, r3
 801e27c:	f7ed fe51 	bl	800bf22 <_ZN12SimpleStringD1Ev>
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	4618      	mov	r0, r3
 801e284:	3708      	adds	r7, #8
 801e286:	46bd      	mov	sp, r7
 801e288:	bd80      	pop	{r7, pc}

0801e28a <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801e28a:	b590      	push	{r4, r7, lr}
 801e28c:	b085      	sub	sp, #20
 801e28e:	af00      	add	r7, sp, #0
 801e290:	6078      	str	r0, [r7, #4]
    while (head_) {
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	685b      	ldr	r3, [r3, #4]
 801e296:	2b00      	cmp	r3, #0
 801e298:	d012      	beq.n	801e2c0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801e29a:	687b      	ldr	r3, [r7, #4]
 801e29c:	685b      	ldr	r3, [r3, #4]
 801e29e:	691b      	ldr	r3, [r3, #16]
 801e2a0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	685c      	ldr	r4, [r3, #4]
 801e2a6:	2c00      	cmp	r4, #0
 801e2a8:	d006      	beq.n	801e2b8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	f7ff ffe0 	bl	801e270 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801e2b0:	2114      	movs	r1, #20
 801e2b2:	4620      	mov	r0, r4
 801e2b4:	f7ea fece 	bl	8009054 <_ZdlPvj>
        head_ = next;
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	68fa      	ldr	r2, [r7, #12]
 801e2bc:	605a      	str	r2, [r3, #4]
    while (head_) {
 801e2be:	e7e8      	b.n	801e292 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801e2c0:	bf00      	nop
 801e2c2:	3714      	adds	r7, #20
 801e2c4:	46bd      	mov	sp, r7
 801e2c6:	bd90      	pop	{r4, r7, pc}

0801e2c8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801e2c8:	b590      	push	{r4, r7, lr}
 801e2ca:	b085      	sub	sp, #20
 801e2cc:	af00      	add	r7, sp, #0
 801e2ce:	60f8      	str	r0, [r7, #12]
 801e2d0:	60b9      	str	r1, [r7, #8]
 801e2d2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801e2d4:	f240 227a 	movw	r2, #634	; 0x27a
 801e2d8:	4908      	ldr	r1, [pc, #32]	; (801e2fc <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801e2da:	2014      	movs	r0, #20
 801e2dc:	f7ea fea6 	bl	800902c <_ZnwjPKci>
 801e2e0:	4604      	mov	r4, r0
 801e2e2:	68fb      	ldr	r3, [r7, #12]
 801e2e4:	685b      	ldr	r3, [r3, #4]
 801e2e6:	687a      	ldr	r2, [r7, #4]
 801e2e8:	68b9      	ldr	r1, [r7, #8]
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	f7ff ff3b 	bl	801e166 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	605c      	str	r4, [r3, #4]
}
 801e2f4:	bf00      	nop
 801e2f6:	3714      	adds	r7, #20
 801e2f8:	46bd      	mov	sp, r7
 801e2fa:	bd90      	pop	{r4, r7, pc}
 801e2fc:	0802500c 	.word	0x0802500c

0801e300 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801e300:	b590      	push	{r4, r7, lr}
 801e302:	b085      	sub	sp, #20
 801e304:	af00      	add	r7, sp, #0
 801e306:	60f8      	str	r0, [r7, #12]
 801e308:	60b9      	str	r1, [r7, #8]
 801e30a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801e30c:	f240 227f 	movw	r2, #639	; 0x27f
 801e310:	4908      	ldr	r1, [pc, #32]	; (801e334 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801e312:	2014      	movs	r0, #20
 801e314:	f7ea fe8a 	bl	800902c <_ZnwjPKci>
 801e318:	4604      	mov	r4, r0
 801e31a:	68fb      	ldr	r3, [r7, #12]
 801e31c:	685b      	ldr	r3, [r3, #4]
 801e31e:	687a      	ldr	r2, [r7, #4]
 801e320:	68b9      	ldr	r1, [r7, #8]
 801e322:	4620      	mov	r0, r4
 801e324:	f7ff ff39 	bl	801e19a <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801e328:	68fb      	ldr	r3, [r7, #12]
 801e32a:	605c      	str	r4, [r3, #4]
}
 801e32c:	bf00      	nop
 801e32e:	3714      	adds	r7, #20
 801e330:	46bd      	mov	sp, r7
 801e332:	bd90      	pop	{r4, r7, pc}
 801e334:	0802500c 	.word	0x0802500c

0801e338 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801e338:	b580      	push	{r7, lr}
 801e33a:	b084      	sub	sp, #16
 801e33c:	af00      	add	r7, sp, #0
 801e33e:	6078      	str	r0, [r7, #4]
 801e340:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	685b      	ldr	r3, [r3, #4]
 801e346:	60fb      	str	r3, [r7, #12]
 801e348:	68fb      	ldr	r3, [r7, #12]
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d017      	beq.n	801e37e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801e34e:	68fb      	ldr	r3, [r7, #12]
 801e350:	6839      	ldr	r1, [r7, #0]
 801e352:	4618      	mov	r0, r3
 801e354:	f7ed fdf1 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801e358:	4603      	mov	r3, r0
 801e35a:	2b00      	cmp	r3, #0
 801e35c:	d005      	beq.n	801e36a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801e35e:	68fb      	ldr	r3, [r7, #12]
 801e360:	689b      	ldr	r3, [r3, #8]
 801e362:	2b00      	cmp	r3, #0
 801e364:	d001      	beq.n	801e36a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801e366:	2301      	movs	r3, #1
 801e368:	e000      	b.n	801e36c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801e36a:	2300      	movs	r3, #0
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d002      	beq.n	801e376 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801e370:	68fb      	ldr	r3, [r7, #12]
 801e372:	689b      	ldr	r3, [r3, #8]
 801e374:	e004      	b.n	801e380 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e376:	68fb      	ldr	r3, [r7, #12]
 801e378:	691b      	ldr	r3, [r3, #16]
 801e37a:	60fb      	str	r3, [r7, #12]
 801e37c:	e7e4      	b.n	801e348 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801e37e:	2300      	movs	r3, #0
}
 801e380:	4618      	mov	r0, r3
 801e382:	3710      	adds	r7, #16
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}

0801e388 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801e388:	b580      	push	{r7, lr}
 801e38a:	b084      	sub	sp, #16
 801e38c:	af00      	add	r7, sp, #0
 801e38e:	6078      	str	r0, [r7, #4]
 801e390:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	685b      	ldr	r3, [r3, #4]
 801e396:	60fb      	str	r3, [r7, #12]
 801e398:	68fb      	ldr	r3, [r7, #12]
 801e39a:	2b00      	cmp	r3, #0
 801e39c:	d017      	beq.n	801e3ce <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801e39e:	68fb      	ldr	r3, [r7, #12]
 801e3a0:	6839      	ldr	r1, [r7, #0]
 801e3a2:	4618      	mov	r0, r3
 801e3a4:	f7ed fdc9 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801e3a8:	4603      	mov	r3, r0
 801e3aa:	2b00      	cmp	r3, #0
 801e3ac:	d005      	beq.n	801e3ba <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801e3ae:	68fb      	ldr	r3, [r7, #12]
 801e3b0:	68db      	ldr	r3, [r3, #12]
 801e3b2:	2b00      	cmp	r3, #0
 801e3b4:	d001      	beq.n	801e3ba <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801e3b6:	2301      	movs	r3, #1
 801e3b8:	e000      	b.n	801e3bc <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801e3ba:	2300      	movs	r3, #0
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d002      	beq.n	801e3c6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801e3c0:	68fb      	ldr	r3, [r7, #12]
 801e3c2:	68db      	ldr	r3, [r3, #12]
 801e3c4:	e004      	b.n	801e3d0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801e3c6:	68fb      	ldr	r3, [r7, #12]
 801e3c8:	691b      	ldr	r3, [r3, #16]
 801e3ca:	60fb      	str	r3, [r7, #12]
 801e3cc:	e7e4      	b.n	801e398 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801e3ce:	2300      	movs	r3, #0
}
 801e3d0:	4618      	mov	r0, r3
 801e3d2:	3710      	adds	r7, #16
 801e3d4:	46bd      	mov	sp, r7
 801e3d6:	bd80      	pop	{r7, pc}

0801e3d8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801e3d8:	b590      	push	{r4, r7, lr}
 801e3da:	b087      	sub	sp, #28
 801e3dc:	af02      	add	r7, sp, #8
 801e3de:	6078      	str	r0, [r7, #4]
 801e3e0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801e3e2:	683b      	ldr	r3, [r7, #0]
 801e3e4:	685b      	ldr	r3, [r3, #4]
 801e3e6:	60fb      	str	r3, [r7, #12]
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	2b00      	cmp	r3, #0
 801e3ec:	d018      	beq.n	801e420 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801e3ee:	f240 2293 	movw	r2, #659	; 0x293
 801e3f2:	490d      	ldr	r1, [pc, #52]	; (801e428 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801e3f4:	2014      	movs	r0, #20
 801e3f6:	f7ea fe19 	bl	800902c <_ZnwjPKci>
 801e3fa:	4604      	mov	r4, r0
 801e3fc:	68f9      	ldr	r1, [r7, #12]
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	689a      	ldr	r2, [r3, #8]
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	68d8      	ldr	r0, [r3, #12]
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	685b      	ldr	r3, [r3, #4]
 801e40a:	9300      	str	r3, [sp, #0]
 801e40c:	4603      	mov	r3, r0
 801e40e:	4620      	mov	r0, r4
 801e410:	f7ff fedd 	bl	801e1ce <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	691b      	ldr	r3, [r3, #16]
 801e41c:	60fb      	str	r3, [r7, #12]
 801e41e:	e7e3      	b.n	801e3e8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801e420:	bf00      	nop
 801e422:	3714      	adds	r7, #20
 801e424:	46bd      	mov	sp, r7
 801e426:	bd90      	pop	{r4, r7, pc}
 801e428:	0802500c 	.word	0x0802500c

0801e42c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801e42c:	b580      	push	{r7, lr}
 801e42e:	b082      	sub	sp, #8
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
 801e434:	6039      	str	r1, [r7, #0]
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	490b      	ldr	r1, [pc, #44]	; (801e468 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7ed f9b9 	bl	800b7b2 <_ZN12SimpleStringC1EPKc>
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	2200      	movs	r2, #0
 801e444:	721a      	strb	r2, [r3, #8]
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	2200      	movs	r2, #0
 801e44a:	725a      	strb	r2, [r3, #9]
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	2200      	movs	r2, #0
 801e450:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	6839      	ldr	r1, [r7, #0]
 801e456:	4618      	mov	r0, r3
 801e458:	f7ed fa17 	bl	800b88a <_ZN12SimpleStringaSERKS_>
}
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	4618      	mov	r0, r3
 801e460:	3708      	adds	r7, #8
 801e462:	46bd      	mov	sp, r7
 801e464:	bd80      	pop	{r7, pc}
 801e466:	bf00      	nop
 801e468:	080250e8 	.word	0x080250e8

0801e46c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801e46c:	b480      	push	{r7}
 801e46e:	b083      	sub	sp, #12
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
 801e474:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	683a      	ldr	r2, [r7, #0]
 801e47a:	60da      	str	r2, [r3, #12]
    return this;
 801e47c:	687b      	ldr	r3, [r7, #4]
}
 801e47e:	4618      	mov	r0, r3
 801e480:	370c      	adds	r7, #12
 801e482:	46bd      	mov	sp, r7
 801e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e488:	4770      	bx	lr

0801e48a <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801e48a:	b480      	push	{r7}
 801e48c:	b083      	sub	sp, #12
 801e48e:	af00      	add	r7, sp, #0
 801e490:	6078      	str	r0, [r7, #4]
    return next_;
 801e492:	687b      	ldr	r3, [r7, #4]
 801e494:	68db      	ldr	r3, [r3, #12]
}
 801e496:	4618      	mov	r0, r3
 801e498:	370c      	adds	r7, #12
 801e49a:	46bd      	mov	sp, r7
 801e49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4a0:	4770      	bx	lr

0801e4a2 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801e4a2:	b480      	push	{r7}
 801e4a4:	b083      	sub	sp, #12
 801e4a6:	af00      	add	r7, sp, #0
 801e4a8:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	2201      	movs	r2, #1
 801e4ae:	721a      	strb	r2, [r3, #8]
}
 801e4b0:	bf00      	nop
 801e4b2:	370c      	adds	r7, #12
 801e4b4:	46bd      	mov	sp, r7
 801e4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4ba:	4770      	bx	lr

0801e4bc <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801e4bc:	b480      	push	{r7}
 801e4be:	b083      	sub	sp, #12
 801e4c0:	af00      	add	r7, sp, #0
 801e4c2:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	2201      	movs	r2, #1
 801e4c8:	725a      	strb	r2, [r3, #9]
}
 801e4ca:	bf00      	nop
 801e4cc:	370c      	adds	r7, #12
 801e4ce:	46bd      	mov	sp, r7
 801e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4d4:	4770      	bx	lr

0801e4d6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801e4d6:	b580      	push	{r7, lr}
 801e4d8:	b084      	sub	sp, #16
 801e4da:	af00      	add	r7, sp, #0
 801e4dc:	6078      	str	r0, [r7, #4]
 801e4de:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801e4e0:	2300      	movs	r3, #0
 801e4e2:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	7a1b      	ldrb	r3, [r3, #8]
 801e4e8:	2b00      	cmp	r3, #0
 801e4ea:	d007      	beq.n	801e4fc <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801e4ec:	687b      	ldr	r3, [r7, #4]
 801e4ee:	4619      	mov	r1, r3
 801e4f0:	6838      	ldr	r0, [r7, #0]
 801e4f2:	f7ed fd22 	bl	800bf3a <_ZeqRK12SimpleStringS1_>
 801e4f6:	4603      	mov	r3, r0
 801e4f8:	73fb      	strb	r3, [r7, #15]
 801e4fa:	e006      	b.n	801e50a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801e4fc:	687b      	ldr	r3, [r7, #4]
 801e4fe:	4619      	mov	r1, r3
 801e500:	6838      	ldr	r0, [r7, #0]
 801e502:	f7ed f9d4 	bl	800b8ae <_ZNK12SimpleString8containsERKS_>
 801e506:	4603      	mov	r3, r0
 801e508:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801e50a:	687b      	ldr	r3, [r7, #4]
 801e50c:	7a5b      	ldrb	r3, [r3, #9]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d004      	beq.n	801e51c <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801e512:	7bfb      	ldrb	r3, [r7, #15]
 801e514:	f083 0301 	eor.w	r3, r3, #1
 801e518:	b2db      	uxtb	r3, r3
 801e51a:	e005      	b.n	801e528 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801e51c:	7bfb      	ldrb	r3, [r7, #15]
 801e51e:	2b00      	cmp	r3, #0
 801e520:	bf14      	ite	ne
 801e522:	2301      	movne	r3, #1
 801e524:	2300      	moveq	r3, #0
 801e526:	b2db      	uxtb	r3, r3
}
 801e528:	4618      	mov	r0, r3
 801e52a:	3710      	adds	r7, #16
 801e52c:	46bd      	mov	sp, r7
 801e52e:	bd80      	pop	{r7, pc}

0801e530 <__cxa_guard_acquire>:
 801e530:	6803      	ldr	r3, [r0, #0]
 801e532:	07db      	lsls	r3, r3, #31
 801e534:	d406      	bmi.n	801e544 <__cxa_guard_acquire+0x14>
 801e536:	7843      	ldrb	r3, [r0, #1]
 801e538:	b103      	cbz	r3, 801e53c <__cxa_guard_acquire+0xc>
 801e53a:	deff      	udf	#255	; 0xff
 801e53c:	2301      	movs	r3, #1
 801e53e:	7043      	strb	r3, [r0, #1]
 801e540:	4618      	mov	r0, r3
 801e542:	4770      	bx	lr
 801e544:	2000      	movs	r0, #0
 801e546:	4770      	bx	lr

0801e548 <__cxa_guard_release>:
 801e548:	2301      	movs	r3, #1
 801e54a:	6003      	str	r3, [r0, #0]
 801e54c:	4770      	bx	lr

0801e54e <__cxa_pure_virtual>:
 801e54e:	b508      	push	{r3, lr}
 801e550:	f000 f80c 	bl	801e56c <_ZSt9terminatev>

0801e554 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801e554:	b508      	push	{r3, lr}
 801e556:	4780      	blx	r0
 801e558:	f000 f816 	bl	801e588 <abort>

0801e55c <_ZSt13get_terminatev>:
 801e55c:	4b02      	ldr	r3, [pc, #8]	; (801e568 <_ZSt13get_terminatev+0xc>)
 801e55e:	6818      	ldr	r0, [r3, #0]
 801e560:	f3bf 8f5b 	dmb	ish
 801e564:	4770      	bx	lr
 801e566:	bf00      	nop
 801e568:	20000108 	.word	0x20000108

0801e56c <_ZSt9terminatev>:
 801e56c:	b508      	push	{r3, lr}
 801e56e:	f7ff fff5 	bl	801e55c <_ZSt13get_terminatev>
 801e572:	f7ff ffef 	bl	801e554 <_ZN10__cxxabiv111__terminateEPFvvE>

0801e576 <fabs>:
 801e576:	ec51 0b10 	vmov	r0, r1, d0
 801e57a:	ee10 2a10 	vmov	r2, s0
 801e57e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801e582:	ec43 2b10 	vmov	d0, r2, r3
 801e586:	4770      	bx	lr

0801e588 <abort>:
 801e588:	b508      	push	{r3, lr}
 801e58a:	2006      	movs	r0, #6
 801e58c:	f000 ff88 	bl	801f4a0 <raise>
 801e590:	2001      	movs	r0, #1
 801e592:	f7e2 fbf6 	bl	8000d82 <_exit>

0801e596 <atexit>:
 801e596:	2300      	movs	r3, #0
 801e598:	4601      	mov	r1, r0
 801e59a:	461a      	mov	r2, r3
 801e59c:	4618      	mov	r0, r3
 801e59e:	f002 b93f 	b.w	8020820 <__register_exitproc>
	...

0801e5a4 <calloc>:
 801e5a4:	4b02      	ldr	r3, [pc, #8]	; (801e5b0 <calloc+0xc>)
 801e5a6:	460a      	mov	r2, r1
 801e5a8:	4601      	mov	r1, r0
 801e5aa:	6818      	ldr	r0, [r3, #0]
 801e5ac:	f000 bde8 	b.w	801f180 <_calloc_r>
 801e5b0:	2000010c 	.word	0x2000010c

0801e5b4 <__errno>:
 801e5b4:	4b01      	ldr	r3, [pc, #4]	; (801e5bc <__errno+0x8>)
 801e5b6:	6818      	ldr	r0, [r3, #0]
 801e5b8:	4770      	bx	lr
 801e5ba:	bf00      	nop
 801e5bc:	2000010c 	.word	0x2000010c

0801e5c0 <_fclose_r>:
 801e5c0:	b570      	push	{r4, r5, r6, lr}
 801e5c2:	4605      	mov	r5, r0
 801e5c4:	460c      	mov	r4, r1
 801e5c6:	b911      	cbnz	r1, 801e5ce <_fclose_r+0xe>
 801e5c8:	2600      	movs	r6, #0
 801e5ca:	4630      	mov	r0, r6
 801e5cc:	bd70      	pop	{r4, r5, r6, pc}
 801e5ce:	b118      	cbz	r0, 801e5d8 <_fclose_r+0x18>
 801e5d0:	6983      	ldr	r3, [r0, #24]
 801e5d2:	b90b      	cbnz	r3, 801e5d8 <_fclose_r+0x18>
 801e5d4:	f000 f994 	bl	801e900 <__sinit>
 801e5d8:	4b2c      	ldr	r3, [pc, #176]	; (801e68c <_fclose_r+0xcc>)
 801e5da:	429c      	cmp	r4, r3
 801e5dc:	d114      	bne.n	801e608 <_fclose_r+0x48>
 801e5de:	686c      	ldr	r4, [r5, #4]
 801e5e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e5e2:	07d8      	lsls	r0, r3, #31
 801e5e4:	d405      	bmi.n	801e5f2 <_fclose_r+0x32>
 801e5e6:	89a3      	ldrh	r3, [r4, #12]
 801e5e8:	0599      	lsls	r1, r3, #22
 801e5ea:	d402      	bmi.n	801e5f2 <_fclose_r+0x32>
 801e5ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5ee:	f000 fd3a 	bl	801f066 <__retarget_lock_acquire_recursive>
 801e5f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e5f6:	b98b      	cbnz	r3, 801e61c <_fclose_r+0x5c>
 801e5f8:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801e5fa:	f016 0601 	ands.w	r6, r6, #1
 801e5fe:	d1e3      	bne.n	801e5c8 <_fclose_r+0x8>
 801e600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e602:	f000 fd32 	bl	801f06a <__retarget_lock_release_recursive>
 801e606:	e7e0      	b.n	801e5ca <_fclose_r+0xa>
 801e608:	4b21      	ldr	r3, [pc, #132]	; (801e690 <_fclose_r+0xd0>)
 801e60a:	429c      	cmp	r4, r3
 801e60c:	d101      	bne.n	801e612 <_fclose_r+0x52>
 801e60e:	68ac      	ldr	r4, [r5, #8]
 801e610:	e7e6      	b.n	801e5e0 <_fclose_r+0x20>
 801e612:	4b20      	ldr	r3, [pc, #128]	; (801e694 <_fclose_r+0xd4>)
 801e614:	429c      	cmp	r4, r3
 801e616:	bf08      	it	eq
 801e618:	68ec      	ldreq	r4, [r5, #12]
 801e61a:	e7e1      	b.n	801e5e0 <_fclose_r+0x20>
 801e61c:	4621      	mov	r1, r4
 801e61e:	4628      	mov	r0, r5
 801e620:	f000 f842 	bl	801e6a8 <__sflush_r>
 801e624:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e626:	4606      	mov	r6, r0
 801e628:	b133      	cbz	r3, 801e638 <_fclose_r+0x78>
 801e62a:	6a21      	ldr	r1, [r4, #32]
 801e62c:	4628      	mov	r0, r5
 801e62e:	4798      	blx	r3
 801e630:	2800      	cmp	r0, #0
 801e632:	bfb8      	it	lt
 801e634:	f04f 36ff 	movlt.w	r6, #4294967295
 801e638:	89a3      	ldrh	r3, [r4, #12]
 801e63a:	061a      	lsls	r2, r3, #24
 801e63c:	d503      	bpl.n	801e646 <_fclose_r+0x86>
 801e63e:	6921      	ldr	r1, [r4, #16]
 801e640:	4628      	mov	r0, r5
 801e642:	f000 fdad 	bl	801f1a0 <_free_r>
 801e646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e648:	b141      	cbz	r1, 801e65c <_fclose_r+0x9c>
 801e64a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e64e:	4299      	cmp	r1, r3
 801e650:	d002      	beq.n	801e658 <_fclose_r+0x98>
 801e652:	4628      	mov	r0, r5
 801e654:	f000 fda4 	bl	801f1a0 <_free_r>
 801e658:	2300      	movs	r3, #0
 801e65a:	6363      	str	r3, [r4, #52]	; 0x34
 801e65c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e65e:	b121      	cbz	r1, 801e66a <_fclose_r+0xaa>
 801e660:	4628      	mov	r0, r5
 801e662:	f000 fd9d 	bl	801f1a0 <_free_r>
 801e666:	2300      	movs	r3, #0
 801e668:	64a3      	str	r3, [r4, #72]	; 0x48
 801e66a:	f000 f931 	bl	801e8d0 <__sfp_lock_acquire>
 801e66e:	2300      	movs	r3, #0
 801e670:	81a3      	strh	r3, [r4, #12]
 801e672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e674:	07db      	lsls	r3, r3, #31
 801e676:	d402      	bmi.n	801e67e <_fclose_r+0xbe>
 801e678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e67a:	f000 fcf6 	bl	801f06a <__retarget_lock_release_recursive>
 801e67e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e680:	f000 fcef 	bl	801f062 <__retarget_lock_close_recursive>
 801e684:	f000 f92a 	bl	801e8dc <__sfp_lock_release>
 801e688:	e79f      	b.n	801e5ca <_fclose_r+0xa>
 801e68a:	bf00      	nop
 801e68c:	080276b4 	.word	0x080276b4
 801e690:	080276d4 	.word	0x080276d4
 801e694:	08027694 	.word	0x08027694

0801e698 <fclose>:
 801e698:	4b02      	ldr	r3, [pc, #8]	; (801e6a4 <fclose+0xc>)
 801e69a:	4601      	mov	r1, r0
 801e69c:	6818      	ldr	r0, [r3, #0]
 801e69e:	f7ff bf8f 	b.w	801e5c0 <_fclose_r>
 801e6a2:	bf00      	nop
 801e6a4:	2000010c 	.word	0x2000010c

0801e6a8 <__sflush_r>:
 801e6a8:	898a      	ldrh	r2, [r1, #12]
 801e6aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6ae:	4605      	mov	r5, r0
 801e6b0:	0710      	lsls	r0, r2, #28
 801e6b2:	460c      	mov	r4, r1
 801e6b4:	d458      	bmi.n	801e768 <__sflush_r+0xc0>
 801e6b6:	684b      	ldr	r3, [r1, #4]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	dc05      	bgt.n	801e6c8 <__sflush_r+0x20>
 801e6bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	dc02      	bgt.n	801e6c8 <__sflush_r+0x20>
 801e6c2:	2000      	movs	r0, #0
 801e6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e6c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e6ca:	2e00      	cmp	r6, #0
 801e6cc:	d0f9      	beq.n	801e6c2 <__sflush_r+0x1a>
 801e6ce:	2300      	movs	r3, #0
 801e6d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e6d4:	682f      	ldr	r7, [r5, #0]
 801e6d6:	602b      	str	r3, [r5, #0]
 801e6d8:	d032      	beq.n	801e740 <__sflush_r+0x98>
 801e6da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e6dc:	89a3      	ldrh	r3, [r4, #12]
 801e6de:	075a      	lsls	r2, r3, #29
 801e6e0:	d505      	bpl.n	801e6ee <__sflush_r+0x46>
 801e6e2:	6863      	ldr	r3, [r4, #4]
 801e6e4:	1ac0      	subs	r0, r0, r3
 801e6e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e6e8:	b10b      	cbz	r3, 801e6ee <__sflush_r+0x46>
 801e6ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e6ec:	1ac0      	subs	r0, r0, r3
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	4602      	mov	r2, r0
 801e6f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e6f4:	6a21      	ldr	r1, [r4, #32]
 801e6f6:	4628      	mov	r0, r5
 801e6f8:	47b0      	blx	r6
 801e6fa:	1c43      	adds	r3, r0, #1
 801e6fc:	89a3      	ldrh	r3, [r4, #12]
 801e6fe:	d106      	bne.n	801e70e <__sflush_r+0x66>
 801e700:	6829      	ldr	r1, [r5, #0]
 801e702:	291d      	cmp	r1, #29
 801e704:	d82c      	bhi.n	801e760 <__sflush_r+0xb8>
 801e706:	4a2a      	ldr	r2, [pc, #168]	; (801e7b0 <__sflush_r+0x108>)
 801e708:	40ca      	lsrs	r2, r1
 801e70a:	07d6      	lsls	r6, r2, #31
 801e70c:	d528      	bpl.n	801e760 <__sflush_r+0xb8>
 801e70e:	2200      	movs	r2, #0
 801e710:	6062      	str	r2, [r4, #4]
 801e712:	04d9      	lsls	r1, r3, #19
 801e714:	6922      	ldr	r2, [r4, #16]
 801e716:	6022      	str	r2, [r4, #0]
 801e718:	d504      	bpl.n	801e724 <__sflush_r+0x7c>
 801e71a:	1c42      	adds	r2, r0, #1
 801e71c:	d101      	bne.n	801e722 <__sflush_r+0x7a>
 801e71e:	682b      	ldr	r3, [r5, #0]
 801e720:	b903      	cbnz	r3, 801e724 <__sflush_r+0x7c>
 801e722:	6560      	str	r0, [r4, #84]	; 0x54
 801e724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e726:	602f      	str	r7, [r5, #0]
 801e728:	2900      	cmp	r1, #0
 801e72a:	d0ca      	beq.n	801e6c2 <__sflush_r+0x1a>
 801e72c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e730:	4299      	cmp	r1, r3
 801e732:	d002      	beq.n	801e73a <__sflush_r+0x92>
 801e734:	4628      	mov	r0, r5
 801e736:	f000 fd33 	bl	801f1a0 <_free_r>
 801e73a:	2000      	movs	r0, #0
 801e73c:	6360      	str	r0, [r4, #52]	; 0x34
 801e73e:	e7c1      	b.n	801e6c4 <__sflush_r+0x1c>
 801e740:	6a21      	ldr	r1, [r4, #32]
 801e742:	2301      	movs	r3, #1
 801e744:	4628      	mov	r0, r5
 801e746:	47b0      	blx	r6
 801e748:	1c41      	adds	r1, r0, #1
 801e74a:	d1c7      	bne.n	801e6dc <__sflush_r+0x34>
 801e74c:	682b      	ldr	r3, [r5, #0]
 801e74e:	2b00      	cmp	r3, #0
 801e750:	d0c4      	beq.n	801e6dc <__sflush_r+0x34>
 801e752:	2b1d      	cmp	r3, #29
 801e754:	d001      	beq.n	801e75a <__sflush_r+0xb2>
 801e756:	2b16      	cmp	r3, #22
 801e758:	d101      	bne.n	801e75e <__sflush_r+0xb6>
 801e75a:	602f      	str	r7, [r5, #0]
 801e75c:	e7b1      	b.n	801e6c2 <__sflush_r+0x1a>
 801e75e:	89a3      	ldrh	r3, [r4, #12]
 801e760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e764:	81a3      	strh	r3, [r4, #12]
 801e766:	e7ad      	b.n	801e6c4 <__sflush_r+0x1c>
 801e768:	690f      	ldr	r7, [r1, #16]
 801e76a:	2f00      	cmp	r7, #0
 801e76c:	d0a9      	beq.n	801e6c2 <__sflush_r+0x1a>
 801e76e:	0793      	lsls	r3, r2, #30
 801e770:	680e      	ldr	r6, [r1, #0]
 801e772:	bf08      	it	eq
 801e774:	694b      	ldreq	r3, [r1, #20]
 801e776:	600f      	str	r7, [r1, #0]
 801e778:	bf18      	it	ne
 801e77a:	2300      	movne	r3, #0
 801e77c:	eba6 0807 	sub.w	r8, r6, r7
 801e780:	608b      	str	r3, [r1, #8]
 801e782:	f1b8 0f00 	cmp.w	r8, #0
 801e786:	dd9c      	ble.n	801e6c2 <__sflush_r+0x1a>
 801e788:	6a21      	ldr	r1, [r4, #32]
 801e78a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e78c:	4643      	mov	r3, r8
 801e78e:	463a      	mov	r2, r7
 801e790:	4628      	mov	r0, r5
 801e792:	47b0      	blx	r6
 801e794:	2800      	cmp	r0, #0
 801e796:	dc06      	bgt.n	801e7a6 <__sflush_r+0xfe>
 801e798:	89a3      	ldrh	r3, [r4, #12]
 801e79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e79e:	81a3      	strh	r3, [r4, #12]
 801e7a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e7a4:	e78e      	b.n	801e6c4 <__sflush_r+0x1c>
 801e7a6:	4407      	add	r7, r0
 801e7a8:	eba8 0800 	sub.w	r8, r8, r0
 801e7ac:	e7e9      	b.n	801e782 <__sflush_r+0xda>
 801e7ae:	bf00      	nop
 801e7b0:	20400001 	.word	0x20400001

0801e7b4 <_fflush_r>:
 801e7b4:	b538      	push	{r3, r4, r5, lr}
 801e7b6:	690b      	ldr	r3, [r1, #16]
 801e7b8:	4605      	mov	r5, r0
 801e7ba:	460c      	mov	r4, r1
 801e7bc:	b913      	cbnz	r3, 801e7c4 <_fflush_r+0x10>
 801e7be:	2500      	movs	r5, #0
 801e7c0:	4628      	mov	r0, r5
 801e7c2:	bd38      	pop	{r3, r4, r5, pc}
 801e7c4:	b118      	cbz	r0, 801e7ce <_fflush_r+0x1a>
 801e7c6:	6983      	ldr	r3, [r0, #24]
 801e7c8:	b90b      	cbnz	r3, 801e7ce <_fflush_r+0x1a>
 801e7ca:	f000 f899 	bl	801e900 <__sinit>
 801e7ce:	4b14      	ldr	r3, [pc, #80]	; (801e820 <_fflush_r+0x6c>)
 801e7d0:	429c      	cmp	r4, r3
 801e7d2:	d11b      	bne.n	801e80c <_fflush_r+0x58>
 801e7d4:	686c      	ldr	r4, [r5, #4]
 801e7d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e7da:	2b00      	cmp	r3, #0
 801e7dc:	d0ef      	beq.n	801e7be <_fflush_r+0xa>
 801e7de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e7e0:	07d0      	lsls	r0, r2, #31
 801e7e2:	d404      	bmi.n	801e7ee <_fflush_r+0x3a>
 801e7e4:	0599      	lsls	r1, r3, #22
 801e7e6:	d402      	bmi.n	801e7ee <_fflush_r+0x3a>
 801e7e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e7ea:	f000 fc3c 	bl	801f066 <__retarget_lock_acquire_recursive>
 801e7ee:	4628      	mov	r0, r5
 801e7f0:	4621      	mov	r1, r4
 801e7f2:	f7ff ff59 	bl	801e6a8 <__sflush_r>
 801e7f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e7f8:	07da      	lsls	r2, r3, #31
 801e7fa:	4605      	mov	r5, r0
 801e7fc:	d4e0      	bmi.n	801e7c0 <_fflush_r+0xc>
 801e7fe:	89a3      	ldrh	r3, [r4, #12]
 801e800:	059b      	lsls	r3, r3, #22
 801e802:	d4dd      	bmi.n	801e7c0 <_fflush_r+0xc>
 801e804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e806:	f000 fc30 	bl	801f06a <__retarget_lock_release_recursive>
 801e80a:	e7d9      	b.n	801e7c0 <_fflush_r+0xc>
 801e80c:	4b05      	ldr	r3, [pc, #20]	; (801e824 <_fflush_r+0x70>)
 801e80e:	429c      	cmp	r4, r3
 801e810:	d101      	bne.n	801e816 <_fflush_r+0x62>
 801e812:	68ac      	ldr	r4, [r5, #8]
 801e814:	e7df      	b.n	801e7d6 <_fflush_r+0x22>
 801e816:	4b04      	ldr	r3, [pc, #16]	; (801e828 <_fflush_r+0x74>)
 801e818:	429c      	cmp	r4, r3
 801e81a:	bf08      	it	eq
 801e81c:	68ec      	ldreq	r4, [r5, #12]
 801e81e:	e7da      	b.n	801e7d6 <_fflush_r+0x22>
 801e820:	080276b4 	.word	0x080276b4
 801e824:	080276d4 	.word	0x080276d4
 801e828:	08027694 	.word	0x08027694

0801e82c <fflush>:
 801e82c:	4601      	mov	r1, r0
 801e82e:	b920      	cbnz	r0, 801e83a <fflush+0xe>
 801e830:	4b04      	ldr	r3, [pc, #16]	; (801e844 <fflush+0x18>)
 801e832:	4905      	ldr	r1, [pc, #20]	; (801e848 <fflush+0x1c>)
 801e834:	6818      	ldr	r0, [r3, #0]
 801e836:	f000 babb 	b.w	801edb0 <_fwalk_reent>
 801e83a:	4b04      	ldr	r3, [pc, #16]	; (801e84c <fflush+0x20>)
 801e83c:	6818      	ldr	r0, [r3, #0]
 801e83e:	f7ff bfb9 	b.w	801e7b4 <_fflush_r>
 801e842:	bf00      	nop
 801e844:	080276f4 	.word	0x080276f4
 801e848:	0801e7b5 	.word	0x0801e7b5
 801e84c:	2000010c 	.word	0x2000010c

0801e850 <std>:
 801e850:	2300      	movs	r3, #0
 801e852:	b510      	push	{r4, lr}
 801e854:	4604      	mov	r4, r0
 801e856:	e9c0 3300 	strd	r3, r3, [r0]
 801e85a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e85e:	6083      	str	r3, [r0, #8]
 801e860:	8181      	strh	r1, [r0, #12]
 801e862:	6643      	str	r3, [r0, #100]	; 0x64
 801e864:	81c2      	strh	r2, [r0, #14]
 801e866:	6183      	str	r3, [r0, #24]
 801e868:	4619      	mov	r1, r3
 801e86a:	2208      	movs	r2, #8
 801e86c:	305c      	adds	r0, #92	; 0x5c
 801e86e:	f000 fc7f 	bl	801f170 <memset>
 801e872:	4b05      	ldr	r3, [pc, #20]	; (801e888 <std+0x38>)
 801e874:	6263      	str	r3, [r4, #36]	; 0x24
 801e876:	4b05      	ldr	r3, [pc, #20]	; (801e88c <std+0x3c>)
 801e878:	62a3      	str	r3, [r4, #40]	; 0x28
 801e87a:	4b05      	ldr	r3, [pc, #20]	; (801e890 <std+0x40>)
 801e87c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e87e:	4b05      	ldr	r3, [pc, #20]	; (801e894 <std+0x44>)
 801e880:	6224      	str	r4, [r4, #32]
 801e882:	6323      	str	r3, [r4, #48]	; 0x30
 801e884:	bd10      	pop	{r4, pc}
 801e886:	bf00      	nop
 801e888:	0801f519 	.word	0x0801f519
 801e88c:	0801f53f 	.word	0x0801f53f
 801e890:	0801f577 	.word	0x0801f577
 801e894:	0801f59b 	.word	0x0801f59b

0801e898 <_cleanup_r>:
 801e898:	4901      	ldr	r1, [pc, #4]	; (801e8a0 <_cleanup_r+0x8>)
 801e89a:	f000 ba89 	b.w	801edb0 <_fwalk_reent>
 801e89e:	bf00      	nop
 801e8a0:	0801e7b5 	.word	0x0801e7b5

0801e8a4 <__sfmoreglue>:
 801e8a4:	b570      	push	{r4, r5, r6, lr}
 801e8a6:	1e4a      	subs	r2, r1, #1
 801e8a8:	2568      	movs	r5, #104	; 0x68
 801e8aa:	4355      	muls	r5, r2
 801e8ac:	460e      	mov	r6, r1
 801e8ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e8b2:	f000 fcc5 	bl	801f240 <_malloc_r>
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	b140      	cbz	r0, 801e8cc <__sfmoreglue+0x28>
 801e8ba:	2100      	movs	r1, #0
 801e8bc:	e9c0 1600 	strd	r1, r6, [r0]
 801e8c0:	300c      	adds	r0, #12
 801e8c2:	60a0      	str	r0, [r4, #8]
 801e8c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e8c8:	f000 fc52 	bl	801f170 <memset>
 801e8cc:	4620      	mov	r0, r4
 801e8ce:	bd70      	pop	{r4, r5, r6, pc}

0801e8d0 <__sfp_lock_acquire>:
 801e8d0:	4801      	ldr	r0, [pc, #4]	; (801e8d8 <__sfp_lock_acquire+0x8>)
 801e8d2:	f000 bbc8 	b.w	801f066 <__retarget_lock_acquire_recursive>
 801e8d6:	bf00      	nop
 801e8d8:	20000e94 	.word	0x20000e94

0801e8dc <__sfp_lock_release>:
 801e8dc:	4801      	ldr	r0, [pc, #4]	; (801e8e4 <__sfp_lock_release+0x8>)
 801e8de:	f000 bbc4 	b.w	801f06a <__retarget_lock_release_recursive>
 801e8e2:	bf00      	nop
 801e8e4:	20000e94 	.word	0x20000e94

0801e8e8 <__sinit_lock_acquire>:
 801e8e8:	4801      	ldr	r0, [pc, #4]	; (801e8f0 <__sinit_lock_acquire+0x8>)
 801e8ea:	f000 bbbc 	b.w	801f066 <__retarget_lock_acquire_recursive>
 801e8ee:	bf00      	nop
 801e8f0:	20000e8f 	.word	0x20000e8f

0801e8f4 <__sinit_lock_release>:
 801e8f4:	4801      	ldr	r0, [pc, #4]	; (801e8fc <__sinit_lock_release+0x8>)
 801e8f6:	f000 bbb8 	b.w	801f06a <__retarget_lock_release_recursive>
 801e8fa:	bf00      	nop
 801e8fc:	20000e8f 	.word	0x20000e8f

0801e900 <__sinit>:
 801e900:	b510      	push	{r4, lr}
 801e902:	4604      	mov	r4, r0
 801e904:	f7ff fff0 	bl	801e8e8 <__sinit_lock_acquire>
 801e908:	69a3      	ldr	r3, [r4, #24]
 801e90a:	b11b      	cbz	r3, 801e914 <__sinit+0x14>
 801e90c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e910:	f7ff bff0 	b.w	801e8f4 <__sinit_lock_release>
 801e914:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e918:	6523      	str	r3, [r4, #80]	; 0x50
 801e91a:	4b13      	ldr	r3, [pc, #76]	; (801e968 <__sinit+0x68>)
 801e91c:	4a13      	ldr	r2, [pc, #76]	; (801e96c <__sinit+0x6c>)
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	62a2      	str	r2, [r4, #40]	; 0x28
 801e922:	42a3      	cmp	r3, r4
 801e924:	bf04      	itt	eq
 801e926:	2301      	moveq	r3, #1
 801e928:	61a3      	streq	r3, [r4, #24]
 801e92a:	4620      	mov	r0, r4
 801e92c:	f000 f820 	bl	801e970 <__sfp>
 801e930:	6060      	str	r0, [r4, #4]
 801e932:	4620      	mov	r0, r4
 801e934:	f000 f81c 	bl	801e970 <__sfp>
 801e938:	60a0      	str	r0, [r4, #8]
 801e93a:	4620      	mov	r0, r4
 801e93c:	f000 f818 	bl	801e970 <__sfp>
 801e940:	2200      	movs	r2, #0
 801e942:	60e0      	str	r0, [r4, #12]
 801e944:	2104      	movs	r1, #4
 801e946:	6860      	ldr	r0, [r4, #4]
 801e948:	f7ff ff82 	bl	801e850 <std>
 801e94c:	68a0      	ldr	r0, [r4, #8]
 801e94e:	2201      	movs	r2, #1
 801e950:	2109      	movs	r1, #9
 801e952:	f7ff ff7d 	bl	801e850 <std>
 801e956:	68e0      	ldr	r0, [r4, #12]
 801e958:	2202      	movs	r2, #2
 801e95a:	2112      	movs	r1, #18
 801e95c:	f7ff ff78 	bl	801e850 <std>
 801e960:	2301      	movs	r3, #1
 801e962:	61a3      	str	r3, [r4, #24]
 801e964:	e7d2      	b.n	801e90c <__sinit+0xc>
 801e966:	bf00      	nop
 801e968:	080276f4 	.word	0x080276f4
 801e96c:	0801e899 	.word	0x0801e899

0801e970 <__sfp>:
 801e970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e972:	4607      	mov	r7, r0
 801e974:	f7ff ffac 	bl	801e8d0 <__sfp_lock_acquire>
 801e978:	4b1e      	ldr	r3, [pc, #120]	; (801e9f4 <__sfp+0x84>)
 801e97a:	681e      	ldr	r6, [r3, #0]
 801e97c:	69b3      	ldr	r3, [r6, #24]
 801e97e:	b913      	cbnz	r3, 801e986 <__sfp+0x16>
 801e980:	4630      	mov	r0, r6
 801e982:	f7ff ffbd 	bl	801e900 <__sinit>
 801e986:	3648      	adds	r6, #72	; 0x48
 801e988:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e98c:	3b01      	subs	r3, #1
 801e98e:	d503      	bpl.n	801e998 <__sfp+0x28>
 801e990:	6833      	ldr	r3, [r6, #0]
 801e992:	b30b      	cbz	r3, 801e9d8 <__sfp+0x68>
 801e994:	6836      	ldr	r6, [r6, #0]
 801e996:	e7f7      	b.n	801e988 <__sfp+0x18>
 801e998:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e99c:	b9d5      	cbnz	r5, 801e9d4 <__sfp+0x64>
 801e99e:	4b16      	ldr	r3, [pc, #88]	; (801e9f8 <__sfp+0x88>)
 801e9a0:	60e3      	str	r3, [r4, #12]
 801e9a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e9a6:	6665      	str	r5, [r4, #100]	; 0x64
 801e9a8:	f000 fb5a 	bl	801f060 <__retarget_lock_init_recursive>
 801e9ac:	f7ff ff96 	bl	801e8dc <__sfp_lock_release>
 801e9b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e9b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e9b8:	6025      	str	r5, [r4, #0]
 801e9ba:	61a5      	str	r5, [r4, #24]
 801e9bc:	2208      	movs	r2, #8
 801e9be:	4629      	mov	r1, r5
 801e9c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e9c4:	f000 fbd4 	bl	801f170 <memset>
 801e9c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e9cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e9d4:	3468      	adds	r4, #104	; 0x68
 801e9d6:	e7d9      	b.n	801e98c <__sfp+0x1c>
 801e9d8:	2104      	movs	r1, #4
 801e9da:	4638      	mov	r0, r7
 801e9dc:	f7ff ff62 	bl	801e8a4 <__sfmoreglue>
 801e9e0:	4604      	mov	r4, r0
 801e9e2:	6030      	str	r0, [r6, #0]
 801e9e4:	2800      	cmp	r0, #0
 801e9e6:	d1d5      	bne.n	801e994 <__sfp+0x24>
 801e9e8:	f7ff ff78 	bl	801e8dc <__sfp_lock_release>
 801e9ec:	230c      	movs	r3, #12
 801e9ee:	603b      	str	r3, [r7, #0]
 801e9f0:	e7ee      	b.n	801e9d0 <__sfp+0x60>
 801e9f2:	bf00      	nop
 801e9f4:	080276f4 	.word	0x080276f4
 801e9f8:	ffff0001 	.word	0xffff0001

0801e9fc <_fopen_r>:
 801e9fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e9fe:	460f      	mov	r7, r1
 801ea00:	4611      	mov	r1, r2
 801ea02:	aa01      	add	r2, sp, #4
 801ea04:	4605      	mov	r5, r0
 801ea06:	f001 ff9f 	bl	8020948 <__sflags>
 801ea0a:	4606      	mov	r6, r0
 801ea0c:	b918      	cbnz	r0, 801ea16 <_fopen_r+0x1a>
 801ea0e:	2400      	movs	r4, #0
 801ea10:	4620      	mov	r0, r4
 801ea12:	b003      	add	sp, #12
 801ea14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea16:	4628      	mov	r0, r5
 801ea18:	f7ff ffaa 	bl	801e970 <__sfp>
 801ea1c:	4604      	mov	r4, r0
 801ea1e:	2800      	cmp	r0, #0
 801ea20:	d0f5      	beq.n	801ea0e <_fopen_r+0x12>
 801ea22:	4639      	mov	r1, r7
 801ea24:	9a01      	ldr	r2, [sp, #4]
 801ea26:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801ea2a:	4628      	mov	r0, r5
 801ea2c:	f000 fc62 	bl	801f2f4 <_open_r>
 801ea30:	1e07      	subs	r7, r0, #0
 801ea32:	da09      	bge.n	801ea48 <_fopen_r+0x4c>
 801ea34:	2500      	movs	r5, #0
 801ea36:	f7ff ff4b 	bl	801e8d0 <__sfp_lock_acquire>
 801ea3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea3c:	81a5      	strh	r5, [r4, #12]
 801ea3e:	f000 fb10 	bl	801f062 <__retarget_lock_close_recursive>
 801ea42:	f7ff ff4b 	bl	801e8dc <__sfp_lock_release>
 801ea46:	e7e2      	b.n	801ea0e <_fopen_r+0x12>
 801ea48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea4a:	07db      	lsls	r3, r3, #31
 801ea4c:	d405      	bmi.n	801ea5a <_fopen_r+0x5e>
 801ea4e:	89a3      	ldrh	r3, [r4, #12]
 801ea50:	0598      	lsls	r0, r3, #22
 801ea52:	d402      	bmi.n	801ea5a <_fopen_r+0x5e>
 801ea54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea56:	f000 fb06 	bl	801f066 <__retarget_lock_acquire_recursive>
 801ea5a:	4b0e      	ldr	r3, [pc, #56]	; (801ea94 <_fopen_r+0x98>)
 801ea5c:	6263      	str	r3, [r4, #36]	; 0x24
 801ea5e:	4b0e      	ldr	r3, [pc, #56]	; (801ea98 <_fopen_r+0x9c>)
 801ea60:	62a3      	str	r3, [r4, #40]	; 0x28
 801ea62:	4b0e      	ldr	r3, [pc, #56]	; (801ea9c <_fopen_r+0xa0>)
 801ea64:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ea66:	05f1      	lsls	r1, r6, #23
 801ea68:	4b0d      	ldr	r3, [pc, #52]	; (801eaa0 <_fopen_r+0xa4>)
 801ea6a:	81e7      	strh	r7, [r4, #14]
 801ea6c:	81a6      	strh	r6, [r4, #12]
 801ea6e:	6224      	str	r4, [r4, #32]
 801ea70:	6323      	str	r3, [r4, #48]	; 0x30
 801ea72:	d505      	bpl.n	801ea80 <_fopen_r+0x84>
 801ea74:	2302      	movs	r3, #2
 801ea76:	2200      	movs	r2, #0
 801ea78:	4621      	mov	r1, r4
 801ea7a:	4628      	mov	r0, r5
 801ea7c:	f000 f888 	bl	801eb90 <_fseek_r>
 801ea80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ea82:	07da      	lsls	r2, r3, #31
 801ea84:	d4c4      	bmi.n	801ea10 <_fopen_r+0x14>
 801ea86:	89a3      	ldrh	r3, [r4, #12]
 801ea88:	059b      	lsls	r3, r3, #22
 801ea8a:	d4c1      	bmi.n	801ea10 <_fopen_r+0x14>
 801ea8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ea8e:	f000 faec 	bl	801f06a <__retarget_lock_release_recursive>
 801ea92:	e7bd      	b.n	801ea10 <_fopen_r+0x14>
 801ea94:	0801f519 	.word	0x0801f519
 801ea98:	0801f53f 	.word	0x0801f53f
 801ea9c:	0801f577 	.word	0x0801f577
 801eaa0:	0801f59b 	.word	0x0801f59b

0801eaa4 <fopen>:
 801eaa4:	4b02      	ldr	r3, [pc, #8]	; (801eab0 <fopen+0xc>)
 801eaa6:	460a      	mov	r2, r1
 801eaa8:	4601      	mov	r1, r0
 801eaaa:	6818      	ldr	r0, [r3, #0]
 801eaac:	f7ff bfa6 	b.w	801e9fc <_fopen_r>
 801eab0:	2000010c 	.word	0x2000010c

0801eab4 <_fputs_r>:
 801eab4:	b570      	push	{r4, r5, r6, lr}
 801eab6:	460e      	mov	r6, r1
 801eab8:	4614      	mov	r4, r2
 801eaba:	4605      	mov	r5, r0
 801eabc:	b118      	cbz	r0, 801eac6 <_fputs_r+0x12>
 801eabe:	6983      	ldr	r3, [r0, #24]
 801eac0:	b90b      	cbnz	r3, 801eac6 <_fputs_r+0x12>
 801eac2:	f7ff ff1d 	bl	801e900 <__sinit>
 801eac6:	4b2b      	ldr	r3, [pc, #172]	; (801eb74 <_fputs_r+0xc0>)
 801eac8:	429c      	cmp	r4, r3
 801eaca:	d11e      	bne.n	801eb0a <_fputs_r+0x56>
 801eacc:	686c      	ldr	r4, [r5, #4]
 801eace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ead0:	07da      	lsls	r2, r3, #31
 801ead2:	d405      	bmi.n	801eae0 <_fputs_r+0x2c>
 801ead4:	89a3      	ldrh	r3, [r4, #12]
 801ead6:	059b      	lsls	r3, r3, #22
 801ead8:	d402      	bmi.n	801eae0 <_fputs_r+0x2c>
 801eada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eadc:	f000 fac3 	bl	801f066 <__retarget_lock_acquire_recursive>
 801eae0:	89a3      	ldrh	r3, [r4, #12]
 801eae2:	0718      	lsls	r0, r3, #28
 801eae4:	d51b      	bpl.n	801eb1e <_fputs_r+0x6a>
 801eae6:	6923      	ldr	r3, [r4, #16]
 801eae8:	b1cb      	cbz	r3, 801eb1e <_fputs_r+0x6a>
 801eaea:	3e01      	subs	r6, #1
 801eaec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801eaf0:	bb39      	cbnz	r1, 801eb42 <_fputs_r+0x8e>
 801eaf2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801eaf4:	f015 0501 	ands.w	r5, r5, #1
 801eaf8:	d139      	bne.n	801eb6e <_fputs_r+0xba>
 801eafa:	89a3      	ldrh	r3, [r4, #12]
 801eafc:	0599      	lsls	r1, r3, #22
 801eafe:	d402      	bmi.n	801eb06 <_fputs_r+0x52>
 801eb00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb02:	f000 fab2 	bl	801f06a <__retarget_lock_release_recursive>
 801eb06:	4628      	mov	r0, r5
 801eb08:	bd70      	pop	{r4, r5, r6, pc}
 801eb0a:	4b1b      	ldr	r3, [pc, #108]	; (801eb78 <_fputs_r+0xc4>)
 801eb0c:	429c      	cmp	r4, r3
 801eb0e:	d101      	bne.n	801eb14 <_fputs_r+0x60>
 801eb10:	68ac      	ldr	r4, [r5, #8]
 801eb12:	e7dc      	b.n	801eace <_fputs_r+0x1a>
 801eb14:	4b19      	ldr	r3, [pc, #100]	; (801eb7c <_fputs_r+0xc8>)
 801eb16:	429c      	cmp	r4, r3
 801eb18:	bf08      	it	eq
 801eb1a:	68ec      	ldreq	r4, [r5, #12]
 801eb1c:	e7d7      	b.n	801eace <_fputs_r+0x1a>
 801eb1e:	4621      	mov	r1, r4
 801eb20:	4628      	mov	r0, r5
 801eb22:	f001 fe0f 	bl	8020744 <__swsetup_r>
 801eb26:	2800      	cmp	r0, #0
 801eb28:	d0df      	beq.n	801eaea <_fputs_r+0x36>
 801eb2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb2c:	07da      	lsls	r2, r3, #31
 801eb2e:	d405      	bmi.n	801eb3c <_fputs_r+0x88>
 801eb30:	89a3      	ldrh	r3, [r4, #12]
 801eb32:	059b      	lsls	r3, r3, #22
 801eb34:	d402      	bmi.n	801eb3c <_fputs_r+0x88>
 801eb36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb38:	f000 fa97 	bl	801f06a <__retarget_lock_release_recursive>
 801eb3c:	f04f 35ff 	mov.w	r5, #4294967295
 801eb40:	e7e1      	b.n	801eb06 <_fputs_r+0x52>
 801eb42:	68a3      	ldr	r3, [r4, #8]
 801eb44:	3b01      	subs	r3, #1
 801eb46:	2b00      	cmp	r3, #0
 801eb48:	60a3      	str	r3, [r4, #8]
 801eb4a:	da04      	bge.n	801eb56 <_fputs_r+0xa2>
 801eb4c:	69a2      	ldr	r2, [r4, #24]
 801eb4e:	4293      	cmp	r3, r2
 801eb50:	db06      	blt.n	801eb60 <_fputs_r+0xac>
 801eb52:	290a      	cmp	r1, #10
 801eb54:	d004      	beq.n	801eb60 <_fputs_r+0xac>
 801eb56:	6823      	ldr	r3, [r4, #0]
 801eb58:	1c5a      	adds	r2, r3, #1
 801eb5a:	6022      	str	r2, [r4, #0]
 801eb5c:	7019      	strb	r1, [r3, #0]
 801eb5e:	e7c5      	b.n	801eaec <_fputs_r+0x38>
 801eb60:	4622      	mov	r2, r4
 801eb62:	4628      	mov	r0, r5
 801eb64:	f001 fd8a 	bl	802067c <__swbuf_r>
 801eb68:	3001      	adds	r0, #1
 801eb6a:	d1bf      	bne.n	801eaec <_fputs_r+0x38>
 801eb6c:	e7dd      	b.n	801eb2a <_fputs_r+0x76>
 801eb6e:	460d      	mov	r5, r1
 801eb70:	e7c9      	b.n	801eb06 <_fputs_r+0x52>
 801eb72:	bf00      	nop
 801eb74:	080276b4 	.word	0x080276b4
 801eb78:	080276d4 	.word	0x080276d4
 801eb7c:	08027694 	.word	0x08027694

0801eb80 <fputs>:
 801eb80:	4b02      	ldr	r3, [pc, #8]	; (801eb8c <fputs+0xc>)
 801eb82:	460a      	mov	r2, r1
 801eb84:	4601      	mov	r1, r0
 801eb86:	6818      	ldr	r0, [r3, #0]
 801eb88:	f7ff bf94 	b.w	801eab4 <_fputs_r>
 801eb8c:	2000010c 	.word	0x2000010c

0801eb90 <_fseek_r>:
 801eb90:	f000 b800 	b.w	801eb94 <_fseeko_r>

0801eb94 <_fseeko_r>:
 801eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eb98:	460c      	mov	r4, r1
 801eb9a:	4617      	mov	r7, r2
 801eb9c:	461e      	mov	r6, r3
 801eb9e:	4605      	mov	r5, r0
 801eba0:	b118      	cbz	r0, 801ebaa <_fseeko_r+0x16>
 801eba2:	6983      	ldr	r3, [r0, #24]
 801eba4:	b90b      	cbnz	r3, 801ebaa <_fseeko_r+0x16>
 801eba6:	f7ff feab 	bl	801e900 <__sinit>
 801ebaa:	4b44      	ldr	r3, [pc, #272]	; (801ecbc <_fseeko_r+0x128>)
 801ebac:	429c      	cmp	r4, r3
 801ebae:	d122      	bne.n	801ebf6 <_fseeko_r+0x62>
 801ebb0:	686c      	ldr	r4, [r5, #4]
 801ebb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebb4:	07d9      	lsls	r1, r3, #31
 801ebb6:	d405      	bmi.n	801ebc4 <_fseeko_r+0x30>
 801ebb8:	89a3      	ldrh	r3, [r4, #12]
 801ebba:	059a      	lsls	r2, r3, #22
 801ebbc:	d402      	bmi.n	801ebc4 <_fseeko_r+0x30>
 801ebbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebc0:	f000 fa51 	bl	801f066 <__retarget_lock_acquire_recursive>
 801ebc4:	89a3      	ldrh	r3, [r4, #12]
 801ebc6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801ebca:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801ebce:	d103      	bne.n	801ebd8 <_fseeko_r+0x44>
 801ebd0:	4621      	mov	r1, r4
 801ebd2:	4628      	mov	r0, r5
 801ebd4:	f7ff fdee 	bl	801e7b4 <_fflush_r>
 801ebd8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801ebdc:	f1b8 0f00 	cmp.w	r8, #0
 801ebe0:	d113      	bne.n	801ec0a <_fseeko_r+0x76>
 801ebe2:	231d      	movs	r3, #29
 801ebe4:	602b      	str	r3, [r5, #0]
 801ebe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebe8:	07d9      	lsls	r1, r3, #31
 801ebea:	d55d      	bpl.n	801eca8 <_fseeko_r+0x114>
 801ebec:	f04f 36ff 	mov.w	r6, #4294967295
 801ebf0:	4630      	mov	r0, r6
 801ebf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ebf6:	4b32      	ldr	r3, [pc, #200]	; (801ecc0 <_fseeko_r+0x12c>)
 801ebf8:	429c      	cmp	r4, r3
 801ebfa:	d101      	bne.n	801ec00 <_fseeko_r+0x6c>
 801ebfc:	68ac      	ldr	r4, [r5, #8]
 801ebfe:	e7d8      	b.n	801ebb2 <_fseeko_r+0x1e>
 801ec00:	4b30      	ldr	r3, [pc, #192]	; (801ecc4 <_fseeko_r+0x130>)
 801ec02:	429c      	cmp	r4, r3
 801ec04:	bf08      	it	eq
 801ec06:	68ec      	ldreq	r4, [r5, #12]
 801ec08:	e7d3      	b.n	801ebb2 <_fseeko_r+0x1e>
 801ec0a:	2e01      	cmp	r6, #1
 801ec0c:	d036      	beq.n	801ec7c <_fseeko_r+0xe8>
 801ec0e:	f036 0302 	bics.w	r3, r6, #2
 801ec12:	d147      	bne.n	801eca4 <_fseeko_r+0x110>
 801ec14:	6923      	ldr	r3, [r4, #16]
 801ec16:	b91b      	cbnz	r3, 801ec20 <_fseeko_r+0x8c>
 801ec18:	4621      	mov	r1, r4
 801ec1a:	4628      	mov	r0, r5
 801ec1c:	f000 fa4a 	bl	801f0b4 <__smakebuf_r>
 801ec20:	4621      	mov	r1, r4
 801ec22:	4628      	mov	r0, r5
 801ec24:	f7ff fdc6 	bl	801e7b4 <_fflush_r>
 801ec28:	2800      	cmp	r0, #0
 801ec2a:	d1dc      	bne.n	801ebe6 <_fseeko_r+0x52>
 801ec2c:	6a21      	ldr	r1, [r4, #32]
 801ec2e:	4633      	mov	r3, r6
 801ec30:	463a      	mov	r2, r7
 801ec32:	4628      	mov	r0, r5
 801ec34:	47c0      	blx	r8
 801ec36:	3001      	adds	r0, #1
 801ec38:	d0d5      	beq.n	801ebe6 <_fseeko_r+0x52>
 801ec3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ec3c:	b141      	cbz	r1, 801ec50 <_fseeko_r+0xbc>
 801ec3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ec42:	4299      	cmp	r1, r3
 801ec44:	d002      	beq.n	801ec4c <_fseeko_r+0xb8>
 801ec46:	4628      	mov	r0, r5
 801ec48:	f000 faaa 	bl	801f1a0 <_free_r>
 801ec4c:	2300      	movs	r3, #0
 801ec4e:	6363      	str	r3, [r4, #52]	; 0x34
 801ec50:	6923      	ldr	r3, [r4, #16]
 801ec52:	6023      	str	r3, [r4, #0]
 801ec54:	89a3      	ldrh	r3, [r4, #12]
 801ec56:	2500      	movs	r5, #0
 801ec58:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801ec5c:	6065      	str	r5, [r4, #4]
 801ec5e:	81a3      	strh	r3, [r4, #12]
 801ec60:	2208      	movs	r2, #8
 801ec62:	4629      	mov	r1, r5
 801ec64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ec68:	f000 fa82 	bl	801f170 <memset>
 801ec6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801ec6e:	f016 0601 	ands.w	r6, r6, #1
 801ec72:	d120      	bne.n	801ecb6 <_fseeko_r+0x122>
 801ec74:	89a3      	ldrh	r3, [r4, #12]
 801ec76:	059b      	lsls	r3, r3, #22
 801ec78:	d4ba      	bmi.n	801ebf0 <_fseeko_r+0x5c>
 801ec7a:	e00c      	b.n	801ec96 <_fseeko_r+0x102>
 801ec7c:	4621      	mov	r1, r4
 801ec7e:	4628      	mov	r0, r5
 801ec80:	f000 f822 	bl	801ecc8 <_ftello_r>
 801ec84:	1c43      	adds	r3, r0, #1
 801ec86:	4606      	mov	r6, r0
 801ec88:	d109      	bne.n	801ec9e <_fseeko_r+0x10a>
 801ec8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ec8c:	07dd      	lsls	r5, r3, #31
 801ec8e:	d4ad      	bmi.n	801ebec <_fseeko_r+0x58>
 801ec90:	89a3      	ldrh	r3, [r4, #12]
 801ec92:	0598      	lsls	r0, r3, #22
 801ec94:	d4aa      	bmi.n	801ebec <_fseeko_r+0x58>
 801ec96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ec98:	f000 f9e7 	bl	801f06a <__retarget_lock_release_recursive>
 801ec9c:	e7a8      	b.n	801ebf0 <_fseeko_r+0x5c>
 801ec9e:	4407      	add	r7, r0
 801eca0:	2600      	movs	r6, #0
 801eca2:	e7b7      	b.n	801ec14 <_fseeko_r+0x80>
 801eca4:	2316      	movs	r3, #22
 801eca6:	e79d      	b.n	801ebe4 <_fseeko_r+0x50>
 801eca8:	89a3      	ldrh	r3, [r4, #12]
 801ecaa:	059a      	lsls	r2, r3, #22
 801ecac:	d49e      	bmi.n	801ebec <_fseeko_r+0x58>
 801ecae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ecb0:	f000 f9db 	bl	801f06a <__retarget_lock_release_recursive>
 801ecb4:	e79a      	b.n	801ebec <_fseeko_r+0x58>
 801ecb6:	462e      	mov	r6, r5
 801ecb8:	e79a      	b.n	801ebf0 <_fseeko_r+0x5c>
 801ecba:	bf00      	nop
 801ecbc:	080276b4 	.word	0x080276b4
 801ecc0:	080276d4 	.word	0x080276d4
 801ecc4:	08027694 	.word	0x08027694

0801ecc8 <_ftello_r>:
 801ecc8:	b570      	push	{r4, r5, r6, lr}
 801ecca:	460c      	mov	r4, r1
 801eccc:	4605      	mov	r5, r0
 801ecce:	b118      	cbz	r0, 801ecd8 <_ftello_r+0x10>
 801ecd0:	6983      	ldr	r3, [r0, #24]
 801ecd2:	b90b      	cbnz	r3, 801ecd8 <_ftello_r+0x10>
 801ecd4:	f7ff fe14 	bl	801e900 <__sinit>
 801ecd8:	4b32      	ldr	r3, [pc, #200]	; (801eda4 <_ftello_r+0xdc>)
 801ecda:	429c      	cmp	r4, r3
 801ecdc:	d114      	bne.n	801ed08 <_ftello_r+0x40>
 801ecde:	686c      	ldr	r4, [r5, #4]
 801ece0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ece2:	07da      	lsls	r2, r3, #31
 801ece4:	d405      	bmi.n	801ecf2 <_ftello_r+0x2a>
 801ece6:	89a3      	ldrh	r3, [r4, #12]
 801ece8:	059b      	lsls	r3, r3, #22
 801ecea:	d402      	bmi.n	801ecf2 <_ftello_r+0x2a>
 801ecec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ecee:	f000 f9ba 	bl	801f066 <__retarget_lock_acquire_recursive>
 801ecf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ecf4:	b9ce      	cbnz	r6, 801ed2a <_ftello_r+0x62>
 801ecf6:	231d      	movs	r3, #29
 801ecf8:	602b      	str	r3, [r5, #0]
 801ecfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ecfc:	07de      	lsls	r6, r3, #31
 801ecfe:	d50d      	bpl.n	801ed1c <_ftello_r+0x54>
 801ed00:	f04f 35ff 	mov.w	r5, #4294967295
 801ed04:	4628      	mov	r0, r5
 801ed06:	bd70      	pop	{r4, r5, r6, pc}
 801ed08:	4b27      	ldr	r3, [pc, #156]	; (801eda8 <_ftello_r+0xe0>)
 801ed0a:	429c      	cmp	r4, r3
 801ed0c:	d101      	bne.n	801ed12 <_ftello_r+0x4a>
 801ed0e:	68ac      	ldr	r4, [r5, #8]
 801ed10:	e7e6      	b.n	801ece0 <_ftello_r+0x18>
 801ed12:	4b26      	ldr	r3, [pc, #152]	; (801edac <_ftello_r+0xe4>)
 801ed14:	429c      	cmp	r4, r3
 801ed16:	bf08      	it	eq
 801ed18:	68ec      	ldreq	r4, [r5, #12]
 801ed1a:	e7e1      	b.n	801ece0 <_ftello_r+0x18>
 801ed1c:	89a3      	ldrh	r3, [r4, #12]
 801ed1e:	059d      	lsls	r5, r3, #22
 801ed20:	d4ee      	bmi.n	801ed00 <_ftello_r+0x38>
 801ed22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed24:	f000 f9a1 	bl	801f06a <__retarget_lock_release_recursive>
 801ed28:	e7ea      	b.n	801ed00 <_ftello_r+0x38>
 801ed2a:	89a2      	ldrh	r2, [r4, #12]
 801ed2c:	f002 030c 	and.w	r3, r2, #12
 801ed30:	2b08      	cmp	r3, #8
 801ed32:	d119      	bne.n	801ed68 <_ftello_r+0xa0>
 801ed34:	6823      	ldr	r3, [r4, #0]
 801ed36:	b1bb      	cbz	r3, 801ed68 <_ftello_r+0xa0>
 801ed38:	6921      	ldr	r1, [r4, #16]
 801ed3a:	1a5b      	subs	r3, r3, r1
 801ed3c:	2b00      	cmp	r3, #0
 801ed3e:	dd13      	ble.n	801ed68 <_ftello_r+0xa0>
 801ed40:	05d0      	lsls	r0, r2, #23
 801ed42:	d511      	bpl.n	801ed68 <_ftello_r+0xa0>
 801ed44:	2302      	movs	r3, #2
 801ed46:	2200      	movs	r2, #0
 801ed48:	6a21      	ldr	r1, [r4, #32]
 801ed4a:	4628      	mov	r0, r5
 801ed4c:	47b0      	blx	r6
 801ed4e:	1c41      	adds	r1, r0, #1
 801ed50:	4605      	mov	r5, r0
 801ed52:	d10d      	bne.n	801ed70 <_ftello_r+0xa8>
 801ed54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed56:	07da      	lsls	r2, r3, #31
 801ed58:	d4d2      	bmi.n	801ed00 <_ftello_r+0x38>
 801ed5a:	89a3      	ldrh	r3, [r4, #12]
 801ed5c:	059b      	lsls	r3, r3, #22
 801ed5e:	d4cf      	bmi.n	801ed00 <_ftello_r+0x38>
 801ed60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ed62:	f000 f982 	bl	801f06a <__retarget_lock_release_recursive>
 801ed66:	e7cd      	b.n	801ed04 <_ftello_r+0x3c>
 801ed68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ed6c:	d00f      	beq.n	801ed8e <_ftello_r+0xc6>
 801ed6e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801ed70:	89a2      	ldrh	r2, [r4, #12]
 801ed72:	0756      	lsls	r6, r2, #29
 801ed74:	d50d      	bpl.n	801ed92 <_ftello_r+0xca>
 801ed76:	6863      	ldr	r3, [r4, #4]
 801ed78:	1aed      	subs	r5, r5, r3
 801ed7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ed7c:	b10b      	cbz	r3, 801ed82 <_ftello_r+0xba>
 801ed7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ed80:	1aed      	subs	r5, r5, r3
 801ed82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ed84:	07d9      	lsls	r1, r3, #31
 801ed86:	d4bd      	bmi.n	801ed04 <_ftello_r+0x3c>
 801ed88:	0593      	lsls	r3, r2, #22
 801ed8a:	d4bb      	bmi.n	801ed04 <_ftello_r+0x3c>
 801ed8c:	e7e8      	b.n	801ed60 <_ftello_r+0x98>
 801ed8e:	2301      	movs	r3, #1
 801ed90:	e7da      	b.n	801ed48 <_ftello_r+0x80>
 801ed92:	0710      	lsls	r0, r2, #28
 801ed94:	d5f5      	bpl.n	801ed82 <_ftello_r+0xba>
 801ed96:	6823      	ldr	r3, [r4, #0]
 801ed98:	2b00      	cmp	r3, #0
 801ed9a:	d0f2      	beq.n	801ed82 <_ftello_r+0xba>
 801ed9c:	6921      	ldr	r1, [r4, #16]
 801ed9e:	1a5b      	subs	r3, r3, r1
 801eda0:	441d      	add	r5, r3
 801eda2:	e7ee      	b.n	801ed82 <_ftello_r+0xba>
 801eda4:	080276b4 	.word	0x080276b4
 801eda8:	080276d4 	.word	0x080276d4
 801edac:	08027694 	.word	0x08027694

0801edb0 <_fwalk_reent>:
 801edb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edb4:	4606      	mov	r6, r0
 801edb6:	4688      	mov	r8, r1
 801edb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801edbc:	2700      	movs	r7, #0
 801edbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801edc2:	f1b9 0901 	subs.w	r9, r9, #1
 801edc6:	d505      	bpl.n	801edd4 <_fwalk_reent+0x24>
 801edc8:	6824      	ldr	r4, [r4, #0]
 801edca:	2c00      	cmp	r4, #0
 801edcc:	d1f7      	bne.n	801edbe <_fwalk_reent+0xe>
 801edce:	4638      	mov	r0, r7
 801edd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801edd4:	89ab      	ldrh	r3, [r5, #12]
 801edd6:	2b01      	cmp	r3, #1
 801edd8:	d907      	bls.n	801edea <_fwalk_reent+0x3a>
 801edda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801edde:	3301      	adds	r3, #1
 801ede0:	d003      	beq.n	801edea <_fwalk_reent+0x3a>
 801ede2:	4629      	mov	r1, r5
 801ede4:	4630      	mov	r0, r6
 801ede6:	47c0      	blx	r8
 801ede8:	4307      	orrs	r7, r0
 801edea:	3568      	adds	r5, #104	; 0x68
 801edec:	e7e9      	b.n	801edc2 <_fwalk_reent+0x12>
	...

0801edf0 <__libc_init_array>:
 801edf0:	b570      	push	{r4, r5, r6, lr}
 801edf2:	4d0d      	ldr	r5, [pc, #52]	; (801ee28 <__libc_init_array+0x38>)
 801edf4:	4c0d      	ldr	r4, [pc, #52]	; (801ee2c <__libc_init_array+0x3c>)
 801edf6:	1b64      	subs	r4, r4, r5
 801edf8:	10a4      	asrs	r4, r4, #2
 801edfa:	2600      	movs	r6, #0
 801edfc:	42a6      	cmp	r6, r4
 801edfe:	d109      	bne.n	801ee14 <__libc_init_array+0x24>
 801ee00:	4d0b      	ldr	r5, [pc, #44]	; (801ee30 <__libc_init_array+0x40>)
 801ee02:	4c0c      	ldr	r4, [pc, #48]	; (801ee34 <__libc_init_array+0x44>)
 801ee04:	f003 f8cc 	bl	8021fa0 <_init>
 801ee08:	1b64      	subs	r4, r4, r5
 801ee0a:	10a4      	asrs	r4, r4, #2
 801ee0c:	2600      	movs	r6, #0
 801ee0e:	42a6      	cmp	r6, r4
 801ee10:	d105      	bne.n	801ee1e <__libc_init_array+0x2e>
 801ee12:	bd70      	pop	{r4, r5, r6, pc}
 801ee14:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee18:	4798      	blx	r3
 801ee1a:	3601      	adds	r6, #1
 801ee1c:	e7ee      	b.n	801edfc <__libc_init_array+0xc>
 801ee1e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ee22:	4798      	blx	r3
 801ee24:	3601      	adds	r6, #1
 801ee26:	e7f2      	b.n	801ee0e <__libc_init_array+0x1e>
 801ee28:	08027c8c 	.word	0x08027c8c
 801ee2c:	08027c8c 	.word	0x08027c8c
 801ee30:	08027c8c 	.word	0x08027c8c
 801ee34:	08027c9c 	.word	0x08027c9c

0801ee38 <localtime>:
 801ee38:	b538      	push	{r3, r4, r5, lr}
 801ee3a:	4b0b      	ldr	r3, [pc, #44]	; (801ee68 <localtime+0x30>)
 801ee3c:	681d      	ldr	r5, [r3, #0]
 801ee3e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801ee40:	4604      	mov	r4, r0
 801ee42:	b953      	cbnz	r3, 801ee5a <localtime+0x22>
 801ee44:	2024      	movs	r0, #36	; 0x24
 801ee46:	f000 f975 	bl	801f134 <malloc>
 801ee4a:	4602      	mov	r2, r0
 801ee4c:	63e8      	str	r0, [r5, #60]	; 0x3c
 801ee4e:	b920      	cbnz	r0, 801ee5a <localtime+0x22>
 801ee50:	4b06      	ldr	r3, [pc, #24]	; (801ee6c <localtime+0x34>)
 801ee52:	4807      	ldr	r0, [pc, #28]	; (801ee70 <localtime+0x38>)
 801ee54:	2132      	movs	r1, #50	; 0x32
 801ee56:	f001 fd49 	bl	80208ec <__assert_func>
 801ee5a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801ee5c:	4620      	mov	r0, r4
 801ee5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ee62:	f000 b807 	b.w	801ee74 <localtime_r>
 801ee66:	bf00      	nop
 801ee68:	2000010c 	.word	0x2000010c
 801ee6c:	080276f8 	.word	0x080276f8
 801ee70:	0802770f 	.word	0x0802770f

0801ee74 <localtime_r>:
 801ee74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ee78:	4607      	mov	r7, r0
 801ee7a:	9101      	str	r1, [sp, #4]
 801ee7c:	f001 fe00 	bl	8020a80 <__gettzinfo>
 801ee80:	9901      	ldr	r1, [sp, #4]
 801ee82:	4680      	mov	r8, r0
 801ee84:	4638      	mov	r0, r7
 801ee86:	f001 fdff 	bl	8020a88 <gmtime_r>
 801ee8a:	6943      	ldr	r3, [r0, #20]
 801ee8c:	079a      	lsls	r2, r3, #30
 801ee8e:	4604      	mov	r4, r0
 801ee90:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801ee94:	d105      	bne.n	801eea2 <localtime_r+0x2e>
 801ee96:	2264      	movs	r2, #100	; 0x64
 801ee98:	fb96 f3f2 	sdiv	r3, r6, r2
 801ee9c:	fb02 6313 	mls	r3, r2, r3, r6
 801eea0:	bb7b      	cbnz	r3, 801ef02 <localtime_r+0x8e>
 801eea2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801eea6:	fb96 f5f3 	sdiv	r5, r6, r3
 801eeaa:	fb03 6515 	mls	r5, r3, r5, r6
 801eeae:	fab5 f585 	clz	r5, r5
 801eeb2:	096d      	lsrs	r5, r5, #5
 801eeb4:	4b68      	ldr	r3, [pc, #416]	; (801f058 <localtime_r+0x1e4>)
 801eeb6:	2230      	movs	r2, #48	; 0x30
 801eeb8:	fb02 3505 	mla	r5, r2, r5, r3
 801eebc:	f001 fa16 	bl	80202ec <__tz_lock>
 801eec0:	f001 fa20 	bl	8020304 <_tzset_unlocked>
 801eec4:	4b65      	ldr	r3, [pc, #404]	; (801f05c <localtime_r+0x1e8>)
 801eec6:	681b      	ldr	r3, [r3, #0]
 801eec8:	b353      	cbz	r3, 801ef20 <localtime_r+0xac>
 801eeca:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801eece:	42b3      	cmp	r3, r6
 801eed0:	d119      	bne.n	801ef06 <localtime_r+0x92>
 801eed2:	f8d8 1000 	ldr.w	r1, [r8]
 801eed6:	e9d7 6700 	ldrd	r6, r7, [r7]
 801eeda:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801eede:	b9d1      	cbnz	r1, 801ef16 <localtime_r+0xa2>
 801eee0:	4296      	cmp	r6, r2
 801eee2:	eb77 0303 	sbcs.w	r3, r7, r3
 801eee6:	da23      	bge.n	801ef30 <localtime_r+0xbc>
 801eee8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801eeec:	4296      	cmp	r6, r2
 801eeee:	eb77 0303 	sbcs.w	r3, r7, r3
 801eef2:	bfb4      	ite	lt
 801eef4:	2301      	movlt	r3, #1
 801eef6:	2300      	movge	r3, #0
 801eef8:	6223      	str	r3, [r4, #32]
 801eefa:	db1b      	blt.n	801ef34 <localtime_r+0xc0>
 801eefc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801ef00:	e01a      	b.n	801ef38 <localtime_r+0xc4>
 801ef02:	2501      	movs	r5, #1
 801ef04:	e7d6      	b.n	801eeb4 <localtime_r+0x40>
 801ef06:	4630      	mov	r0, r6
 801ef08:	f001 f948 	bl	802019c <__tzcalc_limits>
 801ef0c:	2800      	cmp	r0, #0
 801ef0e:	d1e0      	bne.n	801eed2 <localtime_r+0x5e>
 801ef10:	f04f 33ff 	mov.w	r3, #4294967295
 801ef14:	e004      	b.n	801ef20 <localtime_r+0xac>
 801ef16:	4296      	cmp	r6, r2
 801ef18:	eb77 0303 	sbcs.w	r3, r7, r3
 801ef1c:	da02      	bge.n	801ef24 <localtime_r+0xb0>
 801ef1e:	2300      	movs	r3, #0
 801ef20:	6223      	str	r3, [r4, #32]
 801ef22:	e7eb      	b.n	801eefc <localtime_r+0x88>
 801ef24:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801ef28:	4296      	cmp	r6, r2
 801ef2a:	eb77 0303 	sbcs.w	r3, r7, r3
 801ef2e:	daf6      	bge.n	801ef1e <localtime_r+0xaa>
 801ef30:	2301      	movs	r3, #1
 801ef32:	6223      	str	r3, [r4, #32]
 801ef34:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801ef38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801ef3c:	203c      	movs	r0, #60	; 0x3c
 801ef3e:	fb91 f6f3 	sdiv	r6, r1, r3
 801ef42:	fb03 1316 	mls	r3, r3, r6, r1
 801ef46:	6861      	ldr	r1, [r4, #4]
 801ef48:	fb93 f2f0 	sdiv	r2, r3, r0
 801ef4c:	fb00 3012 	mls	r0, r0, r2, r3
 801ef50:	6823      	ldr	r3, [r4, #0]
 801ef52:	1a89      	subs	r1, r1, r2
 801ef54:	68a2      	ldr	r2, [r4, #8]
 801ef56:	6061      	str	r1, [r4, #4]
 801ef58:	1a1b      	subs	r3, r3, r0
 801ef5a:	1b92      	subs	r2, r2, r6
 801ef5c:	2b3b      	cmp	r3, #59	; 0x3b
 801ef5e:	6023      	str	r3, [r4, #0]
 801ef60:	60a2      	str	r2, [r4, #8]
 801ef62:	dd35      	ble.n	801efd0 <localtime_r+0x15c>
 801ef64:	3101      	adds	r1, #1
 801ef66:	6061      	str	r1, [r4, #4]
 801ef68:	3b3c      	subs	r3, #60	; 0x3c
 801ef6a:	6023      	str	r3, [r4, #0]
 801ef6c:	6863      	ldr	r3, [r4, #4]
 801ef6e:	2b3b      	cmp	r3, #59	; 0x3b
 801ef70:	dd34      	ble.n	801efdc <localtime_r+0x168>
 801ef72:	3201      	adds	r2, #1
 801ef74:	60a2      	str	r2, [r4, #8]
 801ef76:	3b3c      	subs	r3, #60	; 0x3c
 801ef78:	6063      	str	r3, [r4, #4]
 801ef7a:	68a3      	ldr	r3, [r4, #8]
 801ef7c:	2b17      	cmp	r3, #23
 801ef7e:	dd33      	ble.n	801efe8 <localtime_r+0x174>
 801ef80:	69e2      	ldr	r2, [r4, #28]
 801ef82:	3201      	adds	r2, #1
 801ef84:	61e2      	str	r2, [r4, #28]
 801ef86:	69a2      	ldr	r2, [r4, #24]
 801ef88:	3201      	adds	r2, #1
 801ef8a:	2a06      	cmp	r2, #6
 801ef8c:	bfc8      	it	gt
 801ef8e:	2200      	movgt	r2, #0
 801ef90:	61a2      	str	r2, [r4, #24]
 801ef92:	68e2      	ldr	r2, [r4, #12]
 801ef94:	3b18      	subs	r3, #24
 801ef96:	3201      	adds	r2, #1
 801ef98:	60a3      	str	r3, [r4, #8]
 801ef9a:	6923      	ldr	r3, [r4, #16]
 801ef9c:	60e2      	str	r2, [r4, #12]
 801ef9e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801efa2:	428a      	cmp	r2, r1
 801efa4:	dd0e      	ble.n	801efc4 <localtime_r+0x150>
 801efa6:	2b0b      	cmp	r3, #11
 801efa8:	eba2 0201 	sub.w	r2, r2, r1
 801efac:	60e2      	str	r2, [r4, #12]
 801efae:	f103 0201 	add.w	r2, r3, #1
 801efb2:	bf09      	itett	eq
 801efb4:	6963      	ldreq	r3, [r4, #20]
 801efb6:	6122      	strne	r2, [r4, #16]
 801efb8:	2200      	moveq	r2, #0
 801efba:	3301      	addeq	r3, #1
 801efbc:	bf02      	ittt	eq
 801efbe:	6122      	streq	r2, [r4, #16]
 801efc0:	6163      	streq	r3, [r4, #20]
 801efc2:	61e2      	streq	r2, [r4, #28]
 801efc4:	f001 f998 	bl	80202f8 <__tz_unlock>
 801efc8:	4620      	mov	r0, r4
 801efca:	b002      	add	sp, #8
 801efcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801efd0:	2b00      	cmp	r3, #0
 801efd2:	dacb      	bge.n	801ef6c <localtime_r+0xf8>
 801efd4:	3901      	subs	r1, #1
 801efd6:	6061      	str	r1, [r4, #4]
 801efd8:	333c      	adds	r3, #60	; 0x3c
 801efda:	e7c6      	b.n	801ef6a <localtime_r+0xf6>
 801efdc:	2b00      	cmp	r3, #0
 801efde:	dacc      	bge.n	801ef7a <localtime_r+0x106>
 801efe0:	3a01      	subs	r2, #1
 801efe2:	60a2      	str	r2, [r4, #8]
 801efe4:	333c      	adds	r3, #60	; 0x3c
 801efe6:	e7c7      	b.n	801ef78 <localtime_r+0x104>
 801efe8:	2b00      	cmp	r3, #0
 801efea:	daeb      	bge.n	801efc4 <localtime_r+0x150>
 801efec:	69e2      	ldr	r2, [r4, #28]
 801efee:	3a01      	subs	r2, #1
 801eff0:	61e2      	str	r2, [r4, #28]
 801eff2:	69a2      	ldr	r2, [r4, #24]
 801eff4:	3a01      	subs	r2, #1
 801eff6:	bf48      	it	mi
 801eff8:	2206      	movmi	r2, #6
 801effa:	61a2      	str	r2, [r4, #24]
 801effc:	68e2      	ldr	r2, [r4, #12]
 801effe:	3318      	adds	r3, #24
 801f000:	3a01      	subs	r2, #1
 801f002:	60e2      	str	r2, [r4, #12]
 801f004:	60a3      	str	r3, [r4, #8]
 801f006:	2a00      	cmp	r2, #0
 801f008:	d1dc      	bne.n	801efc4 <localtime_r+0x150>
 801f00a:	6923      	ldr	r3, [r4, #16]
 801f00c:	3b01      	subs	r3, #1
 801f00e:	d405      	bmi.n	801f01c <localtime_r+0x1a8>
 801f010:	6123      	str	r3, [r4, #16]
 801f012:	6923      	ldr	r3, [r4, #16]
 801f014:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801f018:	60e3      	str	r3, [r4, #12]
 801f01a:	e7d3      	b.n	801efc4 <localtime_r+0x150>
 801f01c:	230b      	movs	r3, #11
 801f01e:	6123      	str	r3, [r4, #16]
 801f020:	6963      	ldr	r3, [r4, #20]
 801f022:	1e5a      	subs	r2, r3, #1
 801f024:	6162      	str	r2, [r4, #20]
 801f026:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801f02a:	0793      	lsls	r3, r2, #30
 801f02c:	d105      	bne.n	801f03a <localtime_r+0x1c6>
 801f02e:	2164      	movs	r1, #100	; 0x64
 801f030:	fb92 f3f1 	sdiv	r3, r2, r1
 801f034:	fb01 2313 	mls	r3, r1, r3, r2
 801f038:	b963      	cbnz	r3, 801f054 <localtime_r+0x1e0>
 801f03a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f03e:	fb92 f3f1 	sdiv	r3, r2, r1
 801f042:	fb01 2313 	mls	r3, r1, r3, r2
 801f046:	fab3 f383 	clz	r3, r3
 801f04a:	095b      	lsrs	r3, r3, #5
 801f04c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801f050:	61e3      	str	r3, [r4, #28]
 801f052:	e7de      	b.n	801f012 <localtime_r+0x19e>
 801f054:	2301      	movs	r3, #1
 801f056:	e7f9      	b.n	801f04c <localtime_r+0x1d8>
 801f058:	08027770 	.word	0x08027770
 801f05c:	20000df0 	.word	0x20000df0

0801f060 <__retarget_lock_init_recursive>:
 801f060:	4770      	bx	lr

0801f062 <__retarget_lock_close_recursive>:
 801f062:	4770      	bx	lr

0801f064 <__retarget_lock_acquire>:
 801f064:	4770      	bx	lr

0801f066 <__retarget_lock_acquire_recursive>:
 801f066:	4770      	bx	lr

0801f068 <__retarget_lock_release>:
 801f068:	4770      	bx	lr

0801f06a <__retarget_lock_release_recursive>:
 801f06a:	4770      	bx	lr

0801f06c <__swhatbuf_r>:
 801f06c:	b570      	push	{r4, r5, r6, lr}
 801f06e:	460e      	mov	r6, r1
 801f070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f074:	2900      	cmp	r1, #0
 801f076:	b096      	sub	sp, #88	; 0x58
 801f078:	4614      	mov	r4, r2
 801f07a:	461d      	mov	r5, r3
 801f07c:	da07      	bge.n	801f08e <__swhatbuf_r+0x22>
 801f07e:	2300      	movs	r3, #0
 801f080:	602b      	str	r3, [r5, #0]
 801f082:	89b3      	ldrh	r3, [r6, #12]
 801f084:	061a      	lsls	r2, r3, #24
 801f086:	d410      	bmi.n	801f0aa <__swhatbuf_r+0x3e>
 801f088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f08c:	e00e      	b.n	801f0ac <__swhatbuf_r+0x40>
 801f08e:	466a      	mov	r2, sp
 801f090:	f001 fca2 	bl	80209d8 <_fstat_r>
 801f094:	2800      	cmp	r0, #0
 801f096:	dbf2      	blt.n	801f07e <__swhatbuf_r+0x12>
 801f098:	9a01      	ldr	r2, [sp, #4]
 801f09a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f09e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f0a2:	425a      	negs	r2, r3
 801f0a4:	415a      	adcs	r2, r3
 801f0a6:	602a      	str	r2, [r5, #0]
 801f0a8:	e7ee      	b.n	801f088 <__swhatbuf_r+0x1c>
 801f0aa:	2340      	movs	r3, #64	; 0x40
 801f0ac:	2000      	movs	r0, #0
 801f0ae:	6023      	str	r3, [r4, #0]
 801f0b0:	b016      	add	sp, #88	; 0x58
 801f0b2:	bd70      	pop	{r4, r5, r6, pc}

0801f0b4 <__smakebuf_r>:
 801f0b4:	898b      	ldrh	r3, [r1, #12]
 801f0b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f0b8:	079d      	lsls	r5, r3, #30
 801f0ba:	4606      	mov	r6, r0
 801f0bc:	460c      	mov	r4, r1
 801f0be:	d507      	bpl.n	801f0d0 <__smakebuf_r+0x1c>
 801f0c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f0c4:	6023      	str	r3, [r4, #0]
 801f0c6:	6123      	str	r3, [r4, #16]
 801f0c8:	2301      	movs	r3, #1
 801f0ca:	6163      	str	r3, [r4, #20]
 801f0cc:	b002      	add	sp, #8
 801f0ce:	bd70      	pop	{r4, r5, r6, pc}
 801f0d0:	ab01      	add	r3, sp, #4
 801f0d2:	466a      	mov	r2, sp
 801f0d4:	f7ff ffca 	bl	801f06c <__swhatbuf_r>
 801f0d8:	9900      	ldr	r1, [sp, #0]
 801f0da:	4605      	mov	r5, r0
 801f0dc:	4630      	mov	r0, r6
 801f0de:	f000 f8af 	bl	801f240 <_malloc_r>
 801f0e2:	b948      	cbnz	r0, 801f0f8 <__smakebuf_r+0x44>
 801f0e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f0e8:	059a      	lsls	r2, r3, #22
 801f0ea:	d4ef      	bmi.n	801f0cc <__smakebuf_r+0x18>
 801f0ec:	f023 0303 	bic.w	r3, r3, #3
 801f0f0:	f043 0302 	orr.w	r3, r3, #2
 801f0f4:	81a3      	strh	r3, [r4, #12]
 801f0f6:	e7e3      	b.n	801f0c0 <__smakebuf_r+0xc>
 801f0f8:	4b0d      	ldr	r3, [pc, #52]	; (801f130 <__smakebuf_r+0x7c>)
 801f0fa:	62b3      	str	r3, [r6, #40]	; 0x28
 801f0fc:	89a3      	ldrh	r3, [r4, #12]
 801f0fe:	6020      	str	r0, [r4, #0]
 801f100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f104:	81a3      	strh	r3, [r4, #12]
 801f106:	9b00      	ldr	r3, [sp, #0]
 801f108:	6163      	str	r3, [r4, #20]
 801f10a:	9b01      	ldr	r3, [sp, #4]
 801f10c:	6120      	str	r0, [r4, #16]
 801f10e:	b15b      	cbz	r3, 801f128 <__smakebuf_r+0x74>
 801f110:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f114:	4630      	mov	r0, r6
 801f116:	f001 fd67 	bl	8020be8 <_isatty_r>
 801f11a:	b128      	cbz	r0, 801f128 <__smakebuf_r+0x74>
 801f11c:	89a3      	ldrh	r3, [r4, #12]
 801f11e:	f023 0303 	bic.w	r3, r3, #3
 801f122:	f043 0301 	orr.w	r3, r3, #1
 801f126:	81a3      	strh	r3, [r4, #12]
 801f128:	89a0      	ldrh	r0, [r4, #12]
 801f12a:	4305      	orrs	r5, r0
 801f12c:	81a5      	strh	r5, [r4, #12]
 801f12e:	e7cd      	b.n	801f0cc <__smakebuf_r+0x18>
 801f130:	0801e899 	.word	0x0801e899

0801f134 <malloc>:
 801f134:	4b02      	ldr	r3, [pc, #8]	; (801f140 <malloc+0xc>)
 801f136:	4601      	mov	r1, r0
 801f138:	6818      	ldr	r0, [r3, #0]
 801f13a:	f000 b881 	b.w	801f240 <_malloc_r>
 801f13e:	bf00      	nop
 801f140:	2000010c 	.word	0x2000010c

0801f144 <free>:
 801f144:	4b02      	ldr	r3, [pc, #8]	; (801f150 <free+0xc>)
 801f146:	4601      	mov	r1, r0
 801f148:	6818      	ldr	r0, [r3, #0]
 801f14a:	f000 b829 	b.w	801f1a0 <_free_r>
 801f14e:	bf00      	nop
 801f150:	2000010c 	.word	0x2000010c

0801f154 <memcpy>:
 801f154:	440a      	add	r2, r1
 801f156:	4291      	cmp	r1, r2
 801f158:	f100 33ff 	add.w	r3, r0, #4294967295
 801f15c:	d100      	bne.n	801f160 <memcpy+0xc>
 801f15e:	4770      	bx	lr
 801f160:	b510      	push	{r4, lr}
 801f162:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f166:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f16a:	4291      	cmp	r1, r2
 801f16c:	d1f9      	bne.n	801f162 <memcpy+0xe>
 801f16e:	bd10      	pop	{r4, pc}

0801f170 <memset>:
 801f170:	4402      	add	r2, r0
 801f172:	4603      	mov	r3, r0
 801f174:	4293      	cmp	r3, r2
 801f176:	d100      	bne.n	801f17a <memset+0xa>
 801f178:	4770      	bx	lr
 801f17a:	f803 1b01 	strb.w	r1, [r3], #1
 801f17e:	e7f9      	b.n	801f174 <memset+0x4>

0801f180 <_calloc_r>:
 801f180:	b513      	push	{r0, r1, r4, lr}
 801f182:	434a      	muls	r2, r1
 801f184:	4611      	mov	r1, r2
 801f186:	9201      	str	r2, [sp, #4]
 801f188:	f000 f85a 	bl	801f240 <_malloc_r>
 801f18c:	4604      	mov	r4, r0
 801f18e:	b118      	cbz	r0, 801f198 <_calloc_r+0x18>
 801f190:	9a01      	ldr	r2, [sp, #4]
 801f192:	2100      	movs	r1, #0
 801f194:	f7ff ffec 	bl	801f170 <memset>
 801f198:	4620      	mov	r0, r4
 801f19a:	b002      	add	sp, #8
 801f19c:	bd10      	pop	{r4, pc}
	...

0801f1a0 <_free_r>:
 801f1a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f1a2:	2900      	cmp	r1, #0
 801f1a4:	d048      	beq.n	801f238 <_free_r+0x98>
 801f1a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f1aa:	9001      	str	r0, [sp, #4]
 801f1ac:	2b00      	cmp	r3, #0
 801f1ae:	f1a1 0404 	sub.w	r4, r1, #4
 801f1b2:	bfb8      	it	lt
 801f1b4:	18e4      	addlt	r4, r4, r3
 801f1b6:	f001 fd4f 	bl	8020c58 <__malloc_lock>
 801f1ba:	4a20      	ldr	r2, [pc, #128]	; (801f23c <_free_r+0x9c>)
 801f1bc:	9801      	ldr	r0, [sp, #4]
 801f1be:	6813      	ldr	r3, [r2, #0]
 801f1c0:	4615      	mov	r5, r2
 801f1c2:	b933      	cbnz	r3, 801f1d2 <_free_r+0x32>
 801f1c4:	6063      	str	r3, [r4, #4]
 801f1c6:	6014      	str	r4, [r2, #0]
 801f1c8:	b003      	add	sp, #12
 801f1ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f1ce:	f001 bd49 	b.w	8020c64 <__malloc_unlock>
 801f1d2:	42a3      	cmp	r3, r4
 801f1d4:	d90b      	bls.n	801f1ee <_free_r+0x4e>
 801f1d6:	6821      	ldr	r1, [r4, #0]
 801f1d8:	1862      	adds	r2, r4, r1
 801f1da:	4293      	cmp	r3, r2
 801f1dc:	bf04      	itt	eq
 801f1de:	681a      	ldreq	r2, [r3, #0]
 801f1e0:	685b      	ldreq	r3, [r3, #4]
 801f1e2:	6063      	str	r3, [r4, #4]
 801f1e4:	bf04      	itt	eq
 801f1e6:	1852      	addeq	r2, r2, r1
 801f1e8:	6022      	streq	r2, [r4, #0]
 801f1ea:	602c      	str	r4, [r5, #0]
 801f1ec:	e7ec      	b.n	801f1c8 <_free_r+0x28>
 801f1ee:	461a      	mov	r2, r3
 801f1f0:	685b      	ldr	r3, [r3, #4]
 801f1f2:	b10b      	cbz	r3, 801f1f8 <_free_r+0x58>
 801f1f4:	42a3      	cmp	r3, r4
 801f1f6:	d9fa      	bls.n	801f1ee <_free_r+0x4e>
 801f1f8:	6811      	ldr	r1, [r2, #0]
 801f1fa:	1855      	adds	r5, r2, r1
 801f1fc:	42a5      	cmp	r5, r4
 801f1fe:	d10b      	bne.n	801f218 <_free_r+0x78>
 801f200:	6824      	ldr	r4, [r4, #0]
 801f202:	4421      	add	r1, r4
 801f204:	1854      	adds	r4, r2, r1
 801f206:	42a3      	cmp	r3, r4
 801f208:	6011      	str	r1, [r2, #0]
 801f20a:	d1dd      	bne.n	801f1c8 <_free_r+0x28>
 801f20c:	681c      	ldr	r4, [r3, #0]
 801f20e:	685b      	ldr	r3, [r3, #4]
 801f210:	6053      	str	r3, [r2, #4]
 801f212:	4421      	add	r1, r4
 801f214:	6011      	str	r1, [r2, #0]
 801f216:	e7d7      	b.n	801f1c8 <_free_r+0x28>
 801f218:	d902      	bls.n	801f220 <_free_r+0x80>
 801f21a:	230c      	movs	r3, #12
 801f21c:	6003      	str	r3, [r0, #0]
 801f21e:	e7d3      	b.n	801f1c8 <_free_r+0x28>
 801f220:	6825      	ldr	r5, [r4, #0]
 801f222:	1961      	adds	r1, r4, r5
 801f224:	428b      	cmp	r3, r1
 801f226:	bf04      	itt	eq
 801f228:	6819      	ldreq	r1, [r3, #0]
 801f22a:	685b      	ldreq	r3, [r3, #4]
 801f22c:	6063      	str	r3, [r4, #4]
 801f22e:	bf04      	itt	eq
 801f230:	1949      	addeq	r1, r1, r5
 801f232:	6021      	streq	r1, [r4, #0]
 801f234:	6054      	str	r4, [r2, #4]
 801f236:	e7c7      	b.n	801f1c8 <_free_r+0x28>
 801f238:	b003      	add	sp, #12
 801f23a:	bd30      	pop	{r4, r5, pc}
 801f23c:	20000dcc 	.word	0x20000dcc

0801f240 <_malloc_r>:
 801f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f242:	1ccd      	adds	r5, r1, #3
 801f244:	f025 0503 	bic.w	r5, r5, #3
 801f248:	3508      	adds	r5, #8
 801f24a:	2d0c      	cmp	r5, #12
 801f24c:	bf38      	it	cc
 801f24e:	250c      	movcc	r5, #12
 801f250:	2d00      	cmp	r5, #0
 801f252:	4606      	mov	r6, r0
 801f254:	db01      	blt.n	801f25a <_malloc_r+0x1a>
 801f256:	42a9      	cmp	r1, r5
 801f258:	d903      	bls.n	801f262 <_malloc_r+0x22>
 801f25a:	230c      	movs	r3, #12
 801f25c:	6033      	str	r3, [r6, #0]
 801f25e:	2000      	movs	r0, #0
 801f260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f262:	f001 fcf9 	bl	8020c58 <__malloc_lock>
 801f266:	4921      	ldr	r1, [pc, #132]	; (801f2ec <_malloc_r+0xac>)
 801f268:	680a      	ldr	r2, [r1, #0]
 801f26a:	4614      	mov	r4, r2
 801f26c:	b99c      	cbnz	r4, 801f296 <_malloc_r+0x56>
 801f26e:	4f20      	ldr	r7, [pc, #128]	; (801f2f0 <_malloc_r+0xb0>)
 801f270:	683b      	ldr	r3, [r7, #0]
 801f272:	b923      	cbnz	r3, 801f27e <_malloc_r+0x3e>
 801f274:	4621      	mov	r1, r4
 801f276:	4630      	mov	r0, r6
 801f278:	f000 f8da 	bl	801f430 <_sbrk_r>
 801f27c:	6038      	str	r0, [r7, #0]
 801f27e:	4629      	mov	r1, r5
 801f280:	4630      	mov	r0, r6
 801f282:	f000 f8d5 	bl	801f430 <_sbrk_r>
 801f286:	1c43      	adds	r3, r0, #1
 801f288:	d123      	bne.n	801f2d2 <_malloc_r+0x92>
 801f28a:	230c      	movs	r3, #12
 801f28c:	6033      	str	r3, [r6, #0]
 801f28e:	4630      	mov	r0, r6
 801f290:	f001 fce8 	bl	8020c64 <__malloc_unlock>
 801f294:	e7e3      	b.n	801f25e <_malloc_r+0x1e>
 801f296:	6823      	ldr	r3, [r4, #0]
 801f298:	1b5b      	subs	r3, r3, r5
 801f29a:	d417      	bmi.n	801f2cc <_malloc_r+0x8c>
 801f29c:	2b0b      	cmp	r3, #11
 801f29e:	d903      	bls.n	801f2a8 <_malloc_r+0x68>
 801f2a0:	6023      	str	r3, [r4, #0]
 801f2a2:	441c      	add	r4, r3
 801f2a4:	6025      	str	r5, [r4, #0]
 801f2a6:	e004      	b.n	801f2b2 <_malloc_r+0x72>
 801f2a8:	6863      	ldr	r3, [r4, #4]
 801f2aa:	42a2      	cmp	r2, r4
 801f2ac:	bf0c      	ite	eq
 801f2ae:	600b      	streq	r3, [r1, #0]
 801f2b0:	6053      	strne	r3, [r2, #4]
 801f2b2:	4630      	mov	r0, r6
 801f2b4:	f001 fcd6 	bl	8020c64 <__malloc_unlock>
 801f2b8:	f104 000b 	add.w	r0, r4, #11
 801f2bc:	1d23      	adds	r3, r4, #4
 801f2be:	f020 0007 	bic.w	r0, r0, #7
 801f2c2:	1ac2      	subs	r2, r0, r3
 801f2c4:	d0cc      	beq.n	801f260 <_malloc_r+0x20>
 801f2c6:	1a1b      	subs	r3, r3, r0
 801f2c8:	50a3      	str	r3, [r4, r2]
 801f2ca:	e7c9      	b.n	801f260 <_malloc_r+0x20>
 801f2cc:	4622      	mov	r2, r4
 801f2ce:	6864      	ldr	r4, [r4, #4]
 801f2d0:	e7cc      	b.n	801f26c <_malloc_r+0x2c>
 801f2d2:	1cc4      	adds	r4, r0, #3
 801f2d4:	f024 0403 	bic.w	r4, r4, #3
 801f2d8:	42a0      	cmp	r0, r4
 801f2da:	d0e3      	beq.n	801f2a4 <_malloc_r+0x64>
 801f2dc:	1a21      	subs	r1, r4, r0
 801f2de:	4630      	mov	r0, r6
 801f2e0:	f000 f8a6 	bl	801f430 <_sbrk_r>
 801f2e4:	3001      	adds	r0, #1
 801f2e6:	d1dd      	bne.n	801f2a4 <_malloc_r+0x64>
 801f2e8:	e7cf      	b.n	801f28a <_malloc_r+0x4a>
 801f2ea:	bf00      	nop
 801f2ec:	20000dcc 	.word	0x20000dcc
 801f2f0:	20000dd0 	.word	0x20000dd0

0801f2f4 <_open_r>:
 801f2f4:	b538      	push	{r3, r4, r5, lr}
 801f2f6:	4d07      	ldr	r5, [pc, #28]	; (801f314 <_open_r+0x20>)
 801f2f8:	4604      	mov	r4, r0
 801f2fa:	4608      	mov	r0, r1
 801f2fc:	4611      	mov	r1, r2
 801f2fe:	2200      	movs	r2, #0
 801f300:	602a      	str	r2, [r5, #0]
 801f302:	461a      	mov	r2, r3
 801f304:	f7e1 fdb4 	bl	8000e70 <_open>
 801f308:	1c43      	adds	r3, r0, #1
 801f30a:	d102      	bne.n	801f312 <_open_r+0x1e>
 801f30c:	682b      	ldr	r3, [r5, #0]
 801f30e:	b103      	cbz	r3, 801f312 <_open_r+0x1e>
 801f310:	6023      	str	r3, [r4, #0]
 801f312:	bd38      	pop	{r3, r4, r5, pc}
 801f314:	20000e98 	.word	0x20000e98

0801f318 <putchar>:
 801f318:	4b09      	ldr	r3, [pc, #36]	; (801f340 <putchar+0x28>)
 801f31a:	b513      	push	{r0, r1, r4, lr}
 801f31c:	681c      	ldr	r4, [r3, #0]
 801f31e:	4601      	mov	r1, r0
 801f320:	b134      	cbz	r4, 801f330 <putchar+0x18>
 801f322:	69a3      	ldr	r3, [r4, #24]
 801f324:	b923      	cbnz	r3, 801f330 <putchar+0x18>
 801f326:	9001      	str	r0, [sp, #4]
 801f328:	4620      	mov	r0, r4
 801f32a:	f7ff fae9 	bl	801e900 <__sinit>
 801f32e:	9901      	ldr	r1, [sp, #4]
 801f330:	68a2      	ldr	r2, [r4, #8]
 801f332:	4620      	mov	r0, r4
 801f334:	b002      	add	sp, #8
 801f336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f33a:	f002 b909 	b.w	8021550 <_putc_r>
 801f33e:	bf00      	nop
 801f340:	2000010c 	.word	0x2000010c

0801f344 <srand>:
 801f344:	b538      	push	{r3, r4, r5, lr}
 801f346:	4b10      	ldr	r3, [pc, #64]	; (801f388 <srand+0x44>)
 801f348:	681d      	ldr	r5, [r3, #0]
 801f34a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801f34c:	4604      	mov	r4, r0
 801f34e:	b9b3      	cbnz	r3, 801f37e <srand+0x3a>
 801f350:	2018      	movs	r0, #24
 801f352:	f7ff feef 	bl	801f134 <malloc>
 801f356:	4602      	mov	r2, r0
 801f358:	63a8      	str	r0, [r5, #56]	; 0x38
 801f35a:	b920      	cbnz	r0, 801f366 <srand+0x22>
 801f35c:	4b0b      	ldr	r3, [pc, #44]	; (801f38c <srand+0x48>)
 801f35e:	480c      	ldr	r0, [pc, #48]	; (801f390 <srand+0x4c>)
 801f360:	2142      	movs	r1, #66	; 0x42
 801f362:	f001 fac3 	bl	80208ec <__assert_func>
 801f366:	490b      	ldr	r1, [pc, #44]	; (801f394 <srand+0x50>)
 801f368:	4b0b      	ldr	r3, [pc, #44]	; (801f398 <srand+0x54>)
 801f36a:	e9c0 1300 	strd	r1, r3, [r0]
 801f36e:	4b0b      	ldr	r3, [pc, #44]	; (801f39c <srand+0x58>)
 801f370:	6083      	str	r3, [r0, #8]
 801f372:	230b      	movs	r3, #11
 801f374:	8183      	strh	r3, [r0, #12]
 801f376:	2100      	movs	r1, #0
 801f378:	2001      	movs	r0, #1
 801f37a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801f37e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801f380:	2200      	movs	r2, #0
 801f382:	611c      	str	r4, [r3, #16]
 801f384:	615a      	str	r2, [r3, #20]
 801f386:	bd38      	pop	{r3, r4, r5, pc}
 801f388:	2000010c 	.word	0x2000010c
 801f38c:	080276f8 	.word	0x080276f8
 801f390:	080277d0 	.word	0x080277d0
 801f394:	abcd330e 	.word	0xabcd330e
 801f398:	e66d1234 	.word	0xe66d1234
 801f39c:	0005deec 	.word	0x0005deec

0801f3a0 <rand>:
 801f3a0:	4b17      	ldr	r3, [pc, #92]	; (801f400 <rand+0x60>)
 801f3a2:	b510      	push	{r4, lr}
 801f3a4:	681c      	ldr	r4, [r3, #0]
 801f3a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f3a8:	b9b3      	cbnz	r3, 801f3d8 <rand+0x38>
 801f3aa:	2018      	movs	r0, #24
 801f3ac:	f7ff fec2 	bl	801f134 <malloc>
 801f3b0:	63a0      	str	r0, [r4, #56]	; 0x38
 801f3b2:	b928      	cbnz	r0, 801f3c0 <rand+0x20>
 801f3b4:	4602      	mov	r2, r0
 801f3b6:	4b13      	ldr	r3, [pc, #76]	; (801f404 <rand+0x64>)
 801f3b8:	4813      	ldr	r0, [pc, #76]	; (801f408 <rand+0x68>)
 801f3ba:	214e      	movs	r1, #78	; 0x4e
 801f3bc:	f001 fa96 	bl	80208ec <__assert_func>
 801f3c0:	4a12      	ldr	r2, [pc, #72]	; (801f40c <rand+0x6c>)
 801f3c2:	4b13      	ldr	r3, [pc, #76]	; (801f410 <rand+0x70>)
 801f3c4:	e9c0 2300 	strd	r2, r3, [r0]
 801f3c8:	4b12      	ldr	r3, [pc, #72]	; (801f414 <rand+0x74>)
 801f3ca:	6083      	str	r3, [r0, #8]
 801f3cc:	230b      	movs	r3, #11
 801f3ce:	8183      	strh	r3, [r0, #12]
 801f3d0:	2201      	movs	r2, #1
 801f3d2:	2300      	movs	r3, #0
 801f3d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f3d8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f3da:	480f      	ldr	r0, [pc, #60]	; (801f418 <rand+0x78>)
 801f3dc:	690a      	ldr	r2, [r1, #16]
 801f3de:	694b      	ldr	r3, [r1, #20]
 801f3e0:	4c0e      	ldr	r4, [pc, #56]	; (801f41c <rand+0x7c>)
 801f3e2:	4350      	muls	r0, r2
 801f3e4:	fb04 0003 	mla	r0, r4, r3, r0
 801f3e8:	fba2 3404 	umull	r3, r4, r2, r4
 801f3ec:	1c5a      	adds	r2, r3, #1
 801f3ee:	4404      	add	r4, r0
 801f3f0:	f144 0000 	adc.w	r0, r4, #0
 801f3f4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f3f8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f3fc:	bd10      	pop	{r4, pc}
 801f3fe:	bf00      	nop
 801f400:	2000010c 	.word	0x2000010c
 801f404:	080276f8 	.word	0x080276f8
 801f408:	080277d0 	.word	0x080277d0
 801f40c:	abcd330e 	.word	0xabcd330e
 801f410:	e66d1234 	.word	0xe66d1234
 801f414:	0005deec 	.word	0x0005deec
 801f418:	5851f42d 	.word	0x5851f42d
 801f41c:	4c957f2d 	.word	0x4c957f2d

0801f420 <realloc>:
 801f420:	4b02      	ldr	r3, [pc, #8]	; (801f42c <realloc+0xc>)
 801f422:	460a      	mov	r2, r1
 801f424:	4601      	mov	r1, r0
 801f426:	6818      	ldr	r0, [r3, #0]
 801f428:	f001 bc22 	b.w	8020c70 <_realloc_r>
 801f42c:	2000010c 	.word	0x2000010c

0801f430 <_sbrk_r>:
 801f430:	b538      	push	{r3, r4, r5, lr}
 801f432:	4d06      	ldr	r5, [pc, #24]	; (801f44c <_sbrk_r+0x1c>)
 801f434:	2300      	movs	r3, #0
 801f436:	4604      	mov	r4, r0
 801f438:	4608      	mov	r0, r1
 801f43a:	602b      	str	r3, [r5, #0]
 801f43c:	f7e1 fd26 	bl	8000e8c <_sbrk>
 801f440:	1c43      	adds	r3, r0, #1
 801f442:	d102      	bne.n	801f44a <_sbrk_r+0x1a>
 801f444:	682b      	ldr	r3, [r5, #0]
 801f446:	b103      	cbz	r3, 801f44a <_sbrk_r+0x1a>
 801f448:	6023      	str	r3, [r4, #0]
 801f44a:	bd38      	pop	{r3, r4, r5, pc}
 801f44c:	20000e98 	.word	0x20000e98

0801f450 <_raise_r>:
 801f450:	291f      	cmp	r1, #31
 801f452:	b538      	push	{r3, r4, r5, lr}
 801f454:	4604      	mov	r4, r0
 801f456:	460d      	mov	r5, r1
 801f458:	d904      	bls.n	801f464 <_raise_r+0x14>
 801f45a:	2316      	movs	r3, #22
 801f45c:	6003      	str	r3, [r0, #0]
 801f45e:	f04f 30ff 	mov.w	r0, #4294967295
 801f462:	bd38      	pop	{r3, r4, r5, pc}
 801f464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f466:	b112      	cbz	r2, 801f46e <_raise_r+0x1e>
 801f468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f46c:	b94b      	cbnz	r3, 801f482 <_raise_r+0x32>
 801f46e:	4620      	mov	r0, r4
 801f470:	f000 f830 	bl	801f4d4 <_getpid_r>
 801f474:	462a      	mov	r2, r5
 801f476:	4601      	mov	r1, r0
 801f478:	4620      	mov	r0, r4
 801f47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f47e:	f000 b817 	b.w	801f4b0 <_kill_r>
 801f482:	2b01      	cmp	r3, #1
 801f484:	d00a      	beq.n	801f49c <_raise_r+0x4c>
 801f486:	1c59      	adds	r1, r3, #1
 801f488:	d103      	bne.n	801f492 <_raise_r+0x42>
 801f48a:	2316      	movs	r3, #22
 801f48c:	6003      	str	r3, [r0, #0]
 801f48e:	2001      	movs	r0, #1
 801f490:	e7e7      	b.n	801f462 <_raise_r+0x12>
 801f492:	2400      	movs	r4, #0
 801f494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f498:	4628      	mov	r0, r5
 801f49a:	4798      	blx	r3
 801f49c:	2000      	movs	r0, #0
 801f49e:	e7e0      	b.n	801f462 <_raise_r+0x12>

0801f4a0 <raise>:
 801f4a0:	4b02      	ldr	r3, [pc, #8]	; (801f4ac <raise+0xc>)
 801f4a2:	4601      	mov	r1, r0
 801f4a4:	6818      	ldr	r0, [r3, #0]
 801f4a6:	f7ff bfd3 	b.w	801f450 <_raise_r>
 801f4aa:	bf00      	nop
 801f4ac:	2000010c 	.word	0x2000010c

0801f4b0 <_kill_r>:
 801f4b0:	b538      	push	{r3, r4, r5, lr}
 801f4b2:	4d07      	ldr	r5, [pc, #28]	; (801f4d0 <_kill_r+0x20>)
 801f4b4:	2300      	movs	r3, #0
 801f4b6:	4604      	mov	r4, r0
 801f4b8:	4608      	mov	r0, r1
 801f4ba:	4611      	mov	r1, r2
 801f4bc:	602b      	str	r3, [r5, #0]
 801f4be:	f7e1 fc50 	bl	8000d62 <_kill>
 801f4c2:	1c43      	adds	r3, r0, #1
 801f4c4:	d102      	bne.n	801f4cc <_kill_r+0x1c>
 801f4c6:	682b      	ldr	r3, [r5, #0]
 801f4c8:	b103      	cbz	r3, 801f4cc <_kill_r+0x1c>
 801f4ca:	6023      	str	r3, [r4, #0]
 801f4cc:	bd38      	pop	{r3, r4, r5, pc}
 801f4ce:	bf00      	nop
 801f4d0:	20000e98 	.word	0x20000e98

0801f4d4 <_getpid_r>:
 801f4d4:	f7e1 bc3d 	b.w	8000d52 <_getpid>

0801f4d8 <siprintf>:
 801f4d8:	b40e      	push	{r1, r2, r3}
 801f4da:	b500      	push	{lr}
 801f4dc:	b09c      	sub	sp, #112	; 0x70
 801f4de:	ab1d      	add	r3, sp, #116	; 0x74
 801f4e0:	9002      	str	r0, [sp, #8]
 801f4e2:	9006      	str	r0, [sp, #24]
 801f4e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f4e8:	4809      	ldr	r0, [pc, #36]	; (801f510 <siprintf+0x38>)
 801f4ea:	9107      	str	r1, [sp, #28]
 801f4ec:	9104      	str	r1, [sp, #16]
 801f4ee:	4909      	ldr	r1, [pc, #36]	; (801f514 <siprintf+0x3c>)
 801f4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4f4:	9105      	str	r1, [sp, #20]
 801f4f6:	6800      	ldr	r0, [r0, #0]
 801f4f8:	9301      	str	r3, [sp, #4]
 801f4fa:	a902      	add	r1, sp, #8
 801f4fc:	f001 fc3a 	bl	8020d74 <_svfiprintf_r>
 801f500:	9b02      	ldr	r3, [sp, #8]
 801f502:	2200      	movs	r2, #0
 801f504:	701a      	strb	r2, [r3, #0]
 801f506:	b01c      	add	sp, #112	; 0x70
 801f508:	f85d eb04 	ldr.w	lr, [sp], #4
 801f50c:	b003      	add	sp, #12
 801f50e:	4770      	bx	lr
 801f510:	2000010c 	.word	0x2000010c
 801f514:	ffff0208 	.word	0xffff0208

0801f518 <__sread>:
 801f518:	b510      	push	{r4, lr}
 801f51a:	460c      	mov	r4, r1
 801f51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f520:	f002 f85e 	bl	80215e0 <_read_r>
 801f524:	2800      	cmp	r0, #0
 801f526:	bfab      	itete	ge
 801f528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f52a:	89a3      	ldrhlt	r3, [r4, #12]
 801f52c:	181b      	addge	r3, r3, r0
 801f52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f532:	bfac      	ite	ge
 801f534:	6563      	strge	r3, [r4, #84]	; 0x54
 801f536:	81a3      	strhlt	r3, [r4, #12]
 801f538:	bd10      	pop	{r4, pc}

0801f53a <__seofread>:
 801f53a:	2000      	movs	r0, #0
 801f53c:	4770      	bx	lr

0801f53e <__swrite>:
 801f53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f542:	461f      	mov	r7, r3
 801f544:	898b      	ldrh	r3, [r1, #12]
 801f546:	05db      	lsls	r3, r3, #23
 801f548:	4605      	mov	r5, r0
 801f54a:	460c      	mov	r4, r1
 801f54c:	4616      	mov	r6, r2
 801f54e:	d505      	bpl.n	801f55c <__swrite+0x1e>
 801f550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f554:	2302      	movs	r3, #2
 801f556:	2200      	movs	r2, #0
 801f558:	f001 fb5a 	bl	8020c10 <_lseek_r>
 801f55c:	89a3      	ldrh	r3, [r4, #12]
 801f55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f566:	81a3      	strh	r3, [r4, #12]
 801f568:	4632      	mov	r2, r6
 801f56a:	463b      	mov	r3, r7
 801f56c:	4628      	mov	r0, r5
 801f56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f572:	f001 b8d5 	b.w	8020720 <_write_r>

0801f576 <__sseek>:
 801f576:	b510      	push	{r4, lr}
 801f578:	460c      	mov	r4, r1
 801f57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f57e:	f001 fb47 	bl	8020c10 <_lseek_r>
 801f582:	1c43      	adds	r3, r0, #1
 801f584:	89a3      	ldrh	r3, [r4, #12]
 801f586:	bf15      	itete	ne
 801f588:	6560      	strne	r0, [r4, #84]	; 0x54
 801f58a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f58e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f592:	81a3      	strheq	r3, [r4, #12]
 801f594:	bf18      	it	ne
 801f596:	81a3      	strhne	r3, [r4, #12]
 801f598:	bd10      	pop	{r4, pc}

0801f59a <__sclose>:
 801f59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f59e:	f001 b9c3 	b.w	8020928 <_close_r>
	...

0801f5a4 <iso_year_adjust>:
 801f5a4:	6941      	ldr	r1, [r0, #20]
 801f5a6:	2900      	cmp	r1, #0
 801f5a8:	f240 736c 	movw	r3, #1900	; 0x76c
 801f5ac:	bfa8      	it	ge
 801f5ae:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801f5b2:	18ca      	adds	r2, r1, r3
 801f5b4:	078b      	lsls	r3, r1, #30
 801f5b6:	d105      	bne.n	801f5c4 <iso_year_adjust+0x20>
 801f5b8:	2164      	movs	r1, #100	; 0x64
 801f5ba:	fb92 f3f1 	sdiv	r3, r2, r1
 801f5be:	fb01 2313 	mls	r3, r1, r3, r2
 801f5c2:	b9db      	cbnz	r3, 801f5fc <iso_year_adjust+0x58>
 801f5c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801f5c8:	fb92 f3f1 	sdiv	r3, r2, r1
 801f5cc:	fb01 2313 	mls	r3, r1, r3, r2
 801f5d0:	fab3 f383 	clz	r3, r3
 801f5d4:	095b      	lsrs	r3, r3, #5
 801f5d6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801f5da:	0040      	lsls	r0, r0, #1
 801f5dc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801f5e0:	4418      	add	r0, r3
 801f5e2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801f5e6:	4298      	cmp	r0, r3
 801f5e8:	d03a      	beq.n	801f660 <iso_year_adjust+0xbc>
 801f5ea:	dc21      	bgt.n	801f630 <iso_year_adjust+0x8c>
 801f5ec:	2801      	cmp	r0, #1
 801f5ee:	dc1a      	bgt.n	801f626 <iso_year_adjust+0x82>
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	bfb4      	ite	lt
 801f5f4:	2000      	movlt	r0, #0
 801f5f6:	f04f 30ff 	movge.w	r0, #4294967295
 801f5fa:	4770      	bx	lr
 801f5fc:	2301      	movs	r3, #1
 801f5fe:	e7ea      	b.n	801f5d6 <iso_year_adjust+0x32>
 801f600:	2817      	cmp	r0, #23
 801f602:	d813      	bhi.n	801f62c <iso_year_adjust+0x88>
 801f604:	e8df f000 	tbb	[pc, r0]
 801f608:	0c0c0c0c 	.word	0x0c0c0c0c
 801f60c:	0c0c1212 	.word	0x0c0c1212
 801f610:	12121212 	.word	0x12121212
 801f614:	12121212 	.word	0x12121212
 801f618:	0c0c1212 	.word	0x0c0c1212
 801f61c:	0c0c1212 	.word	0x0c0c1212
 801f620:	f04f 30ff 	mov.w	r0, #4294967295
 801f624:	4770      	bx	lr
 801f626:	380a      	subs	r0, #10
 801f628:	2817      	cmp	r0, #23
 801f62a:	d9e9      	bls.n	801f600 <iso_year_adjust+0x5c>
 801f62c:	2000      	movs	r0, #0
 801f62e:	4770      	bx	lr
 801f630:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801f634:	4298      	cmp	r0, r3
 801f636:	dc06      	bgt.n	801f646 <iso_year_adjust+0xa2>
 801f638:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801f63c:	4298      	cmp	r0, r3
 801f63e:	bfd4      	ite	le
 801f640:	2000      	movle	r0, #0
 801f642:	2001      	movgt	r0, #1
 801f644:	4770      	bx	lr
 801f646:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801f64a:	3802      	subs	r0, #2
 801f64c:	2815      	cmp	r0, #21
 801f64e:	d8ed      	bhi.n	801f62c <iso_year_adjust+0x88>
 801f650:	2301      	movs	r3, #1
 801f652:	4083      	lsls	r3, r0
 801f654:	4803      	ldr	r0, [pc, #12]	; (801f664 <iso_year_adjust+0xc0>)
 801f656:	4018      	ands	r0, r3
 801f658:	3800      	subs	r0, #0
 801f65a:	bf18      	it	ne
 801f65c:	2001      	movne	r0, #1
 801f65e:	4770      	bx	lr
 801f660:	2001      	movs	r0, #1
 801f662:	4770      	bx	lr
 801f664:	002a001f 	.word	0x002a001f

0801f668 <__strftime>:
 801f668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f66c:	b091      	sub	sp, #68	; 0x44
 801f66e:	461d      	mov	r5, r3
 801f670:	2300      	movs	r3, #0
 801f672:	4681      	mov	r9, r0
 801f674:	4688      	mov	r8, r1
 801f676:	9304      	str	r3, [sp, #16]
 801f678:	461c      	mov	r4, r3
 801f67a:	7813      	ldrb	r3, [r2, #0]
 801f67c:	2b00      	cmp	r3, #0
 801f67e:	f000 84d1 	beq.w	8020024 <__strftime+0x9bc>
 801f682:	2b25      	cmp	r3, #37	; 0x25
 801f684:	d11b      	bne.n	801f6be <__strftime+0x56>
 801f686:	7857      	ldrb	r7, [r2, #1]
 801f688:	2f30      	cmp	r7, #48	; 0x30
 801f68a:	d024      	beq.n	801f6d6 <__strftime+0x6e>
 801f68c:	2f2b      	cmp	r7, #43	; 0x2b
 801f68e:	d022      	beq.n	801f6d6 <__strftime+0x6e>
 801f690:	f102 0b01 	add.w	fp, r2, #1
 801f694:	2700      	movs	r7, #0
 801f696:	f89b 3000 	ldrb.w	r3, [fp]
 801f69a:	3b31      	subs	r3, #49	; 0x31
 801f69c:	2b08      	cmp	r3, #8
 801f69e:	d81d      	bhi.n	801f6dc <__strftime+0x74>
 801f6a0:	4658      	mov	r0, fp
 801f6a2:	220a      	movs	r2, #10
 801f6a4:	a908      	add	r1, sp, #32
 801f6a6:	f000 fd6f 	bl	8020188 <strtoul>
 801f6aa:	f8dd b020 	ldr.w	fp, [sp, #32]
 801f6ae:	4606      	mov	r6, r0
 801f6b0:	f89b 3000 	ldrb.w	r3, [fp]
 801f6b4:	2b45      	cmp	r3, #69	; 0x45
 801f6b6:	d113      	bne.n	801f6e0 <__strftime+0x78>
 801f6b8:	f10b 0b01 	add.w	fp, fp, #1
 801f6bc:	e012      	b.n	801f6e4 <__strftime+0x7c>
 801f6be:	f108 31ff 	add.w	r1, r8, #4294967295
 801f6c2:	42a1      	cmp	r1, r4
 801f6c4:	d802      	bhi.n	801f6cc <__strftime+0x64>
 801f6c6:	2400      	movs	r4, #0
 801f6c8:	f000 bcb2 	b.w	8020030 <__strftime+0x9c8>
 801f6cc:	f809 3004 	strb.w	r3, [r9, r4]
 801f6d0:	3201      	adds	r2, #1
 801f6d2:	3401      	adds	r4, #1
 801f6d4:	e7d1      	b.n	801f67a <__strftime+0x12>
 801f6d6:	f102 0b02 	add.w	fp, r2, #2
 801f6da:	e7dc      	b.n	801f696 <__strftime+0x2e>
 801f6dc:	2600      	movs	r6, #0
 801f6de:	e7e7      	b.n	801f6b0 <__strftime+0x48>
 801f6e0:	2b4f      	cmp	r3, #79	; 0x4f
 801f6e2:	d0e9      	beq.n	801f6b8 <__strftime+0x50>
 801f6e4:	f89b 0000 	ldrb.w	r0, [fp]
 801f6e8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801f6ec:	2b55      	cmp	r3, #85	; 0x55
 801f6ee:	d8ea      	bhi.n	801f6c6 <__strftime+0x5e>
 801f6f0:	a201      	add	r2, pc, #4	; (adr r2, 801f6f8 <__strftime+0x90>)
 801f6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6f6:	bf00      	nop
 801f6f8:	08020017 	.word	0x08020017
 801f6fc:	0801f6c7 	.word	0x0801f6c7
 801f700:	0801f6c7 	.word	0x0801f6c7
 801f704:	0801f6c7 	.word	0x0801f6c7
 801f708:	0801f6c7 	.word	0x0801f6c7
 801f70c:	0801f6c7 	.word	0x0801f6c7
 801f710:	0801f6c7 	.word	0x0801f6c7
 801f714:	0801f6c7 	.word	0x0801f6c7
 801f718:	0801f6c7 	.word	0x0801f6c7
 801f71c:	0801f6c7 	.word	0x0801f6c7
 801f720:	0801f6c7 	.word	0x0801f6c7
 801f724:	0801f6c7 	.word	0x0801f6c7
 801f728:	0801f6c7 	.word	0x0801f6c7
 801f72c:	0801f6c7 	.word	0x0801f6c7
 801f730:	0801f6c7 	.word	0x0801f6c7
 801f734:	0801f6c7 	.word	0x0801f6c7
 801f738:	0801f6c7 	.word	0x0801f6c7
 801f73c:	0801f6c7 	.word	0x0801f6c7
 801f740:	0801f6c7 	.word	0x0801f6c7
 801f744:	0801f6c7 	.word	0x0801f6c7
 801f748:	0801f6c7 	.word	0x0801f6c7
 801f74c:	0801f6c7 	.word	0x0801f6c7
 801f750:	0801f6c7 	.word	0x0801f6c7
 801f754:	0801f6c7 	.word	0x0801f6c7
 801f758:	0801f6c7 	.word	0x0801f6c7
 801f75c:	0801f6c7 	.word	0x0801f6c7
 801f760:	0801f6c7 	.word	0x0801f6c7
 801f764:	0801f6c7 	.word	0x0801f6c7
 801f768:	0801f88f 	.word	0x0801f88f
 801f76c:	0801f8e9 	.word	0x0801f8e9
 801f770:	0801f95f 	.word	0x0801f95f
 801f774:	0801f9f9 	.word	0x0801f9f9
 801f778:	0801f6c7 	.word	0x0801f6c7
 801f77c:	0801fa45 	.word	0x0801fa45
 801f780:	0801fb25 	.word	0x0801fb25
 801f784:	0801fc27 	.word	0x0801fc27
 801f788:	0801fc35 	.word	0x0801fc35
 801f78c:	0801f6c7 	.word	0x0801f6c7
 801f790:	0801f6c7 	.word	0x0801f6c7
 801f794:	0801f6c7 	.word	0x0801f6c7
 801f798:	0801fc65 	.word	0x0801fc65
 801f79c:	0801f6c7 	.word	0x0801f6c7
 801f7a0:	0801f6c7 	.word	0x0801f6c7
 801f7a4:	0801fc7d 	.word	0x0801fc7d
 801f7a8:	0801f6c7 	.word	0x0801f6c7
 801f7ac:	0801fccb 	.word	0x0801fccb
 801f7b0:	0801fde1 	.word	0x0801fde1
 801f7b4:	0801fdf3 	.word	0x0801fdf3
 801f7b8:	0801fe4b 	.word	0x0801fe4b
 801f7bc:	0801fe5b 	.word	0x0801fe5b
 801f7c0:	0801fed1 	.word	0x0801fed1
 801f7c4:	0801f957 	.word	0x0801f957
 801f7c8:	0801ff05 	.word	0x0801ff05
 801f7cc:	0801ffc3 	.word	0x0801ffc3
 801f7d0:	0801f6c7 	.word	0x0801f6c7
 801f7d4:	0801f6c7 	.word	0x0801f6c7
 801f7d8:	0801f6c7 	.word	0x0801f6c7
 801f7dc:	0801f6c7 	.word	0x0801f6c7
 801f7e0:	0801f6c7 	.word	0x0801f6c7
 801f7e4:	0801f6c7 	.word	0x0801f6c7
 801f7e8:	0801f851 	.word	0x0801f851
 801f7ec:	0801f8bd 	.word	0x0801f8bd
 801f7f0:	0801f917 	.word	0x0801f917
 801f7f4:	0801f9d1 	.word	0x0801f9d1
 801f7f8:	0801f9d1 	.word	0x0801f9d1
 801f7fc:	0801f6c7 	.word	0x0801f6c7
 801f800:	0801fa8d 	.word	0x0801fa8d
 801f804:	0801f8bd 	.word	0x0801f8bd
 801f808:	0801f6c7 	.word	0x0801f6c7
 801f80c:	0801fc57 	.word	0x0801fc57
 801f810:	0801fc27 	.word	0x0801fc27
 801f814:	0801fc35 	.word	0x0801fc35
 801f818:	0801fc5f 	.word	0x0801fc5f
 801f81c:	0801fc69 	.word	0x0801fc69
 801f820:	0801f6c7 	.word	0x0801f6c7
 801f824:	0801fc7d 	.word	0x0801fc7d
 801f828:	0801f6c7 	.word	0x0801f6c7
 801f82c:	0801f947 	.word	0x0801f947
 801f830:	0801fce1 	.word	0x0801fce1
 801f834:	0801fde5 	.word	0x0801fde5
 801f838:	0801fe2d 	.word	0x0801fe2d
 801f83c:	0801f6c7 	.word	0x0801f6c7
 801f840:	0801fec1 	.word	0x0801fec1
 801f844:	0801f94f 	.word	0x0801f94f
 801f848:	0801fee9 	.word	0x0801fee9
 801f84c:	0801ff55 	.word	0x0801ff55
 801f850:	69ab      	ldr	r3, [r5, #24]
 801f852:	4aa7      	ldr	r2, [pc, #668]	; (801faf0 <__strftime+0x488>)
 801f854:	3318      	adds	r3, #24
 801f856:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f85a:	4630      	mov	r0, r6
 801f85c:	f7e0 fcee 	bl	800023c <strlen>
 801f860:	3e01      	subs	r6, #1
 801f862:	4420      	add	r0, r4
 801f864:	f108 33ff 	add.w	r3, r8, #4294967295
 801f868:	42a0      	cmp	r0, r4
 801f86a:	d107      	bne.n	801f87c <__strftime+0x214>
 801f86c:	f89b 3000 	ldrb.w	r3, [fp]
 801f870:	2b00      	cmp	r3, #0
 801f872:	f000 83d7 	beq.w	8020024 <__strftime+0x9bc>
 801f876:	f10b 0201 	add.w	r2, fp, #1
 801f87a:	e6fe      	b.n	801f67a <__strftime+0x12>
 801f87c:	42a3      	cmp	r3, r4
 801f87e:	f67f af22 	bls.w	801f6c6 <__strftime+0x5e>
 801f882:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f886:	f809 2004 	strb.w	r2, [r9, r4]
 801f88a:	3401      	adds	r4, #1
 801f88c:	e7ec      	b.n	801f868 <__strftime+0x200>
 801f88e:	69aa      	ldr	r2, [r5, #24]
 801f890:	4b97      	ldr	r3, [pc, #604]	; (801faf0 <__strftime+0x488>)
 801f892:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801f896:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801f898:	4630      	mov	r0, r6
 801f89a:	f7e0 fccf 	bl	800023c <strlen>
 801f89e:	3e01      	subs	r6, #1
 801f8a0:	4420      	add	r0, r4
 801f8a2:	f108 33ff 	add.w	r3, r8, #4294967295
 801f8a6:	42a0      	cmp	r0, r4
 801f8a8:	d0e0      	beq.n	801f86c <__strftime+0x204>
 801f8aa:	42a3      	cmp	r3, r4
 801f8ac:	f67f af0b 	bls.w	801f6c6 <__strftime+0x5e>
 801f8b0:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f8b4:	f809 2004 	strb.w	r2, [r9, r4]
 801f8b8:	3401      	adds	r4, #1
 801f8ba:	e7f4      	b.n	801f8a6 <__strftime+0x23e>
 801f8bc:	4b8c      	ldr	r3, [pc, #560]	; (801faf0 <__strftime+0x488>)
 801f8be:	692a      	ldr	r2, [r5, #16]
 801f8c0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801f8c4:	4630      	mov	r0, r6
 801f8c6:	f7e0 fcb9 	bl	800023c <strlen>
 801f8ca:	3e01      	subs	r6, #1
 801f8cc:	4420      	add	r0, r4
 801f8ce:	f108 33ff 	add.w	r3, r8, #4294967295
 801f8d2:	42a0      	cmp	r0, r4
 801f8d4:	d0ca      	beq.n	801f86c <__strftime+0x204>
 801f8d6:	42a3      	cmp	r3, r4
 801f8d8:	f67f aef5 	bls.w	801f6c6 <__strftime+0x5e>
 801f8dc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f8e0:	f809 2004 	strb.w	r2, [r9, r4]
 801f8e4:	3401      	adds	r4, #1
 801f8e6:	e7f4      	b.n	801f8d2 <__strftime+0x26a>
 801f8e8:	692b      	ldr	r3, [r5, #16]
 801f8ea:	4a81      	ldr	r2, [pc, #516]	; (801faf0 <__strftime+0x488>)
 801f8ec:	330c      	adds	r3, #12
 801f8ee:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801f8f2:	4630      	mov	r0, r6
 801f8f4:	f7e0 fca2 	bl	800023c <strlen>
 801f8f8:	3e01      	subs	r6, #1
 801f8fa:	4420      	add	r0, r4
 801f8fc:	f108 33ff 	add.w	r3, r8, #4294967295
 801f900:	42a0      	cmp	r0, r4
 801f902:	d0b3      	beq.n	801f86c <__strftime+0x204>
 801f904:	42a3      	cmp	r3, r4
 801f906:	f67f aede 	bls.w	801f6c6 <__strftime+0x5e>
 801f90a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801f90e:	f809 2004 	strb.w	r2, [r9, r4]
 801f912:	3401      	adds	r4, #1
 801f914:	e7f4      	b.n	801f900 <__strftime+0x298>
 801f916:	4b76      	ldr	r3, [pc, #472]	; (801faf0 <__strftime+0x488>)
 801f918:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801f91c:	4630      	mov	r0, r6
 801f91e:	f7e0 fc8d 	bl	800023c <strlen>
 801f922:	7833      	ldrb	r3, [r6, #0]
 801f924:	2b00      	cmp	r3, #0
 801f926:	d0a1      	beq.n	801f86c <__strftime+0x204>
 801f928:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801f92a:	9300      	str	r3, [sp, #0]
 801f92c:	4632      	mov	r2, r6
 801f92e:	462b      	mov	r3, r5
 801f930:	eba8 0104 	sub.w	r1, r8, r4
 801f934:	eb09 0004 	add.w	r0, r9, r4
 801f938:	f7ff fe96 	bl	801f668 <__strftime>
 801f93c:	2800      	cmp	r0, #0
 801f93e:	f77f aec2 	ble.w	801f6c6 <__strftime+0x5e>
 801f942:	4404      	add	r4, r0
 801f944:	e792      	b.n	801f86c <__strftime+0x204>
 801f946:	4b6a      	ldr	r3, [pc, #424]	; (801faf0 <__strftime+0x488>)
 801f948:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801f94c:	e7e6      	b.n	801f91c <__strftime+0x2b4>
 801f94e:	4b68      	ldr	r3, [pc, #416]	; (801faf0 <__strftime+0x488>)
 801f950:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801f954:	e7e2      	b.n	801f91c <__strftime+0x2b4>
 801f956:	4b66      	ldr	r3, [pc, #408]	; (801faf0 <__strftime+0x488>)
 801f958:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801f95c:	e7de      	b.n	801f91c <__strftime+0x2b4>
 801f95e:	4965      	ldr	r1, [pc, #404]	; (801faf4 <__strftime+0x48c>)
 801f960:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801f964:	458a      	cmp	sl, r1
 801f966:	bfac      	ite	ge
 801f968:	2100      	movge	r1, #0
 801f96a:	2101      	movlt	r1, #1
 801f96c:	f1ba 0f00 	cmp.w	sl, #0
 801f970:	db0e      	blt.n	801f990 <__strftime+0x328>
 801f972:	2064      	movs	r0, #100	; 0x64
 801f974:	fb9a f0f0 	sdiv	r0, sl, r0
 801f978:	3013      	adds	r0, #19
 801f97a:	b19f      	cbz	r7, 801f9a4 <__strftime+0x33c>
 801f97c:	2863      	cmp	r0, #99	; 0x63
 801f97e:	dd25      	ble.n	801f9cc <__strftime+0x364>
 801f980:	4a5d      	ldr	r2, [pc, #372]	; (801faf8 <__strftime+0x490>)
 801f982:	4b5e      	ldr	r3, [pc, #376]	; (801fafc <__strftime+0x494>)
 801f984:	2f2b      	cmp	r7, #43	; 0x2b
 801f986:	bf14      	ite	ne
 801f988:	4617      	movne	r7, r2
 801f98a:	461f      	moveq	r7, r3
 801f98c:	4a5c      	ldr	r2, [pc, #368]	; (801fb00 <__strftime+0x498>)
 801f98e:	e00b      	b.n	801f9a8 <__strftime+0x340>
 801f990:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801f994:	9105      	str	r1, [sp, #20]
 801f996:	f000 ffa5 	bl	80208e4 <abs>
 801f99a:	2364      	movs	r3, #100	; 0x64
 801f99c:	9905      	ldr	r1, [sp, #20]
 801f99e:	fb90 f0f3 	sdiv	r0, r0, r3
 801f9a2:	e7ea      	b.n	801f97a <__strftime+0x312>
 801f9a4:	4f54      	ldr	r7, [pc, #336]	; (801faf8 <__strftime+0x490>)
 801f9a6:	4a57      	ldr	r2, [pc, #348]	; (801fb04 <__strftime+0x49c>)
 801f9a8:	4b57      	ldr	r3, [pc, #348]	; (801fb08 <__strftime+0x4a0>)
 801f9aa:	9001      	str	r0, [sp, #4]
 801f9ac:	2e02      	cmp	r6, #2
 801f9ae:	bf2c      	ite	cs
 801f9b0:	ebc1 0606 	rsbcs	r6, r1, r6
 801f9b4:	f1c1 0602 	rsbcc	r6, r1, #2
 801f9b8:	494e      	ldr	r1, [pc, #312]	; (801faf4 <__strftime+0x48c>)
 801f9ba:	9600      	str	r6, [sp, #0]
 801f9bc:	458a      	cmp	sl, r1
 801f9be:	bfa8      	it	ge
 801f9c0:	463b      	movge	r3, r7
 801f9c2:	eba8 0104 	sub.w	r1, r8, r4
 801f9c6:	eb09 0004 	add.w	r0, r9, r4
 801f9ca:	e02a      	b.n	801fa22 <__strftime+0x3ba>
 801f9cc:	4f4a      	ldr	r7, [pc, #296]	; (801faf8 <__strftime+0x490>)
 801f9ce:	e7dd      	b.n	801f98c <__strftime+0x324>
 801f9d0:	494e      	ldr	r1, [pc, #312]	; (801fb0c <__strftime+0x4a4>)
 801f9d2:	4a4f      	ldr	r2, [pc, #316]	; (801fb10 <__strftime+0x4a8>)
 801f9d4:	68eb      	ldr	r3, [r5, #12]
 801f9d6:	2864      	cmp	r0, #100	; 0x64
 801f9d8:	bf08      	it	eq
 801f9da:	460a      	moveq	r2, r1
 801f9dc:	eba8 0104 	sub.w	r1, r8, r4
 801f9e0:	eb09 0004 	add.w	r0, r9, r4
 801f9e4:	f001 fe0e 	bl	8021604 <sniprintf>
 801f9e8:	2800      	cmp	r0, #0
 801f9ea:	f6ff ae6c 	blt.w	801f6c6 <__strftime+0x5e>
 801f9ee:	4404      	add	r4, r0
 801f9f0:	45a0      	cmp	r8, r4
 801f9f2:	f63f af3b 	bhi.w	801f86c <__strftime+0x204>
 801f9f6:	e666      	b.n	801f6c6 <__strftime+0x5e>
 801f9f8:	6968      	ldr	r0, [r5, #20]
 801f9fa:	692b      	ldr	r3, [r5, #16]
 801f9fc:	68ef      	ldr	r7, [r5, #12]
 801f9fe:	2800      	cmp	r0, #0
 801fa00:	eb09 0604 	add.w	r6, r9, r4
 801fa04:	eba8 0104 	sub.w	r1, r8, r4
 801fa08:	f103 0301 	add.w	r3, r3, #1
 801fa0c:	db0c      	blt.n	801fa28 <__strftime+0x3c0>
 801fa0e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801fa12:	fb90 f2fc 	sdiv	r2, r0, ip
 801fa16:	fb0c 0212 	mls	r2, ip, r2, r0
 801fa1a:	e9cd 7200 	strd	r7, r2, [sp]
 801fa1e:	4a3d      	ldr	r2, [pc, #244]	; (801fb14 <__strftime+0x4ac>)
 801fa20:	4630      	mov	r0, r6
 801fa22:	f001 fdef 	bl	8021604 <sniprintf>
 801fa26:	e7df      	b.n	801f9e8 <__strftime+0x380>
 801fa28:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fa2c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801fa30:	f000 ff58 	bl	80208e4 <abs>
 801fa34:	2264      	movs	r2, #100	; 0x64
 801fa36:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801fa3a:	fb90 fcf2 	sdiv	ip, r0, r2
 801fa3e:	fb0c 0212 	mls	r2, ip, r2, r0
 801fa42:	e7ea      	b.n	801fa1a <__strftime+0x3b2>
 801fa44:	2325      	movs	r3, #37	; 0x25
 801fa46:	f88d 3020 	strb.w	r3, [sp, #32]
 801fa4a:	b187      	cbz	r7, 801fa6e <__strftime+0x406>
 801fa4c:	2e06      	cmp	r6, #6
 801fa4e:	bf38      	it	cc
 801fa50:	2606      	movcc	r6, #6
 801fa52:	1fb3      	subs	r3, r6, #6
 801fa54:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801fa58:	d10c      	bne.n	801fa74 <__strftime+0x40c>
 801fa5a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801fa5e:	492e      	ldr	r1, [pc, #184]	; (801fb18 <__strftime+0x4b0>)
 801fa60:	f001 fe30 	bl	80216c4 <strcpy>
 801fa64:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801fa66:	9300      	str	r3, [sp, #0]
 801fa68:	aa08      	add	r2, sp, #32
 801fa6a:	462b      	mov	r3, r5
 801fa6c:	e760      	b.n	801f930 <__strftime+0x2c8>
 801fa6e:	272b      	movs	r7, #43	; 0x2b
 801fa70:	260a      	movs	r6, #10
 801fa72:	e7ee      	b.n	801fa52 <__strftime+0x3ea>
 801fa74:	4a29      	ldr	r2, [pc, #164]	; (801fb1c <__strftime+0x4b4>)
 801fa76:	211e      	movs	r1, #30
 801fa78:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801fa7c:	f001 fdc2 	bl	8021604 <sniprintf>
 801fa80:	2800      	cmp	r0, #0
 801fa82:	ddea      	ble.n	801fa5a <__strftime+0x3f2>
 801fa84:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801fa88:	4418      	add	r0, r3
 801fa8a:	e7e8      	b.n	801fa5e <__strftime+0x3f6>
 801fa8c:	4628      	mov	r0, r5
 801fa8e:	f7ff fd89 	bl	801f5a4 <iso_year_adjust>
 801fa92:	4606      	mov	r6, r0
 801fa94:	6968      	ldr	r0, [r5, #20]
 801fa96:	2800      	cmp	r0, #0
 801fa98:	db11      	blt.n	801fabe <__strftime+0x456>
 801fa9a:	2264      	movs	r2, #100	; 0x64
 801fa9c:	fb90 f3f2 	sdiv	r3, r0, r2
 801faa0:	fb02 0313 	mls	r3, r2, r3, r0
 801faa4:	441e      	add	r6, r3
 801faa6:	2364      	movs	r3, #100	; 0x64
 801faa8:	fb96 f0f3 	sdiv	r0, r6, r3
 801faac:	fb03 6610 	mls	r6, r3, r0, r6
 801fab0:	441e      	add	r6, r3
 801fab2:	fbb6 f2f3 	udiv	r2, r6, r3
 801fab6:	fb03 6312 	mls	r3, r3, r2, r6
 801faba:	4a14      	ldr	r2, [pc, #80]	; (801fb0c <__strftime+0x4a4>)
 801fabc:	e78e      	b.n	801f9dc <__strftime+0x374>
 801fabe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fac2:	f000 ff0f 	bl	80208e4 <abs>
 801fac6:	2364      	movs	r3, #100	; 0x64
 801fac8:	2e00      	cmp	r6, #0
 801faca:	fb90 f2f3 	sdiv	r2, r0, r3
 801face:	fb02 0313 	mls	r3, r2, r3, r0
 801fad2:	da05      	bge.n	801fae0 <__strftime+0x478>
 801fad4:	6969      	ldr	r1, [r5, #20]
 801fad6:	4a12      	ldr	r2, [pc, #72]	; (801fb20 <__strftime+0x4b8>)
 801fad8:	4291      	cmp	r1, r2
 801fada:	bfb8      	it	lt
 801fadc:	2601      	movlt	r6, #1
 801fade:	e7e1      	b.n	801faa4 <__strftime+0x43c>
 801fae0:	d0e0      	beq.n	801faa4 <__strftime+0x43c>
 801fae2:	6969      	ldr	r1, [r5, #20]
 801fae4:	4a03      	ldr	r2, [pc, #12]	; (801faf4 <__strftime+0x48c>)
 801fae6:	4291      	cmp	r1, r2
 801fae8:	bfb8      	it	lt
 801faea:	f04f 36ff 	movlt.w	r6, #4294967295
 801faee:	e7d9      	b.n	801faa4 <__strftime+0x43c>
 801faf0:	080279b4 	.word	0x080279b4
 801faf4:	fffff894 	.word	0xfffff894
 801faf8:	08027b27 	.word	0x08027b27
 801fafc:	0802783e 	.word	0x0802783e
 801fb00:	08027836 	.word	0x08027836
 801fb04:	0802782f 	.word	0x0802782f
 801fb08:	08027c67 	.word	0x08027c67
 801fb0c:	0802784e 	.word	0x0802784e
 801fb10:	08027840 	.word	0x08027840
 801fb14:	08027844 	.word	0x08027844
 801fb18:	08027857 	.word	0x08027857
 801fb1c:	08027853 	.word	0x08027853
 801fb20:	fffff895 	.word	0xfffff895
 801fb24:	4bb6      	ldr	r3, [pc, #728]	; (801fe00 <__strftime+0x798>)
 801fb26:	6969      	ldr	r1, [r5, #20]
 801fb28:	4299      	cmp	r1, r3
 801fb2a:	bfac      	ite	ge
 801fb2c:	2300      	movge	r3, #0
 801fb2e:	2301      	movlt	r3, #1
 801fb30:	4628      	mov	r0, r5
 801fb32:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801fb36:	f7ff fd35 	bl	801f5a4 <iso_year_adjust>
 801fb3a:	9906      	ldr	r1, [sp, #24]
 801fb3c:	2900      	cmp	r1, #0
 801fb3e:	4682      	mov	sl, r0
 801fb40:	db27      	blt.n	801fb92 <__strftime+0x52a>
 801fb42:	2264      	movs	r2, #100	; 0x64
 801fb44:	fb91 f2f2 	sdiv	r2, r1, r2
 801fb48:	3213      	adds	r2, #19
 801fb4a:	6968      	ldr	r0, [r5, #20]
 801fb4c:	2800      	cmp	r0, #0
 801fb4e:	db2b      	blt.n	801fba8 <__strftime+0x540>
 801fb50:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801fb54:	fb90 fefc 	sdiv	lr, r0, ip
 801fb58:	fb0c 001e 	mls	r0, ip, lr, r0
 801fb5c:	f1ba 0f00 	cmp.w	sl, #0
 801fb60:	da31      	bge.n	801fbc6 <__strftime+0x55e>
 801fb62:	6969      	ldr	r1, [r5, #20]
 801fb64:	4ba7      	ldr	r3, [pc, #668]	; (801fe04 <__strftime+0x79c>)
 801fb66:	4299      	cmp	r1, r3
 801fb68:	db38      	blt.n	801fbdc <__strftime+0x574>
 801fb6a:	eb0a 0300 	add.w	r3, sl, r0
 801fb6e:	1c59      	adds	r1, r3, #1
 801fb70:	d139      	bne.n	801fbe6 <__strftime+0x57e>
 801fb72:	3a01      	subs	r2, #1
 801fb74:	2363      	movs	r3, #99	; 0x63
 801fb76:	2064      	movs	r0, #100	; 0x64
 801fb78:	fb00 3202 	mla	r2, r0, r2, r3
 801fb7c:	9b05      	ldr	r3, [sp, #20]
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d036      	beq.n	801fbf0 <__strftime+0x588>
 801fb82:	232d      	movs	r3, #45	; 0x2d
 801fb84:	f88d 3020 	strb.w	r3, [sp, #32]
 801fb88:	b106      	cbz	r6, 801fb8c <__strftime+0x524>
 801fb8a:	3e01      	subs	r6, #1
 801fb8c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801fb90:	e038      	b.n	801fc04 <__strftime+0x59c>
 801fb92:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801fb96:	9106      	str	r1, [sp, #24]
 801fb98:	f000 fea4 	bl	80208e4 <abs>
 801fb9c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801fba0:	9906      	ldr	r1, [sp, #24]
 801fba2:	fb90 f2fc 	sdiv	r2, r0, ip
 801fba6:	e7d0      	b.n	801fb4a <__strftime+0x4e2>
 801fba8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fbac:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801fbb0:	f000 fe98 	bl	80208e4 <abs>
 801fbb4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801fbb8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801fbbc:	fb90 fefc 	sdiv	lr, r0, ip
 801fbc0:	fb0e 001c 	mls	r0, lr, ip, r0
 801fbc4:	e7ca      	b.n	801fb5c <__strftime+0x4f4>
 801fbc6:	d0d0      	beq.n	801fb6a <__strftime+0x502>
 801fbc8:	4b8d      	ldr	r3, [pc, #564]	; (801fe00 <__strftime+0x798>)
 801fbca:	4299      	cmp	r1, r3
 801fbcc:	bfb4      	ite	lt
 801fbce:	2301      	movlt	r3, #1
 801fbd0:	2300      	movge	r3, #0
 801fbd2:	9305      	str	r3, [sp, #20]
 801fbd4:	bfb8      	it	lt
 801fbd6:	f04f 3aff 	movlt.w	sl, #4294967295
 801fbda:	e7c6      	b.n	801fb6a <__strftime+0x502>
 801fbdc:	f04f 0a01 	mov.w	sl, #1
 801fbe0:	f8cd a014 	str.w	sl, [sp, #20]
 801fbe4:	e7c1      	b.n	801fb6a <__strftime+0x502>
 801fbe6:	2b64      	cmp	r3, #100	; 0x64
 801fbe8:	bf04      	itt	eq
 801fbea:	3201      	addeq	r2, #1
 801fbec:	2300      	moveq	r3, #0
 801fbee:	e7c2      	b.n	801fb76 <__strftime+0x50e>
 801fbf0:	2f2b      	cmp	r7, #43	; 0x2b
 801fbf2:	d106      	bne.n	801fc02 <__strftime+0x59a>
 801fbf4:	f242 730f 	movw	r3, #9999	; 0x270f
 801fbf8:	429a      	cmp	r2, r3
 801fbfa:	d902      	bls.n	801fc02 <__strftime+0x59a>
 801fbfc:	f88d 7020 	strb.w	r7, [sp, #32]
 801fc00:	e7c2      	b.n	801fb88 <__strftime+0x520>
 801fc02:	ab08      	add	r3, sp, #32
 801fc04:	2125      	movs	r1, #37	; 0x25
 801fc06:	7019      	strb	r1, [r3, #0]
 801fc08:	b94f      	cbnz	r7, 801fc1e <__strftime+0x5b6>
 801fc0a:	1c58      	adds	r0, r3, #1
 801fc0c:	497e      	ldr	r1, [pc, #504]	; (801fe08 <__strftime+0x7a0>)
 801fc0e:	9205      	str	r2, [sp, #20]
 801fc10:	f001 fd58 	bl	80216c4 <strcpy>
 801fc14:	9a05      	ldr	r2, [sp, #20]
 801fc16:	9200      	str	r2, [sp, #0]
 801fc18:	4633      	mov	r3, r6
 801fc1a:	aa08      	add	r2, sp, #32
 801fc1c:	e059      	b.n	801fcd2 <__strftime+0x66a>
 801fc1e:	2130      	movs	r1, #48	; 0x30
 801fc20:	1c98      	adds	r0, r3, #2
 801fc22:	7059      	strb	r1, [r3, #1]
 801fc24:	e7f2      	b.n	801fc0c <__strftime+0x5a4>
 801fc26:	4979      	ldr	r1, [pc, #484]	; (801fe0c <__strftime+0x7a4>)
 801fc28:	4a79      	ldr	r2, [pc, #484]	; (801fe10 <__strftime+0x7a8>)
 801fc2a:	68ab      	ldr	r3, [r5, #8]
 801fc2c:	286b      	cmp	r0, #107	; 0x6b
 801fc2e:	bf08      	it	eq
 801fc30:	460a      	moveq	r2, r1
 801fc32:	e6d3      	b.n	801f9dc <__strftime+0x374>
 801fc34:	68ab      	ldr	r3, [r5, #8]
 801fc36:	b163      	cbz	r3, 801fc52 <__strftime+0x5ea>
 801fc38:	2b0c      	cmp	r3, #12
 801fc3a:	d004      	beq.n	801fc46 <__strftime+0x5de>
 801fc3c:	210c      	movs	r1, #12
 801fc3e:	fb93 f2f1 	sdiv	r2, r3, r1
 801fc42:	fb01 3312 	mls	r3, r1, r2, r3
 801fc46:	4972      	ldr	r1, [pc, #456]	; (801fe10 <__strftime+0x7a8>)
 801fc48:	4a70      	ldr	r2, [pc, #448]	; (801fe0c <__strftime+0x7a4>)
 801fc4a:	2849      	cmp	r0, #73	; 0x49
 801fc4c:	bf08      	it	eq
 801fc4e:	460a      	moveq	r2, r1
 801fc50:	e6c4      	b.n	801f9dc <__strftime+0x374>
 801fc52:	230c      	movs	r3, #12
 801fc54:	e7f7      	b.n	801fc46 <__strftime+0x5de>
 801fc56:	69eb      	ldr	r3, [r5, #28]
 801fc58:	4a6e      	ldr	r2, [pc, #440]	; (801fe14 <__strftime+0x7ac>)
 801fc5a:	3301      	adds	r3, #1
 801fc5c:	e6be      	b.n	801f9dc <__strftime+0x374>
 801fc5e:	692b      	ldr	r3, [r5, #16]
 801fc60:	3301      	adds	r3, #1
 801fc62:	e72a      	b.n	801faba <__strftime+0x452>
 801fc64:	686b      	ldr	r3, [r5, #4]
 801fc66:	e728      	b.n	801faba <__strftime+0x452>
 801fc68:	f108 33ff 	add.w	r3, r8, #4294967295
 801fc6c:	42a3      	cmp	r3, r4
 801fc6e:	f67f ad2a 	bls.w	801f6c6 <__strftime+0x5e>
 801fc72:	230a      	movs	r3, #10
 801fc74:	f809 3004 	strb.w	r3, [r9, r4]
 801fc78:	3401      	adds	r4, #1
 801fc7a:	e5f7      	b.n	801f86c <__strftime+0x204>
 801fc7c:	68ab      	ldr	r3, [r5, #8]
 801fc7e:	2b0b      	cmp	r3, #11
 801fc80:	bfcc      	ite	gt
 801fc82:	22a4      	movgt	r2, #164	; 0xa4
 801fc84:	22a0      	movle	r2, #160	; 0xa0
 801fc86:	4b64      	ldr	r3, [pc, #400]	; (801fe18 <__strftime+0x7b0>)
 801fc88:	4413      	add	r3, r2
 801fc8a:	685e      	ldr	r6, [r3, #4]
 801fc8c:	4630      	mov	r0, r6
 801fc8e:	f7e0 fad5 	bl	800023c <strlen>
 801fc92:	1e72      	subs	r2, r6, #1
 801fc94:	4420      	add	r0, r4
 801fc96:	f108 36ff 	add.w	r6, r8, #4294967295
 801fc9a:	42a0      	cmp	r0, r4
 801fc9c:	f43f ade6 	beq.w	801f86c <__strftime+0x204>
 801fca0:	42a6      	cmp	r6, r4
 801fca2:	f67f ad10 	bls.w	801f6c6 <__strftime+0x5e>
 801fca6:	f89b 1000 	ldrb.w	r1, [fp]
 801fcaa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801fcae:	2950      	cmp	r1, #80	; 0x50
 801fcb0:	d107      	bne.n	801fcc2 <__strftime+0x65a>
 801fcb2:	495a      	ldr	r1, [pc, #360]	; (801fe1c <__strftime+0x7b4>)
 801fcb4:	5cc9      	ldrb	r1, [r1, r3]
 801fcb6:	f001 0103 	and.w	r1, r1, #3
 801fcba:	2901      	cmp	r1, #1
 801fcbc:	bf08      	it	eq
 801fcbe:	3320      	addeq	r3, #32
 801fcc0:	b2db      	uxtb	r3, r3
 801fcc2:	f809 3004 	strb.w	r3, [r9, r4]
 801fcc6:	3401      	adds	r4, #1
 801fcc8:	e7e7      	b.n	801fc9a <__strftime+0x632>
 801fcca:	686b      	ldr	r3, [r5, #4]
 801fccc:	9300      	str	r3, [sp, #0]
 801fcce:	4a54      	ldr	r2, [pc, #336]	; (801fe20 <__strftime+0x7b8>)
 801fcd0:	68ab      	ldr	r3, [r5, #8]
 801fcd2:	eba8 0104 	sub.w	r1, r8, r4
 801fcd6:	eb09 0004 	add.w	r0, r9, r4
 801fcda:	f001 fc93 	bl	8021604 <sniprintf>
 801fcde:	e683      	b.n	801f9e8 <__strftime+0x380>
 801fce0:	6a2b      	ldr	r3, [r5, #32]
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	db79      	blt.n	801fdda <__strftime+0x772>
 801fce6:	f000 fb01 	bl	80202ec <__tz_lock>
 801fcea:	9b04      	ldr	r3, [sp, #16]
 801fcec:	b90b      	cbnz	r3, 801fcf2 <__strftime+0x68a>
 801fcee:	f000 fb09 	bl	8020304 <_tzset_unlocked>
 801fcf2:	f000 fec5 	bl	8020a80 <__gettzinfo>
 801fcf6:	6a2b      	ldr	r3, [r5, #32]
 801fcf8:	2b00      	cmp	r3, #0
 801fcfa:	bfcc      	ite	gt
 801fcfc:	2350      	movgt	r3, #80	; 0x50
 801fcfe:	2328      	movle	r3, #40	; 0x28
 801fd00:	58c3      	ldr	r3, [r0, r3]
 801fd02:	f1c3 0a00 	rsb	sl, r3, #0
 801fd06:	f000 faf7 	bl	80202f8 <__tz_unlock>
 801fd0a:	2301      	movs	r3, #1
 801fd0c:	9304      	str	r3, [sp, #16]
 801fd0e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801fd12:	4662      	mov	r2, ip
 801fd14:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801fd18:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801fd1c:	9602      	str	r6, [sp, #8]
 801fd1e:	f143 36ff 	adc.w	r6, r3, #4294967295
 801fd22:	9603      	str	r6, [sp, #12]
 801fd24:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801fd28:	2e00      	cmp	r6, #0
 801fd2a:	f177 0600 	sbcs.w	r6, r7, #0
 801fd2e:	eba8 0104 	sub.w	r1, r8, r4
 801fd32:	eb09 0004 	add.w	r0, r9, r4
 801fd36:	da05      	bge.n	801fd44 <__strftime+0x6dc>
 801fd38:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801fd3c:	f143 33ff 	adc.w	r3, r3, #4294967295
 801fd40:	9602      	str	r6, [sp, #8]
 801fd42:	9303      	str	r3, [sp, #12]
 801fd44:	9b02      	ldr	r3, [sp, #8]
 801fd46:	089e      	lsrs	r6, r3, #2
 801fd48:	9b03      	ldr	r3, [sp, #12]
 801fd4a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801fd4e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801fd52:	109f      	asrs	r7, r3, #2
 801fd54:	2364      	movs	r3, #100	; 0x64
 801fd56:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd5a:	1af6      	subs	r6, r6, r3
 801fd5c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801fd60:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801fd64:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801fd68:	fb92 f3f3 	sdiv	r3, r2, r3
 801fd6c:	18f6      	adds	r6, r6, r3
 801fd6e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fd72:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801fd76:	f240 136d 	movw	r3, #365	; 0x16d
 801fd7a:	fb03 fc0c 	mul.w	ip, r3, ip
 801fd7e:	69eb      	ldr	r3, [r5, #28]
 801fd80:	eb16 060c 	adds.w	r6, r6, ip
 801fd84:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801fd88:	18f6      	adds	r6, r6, r3
 801fd8a:	f04f 0c18 	mov.w	ip, #24
 801fd8e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fd92:	fba6 230c 	umull	r2, r3, r6, ip
 801fd96:	68ae      	ldr	r6, [r5, #8]
 801fd98:	fb0c 3307 	mla	r3, ip, r7, r3
 801fd9c:	1992      	adds	r2, r2, r6
 801fd9e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801fda2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801fda6:	fba2 670c 	umull	r6, r7, r2, ip
 801fdaa:	fb0c 7703 	mla	r7, ip, r3, r7
 801fdae:	686b      	ldr	r3, [r5, #4]
 801fdb0:	18f6      	adds	r6, r6, r3
 801fdb2:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801fdb6:	fba6 230c 	umull	r2, r3, r6, ip
 801fdba:	682e      	ldr	r6, [r5, #0]
 801fdbc:	fb0c 3307 	mla	r3, ip, r7, r3
 801fdc0:	1992      	adds	r2, r2, r6
 801fdc2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801fdc6:	ebb2 020a 	subs.w	r2, r2, sl
 801fdca:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801fdce:	e9cd 2300 	strd	r2, r3, [sp]
 801fdd2:	4a14      	ldr	r2, [pc, #80]	; (801fe24 <__strftime+0x7bc>)
 801fdd4:	f001 fc16 	bl	8021604 <sniprintf>
 801fdd8:	e606      	b.n	801f9e8 <__strftime+0x380>
 801fdda:	f04f 0a00 	mov.w	sl, #0
 801fdde:	e796      	b.n	801fd0e <__strftime+0x6a6>
 801fde0:	682b      	ldr	r3, [r5, #0]
 801fde2:	e66a      	b.n	801faba <__strftime+0x452>
 801fde4:	f108 33ff 	add.w	r3, r8, #4294967295
 801fde8:	42a3      	cmp	r3, r4
 801fdea:	f67f ac6c 	bls.w	801f6c6 <__strftime+0x5e>
 801fdee:	2309      	movs	r3, #9
 801fdf0:	e740      	b.n	801fc74 <__strftime+0x60c>
 801fdf2:	682b      	ldr	r3, [r5, #0]
 801fdf4:	9301      	str	r3, [sp, #4]
 801fdf6:	686b      	ldr	r3, [r5, #4]
 801fdf8:	9300      	str	r3, [sp, #0]
 801fdfa:	4a0b      	ldr	r2, [pc, #44]	; (801fe28 <__strftime+0x7c0>)
 801fdfc:	68ab      	ldr	r3, [r5, #8]
 801fdfe:	e5e0      	b.n	801f9c2 <__strftime+0x35a>
 801fe00:	fffff894 	.word	0xfffff894
 801fe04:	fffff895 	.word	0xfffff895
 801fe08:	0802785f 	.word	0x0802785f
 801fe0c:	08027840 	.word	0x08027840
 801fe10:	0802784e 	.word	0x0802784e
 801fe14:	08027863 	.word	0x08027863
 801fe18:	080279b4 	.word	0x080279b4
 801fe1c:	08027b29 	.word	0x08027b29
 801fe20:	08027872 	.word	0x08027872
 801fe24:	08027868 	.word	0x08027868
 801fe28:	0802786d 	.word	0x0802786d
 801fe2c:	f108 33ff 	add.w	r3, r8, #4294967295
 801fe30:	42a3      	cmp	r3, r4
 801fe32:	f67f ac48 	bls.w	801f6c6 <__strftime+0x5e>
 801fe36:	69ab      	ldr	r3, [r5, #24]
 801fe38:	eb09 0204 	add.w	r2, r9, r4
 801fe3c:	3401      	adds	r4, #1
 801fe3e:	b913      	cbnz	r3, 801fe46 <__strftime+0x7de>
 801fe40:	2337      	movs	r3, #55	; 0x37
 801fe42:	7013      	strb	r3, [r2, #0]
 801fe44:	e512      	b.n	801f86c <__strftime+0x204>
 801fe46:	3330      	adds	r3, #48	; 0x30
 801fe48:	e7fb      	b.n	801fe42 <__strftime+0x7da>
 801fe4a:	69eb      	ldr	r3, [r5, #28]
 801fe4c:	69aa      	ldr	r2, [r5, #24]
 801fe4e:	3307      	adds	r3, #7
 801fe50:	1a9b      	subs	r3, r3, r2
 801fe52:	2207      	movs	r2, #7
 801fe54:	fb93 f3f2 	sdiv	r3, r3, r2
 801fe58:	e62f      	b.n	801faba <__strftime+0x452>
 801fe5a:	4628      	mov	r0, r5
 801fe5c:	f7ff fba2 	bl	801f5a4 <iso_year_adjust>
 801fe60:	69aa      	ldr	r2, [r5, #24]
 801fe62:	b132      	cbz	r2, 801fe72 <__strftime+0x80a>
 801fe64:	3a01      	subs	r2, #1
 801fe66:	2800      	cmp	r0, #0
 801fe68:	dc28      	bgt.n	801febc <__strftime+0x854>
 801fe6a:	69eb      	ldr	r3, [r5, #28]
 801fe6c:	d103      	bne.n	801fe76 <__strftime+0x80e>
 801fe6e:	330a      	adds	r3, #10
 801fe70:	e7ee      	b.n	801fe50 <__strftime+0x7e8>
 801fe72:	2206      	movs	r2, #6
 801fe74:	e7f7      	b.n	801fe66 <__strftime+0x7fe>
 801fe76:	6968      	ldr	r0, [r5, #20]
 801fe78:	2800      	cmp	r0, #0
 801fe7a:	eba2 0303 	sub.w	r3, r2, r3
 801fe7e:	f240 726b 	movw	r2, #1899	; 0x76b
 801fe82:	bfa8      	it	ge
 801fe84:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801fe88:	4410      	add	r0, r2
 801fe8a:	0782      	lsls	r2, r0, #30
 801fe8c:	d105      	bne.n	801fe9a <__strftime+0x832>
 801fe8e:	2264      	movs	r2, #100	; 0x64
 801fe90:	fb90 f1f2 	sdiv	r1, r0, r2
 801fe94:	fb02 0111 	mls	r1, r2, r1, r0
 801fe98:	b971      	cbnz	r1, 801feb8 <__strftime+0x850>
 801fe9a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801fe9e:	fb90 f2f1 	sdiv	r2, r0, r1
 801fea2:	fb01 0212 	mls	r2, r1, r2, r0
 801fea6:	fab2 f282 	clz	r2, r2
 801feaa:	0952      	lsrs	r2, r2, #5
 801feac:	1a9a      	subs	r2, r3, r2
 801feae:	2a05      	cmp	r2, #5
 801feb0:	bfb4      	ite	lt
 801feb2:	2335      	movlt	r3, #53	; 0x35
 801feb4:	2334      	movge	r3, #52	; 0x34
 801feb6:	e600      	b.n	801faba <__strftime+0x452>
 801feb8:	2201      	movs	r2, #1
 801feba:	e7f7      	b.n	801feac <__strftime+0x844>
 801febc:	2301      	movs	r3, #1
 801febe:	e5fc      	b.n	801faba <__strftime+0x452>
 801fec0:	f108 33ff 	add.w	r3, r8, #4294967295
 801fec4:	42a3      	cmp	r3, r4
 801fec6:	f67f abfe 	bls.w	801f6c6 <__strftime+0x5e>
 801feca:	69ab      	ldr	r3, [r5, #24]
 801fecc:	3330      	adds	r3, #48	; 0x30
 801fece:	e6d1      	b.n	801fc74 <__strftime+0x60c>
 801fed0:	69ab      	ldr	r3, [r5, #24]
 801fed2:	b13b      	cbz	r3, 801fee4 <__strftime+0x87c>
 801fed4:	3b01      	subs	r3, #1
 801fed6:	69ea      	ldr	r2, [r5, #28]
 801fed8:	3207      	adds	r2, #7
 801feda:	1ad2      	subs	r2, r2, r3
 801fedc:	2307      	movs	r3, #7
 801fede:	fb92 f3f3 	sdiv	r3, r2, r3
 801fee2:	e5ea      	b.n	801faba <__strftime+0x452>
 801fee4:	2306      	movs	r3, #6
 801fee6:	e7f6      	b.n	801fed6 <__strftime+0x86e>
 801fee8:	6968      	ldr	r0, [r5, #20]
 801feea:	2800      	cmp	r0, #0
 801feec:	db05      	blt.n	801fefa <__strftime+0x892>
 801feee:	2264      	movs	r2, #100	; 0x64
 801fef0:	fb90 f3f2 	sdiv	r3, r0, r2
 801fef4:	fb03 0312 	mls	r3, r3, r2, r0
 801fef8:	e5df      	b.n	801faba <__strftime+0x452>
 801fefa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801fefe:	f000 fcf1 	bl	80208e4 <abs>
 801ff02:	e7f4      	b.n	801feee <__strftime+0x886>
 801ff04:	696b      	ldr	r3, [r5, #20]
 801ff06:	4a4c      	ldr	r2, [pc, #304]	; (8020038 <__strftime+0x9d0>)
 801ff08:	4293      	cmp	r3, r2
 801ff0a:	da09      	bge.n	801ff20 <__strftime+0x8b8>
 801ff0c:	212d      	movs	r1, #45	; 0x2d
 801ff0e:	f88d 1020 	strb.w	r1, [sp, #32]
 801ff12:	eba2 0a03 	sub.w	sl, r2, r3
 801ff16:	b106      	cbz	r6, 801ff1a <__strftime+0x8b2>
 801ff18:	3e01      	subs	r6, #1
 801ff1a:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801ff1e:	e00b      	b.n	801ff38 <__strftime+0x8d0>
 801ff20:	2f2b      	cmp	r7, #43	; 0x2b
 801ff22:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801ff26:	d106      	bne.n	801ff36 <__strftime+0x8ce>
 801ff28:	f242 730f 	movw	r3, #9999	; 0x270f
 801ff2c:	459a      	cmp	sl, r3
 801ff2e:	d902      	bls.n	801ff36 <__strftime+0x8ce>
 801ff30:	f88d 7020 	strb.w	r7, [sp, #32]
 801ff34:	e7ef      	b.n	801ff16 <__strftime+0x8ae>
 801ff36:	ab08      	add	r3, sp, #32
 801ff38:	2225      	movs	r2, #37	; 0x25
 801ff3a:	701a      	strb	r2, [r3, #0]
 801ff3c:	b937      	cbnz	r7, 801ff4c <__strftime+0x8e4>
 801ff3e:	1c58      	adds	r0, r3, #1
 801ff40:	493e      	ldr	r1, [pc, #248]	; (802003c <__strftime+0x9d4>)
 801ff42:	f001 fbbf 	bl	80216c4 <strcpy>
 801ff46:	f8cd a000 	str.w	sl, [sp]
 801ff4a:	e665      	b.n	801fc18 <__strftime+0x5b0>
 801ff4c:	2230      	movs	r2, #48	; 0x30
 801ff4e:	1c98      	adds	r0, r3, #2
 801ff50:	705a      	strb	r2, [r3, #1]
 801ff52:	e7f5      	b.n	801ff40 <__strftime+0x8d8>
 801ff54:	6a2b      	ldr	r3, [r5, #32]
 801ff56:	2b00      	cmp	r3, #0
 801ff58:	f6ff ac88 	blt.w	801f86c <__strftime+0x204>
 801ff5c:	f000 f9c6 	bl	80202ec <__tz_lock>
 801ff60:	9b04      	ldr	r3, [sp, #16]
 801ff62:	b90b      	cbnz	r3, 801ff68 <__strftime+0x900>
 801ff64:	f000 f9ce 	bl	8020304 <_tzset_unlocked>
 801ff68:	f000 fd8a 	bl	8020a80 <__gettzinfo>
 801ff6c:	6a2b      	ldr	r3, [r5, #32]
 801ff6e:	2b00      	cmp	r3, #0
 801ff70:	bfcc      	ite	gt
 801ff72:	2350      	movgt	r3, #80	; 0x50
 801ff74:	2328      	movle	r3, #40	; 0x28
 801ff76:	eb09 0704 	add.w	r7, r9, r4
 801ff7a:	58c6      	ldr	r6, [r0, r3]
 801ff7c:	f000 f9bc 	bl	80202f8 <__tz_unlock>
 801ff80:	4276      	negs	r6, r6
 801ff82:	233c      	movs	r3, #60	; 0x3c
 801ff84:	fb96 f0f3 	sdiv	r0, r6, r3
 801ff88:	f000 fe3e 	bl	8020c08 <labs>
 801ff8c:	233c      	movs	r3, #60	; 0x3c
 801ff8e:	eba8 0a04 	sub.w	sl, r8, r4
 801ff92:	fb90 f2f3 	sdiv	r2, r0, r3
 801ff96:	fb02 0013 	mls	r0, r2, r3, r0
 801ff9a:	9000      	str	r0, [sp, #0]
 801ff9c:	4a28      	ldr	r2, [pc, #160]	; (8020040 <__strftime+0x9d8>)
 801ff9e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801ffa2:	4651      	mov	r1, sl
 801ffa4:	4638      	mov	r0, r7
 801ffa6:	fb96 f3f3 	sdiv	r3, r6, r3
 801ffaa:	f001 fb2b 	bl	8021604 <sniprintf>
 801ffae:	2800      	cmp	r0, #0
 801ffb0:	f6ff ab89 	blt.w	801f6c6 <__strftime+0x5e>
 801ffb4:	4404      	add	r4, r0
 801ffb6:	45a0      	cmp	r8, r4
 801ffb8:	f67f ab85 	bls.w	801f6c6 <__strftime+0x5e>
 801ffbc:	2301      	movs	r3, #1
 801ffbe:	9304      	str	r3, [sp, #16]
 801ffc0:	e454      	b.n	801f86c <__strftime+0x204>
 801ffc2:	6a2b      	ldr	r3, [r5, #32]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	f6ff ac51 	blt.w	801f86c <__strftime+0x204>
 801ffca:	f000 f98f 	bl	80202ec <__tz_lock>
 801ffce:	9b04      	ldr	r3, [sp, #16]
 801ffd0:	b90b      	cbnz	r3, 801ffd6 <__strftime+0x96e>
 801ffd2:	f000 f997 	bl	8020304 <_tzset_unlocked>
 801ffd6:	6a2b      	ldr	r3, [r5, #32]
 801ffd8:	4a1a      	ldr	r2, [pc, #104]	; (8020044 <__strftime+0x9dc>)
 801ffda:	2b00      	cmp	r3, #0
 801ffdc:	bfd4      	ite	le
 801ffde:	2300      	movle	r3, #0
 801ffe0:	2301      	movgt	r3, #1
 801ffe2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801ffe6:	4630      	mov	r0, r6
 801ffe8:	f7e0 f928 	bl	800023c <strlen>
 801ffec:	3e01      	subs	r6, #1
 801ffee:	4420      	add	r0, r4
 801fff0:	f108 33ff 	add.w	r3, r8, #4294967295
 801fff4:	42a0      	cmp	r0, r4
 801fff6:	d102      	bne.n	801fffe <__strftime+0x996>
 801fff8:	f000 f97e 	bl	80202f8 <__tz_unlock>
 801fffc:	e7de      	b.n	801ffbc <__strftime+0x954>
 801fffe:	42a3      	cmp	r3, r4
 8020000:	d905      	bls.n	802000e <__strftime+0x9a6>
 8020002:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8020006:	f809 2004 	strb.w	r2, [r9, r4]
 802000a:	3401      	adds	r4, #1
 802000c:	e7f2      	b.n	801fff4 <__strftime+0x98c>
 802000e:	f000 f973 	bl	80202f8 <__tz_unlock>
 8020012:	f7ff bb58 	b.w	801f6c6 <__strftime+0x5e>
 8020016:	f108 33ff 	add.w	r3, r8, #4294967295
 802001a:	42a3      	cmp	r3, r4
 802001c:	f67f ab53 	bls.w	801f6c6 <__strftime+0x5e>
 8020020:	2325      	movs	r3, #37	; 0x25
 8020022:	e627      	b.n	801fc74 <__strftime+0x60c>
 8020024:	f1b8 0f00 	cmp.w	r8, #0
 8020028:	d002      	beq.n	8020030 <__strftime+0x9c8>
 802002a:	2300      	movs	r3, #0
 802002c:	f809 3004 	strb.w	r3, [r9, r4]
 8020030:	4620      	mov	r0, r4
 8020032:	b011      	add	sp, #68	; 0x44
 8020034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020038:	fffff894 	.word	0xfffff894
 802003c:	0802785f 	.word	0x0802785f
 8020040:	0802787c 	.word	0x0802787c
 8020044:	20000170 	.word	0x20000170

08020048 <strftime>:
 8020048:	b513      	push	{r0, r1, r4, lr}
 802004a:	4c03      	ldr	r4, [pc, #12]	; (8020058 <strftime+0x10>)
 802004c:	9400      	str	r4, [sp, #0]
 802004e:	f7ff fb0b 	bl	801f668 <__strftime>
 8020052:	b002      	add	sp, #8
 8020054:	bd10      	pop	{r4, pc}
 8020056:	bf00      	nop
 8020058:	200001d8 	.word	0x200001d8

0802005c <strstr>:
 802005c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802005e:	780c      	ldrb	r4, [r1, #0]
 8020060:	b164      	cbz	r4, 802007c <strstr+0x20>
 8020062:	4603      	mov	r3, r0
 8020064:	781a      	ldrb	r2, [r3, #0]
 8020066:	4618      	mov	r0, r3
 8020068:	1c5e      	adds	r6, r3, #1
 802006a:	b90a      	cbnz	r2, 8020070 <strstr+0x14>
 802006c:	4610      	mov	r0, r2
 802006e:	e005      	b.n	802007c <strstr+0x20>
 8020070:	4294      	cmp	r4, r2
 8020072:	d108      	bne.n	8020086 <strstr+0x2a>
 8020074:	460d      	mov	r5, r1
 8020076:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 802007a:	b902      	cbnz	r2, 802007e <strstr+0x22>
 802007c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802007e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8020082:	4297      	cmp	r7, r2
 8020084:	d0f7      	beq.n	8020076 <strstr+0x1a>
 8020086:	4633      	mov	r3, r6
 8020088:	e7ec      	b.n	8020064 <strstr+0x8>
	...

0802008c <_strtoul_l.isra.0>:
 802008c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020090:	4e3b      	ldr	r6, [pc, #236]	; (8020180 <_strtoul_l.isra.0+0xf4>)
 8020092:	4686      	mov	lr, r0
 8020094:	468c      	mov	ip, r1
 8020096:	4660      	mov	r0, ip
 8020098:	f81c 4b01 	ldrb.w	r4, [ip], #1
 802009c:	5da5      	ldrb	r5, [r4, r6]
 802009e:	f015 0508 	ands.w	r5, r5, #8
 80200a2:	d1f8      	bne.n	8020096 <_strtoul_l.isra.0+0xa>
 80200a4:	2c2d      	cmp	r4, #45	; 0x2d
 80200a6:	d134      	bne.n	8020112 <_strtoul_l.isra.0+0x86>
 80200a8:	f89c 4000 	ldrb.w	r4, [ip]
 80200ac:	f04f 0801 	mov.w	r8, #1
 80200b0:	f100 0c02 	add.w	ip, r0, #2
 80200b4:	2b00      	cmp	r3, #0
 80200b6:	d05e      	beq.n	8020176 <_strtoul_l.isra.0+0xea>
 80200b8:	2b10      	cmp	r3, #16
 80200ba:	d10c      	bne.n	80200d6 <_strtoul_l.isra.0+0x4a>
 80200bc:	2c30      	cmp	r4, #48	; 0x30
 80200be:	d10a      	bne.n	80200d6 <_strtoul_l.isra.0+0x4a>
 80200c0:	f89c 0000 	ldrb.w	r0, [ip]
 80200c4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80200c8:	2858      	cmp	r0, #88	; 0x58
 80200ca:	d14f      	bne.n	802016c <_strtoul_l.isra.0+0xe0>
 80200cc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80200d0:	2310      	movs	r3, #16
 80200d2:	f10c 0c02 	add.w	ip, ip, #2
 80200d6:	f04f 37ff 	mov.w	r7, #4294967295
 80200da:	2500      	movs	r5, #0
 80200dc:	fbb7 f7f3 	udiv	r7, r7, r3
 80200e0:	fb03 f907 	mul.w	r9, r3, r7
 80200e4:	ea6f 0909 	mvn.w	r9, r9
 80200e8:	4628      	mov	r0, r5
 80200ea:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80200ee:	2e09      	cmp	r6, #9
 80200f0:	d818      	bhi.n	8020124 <_strtoul_l.isra.0+0x98>
 80200f2:	4634      	mov	r4, r6
 80200f4:	42a3      	cmp	r3, r4
 80200f6:	dd24      	ble.n	8020142 <_strtoul_l.isra.0+0xb6>
 80200f8:	2d00      	cmp	r5, #0
 80200fa:	db1f      	blt.n	802013c <_strtoul_l.isra.0+0xb0>
 80200fc:	4287      	cmp	r7, r0
 80200fe:	d31d      	bcc.n	802013c <_strtoul_l.isra.0+0xb0>
 8020100:	d101      	bne.n	8020106 <_strtoul_l.isra.0+0x7a>
 8020102:	45a1      	cmp	r9, r4
 8020104:	db1a      	blt.n	802013c <_strtoul_l.isra.0+0xb0>
 8020106:	fb00 4003 	mla	r0, r0, r3, r4
 802010a:	2501      	movs	r5, #1
 802010c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8020110:	e7eb      	b.n	80200ea <_strtoul_l.isra.0+0x5e>
 8020112:	2c2b      	cmp	r4, #43	; 0x2b
 8020114:	bf08      	it	eq
 8020116:	f89c 4000 	ldrbeq.w	r4, [ip]
 802011a:	46a8      	mov	r8, r5
 802011c:	bf08      	it	eq
 802011e:	f100 0c02 	addeq.w	ip, r0, #2
 8020122:	e7c7      	b.n	80200b4 <_strtoul_l.isra.0+0x28>
 8020124:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8020128:	2e19      	cmp	r6, #25
 802012a:	d801      	bhi.n	8020130 <_strtoul_l.isra.0+0xa4>
 802012c:	3c37      	subs	r4, #55	; 0x37
 802012e:	e7e1      	b.n	80200f4 <_strtoul_l.isra.0+0x68>
 8020130:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8020134:	2e19      	cmp	r6, #25
 8020136:	d804      	bhi.n	8020142 <_strtoul_l.isra.0+0xb6>
 8020138:	3c57      	subs	r4, #87	; 0x57
 802013a:	e7db      	b.n	80200f4 <_strtoul_l.isra.0+0x68>
 802013c:	f04f 35ff 	mov.w	r5, #4294967295
 8020140:	e7e4      	b.n	802010c <_strtoul_l.isra.0+0x80>
 8020142:	2d00      	cmp	r5, #0
 8020144:	da07      	bge.n	8020156 <_strtoul_l.isra.0+0xca>
 8020146:	2322      	movs	r3, #34	; 0x22
 8020148:	f8ce 3000 	str.w	r3, [lr]
 802014c:	f04f 30ff 	mov.w	r0, #4294967295
 8020150:	b942      	cbnz	r2, 8020164 <_strtoul_l.isra.0+0xd8>
 8020152:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020156:	f1b8 0f00 	cmp.w	r8, #0
 802015a:	d000      	beq.n	802015e <_strtoul_l.isra.0+0xd2>
 802015c:	4240      	negs	r0, r0
 802015e:	2a00      	cmp	r2, #0
 8020160:	d0f7      	beq.n	8020152 <_strtoul_l.isra.0+0xc6>
 8020162:	b10d      	cbz	r5, 8020168 <_strtoul_l.isra.0+0xdc>
 8020164:	f10c 31ff 	add.w	r1, ip, #4294967295
 8020168:	6011      	str	r1, [r2, #0]
 802016a:	e7f2      	b.n	8020152 <_strtoul_l.isra.0+0xc6>
 802016c:	2430      	movs	r4, #48	; 0x30
 802016e:	2b00      	cmp	r3, #0
 8020170:	d1b1      	bne.n	80200d6 <_strtoul_l.isra.0+0x4a>
 8020172:	2308      	movs	r3, #8
 8020174:	e7af      	b.n	80200d6 <_strtoul_l.isra.0+0x4a>
 8020176:	2c30      	cmp	r4, #48	; 0x30
 8020178:	d0a2      	beq.n	80200c0 <_strtoul_l.isra.0+0x34>
 802017a:	230a      	movs	r3, #10
 802017c:	e7ab      	b.n	80200d6 <_strtoul_l.isra.0+0x4a>
 802017e:	bf00      	nop
 8020180:	08027b29 	.word	0x08027b29

08020184 <_strtoul_r>:
 8020184:	f7ff bf82 	b.w	802008c <_strtoul_l.isra.0>

08020188 <strtoul>:
 8020188:	4613      	mov	r3, r2
 802018a:	460a      	mov	r2, r1
 802018c:	4601      	mov	r1, r0
 802018e:	4802      	ldr	r0, [pc, #8]	; (8020198 <strtoul+0x10>)
 8020190:	6800      	ldr	r0, [r0, #0]
 8020192:	f7ff bf7b 	b.w	802008c <_strtoul_l.isra.0>
 8020196:	bf00      	nop
 8020198:	2000010c 	.word	0x2000010c

0802019c <__tzcalc_limits>:
 802019c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201a0:	4680      	mov	r8, r0
 80201a2:	f000 fc6d 	bl	8020a80 <__gettzinfo>
 80201a6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80201aa:	4598      	cmp	r8, r3
 80201ac:	f340 8098 	ble.w	80202e0 <__tzcalc_limits+0x144>
 80201b0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80201b4:	4443      	add	r3, r8
 80201b6:	109b      	asrs	r3, r3, #2
 80201b8:	f240 126d 	movw	r2, #365	; 0x16d
 80201bc:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 80201c0:	fb02 3505 	mla	r5, r2, r5, r3
 80201c4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80201c8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 80201cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80201d0:	441d      	add	r5, r3
 80201d2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80201d6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80201da:	fb98 f7f3 	sdiv	r7, r8, r3
 80201de:	fb03 8717 	mls	r7, r3, r7, r8
 80201e2:	4442      	add	r2, r8
 80201e4:	fab7 fc87 	clz	ip, r7
 80201e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80201ec:	f008 0303 	and.w	r3, r8, #3
 80201f0:	4415      	add	r5, r2
 80201f2:	2264      	movs	r2, #100	; 0x64
 80201f4:	f8c0 8004 	str.w	r8, [r0, #4]
 80201f8:	fb98 f6f2 	sdiv	r6, r8, r2
 80201fc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020200:	fb02 8616 	mls	r6, r2, r6, r8
 8020204:	4604      	mov	r4, r0
 8020206:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802020a:	9300      	str	r3, [sp, #0]
 802020c:	f04f 0e07 	mov.w	lr, #7
 8020210:	7a22      	ldrb	r2, [r4, #8]
 8020212:	6963      	ldr	r3, [r4, #20]
 8020214:	2a4a      	cmp	r2, #74	; 0x4a
 8020216:	d128      	bne.n	802026a <__tzcalc_limits+0xce>
 8020218:	9900      	ldr	r1, [sp, #0]
 802021a:	18ea      	adds	r2, r5, r3
 802021c:	b901      	cbnz	r1, 8020220 <__tzcalc_limits+0x84>
 802021e:	b906      	cbnz	r6, 8020222 <__tzcalc_limits+0x86>
 8020220:	bb0f      	cbnz	r7, 8020266 <__tzcalc_limits+0xca>
 8020222:	2b3b      	cmp	r3, #59	; 0x3b
 8020224:	bfd4      	ite	le
 8020226:	2300      	movle	r3, #0
 8020228:	2301      	movgt	r3, #1
 802022a:	4413      	add	r3, r2
 802022c:	1e5a      	subs	r2, r3, #1
 802022e:	69a3      	ldr	r3, [r4, #24]
 8020230:	492c      	ldr	r1, [pc, #176]	; (80202e4 <__tzcalc_limits+0x148>)
 8020232:	fb01 3202 	mla	r2, r1, r2, r3
 8020236:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020238:	4413      	add	r3, r2
 802023a:	461a      	mov	r2, r3
 802023c:	17db      	asrs	r3, r3, #31
 802023e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8020242:	3428      	adds	r4, #40	; 0x28
 8020244:	45a3      	cmp	fp, r4
 8020246:	d1e3      	bne.n	8020210 <__tzcalc_limits+0x74>
 8020248:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 802024c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8020250:	4294      	cmp	r4, r2
 8020252:	eb75 0303 	sbcs.w	r3, r5, r3
 8020256:	bfb4      	ite	lt
 8020258:	2301      	movlt	r3, #1
 802025a:	2300      	movge	r3, #0
 802025c:	6003      	str	r3, [r0, #0]
 802025e:	2001      	movs	r0, #1
 8020260:	b003      	add	sp, #12
 8020262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020266:	2300      	movs	r3, #0
 8020268:	e7df      	b.n	802022a <__tzcalc_limits+0x8e>
 802026a:	2a44      	cmp	r2, #68	; 0x44
 802026c:	d101      	bne.n	8020272 <__tzcalc_limits+0xd6>
 802026e:	18ea      	adds	r2, r5, r3
 8020270:	e7dd      	b.n	802022e <__tzcalc_limits+0x92>
 8020272:	9a00      	ldr	r2, [sp, #0]
 8020274:	bb72      	cbnz	r2, 80202d4 <__tzcalc_limits+0x138>
 8020276:	2e00      	cmp	r6, #0
 8020278:	bf0c      	ite	eq
 802027a:	46e0      	moveq	r8, ip
 802027c:	f04f 0801 	movne.w	r8, #1
 8020280:	4919      	ldr	r1, [pc, #100]	; (80202e8 <__tzcalc_limits+0x14c>)
 8020282:	68e2      	ldr	r2, [r4, #12]
 8020284:	9201      	str	r2, [sp, #4]
 8020286:	f04f 0a30 	mov.w	sl, #48	; 0x30
 802028a:	fb0a 1808 	mla	r8, sl, r8, r1
 802028e:	462a      	mov	r2, r5
 8020290:	f04f 0900 	mov.w	r9, #0
 8020294:	f1a8 0804 	sub.w	r8, r8, #4
 8020298:	9901      	ldr	r1, [sp, #4]
 802029a:	f109 0901 	add.w	r9, r9, #1
 802029e:	4549      	cmp	r1, r9
 80202a0:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 80202a4:	dc18      	bgt.n	80202d8 <__tzcalc_limits+0x13c>
 80202a6:	f102 0804 	add.w	r8, r2, #4
 80202aa:	fb98 f9fe 	sdiv	r9, r8, lr
 80202ae:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 80202b2:	eba8 0909 	sub.w	r9, r8, r9
 80202b6:	ebb3 0909 	subs.w	r9, r3, r9
 80202ba:	6923      	ldr	r3, [r4, #16]
 80202bc:	f103 33ff 	add.w	r3, r3, #4294967295
 80202c0:	bf48      	it	mi
 80202c2:	f109 0907 	addmi.w	r9, r9, #7
 80202c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80202ca:	444b      	add	r3, r9
 80202cc:	4553      	cmp	r3, sl
 80202ce:	da05      	bge.n	80202dc <__tzcalc_limits+0x140>
 80202d0:	441a      	add	r2, r3
 80202d2:	e7ac      	b.n	802022e <__tzcalc_limits+0x92>
 80202d4:	46e0      	mov	r8, ip
 80202d6:	e7d3      	b.n	8020280 <__tzcalc_limits+0xe4>
 80202d8:	4452      	add	r2, sl
 80202da:	e7dd      	b.n	8020298 <__tzcalc_limits+0xfc>
 80202dc:	3b07      	subs	r3, #7
 80202de:	e7f5      	b.n	80202cc <__tzcalc_limits+0x130>
 80202e0:	2000      	movs	r0, #0
 80202e2:	e7bd      	b.n	8020260 <__tzcalc_limits+0xc4>
 80202e4:	00015180 	.word	0x00015180
 80202e8:	08027770 	.word	0x08027770

080202ec <__tz_lock>:
 80202ec:	4801      	ldr	r0, [pc, #4]	; (80202f4 <__tz_lock+0x8>)
 80202ee:	f7fe beb9 	b.w	801f064 <__retarget_lock_acquire>
 80202f2:	bf00      	nop
 80202f4:	20000e93 	.word	0x20000e93

080202f8 <__tz_unlock>:
 80202f8:	4801      	ldr	r0, [pc, #4]	; (8020300 <__tz_unlock+0x8>)
 80202fa:	f7fe beb5 	b.w	801f068 <__retarget_lock_release>
 80202fe:	bf00      	nop
 8020300:	20000e93 	.word	0x20000e93

08020304 <_tzset_unlocked>:
 8020304:	4b01      	ldr	r3, [pc, #4]	; (802030c <_tzset_unlocked+0x8>)
 8020306:	6818      	ldr	r0, [r3, #0]
 8020308:	f000 b802 	b.w	8020310 <_tzset_unlocked_r>
 802030c:	2000010c 	.word	0x2000010c

08020310 <_tzset_unlocked_r>:
 8020310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020314:	b08d      	sub	sp, #52	; 0x34
 8020316:	4607      	mov	r7, r0
 8020318:	f000 fbb2 	bl	8020a80 <__gettzinfo>
 802031c:	49ae      	ldr	r1, [pc, #696]	; (80205d8 <_tzset_unlocked_r+0x2c8>)
 802031e:	4eaf      	ldr	r6, [pc, #700]	; (80205dc <_tzset_unlocked_r+0x2cc>)
 8020320:	4605      	mov	r5, r0
 8020322:	4638      	mov	r0, r7
 8020324:	f000 fba4 	bl	8020a70 <_getenv_r>
 8020328:	4604      	mov	r4, r0
 802032a:	b970      	cbnz	r0, 802034a <_tzset_unlocked_r+0x3a>
 802032c:	4bac      	ldr	r3, [pc, #688]	; (80205e0 <_tzset_unlocked_r+0x2d0>)
 802032e:	4aad      	ldr	r2, [pc, #692]	; (80205e4 <_tzset_unlocked_r+0x2d4>)
 8020330:	6018      	str	r0, [r3, #0]
 8020332:	4bad      	ldr	r3, [pc, #692]	; (80205e8 <_tzset_unlocked_r+0x2d8>)
 8020334:	6018      	str	r0, [r3, #0]
 8020336:	4bad      	ldr	r3, [pc, #692]	; (80205ec <_tzset_unlocked_r+0x2dc>)
 8020338:	6830      	ldr	r0, [r6, #0]
 802033a:	e9c3 2200 	strd	r2, r2, [r3]
 802033e:	f7fe ff01 	bl	801f144 <free>
 8020342:	6034      	str	r4, [r6, #0]
 8020344:	b00d      	add	sp, #52	; 0x34
 8020346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802034a:	6831      	ldr	r1, [r6, #0]
 802034c:	2900      	cmp	r1, #0
 802034e:	d15f      	bne.n	8020410 <_tzset_unlocked_r+0x100>
 8020350:	6830      	ldr	r0, [r6, #0]
 8020352:	f7fe fef7 	bl	801f144 <free>
 8020356:	4620      	mov	r0, r4
 8020358:	f7df ff70 	bl	800023c <strlen>
 802035c:	1c41      	adds	r1, r0, #1
 802035e:	4638      	mov	r0, r7
 8020360:	f7fe ff6e 	bl	801f240 <_malloc_r>
 8020364:	6030      	str	r0, [r6, #0]
 8020366:	2800      	cmp	r0, #0
 8020368:	d157      	bne.n	802041a <_tzset_unlocked_r+0x10a>
 802036a:	7823      	ldrb	r3, [r4, #0]
 802036c:	4aa0      	ldr	r2, [pc, #640]	; (80205f0 <_tzset_unlocked_r+0x2e0>)
 802036e:	49a1      	ldr	r1, [pc, #644]	; (80205f4 <_tzset_unlocked_r+0x2e4>)
 8020370:	2b3a      	cmp	r3, #58	; 0x3a
 8020372:	bf08      	it	eq
 8020374:	3401      	addeq	r4, #1
 8020376:	ae0a      	add	r6, sp, #40	; 0x28
 8020378:	4633      	mov	r3, r6
 802037a:	4620      	mov	r0, r4
 802037c:	f001 f976 	bl	802166c <siscanf>
 8020380:	2800      	cmp	r0, #0
 8020382:	dddf      	ble.n	8020344 <_tzset_unlocked_r+0x34>
 8020384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020386:	18e7      	adds	r7, r4, r3
 8020388:	5ce3      	ldrb	r3, [r4, r3]
 802038a:	2b2d      	cmp	r3, #45	; 0x2d
 802038c:	d149      	bne.n	8020422 <_tzset_unlocked_r+0x112>
 802038e:	3701      	adds	r7, #1
 8020390:	f04f 34ff 	mov.w	r4, #4294967295
 8020394:	f10d 0a20 	add.w	sl, sp, #32
 8020398:	f10d 0b1e 	add.w	fp, sp, #30
 802039c:	f04f 0800 	mov.w	r8, #0
 80203a0:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80203a4:	4994      	ldr	r1, [pc, #592]	; (80205f8 <_tzset_unlocked_r+0x2e8>)
 80203a6:	9603      	str	r6, [sp, #12]
 80203a8:	f8cd b000 	str.w	fp, [sp]
 80203ac:	4633      	mov	r3, r6
 80203ae:	aa07      	add	r2, sp, #28
 80203b0:	4638      	mov	r0, r7
 80203b2:	f8ad 801e 	strh.w	r8, [sp, #30]
 80203b6:	f8ad 8020 	strh.w	r8, [sp, #32]
 80203ba:	f001 f957 	bl	802166c <siscanf>
 80203be:	4540      	cmp	r0, r8
 80203c0:	ddc0      	ble.n	8020344 <_tzset_unlocked_r+0x34>
 80203c2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80203c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80203ca:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8020604 <_tzset_unlocked_r+0x2f4>
 80203ce:	213c      	movs	r1, #60	; 0x3c
 80203d0:	fb01 2203 	mla	r2, r1, r3, r2
 80203d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80203d8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80203dc:	fb01 2303 	mla	r3, r1, r3, r2
 80203e0:	435c      	muls	r4, r3
 80203e2:	62ac      	str	r4, [r5, #40]	; 0x28
 80203e4:	4c81      	ldr	r4, [pc, #516]	; (80205ec <_tzset_unlocked_r+0x2dc>)
 80203e6:	4b82      	ldr	r3, [pc, #520]	; (80205f0 <_tzset_unlocked_r+0x2e0>)
 80203e8:	6023      	str	r3, [r4, #0]
 80203ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203ec:	4981      	ldr	r1, [pc, #516]	; (80205f4 <_tzset_unlocked_r+0x2e4>)
 80203ee:	441f      	add	r7, r3
 80203f0:	464a      	mov	r2, r9
 80203f2:	4633      	mov	r3, r6
 80203f4:	4638      	mov	r0, r7
 80203f6:	f001 f939 	bl	802166c <siscanf>
 80203fa:	4540      	cmp	r0, r8
 80203fc:	dc16      	bgt.n	802042c <_tzset_unlocked_r+0x11c>
 80203fe:	6823      	ldr	r3, [r4, #0]
 8020400:	6063      	str	r3, [r4, #4]
 8020402:	4b77      	ldr	r3, [pc, #476]	; (80205e0 <_tzset_unlocked_r+0x2d0>)
 8020404:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8020406:	601a      	str	r2, [r3, #0]
 8020408:	4b77      	ldr	r3, [pc, #476]	; (80205e8 <_tzset_unlocked_r+0x2d8>)
 802040a:	f8c3 8000 	str.w	r8, [r3]
 802040e:	e799      	b.n	8020344 <_tzset_unlocked_r+0x34>
 8020410:	f7df ff1c 	bl	800024c <strcmp>
 8020414:	2800      	cmp	r0, #0
 8020416:	d19b      	bne.n	8020350 <_tzset_unlocked_r+0x40>
 8020418:	e794      	b.n	8020344 <_tzset_unlocked_r+0x34>
 802041a:	4621      	mov	r1, r4
 802041c:	f001 f952 	bl	80216c4 <strcpy>
 8020420:	e7a3      	b.n	802036a <_tzset_unlocked_r+0x5a>
 8020422:	2b2b      	cmp	r3, #43	; 0x2b
 8020424:	bf08      	it	eq
 8020426:	3701      	addeq	r7, #1
 8020428:	2401      	movs	r4, #1
 802042a:	e7b3      	b.n	8020394 <_tzset_unlocked_r+0x84>
 802042c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802042e:	f8c4 9004 	str.w	r9, [r4, #4]
 8020432:	18fc      	adds	r4, r7, r3
 8020434:	5cfb      	ldrb	r3, [r7, r3]
 8020436:	2b2d      	cmp	r3, #45	; 0x2d
 8020438:	f040 808b 	bne.w	8020552 <_tzset_unlocked_r+0x242>
 802043c:	3401      	adds	r4, #1
 802043e:	f04f 37ff 	mov.w	r7, #4294967295
 8020442:	2300      	movs	r3, #0
 8020444:	f8ad 301c 	strh.w	r3, [sp, #28]
 8020448:	f8ad 301e 	strh.w	r3, [sp, #30]
 802044c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020450:	930a      	str	r3, [sp, #40]	; 0x28
 8020452:	e9cd a602 	strd	sl, r6, [sp, #8]
 8020456:	e9cd b600 	strd	fp, r6, [sp]
 802045a:	4967      	ldr	r1, [pc, #412]	; (80205f8 <_tzset_unlocked_r+0x2e8>)
 802045c:	4633      	mov	r3, r6
 802045e:	aa07      	add	r2, sp, #28
 8020460:	4620      	mov	r0, r4
 8020462:	f001 f903 	bl	802166c <siscanf>
 8020466:	2800      	cmp	r0, #0
 8020468:	dc78      	bgt.n	802055c <_tzset_unlocked_r+0x24c>
 802046a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 802046c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8020470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020472:	652f      	str	r7, [r5, #80]	; 0x50
 8020474:	441c      	add	r4, r3
 8020476:	462f      	mov	r7, r5
 8020478:	f04f 0900 	mov.w	r9, #0
 802047c:	7823      	ldrb	r3, [r4, #0]
 802047e:	2b2c      	cmp	r3, #44	; 0x2c
 8020480:	bf08      	it	eq
 8020482:	3401      	addeq	r4, #1
 8020484:	f894 8000 	ldrb.w	r8, [r4]
 8020488:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802048c:	d178      	bne.n	8020580 <_tzset_unlocked_r+0x270>
 802048e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8020492:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8020496:	ab09      	add	r3, sp, #36	; 0x24
 8020498:	9300      	str	r3, [sp, #0]
 802049a:	4958      	ldr	r1, [pc, #352]	; (80205fc <_tzset_unlocked_r+0x2ec>)
 802049c:	9603      	str	r6, [sp, #12]
 802049e:	4633      	mov	r3, r6
 80204a0:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80204a4:	4620      	mov	r0, r4
 80204a6:	f001 f8e1 	bl	802166c <siscanf>
 80204aa:	2803      	cmp	r0, #3
 80204ac:	f47f af4a 	bne.w	8020344 <_tzset_unlocked_r+0x34>
 80204b0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80204b4:	1e4b      	subs	r3, r1, #1
 80204b6:	2b0b      	cmp	r3, #11
 80204b8:	f63f af44 	bhi.w	8020344 <_tzset_unlocked_r+0x34>
 80204bc:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80204c0:	1e53      	subs	r3, r2, #1
 80204c2:	2b04      	cmp	r3, #4
 80204c4:	f63f af3e 	bhi.w	8020344 <_tzset_unlocked_r+0x34>
 80204c8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80204cc:	2b06      	cmp	r3, #6
 80204ce:	f63f af39 	bhi.w	8020344 <_tzset_unlocked_r+0x34>
 80204d2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80204d6:	f887 8008 	strb.w	r8, [r7, #8]
 80204da:	617b      	str	r3, [r7, #20]
 80204dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204de:	eb04 0803 	add.w	r8, r4, r3
 80204e2:	2302      	movs	r3, #2
 80204e4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80204e8:	2300      	movs	r3, #0
 80204ea:	f8ad 301e 	strh.w	r3, [sp, #30]
 80204ee:	f8ad 3020 	strh.w	r3, [sp, #32]
 80204f2:	930a      	str	r3, [sp, #40]	; 0x28
 80204f4:	f898 3000 	ldrb.w	r3, [r8]
 80204f8:	2b2f      	cmp	r3, #47	; 0x2f
 80204fa:	d109      	bne.n	8020510 <_tzset_unlocked_r+0x200>
 80204fc:	e9cd a602 	strd	sl, r6, [sp, #8]
 8020500:	e9cd b600 	strd	fp, r6, [sp]
 8020504:	493e      	ldr	r1, [pc, #248]	; (8020600 <_tzset_unlocked_r+0x2f0>)
 8020506:	4633      	mov	r3, r6
 8020508:	aa07      	add	r2, sp, #28
 802050a:	4640      	mov	r0, r8
 802050c:	f001 f8ae 	bl	802166c <siscanf>
 8020510:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8020514:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020518:	213c      	movs	r1, #60	; 0x3c
 802051a:	fb01 2203 	mla	r2, r1, r3, r2
 802051e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8020522:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020526:	fb01 2303 	mla	r3, r1, r3, r2
 802052a:	61bb      	str	r3, [r7, #24]
 802052c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802052e:	3728      	adds	r7, #40	; 0x28
 8020530:	4444      	add	r4, r8
 8020532:	f1b9 0f00 	cmp.w	r9, #0
 8020536:	d020      	beq.n	802057a <_tzset_unlocked_r+0x26a>
 8020538:	6868      	ldr	r0, [r5, #4]
 802053a:	f7ff fe2f 	bl	802019c <__tzcalc_limits>
 802053e:	4b28      	ldr	r3, [pc, #160]	; (80205e0 <_tzset_unlocked_r+0x2d0>)
 8020540:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8020542:	601a      	str	r2, [r3, #0]
 8020544:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8020546:	1a9b      	subs	r3, r3, r2
 8020548:	4a27      	ldr	r2, [pc, #156]	; (80205e8 <_tzset_unlocked_r+0x2d8>)
 802054a:	bf18      	it	ne
 802054c:	2301      	movne	r3, #1
 802054e:	6013      	str	r3, [r2, #0]
 8020550:	e6f8      	b.n	8020344 <_tzset_unlocked_r+0x34>
 8020552:	2b2b      	cmp	r3, #43	; 0x2b
 8020554:	bf08      	it	eq
 8020556:	3401      	addeq	r4, #1
 8020558:	2701      	movs	r7, #1
 802055a:	e772      	b.n	8020442 <_tzset_unlocked_r+0x132>
 802055c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8020560:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020564:	213c      	movs	r1, #60	; 0x3c
 8020566:	fb01 2203 	mla	r2, r1, r3, r2
 802056a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802056e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020572:	fb01 2303 	mla	r3, r1, r3, r2
 8020576:	435f      	muls	r7, r3
 8020578:	e77a      	b.n	8020470 <_tzset_unlocked_r+0x160>
 802057a:	f04f 0901 	mov.w	r9, #1
 802057e:	e77d      	b.n	802047c <_tzset_unlocked_r+0x16c>
 8020580:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8020584:	bf06      	itte	eq
 8020586:	3401      	addeq	r4, #1
 8020588:	4643      	moveq	r3, r8
 802058a:	2344      	movne	r3, #68	; 0x44
 802058c:	220a      	movs	r2, #10
 802058e:	a90b      	add	r1, sp, #44	; 0x2c
 8020590:	4620      	mov	r0, r4
 8020592:	9305      	str	r3, [sp, #20]
 8020594:	f7ff fdf8 	bl	8020188 <strtoul>
 8020598:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802059c:	9b05      	ldr	r3, [sp, #20]
 802059e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80205a2:	45a0      	cmp	r8, r4
 80205a4:	d114      	bne.n	80205d0 <_tzset_unlocked_r+0x2c0>
 80205a6:	234d      	movs	r3, #77	; 0x4d
 80205a8:	f1b9 0f00 	cmp.w	r9, #0
 80205ac:	d107      	bne.n	80205be <_tzset_unlocked_r+0x2ae>
 80205ae:	722b      	strb	r3, [r5, #8]
 80205b0:	2103      	movs	r1, #3
 80205b2:	2302      	movs	r3, #2
 80205b4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 80205b8:	f8c5 9014 	str.w	r9, [r5, #20]
 80205bc:	e791      	b.n	80204e2 <_tzset_unlocked_r+0x1d2>
 80205be:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 80205c2:	220b      	movs	r2, #11
 80205c4:	2301      	movs	r3, #1
 80205c6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 80205ca:	2300      	movs	r3, #0
 80205cc:	63eb      	str	r3, [r5, #60]	; 0x3c
 80205ce:	e788      	b.n	80204e2 <_tzset_unlocked_r+0x1d2>
 80205d0:	b280      	uxth	r0, r0
 80205d2:	723b      	strb	r3, [r7, #8]
 80205d4:	6178      	str	r0, [r7, #20]
 80205d6:	e784      	b.n	80204e2 <_tzset_unlocked_r+0x1d2>
 80205d8:	08027ab0 	.word	0x08027ab0
 80205dc:	20000dec 	.word	0x20000dec
 80205e0:	20000df4 	.word	0x20000df4
 80205e4:	08027ab3 	.word	0x08027ab3
 80205e8:	20000df0 	.word	0x20000df0
 80205ec:	20000170 	.word	0x20000170
 80205f0:	20000ddf 	.word	0x20000ddf
 80205f4:	08027ab7 	.word	0x08027ab7
 80205f8:	08027ada 	.word	0x08027ada
 80205fc:	08027ac6 	.word	0x08027ac6
 8020600:	08027ad9 	.word	0x08027ad9
 8020604:	20000dd4 	.word	0x20000dd4

08020608 <_vsniprintf_r>:
 8020608:	b530      	push	{r4, r5, lr}
 802060a:	1e14      	subs	r4, r2, #0
 802060c:	4605      	mov	r5, r0
 802060e:	b09b      	sub	sp, #108	; 0x6c
 8020610:	4618      	mov	r0, r3
 8020612:	da05      	bge.n	8020620 <_vsniprintf_r+0x18>
 8020614:	238b      	movs	r3, #139	; 0x8b
 8020616:	602b      	str	r3, [r5, #0]
 8020618:	f04f 30ff 	mov.w	r0, #4294967295
 802061c:	b01b      	add	sp, #108	; 0x6c
 802061e:	bd30      	pop	{r4, r5, pc}
 8020620:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020624:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020628:	bf14      	ite	ne
 802062a:	f104 33ff 	addne.w	r3, r4, #4294967295
 802062e:	4623      	moveq	r3, r4
 8020630:	9302      	str	r3, [sp, #8]
 8020632:	9305      	str	r3, [sp, #20]
 8020634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020638:	9100      	str	r1, [sp, #0]
 802063a:	9104      	str	r1, [sp, #16]
 802063c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020640:	4602      	mov	r2, r0
 8020642:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8020644:	4669      	mov	r1, sp
 8020646:	4628      	mov	r0, r5
 8020648:	f000 fb94 	bl	8020d74 <_svfiprintf_r>
 802064c:	1c43      	adds	r3, r0, #1
 802064e:	bfbc      	itt	lt
 8020650:	238b      	movlt	r3, #139	; 0x8b
 8020652:	602b      	strlt	r3, [r5, #0]
 8020654:	2c00      	cmp	r4, #0
 8020656:	d0e1      	beq.n	802061c <_vsniprintf_r+0x14>
 8020658:	9b00      	ldr	r3, [sp, #0]
 802065a:	2200      	movs	r2, #0
 802065c:	701a      	strb	r2, [r3, #0]
 802065e:	e7dd      	b.n	802061c <_vsniprintf_r+0x14>

08020660 <vsniprintf>:
 8020660:	b507      	push	{r0, r1, r2, lr}
 8020662:	9300      	str	r3, [sp, #0]
 8020664:	4613      	mov	r3, r2
 8020666:	460a      	mov	r2, r1
 8020668:	4601      	mov	r1, r0
 802066a:	4803      	ldr	r0, [pc, #12]	; (8020678 <vsniprintf+0x18>)
 802066c:	6800      	ldr	r0, [r0, #0]
 802066e:	f7ff ffcb 	bl	8020608 <_vsniprintf_r>
 8020672:	b003      	add	sp, #12
 8020674:	f85d fb04 	ldr.w	pc, [sp], #4
 8020678:	2000010c 	.word	0x2000010c

0802067c <__swbuf_r>:
 802067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802067e:	460e      	mov	r6, r1
 8020680:	4614      	mov	r4, r2
 8020682:	4605      	mov	r5, r0
 8020684:	b118      	cbz	r0, 802068e <__swbuf_r+0x12>
 8020686:	6983      	ldr	r3, [r0, #24]
 8020688:	b90b      	cbnz	r3, 802068e <__swbuf_r+0x12>
 802068a:	f7fe f939 	bl	801e900 <__sinit>
 802068e:	4b21      	ldr	r3, [pc, #132]	; (8020714 <__swbuf_r+0x98>)
 8020690:	429c      	cmp	r4, r3
 8020692:	d12b      	bne.n	80206ec <__swbuf_r+0x70>
 8020694:	686c      	ldr	r4, [r5, #4]
 8020696:	69a3      	ldr	r3, [r4, #24]
 8020698:	60a3      	str	r3, [r4, #8]
 802069a:	89a3      	ldrh	r3, [r4, #12]
 802069c:	071a      	lsls	r2, r3, #28
 802069e:	d52f      	bpl.n	8020700 <__swbuf_r+0x84>
 80206a0:	6923      	ldr	r3, [r4, #16]
 80206a2:	b36b      	cbz	r3, 8020700 <__swbuf_r+0x84>
 80206a4:	6923      	ldr	r3, [r4, #16]
 80206a6:	6820      	ldr	r0, [r4, #0]
 80206a8:	1ac0      	subs	r0, r0, r3
 80206aa:	6963      	ldr	r3, [r4, #20]
 80206ac:	b2f6      	uxtb	r6, r6
 80206ae:	4283      	cmp	r3, r0
 80206b0:	4637      	mov	r7, r6
 80206b2:	dc04      	bgt.n	80206be <__swbuf_r+0x42>
 80206b4:	4621      	mov	r1, r4
 80206b6:	4628      	mov	r0, r5
 80206b8:	f7fe f87c 	bl	801e7b4 <_fflush_r>
 80206bc:	bb30      	cbnz	r0, 802070c <__swbuf_r+0x90>
 80206be:	68a3      	ldr	r3, [r4, #8]
 80206c0:	3b01      	subs	r3, #1
 80206c2:	60a3      	str	r3, [r4, #8]
 80206c4:	6823      	ldr	r3, [r4, #0]
 80206c6:	1c5a      	adds	r2, r3, #1
 80206c8:	6022      	str	r2, [r4, #0]
 80206ca:	701e      	strb	r6, [r3, #0]
 80206cc:	6963      	ldr	r3, [r4, #20]
 80206ce:	3001      	adds	r0, #1
 80206d0:	4283      	cmp	r3, r0
 80206d2:	d004      	beq.n	80206de <__swbuf_r+0x62>
 80206d4:	89a3      	ldrh	r3, [r4, #12]
 80206d6:	07db      	lsls	r3, r3, #31
 80206d8:	d506      	bpl.n	80206e8 <__swbuf_r+0x6c>
 80206da:	2e0a      	cmp	r6, #10
 80206dc:	d104      	bne.n	80206e8 <__swbuf_r+0x6c>
 80206de:	4621      	mov	r1, r4
 80206e0:	4628      	mov	r0, r5
 80206e2:	f7fe f867 	bl	801e7b4 <_fflush_r>
 80206e6:	b988      	cbnz	r0, 802070c <__swbuf_r+0x90>
 80206e8:	4638      	mov	r0, r7
 80206ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206ec:	4b0a      	ldr	r3, [pc, #40]	; (8020718 <__swbuf_r+0x9c>)
 80206ee:	429c      	cmp	r4, r3
 80206f0:	d101      	bne.n	80206f6 <__swbuf_r+0x7a>
 80206f2:	68ac      	ldr	r4, [r5, #8]
 80206f4:	e7cf      	b.n	8020696 <__swbuf_r+0x1a>
 80206f6:	4b09      	ldr	r3, [pc, #36]	; (802071c <__swbuf_r+0xa0>)
 80206f8:	429c      	cmp	r4, r3
 80206fa:	bf08      	it	eq
 80206fc:	68ec      	ldreq	r4, [r5, #12]
 80206fe:	e7ca      	b.n	8020696 <__swbuf_r+0x1a>
 8020700:	4621      	mov	r1, r4
 8020702:	4628      	mov	r0, r5
 8020704:	f000 f81e 	bl	8020744 <__swsetup_r>
 8020708:	2800      	cmp	r0, #0
 802070a:	d0cb      	beq.n	80206a4 <__swbuf_r+0x28>
 802070c:	f04f 37ff 	mov.w	r7, #4294967295
 8020710:	e7ea      	b.n	80206e8 <__swbuf_r+0x6c>
 8020712:	bf00      	nop
 8020714:	080276b4 	.word	0x080276b4
 8020718:	080276d4 	.word	0x080276d4
 802071c:	08027694 	.word	0x08027694

08020720 <_write_r>:
 8020720:	b538      	push	{r3, r4, r5, lr}
 8020722:	4d07      	ldr	r5, [pc, #28]	; (8020740 <_write_r+0x20>)
 8020724:	4604      	mov	r4, r0
 8020726:	4608      	mov	r0, r1
 8020728:	4611      	mov	r1, r2
 802072a:	2200      	movs	r2, #0
 802072c:	602a      	str	r2, [r5, #0]
 802072e:	461a      	mov	r2, r3
 8020730:	f7e0 fb4e 	bl	8000dd0 <_write>
 8020734:	1c43      	adds	r3, r0, #1
 8020736:	d102      	bne.n	802073e <_write_r+0x1e>
 8020738:	682b      	ldr	r3, [r5, #0]
 802073a:	b103      	cbz	r3, 802073e <_write_r+0x1e>
 802073c:	6023      	str	r3, [r4, #0]
 802073e:	bd38      	pop	{r3, r4, r5, pc}
 8020740:	20000e98 	.word	0x20000e98

08020744 <__swsetup_r>:
 8020744:	4b32      	ldr	r3, [pc, #200]	; (8020810 <__swsetup_r+0xcc>)
 8020746:	b570      	push	{r4, r5, r6, lr}
 8020748:	681d      	ldr	r5, [r3, #0]
 802074a:	4606      	mov	r6, r0
 802074c:	460c      	mov	r4, r1
 802074e:	b125      	cbz	r5, 802075a <__swsetup_r+0x16>
 8020750:	69ab      	ldr	r3, [r5, #24]
 8020752:	b913      	cbnz	r3, 802075a <__swsetup_r+0x16>
 8020754:	4628      	mov	r0, r5
 8020756:	f7fe f8d3 	bl	801e900 <__sinit>
 802075a:	4b2e      	ldr	r3, [pc, #184]	; (8020814 <__swsetup_r+0xd0>)
 802075c:	429c      	cmp	r4, r3
 802075e:	d10f      	bne.n	8020780 <__swsetup_r+0x3c>
 8020760:	686c      	ldr	r4, [r5, #4]
 8020762:	89a3      	ldrh	r3, [r4, #12]
 8020764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020768:	0719      	lsls	r1, r3, #28
 802076a:	d42c      	bmi.n	80207c6 <__swsetup_r+0x82>
 802076c:	06dd      	lsls	r5, r3, #27
 802076e:	d411      	bmi.n	8020794 <__swsetup_r+0x50>
 8020770:	2309      	movs	r3, #9
 8020772:	6033      	str	r3, [r6, #0]
 8020774:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020778:	81a3      	strh	r3, [r4, #12]
 802077a:	f04f 30ff 	mov.w	r0, #4294967295
 802077e:	e03e      	b.n	80207fe <__swsetup_r+0xba>
 8020780:	4b25      	ldr	r3, [pc, #148]	; (8020818 <__swsetup_r+0xd4>)
 8020782:	429c      	cmp	r4, r3
 8020784:	d101      	bne.n	802078a <__swsetup_r+0x46>
 8020786:	68ac      	ldr	r4, [r5, #8]
 8020788:	e7eb      	b.n	8020762 <__swsetup_r+0x1e>
 802078a:	4b24      	ldr	r3, [pc, #144]	; (802081c <__swsetup_r+0xd8>)
 802078c:	429c      	cmp	r4, r3
 802078e:	bf08      	it	eq
 8020790:	68ec      	ldreq	r4, [r5, #12]
 8020792:	e7e6      	b.n	8020762 <__swsetup_r+0x1e>
 8020794:	0758      	lsls	r0, r3, #29
 8020796:	d512      	bpl.n	80207be <__swsetup_r+0x7a>
 8020798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802079a:	b141      	cbz	r1, 80207ae <__swsetup_r+0x6a>
 802079c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80207a0:	4299      	cmp	r1, r3
 80207a2:	d002      	beq.n	80207aa <__swsetup_r+0x66>
 80207a4:	4630      	mov	r0, r6
 80207a6:	f7fe fcfb 	bl	801f1a0 <_free_r>
 80207aa:	2300      	movs	r3, #0
 80207ac:	6363      	str	r3, [r4, #52]	; 0x34
 80207ae:	89a3      	ldrh	r3, [r4, #12]
 80207b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80207b4:	81a3      	strh	r3, [r4, #12]
 80207b6:	2300      	movs	r3, #0
 80207b8:	6063      	str	r3, [r4, #4]
 80207ba:	6923      	ldr	r3, [r4, #16]
 80207bc:	6023      	str	r3, [r4, #0]
 80207be:	89a3      	ldrh	r3, [r4, #12]
 80207c0:	f043 0308 	orr.w	r3, r3, #8
 80207c4:	81a3      	strh	r3, [r4, #12]
 80207c6:	6923      	ldr	r3, [r4, #16]
 80207c8:	b94b      	cbnz	r3, 80207de <__swsetup_r+0x9a>
 80207ca:	89a3      	ldrh	r3, [r4, #12]
 80207cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80207d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80207d4:	d003      	beq.n	80207de <__swsetup_r+0x9a>
 80207d6:	4621      	mov	r1, r4
 80207d8:	4630      	mov	r0, r6
 80207da:	f7fe fc6b 	bl	801f0b4 <__smakebuf_r>
 80207de:	89a0      	ldrh	r0, [r4, #12]
 80207e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80207e4:	f010 0301 	ands.w	r3, r0, #1
 80207e8:	d00a      	beq.n	8020800 <__swsetup_r+0xbc>
 80207ea:	2300      	movs	r3, #0
 80207ec:	60a3      	str	r3, [r4, #8]
 80207ee:	6963      	ldr	r3, [r4, #20]
 80207f0:	425b      	negs	r3, r3
 80207f2:	61a3      	str	r3, [r4, #24]
 80207f4:	6923      	ldr	r3, [r4, #16]
 80207f6:	b943      	cbnz	r3, 802080a <__swsetup_r+0xc6>
 80207f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80207fc:	d1ba      	bne.n	8020774 <__swsetup_r+0x30>
 80207fe:	bd70      	pop	{r4, r5, r6, pc}
 8020800:	0781      	lsls	r1, r0, #30
 8020802:	bf58      	it	pl
 8020804:	6963      	ldrpl	r3, [r4, #20]
 8020806:	60a3      	str	r3, [r4, #8]
 8020808:	e7f4      	b.n	80207f4 <__swsetup_r+0xb0>
 802080a:	2000      	movs	r0, #0
 802080c:	e7f7      	b.n	80207fe <__swsetup_r+0xba>
 802080e:	bf00      	nop
 8020810:	2000010c 	.word	0x2000010c
 8020814:	080276b4 	.word	0x080276b4
 8020818:	080276d4 	.word	0x080276d4
 802081c:	08027694 	.word	0x08027694

08020820 <__register_exitproc>:
 8020820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020824:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80208e0 <__register_exitproc+0xc0>
 8020828:	4606      	mov	r6, r0
 802082a:	f8d8 0000 	ldr.w	r0, [r8]
 802082e:	461f      	mov	r7, r3
 8020830:	460d      	mov	r5, r1
 8020832:	4691      	mov	r9, r2
 8020834:	f7fe fc17 	bl	801f066 <__retarget_lock_acquire_recursive>
 8020838:	4b25      	ldr	r3, [pc, #148]	; (80208d0 <__register_exitproc+0xb0>)
 802083a:	681c      	ldr	r4, [r3, #0]
 802083c:	b934      	cbnz	r4, 802084c <__register_exitproc+0x2c>
 802083e:	4c25      	ldr	r4, [pc, #148]	; (80208d4 <__register_exitproc+0xb4>)
 8020840:	601c      	str	r4, [r3, #0]
 8020842:	4b25      	ldr	r3, [pc, #148]	; (80208d8 <__register_exitproc+0xb8>)
 8020844:	b113      	cbz	r3, 802084c <__register_exitproc+0x2c>
 8020846:	681b      	ldr	r3, [r3, #0]
 8020848:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802084c:	6863      	ldr	r3, [r4, #4]
 802084e:	2b1f      	cmp	r3, #31
 8020850:	dd07      	ble.n	8020862 <__register_exitproc+0x42>
 8020852:	f8d8 0000 	ldr.w	r0, [r8]
 8020856:	f7fe fc08 	bl	801f06a <__retarget_lock_release_recursive>
 802085a:	f04f 30ff 	mov.w	r0, #4294967295
 802085e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020862:	b34e      	cbz	r6, 80208b8 <__register_exitproc+0x98>
 8020864:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8020868:	b988      	cbnz	r0, 802088e <__register_exitproc+0x6e>
 802086a:	4b1c      	ldr	r3, [pc, #112]	; (80208dc <__register_exitproc+0xbc>)
 802086c:	b923      	cbnz	r3, 8020878 <__register_exitproc+0x58>
 802086e:	f8d8 0000 	ldr.w	r0, [r8]
 8020872:	f7fe fbf9 	bl	801f068 <__retarget_lock_release>
 8020876:	e7f0      	b.n	802085a <__register_exitproc+0x3a>
 8020878:	f44f 7084 	mov.w	r0, #264	; 0x108
 802087c:	f7fe fc5a 	bl	801f134 <malloc>
 8020880:	2800      	cmp	r0, #0
 8020882:	d0f4      	beq.n	802086e <__register_exitproc+0x4e>
 8020884:	2300      	movs	r3, #0
 8020886:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802088a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802088e:	6863      	ldr	r3, [r4, #4]
 8020890:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020894:	2201      	movs	r2, #1
 8020896:	409a      	lsls	r2, r3
 8020898:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802089c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80208a0:	4313      	orrs	r3, r2
 80208a2:	2e02      	cmp	r6, #2
 80208a4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80208a8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80208ac:	bf02      	ittt	eq
 80208ae:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80208b2:	431a      	orreq	r2, r3
 80208b4:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80208b8:	6863      	ldr	r3, [r4, #4]
 80208ba:	f8d8 0000 	ldr.w	r0, [r8]
 80208be:	1c5a      	adds	r2, r3, #1
 80208c0:	3302      	adds	r3, #2
 80208c2:	6062      	str	r2, [r4, #4]
 80208c4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80208c8:	f7fe fbcf 	bl	801f06a <__retarget_lock_release_recursive>
 80208cc:	2000      	movs	r0, #0
 80208ce:	e7c6      	b.n	802085e <__register_exitproc+0x3e>
 80208d0:	20000e84 	.word	0x20000e84
 80208d4:	20000df8 	.word	0x20000df8
 80208d8:	00000000 	.word	0x00000000
 80208dc:	0801f135 	.word	0x0801f135
 80208e0:	20000178 	.word	0x20000178

080208e4 <abs>:
 80208e4:	2800      	cmp	r0, #0
 80208e6:	bfb8      	it	lt
 80208e8:	4240      	neglt	r0, r0
 80208ea:	4770      	bx	lr

080208ec <__assert_func>:
 80208ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80208ee:	4614      	mov	r4, r2
 80208f0:	461a      	mov	r2, r3
 80208f2:	4b09      	ldr	r3, [pc, #36]	; (8020918 <__assert_func+0x2c>)
 80208f4:	681b      	ldr	r3, [r3, #0]
 80208f6:	4605      	mov	r5, r0
 80208f8:	68d8      	ldr	r0, [r3, #12]
 80208fa:	b14c      	cbz	r4, 8020910 <__assert_func+0x24>
 80208fc:	4b07      	ldr	r3, [pc, #28]	; (802091c <__assert_func+0x30>)
 80208fe:	9100      	str	r1, [sp, #0]
 8020900:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020904:	4906      	ldr	r1, [pc, #24]	; (8020920 <__assert_func+0x34>)
 8020906:	462b      	mov	r3, r5
 8020908:	f000 f854 	bl	80209b4 <fiprintf>
 802090c:	f7fd fe3c 	bl	801e588 <abort>
 8020910:	4b04      	ldr	r3, [pc, #16]	; (8020924 <__assert_func+0x38>)
 8020912:	461c      	mov	r4, r3
 8020914:	e7f3      	b.n	80208fe <__assert_func+0x12>
 8020916:	bf00      	nop
 8020918:	2000010c 	.word	0x2000010c
 802091c:	08027aec 	.word	0x08027aec
 8020920:	08027af9 	.word	0x08027af9
 8020924:	08027b27 	.word	0x08027b27

08020928 <_close_r>:
 8020928:	b538      	push	{r3, r4, r5, lr}
 802092a:	4d06      	ldr	r5, [pc, #24]	; (8020944 <_close_r+0x1c>)
 802092c:	2300      	movs	r3, #0
 802092e:	4604      	mov	r4, r0
 8020930:	4608      	mov	r0, r1
 8020932:	602b      	str	r3, [r5, #0]
 8020934:	f7e0 fa68 	bl	8000e08 <_close>
 8020938:	1c43      	adds	r3, r0, #1
 802093a:	d102      	bne.n	8020942 <_close_r+0x1a>
 802093c:	682b      	ldr	r3, [r5, #0]
 802093e:	b103      	cbz	r3, 8020942 <_close_r+0x1a>
 8020940:	6023      	str	r3, [r4, #0]
 8020942:	bd38      	pop	{r3, r4, r5, pc}
 8020944:	20000e98 	.word	0x20000e98

08020948 <__sflags>:
 8020948:	780b      	ldrb	r3, [r1, #0]
 802094a:	2b72      	cmp	r3, #114	; 0x72
 802094c:	b530      	push	{r4, r5, lr}
 802094e:	d022      	beq.n	8020996 <__sflags+0x4e>
 8020950:	2b77      	cmp	r3, #119	; 0x77
 8020952:	d024      	beq.n	802099e <__sflags+0x56>
 8020954:	2b61      	cmp	r3, #97	; 0x61
 8020956:	d027      	beq.n	80209a8 <__sflags+0x60>
 8020958:	2316      	movs	r3, #22
 802095a:	6003      	str	r3, [r0, #0]
 802095c:	2000      	movs	r0, #0
 802095e:	bd30      	pop	{r4, r5, pc}
 8020960:	2d62      	cmp	r5, #98	; 0x62
 8020962:	d012      	beq.n	802098a <__sflags+0x42>
 8020964:	2d78      	cmp	r5, #120	; 0x78
 8020966:	d013      	beq.n	8020990 <__sflags+0x48>
 8020968:	2d2b      	cmp	r5, #43	; 0x2b
 802096a:	d107      	bne.n	802097c <__sflags+0x34>
 802096c:	f020 001c 	bic.w	r0, r0, #28
 8020970:	f023 0303 	bic.w	r3, r3, #3
 8020974:	f040 0010 	orr.w	r0, r0, #16
 8020978:	f043 0302 	orr.w	r3, r3, #2
 802097c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8020980:	2d00      	cmp	r5, #0
 8020982:	d1ed      	bne.n	8020960 <__sflags+0x18>
 8020984:	4323      	orrs	r3, r4
 8020986:	6013      	str	r3, [r2, #0]
 8020988:	e7e9      	b.n	802095e <__sflags+0x16>
 802098a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802098e:	e7f5      	b.n	802097c <__sflags+0x34>
 8020990:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8020994:	e7f2      	b.n	802097c <__sflags+0x34>
 8020996:	2400      	movs	r4, #0
 8020998:	4623      	mov	r3, r4
 802099a:	2004      	movs	r0, #4
 802099c:	e7ee      	b.n	802097c <__sflags+0x34>
 802099e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80209a2:	2301      	movs	r3, #1
 80209a4:	2008      	movs	r0, #8
 80209a6:	e7e9      	b.n	802097c <__sflags+0x34>
 80209a8:	f44f 7402 	mov.w	r4, #520	; 0x208
 80209ac:	2301      	movs	r3, #1
 80209ae:	f44f 7084 	mov.w	r0, #264	; 0x108
 80209b2:	e7e3      	b.n	802097c <__sflags+0x34>

080209b4 <fiprintf>:
 80209b4:	b40e      	push	{r1, r2, r3}
 80209b6:	b503      	push	{r0, r1, lr}
 80209b8:	4601      	mov	r1, r0
 80209ba:	ab03      	add	r3, sp, #12
 80209bc:	4805      	ldr	r0, [pc, #20]	; (80209d4 <fiprintf+0x20>)
 80209be:	f853 2b04 	ldr.w	r2, [r3], #4
 80209c2:	6800      	ldr	r0, [r0, #0]
 80209c4:	9301      	str	r3, [sp, #4]
 80209c6:	f000 faff 	bl	8020fc8 <_vfiprintf_r>
 80209ca:	b002      	add	sp, #8
 80209cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80209d0:	b003      	add	sp, #12
 80209d2:	4770      	bx	lr
 80209d4:	2000010c 	.word	0x2000010c

080209d8 <_fstat_r>:
 80209d8:	b538      	push	{r3, r4, r5, lr}
 80209da:	4d07      	ldr	r5, [pc, #28]	; (80209f8 <_fstat_r+0x20>)
 80209dc:	2300      	movs	r3, #0
 80209de:	4604      	mov	r4, r0
 80209e0:	4608      	mov	r0, r1
 80209e2:	4611      	mov	r1, r2
 80209e4:	602b      	str	r3, [r5, #0]
 80209e6:	f7e0 fa1b 	bl	8000e20 <_fstat>
 80209ea:	1c43      	adds	r3, r0, #1
 80209ec:	d102      	bne.n	80209f4 <_fstat_r+0x1c>
 80209ee:	682b      	ldr	r3, [r5, #0]
 80209f0:	b103      	cbz	r3, 80209f4 <_fstat_r+0x1c>
 80209f2:	6023      	str	r3, [r4, #0]
 80209f4:	bd38      	pop	{r3, r4, r5, pc}
 80209f6:	bf00      	nop
 80209f8:	20000e98 	.word	0x20000e98

080209fc <_findenv_r>:
 80209fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a00:	4607      	mov	r7, r0
 8020a02:	4689      	mov	r9, r1
 8020a04:	4616      	mov	r6, r2
 8020a06:	f000 fe85 	bl	8021714 <__env_lock>
 8020a0a:	4b18      	ldr	r3, [pc, #96]	; (8020a6c <_findenv_r+0x70>)
 8020a0c:	681c      	ldr	r4, [r3, #0]
 8020a0e:	469a      	mov	sl, r3
 8020a10:	b134      	cbz	r4, 8020a20 <_findenv_r+0x24>
 8020a12:	464b      	mov	r3, r9
 8020a14:	4698      	mov	r8, r3
 8020a16:	f813 1b01 	ldrb.w	r1, [r3], #1
 8020a1a:	b139      	cbz	r1, 8020a2c <_findenv_r+0x30>
 8020a1c:	293d      	cmp	r1, #61	; 0x3d
 8020a1e:	d1f9      	bne.n	8020a14 <_findenv_r+0x18>
 8020a20:	4638      	mov	r0, r7
 8020a22:	f000 fe7d 	bl	8021720 <__env_unlock>
 8020a26:	2000      	movs	r0, #0
 8020a28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020a2c:	eba8 0809 	sub.w	r8, r8, r9
 8020a30:	46a3      	mov	fp, r4
 8020a32:	f854 0b04 	ldr.w	r0, [r4], #4
 8020a36:	2800      	cmp	r0, #0
 8020a38:	d0f2      	beq.n	8020a20 <_findenv_r+0x24>
 8020a3a:	4642      	mov	r2, r8
 8020a3c:	4649      	mov	r1, r9
 8020a3e:	f000 fe49 	bl	80216d4 <strncmp>
 8020a42:	2800      	cmp	r0, #0
 8020a44:	d1f4      	bne.n	8020a30 <_findenv_r+0x34>
 8020a46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8020a4a:	eb03 0508 	add.w	r5, r3, r8
 8020a4e:	f813 3008 	ldrb.w	r3, [r3, r8]
 8020a52:	2b3d      	cmp	r3, #61	; 0x3d
 8020a54:	d1ec      	bne.n	8020a30 <_findenv_r+0x34>
 8020a56:	f8da 3000 	ldr.w	r3, [sl]
 8020a5a:	ebab 0303 	sub.w	r3, fp, r3
 8020a5e:	109b      	asrs	r3, r3, #2
 8020a60:	4638      	mov	r0, r7
 8020a62:	6033      	str	r3, [r6, #0]
 8020a64:	f000 fe5c 	bl	8021720 <__env_unlock>
 8020a68:	1c68      	adds	r0, r5, #1
 8020a6a:	e7dd      	b.n	8020a28 <_findenv_r+0x2c>
 8020a6c:	20000000 	.word	0x20000000

08020a70 <_getenv_r>:
 8020a70:	b507      	push	{r0, r1, r2, lr}
 8020a72:	aa01      	add	r2, sp, #4
 8020a74:	f7ff ffc2 	bl	80209fc <_findenv_r>
 8020a78:	b003      	add	sp, #12
 8020a7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08020a80 <__gettzinfo>:
 8020a80:	4800      	ldr	r0, [pc, #0]	; (8020a84 <__gettzinfo+0x4>)
 8020a82:	4770      	bx	lr
 8020a84:	20000180 	.word	0x20000180

08020a88 <gmtime_r>:
 8020a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a8c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8020a90:	460c      	mov	r4, r1
 8020a92:	4a51      	ldr	r2, [pc, #324]	; (8020bd8 <gmtime_r+0x150>)
 8020a94:	2300      	movs	r3, #0
 8020a96:	4630      	mov	r0, r6
 8020a98:	4639      	mov	r1, r7
 8020a9a:	f7df fe8b 	bl	80007b4 <__aeabi_ldivmod>
 8020a9e:	4639      	mov	r1, r7
 8020aa0:	4605      	mov	r5, r0
 8020aa2:	4a4d      	ldr	r2, [pc, #308]	; (8020bd8 <gmtime_r+0x150>)
 8020aa4:	4630      	mov	r0, r6
 8020aa6:	2300      	movs	r3, #0
 8020aa8:	f7df fe84 	bl	80007b4 <__aeabi_ldivmod>
 8020aac:	2a00      	cmp	r2, #0
 8020aae:	bfbc      	itt	lt
 8020ab0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8020ab4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8020ab8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8020abc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8020ac0:	fbb2 f3f1 	udiv	r3, r2, r1
 8020ac4:	fb01 2213 	mls	r2, r1, r3, r2
 8020ac8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8020acc:	bfac      	ite	ge
 8020ace:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8020ad2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8020ad6:	60a3      	str	r3, [r4, #8]
 8020ad8:	fbb2 f3f1 	udiv	r3, r2, r1
 8020adc:	fb01 2213 	mls	r2, r1, r3, r2
 8020ae0:	6063      	str	r3, [r4, #4]
 8020ae2:	6022      	str	r2, [r4, #0]
 8020ae4:	1cc3      	adds	r3, r0, #3
 8020ae6:	2207      	movs	r2, #7
 8020ae8:	fb93 f2f2 	sdiv	r2, r3, r2
 8020aec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8020af0:	1a9b      	subs	r3, r3, r2
 8020af2:	bf48      	it	mi
 8020af4:	3307      	addmi	r3, #7
 8020af6:	2800      	cmp	r0, #0
 8020af8:	61a3      	str	r3, [r4, #24]
 8020afa:	bfb8      	it	lt
 8020afc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8020b00:	4936      	ldr	r1, [pc, #216]	; (8020bdc <gmtime_r+0x154>)
 8020b02:	bfae      	itee	ge
 8020b04:	fb90 f1f1 	sdivge	r1, r0, r1
 8020b08:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8020b0c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8020b10:	4b33      	ldr	r3, [pc, #204]	; (8020be0 <gmtime_r+0x158>)
 8020b12:	fb03 0001 	mla	r0, r3, r1, r0
 8020b16:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8020b1a:	fbb0 f2f2 	udiv	r2, r0, r2
 8020b1e:	4402      	add	r2, r0
 8020b20:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8020b24:	fbb0 f3fc 	udiv	r3, r0, ip
 8020b28:	1ad2      	subs	r2, r2, r3
 8020b2a:	f240 176d 	movw	r7, #365	; 0x16d
 8020b2e:	4b2d      	ldr	r3, [pc, #180]	; (8020be4 <gmtime_r+0x15c>)
 8020b30:	fbb0 f3f3 	udiv	r3, r0, r3
 8020b34:	2664      	movs	r6, #100	; 0x64
 8020b36:	1ad3      	subs	r3, r2, r3
 8020b38:	fbb3 f5f7 	udiv	r5, r3, r7
 8020b3c:	fbb3 f3fc 	udiv	r3, r3, ip
 8020b40:	fbb5 f2f6 	udiv	r2, r5, r6
 8020b44:	1ad3      	subs	r3, r2, r3
 8020b46:	4403      	add	r3, r0
 8020b48:	fb07 3315 	mls	r3, r7, r5, r3
 8020b4c:	2099      	movs	r0, #153	; 0x99
 8020b4e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8020b52:	f10c 0c02 	add.w	ip, ip, #2
 8020b56:	f103 0e01 	add.w	lr, r3, #1
 8020b5a:	fbbc f7f0 	udiv	r7, ip, r0
 8020b5e:	4378      	muls	r0, r7
 8020b60:	3002      	adds	r0, #2
 8020b62:	f04f 0805 	mov.w	r8, #5
 8020b66:	fbb0 f0f8 	udiv	r0, r0, r8
 8020b6a:	ebae 0000 	sub.w	r0, lr, r0
 8020b6e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8020b72:	45f4      	cmp	ip, lr
 8020b74:	bf94      	ite	ls
 8020b76:	f04f 0c02 	movls.w	ip, #2
 8020b7a:	f06f 0c09 	mvnhi.w	ip, #9
 8020b7e:	4467      	add	r7, ip
 8020b80:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8020b84:	fb0c 5101 	mla	r1, ip, r1, r5
 8020b88:	2f01      	cmp	r7, #1
 8020b8a:	bf98      	it	ls
 8020b8c:	3101      	addls	r1, #1
 8020b8e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8020b92:	d30c      	bcc.n	8020bae <gmtime_r+0x126>
 8020b94:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8020b98:	61e3      	str	r3, [r4, #28]
 8020b9a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8020b9e:	2300      	movs	r3, #0
 8020ba0:	60e0      	str	r0, [r4, #12]
 8020ba2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8020ba6:	6223      	str	r3, [r4, #32]
 8020ba8:	4620      	mov	r0, r4
 8020baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020bae:	f015 0f03 	tst.w	r5, #3
 8020bb2:	d102      	bne.n	8020bba <gmtime_r+0x132>
 8020bb4:	fb06 5212 	mls	r2, r6, r2, r5
 8020bb8:	b95a      	cbnz	r2, 8020bd2 <gmtime_r+0x14a>
 8020bba:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8020bbe:	fbb5 f2f6 	udiv	r2, r5, r6
 8020bc2:	fb06 5212 	mls	r2, r6, r2, r5
 8020bc6:	fab2 f282 	clz	r2, r2
 8020bca:	0952      	lsrs	r2, r2, #5
 8020bcc:	333b      	adds	r3, #59	; 0x3b
 8020bce:	4413      	add	r3, r2
 8020bd0:	e7e2      	b.n	8020b98 <gmtime_r+0x110>
 8020bd2:	2201      	movs	r2, #1
 8020bd4:	e7fa      	b.n	8020bcc <gmtime_r+0x144>
 8020bd6:	bf00      	nop
 8020bd8:	00015180 	.word	0x00015180
 8020bdc:	00023ab1 	.word	0x00023ab1
 8020be0:	fffdc54f 	.word	0xfffdc54f
 8020be4:	00023ab0 	.word	0x00023ab0

08020be8 <_isatty_r>:
 8020be8:	b538      	push	{r3, r4, r5, lr}
 8020bea:	4d06      	ldr	r5, [pc, #24]	; (8020c04 <_isatty_r+0x1c>)
 8020bec:	2300      	movs	r3, #0
 8020bee:	4604      	mov	r4, r0
 8020bf0:	4608      	mov	r0, r1
 8020bf2:	602b      	str	r3, [r5, #0]
 8020bf4:	f7e0 f924 	bl	8000e40 <_isatty>
 8020bf8:	1c43      	adds	r3, r0, #1
 8020bfa:	d102      	bne.n	8020c02 <_isatty_r+0x1a>
 8020bfc:	682b      	ldr	r3, [r5, #0]
 8020bfe:	b103      	cbz	r3, 8020c02 <_isatty_r+0x1a>
 8020c00:	6023      	str	r3, [r4, #0]
 8020c02:	bd38      	pop	{r3, r4, r5, pc}
 8020c04:	20000e98 	.word	0x20000e98

08020c08 <labs>:
 8020c08:	2800      	cmp	r0, #0
 8020c0a:	bfb8      	it	lt
 8020c0c:	4240      	neglt	r0, r0
 8020c0e:	4770      	bx	lr

08020c10 <_lseek_r>:
 8020c10:	b538      	push	{r3, r4, r5, lr}
 8020c12:	4d07      	ldr	r5, [pc, #28]	; (8020c30 <_lseek_r+0x20>)
 8020c14:	4604      	mov	r4, r0
 8020c16:	4608      	mov	r0, r1
 8020c18:	4611      	mov	r1, r2
 8020c1a:	2200      	movs	r2, #0
 8020c1c:	602a      	str	r2, [r5, #0]
 8020c1e:	461a      	mov	r2, r3
 8020c20:	f7e0 f919 	bl	8000e56 <_lseek>
 8020c24:	1c43      	adds	r3, r0, #1
 8020c26:	d102      	bne.n	8020c2e <_lseek_r+0x1e>
 8020c28:	682b      	ldr	r3, [r5, #0]
 8020c2a:	b103      	cbz	r3, 8020c2e <_lseek_r+0x1e>
 8020c2c:	6023      	str	r3, [r4, #0]
 8020c2e:	bd38      	pop	{r3, r4, r5, pc}
 8020c30:	20000e98 	.word	0x20000e98

08020c34 <__ascii_mbtowc>:
 8020c34:	b082      	sub	sp, #8
 8020c36:	b901      	cbnz	r1, 8020c3a <__ascii_mbtowc+0x6>
 8020c38:	a901      	add	r1, sp, #4
 8020c3a:	b142      	cbz	r2, 8020c4e <__ascii_mbtowc+0x1a>
 8020c3c:	b14b      	cbz	r3, 8020c52 <__ascii_mbtowc+0x1e>
 8020c3e:	7813      	ldrb	r3, [r2, #0]
 8020c40:	600b      	str	r3, [r1, #0]
 8020c42:	7812      	ldrb	r2, [r2, #0]
 8020c44:	1e10      	subs	r0, r2, #0
 8020c46:	bf18      	it	ne
 8020c48:	2001      	movne	r0, #1
 8020c4a:	b002      	add	sp, #8
 8020c4c:	4770      	bx	lr
 8020c4e:	4610      	mov	r0, r2
 8020c50:	e7fb      	b.n	8020c4a <__ascii_mbtowc+0x16>
 8020c52:	f06f 0001 	mvn.w	r0, #1
 8020c56:	e7f8      	b.n	8020c4a <__ascii_mbtowc+0x16>

08020c58 <__malloc_lock>:
 8020c58:	4801      	ldr	r0, [pc, #4]	; (8020c60 <__malloc_lock+0x8>)
 8020c5a:	f7fe ba04 	b.w	801f066 <__retarget_lock_acquire_recursive>
 8020c5e:	bf00      	nop
 8020c60:	20000e90 	.word	0x20000e90

08020c64 <__malloc_unlock>:
 8020c64:	4801      	ldr	r0, [pc, #4]	; (8020c6c <__malloc_unlock+0x8>)
 8020c66:	f7fe ba00 	b.w	801f06a <__retarget_lock_release_recursive>
 8020c6a:	bf00      	nop
 8020c6c:	20000e90 	.word	0x20000e90

08020c70 <_realloc_r>:
 8020c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c72:	4607      	mov	r7, r0
 8020c74:	4614      	mov	r4, r2
 8020c76:	460e      	mov	r6, r1
 8020c78:	b921      	cbnz	r1, 8020c84 <_realloc_r+0x14>
 8020c7a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8020c7e:	4611      	mov	r1, r2
 8020c80:	f7fe bade 	b.w	801f240 <_malloc_r>
 8020c84:	b922      	cbnz	r2, 8020c90 <_realloc_r+0x20>
 8020c86:	f7fe fa8b 	bl	801f1a0 <_free_r>
 8020c8a:	4625      	mov	r5, r4
 8020c8c:	4628      	mov	r0, r5
 8020c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c90:	f000 fd66 	bl	8021760 <_malloc_usable_size_r>
 8020c94:	42a0      	cmp	r0, r4
 8020c96:	d20f      	bcs.n	8020cb8 <_realloc_r+0x48>
 8020c98:	4621      	mov	r1, r4
 8020c9a:	4638      	mov	r0, r7
 8020c9c:	f7fe fad0 	bl	801f240 <_malloc_r>
 8020ca0:	4605      	mov	r5, r0
 8020ca2:	2800      	cmp	r0, #0
 8020ca4:	d0f2      	beq.n	8020c8c <_realloc_r+0x1c>
 8020ca6:	4631      	mov	r1, r6
 8020ca8:	4622      	mov	r2, r4
 8020caa:	f7fe fa53 	bl	801f154 <memcpy>
 8020cae:	4631      	mov	r1, r6
 8020cb0:	4638      	mov	r0, r7
 8020cb2:	f7fe fa75 	bl	801f1a0 <_free_r>
 8020cb6:	e7e9      	b.n	8020c8c <_realloc_r+0x1c>
 8020cb8:	4635      	mov	r5, r6
 8020cba:	e7e7      	b.n	8020c8c <_realloc_r+0x1c>

08020cbc <__ssputs_r>:
 8020cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020cc0:	688e      	ldr	r6, [r1, #8]
 8020cc2:	429e      	cmp	r6, r3
 8020cc4:	4682      	mov	sl, r0
 8020cc6:	460c      	mov	r4, r1
 8020cc8:	4690      	mov	r8, r2
 8020cca:	461f      	mov	r7, r3
 8020ccc:	d838      	bhi.n	8020d40 <__ssputs_r+0x84>
 8020cce:	898a      	ldrh	r2, [r1, #12]
 8020cd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8020cd4:	d032      	beq.n	8020d3c <__ssputs_r+0x80>
 8020cd6:	6825      	ldr	r5, [r4, #0]
 8020cd8:	6909      	ldr	r1, [r1, #16]
 8020cda:	eba5 0901 	sub.w	r9, r5, r1
 8020cde:	6965      	ldr	r5, [r4, #20]
 8020ce0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020ce4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020ce8:	3301      	adds	r3, #1
 8020cea:	444b      	add	r3, r9
 8020cec:	106d      	asrs	r5, r5, #1
 8020cee:	429d      	cmp	r5, r3
 8020cf0:	bf38      	it	cc
 8020cf2:	461d      	movcc	r5, r3
 8020cf4:	0553      	lsls	r3, r2, #21
 8020cf6:	d531      	bpl.n	8020d5c <__ssputs_r+0xa0>
 8020cf8:	4629      	mov	r1, r5
 8020cfa:	f7fe faa1 	bl	801f240 <_malloc_r>
 8020cfe:	4606      	mov	r6, r0
 8020d00:	b950      	cbnz	r0, 8020d18 <__ssputs_r+0x5c>
 8020d02:	230c      	movs	r3, #12
 8020d04:	f8ca 3000 	str.w	r3, [sl]
 8020d08:	89a3      	ldrh	r3, [r4, #12]
 8020d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020d0e:	81a3      	strh	r3, [r4, #12]
 8020d10:	f04f 30ff 	mov.w	r0, #4294967295
 8020d14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020d18:	6921      	ldr	r1, [r4, #16]
 8020d1a:	464a      	mov	r2, r9
 8020d1c:	f7fe fa1a 	bl	801f154 <memcpy>
 8020d20:	89a3      	ldrh	r3, [r4, #12]
 8020d22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8020d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020d2a:	81a3      	strh	r3, [r4, #12]
 8020d2c:	6126      	str	r6, [r4, #16]
 8020d2e:	6165      	str	r5, [r4, #20]
 8020d30:	444e      	add	r6, r9
 8020d32:	eba5 0509 	sub.w	r5, r5, r9
 8020d36:	6026      	str	r6, [r4, #0]
 8020d38:	60a5      	str	r5, [r4, #8]
 8020d3a:	463e      	mov	r6, r7
 8020d3c:	42be      	cmp	r6, r7
 8020d3e:	d900      	bls.n	8020d42 <__ssputs_r+0x86>
 8020d40:	463e      	mov	r6, r7
 8020d42:	4632      	mov	r2, r6
 8020d44:	6820      	ldr	r0, [r4, #0]
 8020d46:	4641      	mov	r1, r8
 8020d48:	f000 fcf0 	bl	802172c <memmove>
 8020d4c:	68a3      	ldr	r3, [r4, #8]
 8020d4e:	6822      	ldr	r2, [r4, #0]
 8020d50:	1b9b      	subs	r3, r3, r6
 8020d52:	4432      	add	r2, r6
 8020d54:	60a3      	str	r3, [r4, #8]
 8020d56:	6022      	str	r2, [r4, #0]
 8020d58:	2000      	movs	r0, #0
 8020d5a:	e7db      	b.n	8020d14 <__ssputs_r+0x58>
 8020d5c:	462a      	mov	r2, r5
 8020d5e:	f7ff ff87 	bl	8020c70 <_realloc_r>
 8020d62:	4606      	mov	r6, r0
 8020d64:	2800      	cmp	r0, #0
 8020d66:	d1e1      	bne.n	8020d2c <__ssputs_r+0x70>
 8020d68:	6921      	ldr	r1, [r4, #16]
 8020d6a:	4650      	mov	r0, sl
 8020d6c:	f7fe fa18 	bl	801f1a0 <_free_r>
 8020d70:	e7c7      	b.n	8020d02 <__ssputs_r+0x46>
	...

08020d74 <_svfiprintf_r>:
 8020d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d78:	4698      	mov	r8, r3
 8020d7a:	898b      	ldrh	r3, [r1, #12]
 8020d7c:	061b      	lsls	r3, r3, #24
 8020d7e:	b09d      	sub	sp, #116	; 0x74
 8020d80:	4607      	mov	r7, r0
 8020d82:	460d      	mov	r5, r1
 8020d84:	4614      	mov	r4, r2
 8020d86:	d50e      	bpl.n	8020da6 <_svfiprintf_r+0x32>
 8020d88:	690b      	ldr	r3, [r1, #16]
 8020d8a:	b963      	cbnz	r3, 8020da6 <_svfiprintf_r+0x32>
 8020d8c:	2140      	movs	r1, #64	; 0x40
 8020d8e:	f7fe fa57 	bl	801f240 <_malloc_r>
 8020d92:	6028      	str	r0, [r5, #0]
 8020d94:	6128      	str	r0, [r5, #16]
 8020d96:	b920      	cbnz	r0, 8020da2 <_svfiprintf_r+0x2e>
 8020d98:	230c      	movs	r3, #12
 8020d9a:	603b      	str	r3, [r7, #0]
 8020d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8020da0:	e0d1      	b.n	8020f46 <_svfiprintf_r+0x1d2>
 8020da2:	2340      	movs	r3, #64	; 0x40
 8020da4:	616b      	str	r3, [r5, #20]
 8020da6:	2300      	movs	r3, #0
 8020da8:	9309      	str	r3, [sp, #36]	; 0x24
 8020daa:	2320      	movs	r3, #32
 8020dac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8020db0:	f8cd 800c 	str.w	r8, [sp, #12]
 8020db4:	2330      	movs	r3, #48	; 0x30
 8020db6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8020f60 <_svfiprintf_r+0x1ec>
 8020dba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8020dbe:	f04f 0901 	mov.w	r9, #1
 8020dc2:	4623      	mov	r3, r4
 8020dc4:	469a      	mov	sl, r3
 8020dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020dca:	b10a      	cbz	r2, 8020dd0 <_svfiprintf_r+0x5c>
 8020dcc:	2a25      	cmp	r2, #37	; 0x25
 8020dce:	d1f9      	bne.n	8020dc4 <_svfiprintf_r+0x50>
 8020dd0:	ebba 0b04 	subs.w	fp, sl, r4
 8020dd4:	d00b      	beq.n	8020dee <_svfiprintf_r+0x7a>
 8020dd6:	465b      	mov	r3, fp
 8020dd8:	4622      	mov	r2, r4
 8020dda:	4629      	mov	r1, r5
 8020ddc:	4638      	mov	r0, r7
 8020dde:	f7ff ff6d 	bl	8020cbc <__ssputs_r>
 8020de2:	3001      	adds	r0, #1
 8020de4:	f000 80aa 	beq.w	8020f3c <_svfiprintf_r+0x1c8>
 8020de8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020dea:	445a      	add	r2, fp
 8020dec:	9209      	str	r2, [sp, #36]	; 0x24
 8020dee:	f89a 3000 	ldrb.w	r3, [sl]
 8020df2:	2b00      	cmp	r3, #0
 8020df4:	f000 80a2 	beq.w	8020f3c <_svfiprintf_r+0x1c8>
 8020df8:	2300      	movs	r3, #0
 8020dfa:	f04f 32ff 	mov.w	r2, #4294967295
 8020dfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e02:	f10a 0a01 	add.w	sl, sl, #1
 8020e06:	9304      	str	r3, [sp, #16]
 8020e08:	9307      	str	r3, [sp, #28]
 8020e0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8020e0e:	931a      	str	r3, [sp, #104]	; 0x68
 8020e10:	4654      	mov	r4, sl
 8020e12:	2205      	movs	r2, #5
 8020e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e18:	4851      	ldr	r0, [pc, #324]	; (8020f60 <_svfiprintf_r+0x1ec>)
 8020e1a:	f7df fa21 	bl	8000260 <memchr>
 8020e1e:	9a04      	ldr	r2, [sp, #16]
 8020e20:	b9d8      	cbnz	r0, 8020e5a <_svfiprintf_r+0xe6>
 8020e22:	06d0      	lsls	r0, r2, #27
 8020e24:	bf44      	itt	mi
 8020e26:	2320      	movmi	r3, #32
 8020e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e2c:	0711      	lsls	r1, r2, #28
 8020e2e:	bf44      	itt	mi
 8020e30:	232b      	movmi	r3, #43	; 0x2b
 8020e32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8020e36:	f89a 3000 	ldrb.w	r3, [sl]
 8020e3a:	2b2a      	cmp	r3, #42	; 0x2a
 8020e3c:	d015      	beq.n	8020e6a <_svfiprintf_r+0xf6>
 8020e3e:	9a07      	ldr	r2, [sp, #28]
 8020e40:	4654      	mov	r4, sl
 8020e42:	2000      	movs	r0, #0
 8020e44:	f04f 0c0a 	mov.w	ip, #10
 8020e48:	4621      	mov	r1, r4
 8020e4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e4e:	3b30      	subs	r3, #48	; 0x30
 8020e50:	2b09      	cmp	r3, #9
 8020e52:	d94e      	bls.n	8020ef2 <_svfiprintf_r+0x17e>
 8020e54:	b1b0      	cbz	r0, 8020e84 <_svfiprintf_r+0x110>
 8020e56:	9207      	str	r2, [sp, #28]
 8020e58:	e014      	b.n	8020e84 <_svfiprintf_r+0x110>
 8020e5a:	eba0 0308 	sub.w	r3, r0, r8
 8020e5e:	fa09 f303 	lsl.w	r3, r9, r3
 8020e62:	4313      	orrs	r3, r2
 8020e64:	9304      	str	r3, [sp, #16]
 8020e66:	46a2      	mov	sl, r4
 8020e68:	e7d2      	b.n	8020e10 <_svfiprintf_r+0x9c>
 8020e6a:	9b03      	ldr	r3, [sp, #12]
 8020e6c:	1d19      	adds	r1, r3, #4
 8020e6e:	681b      	ldr	r3, [r3, #0]
 8020e70:	9103      	str	r1, [sp, #12]
 8020e72:	2b00      	cmp	r3, #0
 8020e74:	bfbb      	ittet	lt
 8020e76:	425b      	neglt	r3, r3
 8020e78:	f042 0202 	orrlt.w	r2, r2, #2
 8020e7c:	9307      	strge	r3, [sp, #28]
 8020e7e:	9307      	strlt	r3, [sp, #28]
 8020e80:	bfb8      	it	lt
 8020e82:	9204      	strlt	r2, [sp, #16]
 8020e84:	7823      	ldrb	r3, [r4, #0]
 8020e86:	2b2e      	cmp	r3, #46	; 0x2e
 8020e88:	d10c      	bne.n	8020ea4 <_svfiprintf_r+0x130>
 8020e8a:	7863      	ldrb	r3, [r4, #1]
 8020e8c:	2b2a      	cmp	r3, #42	; 0x2a
 8020e8e:	d135      	bne.n	8020efc <_svfiprintf_r+0x188>
 8020e90:	9b03      	ldr	r3, [sp, #12]
 8020e92:	1d1a      	adds	r2, r3, #4
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	9203      	str	r2, [sp, #12]
 8020e98:	2b00      	cmp	r3, #0
 8020e9a:	bfb8      	it	lt
 8020e9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8020ea0:	3402      	adds	r4, #2
 8020ea2:	9305      	str	r3, [sp, #20]
 8020ea4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8020f70 <_svfiprintf_r+0x1fc>
 8020ea8:	7821      	ldrb	r1, [r4, #0]
 8020eaa:	2203      	movs	r2, #3
 8020eac:	4650      	mov	r0, sl
 8020eae:	f7df f9d7 	bl	8000260 <memchr>
 8020eb2:	b140      	cbz	r0, 8020ec6 <_svfiprintf_r+0x152>
 8020eb4:	2340      	movs	r3, #64	; 0x40
 8020eb6:	eba0 000a 	sub.w	r0, r0, sl
 8020eba:	fa03 f000 	lsl.w	r0, r3, r0
 8020ebe:	9b04      	ldr	r3, [sp, #16]
 8020ec0:	4303      	orrs	r3, r0
 8020ec2:	3401      	adds	r4, #1
 8020ec4:	9304      	str	r3, [sp, #16]
 8020ec6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020eca:	4826      	ldr	r0, [pc, #152]	; (8020f64 <_svfiprintf_r+0x1f0>)
 8020ecc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8020ed0:	2206      	movs	r2, #6
 8020ed2:	f7df f9c5 	bl	8000260 <memchr>
 8020ed6:	2800      	cmp	r0, #0
 8020ed8:	d038      	beq.n	8020f4c <_svfiprintf_r+0x1d8>
 8020eda:	4b23      	ldr	r3, [pc, #140]	; (8020f68 <_svfiprintf_r+0x1f4>)
 8020edc:	bb1b      	cbnz	r3, 8020f26 <_svfiprintf_r+0x1b2>
 8020ede:	9b03      	ldr	r3, [sp, #12]
 8020ee0:	3307      	adds	r3, #7
 8020ee2:	f023 0307 	bic.w	r3, r3, #7
 8020ee6:	3308      	adds	r3, #8
 8020ee8:	9303      	str	r3, [sp, #12]
 8020eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eec:	4433      	add	r3, r6
 8020eee:	9309      	str	r3, [sp, #36]	; 0x24
 8020ef0:	e767      	b.n	8020dc2 <_svfiprintf_r+0x4e>
 8020ef2:	fb0c 3202 	mla	r2, ip, r2, r3
 8020ef6:	460c      	mov	r4, r1
 8020ef8:	2001      	movs	r0, #1
 8020efa:	e7a5      	b.n	8020e48 <_svfiprintf_r+0xd4>
 8020efc:	2300      	movs	r3, #0
 8020efe:	3401      	adds	r4, #1
 8020f00:	9305      	str	r3, [sp, #20]
 8020f02:	4619      	mov	r1, r3
 8020f04:	f04f 0c0a 	mov.w	ip, #10
 8020f08:	4620      	mov	r0, r4
 8020f0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f0e:	3a30      	subs	r2, #48	; 0x30
 8020f10:	2a09      	cmp	r2, #9
 8020f12:	d903      	bls.n	8020f1c <_svfiprintf_r+0x1a8>
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	d0c5      	beq.n	8020ea4 <_svfiprintf_r+0x130>
 8020f18:	9105      	str	r1, [sp, #20]
 8020f1a:	e7c3      	b.n	8020ea4 <_svfiprintf_r+0x130>
 8020f1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f20:	4604      	mov	r4, r0
 8020f22:	2301      	movs	r3, #1
 8020f24:	e7f0      	b.n	8020f08 <_svfiprintf_r+0x194>
 8020f26:	ab03      	add	r3, sp, #12
 8020f28:	9300      	str	r3, [sp, #0]
 8020f2a:	462a      	mov	r2, r5
 8020f2c:	4b0f      	ldr	r3, [pc, #60]	; (8020f6c <_svfiprintf_r+0x1f8>)
 8020f2e:	a904      	add	r1, sp, #16
 8020f30:	4638      	mov	r0, r7
 8020f32:	f3af 8000 	nop.w
 8020f36:	1c42      	adds	r2, r0, #1
 8020f38:	4606      	mov	r6, r0
 8020f3a:	d1d6      	bne.n	8020eea <_svfiprintf_r+0x176>
 8020f3c:	89ab      	ldrh	r3, [r5, #12]
 8020f3e:	065b      	lsls	r3, r3, #25
 8020f40:	f53f af2c 	bmi.w	8020d9c <_svfiprintf_r+0x28>
 8020f44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020f46:	b01d      	add	sp, #116	; 0x74
 8020f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f4c:	ab03      	add	r3, sp, #12
 8020f4e:	9300      	str	r3, [sp, #0]
 8020f50:	462a      	mov	r2, r5
 8020f52:	4b06      	ldr	r3, [pc, #24]	; (8020f6c <_svfiprintf_r+0x1f8>)
 8020f54:	a904      	add	r1, sp, #16
 8020f56:	4638      	mov	r0, r7
 8020f58:	f000 f9d4 	bl	8021304 <_printf_i>
 8020f5c:	e7eb      	b.n	8020f36 <_svfiprintf_r+0x1c2>
 8020f5e:	bf00      	nop
 8020f60:	08027c33 	.word	0x08027c33
 8020f64:	08027c3d 	.word	0x08027c3d
 8020f68:	00000000 	.word	0x00000000
 8020f6c:	08020cbd 	.word	0x08020cbd
 8020f70:	08027c39 	.word	0x08027c39

08020f74 <__sfputc_r>:
 8020f74:	6893      	ldr	r3, [r2, #8]
 8020f76:	3b01      	subs	r3, #1
 8020f78:	2b00      	cmp	r3, #0
 8020f7a:	b410      	push	{r4}
 8020f7c:	6093      	str	r3, [r2, #8]
 8020f7e:	da08      	bge.n	8020f92 <__sfputc_r+0x1e>
 8020f80:	6994      	ldr	r4, [r2, #24]
 8020f82:	42a3      	cmp	r3, r4
 8020f84:	db01      	blt.n	8020f8a <__sfputc_r+0x16>
 8020f86:	290a      	cmp	r1, #10
 8020f88:	d103      	bne.n	8020f92 <__sfputc_r+0x1e>
 8020f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020f8e:	f7ff bb75 	b.w	802067c <__swbuf_r>
 8020f92:	6813      	ldr	r3, [r2, #0]
 8020f94:	1c58      	adds	r0, r3, #1
 8020f96:	6010      	str	r0, [r2, #0]
 8020f98:	7019      	strb	r1, [r3, #0]
 8020f9a:	4608      	mov	r0, r1
 8020f9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020fa0:	4770      	bx	lr

08020fa2 <__sfputs_r>:
 8020fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fa4:	4606      	mov	r6, r0
 8020fa6:	460f      	mov	r7, r1
 8020fa8:	4614      	mov	r4, r2
 8020faa:	18d5      	adds	r5, r2, r3
 8020fac:	42ac      	cmp	r4, r5
 8020fae:	d101      	bne.n	8020fb4 <__sfputs_r+0x12>
 8020fb0:	2000      	movs	r0, #0
 8020fb2:	e007      	b.n	8020fc4 <__sfputs_r+0x22>
 8020fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020fb8:	463a      	mov	r2, r7
 8020fba:	4630      	mov	r0, r6
 8020fbc:	f7ff ffda 	bl	8020f74 <__sfputc_r>
 8020fc0:	1c43      	adds	r3, r0, #1
 8020fc2:	d1f3      	bne.n	8020fac <__sfputs_r+0xa>
 8020fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020fc8 <_vfiprintf_r>:
 8020fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fcc:	460d      	mov	r5, r1
 8020fce:	b09d      	sub	sp, #116	; 0x74
 8020fd0:	4614      	mov	r4, r2
 8020fd2:	4698      	mov	r8, r3
 8020fd4:	4606      	mov	r6, r0
 8020fd6:	b118      	cbz	r0, 8020fe0 <_vfiprintf_r+0x18>
 8020fd8:	6983      	ldr	r3, [r0, #24]
 8020fda:	b90b      	cbnz	r3, 8020fe0 <_vfiprintf_r+0x18>
 8020fdc:	f7fd fc90 	bl	801e900 <__sinit>
 8020fe0:	4b89      	ldr	r3, [pc, #548]	; (8021208 <_vfiprintf_r+0x240>)
 8020fe2:	429d      	cmp	r5, r3
 8020fe4:	d11b      	bne.n	802101e <_vfiprintf_r+0x56>
 8020fe6:	6875      	ldr	r5, [r6, #4]
 8020fe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8020fea:	07d9      	lsls	r1, r3, #31
 8020fec:	d405      	bmi.n	8020ffa <_vfiprintf_r+0x32>
 8020fee:	89ab      	ldrh	r3, [r5, #12]
 8020ff0:	059a      	lsls	r2, r3, #22
 8020ff2:	d402      	bmi.n	8020ffa <_vfiprintf_r+0x32>
 8020ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8020ff6:	f7fe f836 	bl	801f066 <__retarget_lock_acquire_recursive>
 8020ffa:	89ab      	ldrh	r3, [r5, #12]
 8020ffc:	071b      	lsls	r3, r3, #28
 8020ffe:	d501      	bpl.n	8021004 <_vfiprintf_r+0x3c>
 8021000:	692b      	ldr	r3, [r5, #16]
 8021002:	b9eb      	cbnz	r3, 8021040 <_vfiprintf_r+0x78>
 8021004:	4629      	mov	r1, r5
 8021006:	4630      	mov	r0, r6
 8021008:	f7ff fb9c 	bl	8020744 <__swsetup_r>
 802100c:	b1c0      	cbz	r0, 8021040 <_vfiprintf_r+0x78>
 802100e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021010:	07dc      	lsls	r4, r3, #31
 8021012:	d50e      	bpl.n	8021032 <_vfiprintf_r+0x6a>
 8021014:	f04f 30ff 	mov.w	r0, #4294967295
 8021018:	b01d      	add	sp, #116	; 0x74
 802101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802101e:	4b7b      	ldr	r3, [pc, #492]	; (802120c <_vfiprintf_r+0x244>)
 8021020:	429d      	cmp	r5, r3
 8021022:	d101      	bne.n	8021028 <_vfiprintf_r+0x60>
 8021024:	68b5      	ldr	r5, [r6, #8]
 8021026:	e7df      	b.n	8020fe8 <_vfiprintf_r+0x20>
 8021028:	4b79      	ldr	r3, [pc, #484]	; (8021210 <_vfiprintf_r+0x248>)
 802102a:	429d      	cmp	r5, r3
 802102c:	bf08      	it	eq
 802102e:	68f5      	ldreq	r5, [r6, #12]
 8021030:	e7da      	b.n	8020fe8 <_vfiprintf_r+0x20>
 8021032:	89ab      	ldrh	r3, [r5, #12]
 8021034:	0598      	lsls	r0, r3, #22
 8021036:	d4ed      	bmi.n	8021014 <_vfiprintf_r+0x4c>
 8021038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802103a:	f7fe f816 	bl	801f06a <__retarget_lock_release_recursive>
 802103e:	e7e9      	b.n	8021014 <_vfiprintf_r+0x4c>
 8021040:	2300      	movs	r3, #0
 8021042:	9309      	str	r3, [sp, #36]	; 0x24
 8021044:	2320      	movs	r3, #32
 8021046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802104a:	f8cd 800c 	str.w	r8, [sp, #12]
 802104e:	2330      	movs	r3, #48	; 0x30
 8021050:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8021214 <_vfiprintf_r+0x24c>
 8021054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021058:	f04f 0901 	mov.w	r9, #1
 802105c:	4623      	mov	r3, r4
 802105e:	469a      	mov	sl, r3
 8021060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021064:	b10a      	cbz	r2, 802106a <_vfiprintf_r+0xa2>
 8021066:	2a25      	cmp	r2, #37	; 0x25
 8021068:	d1f9      	bne.n	802105e <_vfiprintf_r+0x96>
 802106a:	ebba 0b04 	subs.w	fp, sl, r4
 802106e:	d00b      	beq.n	8021088 <_vfiprintf_r+0xc0>
 8021070:	465b      	mov	r3, fp
 8021072:	4622      	mov	r2, r4
 8021074:	4629      	mov	r1, r5
 8021076:	4630      	mov	r0, r6
 8021078:	f7ff ff93 	bl	8020fa2 <__sfputs_r>
 802107c:	3001      	adds	r0, #1
 802107e:	f000 80aa 	beq.w	80211d6 <_vfiprintf_r+0x20e>
 8021082:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021084:	445a      	add	r2, fp
 8021086:	9209      	str	r2, [sp, #36]	; 0x24
 8021088:	f89a 3000 	ldrb.w	r3, [sl]
 802108c:	2b00      	cmp	r3, #0
 802108e:	f000 80a2 	beq.w	80211d6 <_vfiprintf_r+0x20e>
 8021092:	2300      	movs	r3, #0
 8021094:	f04f 32ff 	mov.w	r2, #4294967295
 8021098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802109c:	f10a 0a01 	add.w	sl, sl, #1
 80210a0:	9304      	str	r3, [sp, #16]
 80210a2:	9307      	str	r3, [sp, #28]
 80210a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80210a8:	931a      	str	r3, [sp, #104]	; 0x68
 80210aa:	4654      	mov	r4, sl
 80210ac:	2205      	movs	r2, #5
 80210ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80210b2:	4858      	ldr	r0, [pc, #352]	; (8021214 <_vfiprintf_r+0x24c>)
 80210b4:	f7df f8d4 	bl	8000260 <memchr>
 80210b8:	9a04      	ldr	r2, [sp, #16]
 80210ba:	b9d8      	cbnz	r0, 80210f4 <_vfiprintf_r+0x12c>
 80210bc:	06d1      	lsls	r1, r2, #27
 80210be:	bf44      	itt	mi
 80210c0:	2320      	movmi	r3, #32
 80210c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80210c6:	0713      	lsls	r3, r2, #28
 80210c8:	bf44      	itt	mi
 80210ca:	232b      	movmi	r3, #43	; 0x2b
 80210cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80210d0:	f89a 3000 	ldrb.w	r3, [sl]
 80210d4:	2b2a      	cmp	r3, #42	; 0x2a
 80210d6:	d015      	beq.n	8021104 <_vfiprintf_r+0x13c>
 80210d8:	9a07      	ldr	r2, [sp, #28]
 80210da:	4654      	mov	r4, sl
 80210dc:	2000      	movs	r0, #0
 80210de:	f04f 0c0a 	mov.w	ip, #10
 80210e2:	4621      	mov	r1, r4
 80210e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80210e8:	3b30      	subs	r3, #48	; 0x30
 80210ea:	2b09      	cmp	r3, #9
 80210ec:	d94e      	bls.n	802118c <_vfiprintf_r+0x1c4>
 80210ee:	b1b0      	cbz	r0, 802111e <_vfiprintf_r+0x156>
 80210f0:	9207      	str	r2, [sp, #28]
 80210f2:	e014      	b.n	802111e <_vfiprintf_r+0x156>
 80210f4:	eba0 0308 	sub.w	r3, r0, r8
 80210f8:	fa09 f303 	lsl.w	r3, r9, r3
 80210fc:	4313      	orrs	r3, r2
 80210fe:	9304      	str	r3, [sp, #16]
 8021100:	46a2      	mov	sl, r4
 8021102:	e7d2      	b.n	80210aa <_vfiprintf_r+0xe2>
 8021104:	9b03      	ldr	r3, [sp, #12]
 8021106:	1d19      	adds	r1, r3, #4
 8021108:	681b      	ldr	r3, [r3, #0]
 802110a:	9103      	str	r1, [sp, #12]
 802110c:	2b00      	cmp	r3, #0
 802110e:	bfbb      	ittet	lt
 8021110:	425b      	neglt	r3, r3
 8021112:	f042 0202 	orrlt.w	r2, r2, #2
 8021116:	9307      	strge	r3, [sp, #28]
 8021118:	9307      	strlt	r3, [sp, #28]
 802111a:	bfb8      	it	lt
 802111c:	9204      	strlt	r2, [sp, #16]
 802111e:	7823      	ldrb	r3, [r4, #0]
 8021120:	2b2e      	cmp	r3, #46	; 0x2e
 8021122:	d10c      	bne.n	802113e <_vfiprintf_r+0x176>
 8021124:	7863      	ldrb	r3, [r4, #1]
 8021126:	2b2a      	cmp	r3, #42	; 0x2a
 8021128:	d135      	bne.n	8021196 <_vfiprintf_r+0x1ce>
 802112a:	9b03      	ldr	r3, [sp, #12]
 802112c:	1d1a      	adds	r2, r3, #4
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	9203      	str	r2, [sp, #12]
 8021132:	2b00      	cmp	r3, #0
 8021134:	bfb8      	it	lt
 8021136:	f04f 33ff 	movlt.w	r3, #4294967295
 802113a:	3402      	adds	r4, #2
 802113c:	9305      	str	r3, [sp, #20]
 802113e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8021224 <_vfiprintf_r+0x25c>
 8021142:	7821      	ldrb	r1, [r4, #0]
 8021144:	2203      	movs	r2, #3
 8021146:	4650      	mov	r0, sl
 8021148:	f7df f88a 	bl	8000260 <memchr>
 802114c:	b140      	cbz	r0, 8021160 <_vfiprintf_r+0x198>
 802114e:	2340      	movs	r3, #64	; 0x40
 8021150:	eba0 000a 	sub.w	r0, r0, sl
 8021154:	fa03 f000 	lsl.w	r0, r3, r0
 8021158:	9b04      	ldr	r3, [sp, #16]
 802115a:	4303      	orrs	r3, r0
 802115c:	3401      	adds	r4, #1
 802115e:	9304      	str	r3, [sp, #16]
 8021160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021164:	482c      	ldr	r0, [pc, #176]	; (8021218 <_vfiprintf_r+0x250>)
 8021166:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802116a:	2206      	movs	r2, #6
 802116c:	f7df f878 	bl	8000260 <memchr>
 8021170:	2800      	cmp	r0, #0
 8021172:	d03f      	beq.n	80211f4 <_vfiprintf_r+0x22c>
 8021174:	4b29      	ldr	r3, [pc, #164]	; (802121c <_vfiprintf_r+0x254>)
 8021176:	bb1b      	cbnz	r3, 80211c0 <_vfiprintf_r+0x1f8>
 8021178:	9b03      	ldr	r3, [sp, #12]
 802117a:	3307      	adds	r3, #7
 802117c:	f023 0307 	bic.w	r3, r3, #7
 8021180:	3308      	adds	r3, #8
 8021182:	9303      	str	r3, [sp, #12]
 8021184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021186:	443b      	add	r3, r7
 8021188:	9309      	str	r3, [sp, #36]	; 0x24
 802118a:	e767      	b.n	802105c <_vfiprintf_r+0x94>
 802118c:	fb0c 3202 	mla	r2, ip, r2, r3
 8021190:	460c      	mov	r4, r1
 8021192:	2001      	movs	r0, #1
 8021194:	e7a5      	b.n	80210e2 <_vfiprintf_r+0x11a>
 8021196:	2300      	movs	r3, #0
 8021198:	3401      	adds	r4, #1
 802119a:	9305      	str	r3, [sp, #20]
 802119c:	4619      	mov	r1, r3
 802119e:	f04f 0c0a 	mov.w	ip, #10
 80211a2:	4620      	mov	r0, r4
 80211a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80211a8:	3a30      	subs	r2, #48	; 0x30
 80211aa:	2a09      	cmp	r2, #9
 80211ac:	d903      	bls.n	80211b6 <_vfiprintf_r+0x1ee>
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d0c5      	beq.n	802113e <_vfiprintf_r+0x176>
 80211b2:	9105      	str	r1, [sp, #20]
 80211b4:	e7c3      	b.n	802113e <_vfiprintf_r+0x176>
 80211b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80211ba:	4604      	mov	r4, r0
 80211bc:	2301      	movs	r3, #1
 80211be:	e7f0      	b.n	80211a2 <_vfiprintf_r+0x1da>
 80211c0:	ab03      	add	r3, sp, #12
 80211c2:	9300      	str	r3, [sp, #0]
 80211c4:	462a      	mov	r2, r5
 80211c6:	4b16      	ldr	r3, [pc, #88]	; (8021220 <_vfiprintf_r+0x258>)
 80211c8:	a904      	add	r1, sp, #16
 80211ca:	4630      	mov	r0, r6
 80211cc:	f3af 8000 	nop.w
 80211d0:	4607      	mov	r7, r0
 80211d2:	1c78      	adds	r0, r7, #1
 80211d4:	d1d6      	bne.n	8021184 <_vfiprintf_r+0x1bc>
 80211d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80211d8:	07d9      	lsls	r1, r3, #31
 80211da:	d405      	bmi.n	80211e8 <_vfiprintf_r+0x220>
 80211dc:	89ab      	ldrh	r3, [r5, #12]
 80211de:	059a      	lsls	r2, r3, #22
 80211e0:	d402      	bmi.n	80211e8 <_vfiprintf_r+0x220>
 80211e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80211e4:	f7fd ff41 	bl	801f06a <__retarget_lock_release_recursive>
 80211e8:	89ab      	ldrh	r3, [r5, #12]
 80211ea:	065b      	lsls	r3, r3, #25
 80211ec:	f53f af12 	bmi.w	8021014 <_vfiprintf_r+0x4c>
 80211f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80211f2:	e711      	b.n	8021018 <_vfiprintf_r+0x50>
 80211f4:	ab03      	add	r3, sp, #12
 80211f6:	9300      	str	r3, [sp, #0]
 80211f8:	462a      	mov	r2, r5
 80211fa:	4b09      	ldr	r3, [pc, #36]	; (8021220 <_vfiprintf_r+0x258>)
 80211fc:	a904      	add	r1, sp, #16
 80211fe:	4630      	mov	r0, r6
 8021200:	f000 f880 	bl	8021304 <_printf_i>
 8021204:	e7e4      	b.n	80211d0 <_vfiprintf_r+0x208>
 8021206:	bf00      	nop
 8021208:	080276b4 	.word	0x080276b4
 802120c:	080276d4 	.word	0x080276d4
 8021210:	08027694 	.word	0x08027694
 8021214:	08027c33 	.word	0x08027c33
 8021218:	08027c3d 	.word	0x08027c3d
 802121c:	00000000 	.word	0x00000000
 8021220:	08020fa3 	.word	0x08020fa3
 8021224:	08027c39 	.word	0x08027c39

08021228 <_printf_common>:
 8021228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802122c:	4616      	mov	r6, r2
 802122e:	4699      	mov	r9, r3
 8021230:	688a      	ldr	r2, [r1, #8]
 8021232:	690b      	ldr	r3, [r1, #16]
 8021234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8021238:	4293      	cmp	r3, r2
 802123a:	bfb8      	it	lt
 802123c:	4613      	movlt	r3, r2
 802123e:	6033      	str	r3, [r6, #0]
 8021240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021244:	4607      	mov	r7, r0
 8021246:	460c      	mov	r4, r1
 8021248:	b10a      	cbz	r2, 802124e <_printf_common+0x26>
 802124a:	3301      	adds	r3, #1
 802124c:	6033      	str	r3, [r6, #0]
 802124e:	6823      	ldr	r3, [r4, #0]
 8021250:	0699      	lsls	r1, r3, #26
 8021252:	bf42      	ittt	mi
 8021254:	6833      	ldrmi	r3, [r6, #0]
 8021256:	3302      	addmi	r3, #2
 8021258:	6033      	strmi	r3, [r6, #0]
 802125a:	6825      	ldr	r5, [r4, #0]
 802125c:	f015 0506 	ands.w	r5, r5, #6
 8021260:	d106      	bne.n	8021270 <_printf_common+0x48>
 8021262:	f104 0a19 	add.w	sl, r4, #25
 8021266:	68e3      	ldr	r3, [r4, #12]
 8021268:	6832      	ldr	r2, [r6, #0]
 802126a:	1a9b      	subs	r3, r3, r2
 802126c:	42ab      	cmp	r3, r5
 802126e:	dc26      	bgt.n	80212be <_printf_common+0x96>
 8021270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021274:	1e13      	subs	r3, r2, #0
 8021276:	6822      	ldr	r2, [r4, #0]
 8021278:	bf18      	it	ne
 802127a:	2301      	movne	r3, #1
 802127c:	0692      	lsls	r2, r2, #26
 802127e:	d42b      	bmi.n	80212d8 <_printf_common+0xb0>
 8021280:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021284:	4649      	mov	r1, r9
 8021286:	4638      	mov	r0, r7
 8021288:	47c0      	blx	r8
 802128a:	3001      	adds	r0, #1
 802128c:	d01e      	beq.n	80212cc <_printf_common+0xa4>
 802128e:	6823      	ldr	r3, [r4, #0]
 8021290:	68e5      	ldr	r5, [r4, #12]
 8021292:	6832      	ldr	r2, [r6, #0]
 8021294:	f003 0306 	and.w	r3, r3, #6
 8021298:	2b04      	cmp	r3, #4
 802129a:	bf08      	it	eq
 802129c:	1aad      	subeq	r5, r5, r2
 802129e:	68a3      	ldr	r3, [r4, #8]
 80212a0:	6922      	ldr	r2, [r4, #16]
 80212a2:	bf0c      	ite	eq
 80212a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80212a8:	2500      	movne	r5, #0
 80212aa:	4293      	cmp	r3, r2
 80212ac:	bfc4      	itt	gt
 80212ae:	1a9b      	subgt	r3, r3, r2
 80212b0:	18ed      	addgt	r5, r5, r3
 80212b2:	2600      	movs	r6, #0
 80212b4:	341a      	adds	r4, #26
 80212b6:	42b5      	cmp	r5, r6
 80212b8:	d11a      	bne.n	80212f0 <_printf_common+0xc8>
 80212ba:	2000      	movs	r0, #0
 80212bc:	e008      	b.n	80212d0 <_printf_common+0xa8>
 80212be:	2301      	movs	r3, #1
 80212c0:	4652      	mov	r2, sl
 80212c2:	4649      	mov	r1, r9
 80212c4:	4638      	mov	r0, r7
 80212c6:	47c0      	blx	r8
 80212c8:	3001      	adds	r0, #1
 80212ca:	d103      	bne.n	80212d4 <_printf_common+0xac>
 80212cc:	f04f 30ff 	mov.w	r0, #4294967295
 80212d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80212d4:	3501      	adds	r5, #1
 80212d6:	e7c6      	b.n	8021266 <_printf_common+0x3e>
 80212d8:	18e1      	adds	r1, r4, r3
 80212da:	1c5a      	adds	r2, r3, #1
 80212dc:	2030      	movs	r0, #48	; 0x30
 80212de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80212e2:	4422      	add	r2, r4
 80212e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80212e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80212ec:	3302      	adds	r3, #2
 80212ee:	e7c7      	b.n	8021280 <_printf_common+0x58>
 80212f0:	2301      	movs	r3, #1
 80212f2:	4622      	mov	r2, r4
 80212f4:	4649      	mov	r1, r9
 80212f6:	4638      	mov	r0, r7
 80212f8:	47c0      	blx	r8
 80212fa:	3001      	adds	r0, #1
 80212fc:	d0e6      	beq.n	80212cc <_printf_common+0xa4>
 80212fe:	3601      	adds	r6, #1
 8021300:	e7d9      	b.n	80212b6 <_printf_common+0x8e>
	...

08021304 <_printf_i>:
 8021304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8021308:	460c      	mov	r4, r1
 802130a:	4691      	mov	r9, r2
 802130c:	7e27      	ldrb	r7, [r4, #24]
 802130e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021310:	2f78      	cmp	r7, #120	; 0x78
 8021312:	4680      	mov	r8, r0
 8021314:	469a      	mov	sl, r3
 8021316:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802131a:	d807      	bhi.n	802132c <_printf_i+0x28>
 802131c:	2f62      	cmp	r7, #98	; 0x62
 802131e:	d80a      	bhi.n	8021336 <_printf_i+0x32>
 8021320:	2f00      	cmp	r7, #0
 8021322:	f000 80d8 	beq.w	80214d6 <_printf_i+0x1d2>
 8021326:	2f58      	cmp	r7, #88	; 0x58
 8021328:	f000 80a3 	beq.w	8021472 <_printf_i+0x16e>
 802132c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8021330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8021334:	e03a      	b.n	80213ac <_printf_i+0xa8>
 8021336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802133a:	2b15      	cmp	r3, #21
 802133c:	d8f6      	bhi.n	802132c <_printf_i+0x28>
 802133e:	a001      	add	r0, pc, #4	; (adr r0, 8021344 <_printf_i+0x40>)
 8021340:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8021344:	0802139d 	.word	0x0802139d
 8021348:	080213b1 	.word	0x080213b1
 802134c:	0802132d 	.word	0x0802132d
 8021350:	0802132d 	.word	0x0802132d
 8021354:	0802132d 	.word	0x0802132d
 8021358:	0802132d 	.word	0x0802132d
 802135c:	080213b1 	.word	0x080213b1
 8021360:	0802132d 	.word	0x0802132d
 8021364:	0802132d 	.word	0x0802132d
 8021368:	0802132d 	.word	0x0802132d
 802136c:	0802132d 	.word	0x0802132d
 8021370:	080214bd 	.word	0x080214bd
 8021374:	080213e1 	.word	0x080213e1
 8021378:	0802149f 	.word	0x0802149f
 802137c:	0802132d 	.word	0x0802132d
 8021380:	0802132d 	.word	0x0802132d
 8021384:	080214df 	.word	0x080214df
 8021388:	0802132d 	.word	0x0802132d
 802138c:	080213e1 	.word	0x080213e1
 8021390:	0802132d 	.word	0x0802132d
 8021394:	0802132d 	.word	0x0802132d
 8021398:	080214a7 	.word	0x080214a7
 802139c:	680b      	ldr	r3, [r1, #0]
 802139e:	1d1a      	adds	r2, r3, #4
 80213a0:	681b      	ldr	r3, [r3, #0]
 80213a2:	600a      	str	r2, [r1, #0]
 80213a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80213a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80213ac:	2301      	movs	r3, #1
 80213ae:	e0a3      	b.n	80214f8 <_printf_i+0x1f4>
 80213b0:	6825      	ldr	r5, [r4, #0]
 80213b2:	6808      	ldr	r0, [r1, #0]
 80213b4:	062e      	lsls	r6, r5, #24
 80213b6:	f100 0304 	add.w	r3, r0, #4
 80213ba:	d50a      	bpl.n	80213d2 <_printf_i+0xce>
 80213bc:	6805      	ldr	r5, [r0, #0]
 80213be:	600b      	str	r3, [r1, #0]
 80213c0:	2d00      	cmp	r5, #0
 80213c2:	da03      	bge.n	80213cc <_printf_i+0xc8>
 80213c4:	232d      	movs	r3, #45	; 0x2d
 80213c6:	426d      	negs	r5, r5
 80213c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80213cc:	485e      	ldr	r0, [pc, #376]	; (8021548 <_printf_i+0x244>)
 80213ce:	230a      	movs	r3, #10
 80213d0:	e019      	b.n	8021406 <_printf_i+0x102>
 80213d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80213d6:	6805      	ldr	r5, [r0, #0]
 80213d8:	600b      	str	r3, [r1, #0]
 80213da:	bf18      	it	ne
 80213dc:	b22d      	sxthne	r5, r5
 80213de:	e7ef      	b.n	80213c0 <_printf_i+0xbc>
 80213e0:	680b      	ldr	r3, [r1, #0]
 80213e2:	6825      	ldr	r5, [r4, #0]
 80213e4:	1d18      	adds	r0, r3, #4
 80213e6:	6008      	str	r0, [r1, #0]
 80213e8:	0628      	lsls	r0, r5, #24
 80213ea:	d501      	bpl.n	80213f0 <_printf_i+0xec>
 80213ec:	681d      	ldr	r5, [r3, #0]
 80213ee:	e002      	b.n	80213f6 <_printf_i+0xf2>
 80213f0:	0669      	lsls	r1, r5, #25
 80213f2:	d5fb      	bpl.n	80213ec <_printf_i+0xe8>
 80213f4:	881d      	ldrh	r5, [r3, #0]
 80213f6:	4854      	ldr	r0, [pc, #336]	; (8021548 <_printf_i+0x244>)
 80213f8:	2f6f      	cmp	r7, #111	; 0x6f
 80213fa:	bf0c      	ite	eq
 80213fc:	2308      	moveq	r3, #8
 80213fe:	230a      	movne	r3, #10
 8021400:	2100      	movs	r1, #0
 8021402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8021406:	6866      	ldr	r6, [r4, #4]
 8021408:	60a6      	str	r6, [r4, #8]
 802140a:	2e00      	cmp	r6, #0
 802140c:	bfa2      	ittt	ge
 802140e:	6821      	ldrge	r1, [r4, #0]
 8021410:	f021 0104 	bicge.w	r1, r1, #4
 8021414:	6021      	strge	r1, [r4, #0]
 8021416:	b90d      	cbnz	r5, 802141c <_printf_i+0x118>
 8021418:	2e00      	cmp	r6, #0
 802141a:	d04d      	beq.n	80214b8 <_printf_i+0x1b4>
 802141c:	4616      	mov	r6, r2
 802141e:	fbb5 f1f3 	udiv	r1, r5, r3
 8021422:	fb03 5711 	mls	r7, r3, r1, r5
 8021426:	5dc7      	ldrb	r7, [r0, r7]
 8021428:	f806 7d01 	strb.w	r7, [r6, #-1]!
 802142c:	462f      	mov	r7, r5
 802142e:	42bb      	cmp	r3, r7
 8021430:	460d      	mov	r5, r1
 8021432:	d9f4      	bls.n	802141e <_printf_i+0x11a>
 8021434:	2b08      	cmp	r3, #8
 8021436:	d10b      	bne.n	8021450 <_printf_i+0x14c>
 8021438:	6823      	ldr	r3, [r4, #0]
 802143a:	07df      	lsls	r7, r3, #31
 802143c:	d508      	bpl.n	8021450 <_printf_i+0x14c>
 802143e:	6923      	ldr	r3, [r4, #16]
 8021440:	6861      	ldr	r1, [r4, #4]
 8021442:	4299      	cmp	r1, r3
 8021444:	bfde      	ittt	le
 8021446:	2330      	movle	r3, #48	; 0x30
 8021448:	f806 3c01 	strble.w	r3, [r6, #-1]
 802144c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8021450:	1b92      	subs	r2, r2, r6
 8021452:	6122      	str	r2, [r4, #16]
 8021454:	f8cd a000 	str.w	sl, [sp]
 8021458:	464b      	mov	r3, r9
 802145a:	aa03      	add	r2, sp, #12
 802145c:	4621      	mov	r1, r4
 802145e:	4640      	mov	r0, r8
 8021460:	f7ff fee2 	bl	8021228 <_printf_common>
 8021464:	3001      	adds	r0, #1
 8021466:	d14c      	bne.n	8021502 <_printf_i+0x1fe>
 8021468:	f04f 30ff 	mov.w	r0, #4294967295
 802146c:	b004      	add	sp, #16
 802146e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021472:	4835      	ldr	r0, [pc, #212]	; (8021548 <_printf_i+0x244>)
 8021474:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8021478:	6823      	ldr	r3, [r4, #0]
 802147a:	680e      	ldr	r6, [r1, #0]
 802147c:	061f      	lsls	r7, r3, #24
 802147e:	f856 5b04 	ldr.w	r5, [r6], #4
 8021482:	600e      	str	r6, [r1, #0]
 8021484:	d514      	bpl.n	80214b0 <_printf_i+0x1ac>
 8021486:	07d9      	lsls	r1, r3, #31
 8021488:	bf44      	itt	mi
 802148a:	f043 0320 	orrmi.w	r3, r3, #32
 802148e:	6023      	strmi	r3, [r4, #0]
 8021490:	b91d      	cbnz	r5, 802149a <_printf_i+0x196>
 8021492:	6823      	ldr	r3, [r4, #0]
 8021494:	f023 0320 	bic.w	r3, r3, #32
 8021498:	6023      	str	r3, [r4, #0]
 802149a:	2310      	movs	r3, #16
 802149c:	e7b0      	b.n	8021400 <_printf_i+0xfc>
 802149e:	6823      	ldr	r3, [r4, #0]
 80214a0:	f043 0320 	orr.w	r3, r3, #32
 80214a4:	6023      	str	r3, [r4, #0]
 80214a6:	2378      	movs	r3, #120	; 0x78
 80214a8:	4828      	ldr	r0, [pc, #160]	; (802154c <_printf_i+0x248>)
 80214aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80214ae:	e7e3      	b.n	8021478 <_printf_i+0x174>
 80214b0:	065e      	lsls	r6, r3, #25
 80214b2:	bf48      	it	mi
 80214b4:	b2ad      	uxthmi	r5, r5
 80214b6:	e7e6      	b.n	8021486 <_printf_i+0x182>
 80214b8:	4616      	mov	r6, r2
 80214ba:	e7bb      	b.n	8021434 <_printf_i+0x130>
 80214bc:	680b      	ldr	r3, [r1, #0]
 80214be:	6826      	ldr	r6, [r4, #0]
 80214c0:	6960      	ldr	r0, [r4, #20]
 80214c2:	1d1d      	adds	r5, r3, #4
 80214c4:	600d      	str	r5, [r1, #0]
 80214c6:	0635      	lsls	r5, r6, #24
 80214c8:	681b      	ldr	r3, [r3, #0]
 80214ca:	d501      	bpl.n	80214d0 <_printf_i+0x1cc>
 80214cc:	6018      	str	r0, [r3, #0]
 80214ce:	e002      	b.n	80214d6 <_printf_i+0x1d2>
 80214d0:	0671      	lsls	r1, r6, #25
 80214d2:	d5fb      	bpl.n	80214cc <_printf_i+0x1c8>
 80214d4:	8018      	strh	r0, [r3, #0]
 80214d6:	2300      	movs	r3, #0
 80214d8:	6123      	str	r3, [r4, #16]
 80214da:	4616      	mov	r6, r2
 80214dc:	e7ba      	b.n	8021454 <_printf_i+0x150>
 80214de:	680b      	ldr	r3, [r1, #0]
 80214e0:	1d1a      	adds	r2, r3, #4
 80214e2:	600a      	str	r2, [r1, #0]
 80214e4:	681e      	ldr	r6, [r3, #0]
 80214e6:	6862      	ldr	r2, [r4, #4]
 80214e8:	2100      	movs	r1, #0
 80214ea:	4630      	mov	r0, r6
 80214ec:	f7de feb8 	bl	8000260 <memchr>
 80214f0:	b108      	cbz	r0, 80214f6 <_printf_i+0x1f2>
 80214f2:	1b80      	subs	r0, r0, r6
 80214f4:	6060      	str	r0, [r4, #4]
 80214f6:	6863      	ldr	r3, [r4, #4]
 80214f8:	6123      	str	r3, [r4, #16]
 80214fa:	2300      	movs	r3, #0
 80214fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021500:	e7a8      	b.n	8021454 <_printf_i+0x150>
 8021502:	6923      	ldr	r3, [r4, #16]
 8021504:	4632      	mov	r2, r6
 8021506:	4649      	mov	r1, r9
 8021508:	4640      	mov	r0, r8
 802150a:	47d0      	blx	sl
 802150c:	3001      	adds	r0, #1
 802150e:	d0ab      	beq.n	8021468 <_printf_i+0x164>
 8021510:	6823      	ldr	r3, [r4, #0]
 8021512:	079b      	lsls	r3, r3, #30
 8021514:	d413      	bmi.n	802153e <_printf_i+0x23a>
 8021516:	68e0      	ldr	r0, [r4, #12]
 8021518:	9b03      	ldr	r3, [sp, #12]
 802151a:	4298      	cmp	r0, r3
 802151c:	bfb8      	it	lt
 802151e:	4618      	movlt	r0, r3
 8021520:	e7a4      	b.n	802146c <_printf_i+0x168>
 8021522:	2301      	movs	r3, #1
 8021524:	4632      	mov	r2, r6
 8021526:	4649      	mov	r1, r9
 8021528:	4640      	mov	r0, r8
 802152a:	47d0      	blx	sl
 802152c:	3001      	adds	r0, #1
 802152e:	d09b      	beq.n	8021468 <_printf_i+0x164>
 8021530:	3501      	adds	r5, #1
 8021532:	68e3      	ldr	r3, [r4, #12]
 8021534:	9903      	ldr	r1, [sp, #12]
 8021536:	1a5b      	subs	r3, r3, r1
 8021538:	42ab      	cmp	r3, r5
 802153a:	dcf2      	bgt.n	8021522 <_printf_i+0x21e>
 802153c:	e7eb      	b.n	8021516 <_printf_i+0x212>
 802153e:	2500      	movs	r5, #0
 8021540:	f104 0619 	add.w	r6, r4, #25
 8021544:	e7f5      	b.n	8021532 <_printf_i+0x22e>
 8021546:	bf00      	nop
 8021548:	08027c44 	.word	0x08027c44
 802154c:	08027c55 	.word	0x08027c55

08021550 <_putc_r>:
 8021550:	b570      	push	{r4, r5, r6, lr}
 8021552:	460d      	mov	r5, r1
 8021554:	4614      	mov	r4, r2
 8021556:	4606      	mov	r6, r0
 8021558:	b118      	cbz	r0, 8021562 <_putc_r+0x12>
 802155a:	6983      	ldr	r3, [r0, #24]
 802155c:	b90b      	cbnz	r3, 8021562 <_putc_r+0x12>
 802155e:	f7fd f9cf 	bl	801e900 <__sinit>
 8021562:	4b1c      	ldr	r3, [pc, #112]	; (80215d4 <_putc_r+0x84>)
 8021564:	429c      	cmp	r4, r3
 8021566:	d124      	bne.n	80215b2 <_putc_r+0x62>
 8021568:	6874      	ldr	r4, [r6, #4]
 802156a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802156c:	07d8      	lsls	r0, r3, #31
 802156e:	d405      	bmi.n	802157c <_putc_r+0x2c>
 8021570:	89a3      	ldrh	r3, [r4, #12]
 8021572:	0599      	lsls	r1, r3, #22
 8021574:	d402      	bmi.n	802157c <_putc_r+0x2c>
 8021576:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021578:	f7fd fd75 	bl	801f066 <__retarget_lock_acquire_recursive>
 802157c:	68a3      	ldr	r3, [r4, #8]
 802157e:	3b01      	subs	r3, #1
 8021580:	2b00      	cmp	r3, #0
 8021582:	60a3      	str	r3, [r4, #8]
 8021584:	da05      	bge.n	8021592 <_putc_r+0x42>
 8021586:	69a2      	ldr	r2, [r4, #24]
 8021588:	4293      	cmp	r3, r2
 802158a:	db1c      	blt.n	80215c6 <_putc_r+0x76>
 802158c:	b2eb      	uxtb	r3, r5
 802158e:	2b0a      	cmp	r3, #10
 8021590:	d019      	beq.n	80215c6 <_putc_r+0x76>
 8021592:	6823      	ldr	r3, [r4, #0]
 8021594:	1c5a      	adds	r2, r3, #1
 8021596:	6022      	str	r2, [r4, #0]
 8021598:	701d      	strb	r5, [r3, #0]
 802159a:	b2ed      	uxtb	r5, r5
 802159c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802159e:	07da      	lsls	r2, r3, #31
 80215a0:	d405      	bmi.n	80215ae <_putc_r+0x5e>
 80215a2:	89a3      	ldrh	r3, [r4, #12]
 80215a4:	059b      	lsls	r3, r3, #22
 80215a6:	d402      	bmi.n	80215ae <_putc_r+0x5e>
 80215a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215aa:	f7fd fd5e 	bl	801f06a <__retarget_lock_release_recursive>
 80215ae:	4628      	mov	r0, r5
 80215b0:	bd70      	pop	{r4, r5, r6, pc}
 80215b2:	4b09      	ldr	r3, [pc, #36]	; (80215d8 <_putc_r+0x88>)
 80215b4:	429c      	cmp	r4, r3
 80215b6:	d101      	bne.n	80215bc <_putc_r+0x6c>
 80215b8:	68b4      	ldr	r4, [r6, #8]
 80215ba:	e7d6      	b.n	802156a <_putc_r+0x1a>
 80215bc:	4b07      	ldr	r3, [pc, #28]	; (80215dc <_putc_r+0x8c>)
 80215be:	429c      	cmp	r4, r3
 80215c0:	bf08      	it	eq
 80215c2:	68f4      	ldreq	r4, [r6, #12]
 80215c4:	e7d1      	b.n	802156a <_putc_r+0x1a>
 80215c6:	4629      	mov	r1, r5
 80215c8:	4622      	mov	r2, r4
 80215ca:	4630      	mov	r0, r6
 80215cc:	f7ff f856 	bl	802067c <__swbuf_r>
 80215d0:	4605      	mov	r5, r0
 80215d2:	e7e3      	b.n	802159c <_putc_r+0x4c>
 80215d4:	080276b4 	.word	0x080276b4
 80215d8:	080276d4 	.word	0x080276d4
 80215dc:	08027694 	.word	0x08027694

080215e0 <_read_r>:
 80215e0:	b538      	push	{r3, r4, r5, lr}
 80215e2:	4d07      	ldr	r5, [pc, #28]	; (8021600 <_read_r+0x20>)
 80215e4:	4604      	mov	r4, r0
 80215e6:	4608      	mov	r0, r1
 80215e8:	4611      	mov	r1, r2
 80215ea:	2200      	movs	r2, #0
 80215ec:	602a      	str	r2, [r5, #0]
 80215ee:	461a      	mov	r2, r3
 80215f0:	f7df fbd1 	bl	8000d96 <_read>
 80215f4:	1c43      	adds	r3, r0, #1
 80215f6:	d102      	bne.n	80215fe <_read_r+0x1e>
 80215f8:	682b      	ldr	r3, [r5, #0]
 80215fa:	b103      	cbz	r3, 80215fe <_read_r+0x1e>
 80215fc:	6023      	str	r3, [r4, #0]
 80215fe:	bd38      	pop	{r3, r4, r5, pc}
 8021600:	20000e98 	.word	0x20000e98

08021604 <sniprintf>:
 8021604:	b40c      	push	{r2, r3}
 8021606:	b530      	push	{r4, r5, lr}
 8021608:	4b17      	ldr	r3, [pc, #92]	; (8021668 <sniprintf+0x64>)
 802160a:	1e0c      	subs	r4, r1, #0
 802160c:	681d      	ldr	r5, [r3, #0]
 802160e:	b09d      	sub	sp, #116	; 0x74
 8021610:	da08      	bge.n	8021624 <sniprintf+0x20>
 8021612:	238b      	movs	r3, #139	; 0x8b
 8021614:	602b      	str	r3, [r5, #0]
 8021616:	f04f 30ff 	mov.w	r0, #4294967295
 802161a:	b01d      	add	sp, #116	; 0x74
 802161c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021620:	b002      	add	sp, #8
 8021622:	4770      	bx	lr
 8021624:	f44f 7302 	mov.w	r3, #520	; 0x208
 8021628:	f8ad 3014 	strh.w	r3, [sp, #20]
 802162c:	bf14      	ite	ne
 802162e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8021632:	4623      	moveq	r3, r4
 8021634:	9304      	str	r3, [sp, #16]
 8021636:	9307      	str	r3, [sp, #28]
 8021638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802163c:	9002      	str	r0, [sp, #8]
 802163e:	9006      	str	r0, [sp, #24]
 8021640:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021644:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021646:	ab21      	add	r3, sp, #132	; 0x84
 8021648:	a902      	add	r1, sp, #8
 802164a:	4628      	mov	r0, r5
 802164c:	9301      	str	r3, [sp, #4]
 802164e:	f7ff fb91 	bl	8020d74 <_svfiprintf_r>
 8021652:	1c43      	adds	r3, r0, #1
 8021654:	bfbc      	itt	lt
 8021656:	238b      	movlt	r3, #139	; 0x8b
 8021658:	602b      	strlt	r3, [r5, #0]
 802165a:	2c00      	cmp	r4, #0
 802165c:	d0dd      	beq.n	802161a <sniprintf+0x16>
 802165e:	9b02      	ldr	r3, [sp, #8]
 8021660:	2200      	movs	r2, #0
 8021662:	701a      	strb	r2, [r3, #0]
 8021664:	e7d9      	b.n	802161a <sniprintf+0x16>
 8021666:	bf00      	nop
 8021668:	2000010c 	.word	0x2000010c

0802166c <siscanf>:
 802166c:	b40e      	push	{r1, r2, r3}
 802166e:	b510      	push	{r4, lr}
 8021670:	b09f      	sub	sp, #124	; 0x7c
 8021672:	ac21      	add	r4, sp, #132	; 0x84
 8021674:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021678:	f854 2b04 	ldr.w	r2, [r4], #4
 802167c:	9201      	str	r2, [sp, #4]
 802167e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021682:	9004      	str	r0, [sp, #16]
 8021684:	9008      	str	r0, [sp, #32]
 8021686:	f7de fdd9 	bl	800023c <strlen>
 802168a:	4b0c      	ldr	r3, [pc, #48]	; (80216bc <siscanf+0x50>)
 802168c:	9005      	str	r0, [sp, #20]
 802168e:	9009      	str	r0, [sp, #36]	; 0x24
 8021690:	930d      	str	r3, [sp, #52]	; 0x34
 8021692:	480b      	ldr	r0, [pc, #44]	; (80216c0 <siscanf+0x54>)
 8021694:	9a01      	ldr	r2, [sp, #4]
 8021696:	6800      	ldr	r0, [r0, #0]
 8021698:	9403      	str	r4, [sp, #12]
 802169a:	2300      	movs	r3, #0
 802169c:	9311      	str	r3, [sp, #68]	; 0x44
 802169e:	9316      	str	r3, [sp, #88]	; 0x58
 80216a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80216a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80216a8:	a904      	add	r1, sp, #16
 80216aa:	4623      	mov	r3, r4
 80216ac:	f000 f8ba 	bl	8021824 <__ssvfiscanf_r>
 80216b0:	b01f      	add	sp, #124	; 0x7c
 80216b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80216b6:	b003      	add	sp, #12
 80216b8:	4770      	bx	lr
 80216ba:	bf00      	nop
 80216bc:	0801f53b 	.word	0x0801f53b
 80216c0:	2000010c 	.word	0x2000010c

080216c4 <strcpy>:
 80216c4:	4603      	mov	r3, r0
 80216c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80216ca:	f803 2b01 	strb.w	r2, [r3], #1
 80216ce:	2a00      	cmp	r2, #0
 80216d0:	d1f9      	bne.n	80216c6 <strcpy+0x2>
 80216d2:	4770      	bx	lr

080216d4 <strncmp>:
 80216d4:	b510      	push	{r4, lr}
 80216d6:	b16a      	cbz	r2, 80216f4 <strncmp+0x20>
 80216d8:	3901      	subs	r1, #1
 80216da:	1884      	adds	r4, r0, r2
 80216dc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80216e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80216e4:	4293      	cmp	r3, r2
 80216e6:	d103      	bne.n	80216f0 <strncmp+0x1c>
 80216e8:	42a0      	cmp	r0, r4
 80216ea:	d001      	beq.n	80216f0 <strncmp+0x1c>
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d1f5      	bne.n	80216dc <strncmp+0x8>
 80216f0:	1a98      	subs	r0, r3, r2
 80216f2:	bd10      	pop	{r4, pc}
 80216f4:	4610      	mov	r0, r2
 80216f6:	e7fc      	b.n	80216f2 <strncmp+0x1e>

080216f8 <__ascii_wctomb>:
 80216f8:	b149      	cbz	r1, 802170e <__ascii_wctomb+0x16>
 80216fa:	2aff      	cmp	r2, #255	; 0xff
 80216fc:	bf85      	ittet	hi
 80216fe:	238a      	movhi	r3, #138	; 0x8a
 8021700:	6003      	strhi	r3, [r0, #0]
 8021702:	700a      	strbls	r2, [r1, #0]
 8021704:	f04f 30ff 	movhi.w	r0, #4294967295
 8021708:	bf98      	it	ls
 802170a:	2001      	movls	r0, #1
 802170c:	4770      	bx	lr
 802170e:	4608      	mov	r0, r1
 8021710:	4770      	bx	lr
	...

08021714 <__env_lock>:
 8021714:	4801      	ldr	r0, [pc, #4]	; (802171c <__env_lock+0x8>)
 8021716:	f7fd bca6 	b.w	801f066 <__retarget_lock_acquire_recursive>
 802171a:	bf00      	nop
 802171c:	20000e8e 	.word	0x20000e8e

08021720 <__env_unlock>:
 8021720:	4801      	ldr	r0, [pc, #4]	; (8021728 <__env_unlock+0x8>)
 8021722:	f7fd bca2 	b.w	801f06a <__retarget_lock_release_recursive>
 8021726:	bf00      	nop
 8021728:	20000e8e 	.word	0x20000e8e

0802172c <memmove>:
 802172c:	4288      	cmp	r0, r1
 802172e:	b510      	push	{r4, lr}
 8021730:	eb01 0402 	add.w	r4, r1, r2
 8021734:	d902      	bls.n	802173c <memmove+0x10>
 8021736:	4284      	cmp	r4, r0
 8021738:	4623      	mov	r3, r4
 802173a:	d807      	bhi.n	802174c <memmove+0x20>
 802173c:	1e43      	subs	r3, r0, #1
 802173e:	42a1      	cmp	r1, r4
 8021740:	d008      	beq.n	8021754 <memmove+0x28>
 8021742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021746:	f803 2f01 	strb.w	r2, [r3, #1]!
 802174a:	e7f8      	b.n	802173e <memmove+0x12>
 802174c:	4402      	add	r2, r0
 802174e:	4601      	mov	r1, r0
 8021750:	428a      	cmp	r2, r1
 8021752:	d100      	bne.n	8021756 <memmove+0x2a>
 8021754:	bd10      	pop	{r4, pc}
 8021756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802175a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802175e:	e7f7      	b.n	8021750 <memmove+0x24>

08021760 <_malloc_usable_size_r>:
 8021760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021764:	1f18      	subs	r0, r3, #4
 8021766:	2b00      	cmp	r3, #0
 8021768:	bfbc      	itt	lt
 802176a:	580b      	ldrlt	r3, [r1, r0]
 802176c:	18c0      	addlt	r0, r0, r3
 802176e:	4770      	bx	lr

08021770 <_sungetc_r>:
 8021770:	b538      	push	{r3, r4, r5, lr}
 8021772:	1c4b      	adds	r3, r1, #1
 8021774:	4614      	mov	r4, r2
 8021776:	d103      	bne.n	8021780 <_sungetc_r+0x10>
 8021778:	f04f 35ff 	mov.w	r5, #4294967295
 802177c:	4628      	mov	r0, r5
 802177e:	bd38      	pop	{r3, r4, r5, pc}
 8021780:	8993      	ldrh	r3, [r2, #12]
 8021782:	f023 0320 	bic.w	r3, r3, #32
 8021786:	8193      	strh	r3, [r2, #12]
 8021788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802178a:	6852      	ldr	r2, [r2, #4]
 802178c:	b2cd      	uxtb	r5, r1
 802178e:	b18b      	cbz	r3, 80217b4 <_sungetc_r+0x44>
 8021790:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021792:	4293      	cmp	r3, r2
 8021794:	dd08      	ble.n	80217a8 <_sungetc_r+0x38>
 8021796:	6823      	ldr	r3, [r4, #0]
 8021798:	1e5a      	subs	r2, r3, #1
 802179a:	6022      	str	r2, [r4, #0]
 802179c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80217a0:	6863      	ldr	r3, [r4, #4]
 80217a2:	3301      	adds	r3, #1
 80217a4:	6063      	str	r3, [r4, #4]
 80217a6:	e7e9      	b.n	802177c <_sungetc_r+0xc>
 80217a8:	4621      	mov	r1, r4
 80217aa:	f000 fbbf 	bl	8021f2c <__submore>
 80217ae:	2800      	cmp	r0, #0
 80217b0:	d0f1      	beq.n	8021796 <_sungetc_r+0x26>
 80217b2:	e7e1      	b.n	8021778 <_sungetc_r+0x8>
 80217b4:	6921      	ldr	r1, [r4, #16]
 80217b6:	6823      	ldr	r3, [r4, #0]
 80217b8:	b151      	cbz	r1, 80217d0 <_sungetc_r+0x60>
 80217ba:	4299      	cmp	r1, r3
 80217bc:	d208      	bcs.n	80217d0 <_sungetc_r+0x60>
 80217be:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80217c2:	42a9      	cmp	r1, r5
 80217c4:	d104      	bne.n	80217d0 <_sungetc_r+0x60>
 80217c6:	3b01      	subs	r3, #1
 80217c8:	3201      	adds	r2, #1
 80217ca:	6023      	str	r3, [r4, #0]
 80217cc:	6062      	str	r2, [r4, #4]
 80217ce:	e7d5      	b.n	802177c <_sungetc_r+0xc>
 80217d0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80217d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80217d8:	6363      	str	r3, [r4, #52]	; 0x34
 80217da:	2303      	movs	r3, #3
 80217dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80217de:	4623      	mov	r3, r4
 80217e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80217e4:	6023      	str	r3, [r4, #0]
 80217e6:	2301      	movs	r3, #1
 80217e8:	e7dc      	b.n	80217a4 <_sungetc_r+0x34>

080217ea <__ssrefill_r>:
 80217ea:	b510      	push	{r4, lr}
 80217ec:	460c      	mov	r4, r1
 80217ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80217f0:	b169      	cbz	r1, 802180e <__ssrefill_r+0x24>
 80217f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80217f6:	4299      	cmp	r1, r3
 80217f8:	d001      	beq.n	80217fe <__ssrefill_r+0x14>
 80217fa:	f7fd fcd1 	bl	801f1a0 <_free_r>
 80217fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021800:	6063      	str	r3, [r4, #4]
 8021802:	2000      	movs	r0, #0
 8021804:	6360      	str	r0, [r4, #52]	; 0x34
 8021806:	b113      	cbz	r3, 802180e <__ssrefill_r+0x24>
 8021808:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802180a:	6023      	str	r3, [r4, #0]
 802180c:	bd10      	pop	{r4, pc}
 802180e:	6923      	ldr	r3, [r4, #16]
 8021810:	6023      	str	r3, [r4, #0]
 8021812:	2300      	movs	r3, #0
 8021814:	6063      	str	r3, [r4, #4]
 8021816:	89a3      	ldrh	r3, [r4, #12]
 8021818:	f043 0320 	orr.w	r3, r3, #32
 802181c:	81a3      	strh	r3, [r4, #12]
 802181e:	f04f 30ff 	mov.w	r0, #4294967295
 8021822:	e7f3      	b.n	802180c <__ssrefill_r+0x22>

08021824 <__ssvfiscanf_r>:
 8021824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021828:	460c      	mov	r4, r1
 802182a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802182e:	2100      	movs	r1, #0
 8021830:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8021834:	49b2      	ldr	r1, [pc, #712]	; (8021b00 <__ssvfiscanf_r+0x2dc>)
 8021836:	91a0      	str	r1, [sp, #640]	; 0x280
 8021838:	f10d 0804 	add.w	r8, sp, #4
 802183c:	49b1      	ldr	r1, [pc, #708]	; (8021b04 <__ssvfiscanf_r+0x2e0>)
 802183e:	4fb2      	ldr	r7, [pc, #712]	; (8021b08 <__ssvfiscanf_r+0x2e4>)
 8021840:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8021b0c <__ssvfiscanf_r+0x2e8>
 8021844:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8021848:	4606      	mov	r6, r0
 802184a:	91a1      	str	r1, [sp, #644]	; 0x284
 802184c:	9300      	str	r3, [sp, #0]
 802184e:	f892 a000 	ldrb.w	sl, [r2]
 8021852:	f1ba 0f00 	cmp.w	sl, #0
 8021856:	f000 8151 	beq.w	8021afc <__ssvfiscanf_r+0x2d8>
 802185a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802185e:	f013 0308 	ands.w	r3, r3, #8
 8021862:	f102 0501 	add.w	r5, r2, #1
 8021866:	d019      	beq.n	802189c <__ssvfiscanf_r+0x78>
 8021868:	6863      	ldr	r3, [r4, #4]
 802186a:	2b00      	cmp	r3, #0
 802186c:	dd0f      	ble.n	802188e <__ssvfiscanf_r+0x6a>
 802186e:	6823      	ldr	r3, [r4, #0]
 8021870:	781a      	ldrb	r2, [r3, #0]
 8021872:	5cba      	ldrb	r2, [r7, r2]
 8021874:	0712      	lsls	r2, r2, #28
 8021876:	d401      	bmi.n	802187c <__ssvfiscanf_r+0x58>
 8021878:	462a      	mov	r2, r5
 802187a:	e7e8      	b.n	802184e <__ssvfiscanf_r+0x2a>
 802187c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802187e:	3201      	adds	r2, #1
 8021880:	9245      	str	r2, [sp, #276]	; 0x114
 8021882:	6862      	ldr	r2, [r4, #4]
 8021884:	3301      	adds	r3, #1
 8021886:	3a01      	subs	r2, #1
 8021888:	6062      	str	r2, [r4, #4]
 802188a:	6023      	str	r3, [r4, #0]
 802188c:	e7ec      	b.n	8021868 <__ssvfiscanf_r+0x44>
 802188e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021890:	4621      	mov	r1, r4
 8021892:	4630      	mov	r0, r6
 8021894:	4798      	blx	r3
 8021896:	2800      	cmp	r0, #0
 8021898:	d0e9      	beq.n	802186e <__ssvfiscanf_r+0x4a>
 802189a:	e7ed      	b.n	8021878 <__ssvfiscanf_r+0x54>
 802189c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80218a0:	f040 8083 	bne.w	80219aa <__ssvfiscanf_r+0x186>
 80218a4:	9341      	str	r3, [sp, #260]	; 0x104
 80218a6:	9343      	str	r3, [sp, #268]	; 0x10c
 80218a8:	7853      	ldrb	r3, [r2, #1]
 80218aa:	2b2a      	cmp	r3, #42	; 0x2a
 80218ac:	bf02      	ittt	eq
 80218ae:	2310      	moveq	r3, #16
 80218b0:	1c95      	addeq	r5, r2, #2
 80218b2:	9341      	streq	r3, [sp, #260]	; 0x104
 80218b4:	220a      	movs	r2, #10
 80218b6:	46ab      	mov	fp, r5
 80218b8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80218bc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80218c0:	2b09      	cmp	r3, #9
 80218c2:	d91d      	bls.n	8021900 <__ssvfiscanf_r+0xdc>
 80218c4:	4891      	ldr	r0, [pc, #580]	; (8021b0c <__ssvfiscanf_r+0x2e8>)
 80218c6:	2203      	movs	r2, #3
 80218c8:	f7de fcca 	bl	8000260 <memchr>
 80218cc:	b140      	cbz	r0, 80218e0 <__ssvfiscanf_r+0xbc>
 80218ce:	2301      	movs	r3, #1
 80218d0:	eba0 0009 	sub.w	r0, r0, r9
 80218d4:	fa03 f000 	lsl.w	r0, r3, r0
 80218d8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80218da:	4318      	orrs	r0, r3
 80218dc:	9041      	str	r0, [sp, #260]	; 0x104
 80218de:	465d      	mov	r5, fp
 80218e0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80218e4:	2b78      	cmp	r3, #120	; 0x78
 80218e6:	d806      	bhi.n	80218f6 <__ssvfiscanf_r+0xd2>
 80218e8:	2b57      	cmp	r3, #87	; 0x57
 80218ea:	d810      	bhi.n	802190e <__ssvfiscanf_r+0xea>
 80218ec:	2b25      	cmp	r3, #37	; 0x25
 80218ee:	d05c      	beq.n	80219aa <__ssvfiscanf_r+0x186>
 80218f0:	d856      	bhi.n	80219a0 <__ssvfiscanf_r+0x17c>
 80218f2:	2b00      	cmp	r3, #0
 80218f4:	d074      	beq.n	80219e0 <__ssvfiscanf_r+0x1bc>
 80218f6:	2303      	movs	r3, #3
 80218f8:	9347      	str	r3, [sp, #284]	; 0x11c
 80218fa:	230a      	movs	r3, #10
 80218fc:	9342      	str	r3, [sp, #264]	; 0x108
 80218fe:	e081      	b.n	8021a04 <__ssvfiscanf_r+0x1e0>
 8021900:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8021902:	fb02 1303 	mla	r3, r2, r3, r1
 8021906:	3b30      	subs	r3, #48	; 0x30
 8021908:	9343      	str	r3, [sp, #268]	; 0x10c
 802190a:	465d      	mov	r5, fp
 802190c:	e7d3      	b.n	80218b6 <__ssvfiscanf_r+0x92>
 802190e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8021912:	2a20      	cmp	r2, #32
 8021914:	d8ef      	bhi.n	80218f6 <__ssvfiscanf_r+0xd2>
 8021916:	a101      	add	r1, pc, #4	; (adr r1, 802191c <__ssvfiscanf_r+0xf8>)
 8021918:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802191c:	080219ef 	.word	0x080219ef
 8021920:	080218f7 	.word	0x080218f7
 8021924:	080218f7 	.word	0x080218f7
 8021928:	08021a4d 	.word	0x08021a4d
 802192c:	080218f7 	.word	0x080218f7
 8021930:	080218f7 	.word	0x080218f7
 8021934:	080218f7 	.word	0x080218f7
 8021938:	080218f7 	.word	0x080218f7
 802193c:	080218f7 	.word	0x080218f7
 8021940:	080218f7 	.word	0x080218f7
 8021944:	080218f7 	.word	0x080218f7
 8021948:	08021a63 	.word	0x08021a63
 802194c:	08021a39 	.word	0x08021a39
 8021950:	080219a7 	.word	0x080219a7
 8021954:	080219a7 	.word	0x080219a7
 8021958:	080219a7 	.word	0x080219a7
 802195c:	080218f7 	.word	0x080218f7
 8021960:	08021a3d 	.word	0x08021a3d
 8021964:	080218f7 	.word	0x080218f7
 8021968:	080218f7 	.word	0x080218f7
 802196c:	080218f7 	.word	0x080218f7
 8021970:	080218f7 	.word	0x080218f7
 8021974:	08021a73 	.word	0x08021a73
 8021978:	08021a45 	.word	0x08021a45
 802197c:	080219e7 	.word	0x080219e7
 8021980:	080218f7 	.word	0x080218f7
 8021984:	080218f7 	.word	0x080218f7
 8021988:	08021a6f 	.word	0x08021a6f
 802198c:	080218f7 	.word	0x080218f7
 8021990:	08021a39 	.word	0x08021a39
 8021994:	080218f7 	.word	0x080218f7
 8021998:	080218f7 	.word	0x080218f7
 802199c:	080219ef 	.word	0x080219ef
 80219a0:	3b45      	subs	r3, #69	; 0x45
 80219a2:	2b02      	cmp	r3, #2
 80219a4:	d8a7      	bhi.n	80218f6 <__ssvfiscanf_r+0xd2>
 80219a6:	2305      	movs	r3, #5
 80219a8:	e02b      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 80219aa:	6863      	ldr	r3, [r4, #4]
 80219ac:	2b00      	cmp	r3, #0
 80219ae:	dd0d      	ble.n	80219cc <__ssvfiscanf_r+0x1a8>
 80219b0:	6823      	ldr	r3, [r4, #0]
 80219b2:	781a      	ldrb	r2, [r3, #0]
 80219b4:	4552      	cmp	r2, sl
 80219b6:	f040 80a1 	bne.w	8021afc <__ssvfiscanf_r+0x2d8>
 80219ba:	3301      	adds	r3, #1
 80219bc:	6862      	ldr	r2, [r4, #4]
 80219be:	6023      	str	r3, [r4, #0]
 80219c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80219c2:	3a01      	subs	r2, #1
 80219c4:	3301      	adds	r3, #1
 80219c6:	6062      	str	r2, [r4, #4]
 80219c8:	9345      	str	r3, [sp, #276]	; 0x114
 80219ca:	e755      	b.n	8021878 <__ssvfiscanf_r+0x54>
 80219cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80219ce:	4621      	mov	r1, r4
 80219d0:	4630      	mov	r0, r6
 80219d2:	4798      	blx	r3
 80219d4:	2800      	cmp	r0, #0
 80219d6:	d0eb      	beq.n	80219b0 <__ssvfiscanf_r+0x18c>
 80219d8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80219da:	2800      	cmp	r0, #0
 80219dc:	f040 8084 	bne.w	8021ae8 <__ssvfiscanf_r+0x2c4>
 80219e0:	f04f 30ff 	mov.w	r0, #4294967295
 80219e4:	e086      	b.n	8021af4 <__ssvfiscanf_r+0x2d0>
 80219e6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80219e8:	f042 0220 	orr.w	r2, r2, #32
 80219ec:	9241      	str	r2, [sp, #260]	; 0x104
 80219ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80219f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80219f4:	9241      	str	r2, [sp, #260]	; 0x104
 80219f6:	2210      	movs	r2, #16
 80219f8:	2b6f      	cmp	r3, #111	; 0x6f
 80219fa:	9242      	str	r2, [sp, #264]	; 0x108
 80219fc:	bf34      	ite	cc
 80219fe:	2303      	movcc	r3, #3
 8021a00:	2304      	movcs	r3, #4
 8021a02:	9347      	str	r3, [sp, #284]	; 0x11c
 8021a04:	6863      	ldr	r3, [r4, #4]
 8021a06:	2b00      	cmp	r3, #0
 8021a08:	dd41      	ble.n	8021a8e <__ssvfiscanf_r+0x26a>
 8021a0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021a0c:	0659      	lsls	r1, r3, #25
 8021a0e:	d404      	bmi.n	8021a1a <__ssvfiscanf_r+0x1f6>
 8021a10:	6823      	ldr	r3, [r4, #0]
 8021a12:	781a      	ldrb	r2, [r3, #0]
 8021a14:	5cba      	ldrb	r2, [r7, r2]
 8021a16:	0712      	lsls	r2, r2, #28
 8021a18:	d440      	bmi.n	8021a9c <__ssvfiscanf_r+0x278>
 8021a1a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8021a1c:	2b02      	cmp	r3, #2
 8021a1e:	dc4f      	bgt.n	8021ac0 <__ssvfiscanf_r+0x29c>
 8021a20:	466b      	mov	r3, sp
 8021a22:	4622      	mov	r2, r4
 8021a24:	a941      	add	r1, sp, #260	; 0x104
 8021a26:	4630      	mov	r0, r6
 8021a28:	f000 f874 	bl	8021b14 <_scanf_chars>
 8021a2c:	2801      	cmp	r0, #1
 8021a2e:	d065      	beq.n	8021afc <__ssvfiscanf_r+0x2d8>
 8021a30:	2802      	cmp	r0, #2
 8021a32:	f47f af21 	bne.w	8021878 <__ssvfiscanf_r+0x54>
 8021a36:	e7cf      	b.n	80219d8 <__ssvfiscanf_r+0x1b4>
 8021a38:	220a      	movs	r2, #10
 8021a3a:	e7dd      	b.n	80219f8 <__ssvfiscanf_r+0x1d4>
 8021a3c:	2300      	movs	r3, #0
 8021a3e:	9342      	str	r3, [sp, #264]	; 0x108
 8021a40:	2303      	movs	r3, #3
 8021a42:	e7de      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 8021a44:	2308      	movs	r3, #8
 8021a46:	9342      	str	r3, [sp, #264]	; 0x108
 8021a48:	2304      	movs	r3, #4
 8021a4a:	e7da      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 8021a4c:	4629      	mov	r1, r5
 8021a4e:	4640      	mov	r0, r8
 8021a50:	f000 f9ac 	bl	8021dac <__sccl>
 8021a54:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a5a:	9341      	str	r3, [sp, #260]	; 0x104
 8021a5c:	4605      	mov	r5, r0
 8021a5e:	2301      	movs	r3, #1
 8021a60:	e7cf      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 8021a62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8021a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a68:	9341      	str	r3, [sp, #260]	; 0x104
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	e7c9      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 8021a6e:	2302      	movs	r3, #2
 8021a70:	e7c7      	b.n	8021a02 <__ssvfiscanf_r+0x1de>
 8021a72:	9841      	ldr	r0, [sp, #260]	; 0x104
 8021a74:	06c3      	lsls	r3, r0, #27
 8021a76:	f53f aeff 	bmi.w	8021878 <__ssvfiscanf_r+0x54>
 8021a7a:	9b00      	ldr	r3, [sp, #0]
 8021a7c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021a7e:	1d19      	adds	r1, r3, #4
 8021a80:	9100      	str	r1, [sp, #0]
 8021a82:	681b      	ldr	r3, [r3, #0]
 8021a84:	07c0      	lsls	r0, r0, #31
 8021a86:	bf4c      	ite	mi
 8021a88:	801a      	strhmi	r2, [r3, #0]
 8021a8a:	601a      	strpl	r2, [r3, #0]
 8021a8c:	e6f4      	b.n	8021878 <__ssvfiscanf_r+0x54>
 8021a8e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021a90:	4621      	mov	r1, r4
 8021a92:	4630      	mov	r0, r6
 8021a94:	4798      	blx	r3
 8021a96:	2800      	cmp	r0, #0
 8021a98:	d0b7      	beq.n	8021a0a <__ssvfiscanf_r+0x1e6>
 8021a9a:	e79d      	b.n	80219d8 <__ssvfiscanf_r+0x1b4>
 8021a9c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8021a9e:	3201      	adds	r2, #1
 8021aa0:	9245      	str	r2, [sp, #276]	; 0x114
 8021aa2:	6862      	ldr	r2, [r4, #4]
 8021aa4:	3a01      	subs	r2, #1
 8021aa6:	2a00      	cmp	r2, #0
 8021aa8:	6062      	str	r2, [r4, #4]
 8021aaa:	dd02      	ble.n	8021ab2 <__ssvfiscanf_r+0x28e>
 8021aac:	3301      	adds	r3, #1
 8021aae:	6023      	str	r3, [r4, #0]
 8021ab0:	e7ae      	b.n	8021a10 <__ssvfiscanf_r+0x1ec>
 8021ab2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8021ab4:	4621      	mov	r1, r4
 8021ab6:	4630      	mov	r0, r6
 8021ab8:	4798      	blx	r3
 8021aba:	2800      	cmp	r0, #0
 8021abc:	d0a8      	beq.n	8021a10 <__ssvfiscanf_r+0x1ec>
 8021abe:	e78b      	b.n	80219d8 <__ssvfiscanf_r+0x1b4>
 8021ac0:	2b04      	cmp	r3, #4
 8021ac2:	dc06      	bgt.n	8021ad2 <__ssvfiscanf_r+0x2ae>
 8021ac4:	466b      	mov	r3, sp
 8021ac6:	4622      	mov	r2, r4
 8021ac8:	a941      	add	r1, sp, #260	; 0x104
 8021aca:	4630      	mov	r0, r6
 8021acc:	f000 f87a 	bl	8021bc4 <_scanf_i>
 8021ad0:	e7ac      	b.n	8021a2c <__ssvfiscanf_r+0x208>
 8021ad2:	4b0f      	ldr	r3, [pc, #60]	; (8021b10 <__ssvfiscanf_r+0x2ec>)
 8021ad4:	2b00      	cmp	r3, #0
 8021ad6:	f43f aecf 	beq.w	8021878 <__ssvfiscanf_r+0x54>
 8021ada:	466b      	mov	r3, sp
 8021adc:	4622      	mov	r2, r4
 8021ade:	a941      	add	r1, sp, #260	; 0x104
 8021ae0:	4630      	mov	r0, r6
 8021ae2:	f3af 8000 	nop.w
 8021ae6:	e7a1      	b.n	8021a2c <__ssvfiscanf_r+0x208>
 8021ae8:	89a3      	ldrh	r3, [r4, #12]
 8021aea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8021aee:	bf18      	it	ne
 8021af0:	f04f 30ff 	movne.w	r0, #4294967295
 8021af4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8021af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021afc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8021afe:	e7f9      	b.n	8021af4 <__ssvfiscanf_r+0x2d0>
 8021b00:	08021771 	.word	0x08021771
 8021b04:	080217eb 	.word	0x080217eb
 8021b08:	08027b29 	.word	0x08027b29
 8021b0c:	08027c39 	.word	0x08027c39
 8021b10:	00000000 	.word	0x00000000

08021b14 <_scanf_chars>:
 8021b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021b18:	4615      	mov	r5, r2
 8021b1a:	688a      	ldr	r2, [r1, #8]
 8021b1c:	4680      	mov	r8, r0
 8021b1e:	460c      	mov	r4, r1
 8021b20:	b932      	cbnz	r2, 8021b30 <_scanf_chars+0x1c>
 8021b22:	698a      	ldr	r2, [r1, #24]
 8021b24:	2a00      	cmp	r2, #0
 8021b26:	bf0c      	ite	eq
 8021b28:	2201      	moveq	r2, #1
 8021b2a:	f04f 32ff 	movne.w	r2, #4294967295
 8021b2e:	608a      	str	r2, [r1, #8]
 8021b30:	6822      	ldr	r2, [r4, #0]
 8021b32:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8021bc0 <_scanf_chars+0xac>
 8021b36:	06d1      	lsls	r1, r2, #27
 8021b38:	bf5f      	itttt	pl
 8021b3a:	681a      	ldrpl	r2, [r3, #0]
 8021b3c:	1d11      	addpl	r1, r2, #4
 8021b3e:	6019      	strpl	r1, [r3, #0]
 8021b40:	6816      	ldrpl	r6, [r2, #0]
 8021b42:	2700      	movs	r7, #0
 8021b44:	69a0      	ldr	r0, [r4, #24]
 8021b46:	b188      	cbz	r0, 8021b6c <_scanf_chars+0x58>
 8021b48:	2801      	cmp	r0, #1
 8021b4a:	d107      	bne.n	8021b5c <_scanf_chars+0x48>
 8021b4c:	682b      	ldr	r3, [r5, #0]
 8021b4e:	781a      	ldrb	r2, [r3, #0]
 8021b50:	6963      	ldr	r3, [r4, #20]
 8021b52:	5c9b      	ldrb	r3, [r3, r2]
 8021b54:	b953      	cbnz	r3, 8021b6c <_scanf_chars+0x58>
 8021b56:	bb27      	cbnz	r7, 8021ba2 <_scanf_chars+0x8e>
 8021b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021b5c:	2802      	cmp	r0, #2
 8021b5e:	d120      	bne.n	8021ba2 <_scanf_chars+0x8e>
 8021b60:	682b      	ldr	r3, [r5, #0]
 8021b62:	781b      	ldrb	r3, [r3, #0]
 8021b64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8021b68:	071b      	lsls	r3, r3, #28
 8021b6a:	d41a      	bmi.n	8021ba2 <_scanf_chars+0x8e>
 8021b6c:	6823      	ldr	r3, [r4, #0]
 8021b6e:	06da      	lsls	r2, r3, #27
 8021b70:	bf5e      	ittt	pl
 8021b72:	682b      	ldrpl	r3, [r5, #0]
 8021b74:	781b      	ldrbpl	r3, [r3, #0]
 8021b76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8021b7a:	682a      	ldr	r2, [r5, #0]
 8021b7c:	686b      	ldr	r3, [r5, #4]
 8021b7e:	3201      	adds	r2, #1
 8021b80:	602a      	str	r2, [r5, #0]
 8021b82:	68a2      	ldr	r2, [r4, #8]
 8021b84:	3b01      	subs	r3, #1
 8021b86:	3a01      	subs	r2, #1
 8021b88:	606b      	str	r3, [r5, #4]
 8021b8a:	3701      	adds	r7, #1
 8021b8c:	60a2      	str	r2, [r4, #8]
 8021b8e:	b142      	cbz	r2, 8021ba2 <_scanf_chars+0x8e>
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	dcd7      	bgt.n	8021b44 <_scanf_chars+0x30>
 8021b94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021b98:	4629      	mov	r1, r5
 8021b9a:	4640      	mov	r0, r8
 8021b9c:	4798      	blx	r3
 8021b9e:	2800      	cmp	r0, #0
 8021ba0:	d0d0      	beq.n	8021b44 <_scanf_chars+0x30>
 8021ba2:	6823      	ldr	r3, [r4, #0]
 8021ba4:	f013 0310 	ands.w	r3, r3, #16
 8021ba8:	d105      	bne.n	8021bb6 <_scanf_chars+0xa2>
 8021baa:	68e2      	ldr	r2, [r4, #12]
 8021bac:	3201      	adds	r2, #1
 8021bae:	60e2      	str	r2, [r4, #12]
 8021bb0:	69a2      	ldr	r2, [r4, #24]
 8021bb2:	b102      	cbz	r2, 8021bb6 <_scanf_chars+0xa2>
 8021bb4:	7033      	strb	r3, [r6, #0]
 8021bb6:	6923      	ldr	r3, [r4, #16]
 8021bb8:	441f      	add	r7, r3
 8021bba:	6127      	str	r7, [r4, #16]
 8021bbc:	2000      	movs	r0, #0
 8021bbe:	e7cb      	b.n	8021b58 <_scanf_chars+0x44>
 8021bc0:	08027b29 	.word	0x08027b29

08021bc4 <_scanf_i>:
 8021bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bc8:	4698      	mov	r8, r3
 8021bca:	4b74      	ldr	r3, [pc, #464]	; (8021d9c <_scanf_i+0x1d8>)
 8021bcc:	460c      	mov	r4, r1
 8021bce:	4682      	mov	sl, r0
 8021bd0:	4616      	mov	r6, r2
 8021bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8021bd6:	b087      	sub	sp, #28
 8021bd8:	ab03      	add	r3, sp, #12
 8021bda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8021bde:	4b70      	ldr	r3, [pc, #448]	; (8021da0 <_scanf_i+0x1dc>)
 8021be0:	69a1      	ldr	r1, [r4, #24]
 8021be2:	4a70      	ldr	r2, [pc, #448]	; (8021da4 <_scanf_i+0x1e0>)
 8021be4:	2903      	cmp	r1, #3
 8021be6:	bf18      	it	ne
 8021be8:	461a      	movne	r2, r3
 8021bea:	68a3      	ldr	r3, [r4, #8]
 8021bec:	9201      	str	r2, [sp, #4]
 8021bee:	1e5a      	subs	r2, r3, #1
 8021bf0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8021bf4:	bf88      	it	hi
 8021bf6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8021bfa:	4627      	mov	r7, r4
 8021bfc:	bf82      	ittt	hi
 8021bfe:	eb03 0905 	addhi.w	r9, r3, r5
 8021c02:	f240 135d 	movwhi	r3, #349	; 0x15d
 8021c06:	60a3      	strhi	r3, [r4, #8]
 8021c08:	f857 3b1c 	ldr.w	r3, [r7], #28
 8021c0c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8021c10:	bf98      	it	ls
 8021c12:	f04f 0900 	movls.w	r9, #0
 8021c16:	6023      	str	r3, [r4, #0]
 8021c18:	463d      	mov	r5, r7
 8021c1a:	f04f 0b00 	mov.w	fp, #0
 8021c1e:	6831      	ldr	r1, [r6, #0]
 8021c20:	ab03      	add	r3, sp, #12
 8021c22:	7809      	ldrb	r1, [r1, #0]
 8021c24:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8021c28:	2202      	movs	r2, #2
 8021c2a:	f7de fb19 	bl	8000260 <memchr>
 8021c2e:	b328      	cbz	r0, 8021c7c <_scanf_i+0xb8>
 8021c30:	f1bb 0f01 	cmp.w	fp, #1
 8021c34:	d159      	bne.n	8021cea <_scanf_i+0x126>
 8021c36:	6862      	ldr	r2, [r4, #4]
 8021c38:	b92a      	cbnz	r2, 8021c46 <_scanf_i+0x82>
 8021c3a:	6822      	ldr	r2, [r4, #0]
 8021c3c:	2308      	movs	r3, #8
 8021c3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8021c42:	6063      	str	r3, [r4, #4]
 8021c44:	6022      	str	r2, [r4, #0]
 8021c46:	6822      	ldr	r2, [r4, #0]
 8021c48:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8021c4c:	6022      	str	r2, [r4, #0]
 8021c4e:	68a2      	ldr	r2, [r4, #8]
 8021c50:	1e51      	subs	r1, r2, #1
 8021c52:	60a1      	str	r1, [r4, #8]
 8021c54:	b192      	cbz	r2, 8021c7c <_scanf_i+0xb8>
 8021c56:	6832      	ldr	r2, [r6, #0]
 8021c58:	1c51      	adds	r1, r2, #1
 8021c5a:	6031      	str	r1, [r6, #0]
 8021c5c:	7812      	ldrb	r2, [r2, #0]
 8021c5e:	f805 2b01 	strb.w	r2, [r5], #1
 8021c62:	6872      	ldr	r2, [r6, #4]
 8021c64:	3a01      	subs	r2, #1
 8021c66:	2a00      	cmp	r2, #0
 8021c68:	6072      	str	r2, [r6, #4]
 8021c6a:	dc07      	bgt.n	8021c7c <_scanf_i+0xb8>
 8021c6c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8021c70:	4631      	mov	r1, r6
 8021c72:	4650      	mov	r0, sl
 8021c74:	4790      	blx	r2
 8021c76:	2800      	cmp	r0, #0
 8021c78:	f040 8085 	bne.w	8021d86 <_scanf_i+0x1c2>
 8021c7c:	f10b 0b01 	add.w	fp, fp, #1
 8021c80:	f1bb 0f03 	cmp.w	fp, #3
 8021c84:	d1cb      	bne.n	8021c1e <_scanf_i+0x5a>
 8021c86:	6863      	ldr	r3, [r4, #4]
 8021c88:	b90b      	cbnz	r3, 8021c8e <_scanf_i+0xca>
 8021c8a:	230a      	movs	r3, #10
 8021c8c:	6063      	str	r3, [r4, #4]
 8021c8e:	6863      	ldr	r3, [r4, #4]
 8021c90:	4945      	ldr	r1, [pc, #276]	; (8021da8 <_scanf_i+0x1e4>)
 8021c92:	6960      	ldr	r0, [r4, #20]
 8021c94:	1ac9      	subs	r1, r1, r3
 8021c96:	f000 f889 	bl	8021dac <__sccl>
 8021c9a:	f04f 0b00 	mov.w	fp, #0
 8021c9e:	68a3      	ldr	r3, [r4, #8]
 8021ca0:	6822      	ldr	r2, [r4, #0]
 8021ca2:	2b00      	cmp	r3, #0
 8021ca4:	d03d      	beq.n	8021d22 <_scanf_i+0x15e>
 8021ca6:	6831      	ldr	r1, [r6, #0]
 8021ca8:	6960      	ldr	r0, [r4, #20]
 8021caa:	f891 c000 	ldrb.w	ip, [r1]
 8021cae:	f810 000c 	ldrb.w	r0, [r0, ip]
 8021cb2:	2800      	cmp	r0, #0
 8021cb4:	d035      	beq.n	8021d22 <_scanf_i+0x15e>
 8021cb6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8021cba:	d124      	bne.n	8021d06 <_scanf_i+0x142>
 8021cbc:	0510      	lsls	r0, r2, #20
 8021cbe:	d522      	bpl.n	8021d06 <_scanf_i+0x142>
 8021cc0:	f10b 0b01 	add.w	fp, fp, #1
 8021cc4:	f1b9 0f00 	cmp.w	r9, #0
 8021cc8:	d003      	beq.n	8021cd2 <_scanf_i+0x10e>
 8021cca:	3301      	adds	r3, #1
 8021ccc:	f109 39ff 	add.w	r9, r9, #4294967295
 8021cd0:	60a3      	str	r3, [r4, #8]
 8021cd2:	6873      	ldr	r3, [r6, #4]
 8021cd4:	3b01      	subs	r3, #1
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	6073      	str	r3, [r6, #4]
 8021cda:	dd1b      	ble.n	8021d14 <_scanf_i+0x150>
 8021cdc:	6833      	ldr	r3, [r6, #0]
 8021cde:	3301      	adds	r3, #1
 8021ce0:	6033      	str	r3, [r6, #0]
 8021ce2:	68a3      	ldr	r3, [r4, #8]
 8021ce4:	3b01      	subs	r3, #1
 8021ce6:	60a3      	str	r3, [r4, #8]
 8021ce8:	e7d9      	b.n	8021c9e <_scanf_i+0xda>
 8021cea:	f1bb 0f02 	cmp.w	fp, #2
 8021cee:	d1ae      	bne.n	8021c4e <_scanf_i+0x8a>
 8021cf0:	6822      	ldr	r2, [r4, #0]
 8021cf2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8021cf6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8021cfa:	d1bf      	bne.n	8021c7c <_scanf_i+0xb8>
 8021cfc:	2310      	movs	r3, #16
 8021cfe:	6063      	str	r3, [r4, #4]
 8021d00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8021d04:	e7a2      	b.n	8021c4c <_scanf_i+0x88>
 8021d06:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8021d0a:	6022      	str	r2, [r4, #0]
 8021d0c:	780b      	ldrb	r3, [r1, #0]
 8021d0e:	f805 3b01 	strb.w	r3, [r5], #1
 8021d12:	e7de      	b.n	8021cd2 <_scanf_i+0x10e>
 8021d14:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8021d18:	4631      	mov	r1, r6
 8021d1a:	4650      	mov	r0, sl
 8021d1c:	4798      	blx	r3
 8021d1e:	2800      	cmp	r0, #0
 8021d20:	d0df      	beq.n	8021ce2 <_scanf_i+0x11e>
 8021d22:	6823      	ldr	r3, [r4, #0]
 8021d24:	05d9      	lsls	r1, r3, #23
 8021d26:	d50d      	bpl.n	8021d44 <_scanf_i+0x180>
 8021d28:	42bd      	cmp	r5, r7
 8021d2a:	d909      	bls.n	8021d40 <_scanf_i+0x17c>
 8021d2c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8021d30:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8021d34:	4632      	mov	r2, r6
 8021d36:	4650      	mov	r0, sl
 8021d38:	4798      	blx	r3
 8021d3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8021d3e:	464d      	mov	r5, r9
 8021d40:	42bd      	cmp	r5, r7
 8021d42:	d028      	beq.n	8021d96 <_scanf_i+0x1d2>
 8021d44:	6822      	ldr	r2, [r4, #0]
 8021d46:	f012 0210 	ands.w	r2, r2, #16
 8021d4a:	d113      	bne.n	8021d74 <_scanf_i+0x1b0>
 8021d4c:	702a      	strb	r2, [r5, #0]
 8021d4e:	6863      	ldr	r3, [r4, #4]
 8021d50:	9e01      	ldr	r6, [sp, #4]
 8021d52:	4639      	mov	r1, r7
 8021d54:	4650      	mov	r0, sl
 8021d56:	47b0      	blx	r6
 8021d58:	f8d8 3000 	ldr.w	r3, [r8]
 8021d5c:	6821      	ldr	r1, [r4, #0]
 8021d5e:	1d1a      	adds	r2, r3, #4
 8021d60:	f8c8 2000 	str.w	r2, [r8]
 8021d64:	f011 0f20 	tst.w	r1, #32
 8021d68:	681b      	ldr	r3, [r3, #0]
 8021d6a:	d00f      	beq.n	8021d8c <_scanf_i+0x1c8>
 8021d6c:	6018      	str	r0, [r3, #0]
 8021d6e:	68e3      	ldr	r3, [r4, #12]
 8021d70:	3301      	adds	r3, #1
 8021d72:	60e3      	str	r3, [r4, #12]
 8021d74:	1bed      	subs	r5, r5, r7
 8021d76:	44ab      	add	fp, r5
 8021d78:	6925      	ldr	r5, [r4, #16]
 8021d7a:	445d      	add	r5, fp
 8021d7c:	6125      	str	r5, [r4, #16]
 8021d7e:	2000      	movs	r0, #0
 8021d80:	b007      	add	sp, #28
 8021d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d86:	f04f 0b00 	mov.w	fp, #0
 8021d8a:	e7ca      	b.n	8021d22 <_scanf_i+0x15e>
 8021d8c:	07ca      	lsls	r2, r1, #31
 8021d8e:	bf4c      	ite	mi
 8021d90:	8018      	strhmi	r0, [r3, #0]
 8021d92:	6018      	strpl	r0, [r3, #0]
 8021d94:	e7eb      	b.n	8021d6e <_scanf_i+0x1aa>
 8021d96:	2001      	movs	r0, #1
 8021d98:	e7f2      	b.n	8021d80 <_scanf_i+0x1bc>
 8021d9a:	bf00      	nop
 8021d9c:	08025150 	.word	0x08025150
 8021da0:	08020185 	.word	0x08020185
 8021da4:	08021f29 	.word	0x08021f29
 8021da8:	08027c7f 	.word	0x08027c7f

08021dac <__sccl>:
 8021dac:	b570      	push	{r4, r5, r6, lr}
 8021dae:	780b      	ldrb	r3, [r1, #0]
 8021db0:	4604      	mov	r4, r0
 8021db2:	2b5e      	cmp	r3, #94	; 0x5e
 8021db4:	bf0b      	itete	eq
 8021db6:	784b      	ldrbeq	r3, [r1, #1]
 8021db8:	1c48      	addne	r0, r1, #1
 8021dba:	1c88      	addeq	r0, r1, #2
 8021dbc:	2200      	movne	r2, #0
 8021dbe:	bf08      	it	eq
 8021dc0:	2201      	moveq	r2, #1
 8021dc2:	1e61      	subs	r1, r4, #1
 8021dc4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8021dc8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8021dcc:	42a9      	cmp	r1, r5
 8021dce:	d1fb      	bne.n	8021dc8 <__sccl+0x1c>
 8021dd0:	b90b      	cbnz	r3, 8021dd6 <__sccl+0x2a>
 8021dd2:	3801      	subs	r0, #1
 8021dd4:	bd70      	pop	{r4, r5, r6, pc}
 8021dd6:	f082 0101 	eor.w	r1, r2, #1
 8021dda:	54e1      	strb	r1, [r4, r3]
 8021ddc:	1c42      	adds	r2, r0, #1
 8021dde:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8021de2:	2d2d      	cmp	r5, #45	; 0x2d
 8021de4:	f102 36ff 	add.w	r6, r2, #4294967295
 8021de8:	4610      	mov	r0, r2
 8021dea:	d006      	beq.n	8021dfa <__sccl+0x4e>
 8021dec:	2d5d      	cmp	r5, #93	; 0x5d
 8021dee:	d0f1      	beq.n	8021dd4 <__sccl+0x28>
 8021df0:	b90d      	cbnz	r5, 8021df6 <__sccl+0x4a>
 8021df2:	4630      	mov	r0, r6
 8021df4:	e7ee      	b.n	8021dd4 <__sccl+0x28>
 8021df6:	462b      	mov	r3, r5
 8021df8:	e7ef      	b.n	8021dda <__sccl+0x2e>
 8021dfa:	7816      	ldrb	r6, [r2, #0]
 8021dfc:	2e5d      	cmp	r6, #93	; 0x5d
 8021dfe:	d0fa      	beq.n	8021df6 <__sccl+0x4a>
 8021e00:	42b3      	cmp	r3, r6
 8021e02:	dcf8      	bgt.n	8021df6 <__sccl+0x4a>
 8021e04:	4618      	mov	r0, r3
 8021e06:	3001      	adds	r0, #1
 8021e08:	4286      	cmp	r6, r0
 8021e0a:	5421      	strb	r1, [r4, r0]
 8021e0c:	dcfb      	bgt.n	8021e06 <__sccl+0x5a>
 8021e0e:	43d8      	mvns	r0, r3
 8021e10:	4430      	add	r0, r6
 8021e12:	1c5d      	adds	r5, r3, #1
 8021e14:	42b3      	cmp	r3, r6
 8021e16:	bfa8      	it	ge
 8021e18:	2000      	movge	r0, #0
 8021e1a:	182b      	adds	r3, r5, r0
 8021e1c:	3202      	adds	r2, #2
 8021e1e:	e7de      	b.n	8021dde <__sccl+0x32>

08021e20 <_strtol_l.isra.0>:
 8021e20:	2b01      	cmp	r3, #1
 8021e22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e26:	d001      	beq.n	8021e2c <_strtol_l.isra.0+0xc>
 8021e28:	2b24      	cmp	r3, #36	; 0x24
 8021e2a:	d906      	bls.n	8021e3a <_strtol_l.isra.0+0x1a>
 8021e2c:	f7fc fbc2 	bl	801e5b4 <__errno>
 8021e30:	2316      	movs	r3, #22
 8021e32:	6003      	str	r3, [r0, #0]
 8021e34:	2000      	movs	r0, #0
 8021e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e3a:	4f3a      	ldr	r7, [pc, #232]	; (8021f24 <_strtol_l.isra.0+0x104>)
 8021e3c:	468e      	mov	lr, r1
 8021e3e:	4676      	mov	r6, lr
 8021e40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021e44:	5de5      	ldrb	r5, [r4, r7]
 8021e46:	f015 0508 	ands.w	r5, r5, #8
 8021e4a:	d1f8      	bne.n	8021e3e <_strtol_l.isra.0+0x1e>
 8021e4c:	2c2d      	cmp	r4, #45	; 0x2d
 8021e4e:	d134      	bne.n	8021eba <_strtol_l.isra.0+0x9a>
 8021e50:	f89e 4000 	ldrb.w	r4, [lr]
 8021e54:	f04f 0801 	mov.w	r8, #1
 8021e58:	f106 0e02 	add.w	lr, r6, #2
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d05c      	beq.n	8021f1a <_strtol_l.isra.0+0xfa>
 8021e60:	2b10      	cmp	r3, #16
 8021e62:	d10c      	bne.n	8021e7e <_strtol_l.isra.0+0x5e>
 8021e64:	2c30      	cmp	r4, #48	; 0x30
 8021e66:	d10a      	bne.n	8021e7e <_strtol_l.isra.0+0x5e>
 8021e68:	f89e 4000 	ldrb.w	r4, [lr]
 8021e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021e70:	2c58      	cmp	r4, #88	; 0x58
 8021e72:	d14d      	bne.n	8021f10 <_strtol_l.isra.0+0xf0>
 8021e74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021e78:	2310      	movs	r3, #16
 8021e7a:	f10e 0e02 	add.w	lr, lr, #2
 8021e7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021e82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021e86:	2600      	movs	r6, #0
 8021e88:	fbbc f9f3 	udiv	r9, ip, r3
 8021e8c:	4635      	mov	r5, r6
 8021e8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8021e92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021e96:	2f09      	cmp	r7, #9
 8021e98:	d818      	bhi.n	8021ecc <_strtol_l.isra.0+0xac>
 8021e9a:	463c      	mov	r4, r7
 8021e9c:	42a3      	cmp	r3, r4
 8021e9e:	dd24      	ble.n	8021eea <_strtol_l.isra.0+0xca>
 8021ea0:	2e00      	cmp	r6, #0
 8021ea2:	db1f      	blt.n	8021ee4 <_strtol_l.isra.0+0xc4>
 8021ea4:	45a9      	cmp	r9, r5
 8021ea6:	d31d      	bcc.n	8021ee4 <_strtol_l.isra.0+0xc4>
 8021ea8:	d101      	bne.n	8021eae <_strtol_l.isra.0+0x8e>
 8021eaa:	45a2      	cmp	sl, r4
 8021eac:	db1a      	blt.n	8021ee4 <_strtol_l.isra.0+0xc4>
 8021eae:	fb05 4503 	mla	r5, r5, r3, r4
 8021eb2:	2601      	movs	r6, #1
 8021eb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021eb8:	e7eb      	b.n	8021e92 <_strtol_l.isra.0+0x72>
 8021eba:	2c2b      	cmp	r4, #43	; 0x2b
 8021ebc:	bf08      	it	eq
 8021ebe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021ec2:	46a8      	mov	r8, r5
 8021ec4:	bf08      	it	eq
 8021ec6:	f106 0e02 	addeq.w	lr, r6, #2
 8021eca:	e7c7      	b.n	8021e5c <_strtol_l.isra.0+0x3c>
 8021ecc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021ed0:	2f19      	cmp	r7, #25
 8021ed2:	d801      	bhi.n	8021ed8 <_strtol_l.isra.0+0xb8>
 8021ed4:	3c37      	subs	r4, #55	; 0x37
 8021ed6:	e7e1      	b.n	8021e9c <_strtol_l.isra.0+0x7c>
 8021ed8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021edc:	2f19      	cmp	r7, #25
 8021ede:	d804      	bhi.n	8021eea <_strtol_l.isra.0+0xca>
 8021ee0:	3c57      	subs	r4, #87	; 0x57
 8021ee2:	e7db      	b.n	8021e9c <_strtol_l.isra.0+0x7c>
 8021ee4:	f04f 36ff 	mov.w	r6, #4294967295
 8021ee8:	e7e4      	b.n	8021eb4 <_strtol_l.isra.0+0x94>
 8021eea:	2e00      	cmp	r6, #0
 8021eec:	da05      	bge.n	8021efa <_strtol_l.isra.0+0xda>
 8021eee:	2322      	movs	r3, #34	; 0x22
 8021ef0:	6003      	str	r3, [r0, #0]
 8021ef2:	4665      	mov	r5, ip
 8021ef4:	b942      	cbnz	r2, 8021f08 <_strtol_l.isra.0+0xe8>
 8021ef6:	4628      	mov	r0, r5
 8021ef8:	e79d      	b.n	8021e36 <_strtol_l.isra.0+0x16>
 8021efa:	f1b8 0f00 	cmp.w	r8, #0
 8021efe:	d000      	beq.n	8021f02 <_strtol_l.isra.0+0xe2>
 8021f00:	426d      	negs	r5, r5
 8021f02:	2a00      	cmp	r2, #0
 8021f04:	d0f7      	beq.n	8021ef6 <_strtol_l.isra.0+0xd6>
 8021f06:	b10e      	cbz	r6, 8021f0c <_strtol_l.isra.0+0xec>
 8021f08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8021f0c:	6011      	str	r1, [r2, #0]
 8021f0e:	e7f2      	b.n	8021ef6 <_strtol_l.isra.0+0xd6>
 8021f10:	2430      	movs	r4, #48	; 0x30
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d1b3      	bne.n	8021e7e <_strtol_l.isra.0+0x5e>
 8021f16:	2308      	movs	r3, #8
 8021f18:	e7b1      	b.n	8021e7e <_strtol_l.isra.0+0x5e>
 8021f1a:	2c30      	cmp	r4, #48	; 0x30
 8021f1c:	d0a4      	beq.n	8021e68 <_strtol_l.isra.0+0x48>
 8021f1e:	230a      	movs	r3, #10
 8021f20:	e7ad      	b.n	8021e7e <_strtol_l.isra.0+0x5e>
 8021f22:	bf00      	nop
 8021f24:	08027b29 	.word	0x08027b29

08021f28 <_strtol_r>:
 8021f28:	f7ff bf7a 	b.w	8021e20 <_strtol_l.isra.0>

08021f2c <__submore>:
 8021f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f30:	460c      	mov	r4, r1
 8021f32:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8021f34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021f38:	4299      	cmp	r1, r3
 8021f3a:	d11d      	bne.n	8021f78 <__submore+0x4c>
 8021f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8021f40:	f7fd f97e 	bl	801f240 <_malloc_r>
 8021f44:	b918      	cbnz	r0, 8021f4e <__submore+0x22>
 8021f46:	f04f 30ff 	mov.w	r0, #4294967295
 8021f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f52:	63a3      	str	r3, [r4, #56]	; 0x38
 8021f54:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8021f58:	6360      	str	r0, [r4, #52]	; 0x34
 8021f5a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8021f5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8021f62:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8021f66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8021f6a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8021f6e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8021f72:	6020      	str	r0, [r4, #0]
 8021f74:	2000      	movs	r0, #0
 8021f76:	e7e8      	b.n	8021f4a <__submore+0x1e>
 8021f78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8021f7a:	0077      	lsls	r7, r6, #1
 8021f7c:	463a      	mov	r2, r7
 8021f7e:	f7fe fe77 	bl	8020c70 <_realloc_r>
 8021f82:	4605      	mov	r5, r0
 8021f84:	2800      	cmp	r0, #0
 8021f86:	d0de      	beq.n	8021f46 <__submore+0x1a>
 8021f88:	eb00 0806 	add.w	r8, r0, r6
 8021f8c:	4601      	mov	r1, r0
 8021f8e:	4632      	mov	r2, r6
 8021f90:	4640      	mov	r0, r8
 8021f92:	f7fd f8df 	bl	801f154 <memcpy>
 8021f96:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8021f9a:	f8c4 8000 	str.w	r8, [r4]
 8021f9e:	e7e9      	b.n	8021f74 <__submore+0x48>

08021fa0 <_init>:
 8021fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fa2:	bf00      	nop
 8021fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021fa6:	bc08      	pop	{r3}
 8021fa8:	469e      	mov	lr, r3
 8021faa:	4770      	bx	lr

08021fac <_fini>:
 8021fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fae:	bf00      	nop
 8021fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021fb2:	bc08      	pop	{r3}
 8021fb4:	469e      	mov	lr, r3
 8021fb6:	4770      	bx	lr

08021fb8 <__time_veneer>:
 8021fb8:	e51ff004 	ldr	pc, [pc, #-4]	; 8021fbc <__time_veneer+0x4>
 8021fbc:	200005c4 	.word	0x200005c4
