
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000207c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005360  080209a0  080209a0  000309a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025d00  08025d00  0004033c  2**0
                  CONTENTS
  4 .ARM          00000008  08025d00  08025d00  00035d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025d08  08025d08  0004033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  08025d08  08025d08  00035d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  08025d18  08025d18  00035d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08025d28  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  2000033c  08026064  0004033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da8  08026064  00040da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00066eb6  00000000  00000000  0004036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c011  00000000  00000000  000a7222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004100  00000000  00000000  000b3238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ee0  00000000  00000000  000b7338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d750  00000000  00000000  000bb218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c295  00000000  00000000  000e8968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f3b3  00000000  00000000  00114bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00223fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00013a48  00000000  00000000  00224004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000033c 	.word	0x2000033c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08020980 	.word	0x08020980

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000340 	.word	0x20000340
 800021c:	08020980 	.word	0x08020980

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fed3 	bl	800192c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fc16 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbe8 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 faee 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fb05 	bl	800127e <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fe01 	bl	80028ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003fc 	.word	0x200003fc

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd4e 	bl	800179c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f01c f932 	bl	801cfd4 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f01c f88a 	bl	801cfd4 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	20000da8 	.word	0x20000da8

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f01c fc61 	bl	801d810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fe51 	bl	8003bf4 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f60:	08025d28 	.word	0x08025d28
  ldr r2, =_sbss
 8000f64:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f68:	20000da8 	.word	0x20000da8

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f95b 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f966 	bl	800129a <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f932 	bl	800124a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000d94 	.word	0x20000d94
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000d94 	.word	0x20000d94

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff ffee 	bl	8001038 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001068:	d004      	beq.n	8001074 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_Delay+0x40>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001074:	bf00      	nop
 8001076:	f7ff ffdf 	bl	8001038 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	68fa      	ldr	r2, [r7, #12]
 8001082:	429a      	cmp	r2, r3
 8001084:	d8f7      	bhi.n	8001076 <HAL_Delay+0x26>
  {
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	2000000c 	.word	0x2000000c

08001094 <__NVIC_SetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a4:	4b0c      	ldr	r3, [pc, #48]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b0:	4013      	ands	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c6:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	60d3      	str	r3, [r2, #12]
}
 80010cc:	bf00      	nop
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_GetPriorityGrouping>:
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <__NVIC_GetPriorityGrouping+0x18>)
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	f003 0307 	and.w	r3, r3, #7
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_EnableIRQ>:
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	2b00      	cmp	r3, #0
 8001108:	db0b      	blt.n	8001122 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 021f 	and.w	r2, r3, #31
 8001110:	4907      	ldr	r1, [pc, #28]	; (8001130 <__NVIC_EnableIRQ+0x38>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	095b      	lsrs	r3, r3, #5
 8001118:	2001      	movs	r0, #1
 800111a:	fa00 f202 	lsl.w	r2, r0, r2
 800111e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
	...

080011f0 <SysTick_Config>:
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff8e 	bl	8001134 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff29 	bl	8001094 <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff40 	bl	80010dc <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff90 	bl	8001188 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5f 	bl	8001134 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff33 	bl	80010f8 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa4 	bl	80011f0 <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d005      	beq.n	80012d6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2204      	movs	r2, #4
 80012ce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e037      	b.n	8001346 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 020e 	bic.w	r2, r2, #14
 80012e4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0201 	bic.w	r2, r2, #1
 8001304:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f003 021f 	and.w	r2, r3, #31
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001322:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00c      	beq.n	8001346 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001336:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001344:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d00d      	beq.n	8001398 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	73fb      	strb	r3, [r7, #15]
 8001396:	e047      	b.n	8001428 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 020e 	bic.w	r2, r2, #14
 80013a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f202 	lsl.w	r2, r1, r2
 80013da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00c      	beq.n	8001408 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001406:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
    }
  }
  return status;
 8001428:	7bfb      	ldrb	r3, [r7, #15]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	e15a      	b.n	80016fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa01 f303 	lsl.w	r3, r1, r3
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 814c 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d00b      	beq.n	800147c <HAL_GPIO_Init+0x48>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001470:	2b11      	cmp	r3, #17
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b12      	cmp	r3, #18
 800147a:	d130      	bne.n	80014de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68da      	ldr	r2, [r3, #12]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014b2:	2201      	movs	r2, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	091b      	lsrs	r3, r3, #4
 80014c8:	f003 0201 	and.w	r2, r3, #1
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	2203      	movs	r2, #3
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b02      	cmp	r3, #2
 8001514:	d003      	beq.n	800151e <HAL_GPIO_Init+0xea>
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43db      	mvns	r3, r3
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	f003 0307 	and.w	r3, r3, #7
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0203 	and.w	r2, r3, #3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ac:	4a5a      	ldr	r2, [pc, #360]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6613      	str	r3, [r2, #96]	; 0x60
 80015b4:	4b58      	ldr	r3, [pc, #352]	; (8001718 <HAL_GPIO_Init+0x2e4>)
 80015b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015c0:	4a56      	ldr	r2, [pc, #344]	; (800171c <HAL_GPIO_Init+0x2e8>)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	089b      	lsrs	r3, r3, #2
 80015c6:	3302      	adds	r3, #2
 80015c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	220f      	movs	r2, #15
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4013      	ands	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015ea:	d01f      	beq.n	800162c <HAL_GPIO_Init+0x1f8>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a4c      	ldr	r2, [pc, #304]	; (8001720 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d019      	beq.n	8001628 <HAL_GPIO_Init+0x1f4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a4b      	ldr	r2, [pc, #300]	; (8001724 <HAL_GPIO_Init+0x2f0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d013      	beq.n	8001624 <HAL_GPIO_Init+0x1f0>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_GPIO_Init+0x2f4>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1ec>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a49      	ldr	r2, [pc, #292]	; (800172c <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1e8>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a48      	ldr	r2, [pc, #288]	; (8001730 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1e4>
 8001614:	2305      	movs	r3, #5
 8001616:	e00a      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001618:	2306      	movs	r3, #6
 800161a:	e008      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800161c:	2304      	movs	r3, #4
 800161e:	e006      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001620:	2303      	movs	r3, #3
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001624:	2302      	movs	r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1fa>
 800162c:	2300      	movs	r3, #0
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_GPIO_Init+0x2e8>)
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_GPIO_Init+0x300>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001670:	4a30      	ldr	r2, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001676:	4b2f      	ldr	r3, [pc, #188]	; (8001734 <HAL_GPIO_Init+0x300>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800169a:	4a26      	ldr	r2, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016a0:	4b24      	ldr	r3, [pc, #144]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4013      	ands	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c4:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	4013      	ands	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ee:	4a11      	ldr	r2, [pc, #68]	; (8001734 <HAL_GPIO_Init+0x300>)
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	3301      	adds	r3, #1
 80016f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	f47f ae9d 	bne.w	8001444 <HAL_GPIO_Init+0x10>
  }
}
 800170a:	bf00      	nop
 800170c:	bf00      	nop
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000
 800171c:	40010000 	.word	0x40010000
 8001720:	48000400 	.word	0x48000400
 8001724:	48000800 	.word	0x48000800
 8001728:	48000c00 	.word	0x48000c00
 800172c:	48001000 	.word	0x48001000
 8001730:	48001400 	.word	0x48001400
 8001734:	40010400 	.word	0x40010400

08001738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	807b      	strh	r3, [r7, #2]
 8001744:	4613      	mov	r3, r2
 8001746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001748:	787b      	ldrb	r3, [r7, #1]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174e:	887a      	ldrh	r2, [r7, #2]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001754:	e002      	b.n	800175c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001756:	887a      	ldrh	r2, [r7, #2]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4013      	ands	r3, r2
 8001780:	041a      	lsls	r2, r3, #16
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	43d9      	mvns	r1, r3
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	4013      	ands	r3, r2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d006      	beq.n	80017c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f806 	bl	80017cc <HAL_GPIO_EXTI_Callback>
  }
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d141      	bne.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017f2:	4b4b      	ldr	r3, [pc, #300]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017fe:	d131      	bne.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001800:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001802:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001806:	4a46      	ldr	r2, [pc, #280]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001810:	4b43      	ldr	r3, [pc, #268]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001818:	4a41      	ldr	r2, [pc, #260]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800181e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2232      	movs	r2, #50	; 0x32
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800182c:	fba2 2303 	umull	r2, r3, r2, r3
 8001830:	0c9b      	lsrs	r3, r3, #18
 8001832:	3301      	adds	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001836:	e002      	b.n	800183e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	3b01      	subs	r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800184a:	d102      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f2      	bne.n	8001838 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d158      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e057      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001864:	4b2e      	ldr	r3, [pc, #184]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800186a:	4a2d      	ldr	r2, [pc, #180]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800186c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001870:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001874:	e04d      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800187c:	d141      	bne.n	8001902 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d131      	bne.n	80018f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800188c:	4b24      	ldr	r3, [pc, #144]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001892:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800189c:	4b20      	ldr	r3, [pc, #128]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a4:	4a1e      	ldr	r2, [pc, #120]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2232      	movs	r2, #50	; 0x32
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	4a1c      	ldr	r2, [pc, #112]	; (8001928 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9b      	lsrs	r3, r3, #18
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c2:	e002      	b.n	80018ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d6:	d102      	bne.n	80018de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f2      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d112      	bne.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e011      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001900:	e007      	b.n	8001912 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001910:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40007000 	.word	0x40007000
 8001924:	20000004 	.word	0x20000004
 8001928:	431bde83 	.word	0x431bde83

0800192c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193a:	6093      	str	r3, [r2, #8]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40007000 	.word	0x40007000

0800194c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e308      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800196a:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001974:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	f003 0303 	and.w	r3, r3, #3
 800197c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	2b0c      	cmp	r3, #12
 8001982:	d102      	bne.n	800198a <HAL_RCC_OscConfig+0x3e>
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d002      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e2e3      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a90      	ldr	r2, [pc, #576]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b8b      	ldr	r3, [pc, #556]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b88      	ldr	r3, [pc, #544]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a87      	ldr	r2, [pc, #540]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b84      	ldr	r3, [pc, #528]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a83      	ldr	r2, [pc, #524]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b81      	ldr	r3, [pc, #516]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a80      	ldr	r2, [pc, #512]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a04:	f7ff fb18 	bl	8001038 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fb14 	bl	8001038 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e2a8      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a1e:	4b76      	ldr	r3, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fb04 	bl	8001038 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fb00 	bl	8001038 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e294      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a46:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d075      	beq.n	8001b4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a62:	4b65      	ldr	r3, [pc, #404]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a6c:	4b62      	ldr	r3, [pc, #392]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d102      	bne.n	8001a82 <HAL_RCC_OscConfig+0x136>
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_OscConfig+0x13c>
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d11f      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a88:	4b5b      	ldr	r3, [pc, #364]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x154>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e267      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa0:	4b55      	ldr	r3, [pc, #340]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	061b      	lsls	r3, r3, #24
 8001aae:	4952      	ldr	r1, [pc, #328]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x2b0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff fa71 	bl	8000fa0 <HAL_InitTick>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d043      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e253      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff faac 	bl	8001038 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae4:	f7ff faa8 	bl	8001038 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e23c      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001af6:	4b40      	ldr	r3, [pc, #256]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	061b      	lsls	r3, r3, #24
 8001b10:	4939      	ldr	r1, [pc, #228]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	604b      	str	r3, [r1, #4]
 8001b16:	e01a      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b18:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a36      	ldr	r2, [pc, #216]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa88 	bl	8001038 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa84 	bl	8001038 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e218      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b3e:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f0      	bne.n	8001b2c <HAL_RCC_OscConfig+0x1e0>
 8001b4a:	e000      	b.n	8001b4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d01c      	beq.n	8001b9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	4b25      	ldr	r3, [pc, #148]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fa61 	bl	8001038 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fa5d 	bl	8001038 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1f1      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0ef      	beq.n	8001b7a <HAL_RCC_OscConfig+0x22e>
 8001b9a:	e01b      	b.n	8001bd4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa44 	bl	8001038 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa40 	bl	8001038 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e1d4      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001bc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1ef      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80ab 	beq.w	8001d38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001be6:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <HAL_RCC_OscConfig+0x2b4>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	2300      	movs	r3, #0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00d      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	4aae      	ldr	r2, [pc, #696]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6593      	str	r3, [r2, #88]	; 0x58
 8001c12:	4bac      	ldr	r3, [pc, #688]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c22:	4ba9      	ldr	r3, [pc, #676]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d118      	bne.n	8001c60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c2e:	4ba6      	ldr	r3, [pc, #664]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4aa5      	ldr	r2, [pc, #660]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff f9fd 	bl	8001038 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c42:	f7ff f9f9 	bl	8001038 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e18d      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c54:	4b9c      	ldr	r3, [pc, #624]	; (8001ec8 <HAL_RCC_OscConfig+0x57c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d108      	bne.n	8001c7a <HAL_RCC_OscConfig+0x32e>
 8001c68:	4b96      	ldr	r3, [pc, #600]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c6e:	4a95      	ldr	r2, [pc, #596]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c70:	f043 0301 	orr.w	r3, r3, #1
 8001c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c78:	e024      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d110      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x358>
 8001c82:	4b90      	ldr	r3, [pc, #576]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a8a      	ldr	r2, [pc, #552]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ca2:	e00f      	b.n	8001cc4 <HAL_RCC_OscConfig+0x378>
 8001ca4:	4b87      	ldr	r3, [pc, #540]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	4a86      	ldr	r2, [pc, #536]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	f023 0304 	bic.w	r3, r3, #4
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d016      	beq.n	8001cfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f9b4 	bl	8001038 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cd2:	e00a      	b.n	8001cea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cd4:	f7ff f9b0 	bl	8001038 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e142      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cea:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0ed      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x388>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f99d 	bl	8001038 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff f999 	bl	8001038 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e12b      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d18:	4b6a      	ldr	r3, [pc, #424]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1ed      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d26:	7ffb      	ldrb	r3, [r7, #31]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d105      	bne.n	8001d38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0320 	and.w	r3, r3, #32
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d03c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d01c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d4c:	4b5d      	ldr	r3, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d52:	4a5c      	ldr	r2, [pc, #368]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5c:	f7ff f96c 	bl	8001038 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d64:	f7ff f968 	bl	8001038 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e0fc      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d76:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0ef      	beq.n	8001d64 <HAL_RCC_OscConfig+0x418>
 8001d84:	e01b      	b.n	8001dbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d86:	4b4f      	ldr	r3, [pc, #316]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8c:	4a4d      	ldr	r2, [pc, #308]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d96:	f7ff f94f 	bl	8001038 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9e:	f7ff f94b 	bl	8001038 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e0df      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1ef      	bne.n	8001d9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 80d3 	beq.w	8001f6e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f000 808d 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d15a      	bne.n	8001e94 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f925 	bl	8001038 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df2:	f7ff f921 	bl	8001038 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0b5      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1f0      	bne.n	8001df2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x580>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6a11      	ldr	r1, [r2, #32]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e20:	3a01      	subs	r2, #1
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	4311      	orrs	r1, r2
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e2a:	0212      	lsls	r2, r2, #8
 8001e2c:	4311      	orrs	r1, r2
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e32:	0852      	lsrs	r2, r2, #1
 8001e34:	3a01      	subs	r2, #1
 8001e36:	0552      	lsls	r2, r2, #21
 8001e38:	4311      	orrs	r1, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e3e:	0852      	lsrs	r2, r2, #1
 8001e40:	3a01      	subs	r2, #1
 8001e42:	0652      	lsls	r2, r2, #25
 8001e44:	4311      	orrs	r1, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e4a:	06d2      	lsls	r2, r2, #27
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	491d      	ldr	r1, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e54:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f8e4 	bl	8001038 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7ff f8e0 	bl	8001038 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e074      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x528>
 8001e92:	e06c      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ea0:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0303 	bic.w	r3, r3, #3
 8001eaa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff f8bc 	bl	8001038 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec2:	e00e      	b.n	8001ee2 <HAL_RCC_OscConfig+0x596>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed0:	f7ff f8b2 	bl	8001038 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e046      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x584>
 8001eee:	e03e      	b.n	8001f6e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e039      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_RCC_OscConfig+0x62c>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d12c      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d123      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11b      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d113      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f60:	085b      	lsrs	r3, r3, #1
 8001f62:	3b01      	subs	r3, #1
 8001f64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e11e      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b8e      	ldr	r3, [pc, #568]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	498c      	ldr	r1, [pc, #560]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e106      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d073      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d129      	bne.n	800202c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fd8:	4b81      	ldr	r3, [pc, #516]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0f4      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001fe8:	f000 f99e 	bl	8002328 <RCC_GetSysClockFreqFromPLLSource>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	4a7c      	ldr	r2, [pc, #496]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d93f      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ff6:	4b7a      	ldr	r3, [pc, #488]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800200a:	2b00      	cmp	r3, #0
 800200c:	d033      	beq.n	8002076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002012:	2b00      	cmp	r3, #0
 8002014:	d12f      	bne.n	8002076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800201e:	4a70      	ldr	r2, [pc, #448]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002026:	2380      	movs	r3, #128	; 0x80
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e024      	b.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b02      	cmp	r3, #2
 8002032:	d107      	bne.n	8002044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002034:	4b6a      	ldr	r3, [pc, #424]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d109      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0c6      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002044:	4b66      	ldr	r3, [pc, #408]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0be      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002054:	f000 f8ce 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 8002058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a61      	ldr	r2, [pc, #388]	; (80021e4 <HAL_RCC_ClockConfig+0x268>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d909      	bls.n	8002076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002062:	4b5f      	ldr	r3, [pc, #380]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800206a:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 800206c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002072:	2380      	movs	r3, #128	; 0x80
 8002074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002076:	4b5a      	ldr	r3, [pc, #360]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 0203 	bic.w	r2, r3, #3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4957      	ldr	r1, [pc, #348]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002088:	f7fe ffd6 	bl	8001038 <HAL_GetTick>
 800208c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	e00a      	b.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002090:	f7fe ffd2 	bl	8001038 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	f241 3288 	movw	r2, #5000	; 0x1388
 800209e:	4293      	cmp	r3, r2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e095      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 020c 	and.w	r2, r3, #12
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d1eb      	bne.n	8002090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d023      	beq.n	800210c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020d0:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	4a42      	ldr	r2, [pc, #264]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0308 	and.w	r3, r3, #8
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80020f0:	4a3b      	ldr	r2, [pc, #236]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f8:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	4936      	ldr	r1, [pc, #216]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002106:	4313      	orrs	r3, r2
 8002108:	608b      	str	r3, [r1, #8]
 800210a:	e008      	b.n	800211e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b80      	cmp	r3, #128	; 0x80
 8002110:	d105      	bne.n	800211e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002112:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	4a32      	ldr	r2, [pc, #200]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800211c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800211e:	4b2f      	ldr	r3, [pc, #188]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d21d      	bcs.n	8002168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 020f 	bic.w	r2, r3, #15
 8002134:	4929      	ldr	r1, [pc, #164]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800213c:	f7fe ff7c 	bl	8001038 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7fe ff78 	bl	8001038 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e03b      	b.n	80021d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b20      	ldr	r3, [pc, #128]	; (80021dc <HAL_RCC_ClockConfig+0x260>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d1ed      	bne.n	8002144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d008      	beq.n	8002186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002174:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	4917      	ldr	r1, [pc, #92]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	490f      	ldr	r1, [pc, #60]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021a6:	f000 f825 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80021aa:	4602      	mov	r2, r0
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCC_ClockConfig+0x264>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	490c      	ldr	r1, [pc, #48]	; (80021e8 <HAL_RCC_ClockConfig+0x26c>)
 80021b8:	5ccb      	ldrb	r3, [r1, r3]
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	fa22 f303 	lsr.w	r3, r2, r3
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x270>)
 80021c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_RCC_ClockConfig+0x274>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe fee8 	bl	8000fa0 <HAL_InitTick>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000
 80021e0:	40021000 	.word	0x40021000
 80021e4:	04c4b400 	.word	0x04c4b400
 80021e8:	0802376c 	.word	0x0802376c
 80021ec:	20000004 	.word	0x20000004
 80021f0:	20000008 	.word	0x20000008

080021f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b04      	cmp	r3, #4
 8002204:	d102      	bne.n	800220c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	e047      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b08      	cmp	r3, #8
 8002216:	d102      	bne.n	800221e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002218:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	e03e      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800221e:	4b23      	ldr	r3, [pc, #140]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b0c      	cmp	r3, #12
 8002228:	d136      	bne.n	8002298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3301      	adds	r3, #1
 8002240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d10c      	bne.n	8002262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8002252:	68d2      	ldr	r2, [r2, #12]
 8002254:	0a12      	lsrs	r2, r2, #8
 8002256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800225a:	fb02 f303 	mul.w	r3, r2, r3
 800225e:	617b      	str	r3, [r7, #20]
      break;
 8002260:	e00c      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002262:	4a13      	ldr	r2, [pc, #76]	; (80022b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	fbb2 f3f3 	udiv	r3, r2, r3
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800226c:	68d2      	ldr	r2, [r2, #12]
 800226e:	0a12      	lsrs	r2, r2, #8
 8002270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002274:	fb02 f303 	mul.w	r3, r2, r3
 8002278:	617b      	str	r3, [r7, #20]
      break;
 800227a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	0e5b      	lsrs	r3, r3, #25
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	3301      	adds	r3, #1
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	fbb2 f3f3 	udiv	r3, r2, r3
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	e001      	b.n	800229c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800229c:	693b      	ldr	r3, [r7, #16]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	00f42400 	.word	0x00f42400
 80022b4:	016e3600 	.word	0x016e3600

080022b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <HAL_RCC_GetHCLKFreq+0x14>)
 80022be:	681b      	ldr	r3, [r3, #0]
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	20000004 	.word	0x20000004

080022d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022d4:	f7ff fff0 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 80022d8:	4602      	mov	r2, r0
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	4904      	ldr	r1, [pc, #16]	; (80022f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022e6:	5ccb      	ldrb	r3, [r1, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	0802377c 	.word	0x0802377c

080022fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002300:	f7ff ffda 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0adb      	lsrs	r3, r3, #11
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	0802377c 	.word	0x0802377c

08002328 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800232e:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d10c      	bne.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800234c:	4a17      	ldr	r2, [pc, #92]	; (80023ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	fbb2 f3f3 	udiv	r3, r2, r3
 8002354:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002356:	68d2      	ldr	r2, [r2, #12]
 8002358:	0a12      	lsrs	r2, r2, #8
 800235a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
    break;
 8002364:	e00c      	b.n	8002380 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002366:	4a12      	ldr	r2, [pc, #72]	; (80023b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002370:	68d2      	ldr	r2, [r2, #12]
 8002372:	0a12      	lsrs	r2, r2, #8
 8002374:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]
    break;
 800237e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002380:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	3301      	adds	r3, #1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002390:	697a      	ldr	r2, [r7, #20]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	fbb2 f3f3 	udiv	r3, r2, r3
 8002398:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	371c      	adds	r7, #28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	016e3600 	.word	0x016e3600
 80023b0:	00f42400 	.word	0x00f42400

080023b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b086      	sub	sp, #24
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023bc:	2300      	movs	r3, #0
 80023be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023c0:	2300      	movs	r3, #0
 80023c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8098 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10d      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	; 0x58
 80023ee:	4b3d      	ldr	r3, [pc, #244]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f6:	60bb      	str	r3, [r7, #8]
 80023f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fa:	2301      	movs	r3, #1
 80023fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	4b3a      	ldr	r3, [pc, #232]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002408:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240a:	f7fe fe15 	bl	8001038 <HAL_GetTick>
 800240e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002410:	e009      	b.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002412:	f7fe fe11 	bl	8001038 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d902      	bls.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	74fb      	strb	r3, [r7, #19]
        break;
 8002424:	e005      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002426:	4b30      	ldr	r3, [pc, #192]	; (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ef      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d159      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002438:	4b2a      	ldr	r3, [pc, #168]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01e      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d019      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	4a1f      	ldr	r2, [pc, #124]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002470:	4b1c      	ldr	r3, [pc, #112]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002480:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d016      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002492:	f7fe fdd1 	bl	8001038 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002498:	e00b      	b.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7fe fdcd 	bl	8001038 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d902      	bls.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	74fb      	strb	r3, [r7, #19]
            break;
 80024b0:	e006      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b2:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0ec      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80024c0:	7cfb      	ldrb	r3, [r7, #19]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10b      	bne.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024dc:	e008      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	74bb      	strb	r3, [r7, #18]
 80024e2:	e005      	b.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f0:	7c7b      	ldrb	r3, [r7, #17]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d105      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024f6:	4baf      	ldr	r3, [pc, #700]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4aae      	ldr	r2, [pc, #696]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800250e:	4ba9      	ldr	r3, [pc, #676]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f023 0203 	bic.w	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	49a5      	ldr	r1, [pc, #660]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002530:	4ba0      	ldr	r3, [pc, #640]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 020c 	bic.w	r2, r3, #12
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	499d      	ldr	r1, [pc, #628]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002552:	4b98      	ldr	r3, [pc, #608]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	4994      	ldr	r1, [pc, #592]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	498c      	ldr	r1, [pc, #560]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002596:	4b87      	ldr	r3, [pc, #540]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	4983      	ldr	r1, [pc, #524]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0320 	and.w	r3, r3, #32
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025b8:	4b7e      	ldr	r3, [pc, #504]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	497b      	ldr	r1, [pc, #492]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	4972      	ldr	r1, [pc, #456]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	496a      	ldr	r1, [pc, #424]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	4961      	ldr	r1, [pc, #388]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002640:	4b5c      	ldr	r3, [pc, #368]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002642:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	4959      	ldr	r1, [pc, #356]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002662:	4b54      	ldr	r3, [pc, #336]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002670:	4950      	ldr	r1, [pc, #320]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002684:	4b4b      	ldr	r3, [pc, #300]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4948      	ldr	r1, [pc, #288]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a2:	d105      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026a4:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	4a42      	ldr	r2, [pc, #264]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026bc:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	493a      	ldr	r1, [pc, #232]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026da:	d105      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d015      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80026f4:	4b2f      	ldr	r3, [pc, #188]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002702:	492c      	ldr	r1, [pc, #176]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800271a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800271e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d015      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800272c:	4b21      	ldr	r3, [pc, #132]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800272e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	491e      	ldr	r1, [pc, #120]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800273c:	4313      	orrs	r3, r2
 800273e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800274a:	d105      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002756:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d015      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4910      	ldr	r1, [pc, #64]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a0a      	ldr	r2, [pc, #40]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d018      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	4902      	ldr	r1, [pc, #8]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027b2:	e001      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80027b4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c0:	d105      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4a20      	ldr	r2, [pc, #128]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027cc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80027da:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4917      	ldr	r1, [pc, #92]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f8:	d105      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027fa:	4b13      	ldr	r3, [pc, #76]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002804:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d015      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002812:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002820:	4909      	ldr	r1, [pc, #36]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002830:	d105      	bne.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002832:	4b05      	ldr	r3, [pc, #20]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4a04      	ldr	r2, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800283c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800283e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e042      	b.n	80028e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002864:	2b00      	cmp	r3, #0
 8002866:	d106      	bne.n	8002876 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7fe f98f 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2224      	movs	r2, #36	; 0x24
 800287a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 0201 	bic.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fa80 	bl	8002d94 <UART_SetConfig>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d101      	bne.n	800289e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e022      	b.n	80028e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd3e 	bl	8003328 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 fdc5 	bl	800346c <UART_CheckIdleState>
 80028e2:	4603      	mov	r3, r0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b088      	sub	sp, #32
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800290c:	69fa      	ldr	r2, [r7, #28]
 800290e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d118      	bne.n	800294e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0320 	and.w	r3, r3, #32
 8002922:	2b00      	cmp	r3, #0
 8002924:	d013      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d104      	bne.n	800293a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81fb 	beq.w	8002d3a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
      }
      return;
 800294c:	e1f5      	b.n	8002d3a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 80ef 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4b73      	ldr	r3, [pc, #460]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d105      	bne.n	800296c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_UART_IRQHandler+0x240>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 80e4 	beq.w	8002b34 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00b      	beq.n	8002998 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2201      	movs	r2, #1
 8002986:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298e:	f043 0201 	orr.w	r2, r3, #1
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2202      	movs	r2, #2
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029ba:	f043 0204 	orr.w	r2, r3, #4
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00b      	beq.n	80029f0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2204      	movs	r2, #4
 80029de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e6:	f043 0202 	orr.w	r2, r3, #2
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d015      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d104      	bne.n	8002a0e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_UART_IRQHandler+0x23c>)
 8002a08:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00b      	beq.n	8002a26 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2208      	movs	r2, #8
 8002a14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f043 0208 	orr.w	r2, r3, #8
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d011      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4a:	f043 0220 	orr.w	r2, r3, #32
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 816f 	beq.w	8002d3e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a94:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa0:	2b40      	cmp	r3, #64	; 0x40
 8002aa2:	d004      	beq.n	8002aae <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d031      	beq.n	8002b12 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fda7 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d123      	bne.n	8002b0a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d013      	beq.n	8002b02 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	4a14      	ldr	r2, [pc, #80]	; (8002b30 <HAL_UART_IRQHandler+0x244>)
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe fc3c 	bl	8001364 <HAL_DMA_Abort_IT>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002afc:	4610      	mov	r0, r2
 8002afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	e00f      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f930 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b08:	e00b      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f92c 	bl	8002d68 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b10:	e007      	b.n	8002b22 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f928 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002b20:	e10d      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b22:	bf00      	nop
    return;
 8002b24:	e10b      	b.n	8002d3e <HAL_UART_IRQHandler+0x452>
 8002b26:	bf00      	nop
 8002b28:	10000001 	.word	0x10000001
 8002b2c:	04000120 	.word	0x04000120
 8002b30:	08003667 	.word	0x08003667

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	f040 80ab 	bne.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	f000 80a5 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 809f 	beq.w	8002c94 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b68:	2b40      	cmp	r3, #64	; 0x40
 8002b6a:	d155      	bne.n	8002c18 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80e2 	beq.w	8002d42 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b84:	893a      	ldrh	r2, [r7, #8]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	f080 80db 	bcs.w	8002d42 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	893a      	ldrh	r2, [r7, #8]
 8002b90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12b      	bne.n	8002bfc <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0210 	bic.w	r2, r2, #16
 8002bf0:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fb5b 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b3 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c16:	e094      	b.n	8002d42 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 8087 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 8083 	beq.w	8002d46 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	f023 0301 	bic.w	r3, r3, #1
 8002c62:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0210 	bic.w	r2, r2, #16
 8002c86:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c88:	897b      	ldrh	r3, [r7, #10]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f875 	bl	8002d7c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c92:	e058      	b.n	8002d46 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fd07 	bl	80036c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cb8:	e048      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d104      	bne.n	8002cd8 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d034      	beq.n	8002d4a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
    }
    return;
 8002ce8:	e02f      	b.n	8002d4a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d008      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fcc7 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8002d04:	e022      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d008      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 fce7 	bl	80036ee <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d20:	e014      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00f      	beq.n	8002d4c <HAL_UART_IRQHandler+0x460>
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	da0c      	bge.n	8002d4c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fcd1 	bl	80036da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d38:	e008      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d3a:	bf00      	nop
 8002d3c:	e006      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d3e:	bf00      	nop
 8002d40:	e004      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d42:	bf00      	nop
 8002d44:	e002      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
      return;
 8002d46:	bf00      	nop
 8002d48:	e000      	b.n	8002d4c <HAL_UART_IRQHandler+0x460>
    return;
 8002d4a:	bf00      	nop
  }
}
 8002d4c:	3720      	adds	r7, #32
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop

08002d54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d94:	b5b0      	push	{r4, r5, r7, lr}
 8002d96:	b088      	sub	sp, #32
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4bb1      	ldr	r3, [pc, #708]	; (8003084 <UART_SetConfig+0x2f0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6812      	ldr	r2, [r2, #0]
 8002dc6:	69f9      	ldr	r1, [r7, #28]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4aa6      	ldr	r2, [pc, #664]	; (8003088 <UART_SetConfig+0x2f4>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	69fa      	ldr	r2, [r7, #28]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002e06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	69f9      	ldr	r1, [r7, #28]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	f023 010f 	bic.w	r1, r3, #15
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a97      	ldr	r2, [pc, #604]	; (800308c <UART_SetConfig+0x2f8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d120      	bne.n	8002e76 <UART_SetConfig+0xe2>
 8002e34:	4b96      	ldr	r3, [pc, #600]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3a:	f003 0303 	and.w	r3, r3, #3
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d816      	bhi.n	8002e70 <UART_SetConfig+0xdc>
 8002e42:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xb4>)
 8002e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e48:	08002e59 	.word	0x08002e59
 8002e4c:	08002e65 	.word	0x08002e65
 8002e50:	08002e5f 	.word	0x08002e5f
 8002e54:	08002e6b 	.word	0x08002e6b
 8002e58:	2301      	movs	r3, #1
 8002e5a:	76fb      	strb	r3, [r7, #27]
 8002e5c:	e0e7      	b.n	800302e <UART_SetConfig+0x29a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	76fb      	strb	r3, [r7, #27]
 8002e62:	e0e4      	b.n	800302e <UART_SetConfig+0x29a>
 8002e64:	2304      	movs	r3, #4
 8002e66:	76fb      	strb	r3, [r7, #27]
 8002e68:	e0e1      	b.n	800302e <UART_SetConfig+0x29a>
 8002e6a:	2308      	movs	r3, #8
 8002e6c:	76fb      	strb	r3, [r7, #27]
 8002e6e:	e0de      	b.n	800302e <UART_SetConfig+0x29a>
 8002e70:	2310      	movs	r3, #16
 8002e72:	76fb      	strb	r3, [r7, #27]
 8002e74:	e0db      	b.n	800302e <UART_SetConfig+0x29a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a86      	ldr	r2, [pc, #536]	; (8003094 <UART_SetConfig+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d132      	bne.n	8002ee6 <UART_SetConfig+0x152>
 8002e80:	4b83      	ldr	r3, [pc, #524]	; (8003090 <UART_SetConfig+0x2fc>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b0c      	cmp	r3, #12
 8002e8c:	d828      	bhi.n	8002ee0 <UART_SetConfig+0x14c>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <UART_SetConfig+0x100>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ec9 	.word	0x08002ec9
 8002e98:	08002ee1 	.word	0x08002ee1
 8002e9c:	08002ee1 	.word	0x08002ee1
 8002ea0:	08002ee1 	.word	0x08002ee1
 8002ea4:	08002ed5 	.word	0x08002ed5
 8002ea8:	08002ee1 	.word	0x08002ee1
 8002eac:	08002ee1 	.word	0x08002ee1
 8002eb0:	08002ee1 	.word	0x08002ee1
 8002eb4:	08002ecf 	.word	0x08002ecf
 8002eb8:	08002ee1 	.word	0x08002ee1
 8002ebc:	08002ee1 	.word	0x08002ee1
 8002ec0:	08002ee1 	.word	0x08002ee1
 8002ec4:	08002edb 	.word	0x08002edb
 8002ec8:	2300      	movs	r3, #0
 8002eca:	76fb      	strb	r3, [r7, #27]
 8002ecc:	e0af      	b.n	800302e <UART_SetConfig+0x29a>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	76fb      	strb	r3, [r7, #27]
 8002ed2:	e0ac      	b.n	800302e <UART_SetConfig+0x29a>
 8002ed4:	2304      	movs	r3, #4
 8002ed6:	76fb      	strb	r3, [r7, #27]
 8002ed8:	e0a9      	b.n	800302e <UART_SetConfig+0x29a>
 8002eda:	2308      	movs	r3, #8
 8002edc:	76fb      	strb	r3, [r7, #27]
 8002ede:	e0a6      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee0:	2310      	movs	r3, #16
 8002ee2:	76fb      	strb	r3, [r7, #27]
 8002ee4:	e0a3      	b.n	800302e <UART_SetConfig+0x29a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6b      	ldr	r2, [pc, #428]	; (8003098 <UART_SetConfig+0x304>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d120      	bne.n	8002f32 <UART_SetConfig+0x19e>
 8002ef0:	4b67      	ldr	r3, [pc, #412]	; (8003090 <UART_SetConfig+0x2fc>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002efa:	2b30      	cmp	r3, #48	; 0x30
 8002efc:	d013      	beq.n	8002f26 <UART_SetConfig+0x192>
 8002efe:	2b30      	cmp	r3, #48	; 0x30
 8002f00:	d814      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	d009      	beq.n	8002f1a <UART_SetConfig+0x186>
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d810      	bhi.n	8002f2c <UART_SetConfig+0x198>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x180>
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d006      	beq.n	8002f20 <UART_SetConfig+0x18c>
 8002f12:	e00b      	b.n	8002f2c <UART_SetConfig+0x198>
 8002f14:	2300      	movs	r3, #0
 8002f16:	76fb      	strb	r3, [r7, #27]
 8002f18:	e089      	b.n	800302e <UART_SetConfig+0x29a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	76fb      	strb	r3, [r7, #27]
 8002f1e:	e086      	b.n	800302e <UART_SetConfig+0x29a>
 8002f20:	2304      	movs	r3, #4
 8002f22:	76fb      	strb	r3, [r7, #27]
 8002f24:	e083      	b.n	800302e <UART_SetConfig+0x29a>
 8002f26:	2308      	movs	r3, #8
 8002f28:	76fb      	strb	r3, [r7, #27]
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x29a>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	76fb      	strb	r3, [r7, #27]
 8002f30:	e07d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a59      	ldr	r2, [pc, #356]	; (800309c <UART_SetConfig+0x308>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d120      	bne.n	8002f7e <UART_SetConfig+0x1ea>
 8002f3c:	4b54      	ldr	r3, [pc, #336]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002f46:	2bc0      	cmp	r3, #192	; 0xc0
 8002f48:	d013      	beq.n	8002f72 <UART_SetConfig+0x1de>
 8002f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d009      	beq.n	8002f66 <UART_SetConfig+0x1d2>
 8002f52:	2b80      	cmp	r3, #128	; 0x80
 8002f54:	d810      	bhi.n	8002f78 <UART_SetConfig+0x1e4>
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <UART_SetConfig+0x1cc>
 8002f5a:	2b40      	cmp	r3, #64	; 0x40
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x1d8>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x1e4>
 8002f60:	2300      	movs	r3, #0
 8002f62:	76fb      	strb	r3, [r7, #27]
 8002f64:	e063      	b.n	800302e <UART_SetConfig+0x29a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	76fb      	strb	r3, [r7, #27]
 8002f6a:	e060      	b.n	800302e <UART_SetConfig+0x29a>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	76fb      	strb	r3, [r7, #27]
 8002f70:	e05d      	b.n	800302e <UART_SetConfig+0x29a>
 8002f72:	2308      	movs	r3, #8
 8002f74:	76fb      	strb	r3, [r7, #27]
 8002f76:	e05a      	b.n	800302e <UART_SetConfig+0x29a>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	76fb      	strb	r3, [r7, #27]
 8002f7c:	e057      	b.n	800302e <UART_SetConfig+0x29a>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x30c>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d125      	bne.n	8002fd4 <UART_SetConfig+0x240>
 8002f88:	4b41      	ldr	r3, [pc, #260]	; (8003090 <UART_SetConfig+0x2fc>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d017      	beq.n	8002fc8 <UART_SetConfig+0x234>
 8002f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f9c:	d817      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa2:	d00b      	beq.n	8002fbc <UART_SetConfig+0x228>
 8002fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fa8:	d811      	bhi.n	8002fce <UART_SetConfig+0x23a>
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <UART_SetConfig+0x222>
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d006      	beq.n	8002fc2 <UART_SetConfig+0x22e>
 8002fb4:	e00b      	b.n	8002fce <UART_SetConfig+0x23a>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	76fb      	strb	r3, [r7, #27]
 8002fba:	e038      	b.n	800302e <UART_SetConfig+0x29a>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	76fb      	strb	r3, [r7, #27]
 8002fc0:	e035      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	76fb      	strb	r3, [r7, #27]
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x29a>
 8002fc8:	2308      	movs	r3, #8
 8002fca:	76fb      	strb	r3, [r7, #27]
 8002fcc:	e02f      	b.n	800302e <UART_SetConfig+0x29a>
 8002fce:	2310      	movs	r3, #16
 8002fd0:	76fb      	strb	r3, [r7, #27]
 8002fd2:	e02c      	b.n	800302e <UART_SetConfig+0x29a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <UART_SetConfig+0x2f4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d125      	bne.n	800302a <UART_SetConfig+0x296>
 8002fde:	4b2c      	ldr	r3, [pc, #176]	; (8003090 <UART_SetConfig+0x2fc>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fec:	d017      	beq.n	800301e <UART_SetConfig+0x28a>
 8002fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff2:	d817      	bhi.n	8003024 <UART_SetConfig+0x290>
 8002ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff8:	d00b      	beq.n	8003012 <UART_SetConfig+0x27e>
 8002ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ffe:	d811      	bhi.n	8003024 <UART_SetConfig+0x290>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <UART_SetConfig+0x278>
 8003004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003008:	d006      	beq.n	8003018 <UART_SetConfig+0x284>
 800300a:	e00b      	b.n	8003024 <UART_SetConfig+0x290>
 800300c:	2300      	movs	r3, #0
 800300e:	76fb      	strb	r3, [r7, #27]
 8003010:	e00d      	b.n	800302e <UART_SetConfig+0x29a>
 8003012:	2302      	movs	r3, #2
 8003014:	76fb      	strb	r3, [r7, #27]
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x29a>
 8003018:	2304      	movs	r3, #4
 800301a:	76fb      	strb	r3, [r7, #27]
 800301c:	e007      	b.n	800302e <UART_SetConfig+0x29a>
 800301e:	2308      	movs	r3, #8
 8003020:	76fb      	strb	r3, [r7, #27]
 8003022:	e004      	b.n	800302e <UART_SetConfig+0x29a>
 8003024:	2310      	movs	r3, #16
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e001      	b.n	800302e <UART_SetConfig+0x29a>
 800302a:	2310      	movs	r3, #16
 800302c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a15      	ldr	r2, [pc, #84]	; (8003088 <UART_SetConfig+0x2f4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	f040 809f 	bne.w	8003178 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800303a:	7efb      	ldrb	r3, [r7, #27]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d837      	bhi.n	80030b0 <UART_SetConfig+0x31c>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x2b4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	080030b1 	.word	0x080030b1
 8003050:	08003075 	.word	0x08003075
 8003054:	080030b1 	.word	0x080030b1
 8003058:	0800307b 	.word	0x0800307b
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	080030b1 	.word	0x080030b1
 8003068:	080030a9 	.word	0x080030a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7ff f930 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003070:	6178      	str	r0, [r7, #20]
        break;
 8003072:	e022      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <UART_SetConfig+0x310>)
 8003076:	617b      	str	r3, [r7, #20]
        break;
 8003078:	e01f      	b.n	80030ba <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff f8bb 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800307e:	6178      	str	r0, [r7, #20]
        break;
 8003080:	e01b      	b.n	80030ba <UART_SetConfig+0x326>
 8003082:	bf00      	nop
 8003084:	cfff69f3 	.word	0xcfff69f3
 8003088:	40008000 	.word	0x40008000
 800308c:	40013800 	.word	0x40013800
 8003090:	40021000 	.word	0x40021000
 8003094:	40004400 	.word	0x40004400
 8003098:	40004800 	.word	0x40004800
 800309c:	40004c00 	.word	0x40004c00
 80030a0:	40005000 	.word	0x40005000
 80030a4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ac:	617b      	str	r3, [r7, #20]
        break;
 80030ae:	e004      	b.n	80030ba <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	76bb      	strb	r3, [r7, #26]
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 811b 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c6:	4a96      	ldr	r2, [pc, #600]	; (8003320 <UART_SetConfig+0x58c>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d902      	bls.n	80030f8 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	76bb      	strb	r3, [r7, #26]
 80030f6:	e0ff      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f04f 0100 	mov.w	r1, #0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	4a86      	ldr	r2, [pc, #536]	; (8003320 <UART_SetConfig+0x58c>)
 8003106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310a:	b29a      	uxth	r2, r3
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	f7fd fba0 	bl	8000854 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4610      	mov	r0, r2
 800311a:	4619      	mov	r1, r3
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	020b      	lsls	r3, r1, #8
 8003126:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800312a:	0202      	lsls	r2, r0, #8
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	6849      	ldr	r1, [r1, #4]
 8003130:	0849      	lsrs	r1, r1, #1
 8003132:	4608      	mov	r0, r1
 8003134:	f04f 0100 	mov.w	r1, #0
 8003138:	1814      	adds	r4, r2, r0
 800313a:	eb43 0501 	adc.w	r5, r3, r1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	4620      	mov	r0, r4
 800314a:	4629      	mov	r1, r5
 800314c:	f7fd fb82 	bl	8000854 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800315e:	d308      	bcc.n	8003172 <UART_SetConfig+0x3de>
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003166:	d204      	bcs.n	8003172 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	e0c2      	b.n	80032f8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
 8003176:	e0bf      	b.n	80032f8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	69db      	ldr	r3, [r3, #28]
 800317c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003180:	d165      	bne.n	800324e <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 8003182:	7efb      	ldrb	r3, [r7, #27]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d828      	bhi.n	80031da <UART_SetConfig+0x446>
 8003188:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <UART_SetConfig+0x3fc>)
 800318a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318e:	bf00      	nop
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031bd 	.word	0x080031bd
 8003198:	080031c5 	.word	0x080031c5
 800319c:	080031db 	.word	0x080031db
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031db 	.word	0x080031db
 80031a8:	080031db 	.word	0x080031db
 80031ac:	080031db 	.word	0x080031db
 80031b0:	080031d3 	.word	0x080031d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b4:	f7ff f88c 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 80031b8:	6178      	str	r0, [r7, #20]
        break;
 80031ba:	e013      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031bc:	f7ff f89e 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 80031c0:	6178      	str	r0, [r7, #20]
        break;
 80031c2:	e00f      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b57      	ldr	r3, [pc, #348]	; (8003324 <UART_SetConfig+0x590>)
 80031c6:	617b      	str	r3, [r7, #20]
        break;
 80031c8:	e00c      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7ff f813 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 80031ce:	6178      	str	r0, [r7, #20]
        break;
 80031d0:	e008      	b.n	80031e4 <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031d6:	617b      	str	r3, [r7, #20]
        break;
 80031d8:	e004      	b.n	80031e4 <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 80031da:	2300      	movs	r3, #0
 80031dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	76bb      	strb	r3, [r7, #26]
        break;
 80031e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8086 	beq.w	80032f8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	4a4b      	ldr	r2, [pc, #300]	; (8003320 <UART_SetConfig+0x58c>)
 80031f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f6:	461a      	mov	r2, r3
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80031fe:	005a      	lsls	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	441a      	add	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	b29b      	uxth	r3, r3
 8003212:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	2b0f      	cmp	r3, #15
 8003218:	d916      	bls.n	8003248 <UART_SetConfig+0x4b4>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d212      	bcs.n	8003248 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	b29b      	uxth	r3, r3
 8003226:	f023 030f 	bic.w	r3, r3, #15
 800322a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	085b      	lsrs	r3, r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	b29a      	uxth	r2, r3
 8003238:	89fb      	ldrh	r3, [r7, #14]
 800323a:	4313      	orrs	r3, r2
 800323c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	89fa      	ldrh	r2, [r7, #14]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e057      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	76bb      	strb	r3, [r7, #26]
 800324c:	e054      	b.n	80032f8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800324e:	7efb      	ldrb	r3, [r7, #27]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d828      	bhi.n	80032a6 <UART_SetConfig+0x512>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x4c8>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	08003289 	.word	0x08003289
 8003264:	08003291 	.word	0x08003291
 8003268:	080032a7 	.word	0x080032a7
 800326c:	08003297 	.word	0x08003297
 8003270:	080032a7 	.word	0x080032a7
 8003274:	080032a7 	.word	0x080032a7
 8003278:	080032a7 	.word	0x080032a7
 800327c:	0800329f 	.word	0x0800329f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7ff f826 	bl	80022d0 <HAL_RCC_GetPCLK1Freq>
 8003284:	6178      	str	r0, [r7, #20]
        break;
 8003286:	e013      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003288:	f7ff f838 	bl	80022fc <HAL_RCC_GetPCLK2Freq>
 800328c:	6178      	str	r0, [r7, #20]
        break;
 800328e:	e00f      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003290:	4b24      	ldr	r3, [pc, #144]	; (8003324 <UART_SetConfig+0x590>)
 8003292:	617b      	str	r3, [r7, #20]
        break;
 8003294:	e00c      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003296:	f7fe ffad 	bl	80021f4 <HAL_RCC_GetSysClockFreq>
 800329a:	6178      	str	r0, [r7, #20]
        break;
 800329c:	e008      	b.n	80032b0 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800329e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032a2:	617b      	str	r3, [r7, #20]
        break;
 80032a4:	e004      	b.n	80032b0 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	76bb      	strb	r3, [r7, #26]
        break;
 80032ae:	bf00      	nop
    }

    if (pclk != 0U)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d020      	beq.n	80032f8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	4a19      	ldr	r2, [pc, #100]	; (8003320 <UART_SetConfig+0x58c>)
 80032bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c0:	461a      	mov	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	441a      	add	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	2b0f      	cmp	r3, #15
 80032e0:	d908      	bls.n	80032f4 <UART_SetConfig+0x560>
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e8:	d204      	bcs.n	80032f4 <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	e001      	b.n	80032f8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003314:	7ebb      	ldrb	r3, [r7, #26]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	08023784 	.word	0x08023784
 8003324:	00f42400 	.word	0x00f42400

08003328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01a      	beq.n	800343e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003426:	d10a      	bne.n	800343e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	605a      	str	r2, [r3, #4]
  }
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af02      	add	r7, sp, #8
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800347c:	f7fd fddc 	bl	8001038 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b08      	cmp	r3, #8
 800348e:	d10e      	bne.n	80034ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003494:	9300      	str	r3, [sp, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f82f 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e025      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10e      	bne.n	80034da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f819 	bl	8003502 <UART_WaitOnFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e00f      	b.n	80034fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003512:	e062      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351a:	d05e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fd fd8c 	bl	8001038 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <UART_WaitOnFlagUntilTimeout+0x30>
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003540:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2220      	movs	r2, #32
 800355e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e045      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d02e      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358a:	d126      	bne.n	80035da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003594:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0201 	bic.w	r2, r2, #1
 80035b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	69da      	ldr	r2, [r3, #28]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d08d      	beq.n	8003514 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003632:	2b01      	cmp	r3, #1
 8003634:	d107      	bne.n	8003646 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 0210 	bic.w	r2, r2, #16
 8003644:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2220      	movs	r2, #32
 800364a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	671a      	str	r2, [r3, #112]	; 0x70
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fb6f 	bl	8002d68 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fb4b 	bl	8002d54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr

080036ee <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <HAL_UARTEx_DisableFifoMode+0x16>
 8003714:	2302      	movs	r3, #2
 8003716:	e027      	b.n	8003768 <HAL_UARTEx_DisableFifoMode+0x66>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003746:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02d      	b.n	80037e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f84f 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2220      	movs	r2, #32
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3710      	adds	r7, #16
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}

080037f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003804:	2302      	movs	r3, #2
 8003806:	e02d      	b.n	8003864 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	; 0x24
 8003814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0201 	bic.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f811 	bl	800386c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003878:	2b00      	cmp	r3, #0
 800387a:	d108      	bne.n	800388e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800388c:	e031      	b.n	80038f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800388e:	2308      	movs	r3, #8
 8003890:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003892:	2308      	movs	r3, #8
 8003894:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	0e5b      	lsrs	r3, r3, #25
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	0f5b      	lsrs	r3, r3, #29
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b6:	7bbb      	ldrb	r3, [r7, #14]
 80038b8:	7b3a      	ldrb	r2, [r7, #12]
 80038ba:	4911      	ldr	r1, [pc, #68]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038bc:	5c8a      	ldrb	r2, [r1, r2]
 80038be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038c2:	7b3a      	ldrb	r2, [r7, #12]
 80038c4:	490f      	ldr	r1, [pc, #60]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
 80038d6:	7b7a      	ldrb	r2, [r7, #13]
 80038d8:	4909      	ldr	r1, [pc, #36]	; (8003900 <UARTEx_SetNbDataToProcess+0x94>)
 80038da:	5c8a      	ldrb	r2, [r1, r2]
 80038dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038e0:	7b7a      	ldrb	r2, [r7, #13]
 80038e2:	4908      	ldr	r1, [pc, #32]	; (8003904 <UARTEx_SetNbDataToProcess+0x98>)
 80038e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	0802379c 	.word	0x0802379c
 8003904:	080237a4 	.word	0x080237a4

08003908 <ESP_Init>:

int ESP_Init(void 		(*UART_Transmit)(uint8_t*),
			 uint8_t 	(*UART_Receive)(void),
			 uint32_t 	(*getTick)(void),
			 uint32_t	UART_Buffer_Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	603b      	str	r3, [r7, #0]
	if(UART_Transmit != NULL		&&
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d016      	beq.n	800394a <ESP_Init+0x42>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <ESP_Init+0x42>
	   UART_Receive	!= NULL			&&
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d010      	beq.n	800394a <ESP_Init+0x42>
	   getTick != NULL)
	{
		ESP8266.UART_Receive 		= UART_Receive;
 8003928:	4a0b      	ldr	r2, [pc, #44]	; (8003958 <ESP_Init+0x50>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6053      	str	r3, [r2, #4]
		ESP8266.UART_Transmit 		= UART_Transmit;
 800392e:	4a0a      	ldr	r2, [pc, #40]	; (8003958 <ESP_Init+0x50>)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6013      	str	r3, [r2, #0]
		ESP8266.getTick 			= getTick;
 8003934:	4a08      	ldr	r2, [pc, #32]	; (8003958 <ESP_Init+0x50>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6093      	str	r3, [r2, #8]

		rx_buffer = ringBuffer_init(UART_Buffer_Size);
 800393a:	6838      	ldr	r0, [r7, #0]
 800393c:	f000 f874 	bl	8003a28 <ringBuffer_init>
 8003940:	4603      	mov	r3, r0
 8003942:	4a06      	ldr	r2, [pc, #24]	; (800395c <ESP_Init+0x54>)
 8003944:	6013      	str	r3, [r2, #0]

		return 1;
 8003946:	2301      	movs	r3, #1
 8003948:	e001      	b.n	800394e <ESP_Init+0x46>
	}
	else
	{
		return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000360 	.word	0x20000360
 800395c:	2000048c 	.word	0x2000048c

08003960 <Send_AT_Command>:


void Send_AT_Command(char *cmd)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]

	ESP8266.UART_Transmit((uint8_t*)cmd);
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <Send_AT_Command+0x18>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000360 	.word	0x20000360

0800397c <ESP_UART_ReceiveHandler>:

void ESP_UART_ReceiveHandler(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
	uint8_t rx_data=0;
 8003982:	2300      	movs	r3, #0
 8003984:	71fb      	strb	r3, [r7, #7]

	rx_data = ESP8266.UART_Receive();
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <ESP_UART_ReceiveHandler+0x2c>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4798      	blx	r3
 800398c:	4603      	mov	r3, r0
 800398e:	71fb      	strb	r3, [r7, #7]
	ringBuffer_push(rx_buffer, rx_data);
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <ESP_UART_ReceiveHandler+0x30>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	79fa      	ldrb	r2, [r7, #7]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f000 f886 	bl	8003aaa <ringBuffer_push>
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000360 	.word	0x20000360
 80039ac:	2000048c 	.word	0x2000048c

080039b0 <Read_Response>:


uint32_t Read_Response(char * response)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	return ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <Read_Response+0x20>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f8f6 	bl	8003bb0 <ringBuffer_lookFor>
 80039c4:	4603      	mov	r3, r0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	2000048c 	.word	0x2000048c

080039d4 <Wait_Response>:

Status Wait_Response(char * response, uint32_t timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
	uint32_t timestamp = ESP8266.getTick();
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <Wait_Response+0x4c>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4798      	blx	r3
 80039e4:	60b8      	str	r0, [r7, #8]

	uint32_t result = 0;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]

	while(!result)
 80039ea:	e011      	b.n	8003a10 <Wait_Response+0x3c>
	{
		if(ESP8266.getTick() - timestamp >= timeout)
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <Wait_Response+0x4c>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	4798      	blx	r3
 80039f2:	4602      	mov	r2, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d801      	bhi.n	8003a02 <Wait_Response+0x2e>
		{
			return TIMEOUT_ERROR;
 80039fe:	2302      	movs	r3, #2
 8003a00:	e00a      	b.n	8003a18 <Wait_Response+0x44>
		}
		 result = ringBuffer_lookFor(rx_buffer, (uint8_t*)response);
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <Wait_Response+0x50>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f8d1 	bl	8003bb0 <ringBuffer_lookFor>
 8003a0e:	60f8      	str	r0, [r7, #12]
	while(!result)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0ea      	beq.n	80039ec <Wait_Response+0x18>
	}

		return FOUND;
 8003a16:	2300      	movs	r3, #0

}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3710      	adds	r7, #16
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000360 	.word	0x20000360
 8003a24:	2000048c 	.word	0x2000048c

08003a28 <ringBuffer_init>:
 * @brief 	Initialize the ring buffer. Ring buffer is allocated after this function.
 * @param 	size parameter specifies the size of ring buffer.
 * @retval	RingBuffer typedef structure.
 */
RingBuffer* ringBuffer_init(uint32_t size)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	RingBuffer* rBuf;

	rBuf = (RingBuffer*)malloc(1*sizeof(RingBuffer));
 8003a30:	2010      	movs	r0, #16
 8003a32:	f01a f88f 	bl	801db54 <malloc>
 8003a36:	4603      	mov	r3, r0
 8003a38:	60fb      	str	r3, [r7, #12]
	if(rBuf == NULL)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <ringBuffer_init+0x1c>
	{
		// Error Checks
		return 0;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e017      	b.n	8003a74 <ringBuffer_init+0x4c>
	}

	rBuf->size = size;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]
	rBuf->head = 0;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
	rBuf->tail = 0;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	605a      	str	r2, [r3, #4]

	rBuf->buffer = (uint8_t*)calloc((size_t)size,sizeof(uint8_t));
 8003a56:	2101      	movs	r1, #1
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f019 fab3 	bl	801cfc4 <calloc>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	461a      	mov	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	60da      	str	r2, [r3, #12]
	if(rBuf->buffer == NULL)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d101      	bne.n	8003a72 <ringBuffer_init+0x4a>
		{
			// Error Checks
			return 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e000      	b.n	8003a74 <ringBuffer_init+0x4c>
		}

	return rBuf;
 8003a72:	68fb      	ldr	r3, [r7, #12]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <ringBuffer_deInit>:
 * @brief 	De-initialize the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_deInit(RingBuffer* buffer)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	if(buffer != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <ringBuffer_deInit+0x26>
	{
		if(buffer->buffer != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <ringBuffer_deInit+0x20>
		{
			free(buffer->buffer);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f01a f864 	bl	801db64 <free>
		}
		free(buffer);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f01a f861 	bl	801db64 <free>
	}
}
 8003aa2:	bf00      	nop
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <ringBuffer_push>:
 * @param 	RingBuffer typedef structure.
 * @param 	data is an unsigned 8-bit integer variable to be pushed into the buffer.
 * @retval	None.
 */
void ringBuffer_push(RingBuffer* ringBuffer, uint8_t data)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	70fb      	strb	r3, [r7, #3]
	if(ringBuffer->head != (ringBuffer->size - 1))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d00c      	beq.n	8003ade <ringBuffer_push+0x34>
	{
		ringBuffer->buffer[ringBuffer->head] = data;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	701a      	strb	r2, [r3, #0]
		ringBuffer->head += 1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	601a      	str	r2, [r3, #0]
	else
	{
		ringBuffer->buffer[ringBuffer->head] = data;
		ringBuffer->head = 0;
	}
}
 8003adc:	e009      	b.n	8003af2 <ringBuffer_push+0x48>
		ringBuffer->buffer[ringBuffer->head] = data;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68da      	ldr	r2, [r3, #12]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	701a      	strb	r2, [r3, #0]
		ringBuffer->head = 0;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <ringBuffer_pop>:
 * @brief 	Read data from the buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	unsigned 8-bit integer data to be read from the buffer.
 */
uint8_t ringBuffer_pop(RingBuffer* ringBuffer)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
	uint8_t data;

	if(ringBuffer->tail != (ringBuffer->size - 1))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d00d      	beq.n	8003b30 <ringBuffer_pop+0x32>
	{
		data = ringBuffer->buffer[ringBuffer->tail];
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail += 1;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]
		return data;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	e00a      	b.n	8003b46 <ringBuffer_pop+0x48>
	}
	else
	{

		data = ringBuffer->buffer[ringBuffer->tail];
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	4413      	add	r3, r2
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	73fb      	strb	r3, [r7, #15]
		ringBuffer->tail = 0;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
		return data;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
	}

}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <ringBuffer_flush>:
 * @brief 	Clear the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	None.
 */
void ringBuffer_flush(RingBuffer* ringBuffer)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b082      	sub	sp, #8
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
	memset(ringBuffer->buffer,0x00,ringBuffer->size);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68d8      	ldr	r0, [r3, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	461a      	mov	r2, r3
 8003b64:	2100      	movs	r1, #0
 8003b66:	f01a f813 	bl	801db90 <memset>
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <ringBuffer_pushArray>:
 * @param 	RingBuffer typedef structure.
 * @param	data is an unsigned 8-bit data array to be written into the buffer.
 * @retval	None.
 */
void ringBuffer_pushArray(RingBuffer* ringBuffer, uint8_t* data)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e00a      	b.n	8003b98 <ringBuffer_pushArray+0x26>
		 ringBuffer_push(ringBuffer, data[i]);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7ff ff8c 	bl	8003aaa <ringBuffer_push>
	 for(int i = 0; i<strlen((char*)data);i++)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	3301      	adds	r3, #1
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	6838      	ldr	r0, [r7, #0]
 8003b9a:	f7fc fb4f 	bl	800023c <strlen>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d8ed      	bhi.n	8003b82 <ringBuffer_pushArray+0x10>
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <ringBuffer_lookFor>:
 * @param	data is an unsigned 8-bit array to be searched in the buffer.
 * @retval	1: data is available in the buffer.
 * 			0: data is not available in the buffer.
 */
uint32_t ringBuffer_lookFor(RingBuffer* ringBuffer, uint8_t* data)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
	char* str = strstr((char*)ringBuffer->buffer,(char*)data);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f01a ff3b 	bl	801ea3c <strstr>
 8003bc6:	60f8      	str	r0, [r7, #12]

	if(str != NULL)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <ringBuffer_lookFor+0x22>
		return 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <ringBuffer_lookFor+0x24>
	else
		return 0;
 8003bd2:	2300      	movs	r3, #0

}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <ringBuffer_capacity>:
 * @brief 	Check the size of the ring buffer.
 * @param 	RingBuffer typedef structure.
 * @retval	Size of ring buffer.
 */
uint32_t ringBuffer_capacity(RingBuffer* ringBuffer)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	return ringBuffer->size;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689b      	ldr	r3, [r3, #8]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bfa:	f7fd f9b8 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bfe:	f000 f81d 	bl	8003c3c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c02:	f000 f951 	bl	8003ea8 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 8003c06:	f000 f891 	bl	8003d2c <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 8003c0a:	f000 f8ed 	bl	8003de8 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { "exe","-v" };      // verbose mode
 8003c0e:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <main+0x44>)
 8003c10:	463b      	mov	r3, r7
 8003c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c16:	e883 0003 	stmia.w	r3, {r0, r1}
  CommandLineTestRunner::RunAllTests(2, av_override);
 8003c1a:	463b      	mov	r3, r7
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	2002      	movs	r0, #2
 8003c20:	f002 fa44 	bl	80060ac <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c24:	2120      	movs	r1, #32
 8003c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2a:	f7fd fd9d 	bl	8001768 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8003c2e:	2064      	movs	r0, #100	; 0x64
 8003c30:	f7fd fa0e 	bl	8001050 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003c34:	e7f6      	b.n	8003c24 <main+0x30>
 8003c36:	bf00      	nop
 8003c38:	080209a8 	.word	0x080209a8

08003c3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b0a8      	sub	sp, #160	; 0xa0
 8003c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003c46:	2238      	movs	r2, #56	; 0x38
 8003c48:	2100      	movs	r1, #0
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f019 ffa0 	bl	801db90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c50:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	60da      	str	r2, [r3, #12]
 8003c5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c60:	463b      	mov	r3, r7
 8003c62:	2254      	movs	r2, #84	; 0x54
 8003c64:	2100      	movs	r1, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f019 ff92 	bl	801db90 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f7fd fdb9 	bl	80017e4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c72:	2302      	movs	r3, #2
 8003c74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c7a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c7c:	2340      	movs	r3, #64	; 0x40
 8003c7e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c80:	2302      	movs	r3, #2
 8003c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c86:	2302      	movs	r3, #2
 8003c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003c92:	2355      	movs	r3, #85	; 0x55
 8003c94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003caa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7fd fe4c 	bl	800194c <HAL_RCC_OscConfig>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	bf14      	ite	ne
 8003cba:	2301      	movne	r3, #1
 8003cbc:	2300      	moveq	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8003cc4:	f000 f960 	bl	8003f88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cc8:	230f      	movs	r3, #15
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ce0:	2104      	movs	r1, #4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fe f94a 	bl	8001f7c <HAL_RCC_ClockConfig>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 8003cf8:	f000 f946 	bl	8003f88 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003cfc:	2321      	movs	r3, #33	; 0x21
 8003cfe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003d00:	2300      	movs	r3, #0
 8003d02:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003d04:	2300      	movs	r3, #0
 8003d06:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d08:	463b      	mov	r3, r7
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fe fb52 	bl	80023b4 <HAL_RCCEx_PeriphCLKConfig>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003d20:	f000 f932 	bl	8003f88 <Error_Handler>
  }
}
 8003d24:	bf00      	nop
 8003d26:	37a0      	adds	r7, #160	; 0xa0
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003d30:	4b2b      	ldr	r3, [pc, #172]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 8003d34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8003d36:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d3e:	4b28      	ldr	r3, [pc, #160]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003d4a:	4b25      	ldr	r3, [pc, #148]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d52:	220c      	movs	r2, #12
 8003d54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d56:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d5c:	4b20      	ldr	r3, [pc, #128]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003d62:	4b1f      	ldr	r3, [pc, #124]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d68:	4b1d      	ldr	r3, [pc, #116]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003d6e:	481c      	ldr	r0, [pc, #112]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d70:	f7fe fd6c 	bl	800284c <HAL_UART_Init>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8003d84:	f000 f900 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4815      	ldr	r0, [pc, #84]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003d8c:	f7ff fcf2 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003da0:	f000 f8f2 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003da4:	2100      	movs	r1, #0
 8003da6:	480e      	ldr	r0, [pc, #56]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003da8:	f7ff fd22 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf14      	ite	ne
 8003db2:	2301      	movne	r3, #1
 8003db4:	2300      	moveq	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003dbc:	f000 f8e4 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003dc0:	4807      	ldr	r0, [pc, #28]	; (8003de0 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003dc2:	f7ff fc9e 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	bf14      	ite	ne
 8003dcc:	2301      	movne	r3, #1
 8003dce:	2300      	moveq	r3, #0
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003dd6:	f000 f8d7 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000036c 	.word	0x2000036c
 8003de4:	40008000 	.word	0x40008000

08003de8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003dec:	4b2c      	ldr	r3, [pc, #176]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dee:	4a2d      	ldr	r2, [pc, #180]	; (8003ea4 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003df2:	4b2b      	ldr	r3, [pc, #172]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003df4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003dfa:	4b29      	ldr	r3, [pc, #164]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e00:	4b27      	ldr	r3, [pc, #156]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e06:	4b26      	ldr	r3, [pc, #152]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e0e:	220c      	movs	r2, #12
 8003e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e12:	4b23      	ldr	r3, [pc, #140]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e1e:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003e2a:	4b1d      	ldr	r3, [pc, #116]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e30:	481b      	ldr	r0, [pc, #108]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e32:	f7fe fd0b 	bl	800284c <HAL_UART_Init>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003e46:	f000 f89f 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4814      	ldr	r0, [pc, #80]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e4e:	f7ff fc91 	bl	8003774 <HAL_UARTEx_SetTxFifoThreshold>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	bf14      	ite	ne
 8003e58:	2301      	movne	r3, #1
 8003e5a:	2300      	moveq	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003e62:	f000 f891 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003e66:	2100      	movs	r1, #0
 8003e68:	480d      	ldr	r0, [pc, #52]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e6a:	f7ff fcc1 	bl	80037f0 <HAL_UARTEx_SetRxFifoThreshold>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	bf14      	ite	ne
 8003e74:	2301      	movne	r3, #1
 8003e76:	2300      	moveq	r3, #0
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003e7e:	f000 f883 	bl	8003f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003e82:	4807      	ldr	r0, [pc, #28]	; (8003ea0 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003e84:	f7ff fc3d 	bl	8003702 <HAL_UARTEx_DisableFifoMode>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	bf14      	ite	ne
 8003e8e:	2301      	movne	r3, #1
 8003e90:	2300      	moveq	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003e98:	f000 f876 	bl	8003f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e9c:	bf00      	nop
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200003fc 	.word	0x200003fc
 8003ea4:	40013800 	.word	0x40013800

08003ea8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eae:	f107 0314 	add.w	r3, r7, #20
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	609a      	str	r2, [r3, #8]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ebe:	4b2f      	ldr	r3, [pc, #188]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ec4:	f043 0304 	orr.w	r3, r3, #4
 8003ec8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ed6:	4b29      	ldr	r3, [pc, #164]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eda:	4a28      	ldr	r2, [pc, #160]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003edc:	f043 0320 	orr.w	r3, r3, #32
 8003ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eee:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef2:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	60bb      	str	r3, [r7, #8]
 8003f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0a:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <_ZL12MX_GPIO_Initv+0xd4>)
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2120      	movs	r1, #32
 8003f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f26:	f7fd fc07 	bl	8001738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f30:	4b13      	ldr	r3, [pc, #76]	; (8003f80 <_ZL12MX_GPIO_Initv+0xd8>)
 8003f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f38:	f107 0314 	add.w	r3, r7, #20
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4811      	ldr	r0, [pc, #68]	; (8003f84 <_ZL12MX_GPIO_Initv+0xdc>)
 8003f40:	f7fd fa78 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003f44:	2320      	movs	r3, #32
 8003f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f50:	2300      	movs	r3, #0
 8003f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f5e:	f7fd fa69 	bl	8001434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f62:	2200      	movs	r2, #0
 8003f64:	2100      	movs	r1, #0
 8003f66:	2028      	movs	r0, #40	; 0x28
 8003f68:	f7fd f96f 	bl	800124a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f6c:	2028      	movs	r0, #40	; 0x28
 8003f6e:	f7fd f986 	bl	800127e <HAL_NVIC_EnableIRQ>

}
 8003f72:	bf00      	nop
 8003f74:	3728      	adds	r7, #40	; 0x28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	10110000 	.word	0x10110000
 8003f84:	48000800 	.word	0x48000800

08003f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f8c:	b672      	cpsid	i
}
 8003f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f90:	e7fe      	b.n	8003f90 <Error_Handler+0x8>

08003f92 <_ZN14MockActualCall13withParameterERK12SimpleStringPv>:
    MockActualCall& withParameter(const SimpleString& name, unsigned long int value) { return withUnsignedLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockActualCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3340      	adds	r3, #64	; 0x40
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	4798      	blx	r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>:
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_longlong value) { return withLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, cpputest_ulonglong value) { return withUnsignedLongLongIntParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value) { return withDoubleParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, double value, double tolerance) { return withDoubleParameter(name, value, tolerance); }
    MockExpectedCall& withParameter(const SimpleString& name, const char* value) { return withStringParameter(name, value); }
    MockExpectedCall& withParameter(const SimpleString& name, void* value) { return withPointerParameter(name, value); }
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	3350      	adds	r3, #80	; 0x50
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68b9      	ldr	r1, [r7, #8]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	4798      	blx	r3
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group5setupEv>:
TEST_GROUP(RingBuffer_Test_Group)
{

	RingBuffer* testBuf;

	void setup()
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b082      	sub	sp, #8
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
	{

	   testBuf = ringBuffer_init(50);
 8003fe6:	2032      	movs	r0, #50	; 0x32
 8003fe8:	f7ff fd1e 	bl	8003a28 <ringBuffer_init>
 8003fec:	4602      	mov	r2, r0
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	605a      	str	r2, [r3, #4]

	}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_Group8teardownEv>:

	void teardown()
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
	{

		ringBuffer_deInit(testBuf);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fd38 	bl	8003a7c <ringBuffer_deInit>
	}
 800400c:	bf00      	nop
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>:
TEST_GROUP(RingBuffer_Test_Group)
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4618      	mov	r0, r3
 8004020:	f00d fce2 	bl	80119e8 <_ZN5UtestC1Ev>
 8004024:	4a03      	ldr	r2, [pc, #12]	; (8004034 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev+0x20>)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	080242fc 	.word	0x080242fc

08004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>:
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	4a05      	ldr	r2, [pc, #20]	; (8004058 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev+0x20>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	601a      	str	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4618      	mov	r0, r3
 800404a:	f00d fcdd 	bl	8011a08 <_ZN5UtestD1Ev>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	080242fc 	.word	0x080242fc

0800405c <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD0Ev>:
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ffe7 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 800406a:	2108      	movs	r1, #8
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f003 fcff 	bl	8007a70 <_ZdlPvj>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>:
};


TEST(RingBuffer_Test_Group, InitTest)
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff ffbe 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004098:	4a03      	ldr	r2, [pc, #12]	; (80040a8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev+0x2c>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	080242dc 	.word	0x080242dc

080040ac <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv>:
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	2224      	movs	r2, #36	; 0x24
 80040b6:	4906      	ldr	r1, [pc, #24]	; (80040d0 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShell10createTestEv+0x24>)
 80040b8:	2008      	movs	r0, #8
 80040ba:	f003 fcc5 	bl	8007a48 <_ZnwjPKci>
 80040be:	4604      	mov	r4, r0
 80040c0:	4620      	mov	r0, r4
 80040c2:	f7ff ffdb 	bl	800407c <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestC1Ev>
 80040c6:	4623      	mov	r3, r4
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd90      	pop	{r4, r7, pc}
 80040d0:	080209b0 	.word	0x080209b0

080040d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>:
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4618      	mov	r0, r3
 80040e0:	f00c f8a0 	bl	8010224 <_ZN10UtestShellC1Ev>
 80040e4:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev+0x20>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4618      	mov	r0, r3
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	08024230 	.word	0x08024230

080040f8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv>:
{
 80040f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040fa:	b087      	sub	sp, #28
 80040fc:	af04      	add	r7, sp, #16
 80040fe:	6078      	str	r0, [r7, #4]

   LONGS_EQUAL(50,testBuf->size);
 8004100:	f00d fc48 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004104:	4604      	mov	r4, r0
 8004106:	6823      	ldr	r3, [r4, #0]
 8004108:	3338      	adds	r3, #56	; 0x38
 800410a:	681d      	ldr	r5, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	461e      	mov	r6, r3
 8004114:	f00d fc4e 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004118:	4603      	mov	r3, r0
 800411a:	9302      	str	r3, [sp, #8]
 800411c:	2327      	movs	r3, #39	; 0x27
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	4b2a      	ldr	r3, [pc, #168]	; (80041cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd8>)
 8004126:	4632      	mov	r2, r6
 8004128:	2132      	movs	r1, #50	; 0x32
 800412a:	4620      	mov	r0, r4
 800412c:	47a8      	blx	r5
   CHECK(testBuf->buffer != NULL);
 800412e:	f00d fc31 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004132:	4604      	mov	r4, r0
 8004134:	6823      	ldr	r3, [r4, #0]
 8004136:	3320      	adds	r3, #32
 8004138:	681d      	ldr	r5, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2de      	uxtb	r6, r3
 800414a:	f00d fc33 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800414e:	4603      	mov	r3, r0
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	2328      	movs	r3, #40	; 0x28
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	2300      	movs	r3, #0
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	4b1d      	ldr	r3, [pc, #116]	; (80041d4 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xdc>)
 8004160:	4a1d      	ldr	r2, [pc, #116]	; (80041d8 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe0>)
 8004162:	4631      	mov	r1, r6
 8004164:	4620      	mov	r0, r4
 8004166:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->head);
 8004168:	f00d fc14 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 800416c:	4604      	mov	r4, r0
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	3338      	adds	r3, #56	; 0x38
 8004172:	681d      	ldr	r5, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461e      	mov	r6, r3
 800417c:	f00d fc1a 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004180:	4603      	mov	r3, r0
 8004182:	9302      	str	r3, [sp, #8]
 8004184:	2329      	movs	r3, #41	; 0x29
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	4b10      	ldr	r3, [pc, #64]	; (80041cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe4>)
 800418e:	4632      	mov	r2, r6
 8004190:	2100      	movs	r1, #0
 8004192:	4620      	mov	r0, r4
 8004194:	47a8      	blx	r5
   LONGS_EQUAL(0,testBuf->tail);
 8004196:	f00d fbfd 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 800419a:	4604      	mov	r4, r0
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	3338      	adds	r3, #56	; 0x38
 80041a0:	681d      	ldr	r5, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	461e      	mov	r6, r3
 80041aa:	f00d fc03 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80041ae:	4603      	mov	r3, r0
 80041b0:	9302      	str	r3, [sp, #8]
 80041b2:	232a      	movs	r3, #42	; 0x2a
 80041b4:	9301      	str	r3, [sp, #4]
 80041b6:	4b05      	ldr	r3, [pc, #20]	; (80041cc <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xd4>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <_ZN40TEST_RingBuffer_Test_Group_InitTest_Test8testBodyEv+0xe8>)
 80041bc:	4632      	mov	r2, r6
 80041be:	2100      	movs	r1, #0
 80041c0:	4620      	mov	r0, r4
 80041c2:	47a8      	blx	r5

}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041cc:	080209b0 	.word	0x080209b0
 80041d0:	080209c4 	.word	0x080209c4
 80041d4:	080209ec 	.word	0x080209ec
 80041d8:	08020a04 	.word	0x08020a04
 80041dc:	08020a0c 	.word	0x08020a0c
 80041e0:	08020a34 	.word	0x08020a34

080041e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushDataTests)
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff ff0a 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004200:	4a03      	ldr	r2, [pc, #12]	; (8004210 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev+0x2c>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	08024210 	.word	0x08024210

08004214 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv>:
 8004214:	b590      	push	{r4, r7, lr}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	222e      	movs	r2, #46	; 0x2e
 800421e:	4906      	ldr	r1, [pc, #24]	; (8004238 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShell10createTestEv+0x24>)
 8004220:	2008      	movs	r0, #8
 8004222:	f003 fc11 	bl	8007a48 <_ZnwjPKci>
 8004226:	4604      	mov	r4, r0
 8004228:	4620      	mov	r0, r4
 800422a:	f7ff ffdb 	bl	80041e4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestC1Ev>
 800422e:	4623      	mov	r3, r4
 8004230:	4618      	mov	r0, r3
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bd90      	pop	{r4, r7, pc}
 8004238:	080209b0 	.word	0x080209b0

0800423c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>:
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4618      	mov	r0, r3
 8004248:	f00b ffec 	bl	8010224 <_ZN10UtestShellC1Ev>
 800424c:	4a03      	ldr	r2, [pc, #12]	; (800425c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev+0x20>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	08024164 	.word	0x08024164

08004260 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv>:
{
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b087      	sub	sp, #28
 8004264:	af04      	add	r7, sp, #16
 8004266:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0x45);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2145      	movs	r1, #69	; 0x45
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fc1b 	bl	8003aaa <ringBuffer_push>
	LONGS_EQUAL(0x45,testBuf->buffer[0]);
 8004274:	f00d fb8e 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004278:	4604      	mov	r4, r0
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	3338      	adds	r3, #56	; 0x38
 800427e:	681d      	ldr	r5, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	461e      	mov	r6, r3
 800428a:	f00d fb93 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800428e:	4603      	mov	r3, r0
 8004290:	9302      	str	r3, [sp, #8]
 8004292:	2331      	movs	r3, #49	; 0x31
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	4b15      	ldr	r3, [pc, #84]	; (80042f0 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x90>)
 800429c:	4632      	mov	r2, r6
 800429e:	2145      	movs	r1, #69	; 0x45
 80042a0:	4620      	mov	r0, r4
 80042a2:	47a8      	blx	r5

	ringBuffer_push(testBuf, 0x10);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2110      	movs	r1, #16
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fbfd 	bl	8003aaa <ringBuffer_push>
	LONGS_EQUAL(0x10,testBuf->buffer[1]);
 80042b0:	f00d fb70 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80042b4:	4604      	mov	r4, r0
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	3338      	adds	r3, #56	; 0x38
 80042ba:	681d      	ldr	r5, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	3301      	adds	r3, #1
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	461e      	mov	r6, r3
 80042c8:	f00d fb74 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80042cc:	4603      	mov	r3, r0
 80042ce:	9302      	str	r3, [sp, #8]
 80042d0:	2334      	movs	r3, #52	; 0x34
 80042d2:	9301      	str	r3, [sp, #4]
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x8c>)
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_Test8testBodyEv+0x94>)
 80042da:	4632      	mov	r2, r6
 80042dc:	2110      	movs	r1, #16
 80042de:	4620      	mov	r0, r4
 80042e0:	47a8      	blx	r5

}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ea:	bf00      	nop
 80042ec:	080209b0 	.word	0x080209b0
 80042f0:	08020a5c 	.word	0x08020a5c
 80042f4:	08020a8c 	.word	0x08020a8c

080042f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferOverflowTest)
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe80 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004314:	4a03      	ldr	r2, [pc, #12]	; (8004324 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev+0x2c>)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4618      	mov	r0, r3
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	08024144 	.word	0x08024144

08004328 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv>:
 8004328:	b590      	push	{r4, r7, lr}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	2238      	movs	r2, #56	; 0x38
 8004332:	4906      	ldr	r1, [pc, #24]	; (800434c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShell10createTestEv+0x24>)
 8004334:	2008      	movs	r0, #8
 8004336:	f003 fb87 	bl	8007a48 <_ZnwjPKci>
 800433a:	4604      	mov	r4, r0
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff ffdb 	bl	80042f8 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestC1Ev>
 8004342:	4623      	mov	r3, r4
 8004344:	4618      	mov	r0, r3
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	bd90      	pop	{r4, r7, pc}
 800434c:	080209b0 	.word	0x080209b0

08004350 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>:
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4618      	mov	r0, r3
 800435c:	f00b ff62 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004360:	4a03      	ldr	r2, [pc, #12]	; (8004370 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev+0x20>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	08024098 	.word	0x08024098

08004374 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv>:
{
 8004374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004376:	b089      	sub	sp, #36	; 0x24
 8004378:	af04      	add	r7, sp, #16
 800437a:	6078      	str	r0, [r7, #4]
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	3b01      	subs	r3, #1
 8004392:	429a      	cmp	r2, r3
 8004394:	bf0c      	ite	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	2300      	movne	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	da0b      	bge.n	80043bc <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x48>
	{
		ringBuffer_push(testBuf, (uint8_t)i);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff fb7b 	bl	8003aaa <ringBuffer_push>
	for(int i=testBuf->head;i<(testBuf->head == (testBuf->size - 1));i++)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3301      	adds	r3, #1
 80043b8:	60fb      	str	r3, [r7, #12]
 80043ba:	e7e3      	b.n	8004384 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x10>
	}

	ringBuffer_push(testBuf, 0xFF);			// This data must be the first element of buffer.
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	21ff      	movs	r1, #255	; 0xff
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7ff fb71 	bl	8003aaa <ringBuffer_push>
	LONGS_EQUAL(0xFF,testBuf->buffer[0]);
 80043c8:	f00d fae4 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80043cc:	4604      	mov	r4, r0
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	3338      	adds	r3, #56	; 0x38
 80043d2:	681d      	ldr	r5, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	461e      	mov	r6, r3
 80043de:	f00d fae9 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80043e2:	4603      	mov	r3, r0
 80043e4:	9302      	str	r3, [sp, #8]
 80043e6:	2340      	movs	r3, #64	; 0x40
 80043e8:	9301      	str	r3, [sp, #4]
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x8c>)
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	4b05      	ldr	r3, [pc, #20]	; (8004404 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_Test8testBodyEv+0x90>)
 80043f0:	4632      	mov	r2, r6
 80043f2:	21ff      	movs	r1, #255	; 0xff
 80043f4:	4620      	mov	r0, r4
 80043f6:	47a8      	blx	r5
}
 80043f8:	bf00      	nop
 80043fa:	3714      	adds	r7, #20
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004400:	080209b0 	.word	0x080209b0
 8004404:	08020abc 	.word	0x08020abc

08004408 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopDataTests)
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fdf8 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004424:	4a03      	ldr	r2, [pc, #12]	; (8004434 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev+0x2c>)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	08024078 	.word	0x08024078

08004438 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv>:
 8004438:	b590      	push	{r4, r7, lr}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	2243      	movs	r2, #67	; 0x43
 8004442:	4906      	ldr	r1, [pc, #24]	; (800445c <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShell10createTestEv+0x24>)
 8004444:	2008      	movs	r0, #8
 8004446:	f003 faff 	bl	8007a48 <_ZnwjPKci>
 800444a:	4604      	mov	r4, r0
 800444c:	4620      	mov	r0, r4
 800444e:	f7ff ffdb 	bl	8004408 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestC1Ev>
 8004452:	4623      	mov	r3, r4
 8004454:	4618      	mov	r0, r3
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	bd90      	pop	{r4, r7, pc}
 800445c:	080209b0 	.word	0x080209b0

08004460 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>:
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4618      	mov	r0, r3
 800446c:	f00b feda 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004470:	4a03      	ldr	r2, [pc, #12]	; (8004480 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev+0x20>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	08023fcc 	.word	0x08023fcc

08004484 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv>:
{
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	b089      	sub	sp, #36	; 0x24
 8004488:	af04      	add	r7, sp, #16
 800448a:	6078      	str	r0, [r7, #4]
	ringBuffer_push(testBuf, 0xFF);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	21ff      	movs	r1, #255	; 0xff
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fb09 	bl	8003aaa <ringBuffer_push>
	uint8_t data = ringBuffer_pop(testBuf); // 0xFF
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fb2e 	bl	8003afe <ringBuffer_pop>
 80044a2:	4603      	mov	r3, r0
 80044a4:	73fb      	strb	r3, [r7, #15]

	LONGS_EQUAL(0xFF,data);
 80044a6:	f00d fa75 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80044aa:	4604      	mov	r4, r0
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	3338      	adds	r3, #56	; 0x38
 80044b0:	681d      	ldr	r5, [r3, #0]
 80044b2:	7bfe      	ldrb	r6, [r7, #15]
 80044b4:	f00d fa7e 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	9302      	str	r3, [sp, #8]
 80044bc:	2348      	movs	r3, #72	; 0x48
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x54>)
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_Test8testBodyEv+0x58>)
 80044c6:	4632      	mov	r2, r6
 80044c8:	21ff      	movs	r1, #255	; 0xff
 80044ca:	4620      	mov	r0, r4
 80044cc:	47a8      	blx	r5

}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044d6:	bf00      	nop
 80044d8:	080209b0 	.word	0x080209b0
 80044dc:	08020aec 	.word	0x08020aec

080044e0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff fd8c 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 80044fc:	4a03      	ldr	r2, [pc, #12]	; (800450c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev+0x2c>)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	08023fac 	.word	0x08023fac

08004510 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv>:
 8004510:	b590      	push	{r4, r7, lr}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	224c      	movs	r2, #76	; 0x4c
 800451a:	4906      	ldr	r1, [pc, #24]	; (8004534 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShell10createTestEv+0x24>)
 800451c:	2008      	movs	r0, #8
 800451e:	f003 fa93 	bl	8007a48 <_ZnwjPKci>
 8004522:	4604      	mov	r4, r0
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff ffdb 	bl	80044e0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestC1Ev>
 800452a:	4623      	mov	r3, r4
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}
 8004534:	080209b0 	.word	0x080209b0

08004538 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>:
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4618      	mov	r0, r3
 8004544:	f00b fe6e 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev+0x20>)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	601a      	str	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	08023f00 	.word	0x08023f00

0800455c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv>:
{
 800455c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800455e:	b089      	sub	sp, #36	; 0x24
 8004560:	af04      	add	r7, sp, #16
 8004562:	6078      	str	r0, [r7, #4]
	uint8_t data = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	72fb      	strb	r3, [r7, #11]

	ringBuffer_push(testBuf, 0xAA);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	21aa      	movs	r1, #170	; 0xaa
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fa9b 	bl	8003aaa <ringBuffer_push>

	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	3b01      	subs	r3, #1
 800458a:	429a      	cmp	r2, r3
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4293      	cmp	r3, r2
 800459a:	da0a      	bge.n	80045b2 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x56>
	{
		data = ringBuffer_pop(testBuf);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff faac 	bl	8003afe <ringBuffer_pop>
 80045a6:	4603      	mov	r3, r0
 80045a8:	72fb      	strb	r3, [r7, #11]
	for(int i=testBuf->tail;i<(testBuf->tail == (testBuf->size - 1));i++)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3301      	adds	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e7e4      	b.n	800457c <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x20>
	}

	data = ringBuffer_pop(testBuf);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff faa1 	bl	8003afe <ringBuffer_pop>
 80045bc:	4603      	mov	r3, r0
 80045be:	72fb      	strb	r3, [r7, #11]

	LONGS_EQUAL(0xAA,data);
 80045c0:	f00d f9e8 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80045c4:	4604      	mov	r4, r0
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	3338      	adds	r3, #56	; 0x38
 80045ca:	681d      	ldr	r5, [r3, #0]
 80045cc:	7afe      	ldrb	r6, [r7, #11]
 80045ce:	f00d f9f1 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80045d2:	4603      	mov	r3, r0
 80045d4:	9302      	str	r3, [sp, #8]
 80045d6:	2359      	movs	r3, #89	; 0x59
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x94>)
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_Test8testBodyEv+0x98>)
 80045e0:	4632      	mov	r2, r6
 80045e2:	21aa      	movs	r1, #170	; 0xaa
 80045e4:	4620      	mov	r0, r4
 80045e6:	47a8      	blx	r5
}
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f0:	080209b0 	.word	0x080209b0
 80045f4:	08020b0c 	.word	0x08020b0c

080045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, BufferFlushTest)
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	601a      	str	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	605a      	str	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fd00 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004614:	4a03      	ldr	r2, [pc, #12]	; (8004624 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev+0x2c>)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4618      	mov	r0, r3
 800461e:	3708      	adds	r7, #8
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	08023ee0 	.word	0x08023ee0

08004628 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv>:
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	225c      	movs	r2, #92	; 0x5c
 8004632:	4906      	ldr	r1, [pc, #24]	; (800464c <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShell10createTestEv+0x24>)
 8004634:	2008      	movs	r0, #8
 8004636:	f003 fa07 	bl	8007a48 <_ZnwjPKci>
 800463a:	4604      	mov	r4, r0
 800463c:	4620      	mov	r0, r4
 800463e:	f7ff ffdb 	bl	80045f8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestC1Ev>
 8004642:	4623      	mov	r3, r4
 8004644:	4618      	mov	r0, r3
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bd90      	pop	{r4, r7, pc}
 800464c:	080209b0 	.word	0x080209b0

08004650 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>:
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4618      	mov	r0, r3
 800465c:	f00b fde2 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004660:	4a03      	ldr	r2, [pc, #12]	; (8004670 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev+0x20>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	3708      	adds	r7, #8
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08023e34 	.word	0x08023e34

08004674 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv>:
{
 8004674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004676:	b089      	sub	sp, #36	; 0x24
 8004678:	af04      	add	r7, sp, #16
 800467a:	6078      	str	r0, [r7, #4]

	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800467c:	2300      	movs	r3, #0
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	429a      	cmp	r2, r3
 800468a:	d20b      	bcs.n	80046a4 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0x30>
	{
		ringBuffer_push(testBuf,(uint8_t)i);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	b2d2      	uxtb	r2, r2
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fa07 	bl	8003aaa <ringBuffer_push>
	for(uint32_t i = 0;i < testBuf->size;i++)  // fill the buffer
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3301      	adds	r3, #1
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	e7ed      	b.n	8004680 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xc>
	}
	LONGS_EQUAL(49,testBuf->buffer[testBuf->size - 1]);
 80046a4:	f00d f976 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80046a8:	4604      	mov	r4, r0
 80046aa:	6823      	ldr	r3, [r4, #0]
 80046ac:	3338      	adds	r3, #56	; 0x38
 80046ae:	681d      	ldr	r5, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	3b01      	subs	r3, #1
 80046be:	4413      	add	r3, r2
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	461e      	mov	r6, r3
 80046c4:	f00d f976 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80046c8:	4603      	mov	r3, r0
 80046ca:	9302      	str	r3, [sp, #8]
 80046cc:	2363      	movs	r3, #99	; 0x63
 80046ce:	9301      	str	r3, [sp, #4]
 80046d0:	4b24      	ldr	r3, [pc, #144]	; (8004764 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	4b24      	ldr	r3, [pc, #144]	; (8004768 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf4>)
 80046d6:	4632      	mov	r2, r6
 80046d8:	2131      	movs	r1, #49	; 0x31
 80046da:	4620      	mov	r0, r4
 80046dc:	47a8      	blx	r5

	ringBuffer_flush(testBuf);  // clear the buffer
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fa35 	bl	8003b52 <ringBuffer_flush>

	LONGS_EQUAL(0,testBuf->buffer[testBuf->size - 1]);
 80046e8:	f00d f954 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80046ec:	4604      	mov	r4, r0
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	3338      	adds	r3, #56	; 0x38
 80046f2:	681d      	ldr	r5, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	3b01      	subs	r3, #1
 8004702:	4413      	add	r3, r2
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461e      	mov	r6, r3
 8004708:	f00d f954 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800470c:	4603      	mov	r3, r0
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	2367      	movs	r3, #103	; 0x67
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	4b13      	ldr	r3, [pc, #76]	; (8004764 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4b14      	ldr	r3, [pc, #80]	; (800476c <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf8>)
 800471a:	4632      	mov	r2, r6
 800471c:	2100      	movs	r1, #0
 800471e:	4620      	mov	r0, r4
 8004720:	47a8      	blx	r5
	LONGS_EQUAL(0,testBuf->buffer[testBuf->size/2]);    // check random value  (buffer[25]);
 8004722:	f00d f937 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004726:	4604      	mov	r4, r0
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	3338      	adds	r3, #56	; 0x38
 800472c:	681d      	ldr	r5, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68da      	ldr	r2, [r3, #12]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	461e      	mov	r6, r3
 8004742:	f00d f937 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004746:	4603      	mov	r3, r0
 8004748:	9302      	str	r3, [sp, #8]
 800474a:	2368      	movs	r3, #104	; 0x68
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	4b05      	ldr	r3, [pc, #20]	; (8004764 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xf0>)
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	4b07      	ldr	r3, [pc, #28]	; (8004770 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_Test8testBodyEv+0xfc>)
 8004754:	4632      	mov	r2, r6
 8004756:	2100      	movs	r1, #0
 8004758:	4620      	mov	r0, r4
 800475a:	47a8      	blx	r5
//	for(uint32_t i = 0;i < testBuf->size;i++)  // check all elements of the buffer
//	{
//		LONGS_EQUAL(0,testBuf->buffer[i]);
//	}

}
 800475c:	bf00      	nop
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004764:	080209b0 	.word	0x080209b0
 8004768:	08020b2c 	.word	0x08020b2c
 800476c:	08020b68 	.word	0x08020b68
 8004770:	08020ba4 	.word	0x08020ba4

08004774 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, PushArrayTest)
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fc42 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004790:	4a03      	ldr	r2, [pc, #12]	; (80047a0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev+0x2c>)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4618      	mov	r0, r3
 800479a:	3708      	adds	r7, #8
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	08023e14 	.word	0x08023e14

080047a4 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv>:
 80047a4:	b590      	push	{r4, r7, lr}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	2271      	movs	r2, #113	; 0x71
 80047ae:	4906      	ldr	r1, [pc, #24]	; (80047c8 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShell10createTestEv+0x24>)
 80047b0:	2008      	movs	r0, #8
 80047b2:	f003 f949 	bl	8007a48 <_ZnwjPKci>
 80047b6:	4604      	mov	r4, r0
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ffdb 	bl	8004774 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestC1Ev>
 80047be:	4623      	mov	r3, r4
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd90      	pop	{r4, r7, pc}
 80047c8:	080209b0 	.word	0x080209b0

080047cc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>:
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f00b fd24 	bl	8010224 <_ZN10UtestShellC1Ev>
 80047dc:	4a03      	ldr	r2, [pc, #12]	; (80047ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev+0x20>)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4618      	mov	r0, r3
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	08023d68 	.word	0x08023d68

080047f0 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv>:
{
 80047f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af04      	add	r7, sp, #16
 80047f6:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Test");
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	490e      	ldr	r1, [pc, #56]	; (8004838 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f9b7 	bl	8003b72 <ringBuffer_pushArray>

	STRCMP_EQUAL("Test",(char*)testBuf->buffer);
 8004804:	f00d f8c6 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004808:	4604      	mov	r4, r0
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	3324      	adds	r3, #36	; 0x24
 800480e:	681d      	ldr	r5, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	68de      	ldr	r6, [r3, #12]
 8004816:	f00d f8cd 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800481a:	4603      	mov	r3, r0
 800481c:	9302      	str	r3, [sp, #8]
 800481e:	2375      	movs	r3, #117	; 0x75
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	4b06      	ldr	r3, [pc, #24]	; (800483c <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x4c>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	2300      	movs	r3, #0
 8004828:	4632      	mov	r2, r6
 800482a:	4903      	ldr	r1, [pc, #12]	; (8004838 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_Test8testBodyEv+0x48>)
 800482c:	4620      	mov	r0, r4
 800482e:	47a8      	blx	r5
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004838:	08020bdc 	.word	0x08020bdc
 800483c:	080209b0 	.word	0x080209b0

08004840 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, LookForTest)
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	605a      	str	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fbdc 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 800485c:	4a03      	ldr	r2, [pc, #12]	; (800486c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev+0x2c>)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	08023d48 	.word	0x08023d48

08004870 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv>:
 8004870:	b590      	push	{r4, r7, lr}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	2278      	movs	r2, #120	; 0x78
 800487a:	4906      	ldr	r1, [pc, #24]	; (8004894 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShell10createTestEv+0x24>)
 800487c:	2008      	movs	r0, #8
 800487e:	f003 f8e3 	bl	8007a48 <_ZnwjPKci>
 8004882:	4604      	mov	r4, r0
 8004884:	4620      	mov	r0, r4
 8004886:	f7ff ffdb 	bl	8004840 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestC1Ev>
 800488a:	4623      	mov	r3, r4
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bd90      	pop	{r4, r7, pc}
 8004894:	080209b0 	.word	0x080209b0

08004898 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>:
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f00b fcbe 	bl	8010224 <_ZN10UtestShellC1Ev>
 80048a8:	4a03      	ldr	r2, [pc, #12]	; (80048b8 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev+0x20>)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4618      	mov	r0, r3
 80048b2:	3708      	adds	r7, #8
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	08023c9c 	.word	0x08023c9c

080048bc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv>:
{
 80048bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c0:	b08a      	sub	sp, #40	; 0x28
 80048c2:	af04      	add	r7, sp, #16
 80048c4:	6078      	str	r0, [r7, #4]
	ringBuffer_pushArray(testBuf, (uint8_t*)"Hello World");
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	494e      	ldr	r1, [pc, #312]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7ff f950 	bl	8003b72 <ringBuffer_pushArray>

	STRCMP_EQUAL("Hello World",(char*)testBuf->buffer);
 80048d2:	f00d f85f 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80048d6:	4604      	mov	r4, r0
 80048d8:	6823      	ldr	r3, [r4, #0]
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	681d      	ldr	r5, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	68de      	ldr	r6, [r3, #12]
 80048e4:	f00d f866 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80048e8:	4603      	mov	r3, r0
 80048ea:	9302      	str	r3, [sp, #8]
 80048ec:	237c      	movs	r3, #124	; 0x7c
 80048ee:	9301      	str	r3, [sp, #4]
 80048f0:	4b45      	ldr	r3, [pc, #276]	; (8004a08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	4632      	mov	r2, r6
 80048f8:	4942      	ldr	r1, [pc, #264]	; (8004a04 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x148>)
 80048fa:	4620      	mov	r0, r4
 80048fc:	47a8      	blx	r5
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4942      	ldr	r1, [pc, #264]	; (8004a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004904:	4618      	mov	r0, r3
 8004906:	f7ff f953 	bl	8003bb0 <ringBuffer_lookFor>
 800490a:	4603      	mov	r3, r0
 800490c:	2b01      	cmp	r3, #1
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d05c      	beq.n	80049d4 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x118>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	493b      	ldr	r1, [pc, #236]	; (8004a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff f945 	bl	8003bb0 <ringBuffer_lookFor>
 8004926:	4604      	mov	r4, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4937      	ldr	r1, [pc, #220]	; (8004a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f93e 	bl	8003bb0 <ringBuffer_lookFor>
 8004934:	4603      	mov	r3, r0
 8004936:	429c      	cmp	r4, r3
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x9a>
 8004944:	f00d f826 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004948:	6803      	ldr	r3, [r0, #0]
 800494a:	3370      	adds	r3, #112	; 0x70
 800494c:	681c      	ldr	r4, [r3, #0]
 800494e:	237d      	movs	r3, #125	; 0x7d
 8004950:	4a2d      	ldr	r2, [pc, #180]	; (8004a08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 8004952:	492f      	ldr	r1, [pc, #188]	; (8004a10 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x154>)
 8004954:	47a0      	blx	r4
 8004956:	f00d f81d 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 800495a:	4604      	mov	r4, r0
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	3358      	adds	r3, #88	; 0x58
 8004960:	681d      	ldr	r5, [r3, #0]
 8004962:	f107 0308 	add.w	r3, r7, #8
 8004966:	2101      	movs	r1, #1
 8004968:	4618      	mov	r0, r3
 800496a:	f006 faaf 	bl	800aecc <_Z10StringFromi>
 800496e:	f107 0308 	add.w	r3, r7, #8
 8004972:	4618      	mov	r0, r3
 8004974:	f005 ffb6 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8004978:	4606      	mov	r6, r0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	4923      	ldr	r1, [pc, #140]	; (8004a0c <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x150>)
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f915 	bl	8003bb0 <ringBuffer_lookFor>
 8004986:	4602      	mov	r2, r0
 8004988:	f107 0310 	add.w	r3, r7, #16
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f006 fd16 	bl	800b3c0 <_Z10StringFromm>
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	4618      	mov	r0, r3
 800499a:	f005 ffa3 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800499e:	4680      	mov	r8, r0
 80049a0:	f00d f808 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049a4:	4603      	mov	r3, r0
 80049a6:	9303      	str	r3, [sp, #12]
 80049a8:	237d      	movs	r3, #125	; 0x7d
 80049aa:	9302      	str	r3, [sp, #8]
 80049ac:	4b16      	ldr	r3, [pc, #88]	; (8004a08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	2300      	movs	r3, #0
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	4643      	mov	r3, r8
 80049b6:	4632      	mov	r2, r6
 80049b8:	2101      	movs	r1, #1
 80049ba:	4620      	mov	r0, r4
 80049bc:	47a8      	blx	r5
 80049be:	f107 0310 	add.w	r3, r7, #16
 80049c2:	4618      	mov	r0, r3
 80049c4:	f005 ffbb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80049c8:	f107 0308 	add.w	r3, r7, #8
 80049cc:	4618      	mov	r0, r3
 80049ce:	f005 ffb6 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80049d2:	e012      	b.n	80049fa <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x13e>
	CHECK_EQUAL(1,ringBuffer_lookFor(testBuf, (uint8_t*)"World"));
 80049d4:	f00c ffde 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80049d8:	4604      	mov	r4, r0
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	3338      	adds	r3, #56	; 0x38
 80049de:	681d      	ldr	r5, [r3, #0]
 80049e0:	f00c ffe8 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80049e4:	4603      	mov	r3, r0
 80049e6:	9302      	str	r3, [sp, #8]
 80049e8:	237d      	movs	r3, #125	; 0x7d
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_Test8testBodyEv+0x14c>)
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	2300      	movs	r3, #0
 80049f2:	2200      	movs	r2, #0
 80049f4:	2100      	movs	r1, #0
 80049f6:	4620      	mov	r0, r4
 80049f8:	47a8      	blx	r5
}
 80049fa:	bf00      	nop
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a04:	08020be4 	.word	0x08020be4
 8004a08:	080209b0 	.word	0x080209b0
 8004a0c:	08020bf0 	.word	0x08020bf0
 8004a10:	08020bf8 	.word	0x08020bf8

08004a14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>:

TEST(RingBuffer_Test_Group, CapacityTest)
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7ff faf2 	bl	8004014 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupC1Ev>
 8004a30:	4a03      	ldr	r2, [pc, #12]	; (8004a40 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev+0x2c>)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3708      	adds	r7, #8
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	08023c7c 	.word	0x08023c7c

08004a44 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv>:
 8004a44:	b590      	push	{r4, r7, lr}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	2280      	movs	r2, #128	; 0x80
 8004a4e:	4906      	ldr	r1, [pc, #24]	; (8004a68 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShell10createTestEv+0x24>)
 8004a50:	2008      	movs	r0, #8
 8004a52:	f002 fff9 	bl	8007a48 <_ZnwjPKci>
 8004a56:	4604      	mov	r4, r0
 8004a58:	4620      	mov	r0, r4
 8004a5a:	f7ff ffdb 	bl	8004a14 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestC1Ev>
 8004a5e:	4623      	mov	r3, r4
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	080209b0 	.word	0x080209b0

08004a6c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>:
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f00b fbd4 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004a7c:	4a03      	ldr	r2, [pc, #12]	; (8004a8c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev+0x20>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4618      	mov	r0, r3
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	08023bd0 	.word	0x08023bd0

08004a90 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv>:
{
 8004a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af04      	add	r7, sp, #16
 8004a96:	6078      	str	r0, [r7, #4]

	LONGS_EQUAL(50,ringBuffer_capacity(testBuf));
 8004a98:	f00c ff7c 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004a9c:	4604      	mov	r4, r0
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	3338      	adds	r3, #56	; 0x38
 8004aa2:	681d      	ldr	r5, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff f897 	bl	8003bdc <ringBuffer_capacity>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	461e      	mov	r6, r3
 8004ab2:	f00c ff7f 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	9302      	str	r3, [sp, #8]
 8004aba:	2383      	movs	r3, #131	; 0x83
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x44>)
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4b05      	ldr	r3, [pc, #20]	; (8004ad8 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_Test8testBodyEv+0x48>)
 8004ac4:	4632      	mov	r2, r6
 8004ac6:	2132      	movs	r1, #50	; 0x32
 8004ac8:	4620      	mov	r0, r4
 8004aca:	47a8      	blx	r5

}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad4:	080209b0 	.word	0x080209b0
 8004ad8:	08020c9c 	.word	0x08020c9c

08004adc <_Z18UART_Transmit_FakePh>:

//char TxString[50];

void UART_Transmit_Fake(uint8_t* data)
{
 8004adc:	b5b0      	push	{r4, r5, r7, lr}
 8004ade:	b088      	sub	sp, #32
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
	mock().actualCall("UART_Transmit_Fake").withParameter("data", data);
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	491c      	ldr	r1, [pc, #112]	; (8004b5c <_Z18UART_Transmit_FakePh+0x80>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f005 fb6f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004af0:	f107 0308 	add.w	r3, r7, #8
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f003 fc42 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004afc:	4604      	mov	r4, r0
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	3318      	adds	r3, #24
 8004b02:	681d      	ldr	r5, [r3, #0]
 8004b04:	f107 0310 	add.w	r3, r7, #16
 8004b08:	4915      	ldr	r1, [pc, #84]	; (8004b60 <_Z18UART_Transmit_FakePh+0x84>)
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f005 fb5f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004b10:	f107 0310 	add.w	r3, r7, #16
 8004b14:	4619      	mov	r1, r3
 8004b16:	4620      	mov	r0, r4
 8004b18:	47a8      	blx	r5
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	f107 0318 	add.w	r3, r7, #24
 8004b20:	4910      	ldr	r1, [pc, #64]	; (8004b64 <_Z18UART_Transmit_FakePh+0x88>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f005 fb53 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004b28:	f107 0318 	add.w	r3, r7, #24
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4620      	mov	r0, r4
 8004b32:	f7ff fa2e 	bl	8003f92 <_ZN14MockActualCall13withParameterERK12SimpleStringPv>
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f005 feff 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004b40:	f107 0310 	add.w	r3, r7, #16
 8004b44:	4618      	mov	r0, r3
 8004b46:	f005 fefa 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004b4a:	f107 0308 	add.w	r3, r7, #8
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f005 fef5 	bl	800a93e <_ZN12SimpleStringD1Ev>
	//memcpy(TxString,data,sizeof(data));
}
 8004b54:	bf00      	nop
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b5c:	08020cd4 	.word	0x08020cd4
 8004b60:	08020cd8 	.word	0x08020cd8
 8004b64:	08020cec 	.word	0x08020cec

08004b68 <_Z17UART_Receive_Fakev>:
uint8_t UART_Receive_Fake(void)
{
 8004b68:	b5b0      	push	{r4, r5, r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0

	return mock().actualCall("UART_Receive_Fake").returnIntValue();
 8004b6e:	463b      	mov	r3, r7
 8004b70:	4916      	ldr	r1, [pc, #88]	; (8004bcc <_Z17UART_Receive_Fakev+0x64>)
 8004b72:	4618      	mov	r0, r3
 8004b74:	f005 fb2b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004b78:	463b      	mov	r3, r7
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f003 fbff 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004b82:	4604      	mov	r4, r0
 8004b84:	6823      	ldr	r3, [r4, #0]
 8004b86:	3318      	adds	r3, #24
 8004b88:	681d      	ldr	r5, [r3, #0]
 8004b8a:	f107 0308 	add.w	r3, r7, #8
 8004b8e:	4910      	ldr	r1, [pc, #64]	; (8004bd0 <_Z17UART_Receive_Fakev+0x68>)
 8004b90:	4618      	mov	r0, r3
 8004b92:	f005 fb1c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004b96:	f107 0308 	add.w	r3, r7, #8
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	47a8      	blx	r5
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	3264      	adds	r2, #100	; 0x64
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	4790      	blx	r2
 8004bac:	4603      	mov	r3, r0
 8004bae:	b2dc      	uxtb	r4, r3
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f005 fec2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004bba:	463b      	mov	r3, r7
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f005 febe 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004bc2:	4623      	mov	r3, r4
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bdb0      	pop	{r4, r5, r7, pc}
 8004bcc:	08020cd4 	.word	0x08020cd4
 8004bd0:	08020cf4 	.word	0x08020cf4

08004bd4 <_Z12getTick_Fakev>:

uint32_t time=0;

uint32_t getTick_Fake(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
	if(time == 0xFFFFFFFF)
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <_Z12getTick_Fakev+0x30>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be0:	d103      	bne.n	8004bea <_Z12getTick_Fakev+0x16>
		time = 0;
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_Z12getTick_Fakev+0x30>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e004      	b.n	8004bf4 <_Z12getTick_Fakev+0x20>
	else
		time += 1;
 8004bea:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <_Z12getTick_Fakev+0x30>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4a04      	ldr	r2, [pc, #16]	; (8004c04 <_Z12getTick_Fakev+0x30>)
 8004bf2:	6013      	str	r3, [r2, #0]
	return time;
 8004bf4:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <_Z12getTick_Fakev+0x30>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200005b0 	.word	0x200005b0

08004c08 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv>:
TEST_GROUP(EspDriver_Test_Group)
{



	void setup()
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	{
		ESP_Init(UART_Transmit_Fake,
 8004c10:	2364      	movs	r3, #100	; 0x64
 8004c12:	4a04      	ldr	r2, [pc, #16]	; (8004c24 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x1c>)
 8004c14:	4904      	ldr	r1, [pc, #16]	; (8004c28 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x20>)
 8004c16:	4805      	ldr	r0, [pc, #20]	; (8004c2c <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group5setupEv+0x24>)
 8004c18:	f7fe fe76 	bl	8003908 <ESP_Init>
				  UART_Receive_Fake,
				  getTick_Fake,
				  100);

	}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	08004bd5 	.word	0x08004bd5
 8004c28:	08004b69 	.word	0x08004b69
 8004c2c:	08004add 	.word	0x08004add

08004c30 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv>:

	void teardown()
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
	{

		mock().clear();
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	490c      	ldr	r1, [pc, #48]	; (8004c70 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_Group8teardownEv+0x40>)
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f005 fac5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004c44:	f107 0308 	add.w	r3, r7, #8
 8004c48:	2100      	movs	r1, #0
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f003 fb98 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004c50:	4603      	mov	r3, r0
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	329c      	adds	r2, #156	; 0x9c
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	4790      	blx	r2
 8004c5c:	f107 0308 	add.w	r3, r7, #8
 8004c60:	4618      	mov	r0, r3
 8004c62:	f005 fe6c 	bl	800a93e <_ZN12SimpleStringD1Ev>
	}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	08020cd4 	.word	0x08020cd4

08004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>:
TEST_GROUP(EspDriver_Test_Group)
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f00c feb2 	bl	80119e8 <_ZN5UtestC1Ev>
 8004c84:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev+0x20>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08023bb0 	.word	0x08023bb0

08004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>:
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	4a05      	ldr	r2, [pc, #20]	; (8004cb8 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev+0x20>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f00c fead 	bl	8011a08 <_ZN5UtestD1Ev>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	08023bb0 	.word	0x08023bb0

08004cbc <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD0Ev>:
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f7ff ffe7 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8004cca:	2104      	movs	r1, #4
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f002 fecf 	bl	8007a70 <_ZdlPvj>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>:


};

TEST(EspDriver_Test_Group, Esp_Init_Test)
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff ffc4 	bl	8004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004cec:	4a03      	ldr	r2, [pc, #12]	; (8004cfc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev+0x20>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	08023b90 	.word	0x08023b90

08004d00 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv>:
 8004d00:	b590      	push	{r4, r7, lr}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	22b8      	movs	r2, #184	; 0xb8
 8004d0a:	4906      	ldr	r1, [pc, #24]	; (8004d24 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShell10createTestEv+0x24>)
 8004d0c:	2004      	movs	r0, #4
 8004d0e:	f002 fe9b 	bl	8007a48 <_ZnwjPKci>
 8004d12:	4604      	mov	r4, r0
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7ff ffe1 	bl	8004cdc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestC1Ev>
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd90      	pop	{r4, r7, pc}
 8004d24:	080209b0 	.word	0x080209b0

08004d28 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>:
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f00b fa76 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004d38:	4a03      	ldr	r2, [pc, #12]	; (8004d48 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev+0x20>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08023ae4 	.word	0x08023ae4

08004d4c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv>:
{
 8004d4c:	b5b0      	push	{r4, r5, r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af04      	add	r7, sp, #16
 8004d52:	6078      	str	r0, [r7, #4]

	transmit = UART_Transmit_Fake; // or you can pass UART_Transmit_Fake as a parameter to the function instead of transmit.
 8004d54:	4b10      	ldr	r3, [pc, #64]	; (8004d98 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d56:	4a11      	ldr	r2, [pc, #68]	; (8004d9c <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x50>)
 8004d58:	601a      	str	r2, [r3, #0]
	int result = ESP_Init(transmit,
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x4c>)
 8004d5c:	6818      	ldr	r0, [r3, #0]
 8004d5e:	2364      	movs	r3, #100	; 0x64
 8004d60:	4a0f      	ldr	r2, [pc, #60]	; (8004da0 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x54>)
 8004d62:	4910      	ldr	r1, [pc, #64]	; (8004da4 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x58>)
 8004d64:	f7fe fdd0 	bl	8003908 <ESP_Init>
 8004d68:	60f8      	str	r0, [r7, #12]
//	int result = ESP_Init(UART_Transmit_Fake,
//						  UART_Receive_Fake,
//						  getTick_Fake,
//	  	  	  	  	  	  100);

	LONGS_EQUAL(1,result);
 8004d6a:	f00c fe13 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	3338      	adds	r3, #56	; 0x38
 8004d74:	681d      	ldr	r5, [r3, #0]
 8004d76:	f00c fe1d 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	9302      	str	r3, [sp, #8]
 8004d7e:	23c6      	movs	r3, #198	; 0xc6
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x5c>)
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_Test8testBodyEv+0x60>)
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	4620      	mov	r0, r4
 8004d8e:	47a8      	blx	r5

}
 8004d90:	bf00      	nop
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bdb0      	pop	{r4, r5, r7, pc}
 8004d98:	200005b4 	.word	0x200005b4
 8004d9c:	08004add 	.word	0x08004add
 8004da0:	08004bd5 	.word	0x08004bd5
 8004da4:	08004b69 	.word	0x08004b69
 8004da8:	080209b0 	.word	0x080209b0
 8004dac:	08020d08 	.word	0x08020d08

08004db0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7ff ff5a 	bl	8004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004dc0:	4a03      	ldr	r2, [pc, #12]	; (8004dd0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev+0x20>)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	08023ac4 	.word	0x08023ac4

08004dd4 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv>:
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	22ca      	movs	r2, #202	; 0xca
 8004dde:	4906      	ldr	r1, [pc, #24]	; (8004df8 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShell10createTestEv+0x24>)
 8004de0:	2004      	movs	r0, #4
 8004de2:	f002 fe31 	bl	8007a48 <_ZnwjPKci>
 8004de6:	4604      	mov	r4, r0
 8004de8:	4620      	mov	r0, r4
 8004dea:	f7ff ffe1 	bl	8004db0 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestC1Ev>
 8004dee:	4623      	mov	r3, r4
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	080209b0 	.word	0x080209b0

08004dfc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>:
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f00b fa0c 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004e0c:	4a03      	ldr	r2, [pc, #12]	; (8004e1c <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev+0x20>)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	08023a18 	.word	0x08023a18

08004e20 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv>:
{
 8004e20:	b5b0      	push	{r4, r5, r7, lr}
 8004e22:	b090      	sub	sp, #64	; 0x40
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"Test");
 8004e28:	f107 0308 	add.w	r3, r7, #8
 8004e2c:	4947      	ldr	r1, [pc, #284]	; (8004f4c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f005 f9cd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004e34:	f107 0308 	add.w	r3, r7, #8
 8004e38:	2100      	movs	r1, #0
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f003 faa0 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004e40:	4604      	mov	r4, r0
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	681d      	ldr	r5, [r3, #0]
 8004e48:	f107 0310 	add.w	r3, r7, #16
 8004e4c:	4940      	ldr	r1, [pc, #256]	; (8004f50 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f005 f9bd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004e54:	f107 0310 	add.w	r3, r7, #16
 8004e58:	4619      	mov	r1, r3
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	47a8      	blx	r5
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f107 0318 	add.w	r3, r7, #24
 8004e64:	493b      	ldr	r1, [pc, #236]	; (8004f54 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004e66:	4618      	mov	r0, r3
 8004e68:	f005 f9b1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004e6c:	f107 0318 	add.w	r3, r7, #24
 8004e70:	4a39      	ldr	r2, [pc, #228]	; (8004f58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004e72:	4619      	mov	r1, r3
 8004e74:	4620      	mov	r0, r4
 8004e76:	f7ff f89f 	bl	8003fb8 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004e7a:	f107 0318 	add.w	r3, r7, #24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f005 fd5d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004e84:	f107 0310 	add.w	r3, r7, #16
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f005 fd58 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004e8e:	f107 0308 	add.w	r3, r7, #8
 8004e92:	4618      	mov	r0, r3
 8004e94:	f005 fd53 	bl	800a93e <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"Test");
 8004e98:	482f      	ldr	r0, [pc, #188]	; (8004f58 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x138>)
 8004e9a:	f7fe fd61 	bl	8003960 <Send_AT_Command>
	//STRCMP_EQUAL("Test",TxString);
	mock().expectOneCall("UART_Transmit_Fake").withParameter("data", (uint8_t *)"AT\r\n");
 8004e9e:	f107 0320 	add.w	r3, r7, #32
 8004ea2:	492a      	ldr	r1, [pc, #168]	; (8004f4c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f005 f992 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004eaa:	f107 0320 	add.w	r3, r7, #32
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f003 fa65 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	6823      	ldr	r3, [r4, #0]
 8004eba:	330c      	adds	r3, #12
 8004ebc:	681d      	ldr	r5, [r3, #0]
 8004ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec2:	4923      	ldr	r1, [pc, #140]	; (8004f50 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x130>)
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f005 f982 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004eca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	47a8      	blx	r5
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004eda:	491e      	ldr	r1, [pc, #120]	; (8004f54 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x134>)
 8004edc:	4618      	mov	r0, r3
 8004ede:	f005 f976 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004ee2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ee6:	4a1d      	ldr	r2, [pc, #116]	; (8004f5c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4620      	mov	r0, r4
 8004eec:	f7ff f864 	bl	8003fb8 <_ZN16MockExpectedCall13withParameterERK12SimpleStringPv>
 8004ef0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f005 fd22 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efe:	4618      	mov	r0, r3
 8004f00:	f005 fd1d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8004f04:	f107 0320 	add.w	r3, r7, #32
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f005 fd18 	bl	800a93e <_ZN12SimpleStringD1Ev>
	Send_AT_Command((char*)"AT\r\n");
 8004f0e:	4813      	ldr	r0, [pc, #76]	; (8004f5c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x13c>)
 8004f10:	f7fe fd26 	bl	8003960 <Send_AT_Command>
	mock().checkExpectations();
 8004f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f18:	490c      	ldr	r1, [pc, #48]	; (8004f4c <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_Test8testBodyEv+0x12c>)
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f005 f957 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004f20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 fa2a 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	3294      	adds	r2, #148	; 0x94
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4618      	mov	r0, r3
 8004f36:	4790      	blx	r2
 8004f38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f005 fcfe 	bl	800a93e <_ZN12SimpleStringD1Ev>

}
 8004f42:	bf00      	nop
 8004f44:	3740      	adds	r7, #64	; 0x40
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bdb0      	pop	{r4, r5, r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	08020cd4 	.word	0x08020cd4
 8004f50:	08020cd8 	.word	0x08020cd8
 8004f54:	08020cec 	.word	0x08020cec
 8004f58:	08020bdc 	.word	0x08020bdc
 8004f5c:	08020d28 	.word	0x08020d28

08004f60 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fe82 	bl	8004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8004f70:	4a03      	ldr	r2, [pc, #12]	; (8004f80 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev+0x20>)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3708      	adds	r7, #8
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	080239f8 	.word	0x080239f8

08004f84 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv>:
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	22d5      	movs	r2, #213	; 0xd5
 8004f8e:	4906      	ldr	r1, [pc, #24]	; (8004fa8 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShell10createTestEv+0x24>)
 8004f90:	2004      	movs	r0, #4
 8004f92:	f002 fd59 	bl	8007a48 <_ZnwjPKci>
 8004f96:	4604      	mov	r4, r0
 8004f98:	4620      	mov	r0, r4
 8004f9a:	f7ff ffe1 	bl	8004f60 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestC1Ev>
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}
 8004fa8:	080209b0 	.word	0x080209b0

08004fac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>:
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f00b f934 	bl	8010224 <_ZN10UtestShellC1Ev>
 8004fbc:	4a03      	ldr	r2, [pc, #12]	; (8004fcc <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev+0x20>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	0802394c 	.word	0x0802394c

08004fd0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv>:
{
 8004fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fd2:	b099      	sub	sp, #100	; 0x64
 8004fd4:	af04      	add	r7, sp, #16
 8004fd6:	6078      	str	r0, [r7, #4]

	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'O');
 8004fd8:	f107 0308 	add.w	r3, r7, #8
 8004fdc:	4973      	ldr	r1, [pc, #460]	; (80051ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f005 f8f5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8004fe4:	f107 0308 	add.w	r3, r7, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	4618      	mov	r0, r3
 8004fec:	f003 f9c8 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8004ff0:	4604      	mov	r4, r0
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	330c      	adds	r3, #12
 8004ff6:	681d      	ldr	r5, [r3, #0]
 8004ff8:	f107 0310 	add.w	r3, r7, #16
 8004ffc:	496c      	ldr	r1, [pc, #432]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8004ffe:	4618      	mov	r0, r3
 8005000:	f005 f8e5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005004:	f107 0310 	add.w	r3, r7, #16
 8005008:	4619      	mov	r1, r3
 800500a:	4620      	mov	r0, r4
 800500c:	47a8      	blx	r5
 800500e:	4603      	mov	r3, r0
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	3264      	adds	r2, #100	; 0x64
 8005014:	6812      	ldr	r2, [r2, #0]
 8005016:	214f      	movs	r1, #79	; 0x4f
 8005018:	4618      	mov	r0, r3
 800501a:	4790      	blx	r2
 800501c:	f107 0310 	add.w	r3, r7, #16
 8005020:	4618      	mov	r0, r3
 8005022:	f005 fc8c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8005026:	f107 0308 	add.w	r3, r7, #8
 800502a:	4618      	mov	r0, r3
 800502c:	f005 fc87 	bl	800a93e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005030:	f7fe fca4 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'K');
 8005034:	f107 0318 	add.w	r3, r7, #24
 8005038:	495c      	ldr	r1, [pc, #368]	; (80051ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800503a:	4618      	mov	r0, r3
 800503c:	f005 f8c7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005040:	f107 0318 	add.w	r3, r7, #24
 8005044:	2100      	movs	r1, #0
 8005046:	4618      	mov	r0, r3
 8005048:	f003 f99a 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800504c:	4604      	mov	r4, r0
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	330c      	adds	r3, #12
 8005052:	681d      	ldr	r5, [r3, #0]
 8005054:	f107 0320 	add.w	r3, r7, #32
 8005058:	4955      	ldr	r1, [pc, #340]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 800505a:	4618      	mov	r0, r3
 800505c:	f005 f8b7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005060:	f107 0320 	add.w	r3, r7, #32
 8005064:	4619      	mov	r1, r3
 8005066:	4620      	mov	r0, r4
 8005068:	47a8      	blx	r5
 800506a:	4603      	mov	r3, r0
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	3264      	adds	r2, #100	; 0x64
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	214b      	movs	r1, #75	; 0x4b
 8005074:	4618      	mov	r0, r3
 8005076:	4790      	blx	r2
 8005078:	f107 0320 	add.w	r3, r7, #32
 800507c:	4618      	mov	r0, r3
 800507e:	f005 fc5e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8005082:	f107 0318 	add.w	r3, r7, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f005 fc59 	bl	800a93e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 800508c:	f7fe fc76 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\r');
 8005090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005094:	4945      	ldr	r1, [pc, #276]	; (80051ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 8005096:	4618      	mov	r0, r3
 8005098:	f005 f899 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800509c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 f96c 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80050a8:	4604      	mov	r4, r0
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	681d      	ldr	r5, [r3, #0]
 80050b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050b4:	493e      	ldr	r1, [pc, #248]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 80050b6:	4618      	mov	r0, r3
 80050b8:	f005 f889 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80050bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050c0:	4619      	mov	r1, r3
 80050c2:	4620      	mov	r0, r4
 80050c4:	47a8      	blx	r5
 80050c6:	4603      	mov	r3, r0
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	3264      	adds	r2, #100	; 0x64
 80050cc:	6812      	ldr	r2, [r2, #0]
 80050ce:	210d      	movs	r1, #13
 80050d0:	4618      	mov	r0, r3
 80050d2:	4790      	blx	r2
 80050d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80050d8:	4618      	mov	r0, r3
 80050da:	f005 fc30 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80050de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e2:	4618      	mov	r0, r3
 80050e4:	f005 fc2b 	bl	800a93e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 80050e8:	f7fe fc48 	bl	800397c <ESP_UART_ReceiveHandler>
	mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)'\n');
 80050ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050f0:	492e      	ldr	r1, [pc, #184]	; (80051ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f005 f86b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80050f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050fc:	2100      	movs	r1, #0
 80050fe:	4618      	mov	r0, r3
 8005100:	f003 f93e 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005104:	4604      	mov	r4, r0
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	681d      	ldr	r5, [r3, #0]
 800510c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005110:	4927      	ldr	r1, [pc, #156]	; (80051b0 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e0>)
 8005112:	4618      	mov	r0, r3
 8005114:	f005 f85b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005118:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800511c:	4619      	mov	r1, r3
 800511e:	4620      	mov	r0, r4
 8005120:	47a8      	blx	r5
 8005122:	4603      	mov	r3, r0
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	3264      	adds	r2, #100	; 0x64
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	210a      	movs	r1, #10
 800512c:	4618      	mov	r0, r3
 800512e:	4790      	blx	r2
 8005130:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005134:	4618      	mov	r0, r3
 8005136:	f005 fc02 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800513a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800513e:	4618      	mov	r0, r3
 8005140:	f005 fbfd 	bl	800a93e <_ZN12SimpleStringD1Ev>
	ESP_UART_ReceiveHandler();
 8005144:	f7fe fc1a 	bl	800397c <ESP_UART_ReceiveHandler>

	STRCMP_EQUAL("OK\r\n",(char*)rx_buffer->buffer);	// check the rx ring buffer.
 8005148:	f00c fc24 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 800514c:	4604      	mov	r4, r0
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	3324      	adds	r3, #36	; 0x24
 8005152:	681d      	ldr	r5, [r3, #0]
 8005154:	4b17      	ldr	r3, [pc, #92]	; (80051b4 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e4>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68de      	ldr	r6, [r3, #12]
 800515a:	f00c fc2b 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800515e:	4603      	mov	r3, r0
 8005160:	9302      	str	r3, [sp, #8]
 8005162:	23e1      	movs	r3, #225	; 0xe1
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1e8>)
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	4632      	mov	r2, r6
 800516e:	4913      	ldr	r1, [pc, #76]	; (80051bc <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1ec>)
 8005170:	4620      	mov	r0, r4
 8005172:	47a8      	blx	r5
	mock().checkExpectations();
 8005174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005178:	490c      	ldr	r1, [pc, #48]	; (80051ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_Test8testBodyEv+0x1dc>)
 800517a:	4618      	mov	r0, r3
 800517c:	f005 f827 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005180:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005184:	2100      	movs	r1, #0
 8005186:	4618      	mov	r0, r3
 8005188:	f003 f8fa 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800518c:	4603      	mov	r3, r0
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	3294      	adds	r2, #148	; 0x94
 8005192:	6812      	ldr	r2, [r2, #0]
 8005194:	4618      	mov	r0, r3
 8005196:	4790      	blx	r2
 8005198:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800519c:	4618      	mov	r0, r3
 800519e:	f005 fbce 	bl	800a93e <_ZN12SimpleStringD1Ev>

}
 80051a2:	bf00      	nop
 80051a4:	3754      	adds	r7, #84	; 0x54
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08020cd4 	.word	0x08020cd4
 80051b0:	08020cf4 	.word	0x08020cf4
 80051b4:	2000048c 	.word	0x2000048c
 80051b8:	080209b0 	.word	0x080209b0
 80051bc:	08020d30 	.word	0x08020d30

080051c0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Read_Response_Test)
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fd52 	bl	8004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 80051d0:	4a03      	ldr	r2, [pc, #12]	; (80051e0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev+0x20>)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	0802392c 	.word	0x0802392c

080051e4 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv>:
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	22e6      	movs	r2, #230	; 0xe6
 80051ee:	4906      	ldr	r1, [pc, #24]	; (8005208 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShell10createTestEv+0x24>)
 80051f0:	2004      	movs	r0, #4
 80051f2:	f002 fc29 	bl	8007a48 <_ZnwjPKci>
 80051f6:	4604      	mov	r4, r0
 80051f8:	4620      	mov	r0, r4
 80051fa:	f7ff ffe1 	bl	80051c0 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestC1Ev>
 80051fe:	4623      	mov	r3, r4
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	bd90      	pop	{r4, r7, pc}
 8005208:	080209b0 	.word	0x080209b0

0800520c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>:
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4618      	mov	r0, r3
 8005218:	f00b f804 	bl	8010224 <_ZN10UtestShellC1Ev>
 800521c:	4a03      	ldr	r2, [pc, #12]	; (800522c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev+0x20>)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	08023880 	.word	0x08023880

08005230 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv>:
{
 8005230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005232:	b093      	sub	sp, #76	; 0x4c
 8005234:	af04      	add	r7, sp, #16
 8005236:	6078      	str	r0, [r7, #4]
	char response[10] = "OK\r\n";
 8005238:	4a40      	ldr	r2, [pc, #256]	; (800533c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x10c>)
 800523a:	f107 030c 	add.w	r3, r7, #12
 800523e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005242:	6018      	str	r0, [r3, #0]
 8005244:	3304      	adds	r3, #4
 8005246:	7019      	strb	r1, [r3, #0]
 8005248:	f107 0311 	add.w	r3, r7, #17
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
 8005250:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005252:	2300      	movs	r3, #0
 8005254:	637b      	str	r3, [r7, #52]	; 0x34
 8005256:	f107 030c 	add.w	r3, r7, #12
 800525a:	4618      	mov	r0, r3
 800525c:	f7fa ffee 	bl	800023c <strlen>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005266:	4293      	cmp	r3, r2
 8005268:	da35      	bge.n	80052d6 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0xa6>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	4934      	ldr	r1, [pc, #208]	; (8005340 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 8005270:	4618      	mov	r0, r3
 8005272:	f004 ffac 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005276:	f107 0318 	add.w	r3, r7, #24
 800527a:	2100      	movs	r1, #0
 800527c:	4618      	mov	r0, r3
 800527e:	f003 f87f 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005282:	4604      	mov	r4, r0
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	330c      	adds	r3, #12
 8005288:	681d      	ldr	r5, [r3, #0]
 800528a:	f107 0320 	add.w	r3, r7, #32
 800528e:	492d      	ldr	r1, [pc, #180]	; (8005344 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x114>)
 8005290:	4618      	mov	r0, r3
 8005292:	f004 ff9c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005296:	f107 0320 	add.w	r3, r7, #32
 800529a:	4619      	mov	r1, r3
 800529c:	4620      	mov	r0, r4
 800529e:	47a8      	blx	r5
 80052a0:	4603      	mov	r3, r0
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	3264      	adds	r2, #100	; 0x64
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	f107 000c 	add.w	r0, r7, #12
 80052ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ae:	4401      	add	r1, r0
 80052b0:	7809      	ldrb	r1, [r1, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	4790      	blx	r2
 80052b6:	f107 0320 	add.w	r3, r7, #32
 80052ba:	4618      	mov	r0, r3
 80052bc:	f005 fb3f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80052c0:	f107 0318 	add.w	r3, r7, #24
 80052c4:	4618      	mov	r0, r3
 80052c6:	f005 fb3a 	bl	800a93e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 80052ca:	f7fe fb57 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 80052ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d0:	3301      	adds	r3, #1
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
 80052d4:	e7bf      	b.n	8005256 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x26>
	}

	uint32_t result = Read_Response((char*)"OK");
 80052d6:	481c      	ldr	r0, [pc, #112]	; (8005348 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x118>)
 80052d8:	f7fe fb6a 	bl	80039b0 <Read_Response>
 80052dc:	6338      	str	r0, [r7, #48]	; 0x30

	LONGS_EQUAL(1,result);
 80052de:	f00c fb59 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80052e2:	4604      	mov	r4, r0
 80052e4:	6823      	ldr	r3, [r4, #0]
 80052e6:	3338      	adds	r3, #56	; 0x38
 80052e8:	681d      	ldr	r5, [r3, #0]
 80052ea:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80052ec:	f00c fb62 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80052f0:	4603      	mov	r3, r0
 80052f2:	9302      	str	r3, [sp, #8]
 80052f4:	23f2      	movs	r3, #242	; 0xf2
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	4b14      	ldr	r3, [pc, #80]	; (800534c <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x11c>)
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x120>)
 80052fe:	4632      	mov	r2, r6
 8005300:	2101      	movs	r1, #1
 8005302:	4620      	mov	r0, r4
 8005304:	47a8      	blx	r5
	mock().checkExpectations();
 8005306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_Test8testBodyEv+0x110>)
 800530c:	4618      	mov	r0, r3
 800530e:	f004 ff5e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005316:	2100      	movs	r1, #0
 8005318:	4618      	mov	r0, r3
 800531a:	f003 f831 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 800531e:	4603      	mov	r3, r0
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	3294      	adds	r2, #148	; 0x94
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	4790      	blx	r2
 800532a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800532e:	4618      	mov	r0, r3
 8005330:	f005 fb05 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8005334:	bf00      	nop
 8005336:	373c      	adds	r7, #60	; 0x3c
 8005338:	46bd      	mov	sp, r7
 800533a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800533c:	08020d3c 	.word	0x08020d3c
 8005340:	08020cd4 	.word	0x08020cd4
 8005344:	08020cf4 	.word	0x08020cf4
 8005348:	08020d38 	.word	0x08020d38
 800534c:	080209b0 	.word	0x080209b0
 8005350:	08020d08 	.word	0x08020d08

08005354 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>:

TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	f7ff fc88 	bl	8004c74 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupC1Ev>
 8005364:	4a03      	ldr	r2, [pc, #12]	; (8005374 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev+0x20>)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4618      	mov	r0, r3
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	08023860 	.word	0x08023860

08005378 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv>:
 8005378:	b590      	push	{r4, r7, lr}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	22f6      	movs	r2, #246	; 0xf6
 8005382:	4906      	ldr	r1, [pc, #24]	; (800539c <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShell10createTestEv+0x24>)
 8005384:	2004      	movs	r0, #4
 8005386:	f002 fb5f 	bl	8007a48 <_ZnwjPKci>
 800538a:	4604      	mov	r4, r0
 800538c:	4620      	mov	r0, r4
 800538e:	f7ff ffe1 	bl	8005354 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestC1Ev>
 8005392:	4623      	mov	r3, r4
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bd90      	pop	{r4, r7, pc}
 800539c:	080209b0 	.word	0x080209b0

080053a0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>:
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f00a ff3a 	bl	8010224 <_ZN10UtestShellC1Ev>
 80053b0:	4a03      	ldr	r2, [pc, #12]	; (80053c0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev+0x20>)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	601a      	str	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	080237b4 	.word	0x080237b4

080053c4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv>:
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b093      	sub	sp, #76	; 0x4c
 80053c8:	af04      	add	r7, sp, #16
 80053ca:	6078      	str	r0, [r7, #4]

	Status result = Wait_Response((char*)"OK", 1000);
 80053cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80053d0:	4851      	ldr	r0, [pc, #324]	; (8005518 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x154>)
 80053d2:	f7fe faff 	bl	80039d4 <Wait_Response>
 80053d6:	4603      	mov	r3, r0
 80053d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	LONGS_EQUAL(TIMEOUT_ERROR,result);
 80053dc:	f00c fada 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80053e0:	4604      	mov	r4, r0
 80053e2:	6823      	ldr	r3, [r4, #0]
 80053e4:	3338      	adds	r3, #56	; 0x38
 80053e6:	681d      	ldr	r5, [r3, #0]
 80053e8:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80053ec:	f00c fae2 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80053f0:	4603      	mov	r3, r0
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	23fb      	movs	r3, #251	; 0xfb
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	4b48      	ldr	r3, [pc, #288]	; (800551c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x158>)
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4b48      	ldr	r3, [pc, #288]	; (8005520 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x15c>)
 80053fe:	4632      	mov	r2, r6
 8005400:	2102      	movs	r1, #2
 8005402:	4620      	mov	r0, r4
 8005404:	47a8      	blx	r5

	char response[10] = "OK\r\n";
 8005406:	4a47      	ldr	r2, [pc, #284]	; (8005524 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x160>)
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005410:	6018      	str	r0, [r3, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	7019      	strb	r1, [r3, #0]
 8005416:	f107 0311 	add.w	r3, r7, #17
 800541a:	2200      	movs	r2, #0
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	711a      	strb	r2, [r3, #4]

	for(int i=0;i<(int)strlen(response);i++)
 8005420:	2300      	movs	r3, #0
 8005422:	637b      	str	r3, [r7, #52]	; 0x34
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	4618      	mov	r0, r3
 800542a:	f7fa ff07 	bl	800023c <strlen>
 800542e:	4603      	mov	r3, r0
 8005430:	461a      	mov	r2, r3
 8005432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005434:	4293      	cmp	r3, r2
 8005436:	da35      	bge.n	80054a4 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0xe0>
	{
		mock().expectOneCall("UART_Receive_Fake").andReturnValue((uint8_t)response[i]);
 8005438:	f107 0318 	add.w	r3, r7, #24
 800543c:	493a      	ldr	r1, [pc, #232]	; (8005528 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x164>)
 800543e:	4618      	mov	r0, r3
 8005440:	f004 fec5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005444:	f107 0318 	add.w	r3, r7, #24
 8005448:	2100      	movs	r1, #0
 800544a:	4618      	mov	r0, r3
 800544c:	f002 ff98 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 8005450:	4604      	mov	r4, r0
 8005452:	6823      	ldr	r3, [r4, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	681d      	ldr	r5, [r3, #0]
 8005458:	f107 0320 	add.w	r3, r7, #32
 800545c:	4933      	ldr	r1, [pc, #204]	; (800552c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x168>)
 800545e:	4618      	mov	r0, r3
 8005460:	f004 feb5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8005464:	f107 0320 	add.w	r3, r7, #32
 8005468:	4619      	mov	r1, r3
 800546a:	4620      	mov	r0, r4
 800546c:	47a8      	blx	r5
 800546e:	4603      	mov	r3, r0
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	3264      	adds	r2, #100	; 0x64
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	f107 000c 	add.w	r0, r7, #12
 800547a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800547c:	4401      	add	r1, r0
 800547e:	7809      	ldrb	r1, [r1, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	4790      	blx	r2
 8005484:	f107 0320 	add.w	r3, r7, #32
 8005488:	4618      	mov	r0, r3
 800548a:	f005 fa58 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800548e:	f107 0318 	add.w	r3, r7, #24
 8005492:	4618      	mov	r0, r3
 8005494:	f005 fa53 	bl	800a93e <_ZN12SimpleStringD1Ev>
		ESP_UART_ReceiveHandler();
 8005498:	f7fe fa70 	bl	800397c <ESP_UART_ReceiveHandler>
	for(int i=0;i<(int)strlen(response);i++)
 800549c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800549e:	3301      	adds	r3, #1
 80054a0:	637b      	str	r3, [r7, #52]	; 0x34
 80054a2:	e7bf      	b.n	8005424 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x60>
	}

	result = Wait_Response((char*)"OK", 1000);
 80054a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054a8:	481b      	ldr	r0, [pc, #108]	; (8005518 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x154>)
 80054aa:	f7fe fa93 	bl	80039d4 <Wait_Response>
 80054ae:	4603      	mov	r3, r0
 80054b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	LONGS_EQUAL(FOUND,result);
 80054b4:	f00c fa6e 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80054b8:	4604      	mov	r4, r0
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	3338      	adds	r3, #56	; 0x38
 80054be:	681d      	ldr	r5, [r3, #0]
 80054c0:	f897 6033 	ldrb.w	r6, [r7, #51]	; 0x33
 80054c4:	f00c fa76 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80054c8:	4603      	mov	r3, r0
 80054ca:	9302      	str	r3, [sp, #8]
 80054cc:	f44f 7383 	mov.w	r3, #262	; 0x106
 80054d0:	9301      	str	r3, [sp, #4]
 80054d2:	4b12      	ldr	r3, [pc, #72]	; (800551c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x158>)
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4b16      	ldr	r3, [pc, #88]	; (8005530 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x16c>)
 80054d8:	4632      	mov	r2, r6
 80054da:	2100      	movs	r1, #0
 80054dc:	4620      	mov	r0, r4
 80054de:	47a8      	blx	r5
	mock().checkExpectations();
 80054e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e4:	4910      	ldr	r1, [pc, #64]	; (8005528 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_Test8testBodyEv+0x164>)
 80054e6:	4618      	mov	r0, r3
 80054e8:	f004 fe71 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80054ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054f0:	2100      	movs	r1, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	f002 ff44 	bl	8008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>
 80054f8:	4603      	mov	r3, r0
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	3294      	adds	r2, #148	; 0x94
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	4790      	blx	r2
 8005504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005508:	4618      	mov	r0, r3
 800550a:	f005 fa18 	bl	800a93e <_ZN12SimpleStringD1Ev>

}
 800550e:	bf00      	nop
 8005510:	373c      	adds	r7, #60	; 0x3c
 8005512:	46bd      	mov	sp, r7
 8005514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005516:	bf00      	nop
 8005518:	08020d38 	.word	0x08020d38
 800551c:	080209b0 	.word	0x080209b0
 8005520:	08020d48 	.word	0x08020d48
 8005524:	08020d3c 	.word	0x08020d3c
 8005528:	08020cd4 	.word	0x08020cd4
 800552c:	08020cf4 	.word	0x08020cf4
 8005530:	08020d74 	.word	0x08020d74

08005534 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	4a05      	ldr	r2, [pc, #20]	; (8005554 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev+0x20>)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4618      	mov	r0, r3
 8005546:	f00a fec1 	bl	80102cc <_ZN10UtestShellD1Ev>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	080237b4 	.word	0x080237b4

08005558 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD0Ev>:
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff ffe7 	bl	8005534 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
 8005566:	211c      	movs	r1, #28
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 fa81 	bl	8007a70 <_ZdlPvj>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>:
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	4a05      	ldr	r2, [pc, #20]	; (8005598 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev+0x20>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff fb85 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	08023860 	.word	0x08023860

0800559c <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD0Ev>:
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ffe7 	bl	8005578 <_ZN49TEST_EspDriver_Test_Group_Wait_Response_Test_TestD1Ev>
 80055aa:	2104      	movs	r1, #4
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f002 fa5f 	bl	8007a70 <_ZdlPvj>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Read_Response_Test)
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	4a05      	ldr	r2, [pc, #20]	; (80055dc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev+0x20>)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f00a fe7d 	bl	80102cc <_ZN10UtestShellD1Ev>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4618      	mov	r0, r3
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	08023880 	.word	0x08023880

080055e0 <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD0Ev>:
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff ffe7 	bl	80055bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
 80055ee:	211c      	movs	r1, #28
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f002 fa3d 	bl	8007a70 <_ZdlPvj>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>:
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	4a05      	ldr	r2, [pc, #20]	; (8005620 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev+0x20>)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fb41 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4618      	mov	r0, r3
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	0802392c 	.word	0x0802392c

08005624 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD0Ev>:
 8005624:	b580      	push	{r7, lr}
 8005626:	b082      	sub	sp, #8
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff ffe7 	bl	8005600 <_ZN49TEST_EspDriver_Test_Group_Read_Response_Test_TestD1Ev>
 8005632:	2104      	movs	r1, #4
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f002 fa1b 	bl	8007a70 <_ZdlPvj>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	3708      	adds	r7, #8
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	4a05      	ldr	r2, [pc, #20]	; (8005664 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev+0x20>)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	f00a fe39 	bl	80102cc <_ZN10UtestShellD1Ev>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	0802394c 	.word	0x0802394c

08005668 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD0Ev>:
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ffe7 	bl	8005644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
 8005676:	211c      	movs	r1, #28
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f002 f9f9 	bl	8007a70 <_ZdlPvj>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>:
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	4a05      	ldr	r2, [pc, #20]	; (80056a8 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev+0x20>)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff fafd 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	080239f8 	.word	0x080239f8

080056ac <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD0Ev>:
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ffe7 	bl	8005688 <_ZN56TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestD1Ev>
 80056ba:	2104      	movs	r1, #4
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f002 f9d7 	bl	8007a70 <_ZdlPvj>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	4a05      	ldr	r2, [pc, #20]	; (80056ec <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev+0x20>)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	601a      	str	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4618      	mov	r0, r3
 80056de:	f00a fdf5 	bl	80102cc <_ZN10UtestShellD1Ev>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	08023a18 	.word	0x08023a18

080056f0 <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD0Ev>:
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ffe7 	bl	80056cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
 80056fe:	211c      	movs	r1, #28
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f002 f9b5 	bl	8007a70 <_ZdlPvj>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>:
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	4a05      	ldr	r2, [pc, #20]	; (8005730 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev+0x20>)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fab9 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	08023ac4 	.word	0x08023ac4

08005734 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD0Ev>:
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7ff ffe7 	bl	8005710 <_ZN51TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestD1Ev>
 8005742:	2104      	movs	r1, #4
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f002 f993 	bl	8007a70 <_ZdlPvj>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>:
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	4a05      	ldr	r2, [pc, #20]	; (8005774 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev+0x20>)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4618      	mov	r0, r3
 8005766:	f00a fdb1 	bl	80102cc <_ZN10UtestShellD1Ev>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	08023ae4 	.word	0x08023ae4

08005778 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD0Ev>:
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ffe7 	bl	8005754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
 8005786:	211c      	movs	r1, #28
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f002 f971 	bl	8007a70 <_ZdlPvj>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>:
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev+0x20>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7ff fa75 	bl	8004c98 <_ZN44TEST_GROUP_CppUTestGroupEspDriver_Test_GroupD1Ev>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	08023b90 	.word	0x08023b90

080057bc <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD0Ev>:
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7ff ffe7 	bl	8005798 <_ZN44TEST_EspDriver_Test_Group_Esp_Init_Test_TestD1Ev>
 80057ca:	2104      	movs	r1, #4
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f002 f94f 	bl	8007a70 <_ZdlPvj>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, CapacityTest)
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	4a05      	ldr	r2, [pc, #20]	; (80057fc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev+0x20>)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	601a      	str	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f00a fd6d 	bl	80102cc <_ZN10UtestShellD1Ev>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	08023bd0 	.word	0x08023bd0

08005800 <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD0Ev>:
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7ff ffe7 	bl	80057dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
 800580e:	211c      	movs	r1, #28
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f002 f92d 	bl	8007a70 <_ZdlPvj>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4618      	mov	r0, r3
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>:
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	4a05      	ldr	r2, [pc, #20]	; (8005840 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev+0x20>)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fc01 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4618      	mov	r0, r3
 800583a:	3708      	adds	r7, #8
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	08023c7c 	.word	0x08023c7c

08005844 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD0Ev>:
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f7ff ffe7 	bl	8005820 <_ZN44TEST_RingBuffer_Test_Group_CapacityTest_TestD1Ev>
 8005852:	2108      	movs	r1, #8
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f002 f90b 	bl	8007a70 <_ZdlPvj>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, LookForTest)
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	4a05      	ldr	r2, [pc, #20]	; (8005884 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev+0x20>)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4618      	mov	r0, r3
 8005876:	f00a fd29 	bl	80102cc <_ZN10UtestShellD1Ev>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4618      	mov	r0, r3
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	08023c9c 	.word	0x08023c9c

08005888 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD0Ev>:
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff ffe7 	bl	8005864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
 8005896:	211c      	movs	r1, #28
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f002 f8e9 	bl	8007a70 <_ZdlPvj>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>:
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	4a05      	ldr	r2, [pc, #20]	; (80058c8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev+0x20>)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe fbbd 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4618      	mov	r0, r3
 80058c2:	3708      	adds	r7, #8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	08023d48 	.word	0x08023d48

080058cc <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD0Ev>:
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff ffe7 	bl	80058a8 <_ZN43TEST_RingBuffer_Test_Group_LookForTest_TestD1Ev>
 80058da:	2108      	movs	r1, #8
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f002 f8c7 	bl	8007a70 <_ZdlPvj>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushArrayTest)
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	4a05      	ldr	r2, [pc, #20]	; (800590c <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev+0x20>)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f00a fce5 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08023d68 	.word	0x08023d68

08005910 <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD0Ev>:
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ffe7 	bl	80058ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
 800591e:	211c      	movs	r1, #28
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f002 f8a5 	bl	8007a70 <_ZdlPvj>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>:
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	4a05      	ldr	r2, [pc, #20]	; (8005950 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev+0x20>)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fb79 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4618      	mov	r0, r3
 800594a:	3708      	adds	r7, #8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	08023e14 	.word	0x08023e14

08005954 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD0Ev>:
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f7ff ffe7 	bl	8005930 <_ZN45TEST_RingBuffer_Test_Group_PushArrayTest_TestD1Ev>
 8005962:	2108      	movs	r1, #8
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f002 f883 	bl	8007a70 <_ZdlPvj>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	4a05      	ldr	r2, [pc, #20]	; (8005994 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev+0x20>)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4618      	mov	r0, r3
 8005986:	f00a fca1 	bl	80102cc <_ZN10UtestShellD1Ev>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08023e34 	.word	0x08023e34

08005998 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD0Ev>:
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffe7 	bl	8005974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
 80059a6:	211c      	movs	r1, #28
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f002 f861 	bl	8007a70 <_ZdlPvj>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>:
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	4a05      	ldr	r2, [pc, #20]	; (80059d8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev+0x20>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe fb35 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	08023ee0 	.word	0x08023ee0

080059dc <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD0Ev>:
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7ff ffe7 	bl	80059b8 <_ZN47TEST_RingBuffer_Test_Group_BufferFlushTest_TestD1Ev>
 80059ea:	2108      	movs	r1, #8
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f002 f83f 	bl	8007a70 <_ZdlPvj>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev+0x20>)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f00a fc5d 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	08023f00 	.word	0x08023f00

08005a20 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD0Ev>:
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f7ff ffe7 	bl	80059fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
 8005a2e:	211c      	movs	r1, #28
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f002 f81d 	bl	8007a70 <_ZdlPvj>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>:
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev+0x20>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe faf1 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	08023fac 	.word	0x08023fac

08005a64 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD0Ev>:
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff ffe7 	bl	8005a40 <_ZN53TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestD1Ev>
 8005a72:	2108      	movs	r1, #8
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fffb 	bl	8007a70 <_ZdlPvj>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PopDataTests)
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	4a05      	ldr	r2, [pc, #20]	; (8005aa4 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev+0x20>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f00a fc19 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	08023fcc 	.word	0x08023fcc

08005aa8 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD0Ev>:
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ffe7 	bl	8005a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
 8005ab6:	211c      	movs	r1, #28
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 ffd9 	bl	8007a70 <_ZdlPvj>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>:
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	4a05      	ldr	r2, [pc, #20]	; (8005ae8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev+0x20>)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe faad 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	08024078 	.word	0x08024078

08005aec <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD0Ev>:
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f7ff ffe7 	bl	8005ac8 <_ZN44TEST_RingBuffer_Test_Group_PopDataTests_TestD1Ev>
 8005afa:	2108      	movs	r1, #8
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f001 ffb7 	bl	8007a70 <_ZdlPvj>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4618      	mov	r0, r3
 8005b06:	3708      	adds	r7, #8
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	4a05      	ldr	r2, [pc, #20]	; (8005b2c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev+0x20>)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f00a fbd5 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	08024098 	.word	0x08024098

08005b30 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD0Ev>:
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7ff ffe7 	bl	8005b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
 8005b3e:	211c      	movs	r1, #28
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f001 ff95 	bl	8007a70 <_ZdlPvj>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>:
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev+0x20>)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fe fa69 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3708      	adds	r7, #8
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	08024144 	.word	0x08024144

08005b74 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD0Ev>:
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ffe7 	bl	8005b50 <_ZN50TEST_RingBuffer_Test_Group_BufferOverflowTest_TestD1Ev>
 8005b82:	2108      	movs	r1, #8
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f001 ff73 	bl	8007a70 <_ZdlPvj>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, PushDataTests)
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	4a05      	ldr	r2, [pc, #20]	; (8005bb4 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev+0x20>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f00a fb91 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08024164 	.word	0x08024164

08005bb8 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD0Ev>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff ffe7 	bl	8005b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
 8005bc6:	211c      	movs	r1, #28
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 ff51 	bl	8007a70 <_ZdlPvj>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>:
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b082      	sub	sp, #8
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	4a05      	ldr	r2, [pc, #20]	; (8005bf8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev+0x20>)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	601a      	str	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fa25 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	08024210 	.word	0x08024210

08005bfc <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD0Ev>:
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ffe7 	bl	8005bd8 <_ZN45TEST_RingBuffer_Test_Group_PushDataTests_TestD1Ev>
 8005c0a:	2108      	movs	r1, #8
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 ff2f 	bl	8007a70 <_ZdlPvj>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>:
TEST(RingBuffer_Test_Group, InitTest)
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	4a05      	ldr	r2, [pc, #20]	; (8005c3c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev+0x20>)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f00a fb4d 	bl	80102cc <_ZN10UtestShellD1Ev>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	08024230 	.word	0x08024230

08005c40 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD0Ev>:
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ffe7 	bl	8005c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
 8005c4e:	211c      	movs	r1, #28
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f001 ff0d 	bl	8007a70 <_ZdlPvj>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>:
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev+0x20>)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7fe f9e1 	bl	8004038 <_ZN45TEST_GROUP_CppUTestGroupRingBuffer_Test_GroupD1Ev>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	080242dc 	.word	0x080242dc

08005c84 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD0Ev>:
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff ffe7 	bl	8005c60 <_ZN40TEST_RingBuffer_Test_Group_InitTest_TestD1Ev>
 8005c92:	2108      	movs	r1, #8
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 feeb 	bl	8007a70 <_ZdlPvj>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <_Z41__static_initialization_and_destruction_0ii>:
}
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af02      	add	r7, sp, #8
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 80bc 	bne.w	8005e2e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	f040 80b6 	bne.w	8005e2e <_Z41__static_initialization_and_destruction_0ii+0x18a>
TEST(RingBuffer_Test_Group, InitTest)
 8005cc2:	488b      	ldr	r0, [pc, #556]	; (8005ef0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005cc4:	f7fe fa06 	bl	80040d4 <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellC1Ev>
 8005cc8:	2324      	movs	r3, #36	; 0x24
 8005cca:	9301      	str	r3, [sp, #4]
 8005ccc:	4b89      	ldr	r3, [pc, #548]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	4b89      	ldr	r3, [pc, #548]	; (8005ef8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005cd2:	4a8a      	ldr	r2, [pc, #552]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005cd4:	4986      	ldr	r1, [pc, #536]	; (8005ef0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005cd6:	488a      	ldr	r0, [pc, #552]	; (8005f00 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005cd8:	f00c f8f4 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushDataTests)
 8005cdc:	4889      	ldr	r0, [pc, #548]	; (8005f04 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005cde:	f7fe faad 	bl	800423c <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellC1Ev>
 8005ce2:	232e      	movs	r3, #46	; 0x2e
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	4b83      	ldr	r3, [pc, #524]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005ce8:	9300      	str	r3, [sp, #0]
 8005cea:	4b87      	ldr	r3, [pc, #540]	; (8005f08 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005cec:	4a83      	ldr	r2, [pc, #524]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005cee:	4985      	ldr	r1, [pc, #532]	; (8005f04 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005cf0:	4886      	ldr	r0, [pc, #536]	; (8005f0c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005cf2:	f00c f8e7 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005cf6:	4886      	ldr	r0, [pc, #536]	; (8005f10 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005cf8:	f7fe fb2a 	bl	8004350 <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellC1Ev>
 8005cfc:	2338      	movs	r3, #56	; 0x38
 8005cfe:	9301      	str	r3, [sp, #4]
 8005d00:	4b7c      	ldr	r3, [pc, #496]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	4b83      	ldr	r3, [pc, #524]	; (8005f14 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005d06:	4a7d      	ldr	r2, [pc, #500]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d08:	4981      	ldr	r1, [pc, #516]	; (8005f10 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005d0a:	4883      	ldr	r0, [pc, #524]	; (8005f18 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005d0c:	f00c f8da 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005d10:	4882      	ldr	r0, [pc, #520]	; (8005f1c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005d12:	f7fe fba5 	bl	8004460 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellC1Ev>
 8005d16:	2343      	movs	r3, #67	; 0x43
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	4b76      	ldr	r3, [pc, #472]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	4b80      	ldr	r3, [pc, #512]	; (8005f20 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005d20:	4a76      	ldr	r2, [pc, #472]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d22:	497e      	ldr	r1, [pc, #504]	; (8005f1c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005d24:	487f      	ldr	r0, [pc, #508]	; (8005f24 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005d26:	f00c f8cd 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005d2a:	487f      	ldr	r0, [pc, #508]	; (8005f28 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005d2c:	f7fe fc04 	bl	8004538 <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellC1Ev>
 8005d30:	234c      	movs	r3, #76	; 0x4c
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	4b6f      	ldr	r3, [pc, #444]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4b7c      	ldr	r3, [pc, #496]	; (8005f2c <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005d3a:	4a70      	ldr	r2, [pc, #448]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d3c:	497a      	ldr	r1, [pc, #488]	; (8005f28 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005d3e:	487c      	ldr	r0, [pc, #496]	; (8005f30 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005d40:	f00c f8c0 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005d44:	487b      	ldr	r0, [pc, #492]	; (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005d46:	f7fe fc83 	bl	8004650 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellC1Ev>
 8005d4a:	235c      	movs	r3, #92	; 0x5c
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	4b69      	ldr	r3, [pc, #420]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4b79      	ldr	r3, [pc, #484]	; (8005f38 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005d54:	4a69      	ldr	r2, [pc, #420]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d56:	4977      	ldr	r1, [pc, #476]	; (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005d58:	4878      	ldr	r0, [pc, #480]	; (8005f3c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005d5a:	f00c f8b3 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005d5e:	4878      	ldr	r0, [pc, #480]	; (8005f40 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005d60:	f7fe fd34 	bl	80047cc <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellC1Ev>
 8005d64:	2371      	movs	r3, #113	; 0x71
 8005d66:	9301      	str	r3, [sp, #4]
 8005d68:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	4b75      	ldr	r3, [pc, #468]	; (8005f44 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005d6e:	4a63      	ldr	r2, [pc, #396]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d70:	4973      	ldr	r1, [pc, #460]	; (8005f40 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005d72:	4875      	ldr	r0, [pc, #468]	; (8005f48 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005d74:	f00c f8a6 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, LookForTest)
 8005d78:	4874      	ldr	r0, [pc, #464]	; (8005f4c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005d7a:	f7fe fd8d 	bl	8004898 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellC1Ev>
 8005d7e:	2378      	movs	r3, #120	; 0x78
 8005d80:	9301      	str	r3, [sp, #4]
 8005d82:	4b5c      	ldr	r3, [pc, #368]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	4b72      	ldr	r3, [pc, #456]	; (8005f50 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8005d88:	4a5c      	ldr	r2, [pc, #368]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005d8a:	4970      	ldr	r1, [pc, #448]	; (8005f4c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005d8c:	4871      	ldr	r0, [pc, #452]	; (8005f54 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005d8e:	f00c f899 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005d92:	4871      	ldr	r0, [pc, #452]	; (8005f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005d94:	f7fe fe6a 	bl	8004a6c <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellC1Ev>
 8005d98:	2380      	movs	r3, #128	; 0x80
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	4b55      	ldr	r3, [pc, #340]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	4b6e      	ldr	r3, [pc, #440]	; (8005f5c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8005da2:	4a56      	ldr	r2, [pc, #344]	; (8005efc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005da4:	496c      	ldr	r1, [pc, #432]	; (8005f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005da6:	486e      	ldr	r0, [pc, #440]	; (8005f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005da8:	f00c f88c 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005dac:	486d      	ldr	r0, [pc, #436]	; (8005f64 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005dae:	f7fe ffbb 	bl	8004d28 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellC1Ev>
 8005db2:	23b8      	movs	r3, #184	; 0xb8
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	4b4f      	ldr	r3, [pc, #316]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4b6b      	ldr	r3, [pc, #428]	; (8005f68 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8005dbc:	4a6b      	ldr	r2, [pc, #428]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005dbe:	4969      	ldr	r1, [pc, #420]	; (8005f64 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005dc0:	486b      	ldr	r0, [pc, #428]	; (8005f70 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8005dc2:	f00c f87f 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005dc6:	486b      	ldr	r0, [pc, #428]	; (8005f74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005dc8:	f7ff f818 	bl	8004dfc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellC1Ev>
 8005dcc:	23ca      	movs	r3, #202	; 0xca
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	4b48      	ldr	r3, [pc, #288]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	4b68      	ldr	r3, [pc, #416]	; (8005f78 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8005dd6:	4a65      	ldr	r2, [pc, #404]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005dd8:	4966      	ldr	r1, [pc, #408]	; (8005f74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005dda:	4868      	ldr	r0, [pc, #416]	; (8005f7c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8005ddc:	f00c f872 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005de0:	4867      	ldr	r0, [pc, #412]	; (8005f80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8005de2:	f7ff f8e3 	bl	8004fac <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellC1Ev>
 8005de6:	23d5      	movs	r3, #213	; 0xd5
 8005de8:	9301      	str	r3, [sp, #4]
 8005dea:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	4b65      	ldr	r3, [pc, #404]	; (8005f84 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8005df0:	4a5e      	ldr	r2, [pc, #376]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005df2:	4963      	ldr	r1, [pc, #396]	; (8005f80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8005df4:	4864      	ldr	r0, [pc, #400]	; (8005f88 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005df6:	f00c f865 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8005dfa:	4864      	ldr	r0, [pc, #400]	; (8005f8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8005dfc:	f7ff fa06 	bl	800520c <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellC1Ev>
 8005e00:	23e6      	movs	r3, #230	; 0xe6
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4b61      	ldr	r3, [pc, #388]	; (8005f90 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8005e0a:	4a58      	ldr	r2, [pc, #352]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005e0c:	495f      	ldr	r1, [pc, #380]	; (8005f8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8005e0e:	4861      	ldr	r0, [pc, #388]	; (8005f94 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8005e10:	f00c f858 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
TEST(EspDriver_Test_Group, Wait_Response_Test)
 8005e14:	4860      	ldr	r0, [pc, #384]	; (8005f98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8005e16:	f7ff fac3 	bl	80053a0 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellC1Ev>
 8005e1a:	23f6      	movs	r3, #246	; 0xf6
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	4b5e      	ldr	r3, [pc, #376]	; (8005f9c <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8005e24:	4a51      	ldr	r2, [pc, #324]	; (8005f6c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8005e26:	495c      	ldr	r1, [pc, #368]	; (8005f98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8005e28:	485d      	ldr	r0, [pc, #372]	; (8005fa0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8005e2a:	f00c f84b 	bl	8011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d158      	bne.n	8005ee6 <_Z41__static_initialization_and_destruction_0ii+0x242>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d153      	bne.n	8005ee6 <_Z41__static_initialization_and_destruction_0ii+0x242>
 8005e3e:	4858      	ldr	r0, [pc, #352]	; (8005fa0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8005e40:	f00c f86a 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e44:	4854      	ldr	r0, [pc, #336]	; (8005f98 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8005e46:	f7ff fb75 	bl	8005534 <_ZN54TEST_EspDriver_Test_Group_Wait_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Read_Response_Test)
 8005e4a:	4852      	ldr	r0, [pc, #328]	; (8005f94 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8005e4c:	f00c f864 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e50:	484e      	ldr	r0, [pc, #312]	; (8005f8c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8005e52:	f7ff fbb3 	bl	80055bc <_ZN54TEST_EspDriver_Test_Group_Read_Response_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, UART_Receive_Handler_Test)
 8005e56:	484c      	ldr	r0, [pc, #304]	; (8005f88 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8005e58:	f00c f85e 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e5c:	4848      	ldr	r0, [pc, #288]	; (8005f80 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8005e5e:	f7ff fbf1 	bl	8005644 <_ZN61TEST_EspDriver_Test_Group_UART_Receive_Handler_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Send_AT_Command_Test)
 8005e62:	4846      	ldr	r0, [pc, #280]	; (8005f7c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8005e64:	f00c f858 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e68:	4842      	ldr	r0, [pc, #264]	; (8005f74 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8005e6a:	f7ff fc2f 	bl	80056cc <_ZN56TEST_EspDriver_Test_Group_Send_AT_Command_Test_TestShellD1Ev>
TEST(EspDriver_Test_Group, Esp_Init_Test)
 8005e6e:	4840      	ldr	r0, [pc, #256]	; (8005f70 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8005e70:	f00c f852 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e74:	483b      	ldr	r0, [pc, #236]	; (8005f64 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8005e76:	f7ff fc6d 	bl	8005754 <_ZN49TEST_EspDriver_Test_Group_Esp_Init_Test_TestShellD1Ev>
TEST(RingBuffer_Test_Group, CapacityTest)
 8005e7a:	4839      	ldr	r0, [pc, #228]	; (8005f60 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8005e7c:	f00c f84c 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e80:	4835      	ldr	r0, [pc, #212]	; (8005f58 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8005e82:	f7ff fcab 	bl	80057dc <_ZN49TEST_RingBuffer_Test_Group_CapacityTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, LookForTest)
 8005e86:	4833      	ldr	r0, [pc, #204]	; (8005f54 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8005e88:	f00c f846 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e8c:	482f      	ldr	r0, [pc, #188]	; (8005f4c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8005e8e:	f7ff fce9 	bl	8005864 <_ZN48TEST_RingBuffer_Test_Group_LookForTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushArrayTest)
 8005e92:	482d      	ldr	r0, [pc, #180]	; (8005f48 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005e94:	f00c f840 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005e98:	4829      	ldr	r0, [pc, #164]	; (8005f40 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005e9a:	f7ff fd27 	bl	80058ec <_ZN50TEST_RingBuffer_Test_Group_PushArrayTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferFlushTest)
 8005e9e:	4827      	ldr	r0, [pc, #156]	; (8005f3c <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005ea0:	f00c f83a 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005ea4:	4823      	ldr	r0, [pc, #140]	; (8005f34 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005ea6:	f7ff fd65 	bl	8005974 <_ZN52TEST_RingBuffer_Test_Group_BufferFlushTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopBufferOverFlowTest)
 8005eaa:	4821      	ldr	r0, [pc, #132]	; (8005f30 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005eac:	f00c f834 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005eb0:	481d      	ldr	r0, [pc, #116]	; (8005f28 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005eb2:	f7ff fda3 	bl	80059fc <_ZN58TEST_RingBuffer_Test_Group_PopBufferOverFlowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PopDataTests)
 8005eb6:	481b      	ldr	r0, [pc, #108]	; (8005f24 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005eb8:	f00c f82e 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005ebc:	4817      	ldr	r0, [pc, #92]	; (8005f1c <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005ebe:	f7ff fde1 	bl	8005a84 <_ZN49TEST_RingBuffer_Test_Group_PopDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, BufferOverflowTest)
 8005ec2:	4815      	ldr	r0, [pc, #84]	; (8005f18 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005ec4:	f00c f828 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005ec8:	4811      	ldr	r0, [pc, #68]	; (8005f10 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005eca:	f7ff fe1f 	bl	8005b0c <_ZN55TEST_RingBuffer_Test_Group_BufferOverflowTest_TestShellD1Ev>
TEST(RingBuffer_Test_Group, PushDataTests)
 8005ece:	480f      	ldr	r0, [pc, #60]	; (8005f0c <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005ed0:	f00c f822 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005ed4:	480b      	ldr	r0, [pc, #44]	; (8005f04 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005ed6:	f7ff fe5d 	bl	8005b94 <_ZN50TEST_RingBuffer_Test_Group_PushDataTests_TestShellD1Ev>
TEST(RingBuffer_Test_Group, InitTest)
 8005eda:	4809      	ldr	r0, [pc, #36]	; (8005f00 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005edc:	f00c f81c 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8005ee0:	4803      	ldr	r0, [pc, #12]	; (8005ef0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005ee2:	f7ff fe9b 	bl	8005c1c <_ZN45TEST_RingBuffer_Test_Group_InitTest_TestShellD1Ev>
}
 8005ee6:	bf00      	nop
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20000490 	.word	0x20000490
 8005ef4:	080209b0 	.word	0x080209b0
 8005ef8:	08020d98 	.word	0x08020d98
 8005efc:	08020da4 	.word	0x08020da4
 8005f00:	200004ac 	.word	0x200004ac
 8005f04:	200004b0 	.word	0x200004b0
 8005f08:	08020dbc 	.word	0x08020dbc
 8005f0c:	200004cc 	.word	0x200004cc
 8005f10:	200004d0 	.word	0x200004d0
 8005f14:	08020dcc 	.word	0x08020dcc
 8005f18:	200004ec 	.word	0x200004ec
 8005f1c:	200004f0 	.word	0x200004f0
 8005f20:	08020de0 	.word	0x08020de0
 8005f24:	2000050c 	.word	0x2000050c
 8005f28:	20000510 	.word	0x20000510
 8005f2c:	08020df0 	.word	0x08020df0
 8005f30:	2000052c 	.word	0x2000052c
 8005f34:	20000530 	.word	0x20000530
 8005f38:	08020e08 	.word	0x08020e08
 8005f3c:	2000054c 	.word	0x2000054c
 8005f40:	20000550 	.word	0x20000550
 8005f44:	08020e18 	.word	0x08020e18
 8005f48:	2000056c 	.word	0x2000056c
 8005f4c:	20000570 	.word	0x20000570
 8005f50:	08020e28 	.word	0x08020e28
 8005f54:	2000058c 	.word	0x2000058c
 8005f58:	20000590 	.word	0x20000590
 8005f5c:	08020e34 	.word	0x08020e34
 8005f60:	200005ac 	.word	0x200005ac
 8005f64:	200005b8 	.word	0x200005b8
 8005f68:	08020e44 	.word	0x08020e44
 8005f6c:	08020e54 	.word	0x08020e54
 8005f70:	200005d4 	.word	0x200005d4
 8005f74:	200005d8 	.word	0x200005d8
 8005f78:	08020e6c 	.word	0x08020e6c
 8005f7c:	200005f4 	.word	0x200005f4
 8005f80:	200005f8 	.word	0x200005f8
 8005f84:	08020e84 	.word	0x08020e84
 8005f88:	20000614 	.word	0x20000614
 8005f8c:	20000618 	.word	0x20000618
 8005f90:	08020ea0 	.word	0x08020ea0
 8005f94:	20000634 	.word	0x20000634
 8005f98:	20000638 	.word	0x20000638
 8005f9c:	08020eb4 	.word	0x08020eb4
 8005fa0:	20000654 	.word	0x20000654

08005fa4 <_GLOBAL__sub_I_rx_buffer>:
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fac:	2001      	movs	r0, #1
 8005fae:	f7ff fe79 	bl	8005ca4 <_Z41__static_initialization_and_destruction_0ii>
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <_GLOBAL__sub_D_rx_buffer>:
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	f7ff fe71 	bl	8005ca4 <_Z41__static_initialization_and_destruction_0ii>
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
    }
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69db      	ldr	r3, [r3, #28]
    }
 8005fe8:	4618      	mov	r0, r3
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	695b      	ldr	r3, [r3, #20]
    }
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff ffed 	bl	8005ff4 <_ZNK10TestResult15getFailureCountEv>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10a      	bne.n	8006036 <_ZNK10TestResult9isFailureEv+0x2a>
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ffcf 	bl	8005fc4 <_ZNK10TestResult11getRunCountEv>
 8006026:	4604      	mov	r4, r0
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff ffd7 	bl	8005fdc <_ZNK10TestResult15getIgnoredCountEv>
 800602e:	4603      	mov	r3, r0
 8006030:	4423      	add	r3, r4
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <_ZNK10TestResult9isFailureEv+0x2e>
 8006036:	2301      	movs	r3, #1
 8006038:	e000      	b.n	800603c <_ZNK10TestResult9isFailureEv+0x30>
 800603a:	2300      	movs	r3, #0
    }
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	bd90      	pop	{r4, r7, pc}

08006044 <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    {
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4618      	mov	r0, r3
 8006050:	f007 fde6 	bl	800dc20 <_ZN10TestOutputC1Ev>
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	601a      	str	r2, [r3, #0]
    }
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4618      	mov	r0, r3
 800605e:	3708      	adds	r7, #8
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	08024990 	.word	0x08024990

08006068 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
    {
 8006070:	4a05      	ldr	r2, [pc, #20]	; (8006088 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	601a      	str	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4618      	mov	r0, r3
 800607a:	f007 fdef 	bl	800dc5c <_ZN10TestOutputD1Ev>
    }
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4618      	mov	r0, r3
 8006082:	3708      	adds	r7, #8
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	08024990 	.word	0x08024990

0800608c <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
    }
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff ffe7 	bl	8006068 <_ZN17ConsoleTestOutputD1Ev>
 800609a:	2110      	movs	r1, #16
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fce7 	bl	8007a70 <_ZdlPvj>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 80060ac:	b5b0      	push	{r4, r5, r7, lr}
 80060ae:	b098      	sub	sp, #96	; 0x60
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
    int result = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 80060ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff ffc0 	bl	8006044 <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 80060c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060c8:	4935      	ldr	r1, [pc, #212]	; (80061a0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 80060ca:	4618      	mov	r0, r3
 80060cc:	f004 f87f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80060d0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80060d4:	f107 0318 	add.w	r3, r7, #24
 80060d8:	2200      	movs	r2, #0
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 ff6a 	bl	8007fb4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 80060e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80060e4:	4618      	mov	r0, r3
 80060e6:	f004 fc2a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 80060ea:	f107 0318 	add.w	r3, r7, #24
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f001 ff2f 	bl	8007f54 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 80060f6:	f009 fb21 	bl	800f73c <_ZN12TestRegistry18getCurrentRegistryEv>
 80060fa:	4603      	mov	r3, r0
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	3234      	adds	r2, #52	; 0x34
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	f107 0118 	add.w	r1, r7, #24
 8006106:	4618      	mov	r0, r3
 8006108:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 800610a:	f009 fb17 	bl	800f73c <_ZN12TestRegistry18getCurrentRegistryEv>
 800610e:	4603      	mov	r3, r0
 8006110:	f107 0008 	add.w	r0, r7, #8
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	f000 f844 	bl	80061a4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 800611c:	f107 0308 	add.w	r3, r7, #8
 8006120:	4618      	mov	r0, r3
 8006122:	f000 f899 	bl	8006258 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8006126:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8006128:	f107 0308 	add.w	r3, r7, #8
 800612c:	4618      	mov	r0, r3
 800612e:	f000 f863 	bl	80061f8 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8006132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10c      	bne.n	8006152 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8006138:	f107 0318 	add.w	r3, r7, #24
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f002 f83a 	bl	80081b8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8006144:	4602      	mov	r2, r0
 8006146:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800614a:	4611      	mov	r1, r2
 800614c:	4618      	mov	r0, r3
 800614e:	f007 fe27 	bl	800dda0 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8006152:	f009 faf3 	bl	800f73c <_ZN12TestRegistry18getCurrentRegistryEv>
 8006156:	4604      	mov	r4, r0
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	3344      	adds	r3, #68	; 0x44
 800615c:	681d      	ldr	r5, [r3, #0]
 800615e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006162:	490f      	ldr	r1, [pc, #60]	; (80061a0 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8006164:	4618      	mov	r0, r3
 8006166:	f004 f832 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800616a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800616e:	4619      	mov	r1, r3
 8006170:	4620      	mov	r0, r4
 8006172:	47a8      	blx	r5
 8006174:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006178:	4618      	mov	r0, r3
 800617a:	f004 fbe0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return result;
 800617e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8006180:	f107 0318 	add.w	r3, r7, #24
 8006184:	4618      	mov	r0, r3
 8006186:	f001 ff4d 	bl	8008024 <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 800618a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff ff6a 	bl	8006068 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8006194:	4623      	mov	r3, r4
}
 8006196:	4618      	mov	r0, r3
 8006198:	3760      	adds	r7, #96	; 0x60
 800619a:	46bd      	mov	sp, r7
 800619c:	bdb0      	pop	{r4, r5, r7, pc}
 800619e:	bf00      	nop
 80061a0:	08020ec8 	.word	0x08020ec8

080061a4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 80061b2:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	605a      	str	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 80061ca:	2241      	movs	r2, #65	; 0x41
 80061cc:	4909      	ldr	r1, [pc, #36]	; (80061f4 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 80061ce:	2038      	movs	r0, #56	; 0x38
 80061d0:	f001 fc3a 	bl	8007a48 <_ZnwjPKci>
 80061d4:	4604      	mov	r4, r0
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	68b9      	ldr	r1, [r7, #8]
 80061da:	4620      	mov	r0, r4
 80061dc:	f00c f84a 	bl	8012274 <_ZN20CommandLineArgumentsC1EiPKPKc>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	609c      	str	r4, [r3, #8]
}
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd90      	pop	{r4, r7, pc}
 80061ee:	bf00      	nop
 80061f0:	0802431c 	.word	0x0802431c
 80061f4:	08020edc 	.word	0x08020edc

080061f8 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	4a0c      	ldr	r2, [pc, #48]	; (8006234 <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d004      	beq.n	8006218 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	3204      	adds	r2, #4
 8006212:	6812      	ldr	r2, [r2, #0]
 8006214:	4618      	mov	r0, r3
 8006216:	4790      	blx	r2
    delete output_;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d004      	beq.n	800622a <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	3204      	adds	r2, #4
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	4790      	blx	r2
}
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4618      	mov	r0, r3
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	0802431c 	.word	0x0802431c

08006238 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
}
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7ff ffd9 	bl	80061f8 <_ZN21CommandLineTestRunnerD1Ev>
 8006246:	2110      	movs	r1, #16
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f001 fc11 	bl	8007a70 <_ZdlPvj>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b08c      	sub	sp, #48	; 0x30
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8006260:	2301      	movs	r3, #1
 8006262:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8006264:	f107 031c 	add.w	r3, r7, #28
 8006268:	4929      	ldr	r1, [pc, #164]	; (8006310 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 800626a:	4618      	mov	r0, r3
 800626c:	f003 ffaf 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006270:	f107 021c 	add.w	r2, r7, #28
 8006274:	f107 0308 	add.w	r3, r7, #8
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f008 fe1c 	bl	800eeb8 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8006280:	f107 031c 	add.w	r3, r7, #28
 8006284:	4618      	mov	r0, r3
 8006286:	f004 fb5a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3334      	adds	r3, #52	; 0x34
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f107 0108 	add.w	r1, r7, #8
 800629c:	4610      	mov	r0, r2
 800629e:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	333c      	adds	r3, #60	; 0x3c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4610      	mov	r0, r2
 80062b0:	4798      	blx	r3
 80062b2:	4603      	mov	r3, r0
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fa3e 	bl	8006738 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8ac 	bl	8006420 <_ZN21CommandLineTestRunner11runAllTestsEv>
 80062c8:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68dd      	ldr	r5, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3344      	adds	r3, #68	; 0x44
 80062d6:	681c      	ldr	r4, [r3, #0]
 80062d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062dc:	490c      	ldr	r1, [pc, #48]	; (8006310 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 80062de:	4618      	mov	r0, r3
 80062e0:	f003 ff75 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80062e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e8:	4619      	mov	r1, r3
 80062ea:	4628      	mov	r0, r5
 80062ec:	47a0      	blx	r4
 80062ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062f2:	4618      	mov	r0, r3
 80062f4:	f004 fb23 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return testResult;
 80062f8:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 80062fa:	f107 0308 	add.w	r3, r7, #8
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 faaa 	bl	8006858 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8006304:	4623      	mov	r3, r4
}
 8006306:	4618      	mov	r0, r3
 8006308:	3730      	adds	r7, #48	; 0x30
 800630a:	46bd      	mov	sp, r7
 800630c:	bdb0      	pop	{r4, r5, r7, pc}
 800630e:	bf00      	nop
 8006310:	08020f00 	.word	0x08020f00

08006314 <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8006314:	b5b0      	push	{r4, r5, r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68dd      	ldr	r5, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3330      	adds	r3, #48	; 0x30
 8006328:	681c      	ldr	r4, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	4618      	mov	r0, r3
 8006330:	f00c fce0 	bl	8012cf4 <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8006334:	4603      	mov	r3, r0
 8006336:	4619      	mov	r1, r3
 8006338:	4628      	mov	r0, r5
 800633a:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68dd      	ldr	r5, [r3, #12]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	332c      	adds	r3, #44	; 0x2c
 8006348:	681c      	ldr	r4, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f00c fcdc 	bl	8012d0c <_ZNK20CommandLineArguments14getNameFiltersEv>
 8006354:	4603      	mov	r3, r0
 8006356:	4619      	mov	r1, r3
 8006358:	4628      	mov	r0, r5
 800635a:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4618      	mov	r0, r3
 8006362:	f00c fc2b 	bl	8012bbc <_ZNK20CommandLineArguments9isVerboseEv>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d009      	beq.n	8006380 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3320      	adds	r3, #32
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	2101      	movs	r1, #1
 800637c:	4610      	mov	r0, r2
 800637e:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f00c fc25 	bl	8012bd4 <_ZNK20CommandLineArguments13isVeryVerboseEv>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d009      	beq.n	80063a4 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3320      	adds	r3, #32
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2102      	movs	r1, #2
 80063a0:	4610      	mov	r0, r2
 80063a2:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f00c fc1f 	bl	8012bec <_ZNK20CommandLineArguments7isColorEv>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3324      	adds	r3, #36	; 0x24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4610      	mov	r0, r2
 80063c4:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f00c fc4a 	bl	8012c64 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68da      	ldr	r2, [r3, #12]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	3360      	adds	r3, #96	; 0x60
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4610      	mov	r0, r2
 80063e6:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f00c fc2d 	bl	8012c4c <_ZNK20CommandLineArguments12isRunIgnoredEv>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d004      	beq.n	8006402 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f009 fa19 	bl	800f834 <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	4618      	mov	r0, r3
 8006408:	f00c fc50 	bl	8012cac <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 8006412:	f00b fadb 	bl	80119cc <_ZN10UtestShell14setCrashOnFailEv>
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006420 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8006420:	b5b0      	push	{r4, r5, r7, lr}
 8006422:	b094      	sub	sp, #80	; 0x50
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7ff ff73 	bl	8006314 <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 800642e:	2300      	movs	r3, #0
 8006430:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 8006436:	2300      	movs	r3, #0
 8006438:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	4618      	mov	r0, r3
 8006440:	f00c fc1c 	bl	8012c7c <_ZNK20CommandLineArguments14getRepeatCountEv>
 8006444:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f00c fbda 	bl	8012c04 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8006450:	4603      	mov	r3, r0
 8006452:	2b00      	cmp	r3, #0
 8006454:	d019      	beq.n	800648a <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	f107 0308 	add.w	r3, r7, #8
 800645e:	4611      	mov	r1, r2
 8006460:	4618      	mov	r0, r3
 8006462:	f009 fbaf 	bl	800fbc4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3320      	adds	r3, #32
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f107 0108 	add.w	r1, r7, #8
 8006478:	4610      	mov	r0, r2
 800647a:	4798      	blx	r3
        return 0;
 800647c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800647e:	f107 0308 	add.w	r3, r7, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f009 fbd6 	bl	800fc34 <_ZN10TestResultD1Ev>
 8006488:	e0e1      	b.n	800664e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	4618      	mov	r0, r3
 8006490:	f00c fbc4 	bl	8012c1c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d019      	beq.n	80064ce <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	f107 0308 	add.w	r3, r7, #8
 80064a2:	4611      	mov	r1, r2
 80064a4:	4618      	mov	r0, r3
 80064a6:	f009 fb8d 	bl	800fbc4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3324      	adds	r3, #36	; 0x24
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f107 0108 	add.w	r1, r7, #8
 80064bc:	4610      	mov	r0, r2
 80064be:	4798      	blx	r3
        return 0;
 80064c0:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80064c2:	f107 0308 	add.w	r3, r7, #8
 80064c6:	4618      	mov	r0, r3
 80064c8:	f009 fbb4 	bl	800fc34 <_ZN10TestResultD1Ev>
 80064cc:	e0bf      	b.n	800664e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f00c fbae 	bl	8012c34 <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d019      	beq.n	8006512 <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	f107 0308 	add.w	r3, r7, #8
 80064e6:	4611      	mov	r1, r2
 80064e8:	4618      	mov	r0, r3
 80064ea:	f009 fb6b 	bl	800fbc4 <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3328      	adds	r3, #40	; 0x28
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f107 0108 	add.w	r1, r7, #8
 8006500:	4610      	mov	r0, r2
 8006502:	4798      	blx	r3
        return 0;
 8006504:	2400      	movs	r4, #0
        TestResult tr(*output_);
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	4618      	mov	r0, r3
 800650c:	f009 fb92 	bl	800fc34 <_ZN10TestResultD1Ev>
 8006510:	e09d      	b.n	800664e <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4618      	mov	r0, r3
 8006518:	f00c fbbc 	bl	8012c94 <_ZNK20CommandLineArguments11isReversingEv>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d008      	beq.n	8006534 <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	331c      	adds	r3, #28
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4610      	mov	r0, r2
 8006532:	4798      	blx	r3

    if (arguments_->isShuffling())
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4618      	mov	r0, r3
 800653a:	f00c fbc3 	bl	8012cc4 <_ZNK20CommandLineArguments11isShufflingEv>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d023      	beq.n	800658c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	332c      	adds	r3, #44	; 0x2c
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4941      	ldr	r1, [pc, #260]	; (8006658 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 8006554:	4610      	mov	r0, r2
 8006556:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685d      	ldr	r5, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3334      	adds	r3, #52	; 0x34
 8006564:	681c      	ldr	r4, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	4618      	mov	r0, r3
 800656c:	f00c fbb6 	bl	8012cdc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8006570:	4603      	mov	r3, r0
 8006572:	4619      	mov	r1, r3
 8006574:	4628      	mov	r0, r5
 8006576:	47a0      	blx	r4
        output_->print("\n");
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685a      	ldr	r2, [r3, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	332c      	adds	r3, #44	; 0x2c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4935      	ldr	r1, [pc, #212]	; (800665c <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006594:	429a      	cmp	r2, r3
 8006596:	bf8c      	ite	hi
 8006598:	2301      	movhi	r3, #1
 800659a:	2300      	movls	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d04e      	beq.n	8006640 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f00c fb8c 	bl	8012cc4 <_ZNK20CommandLineArguments11isShufflingEv>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00f      	beq.n	80065d2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68dd      	ldr	r5, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3318      	adds	r3, #24
 80065be:	681c      	ldr	r4, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f00c fb89 	bl	8012cdc <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80065ca:	4603      	mov	r3, r0
 80065cc:	4619      	mov	r1, r3
 80065ce:	4628      	mov	r0, r5
 80065d0:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6858      	ldr	r0, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3340      	adds	r3, #64	; 0x40
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065e2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80065e4:	4798      	blx	r3
        TestResult tr(*output_);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	4611      	mov	r1, r2
 80065f0:	4618      	mov	r0, r3
 80065f2:	f009 fae7 	bl	800fbc4 <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68da      	ldr	r2, [r3, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3314      	adds	r3, #20
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	4610      	mov	r0, r2
 800660a:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 800660c:	f107 0308 	add.w	r3, r7, #8
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fcef 	bl	8005ff4 <_ZNK10TestResult15getFailureCountEv>
 8006616:	4602      	mov	r2, r0
 8006618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800661a:	4413      	add	r3, r2
 800661c:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fcf2 	bl	800600c <_ZNK10TestResult9isFailureEv>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	3301      	adds	r3, #1
 8006632:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	4618      	mov	r0, r3
 800663a:	f009 fafb 	bl	800fc34 <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 800663e:	e7a5      	b.n	800658c <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8006640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 8006646:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8006648:	e000      	b.n	800664c <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 800664a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800664c:	bf00      	nop
 800664e:	4623      	mov	r3, r4
}
 8006650:	4618      	mov	r0, r3
 8006652:	3750      	adds	r7, #80	; 0x50
 8006654:	46bd      	mov	sp, r7
 8006656:	bdb0      	pop	{r4, r5, r7, pc}
 8006658:	08020f14 	.word	0x08020f14
 800665c:	08020f40 	.word	0x08020f40

08006660 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 8006660:	b590      	push	{r4, r7, lr}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 8006668:	229d      	movs	r2, #157	; 0x9d
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 800666c:	201c      	movs	r0, #28
 800666e:	f001 f9eb 	bl	8007a48 <_ZnwjPKci>
 8006672:	4604      	mov	r4, r0
 8006674:	4620      	mov	r0, r4
 8006676:	f005 f955 	bl	800b924 <_ZN18TeamCityTestOutputC1Ev>
 800667a:	4623      	mov	r3, r4
}
 800667c:	4618      	mov	r0, r3
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	bd90      	pop	{r4, r7, pc}
 8006684:	08020edc 	.word	0x08020edc

08006688 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 8006692:	22a2      	movs	r2, #162	; 0xa2
 8006694:	490a      	ldr	r1, [pc, #40]	; (80066c0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 8006696:	2014      	movs	r0, #20
 8006698:	f001 f9d6 	bl	8007a48 <_ZnwjPKci>
 800669c:	4604      	mov	r4, r0
 800669e:	4620      	mov	r0, r4
 80066a0:	f000 f980 	bl	80069a4 <_ZN15JUnitTestOutputC1Ev>
 80066a4:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80066ac:	6839      	ldr	r1, [r7, #0]
 80066ae:	68f8      	ldr	r0, [r7, #12]
 80066b0:	f000 fbb2 	bl	8006e18 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80066b4:	68fb      	ldr	r3, [r7, #12]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3714      	adds	r7, #20
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}
 80066be:	bf00      	nop
 80066c0:	08020edc 	.word	0x08020edc

080066c4 <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 80066cc:	22ab      	movs	r2, #171	; 0xab
 80066ce:	4906      	ldr	r1, [pc, #24]	; (80066e8 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 80066d0:	2010      	movs	r0, #16
 80066d2:	f001 f9b9 	bl	8007a48 <_ZnwjPKci>
 80066d6:	4604      	mov	r4, r0
 80066d8:	4620      	mov	r0, r4
 80066da:	f7ff fcb3 	bl	8006044 <_ZN17ConsoleTestOutputC1Ev>
 80066de:	4623      	mov	r3, r4
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd90      	pop	{r4, r7, pc}
 80066e8:	08020edc 	.word	0x08020edc

080066ec <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 80066f8:	22b0      	movs	r2, #176	; 0xb0
 80066fa:	490e      	ldr	r1, [pc, #56]	; (8006734 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 80066fc:	2018      	movs	r0, #24
 80066fe:	f001 f9a3 	bl	8007a48 <_ZnwjPKci>
 8006702:	4604      	mov	r4, r0
 8006704:	4620      	mov	r0, r4
 8006706:	f007 ff83 	bl	800e610 <_ZN19CompositeTestOutputC1Ev>
 800670a:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	335c      	adds	r3, #92	; 0x5c
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	6978      	ldr	r0, [r7, #20]
 8006718:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3360      	adds	r3, #96	; 0x60
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6879      	ldr	r1, [r7, #4]
 8006724:	6978      	ldr	r0, [r7, #20]
 8006726:	4798      	blx	r3
  return composite;
 8006728:	697b      	ldr	r3, [r7, #20]
}
 800672a:	4618      	mov	r0, r3
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	bd90      	pop	{r4, r7, pc}
 8006732:	bf00      	nop
 8006734:	08020edc 	.word	0x08020edc

08006738 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8006738:	b5b0      	push	{r4, r5, r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	6839      	ldr	r1, [r7, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f00b fe4f 	bl	80123ec <_ZN20CommandLineArguments5parseEP10TestPlugin>
 800674e:	4603      	mov	r3, r0
 8006750:	f083 0301 	eor.w	r3, r3, #1
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d029      	beq.n	80067ae <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3310      	adds	r3, #16
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	4798      	blx	r3
 8006766:	4602      	mov	r2, r0
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685d      	ldr	r5, [r3, #4]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	332c      	adds	r3, #44	; 0x2c
 8006778:	681c      	ldr	r4, [r3, #0]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f00c fa10 	bl	8012ba4 <_ZNK20CommandLineArguments8needHelpEv>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d006      	beq.n	8006798 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	4618      	mov	r0, r3
 8006790:	f00c f9fa 	bl	8012b88 <_ZNK20CommandLineArguments4helpEv>
 8006794:	4603      	mov	r3, r0
 8006796:	e005      	b.n	80067a4 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4618      	mov	r0, r3
 800679e:	f00c f9e5 	bl	8012b6c <_ZNK20CommandLineArguments5usageEv>
 80067a2:	4603      	mov	r3, r0
 80067a4:	4619      	mov	r1, r3
 80067a6:	4628      	mov	r0, r5
 80067a8:	47a0      	blx	r4
    return false;
 80067aa:	2300      	movs	r3, #0
 80067ac:	e050      	b.n	8006850 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f00d f84c 	bl	8013850 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d02c      	beq.n	8006818 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	330c      	adds	r3, #12
 80067c4:	681c      	ldr	r4, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f00d f864 	bl	8013898 <_ZNK20CommandLineArguments14getPackageNameEv>
 80067d0:	4603      	mov	r3, r0
 80067d2:	4619      	mov	r1, r3
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	47a0      	blx	r4
 80067d8:	4602      	mov	r2, r0
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f00c f9ea 	bl	8012bbc <_ZNK20CommandLineArguments9isVerboseEv>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d02f      	beq.n	800684e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3314      	adds	r3, #20
 80067f4:	681c      	ldr	r4, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685d      	ldr	r5, [r3, #4]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	3310      	adds	r3, #16
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	461a      	mov	r2, r3
 800680a:	4629      	mov	r1, r5
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	47a0      	blx	r4
 8006810:	4602      	mov	r2, r0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	e01a      	b.n	800684e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	4618      	mov	r0, r3
 800681e:	f00d f829 	bl	8013874 <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d009      	beq.n	800683c <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3308      	adds	r3, #8
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	4798      	blx	r3
 8006834:	4602      	mov	r2, r0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	605a      	str	r2, [r3, #4]
 800683a:	e008      	b.n	800684e <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3310      	adds	r3, #16
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	4798      	blx	r3
 8006848:	4602      	mov	r2, r0
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]
  return true;
 800684e:	2301      	movs	r3, #1
}
 8006850:	4618      	mov	r0, r3
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bdb0      	pop	{r4, r5, r7, pc}

08006858 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	4a05      	ldr	r2, [pc, #20]	; (8006878 <_ZN16SetPointerPluginD1Ev+0x20>)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4618      	mov	r0, r3
 800686a:	f008 f9e7 	bl	800ec3c <_ZN10TestPluginD1Ev>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	08024a9c 	.word	0x08024a9c

0800687c <_ZN16SetPointerPluginD0Ev>:
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ffe7 	bl	8006858 <_ZN16SetPointerPluginD1Ev>
 800688a:	2114      	movs	r1, #20
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 f8ef 	bl	8007a70 <_ZdlPvj>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
    }
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4910      	ldr	r1, [pc, #64]	; (8006900 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80068c0:	4618      	mov	r0, r3
 80068c2:	f003 fc84 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	609a      	str	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	741a      	strb	r2, [r3, #16]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3314      	adds	r3, #20
 80068dc:	4908      	ldr	r1, [pc, #32]	; (8006900 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 80068de:	4618      	mov	r0, r3
 80068e0:	f003 fc75 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	621a      	str	r2, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4618      	mov	r0, r3
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08020f44 	.word	0x08020f44

08006904 <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	605a      	str	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	609a      	str	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	60da      	str	r2, [r3, #12]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	611a      	str	r2, [r3, #16]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3314      	adds	r3, #20
 800692e:	4907      	ldr	r1, [pc, #28]	; (800694c <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8006930:	4618      	mov	r0, r3
 8006932:	f003 fc4c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	61da      	str	r2, [r3, #28]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	621a      	str	r2, [r3, #32]
    {
    }
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08020f44 	.word	0x08020f44

08006950 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	3314      	adds	r3, #20
 800695c:	4618      	mov	r0, r3
 800695e:	f003 ffee 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4618      	mov	r0, r3
 8006966:	3708      	adds	r7, #8
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ffc4 	bl	8006904 <_ZN20JUnitTestGroupResultC1Ev>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3328      	adds	r3, #40	; 0x28
 8006980:	4907      	ldr	r1, [pc, #28]	; (80069a0 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 8006982:	4618      	mov	r0, r3
 8006984:	f003 fc23 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	3330      	adds	r3, #48	; 0x30
 800698c:	4904      	ldr	r1, [pc, #16]	; (80069a0 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 800698e:	4618      	mov	r0, r3
 8006990:	f003 fc1d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	08020f44 	.word	0x08020f44

080069a4 <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f007 f936 	bl	800dc20 <_ZN10TestOutputC1Ev>
 80069b4:	4a09      	ldr	r2, [pc, #36]	; (80069dc <_ZN15JUnitTestOutputC1Ev+0x38>)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	601a      	str	r2, [r3, #0]
 80069ba:	224d      	movs	r2, #77	; 0x4d
 80069bc:	4908      	ldr	r1, [pc, #32]	; (80069e0 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 80069be:	2038      	movs	r0, #56	; 0x38
 80069c0:	f001 f842 	bl	8007a48 <_ZnwjPKci>
 80069c4:	4604      	mov	r4, r0
 80069c6:	4620      	mov	r0, r4
 80069c8:	f7ff ffd0 	bl	800696c <_ZN19JUnitTestOutputImplC1Ev>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	611c      	str	r4, [r3, #16]
{
}
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4618      	mov	r0, r3
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd90      	pop	{r4, r7, pc}
 80069da:	bf00      	nop
 80069dc:	0802433c 	.word	0x0802433c
 80069e0:	08020f48 	.word	0x08020f48

080069e4 <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3330      	adds	r3, #48	; 0x30
 80069f0:	4618      	mov	r0, r3
 80069f2:	f003 ffa4 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3328      	adds	r3, #40	; 0x28
 80069fa:	4618      	mov	r0, r3
 80069fc:	f003 ff9f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7ff ffa4 	bl	8006950 <_ZN20JUnitTestGroupResultD1Ev>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	4a0c      	ldr	r2, [pc, #48]	; (8006a50 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f838 	bl	8006a98 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691c      	ldr	r4, [r3, #16]
 8006a2c:	2c00      	cmp	r4, #0
 8006a2e:	d006      	beq.n	8006a3e <_ZN15JUnitTestOutputD1Ev+0x2a>
 8006a30:	4620      	mov	r0, r4
 8006a32:	f7ff ffd7 	bl	80069e4 <_ZN19JUnitTestOutputImplD1Ev>
 8006a36:	2138      	movs	r1, #56	; 0x38
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f001 f819 	bl	8007a70 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f007 f90b 	bl	800dc5c <_ZN10TestOutputD1Ev>
}
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd90      	pop	{r4, r7, pc}
 8006a50:	0802433c 	.word	0x0802433c

08006a54 <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
}
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff ffd9 	bl	8006a14 <_ZN15JUnitTestOutputD1Ev>
 8006a62:	2114      	movs	r1, #20
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f803 	bl	8007a70 <_ZdlPvj>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	4618      	mov	r0, r3
 8006a82:	f003 ff5c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f003 ff58 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 8006a98:	b590      	push	{r4, r7, lr}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	2200      	movs	r2, #0
 8006aae:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f103 0414 	add.w	r4, r3, #20
 8006ab8:	f107 0308 	add.w	r3, r7, #8
 8006abc:	491d      	ldr	r1, [pc, #116]	; (8006b34 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f003 fb85 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4620      	mov	r0, r4
 8006acc:	f003 fbeb 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8006ad0:	f107 0308 	add.w	r3, r7, #8
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f003 ff32 	bl	800a93e <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d018      	beq.n	8006b1a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d004      	beq.n	8006b00 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	3204      	adds	r2, #4
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	4790      	blx	r2
        delete cur;
 8006b00:	697c      	ldr	r4, [r7, #20]
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	d006      	beq.n	8006b14 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff ffb4 	bl	8006a74 <_ZN23JUnitTestCaseResultNodeD1Ev>
 8006b0c:	2128      	movs	r1, #40	; 0x28
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 ffae 	bl	8007a70 <_ZdlPvj>
        cur = tmp;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	617b      	str	r3, [r7, #20]
    while (cur) {
 8006b18:	e7e3      	b.n	8006ae2 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2200      	movs	r2, #0
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd90      	pop	{r4, r7, pc}
 8006b32:	bf00      	nop
 8006b34:	08020f44 	.word	0x08020f44

08006b38 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
}
 8006b56:	bf00      	nop
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 8006b62:	b590      	push	{r4, r7, lr}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	6a1c      	ldr	r4, [r3, #32]
 8006b72:	6838      	ldr	r0, [r7, #0]
 8006b74:	f009 f9c6 	bl	800ff04 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	6a1c      	ldr	r4, [r3, #32]
 8006b82:	6838      	ldr	r0, [r7, #0]
 8006b84:	f7ff fe8a 	bl	800689c <_ZNK10TestResult13getCheckCountEv>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	6223      	str	r3, [r4, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd90      	pop	{r4, r7, pc}

08006b94 <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 8006baa:	b590      	push	{r4, r7, lr}
 8006bac:	b083      	sub	sp, #12
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	691c      	ldr	r4, [r3, #16]
 8006bb8:	6838      	ldr	r0, [r7, #0]
 8006bba:	f009 f9af 	bl	800ff1c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3364      	adds	r3, #100	; 0x64
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
    resetTestGroupResult();
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f7ff ff62 	bl	8006a98 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 8006bd4:	bf00      	nop
 8006bd6:	370c      	adds	r7, #12
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd90      	pop	{r4, r7, pc}

08006bdc <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8006bdc:	b590      	push	{r4, r7, lr}
 8006bde:	b089      	sub	sp, #36	; 0x24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	3201      	adds	r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	f103 0414 	add.w	r4, r3, #20
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	6839      	ldr	r1, [r7, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f009 fcef 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 8006c04:	f107 0308 	add.w	r3, r7, #8
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	f003 fb4b 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8006c10:	f107 0308 	add.w	r3, r7, #8
 8006c14:	4618      	mov	r0, r3
 8006c16:	f003 fe92 	bl	800a93e <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8006c1a:	4b3c      	ldr	r3, [pc, #240]	; (8006d0c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4798      	blx	r3
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	691b      	ldr	r3, [r3, #16]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d110      	bne.n	8006c54 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 8006c32:	2288      	movs	r2, #136	; 0x88
 8006c34:	4936      	ldr	r1, [pc, #216]	; (8006d10 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8006c36:	2028      	movs	r0, #40	; 0x28
 8006c38:	f000 ff06 	bl	8007a48 <_ZnwjPKci>
 8006c3c:	4604      	mov	r4, r0
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f7ff fe38 	bl	80068b4 <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8006c48:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6912      	ldr	r2, [r2, #16]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	61d3      	str	r3, [r2, #28]
 8006c52:	e013      	b.n	8006c7c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 8006c54:	228b      	movs	r2, #139	; 0x8b
 8006c56:	492e      	ldr	r1, [pc, #184]	; (8006d10 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 8006c58:	2028      	movs	r0, #40	; 0x28
 8006c5a:	f000 fef5 	bl	8007a48 <_ZnwjPKci>
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7ff fe27 	bl	80068b4 <_ZN23JUnitTestCaseResultNodeC1Ev>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	691b      	ldr	r3, [r3, #16]
 8006c72:	6a1a      	ldr	r2, [r3, #32]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c7a:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	461c      	mov	r4, r3
 8006c84:	f107 0310 	add.w	r3, r7, #16
 8006c88:	6839      	ldr	r1, [r7, #0]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f009 fc9a 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 8006c90:	f107 0310 	add.w	r3, r7, #16
 8006c94:	4619      	mov	r1, r3
 8006c96:	4620      	mov	r0, r4
 8006c98:	f003 fb05 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8006c9c:	f107 0310 	add.w	r3, r7, #16
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f003 fe4c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f103 0414 	add.w	r4, r3, #20
 8006cb0:	f107 0318 	add.w	r3, r7, #24
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f009 fd55 	bl	8010766 <_ZNK10UtestShell7getFileEv>
 8006cbc:	f107 0318 	add.w	r3, r7, #24
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f003 faef 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8006cc8:	f107 0318 	add.w	r3, r7, #24
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f003 fe36 	bl	800a93e <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	6a1c      	ldr	r4, [r3, #32]
 8006cd8:	6838      	ldr	r0, [r7, #0]
 8006cda:	f009 fd53 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	3318      	adds	r3, #24
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6838      	ldr	r0, [r7, #0]
 8006cec:	4798      	blx	r3
 8006cee:	4603      	mov	r3, r0
 8006cf0:	f083 0301 	eor.w	r3, r3, #1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d004      	beq.n	8006d04 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	6a1b      	ldr	r3, [r3, #32]
 8006d00:	2201      	movs	r2, #1
 8006d02:	741a      	strb	r2, [r3, #16]
    }
}
 8006d04:	bf00      	nop
 8006d06:	3724      	adds	r7, #36	; 0x24
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd90      	pop	{r4, r7, pc}
 8006d0c:	200000a4 	.word	0x200000a4
 8006d10:	08020f48 	.word	0x08020f48

08006d14 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8006d20:	f107 0310 	add.w	r3, r7, #16
 8006d24:	4928      	ldr	r1, [pc, #160]	; (8006dc8 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 8006d26:	4618      	mov	r0, r3
 8006d28:	f003 fa51 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	3328      	adds	r3, #40	; 0x28
 8006d32:	4618      	mov	r0, r3
 8006d34:	f003 fdf2 	bl	800a91c <_ZNK12SimpleString7isEmptyEv>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f083 0301 	eor.w	r3, r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00f      	beq.n	8006d64 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8006d4c:	f107 0310 	add.w	r3, r7, #16
 8006d50:	4611      	mov	r1, r2
 8006d52:	4618      	mov	r0, r3
 8006d54:	f003 fe70 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 8006d58:	f107 0310 	add.w	r3, r7, #16
 8006d5c:	491b      	ldr	r1, [pc, #108]	; (8006dcc <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f003 fe7c 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 8006d64:	f107 0310 	add.w	r3, r7, #16
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f003 fe64 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	3384      	adds	r3, #132	; 0x84
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f107 0018 	add.w	r0, r7, #24
 8006d7c:	f107 0210 	add.w	r2, r7, #16
 8006d80:	68b9      	ldr	r1, [r7, #8]
 8006d82:	4798      	blx	r3
 8006d84:	f107 0320 	add.w	r3, r7, #32
 8006d88:	4911      	ldr	r1, [pc, #68]	; (8006dd0 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f003 fa1f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f107 0220 	add.w	r2, r7, #32
 8006d96:	f107 0118 	add.w	r1, r7, #24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f003 fe31 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8006da0:	f107 0320 	add.w	r3, r7, #32
 8006da4:	4618      	mov	r0, r3
 8006da6:	f003 fdca 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8006daa:	f107 0318 	add.w	r3, r7, #24
 8006dae:	4618      	mov	r0, r3
 8006db0:	f003 fdc5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 8006db4:	f107 0310 	add.w	r3, r7, #16
 8006db8:	4618      	mov	r0, r3
 8006dba:	f003 fdc0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8006dbe:	bf00      	nop
}
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	3728      	adds	r7, #40	; 0x28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	08020f64 	.word	0x08020f64
 8006dcc:	08020f70 	.word	0x08020f70
 8006dd0:	08020f74 	.word	0x08020f74

08006dd4 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b086      	sub	sp, #24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f003 fa47 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	225f      	movs	r2, #95	; 0x5f
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f003 fbcc 	bl	800a59a <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	3301      	adds	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e7f0      	b.n	8006dec <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8006e0a:	bf00      	nop
}
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	08020f7c 	.word	0x08020f7c

08006e18 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	3328      	adds	r3, #40	; 0x28
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f003 fa37 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
    }
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8006e40:	b590      	push	{r4, r7, lr}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	3368      	adds	r3, #104	; 0x68
 8006e4e:	681c      	ldr	r4, [r3, #0]
 8006e50:	f107 0308 	add.w	r3, r7, #8
 8006e54:	4908      	ldr	r1, [pc, #32]	; (8006e78 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8006e56:	4618      	mov	r0, r3
 8006e58:	f003 f9b9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	47a0      	blx	r4
 8006e66:	f107 0308 	add.w	r3, r7, #8
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f003 fd67 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8006e70:	bf00      	nop
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}
 8006e78:	08020f88 	.word	0x08020f88

08006e7c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8006e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e80:	b08a      	sub	sp, #40	; 0x28
 8006e82:	af04      	add	r7, sp, #16
 8006e84:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8006e8c:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8006e92:	3314      	adds	r3, #20
 8006e94:	4618      	mov	r0, r3
 8006e96:	f003 fd25 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8006e9a:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8006ea2:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	4a23      	ldr	r2, [pc, #140]	; (8006f38 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006eac:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb0:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8006eb2:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	691a      	ldr	r2, [r3, #16]
 8006eba:	4b1f      	ldr	r3, [pc, #124]	; (8006f38 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8006ebc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ec0:	099b      	lsrs	r3, r3, #6
 8006ec2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006ec6:	fb01 f303 	mul.w	r3, r1, r3
 8006eca:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8006ecc:	603b      	str	r3, [r7, #0]
 8006ece:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4798      	blx	r3
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f107 0008 	add.w	r0, r7, #8
 8006eda:	9303      	str	r3, [sp, #12]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	9302      	str	r3, [sp, #8]
 8006ee0:	9601      	str	r6, [sp, #4]
 8006ee2:	9500      	str	r5, [sp, #0]
 8006ee4:	4623      	mov	r3, r4
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	4915      	ldr	r1, [pc, #84]	; (8006f40 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8006eea:	f004 fa2f 	bl	800b34c <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	3368      	adds	r3, #104	; 0x68
 8006ef4:	681c      	ldr	r4, [r3, #0]
 8006ef6:	f107 0308 	add.w	r3, r7, #8
 8006efa:	4618      	mov	r0, r3
 8006efc:	f003 fcf2 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8006f00:	4602      	mov	r2, r0
 8006f02:	f107 0310 	add.w	r3, r7, #16
 8006f06:	4611      	mov	r1, r2
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f003 f960 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006f0e:	f107 0310 	add.w	r3, r7, #16
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	47a0      	blx	r4
 8006f18:	f107 0310 	add.w	r3, r7, #16
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f003 fd0e 	bl	800a93e <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8006f22:	f107 0308 	add.w	r3, r7, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f003 fd09 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f36:	bf00      	nop
 8006f38:	10624dd3 	.word	0x10624dd3
 8006f3c:	200000a8 	.word	0x200000a8
 8006f40:	08020fb4 	.word	0x08020fb4

08006f44 <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8006f44:	b590      	push	{r4, r7, lr}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	3368      	adds	r3, #104	; 0x68
 8006f52:	681c      	ldr	r4, [r3, #0]
 8006f54:	f107 0308 	add.w	r3, r7, #8
 8006f58:	4912      	ldr	r1, [pc, #72]	; (8006fa4 <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f003 f937 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	47a0      	blx	r4
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f003 fce5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3368      	adds	r3, #104	; 0x68
 8006f7a:	681c      	ldr	r4, [r3, #0]
 8006f7c:	f107 0310 	add.w	r3, r7, #16
 8006f80:	4909      	ldr	r1, [pc, #36]	; (8006fa8 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8006f82:	4618      	mov	r0, r3
 8006f84:	f003 f923 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	47a0      	blx	r4
 8006f92:	f107 0310 	add.w	r3, r7, #16
 8006f96:	4618      	mov	r0, r3
 8006f98:	f003 fcd1 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8006f9c:	bf00      	nop
 8006f9e:	371c      	adds	r7, #28
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd90      	pop	{r4, r7, pc}
 8006fa4:	08021024 	.word	0x08021024
 8006fa8:	08021034 	.word	0x08021034

08006fac <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	60b9      	str	r1, [r7, #8]
 8006fb6:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f003 fc93 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f003 f903 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8006fc8:	4a0e      	ldr	r2, [pc, #56]	; (8007004 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8006fca:	490f      	ldr	r1, [pc, #60]	; (8007008 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f003 fb13 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8006fd2:	4a0e      	ldr	r2, [pc, #56]	; (800700c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8006fd4:	490e      	ldr	r1, [pc, #56]	; (8007010 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f003 fb0e 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8006fdc:	4a0d      	ldr	r2, [pc, #52]	; (8007014 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8006fde:	490e      	ldr	r1, [pc, #56]	; (8007018 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f003 fb09 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8006fe6:	4a0d      	ldr	r2, [pc, #52]	; (800701c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8006fe8:	490d      	ldr	r1, [pc, #52]	; (8007020 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f003 fb04 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8006ff0:	4a0c      	ldr	r2, [pc, #48]	; (8007024 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8006ff2:	490d      	ldr	r1, [pc, #52]	; (8007028 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f003 faff 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8006ffa:	bf00      	nop
}
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	08021044 	.word	0x08021044
 8007008:	0802104c 	.word	0x0802104c
 800700c:	08021050 	.word	0x08021050
 8007010:	08021058 	.word	0x08021058
 8007014:	0802105c 	.word	0x0802105c
 8007018:	08021064 	.word	0x08021064
 800701c:	08021068 	.word	0x08021068
 8007020:	08021070 	.word	0x08021070
 8007024:	08021074 	.word	0x08021074
 8007028:	08021080 	.word	0x08021080

0800702c <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 800702c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007030:	b096      	sub	sp, #88	; 0x58
 8007032:	af08      	add	r7, sp, #32
 8007034:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 800703e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007040:	2b00      	cmp	r3, #0
 8007042:	f000 80b2 	beq.w	80071aa <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 800704a:	3328      	adds	r3, #40	; 0x28
 800704c:	4618      	mov	r0, r3
 800704e:	f003 fc49 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007052:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	3328      	adds	r3, #40	; 0x28
 800705a:	4618      	mov	r0, r3
 800705c:	f003 fc5e 	bl	800a91c <_ZNK12SimpleString7isEmptyEv>
 8007060:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8007062:	2b00      	cmp	r3, #0
 8007064:	d001      	beq.n	800706a <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8007066:	4c53      	ldr	r4, [pc, #332]	; (80071b4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8007068:	e000      	b.n	800706c <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 800706a:	4c53      	ldr	r4, [pc, #332]	; (80071b8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8007070:	3314      	adds	r3, #20
 8007072:	4618      	mov	r0, r3
 8007074:	f003 fc36 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007078:	4605      	mov	r5, r0
 800707a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800707c:	4618      	mov	r0, r3
 800707e:	f003 fc31 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007082:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8007084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007086:	6a1a      	ldr	r2, [r3, #32]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	691b      	ldr	r3, [r3, #16]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8007090:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8007092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	4a49      	ldr	r2, [pc, #292]	; (80071bc <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8007098:	fba2 2303 	umull	r2, r3, r2, r3
 800709c:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 800709e:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 80070a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070a2:	689a      	ldr	r2, [r3, #8]
 80070a4:	4b45      	ldr	r3, [pc, #276]	; (80071bc <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 80070a6:	fba3 1302 	umull	r1, r3, r3, r2
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 80070b6:	603b      	str	r3, [r7, #0]
 80070b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ba:	3314      	adds	r3, #20
 80070bc:	4618      	mov	r0, r3
 80070be:	f003 fc11 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80070c2:	4602      	mov	r2, r0
 80070c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f107 0014 	add.w	r0, r7, #20
 80070cc:	9306      	str	r3, [sp, #24]
 80070ce:	9205      	str	r2, [sp, #20]
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	9204      	str	r2, [sp, #16]
 80070d4:	687a      	ldr	r2, [r7, #4]
 80070d6:	9203      	str	r2, [sp, #12]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	9302      	str	r3, [sp, #8]
 80070dc:	9601      	str	r6, [sp, #4]
 80070de:	9500      	str	r5, [sp, #0]
 80070e0:	4623      	mov	r3, r4
 80070e2:	4642      	mov	r2, r8
 80070e4:	4936      	ldr	r1, [pc, #216]	; (80071c0 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 80070e6:	f004 f931 	bl	800b34c <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3368      	adds	r3, #104	; 0x68
 80070f0:	681c      	ldr	r4, [r3, #0]
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	4618      	mov	r0, r3
 80070f8:	f003 fbf4 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80070fc:	4602      	mov	r2, r0
 80070fe:	f107 031c 	add.w	r3, r7, #28
 8007102:	4611      	mov	r1, r2
 8007104:	4618      	mov	r0, r3
 8007106:	f003 f862 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800710a:	f107 031c 	add.w	r3, r7, #28
 800710e:	4619      	mov	r1, r3
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	47a0      	blx	r4
 8007114:	f107 031c 	add.w	r3, r7, #28
 8007118:	4618      	mov	r0, r3
 800711a:	f003 fc10 	bl	800a93e <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007124:	6a12      	ldr	r2, [r2, #32]
 8007126:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8007128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3388      	adds	r3, #136	; 0x88
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	4798      	blx	r3
 800713e:	e017      	b.n	8007170 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8007140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007142:	7c1b      	ldrb	r3, [r3, #16]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d013      	beq.n	8007170 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3368      	adds	r3, #104	; 0x68
 800714e:	681c      	ldr	r4, [r3, #0]
 8007150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007154:	491b      	ldr	r1, [pc, #108]	; (80071c4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8007156:	4618      	mov	r0, r3
 8007158:	f003 f839 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800715c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007160:	4619      	mov	r1, r3
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	47a0      	blx	r4
 8007166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f003 fbe7 	bl	800a93e <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3368      	adds	r3, #104	; 0x68
 8007176:	681c      	ldr	r4, [r3, #0]
 8007178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800717c:	4912      	ldr	r1, [pc, #72]	; (80071c8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 800717e:	4618      	mov	r0, r3
 8007180:	f003 f825 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8007184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007188:	4619      	mov	r1, r3
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	47a0      	blx	r4
 800718e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007192:	4618      	mov	r0, r3
 8007194:	f003 fbd3 	bl	800a93e <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 800719e:	f107 0314 	add.w	r3, r7, #20
 80071a2:	4618      	mov	r0, r3
 80071a4:	f003 fbcb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    while (cur) {
 80071a8:	e749      	b.n	800703e <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 80071aa:	bf00      	nop
 80071ac:	3738      	adds	r7, #56	; 0x38
 80071ae:	46bd      	mov	sp, r7
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	08020f44 	.word	0x08020f44
 80071b8:	08021084 	.word	0x08021084
 80071bc:	10624dd3 	.word	0x10624dd3
 80071c0:	08021088 	.word	0x08021088
 80071c4:	080210e4 	.word	0x080210e4
 80071c8:	080210f4 	.word	0x080210f4

080071cc <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 80071cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ce:	b091      	sub	sp, #68	; 0x44
 80071d0:	af02      	add	r7, sp, #8
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68d9      	ldr	r1, [r3, #12]
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3308      	adds	r3, #8
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f107 0210 	add.w	r2, r7, #16
 80071e8:	4610      	mov	r0, r2
 80071ea:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80071ec:	f107 0310 	add.w	r3, r7, #16
 80071f0:	4618      	mov	r0, r3
 80071f2:	f003 fb77 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80071f6:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	3314      	adds	r3, #20
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4610      	mov	r0, r2
 8007208:	4798      	blx	r3
 800720a:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 800720c:	461e      	mov	r6, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3380      	adds	r3, #128	; 0x80
 8007214:	681c      	ldr	r4, [r3, #0]
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	68d9      	ldr	r1, [r3, #12]
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3318      	adds	r3, #24
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f107 0220 	add.w	r2, r7, #32
 8007228:	4610      	mov	r0, r2
 800722a:	4798      	blx	r3
 800722c:	f107 0318 	add.w	r3, r7, #24
 8007230:	f107 0220 	add.w	r2, r7, #32
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	47a0      	blx	r4
 800723a:	f107 0318 	add.w	r3, r7, #24
 800723e:	4618      	mov	r0, r3
 8007240:	f003 fb50 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007244:	4603      	mov	r3, r0
 8007246:	f107 0008 	add.w	r0, r7, #8
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4633      	mov	r3, r6
 800724e:	462a      	mov	r2, r5
 8007250:	4924      	ldr	r1, [pc, #144]	; (80072e4 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8007252:	f004 f87b 	bl	800b34c <_Z16StringFromFormatPKcz>
 8007256:	f107 0318 	add.w	r3, r7, #24
 800725a:	4618      	mov	r0, r3
 800725c:	f003 fb6f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8007260:	f107 0320 	add.w	r3, r7, #32
 8007264:	4618      	mov	r0, r3
 8007266:	f003 fb6a 	bl	800a93e <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f003 fb65 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3368      	adds	r3, #104	; 0x68
 800727a:	681c      	ldr	r4, [r3, #0]
 800727c:	f107 0308 	add.w	r3, r7, #8
 8007280:	4618      	mov	r0, r3
 8007282:	f003 fb2f 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007286:	4602      	mov	r2, r0
 8007288:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800728c:	4611      	mov	r1, r2
 800728e:	4618      	mov	r0, r3
 8007290:	f002 ff9d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8007294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007298:	4619      	mov	r1, r3
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	47a0      	blx	r4
 800729e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80072a2:	4618      	mov	r0, r3
 80072a4:	f003 fb4b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3368      	adds	r3, #104	; 0x68
 80072ae:	681c      	ldr	r4, [r3, #0]
 80072b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072b4:	490c      	ldr	r1, [pc, #48]	; (80072e8 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 80072b6:	4618      	mov	r0, r3
 80072b8:	f002 ff89 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80072bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	47a0      	blx	r4
 80072c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80072ca:	4618      	mov	r0, r3
 80072cc:	f003 fb37 	bl	800a93e <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 80072d0:	f107 0308 	add.w	r3, r7, #8
 80072d4:	4618      	mov	r0, r3
 80072d6:	f003 fb32 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80072da:	bf00      	nop
 80072dc:	373c      	adds	r7, #60	; 0x3c
 80072de:	46bd      	mov	sp, r7
 80072e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e2:	bf00      	nop
 80072e4:	08021104 	.word	0x08021104
 80072e8:	08021140 	.word	0x08021140

080072ec <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 80072ec:	b590      	push	{r4, r7, lr}
 80072ee:	b08d      	sub	sp, #52	; 0x34
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3368      	adds	r3, #104	; 0x68
 80072fa:	681c      	ldr	r4, [r3, #0]
 80072fc:	f107 0308 	add.w	r3, r7, #8
 8007300:	4933      	ldr	r1, [pc, #204]	; (80073d0 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8007302:	4618      	mov	r0, r3
 8007304:	f002 ff63 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8007308:	f107 0308 	add.w	r3, r7, #8
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	47a0      	blx	r4
 8007312:	f107 0308 	add.w	r3, r7, #8
 8007316:	4618      	mov	r0, r3
 8007318:	f003 fb11 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3368      	adds	r3, #104	; 0x68
 8007322:	681c      	ldr	r4, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	3380      	adds	r3, #128	; 0x80
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6912      	ldr	r2, [r2, #16]
 8007330:	3230      	adds	r2, #48	; 0x30
 8007332:	f107 0010 	add.w	r0, r7, #16
 8007336:	6879      	ldr	r1, [r7, #4]
 8007338:	4798      	blx	r3
 800733a:	f107 0310 	add.w	r3, r7, #16
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	47a0      	blx	r4
 8007344:	f107 0310 	add.w	r3, r7, #16
 8007348:	4618      	mov	r0, r3
 800734a:	f003 faf8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3368      	adds	r3, #104	; 0x68
 8007354:	681c      	ldr	r4, [r3, #0]
 8007356:	f107 0318 	add.w	r3, r7, #24
 800735a:	491e      	ldr	r1, [pc, #120]	; (80073d4 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 800735c:	4618      	mov	r0, r3
 800735e:	f002 ff36 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8007362:	f107 0318 	add.w	r3, r7, #24
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	47a0      	blx	r4
 800736c:	f107 0318 	add.w	r3, r7, #24
 8007370:	4618      	mov	r0, r3
 8007372:	f003 fae4 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3368      	adds	r3, #104	; 0x68
 800737c:	681c      	ldr	r4, [r3, #0]
 800737e:	f107 0320 	add.w	r3, r7, #32
 8007382:	4915      	ldr	r1, [pc, #84]	; (80073d8 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8007384:	4618      	mov	r0, r3
 8007386:	f002 ff22 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800738a:	f107 0320 	add.w	r3, r7, #32
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	47a0      	blx	r4
 8007394:	f107 0320 	add.w	r3, r7, #32
 8007398:	4618      	mov	r0, r3
 800739a:	f003 fad0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3368      	adds	r3, #104	; 0x68
 80073a4:	681c      	ldr	r4, [r3, #0]
 80073a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073aa:	490c      	ldr	r1, [pc, #48]	; (80073dc <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 80073ac:	4618      	mov	r0, r3
 80073ae:	f002 ff0e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80073b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	47a0      	blx	r4
 80073bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073c0:	4618      	mov	r0, r3
 80073c2:	f003 fabc 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80073c6:	bf00      	nop
 80073c8:	3734      	adds	r7, #52	; 0x34
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd90      	pop	{r4, r7, pc}
 80073ce:	bf00      	nop
 80073d0:	0802114c 	.word	0x0802114c
 80073d4:	0802115c 	.word	0x0802115c
 80073d8:	0802116c 	.word	0x0802116c
 80073dc:	08021188 	.word	0x08021188

080073e0 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 80073e0:	b590      	push	{r4, r7, lr}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3360      	adds	r3, #96	; 0x60
 80073ee:	681c      	ldr	r4, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	335c      	adds	r3, #92	; 0x5c
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6912      	ldr	r2, [r2, #16]
 80073fc:	3214      	adds	r2, #20
 80073fe:	f107 0008 	add.w	r0, r7, #8
 8007402:	6879      	ldr	r1, [r7, #4]
 8007404:	4798      	blx	r3
 8007406:	f107 0308 	add.w	r3, r7, #8
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	47a0      	blx	r4
 8007410:	f107 0308 	add.w	r3, r7, #8
 8007414:	4618      	mov	r0, r3
 8007416:	f003 fa92 	bl	800a93e <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	3370      	adds	r3, #112	; 0x70
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	4798      	blx	r3
    writeTestSuiteSummary();
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3374      	adds	r3, #116	; 0x74
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
    writeProperties();
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3378      	adds	r3, #120	; 0x78
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	4798      	blx	r3
    writeTestCases();
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	337c      	adds	r3, #124	; 0x7c
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	4798      	blx	r3
    writeFileEnding();
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	338c      	adds	r3, #140	; 0x8c
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	4798      	blx	r3
    closeFile();
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	336c      	adds	r3, #108	; 0x6c
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	4798      	blx	r3
}
 8007462:	bf00      	nop
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	bd90      	pop	{r4, r7, pc}

0800746a <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	6039      	str	r1, [r7, #0]
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	3330      	adds	r3, #48	; 0x30
 8007490:	6839      	ldr	r1, [r7, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f003 fae2 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}

080074a0 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 80074e0:	b590      	push	{r4, r7, lr}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d113      	bne.n	800751e <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	3201      	adds	r2, #1
 80074fe:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8007500:	f240 1233 	movw	r2, #307	; 0x133
 8007504:	4908      	ldr	r1, [pc, #32]	; (8007528 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 8007506:	2034      	movs	r0, #52	; 0x34
 8007508:	f000 fa9e 	bl	8007a48 <_ZnwjPKci>
 800750c:	4604      	mov	r4, r0
 800750e:	6839      	ldr	r1, [r7, #0]
 8007510:	4620      	mov	r0, r4
 8007512:	f004 fd37 	bl	800bf84 <_ZN11TestFailureC1ERKS_>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	60dc      	str	r4, [r3, #12]
    }
}
 800751e:	bf00      	nop
 8007520:	370c      	adds	r7, #12
 8007522:	46bd      	mov	sp, r7
 8007524:	bd90      	pop	{r4, r7, pc}
 8007526:	bf00      	nop
 8007528:	08020f48 	.word	0x08020f48

0800752c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 800752c:	b5b0      	push	{r4, r5, r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 8007536:	4b08      	ldr	r3, [pc, #32]	; (8007558 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	6838      	ldr	r0, [r7, #0]
 800753c:	f003 f9d2 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007540:	4602      	mov	r2, r0
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691c      	ldr	r4, [r3, #16]
 8007546:	4905      	ldr	r1, [pc, #20]	; (800755c <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8007548:	4610      	mov	r0, r2
 800754a:	47a8      	blx	r5
 800754c:	4603      	mov	r3, r0
 800754e:	6263      	str	r3, [r4, #36]	; 0x24
}
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bdb0      	pop	{r4, r5, r7, pc}
 8007558:	200000b0 	.word	0x200000b0
 800755c:	08021198 	.word	0x08021198

08007560 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 800756a:	4b08      	ldr	r3, [pc, #32]	; (800758c <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 800756c:	681c      	ldr	r4, [r3, #0]
 800756e:	6838      	ldr	r0, [r7, #0]
 8007570:	f003 f9b8 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007574:	4602      	mov	r2, r0
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	47a0      	blx	r4
}
 8007582:	bf00      	nop
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}
 800758a:	bf00      	nop
 800758c:	200000b4 	.word	0x200000b4

08007590 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6912      	ldr	r2, [r2, #16]
 80075a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075a2:	4610      	mov	r0, r2
 80075a4:	4798      	blx	r3
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200000b8 	.word	0x200000b8

080075b4 <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
        return false;
 80075c2:	2300      	movs	r3, #0
    }
 80075c4:	4618      	mov	r0, r3
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
    {
 80075d8:	4a04      	ldr	r2, [pc, #16]	; (80075ec <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	601a      	str	r2, [r3, #0]
    }
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4618      	mov	r0, r3
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	080243e8 	.word	0x080243e8

080075f0 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    }
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ffe9 	bl	80075d0 <_ZN17MemoryLeakFailureD1Ev>
 80075fe:	2104      	movs	r1, #4
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fa35 	bl	8007a70 <_ZdlPvj>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4618      	mov	r0, r3
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	687c      	ldr	r4, [r7, #4]
 800761a:	f000 fc71 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800761e:	4603      	mov	r3, r0
 8007620:	4618      	mov	r0, r3
 8007622:	f00c ff6c 	bl	80144fe <_ZN18MemoryLeakDetector8getMutexEv>
 8007626:	4603      	mov	r3, r0
 8007628:	4619      	mov	r1, r3
 800762a:	4620      	mov	r0, r4
 800762c:	f002 fb24 	bl	8009c78 <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	bd90      	pop	{r4, r7, pc}

0800763a <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4618      	mov	r0, r3
 8007646:	f002 fb29 	bl	8009c9c <_ZN15ScopedMutexLockD1Ev>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 8007654:	b590      	push	{r4, r7, lr}
 8007656:	b087      	sub	sp, #28
 8007658:	af02      	add	r7, sp, #8
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 8007660:	f000 fc4e 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007664:	4604      	mov	r4, r0
 8007666:	f006 f8df 	bl	800d828 <_Z25getCurrentMallocAllocatorv>
 800766a:	4601      	mov	r1, r0
 800766c:	2301      	movs	r3, #1
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	9300      	str	r3, [sp, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4620      	mov	r0, r4
 800767a:	f00d f983 	bl	8014984 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800767e:	4603      	mov	r3, r0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	bd90      	pop	{r4, r7, pc}

08007688 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b087      	sub	sp, #28
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 8007694:	f000 fc34 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007698:	4603      	mov	r3, r0
 800769a:	68f9      	ldr	r1, [r7, #12]
 800769c:	4618      	mov	r0, r3
 800769e:	f00c ffdd 	bl	801465c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 80076a2:	f000 fc2d 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80076a6:	4604      	mov	r4, r0
 80076a8:	f006 f8be 	bl	800d828 <_Z25getCurrentMallocAllocatorv>
 80076ac:	4601      	mov	r1, r0
 80076ae:	2301      	movs	r3, #1
 80076b0:	9301      	str	r3, [sp, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4620      	mov	r0, r4
 80076bc:	f00d f996 	bl	80149ec <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd90      	pop	{r4, r7, pc}

080076c8 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b089      	sub	sp, #36	; 0x24
 80076cc:	af04      	add	r7, sp, #16
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
 80076d4:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 80076d6:	f000 fc13 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80076da:	4604      	mov	r4, r0
 80076dc:	f006 f8a4 	bl	800d828 <_Z25getCurrentMallocAllocatorv>
 80076e0:	4601      	mov	r1, r0
 80076e2:	2301      	movs	r3, #1
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	9301      	str	r3, [sp, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4620      	mov	r0, r4
 80076f4:	f00d f9de 	bl	8014ab4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 80076f8:	4603      	mov	r3, r0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd90      	pop	{r4, r7, pc}
	...

08007704 <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007710:	4b04      	ldr	r3, [pc, #16]	; (8007724 <_ZL13normal_mallocjPKcj+0x20>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	4798      	blx	r3
 8007718:	4603      	mov	r3, r0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200000c4 	.word	0x200000c4

08007728 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 8007736:	4b05      	ldr	r3, [pc, #20]	; (800774c <_ZL14normal_reallocPvjPKcj+0x24>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	4798      	blx	r3
 8007740:	4603      	mov	r3, r0
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200000c8 	.word	0x200000c8

08007750 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 800775c:	4b03      	ldr	r3, [pc, #12]	; (800776c <_ZL11normal_freePvPKcj+0x1c>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	4798      	blx	r3
}
 8007764:	bf00      	nop
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	200000cc 	.word	0x200000cc

08007770 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007770:	b590      	push	{r4, r7, lr}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 8007778:	f107 0308 	add.w	r3, r7, #8
 800777c:	4618      	mov	r0, r3
 800777e:	f7ff ff47 	bl	8007610 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8007782:	f000 fbbd 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007786:	4604      	mov	r4, r0
 8007788:	f005 ff9e 	bl	800d6c8 <_Z22getCurrentNewAllocatorv>
 800778c:	4601      	mov	r1, r0
 800778e:	2300      	movs	r3, #0
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	4620      	mov	r0, r4
 8007794:	f00d f864 	bl	8014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007798:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800779a:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 800779c:	f107 0308 	add.w	r3, r7, #8
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ff4a 	bl	800763a <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 80077a6:	4623      	mov	r3, r4
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd90      	pop	{r4, r7, pc}

080077b0 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80077b8:	f000 fba2 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80077bc:	4604      	mov	r4, r0
 80077be:	f005 ff83 	bl	800d6c8 <_Z22getCurrentNewAllocatorv>
 80077c2:	4601      	mov	r1, r0
 80077c4:	2300      	movs	r3, #0
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4620      	mov	r0, r4
 80077ca:	f00d f849 	bl	8014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80077ce:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80077d0:	68fb      	ldr	r3, [r7, #12]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd90      	pop	{r4, r7, pc}

080077da <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 80077da:	b590      	push	{r4, r7, lr}
 80077dc:	b083      	sub	sp, #12
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80077e2:	f000 fb8d 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80077e6:	4604      	mov	r4, r0
 80077e8:	f005 ff6e 	bl	800d6c8 <_Z22getCurrentNewAllocatorv>
 80077ec:	4601      	mov	r1, r0
 80077ee:	2300      	movs	r3, #0
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	4620      	mov	r0, r4
 80077f4:	f00d f834 	bl	8014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80077f8:	4603      	mov	r3, r0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd90      	pop	{r4, r7, pc}

08007802 <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 8007802:	b590      	push	{r4, r7, lr}
 8007804:	b089      	sub	sp, #36	; 0x24
 8007806:	af02      	add	r7, sp, #8
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 800780e:	f000 fb77 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007812:	4604      	mov	r4, r0
 8007814:	f005 ff58 	bl	800d6c8 <_Z22getCurrentNewAllocatorv>
 8007818:	4601      	mov	r1, r0
 800781a:	2300      	movs	r3, #0
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4620      	mov	r0, r4
 8007828:	f00d f8ac 	bl	8014984 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 800782c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800782e:	697b      	ldr	r3, [r7, #20]
}
 8007830:	4618      	mov	r0, r3
 8007832:	371c      	adds	r7, #28
 8007834:	46bd      	mov	sp, r7
 8007836:	bd90      	pop	{r4, r7, pc}

08007838 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8007838:	b590      	push	{r4, r7, lr}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8007840:	f000 fb5e 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007844:	4604      	mov	r4, r0
 8007846:	f005 ff97 	bl	800d778 <_Z27getCurrentNewArrayAllocatorv>
 800784a:	4601      	mov	r1, r0
 800784c:	2300      	movs	r3, #0
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	4620      	mov	r0, r4
 8007852:	f00d f805 	bl	8014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007856:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8007858:	68fb      	ldr	r3, [r7, #12]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	bd90      	pop	{r4, r7, pc}

08007862 <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 8007862:	b590      	push	{r4, r7, lr}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 800786a:	f000 fb49 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800786e:	4604      	mov	r4, r0
 8007870:	f005 ff82 	bl	800d778 <_Z27getCurrentNewArrayAllocatorv>
 8007874:	4601      	mov	r1, r0
 8007876:	2300      	movs	r3, #0
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	4620      	mov	r0, r4
 800787c:	f00c fff0 	bl	8014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8007880:	4603      	mov	r3, r0
}
 8007882:	4618      	mov	r0, r3
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	bd90      	pop	{r4, r7, pc}

0800788a <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800788a:	b590      	push	{r4, r7, lr}
 800788c:	b089      	sub	sp, #36	; 0x24
 800788e:	af02      	add	r7, sp, #8
 8007890:	60f8      	str	r0, [r7, #12]
 8007892:	60b9      	str	r1, [r7, #8]
 8007894:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 8007896:	f000 fb33 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800789a:	4604      	mov	r4, r0
 800789c:	f005 ff6c 	bl	800d778 <_Z27getCurrentNewArrayAllocatorv>
 80078a0:	4601      	mov	r1, r0
 80078a2:	2300      	movs	r3, #0
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4620      	mov	r0, r4
 80078b0:	f00d f868 	bl	8014984 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80078b4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80078b6:	697b      	ldr	r3, [r7, #20]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd90      	pop	{r4, r7, pc}

080078c0 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 80078c0:	b590      	push	{r4, r7, lr}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80078c8:	f000 fb1a 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80078cc:	4603      	mov	r3, r0
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f00c fec3 	bl	801465c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 80078d6:	f000 fb13 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80078da:	4604      	mov	r4, r0
 80078dc:	f005 fef4 	bl	800d6c8 <_Z22getCurrentNewAllocatorv>
 80078e0:	4601      	mov	r1, r0
 80078e2:	2300      	movs	r3, #0
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	4620      	mov	r0, r4
 80078e8:	f00d f8ca 	bl	8014a80 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd90      	pop	{r4, r7, pc}

080078f4 <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 80078fc:	f000 fb00 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8007900:	4603      	mov	r3, r0
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	4618      	mov	r0, r3
 8007906:	f00c fea9 	bl	801465c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 800790a:	f000 faf9 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800790e:	4604      	mov	r4, r0
 8007910:	f005 ff32 	bl	800d778 <_Z27getCurrentNewArrayAllocatorv>
 8007914:	4601      	mov	r1, r0
 8007916:	2300      	movs	r3, #0
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	4620      	mov	r0, r4
 800791c:	f00d f8b0 	bl	8014a80 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	bd90      	pop	{r4, r7, pc}

08007928 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007930:	4b04      	ldr	r3, [pc, #16]	; (8007944 <_ZL19normal_operator_newj+0x1c>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
 8007938:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800793a:	68fb      	ldr	r3, [r7, #12]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	200000c4 	.word	0x200000c4

08007948 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8007950:	4b04      	ldr	r3, [pc, #16]	; (8007964 <_ZL27normal_operator_new_nothrowj+0x1c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
 8007958:	4603      	mov	r3, r0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3708      	adds	r7, #8
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	200000c4 	.word	0x200000c4

08007968 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68f8      	ldr	r0, [r7, #12]
 800797a:	4798      	blx	r3
 800797c:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800797e:	697b      	ldr	r3, [r7, #20]
}
 8007980:	4618      	mov	r0, r3
 8007982:	3718      	adds	r7, #24
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	200000c4 	.word	0x200000c4

0800798c <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <_ZL25normal_operator_new_arrayj+0x1c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	4798      	blx	r3
 800799c:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800799e:	68fb      	ldr	r3, [r7, #12]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200000c4 	.word	0x200000c4

080079ac <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3
 80079bc:	4603      	mov	r3, r0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200000c4 	.word	0x200000c4

080079cc <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b086      	sub	sp, #24
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80079d8:	4b04      	ldr	r3, [pc, #16]	; (80079ec <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	4798      	blx	r3
 80079e0:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80079e2:	697b      	ldr	r3, [r7, #20]
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3718      	adds	r7, #24
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	200000c4 	.word	0x200000c4

080079f0 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 80079f8:	4b03      	ldr	r3, [pc, #12]	; (8007a08 <_ZL22normal_operator_deletePv+0x18>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	4798      	blx	r3
}
 8007a00:	bf00      	nop
 8007a02:	3708      	adds	r7, #8
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	200000cc 	.word	0x200000cc

08007a0c <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8007a14:	4b03      	ldr	r3, [pc, #12]	; (8007a24 <_ZL28normal_operator_delete_arrayPv+0x18>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3
}
 8007a1c:	bf00      	nop
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200000cc 	.word	0x200000cc

08007a28 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8007a30:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <_Znwj+0x1c>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	4798      	blx	r3
 8007a38:	4603      	mov	r3, r0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	20000028 	.word	0x20000028

08007a48 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 8007a54:	4b05      	ldr	r3, [pc, #20]	; (8007a6c <_ZnwjPKci+0x24>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	68b9      	ldr	r1, [r7, #8]
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	4798      	blx	r3
 8007a60:	4603      	mov	r3, r0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000030 	.word	0x20000030

08007a70 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 8007a7a:	4b04      	ldr	r3, [pc, #16]	; (8007a8c <_ZdlPvj+0x1c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	20000040 	.word	0x20000040

08007a90 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 8007a9c:	4b05      	ldr	r3, [pc, #20]	; (8007ab4 <_ZnajPKci+0x24>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	68b9      	ldr	r1, [r7, #8]
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4798      	blx	r3
 8007aa8:	4603      	mov	r3, r0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3710      	adds	r7, #16
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	2000003c 	.word	0x2000003c

08007ab8 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8007ac0:	4b03      	ldr	r3, [pc, #12]	; (8007ad0 <_ZdaPv+0x18>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
}
 8007ac8:	bf00      	nop
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000044 	.word	0x20000044

08007ad4 <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8007ade:	4b04      	ldr	r3, [pc, #16]	; (8007af0 <_ZdaPvj+0x1c>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	4798      	blx	r3
}
 8007ae6:	bf00      	nop
 8007ae8:	3708      	adds	r7, #8
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	20000044 	.word	0x20000044

08007af4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 8007af4:	b480      	push	{r7}
 8007af6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8007af8:	4b12      	ldr	r3, [pc, #72]	; (8007b44 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8007afa:	4a13      	ldr	r2, [pc, #76]	; (8007b48 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8007afc:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8007b00:	4a13      	ldr	r2, [pc, #76]	; (8007b50 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 8007b02:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 8007b04:	4b13      	ldr	r3, [pc, #76]	; (8007b54 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 8007b06:	4a14      	ldr	r2, [pc, #80]	; (8007b58 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8007b08:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8007b0a:	4b14      	ldr	r3, [pc, #80]	; (8007b5c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8007b0c:	4a14      	ldr	r2, [pc, #80]	; (8007b60 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8007b0e:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8007b10:	4b14      	ldr	r3, [pc, #80]	; (8007b64 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 8007b12:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 8007b14:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 8007b16:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8007b1a:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8007b1e:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8007b20:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 8007b22:	4b16      	ldr	r3, [pc, #88]	; (8007b7c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 8007b26:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8007b28:	4b16      	ldr	r3, [pc, #88]	; (8007b84 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8007b2a:	4a17      	ldr	r2, [pc, #92]	; (8007b88 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8007b2c:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 8007b32:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 8007b34:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 8007b36:	4a18      	ldr	r2, [pc, #96]	; (8007b98 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8007b38:	601a      	str	r2, [r3, #0]

#endif
}
 8007b3a:	bf00      	nop
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20000028 	.word	0x20000028
 8007b48:	08007929 	.word	0x08007929
 8007b4c:	2000002c 	.word	0x2000002c
 8007b50:	08007949 	.word	0x08007949
 8007b54:	20000030 	.word	0x20000030
 8007b58:	08007969 	.word	0x08007969
 8007b5c:	20000034 	.word	0x20000034
 8007b60:	0800798d 	.word	0x0800798d
 8007b64:	20000038 	.word	0x20000038
 8007b68:	080079ad 	.word	0x080079ad
 8007b6c:	2000003c 	.word	0x2000003c
 8007b70:	080079cd 	.word	0x080079cd
 8007b74:	20000040 	.word	0x20000040
 8007b78:	080079f1 	.word	0x080079f1
 8007b7c:	20000044 	.word	0x20000044
 8007b80:	08007a0d 	.word	0x08007a0d
 8007b84:	20000010 	.word	0x20000010
 8007b88:	08007705 	.word	0x08007705
 8007b8c:	20000018 	.word	0x20000018
 8007b90:	08007729 	.word	0x08007729
 8007b94:	20000014 	.word	0x20000014
 8007b98:	08007751 	.word	0x08007751

08007b9c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 8007ba0:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 8007baa:	4b06      	ldr	r3, [pc, #24]	; (8007bc4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8007bb8:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	20000028 	.word	0x20000028
 8007bc8:	080077b1 	.word	0x080077b1
 8007bcc:	08007771 	.word	0x08007771

08007bd0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 8007bd4:	4b1f      	ldr	r3, [pc, #124]	; (8007c54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007bdc:	6013      	str	r3, [r2, #0]
 8007bde:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	bfcc      	ite	gt
 8007be6:	2301      	movgt	r3, #1
 8007be8:	2300      	movle	r3, #0
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d12e      	bne.n	8007c4e <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8007bf0:	4b19      	ldr	r3, [pc, #100]	; (8007c58 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a19      	ldr	r2, [pc, #100]	; (8007c5c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 8007bf6:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8007bf8:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a19      	ldr	r2, [pc, #100]	; (8007c64 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8007bfe:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8007c00:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 8007c06:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8007c08:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a19      	ldr	r2, [pc, #100]	; (8007c74 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8007c0e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8007c10:	4b19      	ldr	r3, [pc, #100]	; (8007c78 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a19      	ldr	r2, [pc, #100]	; (8007c7c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 8007c16:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8007c18:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8007c1e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8007c20:	4b19      	ldr	r3, [pc, #100]	; (8007c88 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a19      	ldr	r2, [pc, #100]	; (8007c8c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 8007c26:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a19      	ldr	r2, [pc, #100]	; (8007c94 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8007c2e:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8007c30:	4b19      	ldr	r3, [pc, #100]	; (8007c98 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a19      	ldr	r2, [pc, #100]	; (8007c9c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 8007c36:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8007c38:	4b19      	ldr	r3, [pc, #100]	; (8007ca0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a19      	ldr	r2, [pc, #100]	; (8007ca4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8007c3e:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a19      	ldr	r2, [pc, #100]	; (8007cac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 8007c46:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8007c48:	f7ff ff54 	bl	8007af4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8007c4c:	e000      	b.n	8007c50 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8007c4e:	bf00      	nop
#endif
}
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	20000658 	.word	0x20000658
 8007c58:	20000028 	.word	0x20000028
 8007c5c:	20000048 	.word	0x20000048
 8007c60:	2000002c 	.word	0x2000002c
 8007c64:	2000004c 	.word	0x2000004c
 8007c68:	20000030 	.word	0x20000030
 8007c6c:	20000050 	.word	0x20000050
 8007c70:	20000034 	.word	0x20000034
 8007c74:	20000054 	.word	0x20000054
 8007c78:	20000038 	.word	0x20000038
 8007c7c:	20000058 	.word	0x20000058
 8007c80:	2000003c 	.word	0x2000003c
 8007c84:	2000005c 	.word	0x2000005c
 8007c88:	20000040 	.word	0x20000040
 8007c8c:	20000060 	.word	0x20000060
 8007c90:	20000044 	.word	0x20000044
 8007c94:	20000064 	.word	0x20000064
 8007c98:	20000010 	.word	0x20000010
 8007c9c:	2000001c 	.word	0x2000001c
 8007ca0:	20000018 	.word	0x20000018
 8007ca4:	20000024 	.word	0x20000024
 8007ca8:	20000014 	.word	0x20000014
 8007cac:	20000020 	.word	0x20000020

08007cb0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 8007cb4:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	4a1e      	ldr	r2, [pc, #120]	; (8007d34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	4b1d      	ldr	r3, [pc, #116]	; (8007d34 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	bfcc      	ite	gt
 8007cc6:	2301      	movgt	r3, #1
 8007cc8:	2300      	movle	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d12c      	bne.n	8007d2a <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8007cd0:	4b19      	ldr	r3, [pc, #100]	; (8007d38 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a19      	ldr	r2, [pc, #100]	; (8007d3c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 8007cd6:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8007cd8:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8007cde:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8007ce0:	4b19      	ldr	r3, [pc, #100]	; (8007d48 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a19      	ldr	r2, [pc, #100]	; (8007d4c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 8007ce6:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8007ce8:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a19      	ldr	r2, [pc, #100]	; (8007d54 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8007cee:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8007cf0:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a19      	ldr	r2, [pc, #100]	; (8007d5c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 8007cf6:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8007cfe:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8007d00:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a19      	ldr	r2, [pc, #100]	; (8007d6c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 8007d06:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8007d08:	4b19      	ldr	r3, [pc, #100]	; (8007d70 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8007d0e:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8007d10:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a19      	ldr	r2, [pc, #100]	; (8007d7c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 8007d16:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8007d18:	4b19      	ldr	r3, [pc, #100]	; (8007d80 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8007d1e:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8007d20:	4b19      	ldr	r3, [pc, #100]	; (8007d88 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a19      	ldr	r2, [pc, #100]	; (8007d8c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	e000      	b.n	8007d2c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8007d2a:	bf00      	nop
#endif
}
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	20000658 	.word	0x20000658
 8007d38:	20000048 	.word	0x20000048
 8007d3c:	20000028 	.word	0x20000028
 8007d40:	2000004c 	.word	0x2000004c
 8007d44:	2000002c 	.word	0x2000002c
 8007d48:	20000050 	.word	0x20000050
 8007d4c:	20000030 	.word	0x20000030
 8007d50:	20000054 	.word	0x20000054
 8007d54:	20000034 	.word	0x20000034
 8007d58:	20000058 	.word	0x20000058
 8007d5c:	20000038 	.word	0x20000038
 8007d60:	2000005c 	.word	0x2000005c
 8007d64:	2000003c 	.word	0x2000003c
 8007d68:	20000060 	.word	0x20000060
 8007d6c:	20000040 	.word	0x20000040
 8007d70:	20000064 	.word	0x20000064
 8007d74:	20000044 	.word	0x20000044
 8007d78:	2000001c 	.word	0x2000001c
 8007d7c:	20000010 	.word	0x20000010
 8007d80:	20000024 	.word	0x20000024
 8007d84:	20000018 	.word	0x20000018
 8007d88:	20000020 	.word	0x20000020
 8007d8c:	20000014 	.word	0x20000014

08007d90 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
    {
 8007d98:	4a05      	ldr	r2, [pc, #20]	; (8007db0 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fc15 	bl	80075d0 <_ZN17MemoryLeakFailureD1Ev>
    }
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	080243d4 	.word	0x080243d4

08007db4 <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
    }
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff ffe7 	bl	8007d90 <_ZN25MemoryLeakWarningReporterD1Ev>
 8007dc2:	2104      	movs	r1, #4
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f7ff fe53 	bl	8007a70 <_ZdlPvj>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	4a04      	ldr	r2, [pc, #16]	; (8007df0 <_ZN14TestTerminatorC1Ev+0x1c>)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4618      	mov	r0, r3
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	08024d80 	.word	0x08024d80

08007df4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7ff ffe8 	bl	8007dd4 <_ZN14TestTerminatorC1Ev>
 8007e04:	4a03      	ldr	r2, [pc, #12]	; (8007e14 <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	08024d58 	.word	0x08024d58

08007e18 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8007e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e1a:	b099      	sub	sp, #100	; 0x64
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8007e22:	f009 fdb7 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8007e26:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8007e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	339c      	adds	r3, #156	; 0x9c
 8007e2e:	681c      	ldr	r4, [r3, #0]
 8007e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e36:	4618      	mov	r0, r3
 8007e38:	f008 fbc4 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 8007e3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e40:	4618      	mov	r0, r3
 8007e42:	f002 fd4f 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8007e46:	4605      	mov	r5, r0
 8007e48:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007e4a:	f008 fc9b 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 8007e4e:	4606      	mov	r6, r0
 8007e50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e54:	6839      	ldr	r1, [r7, #0]
 8007e56:	4618      	mov	r0, r3
 8007e58:	f002 f9b9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8007e5c:	f107 000c 	add.w	r0, r7, #12
 8007e60:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	4633      	mov	r3, r6
 8007e68:	462a      	mov	r2, r5
 8007e6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e6c:	f004 fd14 	bl	800c898 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8007e70:	2300      	movs	r3, #0
 8007e72:	653b      	str	r3, [r7, #80]	; 0x50
 8007e74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7ff ffbb 	bl	8007df4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8007e7e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007e82:	f107 030c 	add.w	r3, r7, #12
 8007e86:	4619      	mov	r1, r3
 8007e88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007e8a:	47a0      	blx	r4
 8007e8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007e90:	4618      	mov	r0, r3
 8007e92:	f009 fe79 	bl	8011b88 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8007e96:	f107 030c 	add.w	r3, r7, #12
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f000 f9ac 	bl	80081f8 <_ZN11FailFailureD1Ev>
 8007ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 fd4a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8007eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f002 fd45 	bl	800a93e <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8007eb4:	bf00      	nop
 8007eb6:	375c      	adds	r7, #92	; 0x5c
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007ebc <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr
 8007ed8:	080243e8 	.word	0x080243e8

08007edc <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff ffe8 	bl	8007ebc <_ZN17MemoryLeakFailureC1Ev>
 8007eec:	4a03      	ldr	r2, [pc, #12]	; (8007efc <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3708      	adds	r7, #8
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	080243d4 	.word	0x080243d4

08007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8007f00:	b598      	push	{r3, r4, r7, lr}
 8007f02:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8007f04:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d11b      	bne.n	8007f44 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8007f0c:	f7ff fe60 	bl	8007bd0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8007f10:	2004      	movs	r0, #4
 8007f12:	f7ff fd89 	bl	8007a28 <_Znwj>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461c      	mov	r4, r3
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f7ff ffde 	bl	8007edc <_ZN25MemoryLeakWarningReporterC1Ev>
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8007f22:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8007f24:	f241 1050 	movw	r0, #4432	; 0x1150
 8007f28:	f7ff fd7e 	bl	8007a28 <_Znwj>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	461c      	mov	r4, r3
 8007f30:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4619      	mov	r1, r3
 8007f36:	4620      	mov	r0, r4
 8007f38:	f00c fa3e 	bl	80143b8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8007f3c:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007f3e:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8007f40:	f7ff feb6 	bl	8007cb0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8007f44:	4b01      	ldr	r3, [pc, #4]	; (8007f4c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	bd98      	pop	{r3, r4, r7, pc}
 8007f4c:	20000660 	.word	0x20000660
 8007f50:	2000065c 	.word	0x2000065c

08007f54 <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	78fa      	ldrb	r2, [r7, #3]
 8007f64:	765a      	strb	r2, [r3, #25]
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
	...

08007f74 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8007f78:	f7ff fdbc 	bl	8007af4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8007f7c:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d004      	beq.n	8007f8e <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	3204      	adds	r2, #4
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	4790      	blx	r2
    delete globalReporter;
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	3204      	adds	r2, #4
 8007f9a:	6812      	ldr	r2, [r2, #0]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	4790      	blx	r2
    globalDetector = NULLPTR;
 8007fa0:	4b02      	ldr	r3, [pc, #8]	; (8007fac <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
}
 8007fa6:	bf00      	nop
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop
 8007fac:	20000660 	.word	0x20000660
 8007fb0:	2000065c 	.word	0x2000065c

08007fb4 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	68b9      	ldr	r1, [r7, #8]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f006 fdfd 	bl	800ebc4 <_ZN10TestPluginC1ERK12SimpleString>
 8007fca:	4a14      	ldr	r2, [pc, #80]	; (800801c <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	601a      	str	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	761a      	strb	r2, [r3, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	765a      	strb	r2, [r3, #25]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8007fe2:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8007fea:	4a0d      	ldr	r2, [pc, #52]	; (8008020 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	615a      	str	r2, [r3, #20]
 8007ffc:	e004      	b.n	8008008 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8007ffe:	f7ff ff7f 	bl	8007f00 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8008002:	4602      	mov	r2, r0
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	4618      	mov	r0, r3
 800800e:	f00c fa69 	bl	80144e4 <_ZN18MemoryLeakDetector6enableEv>
}
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4618      	mov	r0, r3
 8008016:	3710      	adds	r7, #16
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	080243fc 	.word	0x080243fc
 8008020:	20000664 	.word	0x20000664

08008024 <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	4a09      	ldr	r2, [pc, #36]	; (8008054 <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	7e5b      	ldrb	r3, [r3, #25]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 800803a:	f7ff fd5b 	bl	8007af4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 800803e:	f7ff ff99 	bl	8007f74 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4618      	mov	r0, r3
 8008046:	f006 fdf9 	bl	800ec3c <_ZN10TestPluginD1Ev>
    }
}
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	080243fc 	.word	0x080243fc

08008058 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
}
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff ffdf 	bl	8008024 <_ZN23MemoryLeakWarningPluginD1Ev>
 8008066:	2124      	movs	r1, #36	; 0x24
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff fd01 	bl	8007a70 <_ZdlPvj>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	4618      	mov	r0, r3
 800808a:	f00c fa0e 	bl	80144aa <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f7fd ffb0 	bl	8005ff4 <_ZNK10TestResult15getFailureCountEv>
 8008094:	4602      	mov	r2, r0
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	621a      	str	r2, [r3, #32]
}
 800809a:	bf00      	nop
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 80080a4:	b590      	push	{r4, r7, lr}
 80080a6:	b097      	sub	sp, #92	; 0x5c
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f00c fa08 	bl	80144ca <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	2103      	movs	r1, #3
 80080c0:	4618      	mov	r0, r3
 80080c2:	f00c fda5 	bl	8014c10 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80080c6:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	7e1b      	ldrb	r3, [r3, #24]
 80080cc:	f083 0301 	eor.w	r3, r3, #1
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00e      	beq.n	80080f4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80080dc:	429a      	cmp	r2, r3
 80080de:	d009      	beq.n	80080f4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6a1c      	ldr	r4, [r3, #32]
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fd ff85 	bl	8005ff4 <_ZNK10TestResult15getFailureCountEv>
 80080ea:	4603      	mov	r3, r0
 80080ec:	429c      	cmp	r4, r3
 80080ee:	d101      	bne.n	80080f4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e000      	b.n	80080f6 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 80080f4:	2300      	movs	r3, #0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d04c      	beq.n	8008194 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 80080fa:	f7ff fd4f 	bl	8007b9c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d028      	beq.n	8008156 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	2103      	movs	r1, #3
 800810a:	4618      	mov	r0, r3
 800810c:	f00c fd45 	bl	8014b9a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8008110:	4602      	mov	r2, r0
 8008112:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008116:	4611      	mov	r1, r2
 8008118:	4618      	mov	r0, r3
 800811a:	f002 f858 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800811e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8008122:	f107 0310 	add.w	r3, r7, #16
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	4618      	mov	r0, r3
 800812a:	f003 feaf 	bl	800be8c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800812e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008132:	4618      	mov	r0, r3
 8008134:	f002 fc03 	bl	800a93e <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3334      	adds	r3, #52	; 0x34
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f107 0210 	add.w	r2, r7, #16
 8008144:	4611      	mov	r1, r2
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 800814a:	f107 0310 	add.w	r3, r7, #16
 800814e:	4618      	mov	r0, r3
 8008150:	f003 ff5c 	bl	800c00c <_ZN11TestFailureD1Ev>
 8008154:	e01e      	b.n	8008194 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d01a      	beq.n	8008194 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	3338      	adds	r3, #56	; 0x38
 8008164:	681c      	ldr	r4, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	461a      	mov	r2, r3
 800816c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8008170:	4910      	ldr	r1, [pc, #64]	; (80081b4 <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8008172:	4618      	mov	r0, r3
 8008174:	f003 f8ea 	bl	800b34c <_Z16StringFromFormatPKcz>
 8008178:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800817c:	4618      	mov	r0, r3
 800817e:	f002 fbb1 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8008182:	4603      	mov	r3, r0
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	47a0      	blx	r4
 800818a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800818e:	4618      	mov	r0, r3
 8008190:	f002 fbd5 	bl	800a93e <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	4618      	mov	r0, r3
 800819a:	f00c fd13 	bl	8014bc4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	61da      	str	r2, [r3, #28]
}
 80081aa:	bf00      	nop
 80081ac:	375c      	adds	r7, #92	; 0x5c
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd90      	pop	{r4, r7, pc}
 80081b2:	bf00      	nop
 80081b4:	0802119c 	.word	0x0802119c

080081b8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f00c fd21 	bl	8014c10 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 80081ce:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d007      	beq.n	80081e8 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	695b      	ldr	r3, [r3, #20]
 80081dc:	2102      	movs	r1, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f00c fcdb 	bl	8014b9a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 80081e4:	4603      	mov	r3, r0
 80081e6:	e000      	b.n	80081ea <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 80081e8:	4b02      	ldr	r3, [pc, #8]	; (80081f4 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3710      	adds	r7, #16
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	080211dc 	.word	0x080211dc

080081f8 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	4a05      	ldr	r2, [pc, #20]	; (8008218 <_ZN11FailFailureD1Ev+0x20>)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4618      	mov	r0, r3
 800820a:	f003 feff 	bl	800c00c <_ZN11TestFailureD1Ev>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	08024444 	.word	0x08024444

0800821c <_ZN11FailFailureD0Ev>:
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ffe7 	bl	80081f8 <_ZN11FailFailureD1Ev>
 800822a:	2134      	movs	r1, #52	; 0x34
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff fc1f 	bl	8007a70 <_ZdlPvj>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4618      	mov	r0, r3
 8008236:	3708      	adds	r7, #8
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <_ZN17cpputest_longlongC1Ei>:

struct cpputest_longlong
{
#if defined(__cplusplus)
  cpputest_longlong() {}
  cpputest_longlong(int) {}
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <_ZN18cpputest_ulonglongC1Ei>:

struct cpputest_ulonglong
{
#if defined(__cplusplus)
  cpputest_ulonglong() {}
  cpputest_ulonglong(int) {}
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <_ZN19MockFailureReporterC1Ev>:
class MockFailureReporter
{
protected:
    bool crashOnFailure_;
public:
    MockFailureReporter() : crashOnFailure_(false){}
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	4a06      	ldr	r2, [pc, #24]	; (8008290 <_ZN19MockFailureReporterC1Ev+0x24>)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	601a      	str	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	711a      	strb	r2, [r3, #4]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4618      	mov	r0, r3
 8008284:	370c      	adds	r7, #12
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	08025620 	.word	0x08025620

08008294 <_ZN19MockFailureReporterD1Ev>:
    virtual ~MockFailureReporter() {}
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	4a04      	ldr	r2, [pc, #16]	; (80082b0 <_ZN19MockFailureReporterD1Ev+0x1c>)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4618      	mov	r0, r3
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	08025620 	.word	0x08025620

080082b4 <_ZN19MockFailureReporterD0Ev>:
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ffe9 	bl	8008294 <_ZN19MockFailureReporterD1Ev>
 80082c2:	2108      	movs	r1, #8
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7ff fbd3 	bl	8007a70 <_ZdlPvj>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <_ZN11MockFailureD1Ev>:

class MockFailure : public TestFailure
{
public:
    MockFailure(UtestShell* test);
    virtual ~MockFailure() _destructor_override {}
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	4a05      	ldr	r2, [pc, #20]	; (80082f4 <_ZN11MockFailureD1Ev+0x20>)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4618      	mov	r0, r3
 80082e6:	f003 fe91 	bl	800c00c <_ZN11TestFailureD1Ev>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	08024598 	.word	0x08024598

080082f8 <_ZN11MockFailureD0Ev>:
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ffe7 	bl	80082d4 <_ZN11MockFailureD1Ev>
 8008306:	2134      	movs	r1, #52	; 0x34
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fbb1 	bl	8007a70 <_ZdlPvj>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4618      	mov	r0, r3
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <_ZN14MockNamedValueC1ERKS_>:
class MockNamedValueComparatorsAndCopiersRepository;
class MockNamedValue
{
public:
    MockNamedValue(const SimpleString& name);
    DEFAULT_COPY_CONSTRUCTOR(MockNamedValue)
 8008318:	b590      	push	{r4, r7, lr}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	4a16      	ldr	r2, [pc, #88]	; (800837c <_ZN14MockNamedValueC1ERKS_+0x64>)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	1d1a      	adds	r2, r3, #4
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	3304      	adds	r3, #4
 8008330:	4619      	mov	r1, r3
 8008332:	4610      	mov	r0, r2
 8008334:	f001 ff9f 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f103 020c 	add.w	r2, r3, #12
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	4619      	mov	r1, r3
 8008344:	4610      	mov	r0, r2
 8008346:	f001 ff96 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f102 0418 	add.w	r4, r2, #24
 8008352:	3318      	adds	r3, #24
 8008354:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008356:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	629a      	str	r2, [r3, #40]	; 0x28
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	bd90      	pop	{r4, r7, pc}
 800837c:	08025660 	.word	0x08025660

08008380 <_Z4mockRK12SimpleStringP19MockFailureReporter>:
#define MOCK_SUPPORT_SCOPE_PREFIX "!!!$$$MockingSupportScope$$$!!!"

static MockSupport global_mock;

MockSupport& mock(const SimpleString& mockName, MockFailureReporter* failureReporterForThisCall)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
    MockSupport& mock_support = (mockName != "") ? *global_mock.getMockSupportScope(mockName) : global_mock;
 800838a:	f107 030c 	add.w	r3, r7, #12
 800838e:	4916      	ldr	r1, [pc, #88]	; (80083e8 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x68>)
 8008390:	4618      	mov	r0, r3
 8008392:	f001 ff1c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8008396:	f107 030c 	add.w	r3, r7, #12
 800839a:	4619      	mov	r1, r3
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f002 fb1f 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x34>
 80083a8:	6879      	ldr	r1, [r7, #4]
 80083aa:	4810      	ldr	r0, [pc, #64]	; (80083ec <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 80083ac:	f000 ff70 	bl	8009290 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>
 80083b0:	4603      	mov	r3, r0
 80083b2:	e000      	b.n	80083b6 <_Z4mockRK12SimpleStringP19MockFailureReporter+0x36>
 80083b4:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <_Z4mockRK12SimpleStringP19MockFailureReporter+0x6c>)
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	f107 030c 	add.w	r3, r7, #12
 80083bc:	4618      	mov	r0, r3
 80083be:	f002 fabe 	bl	800a93e <_ZN12SimpleStringD1Ev>
    mock_support.setActiveReporter(failureReporterForThisCall);
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	33a8      	adds	r3, #168	; 0xa8
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6978      	ldr	r0, [r7, #20]
 80083ce:	4798      	blx	r3
    mock_support.setDefaultComparatorsAndCopiersRepository();
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	33ac      	adds	r3, #172	; 0xac
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6978      	ldr	r0, [r7, #20]
 80083da:	4798      	blx	r3
    return mock_support;
 80083dc:	697b      	ldr	r3, [r7, #20]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	080211e0 	.word	0x080211e0
 80083ec:	20000668 	.word	0x20000668

080083f0 <_ZN11MockSupportC1ERK12SimpleString>:

MockSupport::MockSupport(const SimpleString& mockName)
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
    : actualCallOrder_(0), expectedCallOrder_(0), strictOrdering_(false), standardReporter_(&defaultReporter_), ignoreOtherCalls_(false), enabled_(true), lastActualFunctionCall_(NULLPTR), mockName_(mockName), tracing_(false)
 80083fa:	4a21      	ldr	r2, [pc, #132]	; (8008480 <_ZN11MockSupportC1ERK12SimpleString+0x90>)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	609a      	str	r2, [r3, #8]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	731a      	strb	r2, [r3, #12]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f103 0218 	add.w	r2, r3, #24
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	615a      	str	r2, [r3, #20]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3318      	adds	r3, #24
 8008420:	4618      	mov	r0, r3
 8008422:	f7ff ff23 	bl	800826c <_ZN19MockFailureReporterC1Ev>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	3320      	adds	r3, #32
 800842a:	4618      	mov	r0, r3
 800842c:	f010 fefc 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	62da      	str	r2, [r3, #44]	; 0x2c
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3330      	adds	r3, #48	; 0x30
 800844a:	4618      	mov	r0, r3
 800844c:	f014 fbea 	bl	801cc24 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3338      	adds	r3, #56	; 0x38
 8008454:	4618      	mov	r0, r3
 8008456:	f014 faf4 	bl	801ca42 <_ZN18MockNamedValueListC1Ev>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	333c      	adds	r3, #60	; 0x3c
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	4618      	mov	r0, r3
 8008462:	f001 ff08 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
{
    setActiveReporter(NULLPTR);
 800846e:	2100      	movs	r1, #0
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f894 	bl	800859e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>
}
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	08024470 	.word	0x08024470

08008484 <_ZN11MockSupportD1Ev>:

MockSupport::~MockSupport()
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	4a0d      	ldr	r2, [pc, #52]	; (80084c4 <_ZN11MockSupportD1Ev+0x40>)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	333c      	adds	r3, #60	; 0x3c
 8008496:	4618      	mov	r0, r3
 8008498:	f002 fa51 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3330      	adds	r3, #48	; 0x30
 80084a0:	4618      	mov	r0, r3
 80084a2:	f014 fbd3 	bl	801cc4c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	3320      	adds	r3, #32
 80084aa:	4618      	mov	r0, r3
 80084ac:	f010 fed0 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	3318      	adds	r3, #24
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7ff feed 	bl	8008294 <_ZN19MockFailureReporterD1Ev>
{
}
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4618      	mov	r0, r3
 80084be:	3708      	adds	r7, #8
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	08024470 	.word	0x08024470

080084c8 <_ZN11MockSupportD0Ev>:
MockSupport::~MockSupport()
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
}
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f7ff ffd7 	bl	8008484 <_ZN11MockSupportD1Ev>
 80084d6:	2148      	movs	r1, #72	; 0x48
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff fac9 	bl	8007a70 <_ZdlPvj>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4618      	mov	r0, r3
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <_ZN11MockSupport14crashOnFailureEb>:

void MockSupport::crashOnFailure(bool shouldCrash)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	70fb      	strb	r3, [r7, #3]
    activeReporter_->crashOnFailure(shouldCrash);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	691a      	ldr	r2, [r3, #16]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3310      	adds	r3, #16
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	78f9      	ldrb	r1, [r7, #3]
 8008504:	4610      	mov	r0, r2
 8008506:	4798      	blx	r3
}
 8008508:	bf00      	nop
 800850a:	3708      	adds	r7, #8
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter>:

void MockSupport::setMockFailureStandardReporter(MockFailureReporter* reporter)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
    standardReporter_ = (reporter != NULLPTR) ? reporter : &defaultReporter_;
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x16>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3318      	adds	r3, #24
 8008524:	e000      	b.n	8008528 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x18>
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6153      	str	r3, [r2, #20]

    if (lastActualFunctionCall_)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x3a>
        lastActualFunctionCall_->setMockFailureReporter(standardReporter_);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	33c8      	adds	r3, #200	; 0xc8
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	6952      	ldr	r2, [r2, #20]
 8008546:	4611      	mov	r1, r2
 8008548:	4798      	blx	r3

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	3338      	adds	r3, #56	; 0x38
 800854e:	4618      	mov	r0, r3
 8008550:	f014 fb0d 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01c      	beq.n	8008596 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x86>
        if (getMockSupport(p)) getMockSupport(p)->setMockFailureStandardReporter(standardReporter_);
 800855c:	68f9      	ldr	r1, [r7, #12]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 ff26 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	bf14      	ite	ne
 800856a:	2301      	movne	r3, #1
 800856c:	2300      	moveq	r3, #0
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x7c>
 8008574:	68f9      	ldr	r1, [r7, #12]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f000 ff1a 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800857c:	4603      	mov	r3, r0
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	32a4      	adds	r2, #164	; 0xa4
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	6879      	ldr	r1, [r7, #4]
 8008586:	6949      	ldr	r1, [r1, #20]
 8008588:	4618      	mov	r0, r3
 800858a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f014 f9f7 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	e7df      	b.n	8008556 <_ZN11MockSupport30setMockFailureStandardReporterEP19MockFailureReporter+0x46>
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter>:

void MockSupport::setActiveReporter(MockFailureReporter* reporter)
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
    activeReporter_ = (reporter) ? reporter : standardReporter_;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x16>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	695b      	ldr	r3, [r3, #20]
 80085b2:	e000      	b.n	80085b6 <_ZN11MockSupport17setActiveReporterEP19MockFailureReporter+0x18>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6113      	str	r3, [r2, #16]
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c4:	4770      	bx	lr

080085c6 <_ZN11MockSupport41setDefaultComparatorsAndCopiersRepositoryEv>:

void MockSupport::setDefaultComparatorsAndCopiersRepository()
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b082      	sub	sp, #8
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
    MockNamedValue::setDefaultComparatorsAndCopiersRepository(&comparatorsAndCopiersRepository_);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3330      	adds	r3, #48	; 0x30
 80085d2:	4618      	mov	r0, r3
 80085d4:	f012 fb10 	bl	801abf8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockSupport::installComparator(const SimpleString& typeName, MockNamedValueComparator& comparator)
{
 80085e0:	b590      	push	{r4, r7, lr}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installComparator(typeName, comparator);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3330      	adds	r3, #48	; 0x30
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f014 fb77 	bl	801cce8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	3338      	adds	r3, #56	; 0x38
 80085fe:	4618      	mov	r0, r3
 8008600:	f014 fab5 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008604:	6178      	str	r0, [r7, #20]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01c      	beq.n	8008646 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installComparator(typeName, comparator);
 800860c:	6979      	ldr	r1, [r7, #20]
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	f000 fece 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	bf14      	ite	ne
 800861a:	2301      	movne	r3, #1
 800861c:	2300      	moveq	r3, #0
 800861e:	b2db      	uxtb	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00b      	beq.n	800863c <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x5c>
 8008624:	6979      	ldr	r1, [r7, #20]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fec2 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800862c:	4603      	mov	r3, r0
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	32b0      	adds	r2, #176	; 0xb0
 8008632:	6814      	ldr	r4, [r2, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	68b9      	ldr	r1, [r7, #8]
 8008638:	4618      	mov	r0, r3
 800863a:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 800863c:	6978      	ldr	r0, [r7, #20]
 800863e:	f014 f99f 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008642:	6178      	str	r0, [r7, #20]
 8008644:	e7df      	b.n	8008606 <_ZN11MockSupport17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x26>
}
 8008646:	bf00      	nop
 8008648:	371c      	adds	r7, #28
 800864a:	46bd      	mov	sp, r7
 800864c:	bd90      	pop	{r4, r7, pc}

0800864e <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockSupport::installCopier(const SimpleString& typeName, MockNamedValueCopier& copier)
{
 800864e:	b590      	push	{r4, r7, lr}
 8008650:	b087      	sub	sp, #28
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
    comparatorsAndCopiersRepository_.installCopier(typeName, copier);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3330      	adds	r3, #48	; 0x30
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	68b9      	ldr	r1, [r7, #8]
 8008662:	4618      	mov	r0, r3
 8008664:	f014 fb5c 	bl	801cd20 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	3338      	adds	r3, #56	; 0x38
 800866c:	4618      	mov	r0, r3
 800866e:	f014 fa7e 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008672:	6178      	str	r0, [r7, #20]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d01c      	beq.n	80086b4 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x66>
        if (getMockSupport(p)) getMockSupport(p)->installCopier(typeName, copier);
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fe97 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	bf14      	ite	ne
 8008688:	2301      	movne	r3, #1
 800868a:	2300      	moveq	r3, #0
 800868c:	b2db      	uxtb	r3, r3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x5c>
 8008692:	6979      	ldr	r1, [r7, #20]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 fe8b 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800869a:	4603      	mov	r3, r0
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	32b4      	adds	r2, #180	; 0xb4
 80086a0:	6814      	ldr	r4, [r2, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	68b9      	ldr	r1, [r7, #8]
 80086a6:	4618      	mov	r0, r3
 80086a8:	47a0      	blx	r4
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	f014 f968 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 80086b0:	6178      	str	r0, [r7, #20]
 80086b2:	e7df      	b.n	8008674 <_ZN11MockSupport13installCopierERK12SimpleStringR20MockNamedValueCopier+0x26>
}
 80086b4:	bf00      	nop
 80086b6:	371c      	adds	r7, #28
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd90      	pop	{r4, r7, pc}

080086bc <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository>:

void MockSupport::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
    comparatorsAndCopiersRepository_.installComparatorsAndCopiers(repository);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3330      	adds	r3, #48	; 0x30
 80086ca:	6839      	ldr	r1, [r7, #0]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f014 fb93 	bl	801cdf8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	3338      	adds	r3, #56	; 0x38
 80086d6:	4618      	mov	r0, r3
 80086d8:	f014 fa49 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d01b      	beq.n	800871c <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x60>
        if (getMockSupport(p)) getMockSupport(p)->installComparatorsAndCopiers(repository);
 80086e4:	68f9      	ldr	r1, [r7, #12]
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fe62 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	2300      	moveq	r3, #0
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00a      	beq.n	8008712 <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x56>
 80086fc:	68f9      	ldr	r1, [r7, #12]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fe56 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008704:	4603      	mov	r3, r0
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	32b8      	adds	r2, #184	; 0xb8
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008712:	68f8      	ldr	r0, [r7, #12]
 8008714:	f014 f934 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	e7e0      	b.n	80086de <_ZN11MockSupport28installComparatorsAndCopiersERK45MockNamedValueComparatorsAndCopiersRepository+0x22>
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv>:

void MockSupport::removeAllComparatorsAndCopiers()
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
    comparatorsAndCopiersRepository_.clear();
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3330      	adds	r3, #48	; 0x30
 8008730:	4618      	mov	r0, r3
 8008732:	f014 faba 	bl	801ccaa <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	3338      	adds	r3, #56	; 0x38
 800873a:	4618      	mov	r0, r3
 800873c:	f014 fa17 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008740:	60f8      	str	r0, [r7, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01a      	beq.n	800877e <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x5a>
        if (getMockSupport(p)) getMockSupport(p)->removeAllComparatorsAndCopiers();
 8008748:	68f9      	ldr	r1, [r7, #12]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fe30 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	bf14      	ite	ne
 8008756:	2301      	movne	r3, #1
 8008758:	2300      	moveq	r3, #0
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d009      	beq.n	8008774 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x50>
 8008760:	68f9      	ldr	r1, [r7, #12]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fe24 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008768:	4603      	mov	r3, r0
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	32bc      	adds	r2, #188	; 0xbc
 800876e:	6812      	ldr	r2, [r2, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f014 f903 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	e7e1      	b.n	8008742 <_ZN11MockSupport30removeAllComparatorsAndCopiersEv+0x1e>
}
 800877e:	bf00      	nop
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <_ZN11MockSupport5clearEv>:

void MockSupport::clear()
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b084      	sub	sp, #16
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
    delete lastActualFunctionCall_;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	2b00      	cmp	r3, #0
 8008794:	d004      	beq.n	80087a0 <_ZN11MockSupport5clearEv+0x1a>
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	3204      	adds	r2, #4
 800879a:	6812      	ldr	r2, [r2, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	4790      	blx	r2
    lastActualFunctionCall_ = NULLPTR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	62da      	str	r2, [r3, #44]	; 0x2c

    tracing_ = false;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    MockActualCallTrace::clearInstance();
 80087ae:	f00e fe0d 	bl	80173cc <_ZN19MockActualCallTrace13clearInstanceEv>

    expectations_.deleteAllExpectationsAndClearList();
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3320      	adds	r3, #32
 80087b6:	4618      	mov	r0, r3
 80087b8:	f011 f937 	bl	8019a2a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>
    ignoreOtherCalls_ = false;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    enabled_ = true;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    actualCallOrder_ = 0;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	605a      	str	r2, [r3, #4]
    expectedCallOrder_ = 0;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
    strictOrdering_ = false;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	731a      	strb	r2, [r3, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	3338      	adds	r3, #56	; 0x38
 80087e2:	4618      	mov	r0, r3
 80087e4:	f014 f9c3 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d01a      	beq.n	8008826 <_ZN11MockSupport5clearEv+0xa0>
        MockSupport* support = getMockSupport(p);
 80087f0:	68f9      	ldr	r1, [r7, #12]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fddc 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 80087f8:	60b8      	str	r0, [r7, #8]
        if (support) {
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00d      	beq.n	800881c <_ZN11MockSupport5clearEv+0x96>
            support->clear();
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	339c      	adds	r3, #156	; 0x9c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68b8      	ldr	r0, [r7, #8]
 800880a:	4798      	blx	r3
            delete support;
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d004      	beq.n	800881c <_ZN11MockSupport5clearEv+0x96>
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	3204      	adds	r2, #4
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next()) {
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f014 f8af 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	e7e1      	b.n	80087ea <_ZN11MockSupport5clearEv+0x64>
        }
    }
    data_.clear();
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	3338      	adds	r3, #56	; 0x38
 800882a:	4618      	mov	r0, r3
 800882c:	f014 f917 	bl	801ca5e <_ZN18MockNamedValueList5clearEv>
}
 8008830:	bf00      	nop
 8008832:	3710      	adds	r7, #16
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <_ZN11MockSupport11strictOrderEv>:

void MockSupport::strictOrder()
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
    strictOrdering_ = true;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	731a      	strb	r2, [r3, #12]
}
 8008846:	bf00      	nop
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>:

SimpleString MockSupport::appendScopeToName(const SimpleString& functionName)
{
 8008854:	b590      	push	{r4, r7, lr}
 8008856:	b089      	sub	sp, #36	; 0x24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
    if (mockName_.isEmpty()) return functionName;
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	333c      	adds	r3, #60	; 0x3c
 8008864:	4618      	mov	r0, r3
 8008866:	f002 f859 	bl	800a91c <_ZNK12SimpleString7isEmptyEv>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d004      	beq.n	800887a <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x26>
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f001 fcff 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 8008878:	e021      	b.n	80088be <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x6a>
    return mockName_ + "::" + functionName;
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8008880:	f107 0318 	add.w	r3, r7, #24
 8008884:	4910      	ldr	r1, [pc, #64]	; (80088c8 <_ZN11MockSupport17appendScopeToNameERK12SimpleString+0x74>)
 8008886:	4618      	mov	r0, r3
 8008888:	f001 fca1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800888c:	f107 0310 	add.w	r3, r7, #16
 8008890:	f107 0218 	add.w	r2, r7, #24
 8008894:	4621      	mov	r1, r4
 8008896:	4618      	mov	r0, r3
 8008898:	f002 f8b3 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f107 0110 	add.w	r1, r7, #16
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f002 f8ac 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 80088aa:	f107 0310 	add.w	r3, r7, #16
 80088ae:	4618      	mov	r0, r3
 80088b0:	f002 f845 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80088b4:	f107 0318 	add.w	r3, r7, #24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f002 f840 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	3724      	adds	r7, #36	; 0x24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd90      	pop	{r4, r7, pc}
 80088c6:	bf00      	nop
 80088c8:	080211e4 	.word	0x080211e4

080088cc <_ZN11MockSupport13expectOneCallERK12SimpleString>:

MockExpectedCall& MockSupport::expectOneCall(const SimpleString& functionName)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
    return expectNCalls(1, functionName);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	3314      	adds	r3, #20
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	2101      	movs	r1, #1
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
 80088e6:	4603      	mov	r3, r0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZN11MockSupport12expectNoCallERK12SimpleString>:

void MockSupport::expectNoCall(const SimpleString& functionName)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]
    expectNCalls(0, functionName);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3314      	adds	r3, #20
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	683a      	ldr	r2, [r7, #0]
 8008904:	2100      	movs	r1, #0
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <_ZN11MockSupport12expectNCallsEjRK12SimpleString>:

MockExpectedCall& MockSupport::expectNCalls(unsigned int amount, const SimpleString& functionName)
{
 8008914:	b590      	push	{r4, r7, lr}
 8008916:	b089      	sub	sp, #36	; 0x24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
    if (!enabled_) return MockIgnoredExpectedCall::instance();
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008926:	f083 0301 	eor.w	r3, r3, #1
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b00      	cmp	r3, #0
 800892e:	d003      	beq.n	8008938 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x24>
 8008930:	f010 fbf6 	bl	8019120 <_ZN23MockIgnoredExpectedCall8instanceEv>
 8008934:	4603      	mov	r3, r0
 8008936:	e041      	b.n	80089bc <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xa8>

    countCheck();
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb1b 	bl	8008f74 <_ZN11MockSupport10countCheckEv>

    MockCheckedExpectedCall* call = new MockCheckedExpectedCall(amount);
 800893e:	22a5      	movs	r2, #165	; 0xa5
 8008940:	4920      	ldr	r1, [pc, #128]	; (80089c4 <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0xb0>)
 8008942:	2070      	movs	r0, #112	; 0x70
 8008944:	f7ff f880 	bl	8007a48 <_ZnwjPKci>
 8008948:	4604      	mov	r4, r0
 800894a:	68b9      	ldr	r1, [r7, #8]
 800894c:	4620      	mov	r0, r4
 800894e:	f00f f8f3 	bl	8017b38 <_ZN23MockCheckedExpectedCallC1Ej>
 8008952:	61fc      	str	r4, [r7, #28]
    call->withName(appendScopeToName(functionName));
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	681c      	ldr	r4, [r3, #0]
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	68f9      	ldr	r1, [r7, #12]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ff75 	bl	8008854 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>
 800896a:	f107 0314 	add.w	r3, r7, #20
 800896e:	4619      	mov	r1, r3
 8008970:	69f8      	ldr	r0, [r7, #28]
 8008972:	47a0      	blx	r4
 8008974:	f107 0314 	add.w	r3, r7, #20
 8008978:	4618      	mov	r0, r3
 800897a:	f001 ffe0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (strictOrdering_) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	7b1b      	ldrb	r3, [r3, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d013      	beq.n	80089ae <_ZN11MockSupport12expectNCallsEjRK12SimpleString+0x9a>
        call->withCallOrder(expectedCallOrder_ + 1, expectedCallOrder_ + amount);
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	3310      	adds	r3, #16
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	6892      	ldr	r2, [r2, #8]
 8008992:	1c50      	adds	r0, r2, #1
 8008994:	68fa      	ldr	r2, [r7, #12]
 8008996:	6891      	ldr	r1, [r2, #8]
 8008998:	68ba      	ldr	r2, [r7, #8]
 800899a:	440a      	add	r2, r1
 800899c:	4601      	mov	r1, r0
 800899e:	69f8      	ldr	r0, [r7, #28]
 80089a0:	4798      	blx	r3
        expectedCallOrder_ += amount;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	609a      	str	r2, [r3, #8]
    }
    expectations_.addExpectedCall(call);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	3320      	adds	r3, #32
 80089b2:	69f9      	ldr	r1, [r7, #28]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f010 fd89 	bl	80194cc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>
    return *call;
 80089ba:	69fb      	ldr	r3, [r7, #28]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3724      	adds	r7, #36	; 0x24
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd90      	pop	{r4, r7, pc}
 80089c4:	080211e8 	.word	0x080211e8

080089c8 <_ZN11MockSupport16createActualCallEv>:

MockCheckedActualCall* MockSupport::createActualCall()
{
 80089c8:	b5b0      	push	{r4, r5, r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    lastActualFunctionCall_ = new MockCheckedActualCall(++actualCallOrder_, activeReporter_, expectations_);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	605a      	str	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	685d      	ldr	r5, [r3, #4]
 80089de:	22b1      	movs	r2, #177	; 0xb1
 80089e0:	490a      	ldr	r1, [pc, #40]	; (8008a0c <_ZN11MockSupport16createActualCallEv+0x44>)
 80089e2:	202c      	movs	r0, #44	; 0x2c
 80089e4:	f7ff f830 	bl	8007a48 <_ZnwjPKci>
 80089e8:	4604      	mov	r4, r0
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	691a      	ldr	r2, [r3, #16]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	3320      	adds	r3, #32
 80089f2:	4629      	mov	r1, r5
 80089f4:	4620      	mov	r0, r4
 80089f6:	f00c fbdb 	bl	80151b0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	62dc      	str	r4, [r3, #44]	; 0x2c
    return lastActualFunctionCall_;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bdb0      	pop	{r4, r5, r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	080211e8 	.word	0x080211e8

08008a10 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>:

bool MockSupport::callIsIgnored(const SimpleString& functionName)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	6039      	str	r1, [r7, #0]
    return ignoreOtherCalls_ && !expectations_.hasExpectationWithName(functionName);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d00d      	beq.n	8008a40 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	3320      	adds	r3, #32
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f010 fd2a 	bl	8019484 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>
 8008a30:	4603      	mov	r3, r0
 8008a32:	f083 0301 	eor.w	r3, r3, #1
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d001      	beq.n	8008a40 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x30>
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e000      	b.n	8008a42 <_ZN11MockSupport13callIsIgnoredERK12SimpleString+0x32>
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <_ZN11MockSupport10actualCallERK12SimpleString>:

MockActualCall& MockSupport::actualCall(const SimpleString& functionName)
{
 8008a4a:	b590      	push	{r4, r7, lr}
 8008a4c:	b087      	sub	sp, #28
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8008a54:	f107 030c 	add.w	r3, r7, #12
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	6879      	ldr	r1, [r7, #4]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7ff fef9 	bl	8008854 <_ZN11MockSupport17appendScopeToNameERK12SimpleString>

    if (lastActualFunctionCall_) {
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d014      	beq.n	8008a94 <_ZN11MockSupport10actualCallERK12SimpleString+0x4a>
        lastActualFunctionCall_->checkExpectations();
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	33c4      	adds	r3, #196	; 0xc4
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4798      	blx	r3
        delete lastActualFunctionCall_;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d004      	beq.n	8008a8e <_ZN11MockSupport10actualCallERK12SimpleString+0x44>
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	3204      	adds	r2, #4
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	4790      	blx	r2
        lastActualFunctionCall_ = NULLPTR;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    if (!enabled_) return MockIgnoredActualCall::instance();
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8008a9a:	f083 0301 	eor.w	r3, r3, #1
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d004      	beq.n	8008aae <_ZN11MockSupport10actualCallERK12SimpleString+0x64>
 8008aa4:	f00e fcbe 	bl	8017424 <_ZN21MockIgnoredActualCall8instanceEv>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	461c      	mov	r4, r3
 8008aac:	e02f      	b.n	8008b0e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    if (tracing_) return MockActualCallTrace::instance().withName(scopeFunctionName);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d00b      	beq.n	8008ad0 <_ZN11MockSupport10actualCallERK12SimpleString+0x86>
 8008ab8:	f00e fc6e 	bl	8017398 <_ZN19MockActualCallTrace8instanceEv>
 8008abc:	4603      	mov	r3, r0
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	3208      	adds	r2, #8
 8008ac2:	6812      	ldr	r2, [r2, #0]
 8008ac4:	f107 010c 	add.w	r1, r7, #12
 8008ac8:	4618      	mov	r0, r3
 8008aca:	4790      	blx	r2
 8008acc:	4604      	mov	r4, r0
 8008ace:	e01e      	b.n	8008b0e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>


    if (callIsIgnored(scopeFunctionName)) {
 8008ad0:	f107 030c 	add.w	r3, r7, #12
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff ff9a 	bl	8008a10 <_ZN11MockSupport13callIsIgnoredERK12SimpleString>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <_ZN11MockSupport10actualCallERK12SimpleString+0xa2>
        return MockIgnoredActualCall::instance();
 8008ae2:	f00e fc9f 	bl	8017424 <_ZN21MockIgnoredActualCall8instanceEv>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	461c      	mov	r4, r3
 8008aea:	e010      	b.n	8008b0e <_ZN11MockSupport10actualCallERK12SimpleString+0xc4>
    }

    MockCheckedActualCall* call = createActualCall();
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	33c0      	adds	r3, #192	; 0xc0
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	4798      	blx	r3
 8008af8:	6178      	str	r0, [r7, #20]
    call->withName(scopeFunctionName);
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f107 020c 	add.w	r2, r7, #12
 8008b06:	4611      	mov	r1, r2
 8008b08:	6978      	ldr	r0, [r7, #20]
 8008b0a:	4798      	blx	r3
    return *call;
 8008b0c:	697c      	ldr	r4, [r7, #20]
    const SimpleString scopeFunctionName = appendScopeToName(functionName);
 8008b0e:	f107 030c 	add.w	r3, r7, #12
 8008b12:	4618      	mov	r0, r3
 8008b14:	f001 ff13 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8008b18:	4623      	mov	r3, r4
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	371c      	adds	r7, #28
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd90      	pop	{r4, r7, pc}

08008b22 <_ZN11MockSupport16ignoreOtherCallsEv>:

void MockSupport::ignoreOtherCalls()
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
    ignoreOtherCalls_ = true;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	3338      	adds	r3, #56	; 0x38
 8008b36:	4618      	mov	r0, r3
 8008b38:	f014 f819 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008b3c:	60f8      	str	r0, [r7, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01a      	beq.n	8008b7a <_ZN11MockSupport16ignoreOtherCallsEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->ignoreOtherCalls();
 8008b44:	68f9      	ldr	r1, [r7, #12]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fc32 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	bf14      	ite	ne
 8008b52:	2301      	movne	r3, #1
 8008b54:	2300      	moveq	r3, #0
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <_ZN11MockSupport16ignoreOtherCallsEv+0x4e>
 8008b5c:	68f9      	ldr	r1, [r7, #12]
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 fc26 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008b64:	4603      	mov	r3, r0
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	3290      	adds	r2, #144	; 0x90
 8008b6a:	6812      	ldr	r2, [r2, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f013 ff05 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	e7e1      	b.n	8008b3e <_ZN11MockSupport16ignoreOtherCallsEv+0x1c>
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <_ZN11MockSupport7disableEv>:

void MockSupport::disable()
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3338      	adds	r3, #56	; 0x38
 8008b96:	4618      	mov	r0, r3
 8008b98:	f013 ffe9 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d01a      	beq.n	8008bda <_ZN11MockSupport7disableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->disable();
 8008ba4:	68f9      	ldr	r1, [r7, #12]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fc02 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	bf14      	ite	ne
 8008bb2:	2301      	movne	r3, #1
 8008bb4:	2300      	moveq	r3, #0
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <_ZN11MockSupport7disableEv+0x4e>
 8008bbc:	68f9      	ldr	r1, [r7, #12]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fbf6 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	3284      	adds	r2, #132	; 0x84
 8008bca:	6812      	ldr	r2, [r2, #0]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008bd0:	68f8      	ldr	r0, [r7, #12]
 8008bd2:	f013 fed5 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	e7e1      	b.n	8008b9e <_ZN11MockSupport7disableEv+0x1c>
}
 8008bda:	bf00      	nop
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <_ZN11MockSupport6enableEv>:

void MockSupport::enable()
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3338      	adds	r3, #56	; 0x38
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f013 ffb9 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d01a      	beq.n	8008c3a <_ZN11MockSupport6enableEv+0x58>
        if (getMockSupport(p)) getMockSupport(p)->enable();
 8008c04:	68f9      	ldr	r1, [r7, #12]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fbd2 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	bf14      	ite	ne
 8008c12:	2301      	movne	r3, #1
 8008c14:	2300      	moveq	r3, #0
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d009      	beq.n	8008c30 <_ZN11MockSupport6enableEv+0x4e>
 8008c1c:	68f9      	ldr	r1, [r7, #12]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fbc6 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008c24:	4603      	mov	r3, r0
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	3288      	adds	r2, #136	; 0x88
 8008c2a:	6812      	ldr	r2, [r2, #0]
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f013 fea5 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	e7e1      	b.n	8008bfe <_ZN11MockSupport6enableEv+0x1c>
}
 8008c3a:	bf00      	nop
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <_ZN11MockSupport7tracingEb>:

void MockSupport::tracing(bool enabled)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
    tracing_ = enabled;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	78fa      	ldrb	r2, [r7, #3]
 8008c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	3338      	adds	r3, #56	; 0x38
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f013 ff87 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01b      	beq.n	8008ca0 <_ZN11MockSupport7tracingEb+0x5e>
        if (getMockSupport(p)) getMockSupport(p)->tracing(enabled);
 8008c68:	68f9      	ldr	r1, [r7, #12]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fba0 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <_ZN11MockSupport7tracingEb+0x54>
 8008c80:	68f9      	ldr	r1, [r7, #12]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fb94 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	328c      	adds	r2, #140	; 0x8c
 8008c8e:	6812      	ldr	r2, [r2, #0]
 8008c90:	78f9      	ldrb	r1, [r7, #3]
 8008c92:	4618      	mov	r0, r3
 8008c94:	4790      	blx	r2
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f013 fe72 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	e7e0      	b.n	8008c62 <_ZN11MockSupport7tracingEb+0x20>
}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <_ZN11MockSupport17expectedCallsLeftEv>:
{
    return MockActualCallTrace::instance().getTraceOutput();
}

bool MockSupport::expectedCallsLeft()
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
    int callsLeft = expectations_.hasUnfulfilledExpectations();
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	3320      	adds	r3, #32
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f010 fbc1 	bl	801943c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	60fb      	str	r3, [r7, #12]

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3338      	adds	r3, #56	; 0x38
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f013 ff53 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008cc8:	60b8      	str	r0, [r7, #8]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01f      	beq.n	8008d10 <_ZN11MockSupport17expectedCallsLeftEv+0x68>
        if (getMockSupport(p)) callsLeft += getMockSupport(p)->expectedCallsLeft();
 8008cd0:	68b9      	ldr	r1, [r7, #8]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fb6c 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bf14      	ite	ne
 8008cde:	2301      	movne	r3, #1
 8008ce0:	2300      	moveq	r3, #0
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00e      	beq.n	8008d06 <_ZN11MockSupport17expectedCallsLeftEv+0x5e>
 8008ce8:	68b9      	ldr	r1, [r7, #8]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fb60 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	3298      	adds	r2, #152	; 0x98
 8008cf6:	6812      	ldr	r2, [r2, #0]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	4790      	blx	r2
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	4413      	add	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d06:	68b8      	ldr	r0, [r7, #8]
 8008d08:	f013 fe3a 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008d0c:	60b8      	str	r0, [r7, #8]
 8008d0e:	e7dc      	b.n	8008cca <_ZN11MockSupport17expectedCallsLeftEv+0x22>

    return callsLeft != 0;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	bf14      	ite	ne
 8008d16:	2301      	movne	r3, #1
 8008d18:	2300      	moveq	r3, #0
 8008d1a:	b2db      	uxtb	r3, r3
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <_ZN11MockSupport26wasLastActualCallFulfilledEv>:

bool MockSupport::wasLastActualCallFulfilled()
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_ && !lastActualFunctionCall_->isFulfilled())
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d010      	beq.n	8008d56 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	33bc      	adds	r3, #188	; 0xbc
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4610      	mov	r0, r2
 8008d44:	4798      	blx	r3
 8008d46:	4603      	mov	r3, r0
 8008d48:	f083 0301 	eor.w	r3, r3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x32>
 8008d52:	2301      	movs	r3, #1
 8008d54:	e000      	b.n	8008d58 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x34>
 8008d56:	2300      	movs	r3, #0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d001      	beq.n	8008d60 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x3c>
        return false;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e02a      	b.n	8008db6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>

    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3338      	adds	r3, #56	; 0x38
 8008d64:	4618      	mov	r0, r3
 8008d66:	f013 ff02 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d020      	beq.n	8008db4 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x90>
        if (getMockSupport(p) && !getMockSupport(p)->wasLastActualCallFulfilled())
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fb1b 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d00f      	beq.n	8008da0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fb14 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7ff ffca 	bl	8008d24 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 8008d90:	4603      	mov	r3, r0
 8008d92:	f083 0301 	eor.w	r3, r3, #1
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7c>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e000      	b.n	8008da2 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x7e>
 8008da0:	2300      	movs	r3, #0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d001      	beq.n	8008daa <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x86>
                return false;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e005      	b.n	8008db6 <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x92>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8008daa:	68f8      	ldr	r0, [r7, #12]
 8008dac:	f013 fde8 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	e7db      	b.n	8008d6c <_ZN11MockSupport26wasLastActualCallFulfilledEv+0x48>

    return true;
 8008db4:	2301      	movs	r3, #1
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>:

void MockSupport::failTestWithExpectedCallsNotFulfilled()
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b092      	sub	sp, #72	; 0x48
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008dc6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f010 fa2c 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f103 0220 	add.w	r2, r3, #32
 8008dd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008dda:	4611      	mov	r1, r2
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f010 fbf3 	bl	80195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	3338      	adds	r3, #56	; 0x38
 8008de6:	4618      	mov	r0, r3
 8008de8:	f013 fec1 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008dec:	6478      	str	r0, [r7, #68]	; 0x44
 8008dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01d      	beq.n	8008e30 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x72>
        if(getMockSupport(p))
 8008df4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fada 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bf14      	ite	ne
 8008e02:	2301      	movne	r3, #1
 8008e04:	2300      	moveq	r3, #0
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d00c      	beq.n	8008e26 <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8008e0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 face 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f103 0220 	add.w	r2, r3, #32
 8008e1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f010 fbd1 	bl	80195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008e26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008e28:	f013 fdaa 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008e2c:	6478      	str	r0, [r7, #68]	; 0x44
 8008e2e:	e7de      	b.n	8008dee <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv+0x30>

    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	691a      	ldr	r2, [r3, #16]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	330c      	adds	r3, #12
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4610      	mov	r0, r2
 8008e40:	4798      	blx	r3
 8008e42:	4601      	mov	r1, r0
 8008e44:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008e48:	f107 0308 	add.w	r3, r7, #8
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f011 f9f5 	bl	801a23c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	33c4      	adds	r3, #196	; 0xc4
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4611      	mov	r1, r2
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	4798      	blx	r3
    MockExpectedCallsDidntHappenFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008e64:	f107 0308 	add.w	r3, r7, #8
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 fe6d 	bl	8009b48 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008e6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e72:	4618      	mov	r0, r3
 8008e74:	f010 f9ec 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 8008e78:	bf00      	nop
 8008e7a:	3748      	adds	r7, #72	; 0x48
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>:

void MockSupport::failTestWithOutOfOrderCalls()
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b092      	sub	sp, #72	; 0x48
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
    MockExpectedCallsList expectationsList;
 8008e88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f010 f9cb 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsList.addExpectations(expectations_);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f103 0220 	add.w	r2, r3, #32
 8008e98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f010 fb92 	bl	80195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3338      	adds	r3, #56	; 0x38
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f013 fe60 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008eae:	6478      	str	r0, [r7, #68]	; 0x44
 8008eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01d      	beq.n	8008ef2 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x72>
        if(getMockSupport(p))
 8008eb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fa79 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	bf14      	ite	ne
 8008ec4:	2301      	movne	r3, #1
 8008ec6:	2300      	moveq	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00c      	beq.n	8008ee8 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x68>
            expectationsList.addExpectations(getMockSupport(p)->expectations_);
 8008ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fa6d 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	f103 0220 	add.w	r2, r3, #32
 8008edc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f010 fb70 	bl	80195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008ee8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008eea:	f013 fd49 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8008eee:	6478      	str	r0, [r7, #68]	; 0x44
 8008ef0:	e7de      	b.n	8008eb0 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv+0x30>

    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691a      	ldr	r2, [r3, #16]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4610      	mov	r0, r2
 8008f02:	4798      	blx	r3
 8008f04:	4601      	mov	r1, r0
 8008f06:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8008f0a:	f107 0308 	add.w	r3, r7, #8
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f011 fa38 	bl	801a384 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>
    failTest(failure);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	33c4      	adds	r3, #196	; 0xc4
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f107 0208 	add.w	r2, r7, #8
 8008f20:	4611      	mov	r1, r2
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	4798      	blx	r3
    MockCallOrderFailure failure(activeReporter_->getTestToFail(), expectationsList);
 8008f26:	f107 0308 	add.w	r3, r7, #8
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fe2e 	bl	8009b8c <_ZN20MockCallOrderFailureD1Ev>
    MockExpectedCallsList expectationsList;
 8008f30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008f34:	4618      	mov	r0, r3
 8008f36:	f010 f98b 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 8008f3a:	bf00      	nop
 8008f3c:	3748      	adds	r7, #72	; 0x48
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <_ZN11MockSupport8failTestER11MockFailure>:

void MockSupport::failTest(MockFailure& failure)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	6039      	str	r1, [r7, #0]
    clear();
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	339c      	adds	r3, #156	; 0x9c
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	4798      	blx	r3
    activeReporter_->failTest(failure);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	691a      	ldr	r2, [r3, #16]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3308      	adds	r3, #8
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <_ZN11MockSupport10countCheckEv>:

void MockSupport::countCheck()
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
    UtestShell::getCurrent()->countCheck();
 8008f7c:	f008 fd0a 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8008f80:	4603      	mov	r3, r0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f007 fb78 	bl	8010678 <_ZN10UtestShell10countCheckEv>
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>:

void MockSupport::checkExpectationsOfLastActualCall()
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
    if(lastActualFunctionCall_)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d008      	beq.n	8008fb2 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x22>
        lastActualFunctionCall_->checkExpectations();
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	33c4      	adds	r3, #196	; 0xc4
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4798      	blx	r3

    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	3338      	adds	r3, #56	; 0x38
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f013 fdd9 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d023      	beq.n	800900c <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x7c>
        if(getMockSupport(p) && getMockSupport(p)->lastActualFunctionCall_)
 8008fc4:	68f9      	ldr	r1, [r7, #12]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f9f2 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008fd2:	68f9      	ldr	r1, [r7, #12]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f9eb 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d001      	beq.n	8008fe6 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x56>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x58>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x72>
            getMockSupport(p)->lastActualFunctionCall_->checkExpectations();
 8008fec:	68f9      	ldr	r1, [r7, #12]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f9de 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	32c4      	adds	r2, #196	; 0xc4
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	4790      	blx	r2
    for(MockNamedValueListNode *p = data_.begin();p;p = p->next())
 8009002:	68f8      	ldr	r0, [r7, #12]
 8009004:	f013 fcbc 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	e7d8      	b.n	8008fbe <_ZN11MockSupport33checkExpectationsOfLastActualCallEv+0x2e>
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <_ZN11MockSupport18hasCallsOutOfOrderEv>:

bool MockSupport::hasCallsOutOfOrder()
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
    if (expectations_.hasCallsOutOfOrder())
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	3320      	adds	r3, #32
 8009020:	4618      	mov	r0, r3
 8009022:	f010 f947 	bl	80192b4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x1c>
    {
        return true;
 800902c:	2301      	movs	r3, #1
 800902e:	e027      	b.n	8009080 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    }
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3338      	adds	r3, #56	; 0x38
 8009034:	4618      	mov	r0, r3
 8009036:	f013 fd9a 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d01d      	beq.n	800907e <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6a>
        if (getMockSupport(p) && getMockSupport(p)->hasCallsOutOfOrder())
 8009042:	68f9      	ldr	r1, [r7, #12]
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f9b3 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00c      	beq.n	800906a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009050:	68f9      	ldr	r1, [r7, #12]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f9ac 	bl	80093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>
 8009058:	4603      	mov	r3, r0
 800905a:	4618      	mov	r0, r3
 800905c:	f7ff ffda 	bl	8009014 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <_ZN11MockSupport18hasCallsOutOfOrderEv+0x56>
 8009066:	2301      	movs	r3, #1
 8009068:	e000      	b.n	800906c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x58>
 800906a:	2300      	movs	r3, #0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x60>
        {
            return true;
 8009070:	2301      	movs	r3, #1
 8009072:	e005      	b.n	8009080 <_ZN11MockSupport18hasCallsOutOfOrderEv+0x6c>
    for (MockNamedValueListNode* p = data_.begin(); p; p = p->next())
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	f013 fc83 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	e7de      	b.n	800903c <_ZN11MockSupport18hasCallsOutOfOrderEv+0x28>
        }
    return false;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <_ZN11MockSupport17checkExpectationsEv>:

void MockSupport::checkExpectations()
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
    checkExpectationsOfLastActualCall();
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7ff ff7d 	bl	8008f90 <_ZN11MockSupport33checkExpectationsOfLastActualCallEv>

    if (wasLastActualCallFulfilled() && expectedCallsLeft())
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7ff fe44 	bl	8008d24 <_ZN11MockSupport26wasLastActualCallFulfilledEv>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00a      	beq.n	80090b8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3398      	adds	r3, #152	; 0x98
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	4798      	blx	r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <_ZN11MockSupport17checkExpectationsEv+0x30>
 80090b4:	2301      	movs	r3, #1
 80090b6:	e000      	b.n	80090ba <_ZN11MockSupport17checkExpectationsEv+0x32>
 80090b8:	2300      	movs	r3, #0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d002      	beq.n	80090c4 <_ZN11MockSupport17checkExpectationsEv+0x3c>
        failTestWithExpectedCallsNotFulfilled();
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f7ff fe7d 	bl	8008dbe <_ZN11MockSupport37failTestWithExpectedCallsNotFulfilledEv>

    if (hasCallsOutOfOrder())
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff ffa5 	bl	8009014 <_ZN11MockSupport18hasCallsOutOfOrderEv>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <_ZN11MockSupport17checkExpectationsEv+0x4e>
        failTestWithOutOfOrderCalls();
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff fed5 	bl	8008e80 <_ZN11MockSupport27failTestWithOutOfOrderCallsEv>
}
 80090d6:	bf00      	nop
 80090d8:	3708      	adds	r7, #8
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <_ZN11MockSupport7hasDataERK12SimpleString>:


bool MockSupport::hasData(const SimpleString& name)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b082      	sub	sp, #8
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	6039      	str	r1, [r7, #0]
    return data_.getValueByName(name) != NULLPTR;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3338      	adds	r3, #56	; 0x38
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f013 fd0e 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bf14      	ite	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	2300      	moveq	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
}
 8009100:	4618      	mov	r0, r3
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}

08009108 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>:

MockNamedValue* MockSupport::retrieveDataFromStore(const SimpleString& name)
{
 8009108:	b590      	push	{r4, r7, lr}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
 8009110:	6039      	str	r1, [r7, #0]
    MockNamedValue* newData = data_.getValueByName(name);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	3338      	adds	r3, #56	; 0x38
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	4618      	mov	r0, r3
 800911a:	f013 fcf9 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 800911e:	60f8      	str	r0, [r7, #12]
    if (newData == NULLPTR) {
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d111      	bne.n	800914a <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x42>
        newData = new MockNamedValue(name);
 8009126:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800912a:	490a      	ldr	r1, [pc, #40]	; (8009154 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString+0x4c>)
 800912c:	2038      	movs	r0, #56	; 0x38
 800912e:	f7fe fc8b 	bl	8007a48 <_ZnwjPKci>
 8009132:	4604      	mov	r4, r0
 8009134:	6839      	ldr	r1, [r7, #0]
 8009136:	4620      	mov	r0, r4
 8009138:	f011 fd6e 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 800913c:	60fc      	str	r4, [r7, #12]
        data_.add(newData);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	3338      	adds	r3, #56	; 0x38
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	4618      	mov	r0, r3
 8009146:	f013 fcad 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    }
    return newData;
 800914a:	68fb      	ldr	r3, [r7, #12]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3714      	adds	r7, #20
 8009150:	46bd      	mov	sp, r7
 8009152:	bd90      	pop	{r4, r7, pc}
 8009154:	080211e8 	.word	0x080211e8

08009158 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setValue(value);
}

void MockSupport::setDataObject(const SimpleString& name, const SimpleString& type, void* value)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b086      	sub	sp, #24
 800915c:	af00      	add	r7, sp, #0
 800915e:	60f8      	str	r0, [r7, #12]
 8009160:	60b9      	str	r1, [r7, #8]
 8009162:	607a      	str	r2, [r7, #4]
 8009164:	603b      	str	r3, [r7, #0]
    MockNamedValue* newData = retrieveDataFromStore(name);
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7ff ffcd 	bl	8009108 <_ZN11MockSupport21retrieveDataFromStoreERK12SimpleString>
 800916e:	6178      	str	r0, [r7, #20]
    newData->setObjectPointer(type, value);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3344      	adds	r3, #68	; 0x44
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	6978      	ldr	r0, [r7, #20]
 800917e:	4798      	blx	r3
}
 8009180:	bf00      	nop
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <_ZN11MockSupport7getDataERK12SimpleString>:
    MockNamedValue* newData = retrieveDataFromStore(name);
    newData->setConstObjectPointer(type, value);
}

MockNamedValue MockSupport::getData(const SimpleString& name)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b088      	sub	sp, #32
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
    MockNamedValue* value = data_.getValueByName(name);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	3338      	adds	r3, #56	; 0x38
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4618      	mov	r0, r3
 800919c:	f013 fcb8 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80091a0:	61f8      	str	r0, [r7, #28]
    if (value == NULLPTR)
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d111      	bne.n	80091cc <_ZN11MockSupport7getDataERK12SimpleString+0x44>
        return MockNamedValue("");
 80091a8:	f107 0314 	add.w	r3, r7, #20
 80091ac:	490b      	ldr	r1, [pc, #44]	; (80091dc <_ZN11MockSupport7getDataERK12SimpleString+0x54>)
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 f80d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80091b4:	f107 0314 	add.w	r3, r7, #20
 80091b8:	4619      	mov	r1, r3
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f011 fd2c 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 80091c0:	f107 0314 	add.w	r3, r7, #20
 80091c4:	4618      	mov	r0, r3
 80091c6:	f001 fbba 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80091ca:	e003      	b.n	80091d4 <_ZN11MockSupport7getDataERK12SimpleString+0x4c>
    return *value;
 80091cc:	69f9      	ldr	r1, [r7, #28]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f7ff f8a2 	bl	8008318 <_ZN14MockNamedValueC1ERKS_>
}
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	3720      	adds	r7, #32
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	080211e0 	.word	0x080211e0

080091e0 <_ZN11MockSupport5cloneERK12SimpleString>:

MockSupport* MockSupport::clone(const SimpleString& mockName)
{
 80091e0:	b590      	push	{r4, r7, lr}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
    MockSupport* newMock = new MockSupport(mockName);
 80091ea:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80091ee:	4927      	ldr	r1, [pc, #156]	; (800928c <_ZN11MockSupport5cloneERK12SimpleString+0xac>)
 80091f0:	2048      	movs	r0, #72	; 0x48
 80091f2:	f7fe fc29 	bl	8007a48 <_ZnwjPKci>
 80091f6:	4604      	mov	r4, r0
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	4620      	mov	r0, r4
 80091fc:	f7ff f8f8 	bl	80083f0 <_ZN11MockSupportC1ERK12SimpleString>
 8009200:	60fc      	str	r4, [r7, #12]
    newMock->setMockFailureStandardReporter(standardReporter_);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	33a4      	adds	r3, #164	; 0xa4
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	6952      	ldr	r2, [r2, #20]
 800920e:	4611      	mov	r1, r2
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	4798      	blx	r3
    if (ignoreOtherCalls_) newMock->ignoreOtherCalls();
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d005      	beq.n	800922a <_ZN11MockSupport5cloneERK12SimpleString+0x4a>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	3390      	adds	r3, #144	; 0x90
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	4798      	blx	r3

    if (!enabled_) newMock->disable();
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8009230:	f083 0301 	eor.w	r3, r3, #1
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b00      	cmp	r3, #0
 8009238:	d005      	beq.n	8009246 <_ZN11MockSupport5cloneERK12SimpleString+0x66>
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3384      	adds	r3, #132	; 0x84
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	4798      	blx	r3

    if (strictOrdering_) newMock->strictOrder();
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	7b1b      	ldrb	r3, [r3, #12]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d005      	beq.n	800925a <_ZN11MockSupport5cloneERK12SimpleString+0x7a>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3308      	adds	r3, #8
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	4798      	blx	r3

    newMock->tracing(tracing_);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	338c      	adds	r3, #140	; 0x8c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
 8009268:	4611      	mov	r1, r2
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	4798      	blx	r3
    newMock->installComparatorsAndCopiers(comparatorsAndCopiersRepository_);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	33b8      	adds	r3, #184	; 0xb8
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	3230      	adds	r2, #48	; 0x30
 800927a:	4611      	mov	r1, r2
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	4798      	blx	r3
    return newMock;
 8009280:	68fb      	ldr	r3, [r7, #12]
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bd90      	pop	{r4, r7, pc}
 800928a:	bf00      	nop
 800928c:	080211e8 	.word	0x080211e8

08009290 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString>:

MockSupport* MockSupport::getMockSupportScope(const SimpleString& name)
{
 8009290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009292:	b0ab      	sub	sp, #172	; 0xac
 8009294:	af04      	add	r7, sp, #16
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800929a:	f107 0308 	add.w	r3, r7, #8
 800929e:	4941      	ldr	r1, [pc, #260]	; (80093a4 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x114>)
 80092a0:	4618      	mov	r0, r3
 80092a2:	f000 ff94 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    mockingSupportName += name;
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	6839      	ldr	r1, [r7, #0]
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 fbc3 	bl	800aa38 <_ZN12SimpleStringpLERKS_>

    if (hasData(mockingSupportName)) {
 80092b2:	f107 0308 	add.w	r3, r7, #8
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff ff10 	bl	80090de <_ZN11MockSupport7hasDataERK12SimpleString>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d048      	beq.n	8009356 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xc6>
        STRCMP_EQUAL("MockSupport", getData(mockingSupportName).getType().asCharString());
 80092c4:	f008 fb66 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80092c8:	4604      	mov	r4, r0
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	3324      	adds	r3, #36	; 0x24
 80092ce:	681d      	ldr	r5, [r3, #0]
 80092d0:	f107 0318 	add.w	r3, r7, #24
 80092d4:	f107 0208 	add.w	r2, r7, #8
 80092d8:	6879      	ldr	r1, [r7, #4]
 80092da:	4618      	mov	r0, r3
 80092dc:	f7ff ff54 	bl	8009188 <_ZN11MockSupport7getDataERK12SimpleString>
 80092e0:	f107 0310 	add.w	r3, r7, #16
 80092e4:	f107 0218 	add.w	r2, r7, #24
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f011 ff63 	bl	801b1b6 <_ZNK14MockNamedValue7getTypeEv>
 80092f0:	f107 0310 	add.w	r3, r7, #16
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 faf5 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80092fa:	4606      	mov	r6, r0
 80092fc:	f008 fb5a 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009300:	4603      	mov	r3, r0
 8009302:	9302      	str	r3, [sp, #8]
 8009304:	f240 13bd 	movw	r3, #445	; 0x1bd
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	4b27      	ldr	r3, [pc, #156]	; (80093a8 <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x118>)
 800930c:	9300      	str	r3, [sp, #0]
 800930e:	2300      	movs	r3, #0
 8009310:	4632      	mov	r2, r6
 8009312:	4926      	ldr	r1, [pc, #152]	; (80093ac <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009314:	4620      	mov	r0, r4
 8009316:	47a8      	blx	r5
 8009318:	f107 0310 	add.w	r3, r7, #16
 800931c:	4618      	mov	r0, r3
 800931e:	f001 fb0e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8009322:	f107 0318 	add.w	r3, r7, #24
 8009326:	4618      	mov	r0, r3
 8009328:	f011 fca0 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
        return (MockSupport*) getData(mockingSupportName).getObjectPointer();
 800932c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009330:	f107 0208 	add.w	r2, r7, #8
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4618      	mov	r0, r3
 8009338:	f7ff ff26 	bl	8009188 <_ZN11MockSupport7getDataERK12SimpleString>
 800933c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009340:	4618      	mov	r0, r3
 8009342:	f012 fa51 	bl	801b7e8 <_ZNK14MockNamedValue16getObjectPointerEv>
 8009346:	4604      	mov	r4, r0
 8009348:	bf00      	nop
 800934a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800934e:	4618      	mov	r0, r3
 8009350:	f011 fc8c 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009354:	e01b      	b.n	800938e <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0xfe>
    }

    MockSupport *newMock = clone(name);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff ff41 	bl	80091e0 <_ZN11MockSupport5cloneERK12SimpleString>
 800935e:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    setDataObject(mockingSupportName, "MockSupport", newMock);
 8009362:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009366:	4911      	ldr	r1, [pc, #68]	; (80093ac <_ZN11MockSupport19getMockSupportScopeERK12SimpleString+0x11c>)
 8009368:	4618      	mov	r0, r3
 800936a:	f000 ff30 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800936e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8009372:	f107 0108 	add.w	r1, r7, #8
 8009376:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f7ff feec 	bl	8009158 <_ZN11MockSupport13setDataObjectERK12SimpleStringS2_Pv>
 8009380:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fada 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return newMock;
 800938a:	f8d7 4094 	ldr.w	r4, [r7, #148]	; 0x94
    SimpleString mockingSupportName = MOCK_SUPPORT_SCOPE_PREFIX;
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	4618      	mov	r0, r3
 8009394:	f001 fad3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8009398:	4623      	mov	r3, r4
}
 800939a:	4618      	mov	r0, r3
 800939c:	379c      	adds	r7, #156	; 0x9c
 800939e:	46bd      	mov	sp, r7
 80093a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093a2:	bf00      	nop
 80093a4:	08021200 	.word	0x08021200
 80093a8:	080211e8 	.word	0x080211e8
 80093ac:	08021220 	.word	0x08021220

080093b0 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode>:

MockSupport* MockSupport::getMockSupport(MockNamedValueListNode* node)
{
 80093b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80093b4:	b08b      	sub	sp, #44	; 0x2c
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	6039      	str	r1, [r7, #0]
    if (node->getType() == "MockSupport" && node->getName().contains(MOCK_SUPPORT_SCOPE_PREFIX))
 80093bc:	2500      	movs	r5, #0
 80093be:	2600      	movs	r6, #0
 80093c0:	f107 0308 	add.w	r3, r7, #8
 80093c4:	6839      	ldr	r1, [r7, #0]
 80093c6:	4618      	mov	r0, r3
 80093c8:	f013 fb28 	bl	801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>
 80093cc:	f04f 0801 	mov.w	r8, #1
 80093d0:	f107 0310 	add.w	r3, r7, #16
 80093d4:	492e      	ldr	r1, [pc, #184]	; (8009490 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe0>)
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fef9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80093dc:	f04f 0901 	mov.w	r9, #1
 80093e0:	f107 0210 	add.w	r2, r7, #16
 80093e4:	f107 0308 	add.w	r3, r7, #8
 80093e8:	4611      	mov	r1, r2
 80093ea:	4618      	mov	r0, r3
 80093ec:	f001 fab3 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d01a      	beq.n	800942c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 80093f6:	f107 0318 	add.w	r3, r7, #24
 80093fa:	6839      	ldr	r1, [r7, #0]
 80093fc:	4618      	mov	r0, r3
 80093fe:	f013 fafa 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8009402:	2501      	movs	r5, #1
 8009404:	f107 0320 	add.w	r3, r7, #32
 8009408:	4922      	ldr	r1, [pc, #136]	; (8009494 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xe4>)
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fedf 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8009410:	2601      	movs	r6, #1
 8009412:	f107 0220 	add.w	r2, r7, #32
 8009416:	f107 0318 	add.w	r3, r7, #24
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f000 ff54 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 8009422:	4603      	mov	r3, r0
 8009424:	2b00      	cmp	r3, #0
 8009426:	d001      	beq.n	800942c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7c>
 8009428:	2401      	movs	r4, #1
 800942a:	e000      	b.n	800942e <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x7e>
 800942c:	2400      	movs	r4, #0
 800942e:	2e00      	cmp	r6, #0
 8009430:	d004      	beq.n	800943c <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x8c>
 8009432:	f107 0320 	add.w	r3, r7, #32
 8009436:	4618      	mov	r0, r3
 8009438:	f001 fa81 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800943c:	2d00      	cmp	r5, #0
 800943e:	d004      	beq.n	800944a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0x9a>
 8009440:	f107 0318 	add.w	r3, r7, #24
 8009444:	4618      	mov	r0, r3
 8009446:	f001 fa7a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	d004      	beq.n	800945a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xaa>
 8009450:	f107 0310 	add.w	r3, r7, #16
 8009454:	4618      	mov	r0, r3
 8009456:	f001 fa72 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800945a:	f1b8 0f00 	cmp.w	r8, #0
 800945e:	d004      	beq.n	800946a <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xba>
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4618      	mov	r0, r3
 8009466:	f001 fa6a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800946a:	2c00      	cmp	r4, #0
 800946c:	d00a      	beq.n	8009484 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd4>
        return (MockSupport*) node->item()->getObjectPointer();
 800946e:	6838      	ldr	r0, [r7, #0]
 8009470:	f013 fa92 	bl	801c998 <_ZN22MockNamedValueListNode4itemEv>
 8009474:	4603      	mov	r3, r0
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	32a0      	adds	r2, #160	; 0xa0
 800947a:	6812      	ldr	r2, [r2, #0]
 800947c:	4618      	mov	r0, r3
 800947e:	4790      	blx	r2
 8009480:	4603      	mov	r3, r0
 8009482:	e000      	b.n	8009486 <_ZN11MockSupport14getMockSupportEP22MockNamedValueListNode+0xd6>
    return NULLPTR;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	372c      	adds	r7, #44	; 0x2c
 800948a:	46bd      	mov	sp, r7
 800948c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009490:	08021220 	.word	0x08021220
 8009494:	08021200 	.word	0x08021200

08009498 <_ZN11MockSupport11returnValueEv>:

MockNamedValue MockSupport::returnValue()
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
 80094a0:	6039      	str	r1, [r7, #0]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->returnValue();
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <_ZN11MockSupport11returnValueEv+0x28>
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	3354      	adds	r3, #84	; 0x54
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	4610      	mov	r0, r2
 80094bc:	4798      	blx	r3
 80094be:	e010      	b.n	80094e2 <_ZN11MockSupport11returnValueEv+0x4a>
    return MockNamedValue("");
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	4909      	ldr	r1, [pc, #36]	; (80094ec <_ZN11MockSupport11returnValueEv+0x54>)
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fe81 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f011 fba0 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 80094d8:	f107 0308 	add.w	r3, r7, #8
 80094dc:	4618      	mov	r0, r3
 80094de:	f001 fa2e 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	080211e0 	.word	0x080211e0

080094f0 <_ZN11MockSupport15boolReturnValueEv>:

bool MockSupport::boolReturnValue()
{
 80094f0:	b590      	push	{r4, r7, lr}
 80094f2:	b091      	sub	sp, #68	; 0x44
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3320      	adds	r3, #32
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f107 0208 	add.w	r2, r7, #8
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4610      	mov	r0, r2
 8009508:	4798      	blx	r3
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	4618      	mov	r0, r3
 8009510:	f011 fe60 	bl	801b1d4 <_ZNK14MockNamedValue12getBoolValueEv>
 8009514:	4603      	mov	r3, r0
 8009516:	461c      	mov	r4, r3
 8009518:	bf00      	nop
 800951a:	f107 0308 	add.w	r3, r7, #8
 800951e:	4618      	mov	r0, r3
 8009520:	f011 fba4 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009524:	4623      	mov	r3, r4
}
 8009526:	4618      	mov	r0, r3
 8009528:	3744      	adds	r7, #68	; 0x44
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}

0800952e <_ZN11MockSupport22unsignedIntReturnValueEv>:

unsigned int MockSupport::unsignedIntReturnValue()
{
 800952e:	b590      	push	{r4, r7, lr}
 8009530:	b091      	sub	sp, #68	; 0x44
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	3320      	adds	r3, #32
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f107 0208 	add.w	r2, r7, #8
 8009542:	6879      	ldr	r1, [r7, #4]
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
 8009548:	f107 0308 	add.w	r3, r7, #8
 800954c:	4618      	mov	r0, r3
 800954e:	f011 fe69 	bl	801b224 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8009552:	4604      	mov	r4, r0
 8009554:	bf00      	nop
 8009556:	f107 0308 	add.w	r3, r7, #8
 800955a:	4618      	mov	r0, r3
 800955c:	f011 fb86 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009560:	4623      	mov	r3, r4
}
 8009562:	4618      	mov	r0, r3
 8009564:	3744      	adds	r7, #68	; 0x44
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}

0800956a <_ZN11MockSupport14intReturnValueEv>:

int MockSupport::intReturnValue()
{
 800956a:	b590      	push	{r4, r7, lr}
 800956c:	b091      	sub	sp, #68	; 0x44
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3320      	adds	r3, #32
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f107 0208 	add.w	r2, r7, #8
 800957e:	6879      	ldr	r1, [r7, #4]
 8009580:	4610      	mov	r0, r2
 8009582:	4798      	blx	r3
 8009584:	f107 0308 	add.w	r3, r7, #8
 8009588:	4618      	mov	r0, r3
 800958a:	f011 fe9b 	bl	801b2c4 <_ZNK14MockNamedValue11getIntValueEv>
 800958e:	4604      	mov	r4, r0
 8009590:	bf00      	nop
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	f011 fb68 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 800959c:	4623      	mov	r3, r4
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3744      	adds	r7, #68	; 0x44
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd90      	pop	{r4, r7, pc}

080095a6 <_ZN11MockSupport26returnStringValueOrDefaultEPKc>:

const char * MockSupport::returnStringValueOrDefault(const char * defaultValue)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b082      	sub	sp, #8
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	331c      	adds	r3, #28
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	4798      	blx	r3
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d007      	beq.n	80095d2 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2c>
        return stringReturnValue();
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	335c      	adds	r3, #92	; 0x5c
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	e000      	b.n	80095d4 <_ZN11MockSupport26returnStringValueOrDefaultEPKc+0x2e>
    }
    return defaultValue;
 80095d2:	683b      	ldr	r3, [r7, #0]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3708      	adds	r7, #8
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <_ZN11MockSupport26returnDoubleValueOrDefaultEd>:

double MockSupport::returnDoubleValueOrDefault(double defaultValue)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	ed87 0b00 	vstr	d0, [r7]
    if (hasReturnValue()) {
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	331c      	adds	r3, #28
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	4798      	blx	r3
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00a      	beq.n	8009610 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x34>
        return doubleReturnValue();
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	3368      	adds	r3, #104	; 0x68
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	4798      	blx	r3
 8009606:	eeb0 7a40 	vmov.f32	s14, s0
 800960a:	eef0 7a60 	vmov.f32	s15, s1
 800960e:	e001      	b.n	8009614 <_ZN11MockSupport26returnDoubleValueOrDefaultEd+0x38>
    }
    return defaultValue;
 8009610:	ed97 7b00 	vldr	d7, [r7]
}
 8009614:	eeb0 0a47 	vmov.f32	s0, s14
 8009618:	eef0 0a67 	vmov.f32	s1, s15
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <_ZN11MockSupport27returnLongIntValueOrDefaultEl>:

long int MockSupport::returnLongIntValueOrDefault(long int defaultValue)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b082      	sub	sp, #8
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	331c      	adds	r3, #28
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	4798      	blx	r3
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d007      	beq.n	800964e <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2c>
        return longIntReturnValue();
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3338      	adds	r3, #56	; 0x38
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	4798      	blx	r3
 800964a:	4603      	mov	r3, r0
 800964c:	e000      	b.n	8009650 <_ZN11MockSupport27returnLongIntValueOrDefaultEl+0x2e>
    }
    return defaultValue;
 800964e:	683b      	ldr	r3, [r7, #0]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <_ZN11MockSupport24returnBoolValueOrDefaultEb>:

bool MockSupport::returnBoolValueOrDefault(bool defaultValue)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
    if (hasReturnValue()) {
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	331c      	adds	r3, #28
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d007      	beq.n	8009686 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x2e>
        return boolReturnValue();
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3324      	adds	r3, #36	; 0x24
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	4798      	blx	r3
 8009682:	4603      	mov	r3, r0
 8009684:	e000      	b.n	8009688 <_ZN11MockSupport24returnBoolValueOrDefaultEb+0x30>
    }
    return defaultValue;
 8009686:	78fb      	ldrb	r3, [r7, #3]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <_ZN11MockSupport23returnIntValueOrDefaultEi>:

int MockSupport::returnIntValueOrDefault(int defaultValue)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	331c      	adds	r3, #28
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d007      	beq.n	80096bc <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2c>
        return intReturnValue();
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	332c      	adds	r3, #44	; 0x2c
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	4798      	blx	r3
 80096b8:	4603      	mov	r3, r0
 80096ba:	e000      	b.n	80096be <_ZN11MockSupport23returnIntValueOrDefaultEi+0x2e>
    }
    return defaultValue;
 80096bc:	683b      	ldr	r3, [r7, #0]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockSupport::returnUnsignedIntValueOrDefault(unsigned int defaultValue)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b082      	sub	sp, #8
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	331c      	adds	r3, #28
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d007      	beq.n	80096f2 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2c>
        return unsignedIntReturnValue();
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3334      	adds	r3, #52	; 0x34
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
 80096f0:	e000      	b.n	80096f4 <_ZN11MockSupport31returnUnsignedIntValueOrDefaultEj+0x2e>
    }
    return defaultValue;
 80096f2:	683b      	ldr	r3, [r7, #0]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockSupport::returnUnsignedLongIntValueOrDefault(unsigned long int defaultValue)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	331c      	adds	r3, #28
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d007      	beq.n	8009728 <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2c>
        return unsignedLongIntReturnValue();
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3340      	adds	r3, #64	; 0x40
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
 8009724:	4603      	mov	r3, r0
 8009726:	e000      	b.n	800972a <_ZN11MockSupport35returnUnsignedLongIntValueOrDefaultEm+0x2e>
    }
    return defaultValue;
 8009728:	683b      	ldr	r3, [r7, #0]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <_ZN11MockSupport18longIntReturnValueEv>:

long int MockSupport::longIntReturnValue()
{
 8009732:	b590      	push	{r4, r7, lr}
 8009734:	b091      	sub	sp, #68	; 0x44
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3320      	adds	r3, #32
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f107 0208 	add.w	r2, r7, #8
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	4618      	mov	r0, r3
 8009752:	f011 fddf 	bl	801b314 <_ZNK14MockNamedValue15getLongIntValueEv>
 8009756:	4604      	mov	r4, r0
 8009758:	bf00      	nop
 800975a:	f107 0308 	add.w	r3, r7, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f011 fa84 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009764:	4623      	mov	r3, r4
}
 8009766:	4618      	mov	r0, r3
 8009768:	3744      	adds	r7, #68	; 0x44
 800976a:	46bd      	mov	sp, r7
 800976c:	bd90      	pop	{r4, r7, pc}

0800976e <_ZN11MockSupport26unsignedLongIntReturnValueEv>:

unsigned long int MockSupport::unsignedLongIntReturnValue()
{
 800976e:	b590      	push	{r4, r7, lr}
 8009770:	b091      	sub	sp, #68	; 0x44
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	3320      	adds	r3, #32
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f107 0208 	add.w	r2, r7, #8
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	4610      	mov	r0, r2
 8009786:	4798      	blx	r3
 8009788:	f107 0308 	add.w	r3, r7, #8
 800978c:	4618      	mov	r0, r3
 800978e:	f011 fe23 	bl	801b3d8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 8009792:	4604      	mov	r4, r0
 8009794:	bf00      	nop
 8009796:	f107 0308 	add.w	r3, r7, #8
 800979a:	4618      	mov	r0, r3
 800979c:	f011 fa66 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80097a0:	4623      	mov	r3, r4
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3744      	adds	r7, #68	; 0x44
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd90      	pop	{r4, r7, pc}
	...

080097ac <_ZN11MockSupport22longLongIntReturnValueEv>:
}

#else

cpputest_longlong MockSupport::longLongIntReturnValue()
{
 80097ac:	b5b0      	push	{r4, r5, r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af02      	add	r7, sp, #8
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80097b6:	f008 f8ed 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80097ba:	4604      	mov	r4, r0
 80097bc:	6823      	ldr	r3, [r4, #0]
 80097be:	3368      	adds	r3, #104	; 0x68
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	f008 f8f7 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80097c6:	4603      	mov	r3, r0
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	f240 2345 	movw	r3, #581	; 0x245
 80097ce:	4a06      	ldr	r2, [pc, #24]	; (80097e8 <_ZN11MockSupport22longLongIntReturnValueEv+0x3c>)
 80097d0:	4906      	ldr	r1, [pc, #24]	; (80097ec <_ZN11MockSupport22longLongIntReturnValueEv+0x40>)
 80097d2:	4620      	mov	r0, r4
 80097d4:	47a8      	blx	r5
    return cpputest_longlong(0);
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f7fe fd2f 	bl	800823c <_ZN17cpputest_longlongC1Ei>
}
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	3708      	adds	r7, #8
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bdb0      	pop	{r4, r5, r7, pc}
 80097e6:	bf00      	nop
 80097e8:	080211e8 	.word	0x080211e8
 80097ec:	0802122c 	.word	0x0802122c

080097f0 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv>:

cpputest_ulonglong MockSupport::unsignedLongLongIntReturnValue()
{
 80097f0:	b5b0      	push	{r4, r5, r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80097fa:	f008 f8cb 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80097fe:	4604      	mov	r4, r0
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	3368      	adds	r3, #104	; 0x68
 8009804:	681d      	ldr	r5, [r3, #0]
 8009806:	f008 f8d5 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800980a:	4603      	mov	r3, r0
 800980c:	9300      	str	r3, [sp, #0]
 800980e:	f240 234b 	movw	r3, #587	; 0x24b
 8009812:	4a06      	ldr	r2, [pc, #24]	; (800982c <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x3c>)
 8009814:	4906      	ldr	r1, [pc, #24]	; (8009830 <_ZN11MockSupport30unsignedLongLongIntReturnValueEv+0x40>)
 8009816:	4620      	mov	r0, r4
 8009818:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7fe fd19 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
}
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bdb0      	pop	{r4, r5, r7, pc}
 800982a:	bf00      	nop
 800982c:	080211e8 	.word	0x080211e8
 8009830:	0802124c 	.word	0x0802124c

08009834 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockSupport::returnLongLongIntValueOrDefault(cpputest_longlong defaultValue)
{
 8009834:	b5b0      	push	{r4, r5, r7, lr}
 8009836:	b086      	sub	sp, #24
 8009838:	af02      	add	r7, sp, #8
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	4639      	mov	r1, r7
 8009840:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8009844:	f008 f8a6 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8009848:	4604      	mov	r4, r0
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	3368      	adds	r3, #104	; 0x68
 800984e:	681d      	ldr	r5, [r3, #0]
 8009850:	f008 f8b0 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8009854:	4603      	mov	r3, r0
 8009856:	9300      	str	r3, [sp, #0]
 8009858:	f240 2351 	movw	r3, #593	; 0x251
 800985c:	4a06      	ldr	r2, [pc, #24]	; (8009878 <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 800985e:	4907      	ldr	r1, [pc, #28]	; (800987c <_ZN11MockSupport31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 8009860:	4620      	mov	r0, r4
 8009862:	47a8      	blx	r5
    return defaultValue;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	461a      	mov	r2, r3
 8009868:	463b      	mov	r3, r7
 800986a:	cb03      	ldmia	r3!, {r0, r1}
 800986c:	6010      	str	r0, [r2, #0]
 800986e:	6051      	str	r1, [r2, #4]
}
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bdb0      	pop	{r4, r5, r7, pc}
 8009878:	080211e8 	.word	0x080211e8
 800987c:	0802122c 	.word	0x0802122c

08009880 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockSupport::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong defaultValue)
{
 8009880:	b5b0      	push	{r4, r5, r7, lr}
 8009882:	b086      	sub	sp, #24
 8009884:	af02      	add	r7, sp, #8
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	4639      	mov	r1, r7
 800988c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8009890:	f008 f880 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8009894:	4604      	mov	r4, r0
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	3368      	adds	r3, #104	; 0x68
 800989a:	681d      	ldr	r5, [r3, #0]
 800989c:	f008 f88a 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80098a0:	4603      	mov	r3, r0
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	f240 2357 	movw	r3, #599	; 0x257
 80098a8:	4a06      	ldr	r2, [pc, #24]	; (80098c4 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 80098aa:	4907      	ldr	r1, [pc, #28]	; (80098c8 <_ZN11MockSupport39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 80098ac:	4620      	mov	r0, r4
 80098ae:	47a8      	blx	r5
    return defaultValue;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	461a      	mov	r2, r3
 80098b4:	463b      	mov	r3, r7
 80098b6:	cb03      	ldmia	r3!, {r0, r1}
 80098b8:	6010      	str	r0, [r2, #0]
 80098ba:	6051      	str	r1, [r2, #4]
}
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bdb0      	pop	{r4, r5, r7, pc}
 80098c4:	080211e8 	.word	0x080211e8
 80098c8:	0802124c 	.word	0x0802124c

080098cc <_ZN11MockSupport17stringReturnValueEv>:

#endif

const char* MockSupport::stringReturnValue()
{
 80098cc:	b590      	push	{r4, r7, lr}
 80098ce:	b091      	sub	sp, #68	; 0x44
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	3320      	adds	r3, #32
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f107 0208 	add.w	r2, r7, #8
 80098e0:	6879      	ldr	r1, [r7, #4]
 80098e2:	4610      	mov	r0, r2
 80098e4:	4798      	blx	r3
 80098e6:	f107 0308 	add.w	r3, r7, #8
 80098ea:	4618      	mov	r0, r3
 80098ec:	f011 fea8 	bl	801b640 <_ZNK14MockNamedValue14getStringValueEv>
 80098f0:	4604      	mov	r4, r0
 80098f2:	bf00      	nop
 80098f4:	f107 0308 	add.w	r3, r7, #8
 80098f8:	4618      	mov	r0, r3
 80098fa:	f011 f9b7 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80098fe:	4623      	mov	r3, r4
}
 8009900:	4618      	mov	r0, r3
 8009902:	3744      	adds	r7, #68	; 0x44
 8009904:	46bd      	mov	sp, r7
 8009906:	bd90      	pop	{r4, r7, pc}

08009908 <_ZN11MockSupport17doubleReturnValueEv>:

double MockSupport::doubleReturnValue()
{
 8009908:	b580      	push	{r7, lr}
 800990a:	ed2d 8b02 	vpush	{d8}
 800990e:	b090      	sub	sp, #64	; 0x40
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	3320      	adds	r3, #32
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f107 0208 	add.w	r2, r7, #8
 8009920:	6879      	ldr	r1, [r7, #4]
 8009922:	4610      	mov	r0, r2
 8009924:	4798      	blx	r3
 8009926:	f107 0308 	add.w	r3, r7, #8
 800992a:	4618      	mov	r0, r3
 800992c:	f011 fe2c 	bl	801b588 <_ZNK14MockNamedValue14getDoubleValueEv>
 8009930:	eeb0 8a40 	vmov.f32	s16, s0
 8009934:	eef0 8a60 	vmov.f32	s17, s1
 8009938:	bf00      	nop
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	4618      	mov	r0, r3
 8009940:	f011 f994 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009944:	eeb0 7a48 	vmov.f32	s14, s16
 8009948:	eef0 7a68 	vmov.f32	s15, s17
}
 800994c:	eeb0 0a47 	vmov.f32	s0, s14
 8009950:	eef0 0a67 	vmov.f32	s1, s15
 8009954:	3740      	adds	r7, #64	; 0x40
 8009956:	46bd      	mov	sp, r7
 8009958:	ecbd 8b02 	vpop	{d8}
 800995c:	bd80      	pop	{r7, pc}

0800995e <_ZN11MockSupport27returnPointerValueOrDefaultEPv>:

void * MockSupport::returnPointerValueOrDefault(void * defaultValue)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b082      	sub	sp, #8
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
 8009966:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	331c      	adds	r3, #28
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	4798      	blx	r3
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d007      	beq.n	800998a <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2c>
        return pointerReturnValue();
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	336c      	adds	r3, #108	; 0x6c
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
 8009986:	4603      	mov	r3, r0
 8009988:	e000      	b.n	800998c <_ZN11MockSupport27returnPointerValueOrDefaultEPv+0x2e>
    }
    return defaultValue;
 800998a:	683b      	ldr	r3, [r7, #0]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3708      	adds	r7, #8
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv>:

const void* MockSupport::returnConstPointerValueOrDefault(const void * defaultValue)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	331c      	adds	r3, #28
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	4798      	blx	r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d007      	beq.n	80099c0 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2c>
        return constPointerReturnValue();
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	3378      	adds	r3, #120	; 0x78
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
 80099bc:	4603      	mov	r3, r0
 80099be:	e000      	b.n	80099c2 <_ZN11MockSupport32returnConstPointerValueOrDefaultEPKv+0x2e>
    }
    return defaultValue;
 80099c0:	683b      	ldr	r3, [r7, #0]
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockSupport::returnFunctionPointerValueOrDefault(void (*defaultValue)()))()
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
    if (hasReturnValue()) {
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	331c      	adds	r3, #28
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	4798      	blx	r3
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d007      	beq.n	80099f6 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2c>
        return functionPointerReturnValue();
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	3380      	adds	r3, #128	; 0x80
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	4798      	blx	r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	e000      	b.n	80099f8 <_ZN11MockSupport35returnFunctionPointerValueOrDefaultEPFvvE+0x2e>
    }
    return defaultValue;
 80099f6:	683b      	ldr	r3, [r7, #0]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <_ZN11MockSupport18pointerReturnValueEv>:

void* MockSupport::pointerReturnValue()
{
 8009a00:	b590      	push	{r4, r7, lr}
 8009a02:	b091      	sub	sp, #68	; 0x44
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3320      	adds	r3, #32
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f107 0208 	add.w	r2, r7, #8
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4610      	mov	r0, r2
 8009a18:	4798      	blx	r3
 8009a1a:	f107 0308 	add.w	r3, r7, #8
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f011 fe36 	bl	801b690 <_ZNK14MockNamedValue15getPointerValueEv>
 8009a24:	4604      	mov	r4, r0
 8009a26:	bf00      	nop
 8009a28:	f107 0308 	add.w	r3, r7, #8
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f011 f91d 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009a32:	4623      	mov	r3, r4
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3744      	adds	r7, #68	; 0x44
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd90      	pop	{r4, r7, pc}

08009a3c <_ZN11MockSupport23constPointerReturnValueEv>:

const void* MockSupport::constPointerReturnValue()
{
 8009a3c:	b590      	push	{r4, r7, lr}
 8009a3e:	b091      	sub	sp, #68	; 0x44
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	3320      	adds	r3, #32
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f107 0208 	add.w	r2, r7, #8
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4610      	mov	r0, r2
 8009a54:	4798      	blx	r3
 8009a56:	f107 0308 	add.w	r3, r7, #8
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f011 fe40 	bl	801b6e0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8009a60:	4604      	mov	r4, r0
 8009a62:	bf00      	nop
 8009a64:	f107 0308 	add.w	r3, r7, #8
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f011 f8ff 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009a6e:	4623      	mov	r3, r4
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3744      	adds	r7, #68	; 0x44
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd90      	pop	{r4, r7, pc}

08009a78 <_ZN11MockSupport26functionPointerReturnValueEv>:

void (*MockSupport::functionPointerReturnValue())()
{
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b091      	sub	sp, #68	; 0x44
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3320      	adds	r3, #32
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f107 0208 	add.w	r2, r7, #8
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4610      	mov	r0, r2
 8009a90:	4798      	blx	r3
 8009a92:	f107 0308 	add.w	r3, r7, #8
 8009a96:	4618      	mov	r0, r3
 8009a98:	f011 fe4a 	bl	801b730 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	bf00      	nop
 8009aa0:	f107 0308 	add.w	r3, r7, #8
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f011 f8e1 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8009aaa:	4623      	mov	r3, r4
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3744      	adds	r7, #68	; 0x44
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd90      	pop	{r4, r7, pc}

08009ab4 <_ZN11MockSupport14hasReturnValueEv>:

bool MockSupport::hasReturnValue()
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
    if (lastActualFunctionCall_) return lastActualFunctionCall_->hasReturnValue();
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00a      	beq.n	8009ada <_ZN11MockSupport14hasReturnValueEv+0x26>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3350      	adds	r3, #80	; 0x50
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4610      	mov	r0, r2
 8009ad4:	4798      	blx	r3
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	e000      	b.n	8009adc <_ZN11MockSupport14hasReturnValueEv+0x28>
    return false;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_Z41__static_initialization_and_destruction_0ii>:
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d115      	bne.n	8009b20 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d110      	bne.n	8009b20 <_Z41__static_initialization_and_destruction_0ii+0x3c>
static MockSupport global_mock;
 8009afe:	f107 0308 	add.w	r3, r7, #8
 8009b02:	490f      	ldr	r1, [pc, #60]	; (8009b40 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8009b04:	4618      	mov	r0, r3
 8009b06:	f000 fb62 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8009b0a:	f107 0308 	add.w	r3, r7, #8
 8009b0e:	4619      	mov	r1, r3
 8009b10:	480c      	ldr	r0, [pc, #48]	; (8009b44 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009b12:	f7fe fc6d 	bl	80083f0 <_ZN11MockSupportC1ERK12SimpleString>
 8009b16:	f107 0308 	add.w	r3, r7, #8
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ff0f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d107      	bne.n	8009b36 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d102      	bne.n	8009b36 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8009b30:	4804      	ldr	r0, [pc, #16]	; (8009b44 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8009b32:	f7fe fca7 	bl	8008484 <_ZN11MockSupportD1Ev>
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	080211e0 	.word	0x080211e0
 8009b44:	20000668 	.word	0x20000668

08009b48 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>:
protected:
    void addExpectationsAndCallHistory(const MockExpectedCallsList& expectations);
    void addExpectationsAndCallHistoryRelatedTo(const SimpleString& function, const MockExpectedCallsList& expectations);
};

class MockExpectedCallsDidntHappenFailure : public MockFailure
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	4a05      	ldr	r2, [pc, #20]	; (8009b68 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev+0x20>)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f7fe fbbb 	bl	80082d4 <_ZN11MockFailureD1Ev>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4618      	mov	r0, r3
 8009b62:	3708      	adds	r7, #8
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	0802456c 	.word	0x0802456c

08009b6c <_ZN35MockExpectedCallsDidntHappenFailureD0Ev>:
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ffe7 	bl	8009b48 <_ZN35MockExpectedCallsDidntHappenFailureD1Ev>
 8009b7a:	2134      	movs	r1, #52	; 0x34
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7fd ff77 	bl	8007a70 <_ZdlPvj>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ZN20MockCallOrderFailureD1Ev>:
{
public:
    MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations);
};

class MockCallOrderFailure : public MockFailure
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	4a05      	ldr	r2, [pc, #20]	; (8009bac <_ZN20MockCallOrderFailureD1Ev+0x20>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	601a      	str	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7fe fb99 	bl	80082d4 <_ZN11MockFailureD1Ev>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	08024540 	.word	0x08024540

08009bb0 <_ZN20MockCallOrderFailureD0Ev>:
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f7ff ffe7 	bl	8009b8c <_ZN20MockCallOrderFailureD1Ev>
 8009bbe:	2134      	movs	r1, #52	; 0x34
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fd ff55 	bl	8007a70 <_ZdlPvj>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <_GLOBAL__sub_I__Z4mockRK12SimpleStringP19MockFailureReporter>:
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f7ff ff83 	bl	8009ae4 <_Z41__static_initialization_and_destruction_0ii>
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <_GLOBAL__sub_D__Z4mockRK12SimpleStringP19MockFailureReporter>:
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009be8:	2000      	movs	r0, #0
 8009bea:	f7ff ff7b 	bl	8009ae4 <_Z41__static_initialization_and_destruction_0ii>
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8009bf8:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <_ZN11SimpleMutexC1Ev+0x20>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4798      	blx	r3
 8009bfe:	4602      	mov	r2, r0
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	601a      	str	r2, [r3, #0]
}
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4618      	mov	r0, r3
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	200000ec 	.word	0x200000ec

08009c14 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8009c1c:	4b05      	ldr	r3, [pc, #20]	; (8009c34 <_ZN11SimpleMutexD1Ev+0x20>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	4610      	mov	r0, r2
 8009c26:	4798      	blx	r3
}
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	200000f8 	.word	0x200000f8

08009c38 <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8009c40:	4b04      	ldr	r3, [pc, #16]	; (8009c54 <_ZN11SimpleMutex4LockEv+0x1c>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	687a      	ldr	r2, [r7, #4]
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	4610      	mov	r0, r2
 8009c4a:	4798      	blx	r3
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	200000f0 	.word	0x200000f0

08009c58 <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	4610      	mov	r0, r2
 8009c6a:	4798      	blx	r3
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	200000f4 	.word	0x200000f4

08009c78 <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7ff ffd3 	bl	8009c38 <_ZN11SimpleMutex4LockEv>
}
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff ffd5 	bl	8009c58 <_ZN11SimpleMutex6UnlockEv>
}
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8009cbc:	4b05      	ldr	r3, [pc, #20]	; (8009cd4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 8009cc4:	f003 fd7a 	bl	800d7bc <_Z24defaultNewArrayAllocatorv>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	e001      	b.n	8009cd0 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8009ccc:	4b01      	ldr	r3, [pc, #4]	; (8009cd4 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	200006b0 	.word	0x200006b0

08009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 8009cd8:	b590      	push	{r4, r7, lr}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 8009ce4:	f7ff ffe8 	bl	8009cb8 <_ZN12SimpleString18getStringAllocatorEv>
 8009ce8:	6803      	ldr	r3, [r0, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	681c      	ldr	r4, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68ba      	ldr	r2, [r7, #8]
 8009cf2:	68f9      	ldr	r1, [r7, #12]
 8009cf4:	47a0      	blx	r4
 8009cf6:	4603      	mov	r3, r0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}

08009d00 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 8009d00:	b590      	push	{r4, r7, lr}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af02      	add	r7, sp, #8
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 8009d0e:	f7ff ffd3 	bl	8009cb8 <_ZN12SimpleString18getStringAllocatorEv>
 8009d12:	6803      	ldr	r3, [r0, #0]
 8009d14:	330c      	adds	r3, #12
 8009d16:	681c      	ldr	r4, [r3, #0]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	68ba      	ldr	r2, [r7, #8]
 8009d20:	68f9      	ldr	r1, [r7, #12]
 8009d22:	47a0      	blx	r4
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}

08009d2c <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8009d34:	2284      	movs	r2, #132	; 0x84
 8009d36:	4906      	ldr	r1, [pc, #24]	; (8009d50 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7ff ffcd 	bl	8009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 8009d3e:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2200      	movs	r2, #0
 8009d44:	701a      	strb	r2, [r3, #0]
    return empty;
 8009d46:	68fb      	ldr	r3, [r7, #12]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	08021278 	.word	0x08021278

08009d54 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f001 f809 	bl	800ad78 <_ZN12SimpleString7isSpaceEc>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d003      	beq.n	8009d74 <_ZN12SimpleString4AtoUEPKc+0x20>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	607b      	str	r3, [r7, #4]
 8009d72:	e7f3      	b.n	8009d5c <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f000 ffe7 	bl	800ad50 <_ZN12SimpleString7isDigitEc>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <_ZN12SimpleString4AtoUEPKc+0x40>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b2f      	cmp	r3, #47	; 0x2f
 8009d8e:	d901      	bls.n	8009d94 <_ZN12SimpleString4AtoUEPKc+0x40>
 8009d90:	2301      	movs	r3, #1
 8009d92:	e000      	b.n	8009d96 <_ZN12SimpleString4AtoUEPKc+0x42>
 8009d94:	2300      	movs	r3, #0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d010      	beq.n	8009dbc <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	4613      	mov	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4413      	add	r3, r2
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4413      	add	r3, r2
 8009db0:	3b30      	subs	r3, #48	; 0x30
 8009db2:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3301      	adds	r3, #1
 8009db8:	607b      	str	r3, [r7, #4]
 8009dba:	e7dd      	b.n	8009d78 <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 ffd0 	bl	800ad78 <_ZN12SimpleString7isSpaceEc>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <_ZN12SimpleString4AtoIEPKc+0x20>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3301      	adds	r3, #1
 8009de2:	607b      	str	r3, [r7, #4]
 8009de4:	e7f3      	b.n	8009dce <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8009dec:	7afb      	ldrb	r3, [r7, #11]
 8009dee:	2b2d      	cmp	r3, #45	; 0x2d
 8009df0:	d002      	beq.n	8009df8 <_ZN12SimpleString4AtoIEPKc+0x32>
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	2b2b      	cmp	r3, #43	; 0x2b
 8009df6:	d102      	bne.n	8009dfe <_ZN12SimpleString4AtoIEPKc+0x38>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	781b      	ldrb	r3, [r3, #0]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 ffa2 	bl	800ad50 <_ZN12SimpleString7isDigitEc>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d00f      	beq.n	8009e32 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	005b      	lsls	r3, r3, #1
 8009e1c:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	3b30      	subs	r3, #48	; 0x30
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	607b      	str	r3, [r7, #4]
 8009e30:	e7e7      	b.n	8009e02 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 8009e32:	7afb      	ldrb	r3, [r7, #11]
 8009e34:	2b2d      	cmp	r3, #45	; 0x2d
 8009e36:	d102      	bne.n	8009e3e <_ZN12SimpleString4AtoIEPKc+0x78>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	425b      	negs	r3, r3
 8009e3c:	e000      	b.n	8009e40 <_ZN12SimpleString4AtoIEPKc+0x7a>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00c      	beq.n	8009e74 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	781a      	ldrb	r2, [r3, #0]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	429a      	cmp	r2, r3
 8009e64:	d106      	bne.n	8009e74 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3301      	adds	r3, #1
 8009e6a:	607b      	str	r3, [r7, #4]
       ++s2;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8009e72:	e7ee      	b.n	8009e52 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	461a      	mov	r2, r3
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	781b      	ldrb	r3, [r3, #0]
 8009e7e:	1ad3      	subs	r3, r2, r3
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8009e94:	f04f 33ff 	mov.w	r3, #4294967295
 8009e98:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	bf14      	ite	ne
 8009eac:	2301      	movne	r3, #1
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d000      	beq.n	8009eb8 <_ZN12SimpleString6StrLenEPKc+0x2c>
 8009eb6:	e7f0      	b.n	8009e9a <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3714      	adds	r7, #20
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b085      	sub	sp, #20
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d013      	beq.n	8009f00 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00f      	beq.n	8009f00 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	781a      	ldrb	r2, [r3, #0]
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	429a      	cmp	r2, r3
 8009eea:	d109      	bne.n	8009f00 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	607b      	str	r3, [r7, #4]
        ++s1;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	60fb      	str	r3, [r7, #12]
        ++s2;
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	3301      	adds	r3, #1
 8009efc:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8009efe:	e7e8      	b.n	8009ed2 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d006      	beq.n	8009f14 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	e000      	b.n	8009f16 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 8009f22:	b480      	push	{r7}
 8009f24:	b087      	sub	sp, #28
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
    char* result = s1;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	e01e      	b.n	8009f80 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	781a      	ldrb	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	607b      	str	r3, [r7, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d005      	beq.n	8009f62 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	781b      	ldrb	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e000      	b.n	8009f64 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 8009f62:	2300      	movs	r3, #0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d00a      	beq.n	8009f7e <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	60bb      	str	r3, [r7, #8]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8009f7c:	e7e5      	b.n	8009f4a <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8009f7e:	697b      	ldr	r3, [r7, #20]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	371c      	adds	r7, #28
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b082      	sub	sp, #8
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	e01b      	b.n	8009fda <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d016      	beq.n	8009fd8 <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 8009faa:	6838      	ldr	r0, [r7, #0]
 8009fac:	f7ff ff6e 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	6839      	ldr	r1, [r7, #0]
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff ff85 	bl	8009ec6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	bf0c      	ite	eq
 8009fc2:	2301      	moveq	r3, #1
 8009fc4:	2300      	movne	r3, #0
 8009fc6:	b2db      	uxtb	r3, r3
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	e004      	b.n	8009fda <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	607b      	str	r3, [r7, #4]
 8009fd6:	e7e4      	b.n	8009fa2 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b082      	sub	sp, #8
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	4603      	mov	r3, r0
 8009fea:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8009fec:	79fb      	ldrb	r3, [r7, #7]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 fed9 	bl	800ada6 <_ZN12SimpleString7isUpperEc>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <_ZN12SimpleString7ToLowerEc+0x20>
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	3320      	adds	r3, #32
 8009ffe:	b2db      	uxtb	r3, r3
 800a000:	e000      	b.n	800a004 <_ZN12SimpleString7ToLowerEc+0x22>
 800a002:	79fb      	ldrb	r3, [r7, #7]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3708      	adds	r7, #8
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b087      	sub	sp, #28
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	613b      	str	r3, [r7, #16]

    while (n--)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	1e5a      	subs	r2, r3, #1
 800a024:	607a      	str	r2, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	bf14      	ite	ne
 800a02a:	2301      	movne	r3, #1
 800a02c:	2300      	moveq	r3, #0
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	2b00      	cmp	r3, #0
 800a032:	d013      	beq.n	800a05c <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	781a      	ldrb	r2, [r3, #0]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	781b      	ldrb	r3, [r3, #0]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d006      	beq.n	800a04e <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	1ad3      	subs	r3, r2, r3
 800a04c:	e007      	b.n	800a05e <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	3301      	adds	r3, #1
 800a052:	617b      	str	r3, [r7, #20]
            ++p2;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	3301      	adds	r3, #1
 800a058:	613b      	str	r3, [r7, #16]
    while (n--)
 800a05a:	e7e1      	b.n	800a020 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 800a05c:	2300      	movs	r3, #0
}
 800a05e:	4618      	mov	r0, r3
 800a060:	371c      	adds	r7, #28
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
	...

0800a06c <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00d      	beq.n	800a098 <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6859      	ldr	r1, [r3, #4]
 800a084:	23ee      	movs	r3, #238	; 0xee
 800a086:	4a06      	ldr	r2, [pc, #24]	; (800a0a0 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800a088:	f7ff fe3a 	bl	8009d00 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	605a      	str	r2, [r3, #4]
    }
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	08021278 	.word	0x08021278

0800a0a4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f7ff ffdd 	bl	800a06c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f7ff fe37 	bl	8009d2c <_ZNK12SimpleString14getEmptyStringEv>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	601a      	str	r2, [r3, #0]
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f7ff ffc7 	bl	800a06c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	68b8      	ldr	r0, [r7, #8]
 800a0ec:	f000 fe12 	bl	800ad14 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	601a      	str	r2, [r3, #0]
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
	...

0800a100 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7ff ffae 	bl	800a06c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f240 1209 	movw	r2, #265	; 0x109
 800a11e:	4907      	ldr	r1, [pc, #28]	; (800a13c <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 800a120:	4618      	mov	r0, r3
 800a122:	f7ff fdd9 	bl	8009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a126:	4602      	mov	r2, r0
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2200      	movs	r2, #0
 800a132:	701a      	strb	r2, [r3, #0]
}
 800a134:	bf00      	nop
 800a136:	3708      	adds	r7, #8
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	08021278 	.word	0x08021278

0800a140 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7ff ff8d 	bl	800a06c <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	68ba      	ldr	r2, [r7, #8]
 800a15c:	601a      	str	r2, [r3, #0]
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 800a166:	b590      	push	{r4, r7, lr}
 800a168:	b083      	sub	sp, #12
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681c      	ldr	r4, [r3, #0]
 800a174:	6838      	ldr	r0, [r7, #0]
 800a176:	f000 fbc1 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a17a:	4603      	mov	r3, r0
 800a17c:	3301      	adds	r3, #1
 800a17e:	461a      	mov	r2, r3
 800a180:	4621      	mov	r1, r4
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff ffa2 	bl	800a0cc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a188:	bf00      	nop
 800a18a:	370c      	adds	r7, #12
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd90      	pop	{r4, r7, pc}

0800a190 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800a19a:	6838      	ldr	r0, [r7, #0]
 800a19c:	f7ff fe76 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	6839      	ldr	r1, [r7, #0]
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff ff8f 	bl	800a0cc <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800a1ae:	bf00      	nop
 800a1b0:	3708      	adds	r7, #8
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800a1b6:	b480      	push	{r7}
 800a1b8:	b083      	sub	sp, #12
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
    return buffer_;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f7ff ff5a 	bl	800a0a4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a1f0:	e003      	b.n	800a1fa <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 800a1f2:	6839      	ldr	r1, [r7, #0]
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f7ff ffcb 	bl	800a190 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3708      	adds	r7, #8
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 800a21c:	68b8      	ldr	r0, [r7, #8]
 800a21e:	f7ff fe35 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800a222:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 800a224:	697b      	ldr	r3, [r7, #20]
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	fb02 f303 	mul.w	r3, r2, r3
 800a22c:	3301      	adds	r3, #1
 800a22e:	4619      	mov	r1, r3
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f7ff ff65 	bl	800a100 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800a23c:	2300      	movs	r3, #0
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	69ba      	ldr	r2, [r7, #24]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	429a      	cmp	r2, r3
 800a246:	d20e      	bcs.n	800a266 <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 800a248:	697b      	ldr	r3, [r7, #20]
 800a24a:	3301      	adds	r3, #1
 800a24c:	461a      	mov	r2, r3
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	69f8      	ldr	r0, [r7, #28]
 800a252:	f7ff fe66 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 800a256:	69fa      	ldr	r2, [r7, #28]
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	4413      	add	r3, r2
 800a25c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	3301      	adds	r3, #1
 800a262:	61bb      	str	r3, [r7, #24]
 800a264:	e7ec      	b.n	800a240 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	2200      	movs	r2, #0
 800a26a:	701a      	strb	r2, [r3, #0]
}
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4618      	mov	r0, r3
 800a270:	3720      	adds	r7, #32
 800a272:	46bd      	mov	sp, r7
 800a274:	bd80      	pop	{r7, pc}

0800a276 <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800a276:	b580      	push	{r7, lr}
 800a278:	b082      	sub	sp, #8
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
 800a27e:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 800a28c:	6838      	ldr	r0, [r7, #0]
 800a28e:	f7ff ff92 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a292:	4603      	mov	r3, r0
 800a294:	4619      	mov	r1, r3
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f7ff ff7a 	bl	800a190 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
    if (this != &other)
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d003      	beq.n	800a2c0 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7ff ff53 	bl	800a166 <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 800a2c0:	687b      	ldr	r3, [r7, #4]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800a2ca:	b590      	push	{r4, r7, lr}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff ff6e 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a2da:	4604      	mov	r4, r0
 800a2dc:	6838      	ldr	r0, [r7, #0]
 800a2de:	f7ff ff6a 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7ff fe50 	bl	8009f8c <_ZN12SimpleString6StrStrEPKcS1_>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	bf14      	ite	ne
 800a2f2:	2301      	movne	r3, #1
 800a2f4:	2300      	moveq	r3, #0
 800a2f6:	b2db      	uxtb	r3, r3
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd90      	pop	{r4, r7, pc}

0800a300 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b087      	sub	sp, #28
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	6879      	ldr	r1, [r7, #4]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fabb 	bl	800a88c <_ZNK12SimpleString9lowerCaseEv>
 800a316:	f107 0310 	add.w	r3, r7, #16
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fab5 	bl	800a88c <_ZNK12SimpleString9lowerCaseEv>
 800a322:	f107 0210 	add.w	r2, r7, #16
 800a326:	f107 0308 	add.w	r3, r7, #8
 800a32a:	4611      	mov	r1, r2
 800a32c:	4618      	mov	r0, r3
 800a32e:	f7ff ffcc 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 800a332:	4603      	mov	r3, r0
 800a334:	461c      	mov	r4, r3
 800a336:	bf00      	nop
 800a338:	f107 0310 	add.w	r3, r7, #16
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fafe 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a342:	f107 0308 	add.w	r3, r7, #8
 800a346:	4618      	mov	r0, r3
 800a348:	f000 faf9 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a34c:	4623      	mov	r3, r4
}
 800a34e:	4618      	mov	r0, r3
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	bd90      	pop	{r4, r7, pc}

0800a356 <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 800a356:	b590      	push	{r4, r7, lr}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 800a360:	6838      	ldr	r0, [r7, #0]
 800a362:	f000 facb 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bf0c      	ite	eq
 800a36c:	2301      	moveq	r3, #1
 800a36e:	2300      	movne	r3, #0
 800a370:	b2db      	uxtb	r3, r3
 800a372:	2b00      	cmp	r3, #0
 800a374:	d001      	beq.n	800a37a <_ZNK12SimpleString10startsWithERKS_+0x24>
 800a376:	2301      	movs	r3, #1
 800a378:	e022      	b.n	800a3c0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fabe 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	bf0c      	ite	eq
 800a386:	2301      	moveq	r3, #1
 800a388:	2300      	movne	r3, #0
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 800a390:	2300      	movs	r3, #0
 800a392:	e015      	b.n	800a3c0 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff ff0e 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a39a:	4604      	mov	r4, r0
 800a39c:	6838      	ldr	r0, [r7, #0]
 800a39e:	f7ff ff0a 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff fdf0 	bl	8009f8c <_ZN12SimpleString6StrStrEPKcS1_>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f7ff ff01 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	429c      	cmp	r4, r3
 800a3b8:	bf0c      	ite	eq
 800a3ba:	2301      	moveq	r3, #1
 800a3bc:	2300      	movne	r3, #0
 800a3be:	b2db      	uxtb	r3, r3
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd90      	pop	{r4, r7, pc}

0800a3c8 <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800a3c8:	b590      	push	{r4, r7, lr}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
    size_t length = size();
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa92 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a3d8:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800a3da:	6838      	ldr	r0, [r7, #0]
 800a3dc:	f000 fa8e 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a3e0:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <_ZNK12SimpleString8endsWithERKS_+0x24>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e020      	b.n	800a42e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <_ZNK12SimpleString8endsWithERKS_+0x2e>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e01b      	b.n	800a42e <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d201      	bcs.n	800a402 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 800a3fe:	2300      	movs	r3, #0
 800a400:	e015      	b.n	800a42e <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fed7 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a408:	4601      	mov	r1, r0
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	18cc      	adds	r4, r1, r3
 800a412:	6838      	ldr	r0, [r7, #0]
 800a414:	f7ff fecf 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a418:	4603      	mov	r3, r0
 800a41a:	4619      	mov	r1, r3
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7ff fd13 	bl	8009e48 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	bf0c      	ite	eq
 800a428:	2301      	moveq	r3, #1
 800a42a:	2300      	movne	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3714      	adds	r7, #20
 800a432:	46bd      	mov	sp, r7
 800a434:	bd90      	pop	{r4, r7, pc}

0800a436 <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b086      	sub	sp, #24
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff feb6 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a44a:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60fb      	str	r3, [r7, #12]
    if (*str){
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 800a458:	6838      	ldr	r0, [r7, #0]
 800a45a:	f7ff feac 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a45e:	4603      	mov	r3, r0
 800a460:	4619      	mov	r1, r3
 800a462:	6938      	ldr	r0, [r7, #16]
 800a464:	f7ff fd92 	bl	8009f8c <_ZN12SimpleString6StrStrEPKcS1_>
 800a468:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d014      	beq.n	800a49c <_ZNK12SimpleString5countERKS_+0x66>
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d011      	beq.n	800a49c <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	613b      	str	r3, [r7, #16]
        str++;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	3301      	adds	r3, #1
 800a480:	613b      	str	r3, [r7, #16]
        num++;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	3301      	adds	r3, #1
 800a486:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800a488:	6838      	ldr	r0, [r7, #0]
 800a48a:	f7ff fe94 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a48e:	4603      	mov	r3, r0
 800a490:	4619      	mov	r1, r3
 800a492:	6938      	ldr	r0, [r7, #16]
 800a494:	f7ff fd7a 	bl	8009f8c <_ZN12SimpleString6StrStrEPKcS1_>
 800a498:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800a49a:	e7e6      	b.n	800a46a <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 800a49c:	697b      	ldr	r3, [r7, #20]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800a4a6:	b590      	push	{r4, r7, lr}
 800a4a8:	b091      	sub	sp, #68	; 0x44
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 800a4b2:	68b9      	ldr	r1, [r7, #8]
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ffbe 	bl	800a436 <_ZNK12SimpleString5countERKS_>
 800a4ba:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 800a4bc:	68b9      	ldr	r1, [r7, #8]
 800a4be:	68f8      	ldr	r0, [r7, #12]
 800a4c0:	f7ff ff82 	bl	800a3c8 <_ZNK12SimpleString8endsWithERKS_>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	e000      	b.n	800a4d0 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 800a4d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d6:	4413      	add	r3, r2
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 f95c 	bl	800b798 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f7ff fe68 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a4e6:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d235      	bcs.n	800a560 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800a4f8:	68b8      	ldr	r0, [r7, #8]
 800a4fa:	f7ff fe5c 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a4fe:	4603      	mov	r3, r0
 800a500:	4619      	mov	r1, r3
 800a502:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a504:	f7ff fd42 	bl	8009f8c <_ZN12SimpleString6StrStrEPKcS1_>
 800a508:	4603      	mov	r3, r0
 800a50a:	3301      	adds	r3, #1
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 800a50e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f001 f9db 	bl	800b8cc <_ZN22SimpleStringCollectionixEj>
 800a516:	4604      	mov	r4, r0
 800a518:	f107 031c 	add.w	r3, r7, #28
 800a51c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a51e:	4618      	mov	r0, r3
 800a520:	f7ff fe55 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800a524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	f107 0014 	add.w	r0, r7, #20
 800a52e:	f107 011c 	add.w	r1, r7, #28
 800a532:	2200      	movs	r2, #0
 800a534:	f000 fb0c 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 800a538:	f107 0314 	add.w	r3, r7, #20
 800a53c:	4619      	mov	r1, r3
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff feb1 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800a544:	f107 0314 	add.w	r3, r7, #20
 800a548:	4618      	mov	r0, r3
 800a54a:	f000 f9f8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a54e:	f107 031c 	add.w	r3, r7, #28
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f9f3 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	3301      	adds	r3, #1
 800a55c:	63bb      	str	r3, [r7, #56]	; 0x38
 800a55e:	e7c5      	b.n	800a4ec <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 800a560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a562:	2b00      	cmp	r3, #0
 800a564:	d015      	beq.n	800a592 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 800a566:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 f9af 	bl	800b8cc <_ZN22SimpleStringCollectionixEj>
 800a56e:	4604      	mov	r4, r0
 800a570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a576:	4618      	mov	r0, r3
 800a578:	f7ff fe29 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800a57c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a580:	4619      	mov	r1, r3
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff fe8f 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800a588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a58c:	4618      	mov	r0, r3
 800a58e:	f000 f9d6 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
}
 800a592:	bf00      	nop
 800a594:	3744      	adds	r7, #68	; 0x44
 800a596:	46bd      	mov	sp, r7
 800a598:	bd90      	pop	{r4, r7, pc}

0800a59a <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	70fb      	strb	r3, [r7, #3]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f9a6 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a5b0:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	60fb      	str	r3, [r7, #12]
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d218      	bcs.n	800a5f0 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff fdf9 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	bf0c      	ite	eq
 800a5d2:	2301      	moveq	r3, #1
 800a5d4:	2300      	movne	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d005      	beq.n	800a5e8 <_ZN12SimpleString7replaceEcc+0x4e>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	78ba      	ldrb	r2, [r7, #2]
 800a5e6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	60fb      	str	r3, [r7, #12]
 800a5ee:	e7e2      	b.n	800a5b6 <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 800a5f0:	bf00      	nop
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}

0800a5f8 <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08e      	sub	sp, #56	; 0x38
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 800a604:	f107 0310 	add.w	r3, r7, #16
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff fddf 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800a610:	f107 0310 	add.w	r3, r7, #16
 800a614:	4619      	mov	r1, r3
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f7ff ff0d 	bl	800a436 <_ZNK12SimpleString5countERKS_>
 800a61c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a61e:	f107 0310 	add.w	r3, r7, #16
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f98b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 800a628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d071      	beq.n	800a712 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 800a62e:	68f8      	ldr	r0, [r7, #12]
 800a630:	f000 f964 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a634:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 800a636:	68b8      	ldr	r0, [r7, #8]
 800a638:	f7ff fc28 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800a63c:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff fc24 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800a644:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 800a646:	6a3b      	ldr	r3, [r7, #32]
 800a648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a64a:	fb02 f203 	mul.w	r2, r2, r3
 800a64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a650:	441a      	add	r2, r3
 800a652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a654:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a656:	fb01 f303 	mul.w	r3, r1, r3
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	3301      	adds	r3, #1
 800a65e:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	2b01      	cmp	r3, #1
 800a664:	d951      	bls.n	800a70a <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 800a666:	f240 129d 	movw	r2, #413	; 0x19d
 800a66a:	492c      	ldr	r1, [pc, #176]	; (800a71c <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 800a66c:	69f8      	ldr	r0, [r7, #28]
 800a66e:	f7ff fb33 	bl	8009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800a672:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 800a674:	2300      	movs	r3, #0
 800a676:	637b      	str	r3, [r7, #52]	; 0x34
 800a678:	2300      	movs	r3, #0
 800a67a:	633b      	str	r3, [r7, #48]	; 0x30
 800a67c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	429a      	cmp	r2, r3
 800a682:	d236      	bcs.n	800a6f2 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	f7ff fd96 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a68a:	4602      	mov	r2, r0
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	4413      	add	r3, r2
 800a690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a692:	68b9      	ldr	r1, [r7, #8]
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff fc16 	bl	8009ec6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	bf0c      	ite	eq
 800a6a0:	2301      	moveq	r3, #1
 800a6a2:	2300      	movne	r3, #0
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d011      	beq.n	800a6ce <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	18d0      	adds	r0, r2, r3
 800a6b0:	6a3b      	ldr	r3, [r7, #32]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6879      	ldr	r1, [r7, #4]
 800a6b8:	f7ff fc33 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 800a6bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 800a6c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	4413      	add	r3, r2
 800a6ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a6cc:	e7d6      	b.n	800a67c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7ff fd71 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d8:	441a      	add	r2, r3
 800a6da:	69b9      	ldr	r1, [r7, #24]
 800a6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6de:	440b      	add	r3, r1
 800a6e0:	7812      	ldrb	r2, [r2, #0]
 800a6e2:	701a      	strb	r2, [r3, #0]
                j++;
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800a6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 800a6f0:	e7c4      	b.n	800a67c <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	69b9      	ldr	r1, [r7, #24]
 800a702:	68f8      	ldr	r0, [r7, #12]
 800a704:	f7ff fd1c 	bl	800a140 <_ZN12SimpleString19setInternalBufferToEPcj>
 800a708:	e004      	b.n	800a714 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f7ff fcca 	bl	800a0a4 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 800a710:	e000      	b.n	800a714 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 800a712:	bf00      	nop
}
 800a714:	3738      	adds	r7, #56	; 0x38
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	08021278 	.word	0x08021278

0800a720 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 800a720:	b590      	push	{r4, r7, lr}
 800a722:	b089      	sub	sp, #36	; 0x24
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 800a72a:	493b      	ldr	r1, [pc, #236]	; (800a818 <_ZNK12SimpleString9printableEv+0xf8>)
 800a72c:	6878      	ldr	r0, [r7, #4]
 800a72e:	f7ff fd4e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 800a732:	6838      	ldr	r0, [r7, #0]
 800a734:	f000 f876 	bl	800a824 <_ZNK12SimpleString16getPrintableSizeEv>
 800a738:	4603      	mov	r3, r0
 800a73a:	3301      	adds	r3, #1
 800a73c:	4619      	mov	r1, r3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f7ff fcde 	bl	800a100 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 800a744:	6838      	ldr	r0, [r7, #0]
 800a746:	f000 f8d9 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a74a:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a750:	2300      	movs	r3, #0
 800a752:	61bb      	str	r3, [r7, #24]
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	429a      	cmp	r2, r3
 800a75a:	d252      	bcs.n	800a802 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	4413      	add	r3, r2
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 800a768:	7cfb      	ldrb	r3, [r7, #19]
 800a76a:	4618      	mov	r0, r3
 800a76c:	f000 fb43 	bl	800adf6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a770:	4603      	mov	r3, r0
 800a772:	2b00      	cmp	r3, #0
 800a774:	d012      	beq.n	800a79c <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	69fb      	ldr	r3, [r7, #28]
 800a77c:	18d0      	adds	r0, r2, r3
 800a77e:	7cfb      	ldrb	r3, [r7, #19]
 800a780:	3b07      	subs	r3, #7
 800a782:	b2db      	uxtb	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	4b25      	ldr	r3, [pc, #148]	; (800a81c <_ZNK12SimpleString9printableEv+0xfc>)
 800a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78c:	2202      	movs	r2, #2
 800a78e:	4619      	mov	r1, r3
 800a790:	f7ff fbc7 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	3302      	adds	r3, #2
 800a798:	61fb      	str	r3, [r7, #28]
 800a79a:	e02e      	b.n	800a7fa <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 800a79c:	7cfb      	ldrb	r3, [r7, #19]
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fb15 	bl	800adce <_ZN12SimpleString9isControlEc>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01e      	beq.n	800a7e8 <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a7aa:	7cfa      	ldrb	r2, [r7, #19]
 800a7ac:	f107 0308 	add.w	r3, r7, #8
 800a7b0:	491b      	ldr	r1, [pc, #108]	; (800a820 <_ZNK12SimpleString9printableEv+0x100>)
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fdca 	bl	800b34c <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	18d4      	adds	r4, r2, r3
 800a7c0:	f107 0308 	add.w	r3, r7, #8
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f88d 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2204      	movs	r2, #4
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	4620      	mov	r0, r4
 800a7d2:	f7ff fba6 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 800a7d6:	69fb      	ldr	r3, [r7, #28]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 800a7dc:	f107 0308 	add.w	r3, r7, #8
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 f8ac 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a7e6:	e008      	b.n	800a7fa <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681a      	ldr	r2, [r3, #0]
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	7cfa      	ldrb	r2, [r7, #19]
 800a7f2:	701a      	strb	r2, [r3, #0]
            j++;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 800a7fa:	69bb      	ldr	r3, [r7, #24]
 800a7fc:	3301      	adds	r3, #1
 800a7fe:	61bb      	str	r3, [r7, #24]
 800a800:	e7a8      	b.n	800a754 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	69fb      	ldr	r3, [r7, #28]
 800a808:	4413      	add	r3, r2
 800a80a:	2200      	movs	r2, #0
 800a80c:	701a      	strb	r2, [r3, #0]

    return result;
 800a80e:	bf00      	nop
}
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	3724      	adds	r7, #36	; 0x24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd90      	pop	{r4, r7, pc}
 800a818:	08021338 	.word	0x08021338
 800a81c:	20000068 	.word	0x20000068
 800a820:	0802133c 	.word	0x0802133c

0800a824 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f865 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a832:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 800a838:	2300      	movs	r3, #0
 800a83a:	613b      	str	r3, [r7, #16]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	429a      	cmp	r2, r3
 800a842:	d21e      	bcs.n	800a882 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681a      	ldr	r2, [r3, #0]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	4413      	add	r3, r2
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	4618      	mov	r0, r3
 800a854:	f000 facf 	bl	800adf6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	3301      	adds	r3, #1
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	e009      	b.n	800a87a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 800a866:	7afb      	ldrb	r3, [r7, #11]
 800a868:	4618      	mov	r0, r3
 800a86a:	f000 fab0 	bl	800adce <_ZN12SimpleString9isControlEc>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d002      	beq.n	800a87a <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	3303      	adds	r3, #3
 800a878:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	3301      	adds	r3, #1
 800a87e:	613b      	str	r3, [r7, #16]
 800a880:	e7dc      	b.n	800a83c <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 800a882:	697b      	ldr	r3, [r7, #20]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 800a88c:	b590      	push	{r4, r7, lr}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f7ff fcec 	bl	800a276 <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f82c 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a8a4:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d213      	bcs.n	800a8da <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff fc7f 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4413      	add	r3, r2
 800a8be:	7819      	ldrb	r1, [r3, #0]
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	18d4      	adds	r4, r2, r3
 800a8c8:	4608      	mov	r0, r1
 800a8ca:	f7ff fb8a 	bl	8009fe2 <_ZN12SimpleString7ToLowerEc>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	e7e7      	b.n	800a8aa <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 800a8da:	bf00      	nop
}
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	3714      	adds	r7, #20
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd90      	pop	{r4, r7, pc}

0800a8e4 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
    return getBuffer();
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff fc62 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a8f2:	4603      	mov	r3, r0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3708      	adds	r7, #8
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	bd80      	pop	{r7, pc}

0800a8fc <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b082      	sub	sp, #8
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fc56 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800a90a:	4603      	mov	r3, r0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fabd 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800a912:	4603      	mov	r3, r0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
    return size() == 0;
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f7ff ffe9 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bf0c      	ite	eq
 800a930:	2301      	moveq	r3, #1
 800a932:	2300      	movne	r3, #0
 800a934:	b2db      	uxtb	r3, r3
}
 800a936:	4618      	mov	r0, r3
 800a938:	3708      	adds	r7, #8
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 800a93e:	b580      	push	{r7, lr}
 800a940:	b082      	sub	sp, #8
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f7ff fb90 	bl	800a06c <_ZN12SimpleString24deallocateInternalBufferEv>
}
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}

0800a956 <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 800a956:	b590      	push	{r4, r7, lr}
 800a958:	b083      	sub	sp, #12
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f7ff ffbf 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800a966:	4604      	mov	r4, r0
 800a968:	6838      	ldr	r0, [r7, #0]
 800a96a:	f7ff ffbb 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800a96e:	4603      	mov	r3, r0
 800a970:	4619      	mov	r1, r3
 800a972:	4620      	mov	r0, r4
 800a974:	f7ff fa68 	bl	8009e48 <_ZN12SimpleString6StrCmpEPKcS1_>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bf0c      	ite	eq
 800a97e:	2301      	moveq	r3, #1
 800a980:	2300      	movne	r3, #0
 800a982:	b2db      	uxtb	r3, r3
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd90      	pop	{r4, r7, pc}

0800a98c <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 800a98c:	b590      	push	{r4, r7, lr}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 800a996:	f107 0308 	add.w	r3, r7, #8
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7ff ff75 	bl	800a88c <_ZNK12SimpleString9lowerCaseEv>
 800a9a2:	f107 0310 	add.w	r3, r7, #16
 800a9a6:	6839      	ldr	r1, [r7, #0]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7ff ff6f 	bl	800a88c <_ZNK12SimpleString9lowerCaseEv>
 800a9ae:	f107 0210 	add.w	r2, r7, #16
 800a9b2:	f107 0308 	add.w	r3, r7, #8
 800a9b6:	4611      	mov	r1, r2
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff ffcc 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	461c      	mov	r4, r3
 800a9c2:	f107 0310 	add.w	r3, r7, #16
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7ff ffb9 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff ffb4 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800a9d6:	4623      	mov	r3, r4
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	371c      	adds	r7, #28
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd90      	pop	{r4, r7, pc}

0800a9e0 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b082      	sub	sp, #8
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
    return !(left == right);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f7ff ffb2 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	f083 0301 	eor.w	r3, r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	60f8      	str	r0, [r7, #12]
 800aa0a:	60b9      	str	r1, [r7, #8]
 800aa0c:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 800aa0e:	68b8      	ldr	r0, [r7, #8]
 800aa10:	f7ff fbd1 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800aa14:	4603      	mov	r3, r0
 800aa16:	4619      	mov	r1, r3
 800aa18:	68f8      	ldr	r0, [r7, #12]
 800aa1a:	f7ff fbd8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fbc9 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800aa24:	4603      	mov	r3, r0
 800aa26:	4619      	mov	r1, r3
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 f817 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    return t;
 800aa2e:	bf00      	nop
}
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 800aa42:	6838      	ldr	r0, [r7, #0]
 800aa44:	f7ff fbb7 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 f805 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
 800aa52:	4603      	mov	r3, r0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7ff ff48 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800aa6c:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 800aa6e:	6838      	ldr	r0, [r7, #0]
 800aa70:	f7ff fa0c 	bl	8009e8c <_ZN12SimpleString6StrLenEPKc>
 800aa74:	4603      	mov	r3, r0
 800aa76:	3301      	adds	r3, #1
 800aa78:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 800aa7a:	697a      	ldr	r2, [r7, #20]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	4413      	add	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f7ff fb97 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	68f9      	ldr	r1, [r7, #12]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f000 f941 	bl	800ad14 <_ZN12SimpleString15copyToNewBufferEPKcj>
 800aa92:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	4413      	add	r3, r2
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	6839      	ldr	r1, [r7, #0]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff fa3f 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff fb49 	bl	800a140 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 800aaae:	687b      	ldr	r3, [r7, #4]
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3718      	adds	r7, #24
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 800aab8:	b590      	push	{r4, r7, lr}
 800aaba:	b08b      	sub	sp, #44	; 0x2c
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	4613      	mov	r3, r2
 800aac4:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 800aac6:	68f8      	ldr	r0, [r7, #12]
 800aac8:	f7ff ff18 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800aacc:	4604      	mov	r4, r0
 800aace:	68b8      	ldr	r0, [r7, #8]
 800aad0:	f7ff ff14 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800aad4:	4603      	mov	r3, r0
 800aad6:	429c      	cmp	r4, r3
 800aad8:	bf8c      	ite	hi
 800aada:	2301      	movhi	r3, #1
 800aadc:	2300      	movls	r3, #0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	461a      	mov	r2, r3
 800aae8:	68f9      	ldr	r1, [r7, #12]
 800aaea:	68b8      	ldr	r0, [r7, #8]
 800aaec:	f7ff ffe4 	bl	800aab8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 800aaf0:	e02b      	b.n	800ab4a <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 800aaf2:	79fb      	ldrb	r3, [r7, #7]
 800aaf4:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 800aafa:	68b8      	ldr	r0, [r7, #8]
 800aafc:	f7ff fefe 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800ab00:	4604      	mov	r4, r0
 800ab02:	68f8      	ldr	r0, [r7, #12]
 800ab04:	f7ff fefa 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	1ae2      	subs	r2, r4, r3
 800ab0c:	f107 0114 	add.w	r1, r7, #20
 800ab10:	f107 0320 	add.w	r3, r7, #32
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fb75 	bl	800a204 <_ZN12SimpleStringC1EPKcj>
 800ab1a:	f107 0318 	add.w	r3, r7, #24
 800ab1e:	f107 0120 	add.w	r1, r7, #32
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	4618      	mov	r0, r3
 800ab26:	f7ff ff6c 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800ab2a:	f107 0318 	add.w	r3, r7, #24
 800ab2e:	4619      	mov	r1, r3
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff fbb8 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800ab36:	f107 0318 	add.w	r3, r7, #24
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f7ff feff 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800ab40:	f107 0320 	add.w	r3, r7, #32
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fefa 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800ab4a:	372c      	adds	r7, #44	; 0x2c
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd90      	pop	{r4, r7, pc}

0800ab50 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
 800ab5c:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 800ab5e:	68b8      	ldr	r0, [r7, #8]
 800ab60:	f7ff fecc 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800ab64:	4603      	mov	r3, r0
 800ab66:	3b01      	subs	r3, #1
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	bf8c      	ite	hi
 800ab6e:	2301      	movhi	r3, #1
 800ab70:	2300      	movls	r3, #0
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <_ZNK12SimpleString9subStringEjj+0x32>
 800ab78:	4919      	ldr	r1, [pc, #100]	; (800abe0 <_ZNK12SimpleString9subStringEjj+0x90>)
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7ff fb27 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800ab80:	e029      	b.n	800abd6 <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 800ab82:	68b8      	ldr	r0, [r7, #8]
 800ab84:	f7ff fb17 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	441a      	add	r2, r3
 800ab8e:	f107 0310 	add.w	r3, r7, #16
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7ff fb1a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 800ab9a:	f107 0310 	add.w	r3, r7, #16
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7ff feac 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800aba4:	4602      	mov	r2, r0
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	bf34      	ite	cc
 800abac:	2301      	movcc	r3, #1
 800abae:	2300      	movcs	r3, #0
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d004      	beq.n	800abc0 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	4413      	add	r3, r2
 800abbc:	2200      	movs	r2, #0
 800abbe:	701a      	strb	r2, [r3, #0]

    return newString;
 800abc0:	f107 0310 	add.w	r3, r7, #16
 800abc4:	4619      	mov	r1, r3
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7ff fb55 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 800abcc:	f107 0310 	add.w	r3, r7, #16
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff feb4 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800abd6:	68f8      	ldr	r0, [r7, #12]
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	08021338 	.word	0x08021338

0800abe4 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f04f 33ff 	mov.w	r3, #4294967295
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	68b9      	ldr	r1, [r7, #8]
 800abfa:	f7ff ffa9 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
}
 800abfe:	68f8      	ldr	r0, [r7, #12]
 800ac00:	3710      	adds	r7, #16
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b082      	sub	sp, #8
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f7ff fad0 	bl	800a1b6 <_ZNK12SimpleString9getBufferEv>
 800ac16:	4602      	mov	r2, r0
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	781b      	ldrb	r3, [r3, #0]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3708      	adds	r7, #8
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 800ac32:	78fb      	ldrb	r3, [r7, #3]
 800ac34:	461a      	mov	r2, r3
 800ac36:	2100      	movs	r1, #0
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 f805 	bl	800ac48 <_ZNK12SimpleString8findFromEjc>
 800ac3e:	4603      	mov	r3, r0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3708      	adds	r7, #8
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b086      	sub	sp, #24
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	60b9      	str	r1, [r7, #8]
 800ac52:	4613      	mov	r3, r2
 800ac54:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 800ac56:	68f8      	ldr	r0, [r7, #12]
 800ac58:	f7ff fe50 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800ac5c:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	697a      	ldr	r2, [r7, #20]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d213      	bcs.n	800ac92 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 800ac6a:	6979      	ldr	r1, [r7, #20]
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	f7ff ffca 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800ac72:	4603      	mov	r3, r0
 800ac74:	461a      	mov	r2, r3
 800ac76:	79fb      	ldrb	r3, [r7, #7]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2301      	moveq	r3, #1
 800ac7e:	2300      	movne	r3, #0
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <_ZNK12SimpleString8findFromEjc+0x42>
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	e005      	b.n	800ac96 <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	617b      	str	r3, [r7, #20]
 800ac90:	e7e7      	b.n	800ac62 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 800ac92:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3718      	adds	r7, #24
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4611      	mov	r1, r2
 800acac:	461a      	mov	r2, r3
 800acae:	460b      	mov	r3, r1
 800acb0:	71fb      	strb	r3, [r7, #7]
 800acb2:	4613      	mov	r3, r2
 800acb4:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	4619      	mov	r1, r3
 800acba:	68b8      	ldr	r0, [r7, #8]
 800acbc:	f7ff ffb3 	bl	800ac26 <_ZNK12SimpleString4findEc>
 800acc0:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc8:	d104      	bne.n	800acd4 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 800acca:	4911      	ldr	r1, [pc, #68]	; (800ad10 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff fa7e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800acd2:	e019      	b.n	800ad08 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 800acd4:	79bb      	ldrb	r3, [r7, #6]
 800acd6:	461a      	mov	r2, r3
 800acd8:	6979      	ldr	r1, [r7, #20]
 800acda:	68b8      	ldr	r0, [r7, #8]
 800acdc:	f7ff ffb4 	bl	800ac48 <_ZNK12SimpleString8findFromEjc>
 800ace0:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d106      	bne.n	800acf8 <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	68b9      	ldr	r1, [r7, #8]
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7ff ff77 	bl	800abe4 <_ZNK12SimpleString9subStringEj>
 800acf6:	e007      	b.n	800ad08 <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	68f8      	ldr	r0, [r7, #12]
 800ad00:	697a      	ldr	r2, [r7, #20]
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	f7ff ff24 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
}
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	08021338 	.word	0x08021338

0800ad14 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 800ad1e:	f240 2275 	movw	r2, #629	; 0x275
 800ad22:	490a      	ldr	r1, [pc, #40]	; (800ad4c <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 800ad24:	6838      	ldr	r0, [r7, #0]
 800ad26:	f7fe ffd7 	bl	8009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800ad2a:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 800ad2c:	683a      	ldr	r2, [r7, #0]
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f7ff f8f6 	bl	8009f22 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	4413      	add	r3, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 800ad42:	68fb      	ldr	r3, [r7, #12]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	08021278 	.word	0x08021278

0800ad50 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	4603      	mov	r3, r0
 800ad58:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	2b2f      	cmp	r3, #47	; 0x2f
 800ad5e:	d904      	bls.n	800ad6a <_ZN12SimpleString7isDigitEc+0x1a>
 800ad60:	79fb      	ldrb	r3, [r7, #7]
 800ad62:	2b39      	cmp	r3, #57	; 0x39
 800ad64:	d801      	bhi.n	800ad6a <_ZN12SimpleString7isDigitEc+0x1a>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <_ZN12SimpleString7isDigitEc+0x1c>
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	2b20      	cmp	r3, #32
 800ad86:	d005      	beq.n	800ad94 <_ZN12SimpleString7isSpaceEc+0x1c>
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b08      	cmp	r3, #8
 800ad8c:	d904      	bls.n	800ad98 <_ZN12SimpleString7isSpaceEc+0x20>
 800ad8e:	79fb      	ldrb	r3, [r7, #7]
 800ad90:	2b0d      	cmp	r3, #13
 800ad92:	d801      	bhi.n	800ad98 <_ZN12SimpleString7isSpaceEc+0x20>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <_ZN12SimpleString7isSpaceEc+0x22>
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b083      	sub	sp, #12
 800adaa:	af00      	add	r7, sp, #0
 800adac:	4603      	mov	r3, r0
 800adae:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 800adb0:	79fb      	ldrb	r3, [r7, #7]
 800adb2:	2b40      	cmp	r3, #64	; 0x40
 800adb4:	d904      	bls.n	800adc0 <_ZN12SimpleString7isUpperEc+0x1a>
 800adb6:	79fb      	ldrb	r3, [r7, #7]
 800adb8:	2b5a      	cmp	r3, #90	; 0x5a
 800adba:	d801      	bhi.n	800adc0 <_ZN12SimpleString7isUpperEc+0x1a>
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <_ZN12SimpleString7isUpperEc+0x1c>
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 800adce:	b480      	push	{r7}
 800add0:	b083      	sub	sp, #12
 800add2:	af00      	add	r7, sp, #0
 800add4:	4603      	mov	r3, r0
 800add6:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800add8:	79fb      	ldrb	r3, [r7, #7]
 800adda:	2b1f      	cmp	r3, #31
 800addc:	d902      	bls.n	800ade4 <_ZN12SimpleString9isControlEc+0x16>
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	2b7f      	cmp	r3, #127	; 0x7f
 800ade2:	d101      	bne.n	800ade8 <_ZN12SimpleString9isControlEc+0x1a>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e000      	b.n	800adea <_ZN12SimpleString9isControlEc+0x1c>
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	370c      	adds	r7, #12
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b083      	sub	sp, #12
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	4603      	mov	r3, r0
 800adfe:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 800ae00:	79fb      	ldrb	r3, [r7, #7]
 800ae02:	2b06      	cmp	r3, #6
 800ae04:	d904      	bls.n	800ae10 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	2b0d      	cmp	r3, #13
 800ae0a:	d801      	bhi.n	800ae10 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
	...

0800ae20 <_Z10StringFromb>:

SimpleString StringFrom(bool value)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <_Z10StringFromb+0x16>
 800ae32:	4a06      	ldr	r2, [pc, #24]	; (800ae4c <_Z10StringFromb+0x2c>)
 800ae34:	e000      	b.n	800ae38 <_Z10StringFromb+0x18>
 800ae36:	4a06      	ldr	r2, [pc, #24]	; (800ae50 <_Z10StringFromb+0x30>)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4906      	ldr	r1, [pc, #24]	; (800ae54 <_Z10StringFromb+0x34>)
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 fa85 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}
 800ae4a:	bf00      	nop
 800ae4c:	08021344 	.word	0x08021344
 800ae50:	0802134c 	.word	0x0802134c
 800ae54:	08021354 	.word	0x08021354

0800ae58 <_Z10StringFromPKc>:

SimpleString StringFrom(const char *value)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f7ff f9b2 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
	...

0800ae74 <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 800ae7e:	2400      	movs	r4, #0
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00e      	beq.n	800aea4 <_Z25PrintableStringFromOrNullPKc+0x30>
 800ae86:	f107 0308 	add.w	r3, r7, #8
 800ae8a:	6839      	ldr	r1, [r7, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff ffe3 	bl	800ae58 <_Z10StringFromPKc>
 800ae92:	2401      	movs	r4, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f107 0208 	add.w	r2, r7, #8
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7ff fc3f 	bl	800a720 <_ZNK12SimpleString9printableEv>
 800aea2:	e004      	b.n	800aeae <_Z25PrintableStringFromOrNullPKc+0x3a>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	4908      	ldr	r1, [pc, #32]	; (800aec8 <_Z25PrintableStringFromOrNullPKc+0x54>)
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ffd5 	bl	800ae58 <_Z10StringFromPKc>
 800aeae:	2c00      	cmp	r4, #0
 800aeb0:	d004      	beq.n	800aebc <_Z25PrintableStringFromOrNullPKc+0x48>
 800aeb2:	f107 0308 	add.w	r3, r7, #8
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f7ff fd41 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800aebc:	bf00      	nop
}
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}
 800aec6:	bf00      	nop
 800aec8:	08021358 	.word	0x08021358

0800aecc <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	4904      	ldr	r1, [pc, #16]	; (800aeec <_Z10StringFromi+0x20>)
 800aedc:	4618      	mov	r0, r3
 800aede:	f000 fa35 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	3708      	adds	r7, #8
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	08021360 	.word	0x08021360

0800aef0 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	4904      	ldr	r1, [pc, #16]	; (800af10 <_Z10StringFroml+0x20>)
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fa23 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	08021364 	.word	0x08021364

0800af14 <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b086      	sub	sp, #24
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	4910      	ldr	r1, [pc, #64]	; (800af64 <_Z10StringFromPKv+0x50>)
 800af24:	4618      	mov	r0, r3
 800af26:	f7ff f952 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800af2a:	f107 0310 	add.w	r3, r7, #16
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	4618      	mov	r0, r3
 800af32:	f000 f9a1 	bl	800b278 <_Z13HexStringFromPKv>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	f107 0210 	add.w	r2, r7, #16
 800af3c:	f107 0108 	add.w	r1, r7, #8
 800af40:	4618      	mov	r0, r3
 800af42:	f7ff fd5e 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800af46:	f107 0310 	add.w	r3, r7, #16
 800af4a:	4618      	mov	r0, r3
 800af4c:	f7ff fcf7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4618      	mov	r0, r3
 800af56:	f7ff fcf2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800af5a:	bf00      	nop
}
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	3718      	adds	r7, #24
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	08021368 	.word	0x08021368

0800af68 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 800af72:	f107 0308 	add.w	r3, r7, #8
 800af76:	4910      	ldr	r1, [pc, #64]	; (800afb8 <_Z10StringFromPFvvE+0x50>)
 800af78:	4618      	mov	r0, r3
 800af7a:	f7ff f928 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800af7e:	f107 0310 	add.w	r3, r7, #16
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 f98b 	bl	800b2a0 <_Z13HexStringFromPFvvE>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f107 0210 	add.w	r2, r7, #16
 800af90:	f107 0108 	add.w	r1, r7, #8
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fd34 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800af9a:	f107 0310 	add.w	r3, r7, #16
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fccd 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7ff fcc8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800afae:	bf00      	nop
}
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	3718      	adds	r7, #24
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	08021368 	.word	0x08021368

0800afbc <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
 800afc4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	4904      	ldr	r1, [pc, #16]	; (800afdc <_Z13HexStringFroml+0x20>)
 800afcc:	4618      	mov	r0, r3
 800afce:	f000 f9bd 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop
 800afdc:	0802136c 	.word	0x0802136c

0800afe0 <_Z13HexStringFromi>:

SimpleString HexStringFrom(int value)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	683a      	ldr	r2, [r7, #0]
 800afee:	4904      	ldr	r1, [pc, #16]	; (800b000 <_Z13HexStringFromi+0x20>)
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 f9ab 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08021370 	.word	0x08021370

0800b004 <_Z13HexStringFroma>:

SimpleString HexStringFrom(signed char value)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 800b010:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	4912      	ldr	r1, [pc, #72]	; (800b060 <_Z13HexStringFroma+0x5c>)
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 f997 	bl	800b34c <_Z16StringFromFormatPKcz>
    if(value < 0) {
 800b01e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b022:	2b00      	cmp	r3, #0
 800b024:	da16      	bge.n	800b054 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f7ff fc68 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800b02c:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	1e9a      	subs	r2, r3, #2
 800b032:	f107 030c 	add.w	r3, r7, #12
 800b036:	6879      	ldr	r1, [r7, #4]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff fdd3 	bl	800abe4 <_ZNK12SimpleString9subStringEj>
 800b03e:	f107 030c 	add.w	r3, r7, #12
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7ff f92e 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b04a:	f107 030c 	add.w	r3, r7, #12
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fc75 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
    return result;
 800b054:	bf00      	nop
}
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	08021370 	.word	0x08021370

0800b064 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	683a      	ldr	r2, [r7, #0]
 800b072:	4904      	ldr	r1, [pc, #16]	; (800b084 <_Z13HexStringFromm+0x20>)
 800b074:	4618      	mov	r0, r3
 800b076:	f000 f969 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	0802136c 	.word	0x0802136c

0800b088 <_Z13HexStringFromj>:

SimpleString HexStringFrom(unsigned int value)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%x", value);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	683a      	ldr	r2, [r7, #0]
 800b096:	4904      	ldr	r1, [pc, #16]	; (800b0a8 <_Z13HexStringFromj+0x20>)
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 f957 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	3708      	adds	r7, #8
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	08021370 	.word	0x08021370

0800b0ac <_Z30BracketsFormattedHexStringFromi>:

SimpleString BracketsFormattedHexStringFrom(int value)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b0b6:	f107 0308 	add.w	r3, r7, #8
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7ff ff8f 	bl	800afe0 <_Z13HexStringFromi>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f107 0208 	add.w	r2, r7, #8
 800b0c8:	4611      	mov	r1, r2
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f87e 	bl	800b1cc <_Z26BracketsFormattedHexString12SimpleString>
 800b0d0:	f107 0308 	add.w	r3, r7, #8
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fc32 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b0da:	bf00      	nop
}
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <_Z30BracketsFormattedHexStringFromj>:

SimpleString BracketsFormattedHexStringFrom(unsigned int value)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b0ee:	f107 0308 	add.w	r3, r7, #8
 800b0f2:	6839      	ldr	r1, [r7, #0]
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7ff ffc7 	bl	800b088 <_Z13HexStringFromj>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f107 0208 	add.w	r2, r7, #8
 800b100:	4611      	mov	r1, r2
 800b102:	4618      	mov	r0, r3
 800b104:	f000 f862 	bl	800b1cc <_Z26BracketsFormattedHexString12SimpleString>
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fc16 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b112:	bf00      	nop
}
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	3710      	adds	r7, #16
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <_Z30BracketsFormattedHexStringFroml>:

SimpleString BracketsFormattedHexStringFrom(long value)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b126:	f107 0308 	add.w	r3, r7, #8
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff ff45 	bl	800afbc <_Z13HexStringFroml>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f107 0208 	add.w	r2, r7, #8
 800b138:	4611      	mov	r1, r2
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f846 	bl	800b1cc <_Z26BracketsFormattedHexString12SimpleString>
 800b140:	f107 0308 	add.w	r3, r7, #8
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fbfa 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b14a:	bf00      	nop
}
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	3710      	adds	r7, #16
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}

0800b154 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff ff7d 	bl	800b064 <_Z13HexStringFromm>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f107 0208 	add.w	r2, r7, #8
 800b170:	4611      	mov	r1, r2
 800b172:	4618      	mov	r0, r3
 800b174:	f000 f82a 	bl	800b1cc <_Z26BracketsFormattedHexString12SimpleString>
 800b178:	f107 0308 	add.w	r3, r7, #8
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7ff fbde 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b182:	bf00      	nop
}
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	460b      	mov	r3, r1
 800b196:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 800b198:	f107 0308 	add.w	r3, r7, #8
 800b19c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800b1a0:	4611      	mov	r1, r2
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f7ff ff2e 	bl	800b004 <_Z13HexStringFroma>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f107 0208 	add.w	r2, r7, #8
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 f80b 	bl	800b1cc <_Z26BracketsFormattedHexString12SimpleString>
 800b1b6:	f107 0308 	add.w	r3, r7, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7ff fbbf 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b1c0:	bf00      	nop
}
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
	...

0800b1cc <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b088      	sub	sp, #32
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 800b1d6:	f107 0310 	add.w	r3, r7, #16
 800b1da:	4917      	ldr	r1, [pc, #92]	; (800b238 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe fff6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b1e2:	f107 0308 	add.w	r3, r7, #8
 800b1e6:	f107 0110 	add.w	r1, r7, #16
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fc08 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800b1f2:	f107 0318 	add.w	r3, r7, #24
 800b1f6:	4911      	ldr	r1, [pc, #68]	; (800b23c <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe ffe8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f107 0218 	add.w	r2, r7, #24
 800b204:	f107 0108 	add.w	r1, r7, #8
 800b208:	4618      	mov	r0, r3
 800b20a:	f7ff fbfa 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800b20e:	f107 0318 	add.w	r3, r7, #24
 800b212:	4618      	mov	r0, r3
 800b214:	f7ff fb93 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b218:	f107 0308 	add.w	r3, r7, #8
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7ff fb8e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b222:	f107 0310 	add.w	r3, r7, #16
 800b226:	4618      	mov	r0, r3
 800b228:	f7ff fb89 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b22c:	bf00      	nop
}
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	3720      	adds	r7, #32
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	08021374 	.word	0x08021374
 800b23c:	08021378 	.word	0x08021378

0800b240 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 800b240:	b480      	push	{r7}
 800b242:	b085      	sub	sp, #20
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800b248:	1d3b      	adds	r3, r7, #4
 800b24a:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
}
 800b250:	4618      	mov	r0, r3
 800b252:	3714      	adds	r7, #20
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 800b25c:	b480      	push	{r7}
 800b25e:	b085      	sub	sp, #20
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 800b264:	1d3b      	adds	r3, r7, #4
 800b266:	60fb      	str	r3, [r7, #12]
    return *long_value;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3714      	adds	r7, #20
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 800b282:	6838      	ldr	r0, [r7, #0]
 800b284:	f7ff ffdc 	bl	800b240 <_ZL25convertPointerToLongValuePKv>
 800b288:	4602      	mov	r2, r0
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4903      	ldr	r1, [pc, #12]	; (800b29c <_Z13HexStringFromPKv+0x24>)
 800b28e:	4618      	mov	r0, r3
 800b290:	f000 f85c 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}
 800b29c:	0802136c 	.word	0x0802136c

0800b2a0 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800b2aa:	6838      	ldr	r0, [r7, #0]
 800b2ac:	f7ff ffd6 	bl	800b25c <_ZL33convertFunctionPointerToLongValuePFvvE>
 800b2b0:	4602      	mov	r2, r0
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4903      	ldr	r1, [pc, #12]	; (800b2c4 <_Z13HexStringFromPFvvE+0x24>)
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 f848 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	0802136c 	.word	0x0802136c

0800b2c8 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b086      	sub	sp, #24
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	ed87 0b00 	vstr	d0, [r7]
 800b2d4:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 800b2d6:	4b18      	ldr	r3, [pc, #96]	; (800b338 <_Z10StringFromdi+0x70>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	ed97 0b00 	vldr	d0, [r7]
 800b2de:	4798      	blx	r3
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	bf14      	ite	ne
 800b2e6:	2301      	movne	r3, #1
 800b2e8:	2300      	moveq	r3, #0
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d004      	beq.n	800b2fa <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 800b2f0:	4912      	ldr	r1, [pc, #72]	; (800b33c <_Z10StringFromdi+0x74>)
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7fe ff6b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b2f8:	e01a      	b.n	800b330 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800b2fa:	4b11      	ldr	r3, [pc, #68]	; (800b340 <_Z10StringFromdi+0x78>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	ed97 0b00 	vldr	d0, [r7]
 800b302:	4798      	blx	r3
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	bf14      	ite	ne
 800b30a:	2301      	movne	r3, #1
 800b30c:	2300      	moveq	r3, #0
 800b30e:	b2db      	uxtb	r3, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	d004      	beq.n	800b31e <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 800b314:	490b      	ldr	r1, [pc, #44]	; (800b344 <_Z10StringFromdi+0x7c>)
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7fe ff59 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b31c:	e008      	b.n	800b330 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 800b31e:	68f8      	ldr	r0, [r7, #12]
 800b320:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b324:	e9cd 2300 	strd	r2, r3, [sp]
 800b328:	68ba      	ldr	r2, [r7, #8]
 800b32a:	4907      	ldr	r1, [pc, #28]	; (800b348 <_Z10StringFromdi+0x80>)
 800b32c:	f000 f80e 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	200000e4 	.word	0x200000e4
 800b33c:	080213ac 	.word	0x080213ac
 800b340:	200000e8 	.word	0x200000e8
 800b344:	080213c0 	.word	0x080213c0
 800b348:	080213d0 	.word	0x080213d0

0800b34c <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 800b34c:	b40e      	push	{r1, r2, r3}
 800b34e:	b580      	push	{r7, lr}
 800b350:	b087      	sub	sp, #28
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 800b356:	4910      	ldr	r1, [pc, #64]	; (800b398 <_Z16StringFromFormatPKcz+0x4c>)
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7fe ff38 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 800b35e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b362:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 800b364:	f107 0310 	add.w	r3, r7, #16
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b36c:	4618      	mov	r0, r3
 800b36e:	f000 f839 	bl	800b3e4 <_Z17VStringFromFormatPKcSt9__va_list>
 800b372:	f107 0310 	add.w	r3, r7, #16
 800b376:	4619      	mov	r1, r3
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7fe ff94 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b37e:	f107 0310 	add.w	r3, r7, #16
 800b382:	4618      	mov	r0, r3
 800b384:	f7ff fadb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 800b388:	bf00      	nop
}
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	371c      	adds	r7, #28
 800b38e:	46bd      	mov	sp, r7
 800b390:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b394:	b003      	add	sp, #12
 800b396:	4770      	bx	lr
 800b398:	08021338 	.word	0x08021338

0800b39c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	4904      	ldr	r1, [pc, #16]	; (800b3bc <_Z10StringFromj+0x20>)
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7ff ffcd 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	3708      	adds	r7, #8
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd80      	pop	{r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	080213dc 	.word	0x080213dc

0800b3c0 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	4904      	ldr	r1, [pc, #16]	; (800b3e0 <_Z10StringFromm+0x20>)
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f7ff ffbb 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	080213e0 	.word	0x080213e0

0800b3e4 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b0a7      	sub	sp, #156	; 0x9c
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 800b3f4:	492e      	ldr	r1, [pc, #184]	; (800b4b0 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f7fe fee9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800b3fc:	4b2d      	ldr	r3, [pc, #180]	; (800b4b4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b3fe:	681c      	ldr	r4, [r3, #0]
 800b400:	f107 0014 	add.w	r0, r7, #20
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68ba      	ldr	r2, [r7, #8]
 800b408:	2164      	movs	r1, #100	; 0x64
 800b40a:	47a0      	blx	r4
 800b40c:	4603      	mov	r3, r0
 800b40e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 800b412:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b416:	2b63      	cmp	r3, #99	; 0x63
 800b418:	d813      	bhi.n	800b442 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 800b41a:	f107 0214 	add.w	r2, r7, #20
 800b41e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b422:	4611      	mov	r1, r2
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fed2 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b42a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b42e:	4619      	mov	r1, r3
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7fe ff38 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b436:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fa7f 	bl	800a93e <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 800b440:	e031      	b.n	800b4a6 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 800b442:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b446:	3301      	adds	r3, #1
 800b448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 800b44c:	f240 32c3 	movw	r2, #963	; 0x3c3
 800b450:	4919      	ldr	r1, [pc, #100]	; (800b4b8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b452:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800b456:	f7fe fc3f 	bl	8009cd8 <_ZN12SimpleString17allocStringBufferEjPKcj>
 800b45a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 800b45e:	4b15      	ldr	r3, [pc, #84]	; (800b4b4 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800b460:	681c      	ldr	r4, [r3, #0]
 800b462:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b46a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b46e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 800b470:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b474:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe fea8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b47e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b482:	4619      	mov	r1, r3
 800b484:	68f8      	ldr	r0, [r7, #12]
 800b486:	f7fe ff0e 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b48a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b48e:	4618      	mov	r0, r3
 800b490:	f7ff fa55 	bl	800a93e <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 800b494:	f240 33c7 	movw	r3, #967	; 0x3c7
 800b498:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800b49a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b49e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800b4a2:	f7fe fc2d 	bl	8009d00 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 800b4a6:	bf00      	nop
}
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	379c      	adds	r7, #156	; 0x9c
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}
 800b4b0:	08021338 	.word	0x08021338
 800b4b4:	200000ac 	.word	0x200000ac
 800b4b8:	08021278 	.word	0x08021278

0800b4bc <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b08a      	sub	sp, #40	; 0x28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
    SimpleString result;
 800b4c8:	491f      	ldr	r1, [pc, #124]	; (800b548 <_Z16StringFromBinaryPKhj+0x8c>)
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f7fe fe7f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d219      	bcs.n	800b510 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	4413      	add	r3, r2
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	f107 0314 	add.w	r3, r7, #20
 800b4ea:	4918      	ldr	r1, [pc, #96]	; (800b54c <_Z16StringFromBinaryPKhj+0x90>)
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7ff ff2d 	bl	800b34c <_Z16StringFromFormatPKcz>
 800b4f2:	f107 0314 	add.w	r3, r7, #20
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f7ff fa9d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800b4fe:	f107 0314 	add.w	r3, r7, #20
 800b502:	4618      	mov	r0, r3
 800b504:	f7ff fa1b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 800b508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50a:	3301      	adds	r3, #1
 800b50c:	627b      	str	r3, [r7, #36]	; 0x24
 800b50e:	e7e1      	b.n	800b4d4 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 800b510:	68f8      	ldr	r0, [r7, #12]
 800b512:	f7ff f9f3 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800b516:	4603      	mov	r3, r0
 800b518:	3b01      	subs	r3, #1
 800b51a:	f107 001c 	add.w	r0, r7, #28
 800b51e:	2200      	movs	r2, #0
 800b520:	68f9      	ldr	r1, [r7, #12]
 800b522:	f7ff fb15 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 800b526:	f107 031c 	add.w	r3, r7, #28
 800b52a:	4619      	mov	r1, r3
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f7fe feba 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b532:	f107 031c 	add.w	r3, r7, #28
 800b536:	4618      	mov	r0, r3
 800b538:	f7ff fa01 	bl	800a93e <_ZN12SimpleStringD1Ev>

    return result;
 800b53c:	bf00      	nop
}
 800b53e:	68f8      	ldr	r0, [r7, #12]
 800b540:	3728      	adds	r7, #40	; 0x28
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	08021338 	.word	0x08021338
 800b54c:	080213e4 	.word	0x080213e4

0800b550 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d006      	beq.n	800b570 <_Z22StringFromBinaryOrNullPKhj+0x20>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	68b9      	ldr	r1, [r7, #8]
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff ffa7 	bl	800b4bc <_Z16StringFromBinaryPKhj>
 800b56e:	e004      	b.n	800b57a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	4904      	ldr	r1, [pc, #16]	; (800b584 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 800b574:	4618      	mov	r0, r3
 800b576:	f7ff fc6f 	bl	800ae58 <_Z10StringFromPKc>
}
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	08021358 	.word	0x08021358

0800b588 <_Z24StringFromBinaryWithSizePKhj>:

SimpleString StringFromBinaryWithSize(const unsigned char* value, size_t size)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b088      	sub	sp, #32
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	607a      	str	r2, [r7, #4]
    SimpleString result = StringFromFormat("Size = %u | HexContents = ", (unsigned) size);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	4913      	ldr	r1, [pc, #76]	; (800b5e8 <_Z24StringFromBinaryWithSizePKhj+0x60>)
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff fed6 	bl	800b34c <_Z16StringFromFormatPKcz>
    size_t displayedSize = ((size > 128) ? 128 : size);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b80      	cmp	r3, #128	; 0x80
 800b5a4:	bf28      	it	cs
 800b5a6:	2380      	movcs	r3, #128	; 0x80
 800b5a8:	61fb      	str	r3, [r7, #28]
    result += StringFromBinaryOrNull(value, displayedSize);
 800b5aa:	f107 0314 	add.w	r3, r7, #20
 800b5ae:	69fa      	ldr	r2, [r7, #28]
 800b5b0:	68b9      	ldr	r1, [r7, #8]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff ffcc 	bl	800b550 <_Z22StringFromBinaryOrNullPKhj>
 800b5b8:	f107 0314 	add.w	r3, r7, #20
 800b5bc:	4619      	mov	r1, r3
 800b5be:	68f8      	ldr	r0, [r7, #12]
 800b5c0:	f7ff fa3a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800b5c4:	f107 0314 	add.w	r3, r7, #20
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7ff f9b8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (size > displayedSize)
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d903      	bls.n	800b5de <_Z24StringFromBinaryWithSizePKhj+0x56>
    {
        result += " ...";
 800b5d6:	4905      	ldr	r1, [pc, #20]	; (800b5ec <_Z24StringFromBinaryWithSizePKhj+0x64>)
 800b5d8:	68f8      	ldr	r0, [r7, #12]
 800b5da:	f7ff fa3f 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }
    return result;
 800b5de:	bf00      	nop
}
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	3720      	adds	r7, #32
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	080213ec 	.word	0x080213ec
 800b5ec:	08021408 	.word	0x08021408

0800b5f0 <_Z30StringFromBinaryWithSizeOrNullPKhj>:

SimpleString StringFromBinaryWithSizeOrNull(const unsigned char* value, size_t size)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d006      	beq.n	800b610 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x20>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff ffbd 	bl	800b588 <_Z24StringFromBinaryWithSizePKhj>
 800b60e:	e004      	b.n	800b61a <_Z30StringFromBinaryWithSizeOrNullPKhj+0x2a>
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	4904      	ldr	r1, [pc, #16]	; (800b624 <_Z30StringFromBinaryWithSizeOrNullPKhj+0x34>)
 800b614:	4618      	mov	r0, r3
 800b616:	f7ff fc1f 	bl	800ae58 <_Z10StringFromPKc>
}
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	08021358 	.word	0x08021358

0800b628 <_Z20StringFromMaskedBitsmmj>:

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b088      	sub	sp, #32
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
 800b634:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800b636:	4925      	ldr	r1, [pc, #148]	; (800b6cc <_Z20StringFromMaskedBitsmmj+0xa4>)
 800b638:	68f8      	ldr	r0, [r7, #12]
 800b63a:	f7fe fdc8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b04      	cmp	r3, #4
 800b642:	d802      	bhi.n	800b64a <_Z20StringFromMaskedBitsmmj+0x22>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	e000      	b.n	800b64c <_Z20StringFromMaskedBitsmmj+0x24>
 800b64a:	2320      	movs	r3, #32
 800b64c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	3b01      	subs	r3, #1
 800b652:	2201      	movs	r2, #1
 800b654:	fa02 f303 	lsl.w	r3, r2, r3
 800b658:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
 800b65e:	69fa      	ldr	r2, [r7, #28]
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	429a      	cmp	r2, r3
 800b664:	d22d      	bcs.n	800b6c2 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	4013      	ands	r3, r2
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d00c      	beq.n	800b68a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	4013      	ands	r3, r2
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <_Z20StringFromMaskedBitsmmj+0x56>
 800b67a:	4b15      	ldr	r3, [pc, #84]	; (800b6d0 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800b67c:	e000      	b.n	800b680 <_Z20StringFromMaskedBitsmmj+0x58>
 800b67e:	4b15      	ldr	r3, [pc, #84]	; (800b6d4 <_Z20StringFromMaskedBitsmmj+0xac>)
 800b680:	4619      	mov	r1, r3
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f7ff f9ea 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
 800b688:	e003      	b.n	800b692 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800b68a:	4913      	ldr	r1, [pc, #76]	; (800b6d8 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f7ff f9e5 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	f003 0307 	and.w	r3, r3, #7
 800b698:	2b07      	cmp	r3, #7
 800b69a:	d108      	bne.n	800b6ae <_Z20StringFromMaskedBitsmmj+0x86>
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	3b01      	subs	r3, #1
 800b6a0:	69fa      	ldr	r2, [r7, #28]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d003      	beq.n	800b6ae <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 800b6a6:	490d      	ldr	r1, [pc, #52]	; (800b6dc <_Z20StringFromMaskedBitsmmj+0xb4>)
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff f9d7 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	005b      	lsls	r3, r3, #1
 800b6b8:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	61fb      	str	r3, [r7, #28]
 800b6c0:	e7cd      	b.n	800b65e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 800b6c2:	bf00      	nop
}
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08021338 	.word	0x08021338
 800b6d0:	08021410 	.word	0x08021410
 800b6d4:	08021414 	.word	0x08021414
 800b6d8:	08021418 	.word	0x08021418
 800b6dc:	0802141c 	.word	0x0802141c

0800b6e0 <_Z23StringFromOrdinalNumberj>:

SimpleString StringFromOrdinalNumber(unsigned int number)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
    unsigned int onesDigit = number % 10;
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	4b18      	ldr	r3, [pc, #96]	; (800b750 <_Z23StringFromOrdinalNumberj+0x70>)
 800b6ee:	fba3 1302 	umull	r1, r3, r3, r2
 800b6f2:	08d9      	lsrs	r1, r3, #3
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	440b      	add	r3, r1
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	60bb      	str	r3, [r7, #8]

    const char* suffix;
    if (number >= 11 && number <= 13) {
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	2b0a      	cmp	r3, #10
 800b704:	d905      	bls.n	800b712 <_Z23StringFromOrdinalNumberj+0x32>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b0d      	cmp	r3, #13
 800b70a:	d802      	bhi.n	800b712 <_Z23StringFromOrdinalNumberj+0x32>
        suffix = "th";
 800b70c:	4b11      	ldr	r3, [pc, #68]	; (800b754 <_Z23StringFromOrdinalNumberj+0x74>)
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	e013      	b.n	800b73a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (3 == onesDigit) {
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	2b03      	cmp	r3, #3
 800b716:	d102      	bne.n	800b71e <_Z23StringFromOrdinalNumberj+0x3e>
        suffix = "rd";
 800b718:	4b0f      	ldr	r3, [pc, #60]	; (800b758 <_Z23StringFromOrdinalNumberj+0x78>)
 800b71a:	60fb      	str	r3, [r7, #12]
 800b71c:	e00d      	b.n	800b73a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (2 == onesDigit) {
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	2b02      	cmp	r3, #2
 800b722:	d102      	bne.n	800b72a <_Z23StringFromOrdinalNumberj+0x4a>
        suffix = "nd";
 800b724:	4b0d      	ldr	r3, [pc, #52]	; (800b75c <_Z23StringFromOrdinalNumberj+0x7c>)
 800b726:	60fb      	str	r3, [r7, #12]
 800b728:	e007      	b.n	800b73a <_Z23StringFromOrdinalNumberj+0x5a>
    } else if (1 == onesDigit) {
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d102      	bne.n	800b736 <_Z23StringFromOrdinalNumberj+0x56>
        suffix = "st";
 800b730:	4b0b      	ldr	r3, [pc, #44]	; (800b760 <_Z23StringFromOrdinalNumberj+0x80>)
 800b732:	60fb      	str	r3, [r7, #12]
 800b734:	e001      	b.n	800b73a <_Z23StringFromOrdinalNumberj+0x5a>
    } else {
        suffix = "th";
 800b736:	4b07      	ldr	r3, [pc, #28]	; (800b754 <_Z23StringFromOrdinalNumberj+0x74>)
 800b738:	60fb      	str	r3, [r7, #12]
    }

    return StringFromFormat("%u%s", number, suffix);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4908      	ldr	r1, [pc, #32]	; (800b764 <_Z23StringFromOrdinalNumberj+0x84>)
 800b742:	f7ff fe03 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	cccccccd 	.word	0xcccccccd
 800b754:	08021420 	.word	0x08021420
 800b758:	08021424 	.word	0x08021424
 800b75c:	08021428 	.word	0x08021428
 800b760:	0802142c 	.word	0x0802142c
 800b764:	08021430 	.word	0x08021430

0800b768 <_ZN22SimpleStringCollectionC1Ev>:

SimpleStringCollection::SimpleStringCollection()
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	3304      	adds	r3, #4
 800b774:	4907      	ldr	r1, [pc, #28]	; (800b794 <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 800b776:	4618      	mov	r0, r3
 800b778:	f7fe fd29 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	601a      	str	r2, [r3, #0]
    size_ = 0;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	60da      	str	r2, [r3, #12]
}
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4618      	mov	r0, r3
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	08021338 	.word	0x08021338

0800b798 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 800b798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d01e      	beq.n	800b7e8 <_ZN22SimpleStringCollection8allocateEj+0x50>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	3b04      	subs	r3, #4
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	00db      	lsls	r3, r3, #3
 800b7b8:	18d4      	adds	r4, r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429c      	cmp	r4, r3
 800b7c0:	d004      	beq.n	800b7cc <_ZN22SimpleStringCollection8allocateEj+0x34>
 800b7c2:	3c08      	subs	r4, #8
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	f7ff f8ba 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b7ca:	e7f6      	b.n	800b7ba <_ZN22SimpleStringCollection8allocateEj+0x22>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f1a3 0208 	sub.w	r2, r3, #8
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3b04      	subs	r3, #4
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	00db      	lsls	r3, r3, #3
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f7fc f976 	bl	8007ad4 <_ZdaPvj>

    size_ = _size;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	683a      	ldr	r2, [r7, #0]
 800b7ec:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	68dc      	ldr	r4, [r3, #12]
 800b7f2:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800b7f6:	d202      	bcs.n	800b7fe <_ZN22SimpleStringCollection8allocateEj+0x66>
 800b7f8:	1c63      	adds	r3, r4, #1
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	e001      	b.n	800b802 <_ZN22SimpleStringCollection8allocateEj+0x6a>
 800b7fe:	f04f 33ff 	mov.w	r3, #4294967295
 800b802:	f240 4227 	movw	r2, #1063	; 0x427
 800b806:	4910      	ldr	r1, [pc, #64]	; (800b848 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 800b808:	4618      	mov	r0, r3
 800b80a:	f7fc f941 	bl	8007a90 <_ZnajPKci>
 800b80e:	4605      	mov	r5, r0
 800b810:	1d2b      	adds	r3, r5, #4
 800b812:	3b04      	subs	r3, #4
 800b814:	2208      	movs	r2, #8
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	1d2b      	adds	r3, r5, #4
 800b81a:	601c      	str	r4, [r3, #0]
 800b81c:	f105 0308 	add.w	r3, r5, #8
 800b820:	1e62      	subs	r2, r4, #1
 800b822:	4614      	mov	r4, r2
 800b824:	461e      	mov	r6, r3
 800b826:	2c00      	cmp	r4, #0
 800b828:	db06      	blt.n	800b838 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 800b82a:	4908      	ldr	r1, [pc, #32]	; (800b84c <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 800b82c:	4630      	mov	r0, r6
 800b82e:	f7fe fcce 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b832:	3608      	adds	r6, #8
 800b834:	3c01      	subs	r4, #1
 800b836:	e7f6      	b.n	800b826 <_ZN22SimpleStringCollection8allocateEj+0x8e>
 800b838:	f105 0208 	add.w	r2, r5, #8
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	601a      	str	r2, [r3, #0]
}
 800b840:	bf00      	nop
 800b842:	370c      	adds	r7, #12
 800b844:	46bd      	mov	sp, r7
 800b846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b848:	08021278 	.word	0x08021278
 800b84c:	08021338 	.word	0x08021338

0800b850 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d01e      	beq.n	800b89e <_ZN22SimpleStringCollectionD1Ev+0x4e>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3b04      	subs	r3, #4
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	00db      	lsls	r3, r3, #3
 800b86e:	18d4      	adds	r4, r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	429c      	cmp	r4, r3
 800b876:	d004      	beq.n	800b882 <_ZN22SimpleStringCollectionD1Ev+0x32>
 800b878:	3c08      	subs	r4, #8
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff f85f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b880:	e7f6      	b.n	800b870 <_ZN22SimpleStringCollectionD1Ev+0x20>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f1a3 0208 	sub.w	r2, r3, #8
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	3b04      	subs	r3, #4
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3301      	adds	r3, #1
 800b894:	00db      	lsls	r3, r3, #3
 800b896:	4619      	mov	r1, r3
 800b898:	4610      	mov	r0, r2
 800b89a:	f7fc f91b 	bl	8007ad4 <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7ff f84b 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	370c      	adds	r7, #12
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}

0800b8b2 <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b083      	sub	sp, #12
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
    return size_;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
	...

0800b8cc <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d315      	bcc.n	800b90c <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	1d1c      	adds	r4, r3, #4
 800b8e4:	f107 0308 	add.w	r3, r7, #8
 800b8e8:	490d      	ldr	r1, [pc, #52]	; (800b920 <_ZN22SimpleStringCollectionixEj+0x54>)
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7fe fc6f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7fe fcd5 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800b8fc:	f107 0308 	add.w	r3, r7, #8
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff f81c 	bl	800a93e <_ZN12SimpleStringD1Ev>
        return empty_;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	3304      	adds	r3, #4
 800b90a:	e004      	b.n	800b916 <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	00db      	lsls	r3, r3, #3
 800b914:	4413      	add	r3, r2
}
 800b916:	4618      	mov	r0, r3
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd90      	pop	{r4, r7, pc}
 800b91e:	bf00      	nop
 800b920:	08021338 	.word	0x08021338

0800b924 <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4618      	mov	r0, r3
 800b930:	f7fa fb88 	bl	8006044 <_ZN17ConsoleTestOutputC1Ev>
 800b934:	4a08      	ldr	r2, [pc, #32]	; (800b958 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	601a      	str	r2, [r3, #0]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	611a      	str	r2, [r3, #16]
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3314      	adds	r3, #20
 800b944:	4905      	ldr	r1, [pc, #20]	; (800b95c <_ZN18TeamCityTestOutputC1Ev+0x38>)
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fc41 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
{
}
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	4618      	mov	r0, r3
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	080245c4 	.word	0x080245c4
 800b95c:	08021438 	.word	0x08021438

0800b960 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	4a08      	ldr	r2, [pc, #32]	; (800b98c <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	601a      	str	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3314      	adds	r3, #20
 800b972:	4618      	mov	r0, r3
 800b974:	f7fe ffe3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7fa fb74 	bl	8006068 <_ZN17ConsoleTestOutputD1Ev>
{
}
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	4618      	mov	r0, r3
 800b984:	3708      	adds	r7, #8
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	080245c4 	.word	0x080245c4

0800b990 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
}
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7ff ffe1 	bl	800b960 <_ZN18TeamCityTestOutputD1Ev>
 800b99e:	211c      	movs	r1, #28
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f7fc f865 	bl	8007a70 <_ZdlPvj>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	332c      	adds	r3, #44	; 0x2c
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	492b      	ldr	r1, [pc, #172]	; (800ba74 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 800b9ca:	f107 0308 	add.w	r3, r7, #8
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f004 fdf7 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800b9d6:	f107 0308 	add.w	r3, r7, #8
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe ff82 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f919 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800b9ea:	f107 0308 	add.w	r3, r7, #8
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe ffa5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	332c      	adds	r3, #44	; 0x2c
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	491e      	ldr	r1, [pc, #120]	; (800ba78 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800ba00:	4610      	mov	r0, r2
 800ba02:	4798      	blx	r3
    if (!test.willRun()) {
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3318      	adds	r3, #24
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6838      	ldr	r0, [r7, #0]
 800ba0e:	4798      	blx	r3
 800ba10:	4603      	mov	r3, r0
 800ba12:	f083 0301 	eor.w	r3, r3, #1
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d024      	beq.n	800ba66 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	332c      	adds	r3, #44	; 0x2c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4915      	ldr	r1, [pc, #84]	; (800ba7c <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 800ba28:	4610      	mov	r0, r2
 800ba2a:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 800ba2c:	f107 0310 	add.w	r3, r7, #16
 800ba30:	6839      	ldr	r1, [r7, #0]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f004 fdc6 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800ba38:	f107 0310 	add.w	r3, r7, #16
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe ff51 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800ba42:	4603      	mov	r3, r0
 800ba44:	4619      	mov	r1, r3
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 f8e8 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800ba4c:	f107 0310 	add.w	r3, r7, #16
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe ff74 	bl	800a93e <_ZN12SimpleStringD1Ev>
        print("']\n");
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	332c      	adds	r3, #44	; 0x2c
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4905      	ldr	r1, [pc, #20]	; (800ba78 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 800ba62:	4610      	mov	r0, r2
 800ba64:	4798      	blx	r3
    }
    currtest_ = &test;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	611a      	str	r2, [r3, #16]
}
 800ba6c:	bf00      	nop
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	0802143c 	.word	0x0802143c
 800ba78:	0802145c 	.word	0x0802145c
 800ba7c:	08021460 	.word	0x08021460

0800ba80 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800ba80:	b5b0      	push	{r4, r5, r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d03b      	beq.n	800bb0a <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	332c      	adds	r3, #44	; 0x2c
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	491d      	ldr	r1, [pc, #116]	; (800bb14 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 800ba9e:	4610      	mov	r0, r2
 800baa0:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691a      	ldr	r2, [r3, #16]
 800baa6:	f107 0308 	add.w	r3, r7, #8
 800baaa:	4611      	mov	r1, r2
 800baac:	4618      	mov	r0, r3
 800baae:	f004 fd89 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800bab2:	f107 0308 	add.w	r3, r7, #8
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fe ff14 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800babc:	4603      	mov	r3, r0
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f8ab 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bac6:	f107 0308 	add.w	r3, r7, #8
 800baca:	4618      	mov	r0, r3
 800bacc:	f7fe ff37 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print("' duration='");
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	332c      	adds	r3, #44	; 0x2c
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	490f      	ldr	r1, [pc, #60]	; (800bb18 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 800badc:	4610      	mov	r0, r2
 800bade:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 800bae0:	687d      	ldr	r5, [r7, #4]
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	3334      	adds	r3, #52	; 0x34
 800bae8:	681c      	ldr	r4, [r3, #0]
 800baea:	6838      	ldr	r0, [r7, #0]
 800baec:	f004 fa0a 	bl	800ff04 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800baf0:	4603      	mov	r3, r0
 800baf2:	4619      	mov	r1, r3
 800baf4:	4628      	mov	r0, r5
 800baf6:	47a0      	blx	r4
    print("']\n");
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	332c      	adds	r3, #44	; 0x2c
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	4906      	ldr	r1, [pc, #24]	; (800bb1c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 800bb04:	4610      	mov	r0, r2
 800bb06:	4798      	blx	r3
 800bb08:	e000      	b.n	800bb0c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 800bb0a:	bf00      	nop
}
 800bb0c:	3710      	adds	r7, #16
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bdb0      	pop	{r4, r5, r7, pc}
 800bb12:	bf00      	nop
 800bb14:	08021480 	.word	0x08021480
 800bb18:	080214a0 	.word	0x080214a0
 800bb1c:	0802145c 	.word	0x0802145c

0800bb20 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f103 0414 	add.w	r4, r3, #20
 800bb30:	f107 0308 	add.w	r3, r7, #8
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	4618      	mov	r0, r3
 800bb38:	f004 fd53 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800bb3c:	f107 0308 	add.w	r3, r7, #8
 800bb40:	4619      	mov	r1, r3
 800bb42:	4620      	mov	r0, r4
 800bb44:	f7fe fbaf 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800bb48:	f107 0308 	add.w	r3, r7, #8
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe fef6 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 800bb52:	687a      	ldr	r2, [r7, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	332c      	adds	r3, #44	; 0x2c
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	490c      	ldr	r1, [pc, #48]	; (800bb90 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 800bb5e:	4610      	mov	r0, r2
 800bb60:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	3314      	adds	r3, #20
 800bb66:	4618      	mov	r0, r3
 800bb68:	f7fe febc 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f853 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	332c      	adds	r3, #44	; 0x2c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4904      	ldr	r1, [pc, #16]	; (800bb94 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 800bb82:	4610      	mov	r0, r2
 800bb84:	4798      	blx	r3
}
 800bb86:	bf00      	nop
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd90      	pop	{r4, r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	080214b0 	.word	0x080214b0
 800bb94:	0802145c 	.word	0x0802145c

0800bb98 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800bb98:	b590      	push	{r4, r7, lr}
 800bb9a:	b085      	sub	sp, #20
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f103 0414 	add.w	r4, r3, #20
 800bba8:	f107 0308 	add.w	r3, r7, #8
 800bbac:	4918      	ldr	r1, [pc, #96]	; (800bc10 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fb0d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800bbb4:	f107 0308 	add.w	r3, r7, #8
 800bbb8:	4619      	mov	r1, r3
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f7fe fecb 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	f107 0308 	add.w	r3, r7, #8
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe feb8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800bbce:	2c00      	cmp	r4, #0
 800bbd0:	d11a      	bne.n	800bc08 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	332c      	adds	r3, #44	; 0x2c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	490d      	ldr	r1, [pc, #52]	; (800bc14 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 800bbde:	4610      	mov	r0, r2
 800bbe0:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	3314      	adds	r3, #20
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fe fe7c 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800bbec:	4603      	mov	r3, r0
 800bbee:	4619      	mov	r1, r3
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 f813 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	332c      	adds	r3, #44	; 0x2c
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4905      	ldr	r1, [pc, #20]	; (800bc18 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 800bc02:	4610      	mov	r0, r2
 800bc04:	4798      	blx	r3
 800bc06:	e000      	b.n	800bc0a <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 800bc08:	bf00      	nop
}
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd90      	pop	{r4, r7, pc}
 800bc10:	08021438 	.word	0x08021438
 800bc14:	080214d4 	.word	0x080214d4
 800bc18:	0802145c 	.word	0x0802145c

0800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
    while (*s) {
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d03f      	beq.n	800bcae <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b27      	cmp	r3, #39	; 0x27
 800bc34:	d00b      	beq.n	800bc4e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	2b7c      	cmp	r3, #124	; 0x7c
 800bc3c:	d007      	beq.n	800bc4e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b5b      	cmp	r3, #91	; 0x5b
 800bc44:	d003      	beq.n	800bc4e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	2b5d      	cmp	r3, #93	; 0x5d
 800bc4c:	d107      	bne.n	800bc5e <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 800bc4e:	237c      	movs	r3, #124	; 0x7c
 800bc50:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	73bb      	strb	r3, [r7, #14]
 800bc5c:	e01a      	b.n	800bc94 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b0d      	cmp	r3, #13
 800bc64:	d106      	bne.n	800bc74 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 800bc66:	237c      	movs	r3, #124	; 0x7c
 800bc68:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 800bc6a:	2372      	movs	r3, #114	; 0x72
 800bc6c:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73bb      	strb	r3, [r7, #14]
 800bc72:	e00f      	b.n	800bc94 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	2b0a      	cmp	r3, #10
 800bc7a:	d106      	bne.n	800bc8a <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 800bc7c:	237c      	movs	r3, #124	; 0x7c
 800bc7e:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 800bc80:	236e      	movs	r3, #110	; 0x6e
 800bc82:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	73bb      	strb	r3, [r7, #14]
 800bc88:	e004      	b.n	800bc94 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 800bc90:	2300      	movs	r3, #0
 800bc92:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 800bc94:	687a      	ldr	r2, [r7, #4]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3328      	adds	r3, #40	; 0x28
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f107 010c 	add.w	r1, r7, #12
 800bca2:	4610      	mov	r0, r2
 800bca4:	4798      	blx	r3
        s++;
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	603b      	str	r3, [r7, #0]
    while (*s) {
 800bcac:	e7bb      	b.n	800bc26 <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 800bcae:	bf00      	nop
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
	...

0800bcb8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 800bcb8:	b5b0      	push	{r4, r5, r7, lr}
 800bcba:	b08a      	sub	sp, #40	; 0x28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	332c      	adds	r3, #44	; 0x2c
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4968      	ldr	r1, [pc, #416]	; (800be70 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 800bcce:	4610      	mov	r0, r2
 800bcd0:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	3310      	adds	r3, #16
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f107 0208 	add.w	r2, r7, #8
 800bcde:	6839      	ldr	r1, [r7, #0]
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
 800bce4:	f107 0308 	add.w	r3, r7, #8
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7fe fdfb 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ff92 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f7fe fe1e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print("' message='");
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	332c      	adds	r3, #44	; 0x2c
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4959      	ldr	r1, [pc, #356]	; (800be74 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 800bd0e:	4610      	mov	r0, r2
 800bd10:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 800bd12:	6838      	ldr	r0, [r7, #0]
 800bd14:	f000 fa15 	bl	800c142 <_ZNK11TestFailure17isOutsideTestFileEv>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d105      	bne.n	800bd2a <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 800bd1e:	6838      	ldr	r0, [r7, #0]
 800bd20:	f000 fa21 	bl	800c166 <_ZNK11TestFailure18isInHelperFunctionEv>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d001      	beq.n	800bd2e <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	e000      	b.n	800bd30 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 800bd2e:	2300      	movs	r3, #0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d042      	beq.n	800bdba <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	332c      	adds	r3, #44	; 0x2c
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	494e      	ldr	r1, [pc, #312]	; (800be78 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 800bd40:	4610      	mov	r0, r2
 800bd42:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 800bd44:	687d      	ldr	r5, [r7, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	332c      	adds	r3, #44	; 0x2c
 800bd4c:	681c      	ldr	r4, [r3, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	331c      	adds	r3, #28
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f107 0210 	add.w	r2, r7, #16
 800bd5a:	6839      	ldr	r1, [r7, #0]
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	f107 0310 	add.w	r3, r7, #16
 800bd64:	4618      	mov	r0, r3
 800bd66:	f7fe fdbd 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4628      	mov	r0, r5
 800bd70:	47a0      	blx	r4
 800bd72:	f107 0310 	add.w	r3, r7, #16
 800bd76:	4618      	mov	r0, r3
 800bd78:	f7fe fde1 	bl	800a93e <_ZN12SimpleStringD1Ev>
        print(":");
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	332c      	adds	r3, #44	; 0x2c
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	493d      	ldr	r1, [pc, #244]	; (800be7c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
        print(failure.getTestLineNumber());
 800bd8c:	687d      	ldr	r5, [r7, #4]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3334      	adds	r3, #52	; 0x34
 800bd94:	681c      	ldr	r4, [r3, #0]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	3320      	adds	r3, #32
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	6838      	ldr	r0, [r7, #0]
 800bda0:	4798      	blx	r3
 800bda2:	4603      	mov	r3, r0
 800bda4:	4619      	mov	r1, r3
 800bda6:	4628      	mov	r0, r5
 800bda8:	47a0      	blx	r4
        print("): ");
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	332c      	adds	r3, #44	; 0x2c
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4932      	ldr	r1, [pc, #200]	; (800be80 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3308      	adds	r3, #8
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f107 0218 	add.w	r2, r7, #24
 800bdc6:	6839      	ldr	r1, [r7, #0]
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4798      	blx	r3
 800bdcc:	f107 0318 	add.w	r3, r7, #24
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fe fd87 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f7ff ff1e 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800bde0:	f107 0318 	add.w	r3, r7, #24
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe fdaa 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print(":");
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	332c      	adds	r3, #44	; 0x2c
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4921      	ldr	r1, [pc, #132]	; (800be7c <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 800bdfa:	687d      	ldr	r5, [r7, #4]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	3334      	adds	r3, #52	; 0x34
 800be02:	681c      	ldr	r4, [r3, #0]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	3314      	adds	r3, #20
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6838      	ldr	r0, [r7, #0]
 800be0e:	4798      	blx	r3
 800be10:	4603      	mov	r3, r0
 800be12:	4619      	mov	r1, r3
 800be14:	4628      	mov	r0, r5
 800be16:	47a0      	blx	r4

    print("' details='");
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	332c      	adds	r3, #44	; 0x2c
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4918      	ldr	r1, [pc, #96]	; (800be84 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3318      	adds	r3, #24
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f107 0220 	add.w	r2, r7, #32
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	4610      	mov	r0, r2
 800be38:	4798      	blx	r3
 800be3a:	f107 0320 	add.w	r3, r7, #32
 800be3e:	4618      	mov	r0, r3
 800be40:	f7fe fd50 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800be44:	4603      	mov	r3, r0
 800be46:	4619      	mov	r1, r3
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f7ff fee7 	bl	800bc1c <_ZN18TeamCityTestOutput12printEscapedEPKc>
 800be4e:	f107 0320 	add.w	r3, r7, #32
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe fd73 	bl	800a93e <_ZN12SimpleStringD1Ev>
    print("']\n");
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	332c      	adds	r3, #44	; 0x2c
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4909      	ldr	r1, [pc, #36]	; (800be88 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 800be64:	4610      	mov	r0, r2
 800be66:	4798      	blx	r3
}
 800be68:	bf00      	nop
 800be6a:	3728      	adds	r7, #40	; 0x28
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bdb0      	pop	{r4, r5, r7, pc}
 800be70:	080214f8 	.word	0x080214f8
 800be74:	08021518 	.word	0x08021518
 800be78:	08021524 	.word	0x08021524
 800be7c:	08021534 	.word	0x08021534
 800be80:	08021538 	.word	0x08021538
 800be84:	0802153c 	.word	0x0802153c
 800be88:	0802145c 	.word	0x0802145c

0800be8c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 800be98:	4a1a      	ldr	r2, [pc, #104]	; (800bf04 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	3314      	adds	r3, #20
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	3204      	adds	r2, #4
 800beaa:	68b9      	ldr	r1, [r7, #8]
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	330c      	adds	r3, #12
 800beb4:	68b9      	ldr	r1, [r7, #8]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f004 fb84 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3314      	adds	r3, #20
 800bec0:	68b9      	ldr	r1, [r7, #8]
 800bec2:	4618      	mov	r0, r3
 800bec4:	f004 fc4f 	bl	8010766 <_ZNK10UtestShell7getFileEv>
 800bec8:	68b8      	ldr	r0, [r7, #8]
 800beca:	f004 fc5b 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 800bece:	4602      	mov	r2, r0
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	61da      	str	r2, [r3, #28]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	3320      	adds	r3, #32
 800bed8:	68b9      	ldr	r1, [r7, #8]
 800beda:	4618      	mov	r0, r3
 800bedc:	f004 fc43 	bl	8010766 <_ZNK10UtestShell7getFileEv>
 800bee0:	68b8      	ldr	r0, [r7, #8]
 800bee2:	f004 fc4f 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 800bee6:	4602      	mov	r2, r0
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	629a      	str	r2, [r3, #40]	; 0x28
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	332c      	adds	r3, #44	; 0x2c
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe f9bf 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
{
}
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	08024890 	.word	0x08024890

0800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60f8      	str	r0, [r7, #12]
 800bf10:	60b9      	str	r1, [r7, #8]
 800bf12:	607a      	str	r2, [r7, #4]
 800bf14:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 800bf16:	4a19      	ldr	r2, [pc, #100]	; (800bf7c <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	601a      	str	r2, [r3, #0]
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3314      	adds	r3, #20
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68fa      	ldr	r2, [r7, #12]
 800bf26:	3204      	adds	r2, #4
 800bf28:	68b9      	ldr	r1, [r7, #8]
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	4798      	blx	r3
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	330c      	adds	r3, #12
 800bf32:	68b9      	ldr	r1, [r7, #8]
 800bf34:	4618      	mov	r0, r3
 800bf36:	f004 fb45 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	3314      	adds	r3, #20
 800bf3e:	6879      	ldr	r1, [r7, #4]
 800bf40:	4618      	mov	r0, r3
 800bf42:	f7fe f944 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	683a      	ldr	r2, [r7, #0]
 800bf4a:	61da      	str	r2, [r3, #28]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3320      	adds	r3, #32
 800bf50:	68b9      	ldr	r1, [r7, #8]
 800bf52:	4618      	mov	r0, r3
 800bf54:	f004 fc07 	bl	8010766 <_ZNK10UtestShell7getFileEv>
 800bf58:	68b8      	ldr	r0, [r7, #8]
 800bf5a:	f004 fc13 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 800bf5e:	4602      	mov	r2, r0
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	629a      	str	r2, [r3, #40]	; 0x28
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	332c      	adds	r3, #44	; 0x2c
 800bf68:	4905      	ldr	r1, [pc, #20]	; (800bf80 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe f92f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
{
}
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	08024890 	.word	0x08024890
 800bf80:	08021548 	.word	0x08021548

0800bf84 <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 800bf8e:	4a1e      	ldr	r2, [pc, #120]	; (800c008 <_ZN11TestFailureC1ERKS_+0x84>)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	601a      	str	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	1d1a      	adds	r2, r3, #4
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	3304      	adds	r3, #4
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	f7fe f969 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f103 020c 	add.w	r2, r3, #12
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	330c      	adds	r3, #12
 800bfae:	4619      	mov	r1, r3
 800bfb0:	4610      	mov	r0, r2
 800bfb2:	f7fe f960 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f103 0214 	add.w	r2, r3, #20
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	3314      	adds	r3, #20
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	4610      	mov	r0, r2
 800bfc4:	f7fe f957 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	69da      	ldr	r2, [r3, #28]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	61da      	str	r2, [r3, #28]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f103 0220 	add.w	r2, r3, #32
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	3320      	adds	r3, #32
 800bfda:	4619      	mov	r1, r3
 800bfdc:	4610      	mov	r0, r2
 800bfde:	f7fe f94a 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	629a      	str	r2, [r3, #40]	; 0x28
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	332c      	adds	r3, #44	; 0x2c
 800bff4:	4619      	mov	r1, r3
 800bff6:	4610      	mov	r0, r2
 800bff8:	f7fe f93d 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
{
}
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08024890 	.word	0x08024890

0800c00c <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	4a10      	ldr	r2, [pc, #64]	; (800c058 <_ZN11TestFailureD1Ev+0x4c>)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	601a      	str	r2, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	332c      	adds	r3, #44	; 0x2c
 800c01e:	4618      	mov	r0, r3
 800c020:	f7fe fc8d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	3320      	adds	r3, #32
 800c028:	4618      	mov	r0, r3
 800c02a:	f7fe fc88 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3314      	adds	r3, #20
 800c032:	4618      	mov	r0, r3
 800c034:	f7fe fc83 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	330c      	adds	r3, #12
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe fc7e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	3304      	adds	r3, #4
 800c046:	4618      	mov	r0, r3
 800c048:	f7fe fc79 	bl	800a93e <_ZN12SimpleStringD1Ev>
{
}
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4618      	mov	r0, r3
 800c050:	3708      	adds	r7, #8
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	08024890 	.word	0x08024890

0800c05c <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b082      	sub	sp, #8
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
}
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f7ff ffd1 	bl	800c00c <_ZN11TestFailureD1Ev>
 800c06a:	2134      	movs	r1, #52	; 0x34
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f7fb fcff 	bl	8007a70 <_ZdlPvj>
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	4618      	mov	r0, r3
 800c076:	3708      	adds	r7, #8
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
    return fileName_;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	3314      	adds	r3, #20
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f7fe f8f2 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b082      	sub	sp, #8
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	3320      	adds	r3, #32
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7fe f8e3 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	3708      	adds	r7, #8
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b082      	sub	sp, #8
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
    return testName_;
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f7fe f8d4 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b082      	sub	sp, #8
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	6078      	str	r0, [r7, #4]
 800c0de:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	330c      	adds	r3, #12
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f7fe f8c5 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	69db      	ldr	r3, [r3, #28]
}
 800c100:	4618      	mov	r0, r3
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
    return message_;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	332c      	adds	r3, #44	; 0x2c
 800c132:	4619      	mov	r1, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7fe f89e 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	3708      	adds	r7, #8
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b082      	sub	sp, #8
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f103 0220 	add.w	r2, r3, #32
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3314      	adds	r3, #20
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	f7fe fc42 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 800c15c:	4603      	mov	r3, r0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 800c166:	b480      	push	{r7}
 800c168:	b083      	sub	sp, #12
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	69da      	ldr	r2, [r3, #28]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	429a      	cmp	r2, r3
 800c178:	bf34      	ite	cc
 800c17a:	2301      	movcc	r3, #1
 800c17c:	2300      	movcs	r3, #0
 800c17e:	b2db      	uxtb	r3, r3
}
 800c180:	4618      	mov	r0, r3
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr

0800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 800c18c:	b590      	push	{r4, r7, lr}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
 800c198:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7fe fba2 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	6838      	ldr	r0, [r7, #0]
 800c1a4:	f7fe fb9e 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	4622      	mov	r2, r4
 800c1ae:	4903      	ldr	r1, [pc, #12]	; (800c1bc <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 800c1b0:	f7ff f8cc 	bl	800b34c <_Z16StringFromFormatPKcz>
}
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd90      	pop	{r4, r7, pc}
 800c1bc:	08021554 	.word	0x08021554

0800c1c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 800c1c0:	b590      	push	{r4, r7, lr}
 800c1c2:	b097      	sub	sp, #92	; 0x5c
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
 800c1cc:	603b      	str	r3, [r7, #0]
    SimpleString result;
 800c1ce:	494c      	ldr	r1, [pc, #304]	; (800c300 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7fd fffc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800c1d6:	2314      	movs	r3, #20
 800c1d8:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 800c1da:	230a      	movs	r3, #10
 800c1dc:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800c1de:	f107 0320 	add.w	r3, r7, #32
 800c1e2:	220a      	movs	r2, #10
 800c1e4:	4947      	ldr	r1, [pc, #284]	; (800c304 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f7fe f80c 	bl	800a204 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800c1ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c1f0:	f107 0120 	add.w	r1, r7, #32
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fc03 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c1fc:	f107 0318 	add.w	r3, r7, #24
 800c200:	f107 0220 	add.w	r2, r7, #32
 800c204:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c208:	4618      	mov	r0, r3
 800c20a:	f7fe fbfa 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c20e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c212:	4618      	mov	r0, r3
 800c214:	f7fe fb93 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800c218:	f107 0310 	add.w	r3, r7, #16
 800c21c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c21e:	493a      	ldr	r1, [pc, #232]	; (800c308 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 800c220:	4618      	mov	r0, r3
 800c222:	f7ff f893 	bl	800b34c <_Z16StringFromFormatPKcz>

    result += "\n";
 800c226:	4939      	ldr	r1, [pc, #228]	; (800c30c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f7fe fc17 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 800c22e:	f107 0310 	add.w	r3, r7, #16
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fb56 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c238:	4604      	mov	r4, r0
 800c23a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800c23e:	f107 0118 	add.w	r1, r7, #24
 800c242:	2314      	movs	r3, #20
 800c244:	683a      	ldr	r2, [r7, #0]
 800c246:	f7fe fc83 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 800c24a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fb48 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c254:	4603      	mov	r3, r0
 800c256:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c25a:	4622      	mov	r2, r4
 800c25c:	492c      	ldr	r1, [pc, #176]	; (800c310 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 800c25e:	f7ff f875 	bl	800b34c <_Z16StringFromFormatPKcz>
 800c262:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c266:	4619      	mov	r1, r3
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7fe fbe5 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c26e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fb63 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7fe fb5e 	bl	800a93e <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 800c282:	f107 0310 	add.w	r3, r7, #16
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fb38 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800c28c:	4603      	mov	r3, r0
 800c28e:	f103 020a 	add.w	r2, r3, #10
 800c292:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c296:	491b      	ldr	r1, [pc, #108]	; (800c304 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800c298:	4618      	mov	r0, r3
 800c29a:	f7fd ffb3 	bl	800a204 <_ZN12SimpleStringC1EPKcj>
 800c29e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe fb1e 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c2ae:	4919      	ldr	r1, [pc, #100]	; (800c314 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff f84b 	bl	800b34c <_Z16StringFromFormatPKcz>
 800c2b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7fe fbbb 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c2c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f7fe fb39 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c2cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7fe fb34 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return result;
 800c2d6:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 800c2d8:	f107 0310 	add.w	r3, r7, #16
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fe fb2e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800c2e2:	f107 0318 	add.w	r3, r7, #24
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7fe fb29 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 800c2ec:	f107 0320 	add.w	r3, r7, #32
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe fb24 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return result;
 800c2f6:	bf00      	nop
}
 800c2f8:	68f8      	ldr	r0, [r7, #12]
 800c2fa:	375c      	adds	r7, #92	; 0x5c
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd90      	pop	{r4, r7, pc}
 800c300:	08021574 	.word	0x08021574
 800c304:	08021578 	.word	0x08021578
 800c308:	0802157c 	.word	0x0802157c
 800c30c:	080215a4 	.word	0x080215a4
 800c310:	080215a8 	.word	0x080215a8
 800c314:	080215b0 	.word	0x080215b0

0800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 800c318:	b590      	push	{r4, r7, lr}
 800c31a:	b087      	sub	sp, #28
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800c324:	491a      	ldr	r1, [pc, #104]	; (800c390 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f7fd ff51 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7fe faf5 	bl	800a91c <_ZNK12SimpleString7isEmptyEv>
 800c332:	4603      	mov	r3, r0
 800c334:	f083 0301 	eor.w	r3, r3, #1
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d022      	beq.n	800c384 <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 800c33e:	f107 0310 	add.w	r3, r7, #16
 800c342:	4914      	ldr	r1, [pc, #80]	; (800c394 <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 800c344:	4618      	mov	r0, r3
 800c346:	f7fd ff42 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800c34a:	f107 0310 	add.w	r3, r7, #16
 800c34e:	4619      	mov	r1, r3
 800c350:	6878      	ldr	r0, [r7, #4]
 800c352:	f7fe f800 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 800c356:	4603      	mov	r3, r0
 800c358:	f083 0301 	eor.w	r3, r3, #1
 800c35c:	b2dc      	uxtb	r4, r3
 800c35e:	f107 0310 	add.w	r3, r7, #16
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe faeb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c368:	2c00      	cmp	r4, #0
 800c36a:	d003      	beq.n	800c374 <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 800c36c:	490a      	ldr	r1, [pc, #40]	; (800c398 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7fe fb74 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 800c374:	6879      	ldr	r1, [r7, #4]
 800c376:	68f8      	ldr	r0, [r7, #12]
 800c378:	f7fe fb5e 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 800c37c:	4907      	ldr	r1, [pc, #28]	; (800c39c <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f7fe fb6c 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 800c384:	bf00      	nop
}
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	371c      	adds	r7, #28
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd90      	pop	{r4, r7, pc}
 800c38e:	bf00      	nop
 800c390:	08021574 	.word	0x08021574
 800c394:	080215b8 	.word	0x080215b8
 800c398:	080215c4 	.word	0x080215c4
 800c39c:	080215d0 	.word	0x080215d0

0800c3a0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c3a0:	b590      	push	{r4, r7, lr}
 800c3a2:	b089      	sub	sp, #36	; 0x24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	60f8      	str	r0, [r7, #12]
 800c3a8:	60b9      	str	r1, [r7, #8]
 800c3aa:	607a      	str	r2, [r7, #4]
 800c3ac:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	68b9      	ldr	r1, [r7, #8]
 800c3b6:	f7ff fda7 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c3ba:	4a19      	ldr	r2, [pc, #100]	; (800c420 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c3c6:	68f9      	ldr	r1, [r7, #12]
 800c3c8:	f107 0310 	add.w	r3, r7, #16
 800c3cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7ff ffa2 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c3d4:	f107 0310 	add.w	r3, r7, #16
 800c3d8:	4619      	mov	r1, r3
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f7fd ff63 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c3e0:	f107 0310 	add.w	r3, r7, #16
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7fe faaa 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c3f0:	68f9      	ldr	r1, [r7, #12]
 800c3f2:	f107 0018 	add.w	r0, r7, #24
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3fa:	f7ff fec7 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c3fe:	f107 0318 	add.w	r3, r7, #24
 800c402:	4619      	mov	r1, r3
 800c404:	4620      	mov	r0, r4
 800c406:	f7fe fb17 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c40a:	f107 0318 	add.w	r3, r7, #24
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe fa95 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	4618      	mov	r0, r3
 800c418:	3724      	adds	r7, #36	; 0x24
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd90      	pop	{r4, r7, pc}
 800c41e:	bf00      	nop
 800c420:	08024864 	.word	0x08024864

0800c424 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800c424:	b5b0      	push	{r4, r5, r7, lr}
 800c426:	b094      	sub	sp, #80	; 0x50
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6278      	str	r0, [r7, #36]	; 0x24
 800c42c:	6239      	str	r1, [r7, #32]
 800c42e:	61fa      	str	r2, [r7, #28]
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	ed87 0b04 	vstr	d0, [r7, #16]
 800c436:	ed87 1b02 	vstr	d1, [r7, #8]
 800c43a:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 800c43e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c440:	69bb      	ldr	r3, [r7, #24]
 800c442:	69fa      	ldr	r2, [r7, #28]
 800c444:	6a39      	ldr	r1, [r7, #32]
 800c446:	f7ff fd5f 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c44a:	4a4a      	ldr	r2, [pc, #296]	; (800c574 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c456:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c45c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c45e:	4618      	mov	r0, r3
 800c460:	f7ff ff5a 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c464:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c468:	4619      	mov	r1, r3
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7fd ff1b 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c470:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fa62 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c480:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 800c482:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c486:	2107      	movs	r1, #7
 800c488:	ed97 0b04 	vldr	d0, [r7, #16]
 800c48c:	4618      	mov	r0, r3
 800c48e:	f7fe ff1b 	bl	800b2c8 <_Z10StringFromdi>
 800c492:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c496:	2107      	movs	r1, #7
 800c498:	ed97 0b02 	vldr	d0, [r7, #8]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fe ff13 	bl	800b2c8 <_Z10StringFromdi>
 800c4a2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c4a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c4aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	f7ff fe6c 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c4b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4b8:	4619      	mov	r1, r3
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f7fe fabc 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c4c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fe fa3a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c4ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fe fa35 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c4d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7fe fa30 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	332c      	adds	r3, #44	; 0x2c
 800c4e2:	4925      	ldr	r1, [pc, #148]	; (800c578 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fab9 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ec:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c4f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4f4:	2107      	movs	r1, #7
 800c4f6:	ed97 0b00 	vldr	d0, [r7]
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7fe fee4 	bl	800b2c8 <_Z10StringFromdi>
 800c500:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c504:	4619      	mov	r1, r3
 800c506:	4620      	mov	r0, r4
 800c508:	f7fe fa96 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c50c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c510:	4618      	mov	r0, r3
 800c512:	f7fe fa14 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	332c      	adds	r3, #44	; 0x2c
 800c51a:	4918      	ldr	r1, [pc, #96]	; (800c57c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7fe fa9d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800c522:	4b17      	ldr	r3, [pc, #92]	; (800c580 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	ed97 0b04 	vldr	d0, [r7, #16]
 800c52a:	4798      	blx	r3
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10f      	bne.n	800c552 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c532:	4b13      	ldr	r3, [pc, #76]	; (800c580 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	ed97 0b02 	vldr	d0, [r7, #8]
 800c53a:	4798      	blx	r3
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d107      	bne.n	800c552 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 800c542:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	ed97 0b00 	vldr	d0, [r7]
 800c54a:	4798      	blx	r3
 800c54c:	4603      	mov	r3, r0
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d001      	beq.n	800c556 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 800c552:	2301      	movs	r3, #1
 800c554:	e000      	b.n	800c558 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 800c556:	2300      	movs	r3, #0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d005      	beq.n	800c568 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	332c      	adds	r3, #44	; 0x2c
 800c560:	4908      	ldr	r1, [pc, #32]	; (800c584 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe fa7a 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
}
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	4618      	mov	r0, r3
 800c56c:	3750      	adds	r7, #80	; 0x50
 800c56e:	46bd      	mov	sp, r7
 800c570:	bdb0      	pop	{r4, r5, r7, pc}
 800c572:	bf00      	nop
 800c574:	08024838 	.word	0x08024838
 800c578:	080215d4 	.word	0x080215d4
 800c57c:	080215ec 	.word	0x080215ec
 800c580:	200000e4 	.word	0x200000e4
 800c584:	080215f0 	.word	0x080215f0

0800c588 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c588:	b590      	push	{r4, r7, lr}
 800c58a:	b093      	sub	sp, #76	; 0x4c
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c596:	68f8      	ldr	r0, [r7, #12]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	68b9      	ldr	r1, [r7, #8]
 800c59e:	f7ff fcb3 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c5a2:	4a4f      	ldr	r2, [pc, #316]	; (800c6e0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c5ae:	68f9      	ldr	r1, [r7, #12]
 800c5b0:	f107 0320 	add.w	r3, r7, #32
 800c5b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7ff feae 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c5bc:	f107 0320 	add.w	r3, r7, #32
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f7fd fe6f 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c5c8:	f107 0320 	add.w	r3, r7, #32
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fe f9b6 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c5d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c5d4:	f7fe f986 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c5d8:	4602      	mov	r2, r0
 800c5da:	f107 0318 	add.w	r3, r7, #24
 800c5de:	4611      	mov	r1, r2
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7fe fc47 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c5e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c5e8:	f7fe f97c 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	f107 0310 	add.w	r3, r7, #16
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fe fc3d 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c600:	68f9      	ldr	r1, [r7, #12]
 800c602:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800c606:	f107 0310 	add.w	r3, r7, #16
 800c60a:	f107 0218 	add.w	r2, r7, #24
 800c60e:	f7ff fdbd 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800c612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c616:	4619      	mov	r1, r3
 800c618:	4620      	mov	r0, r4
 800c61a:	f7fe fa0d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c61e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c622:	4618      	mov	r0, r3
 800c624:	f7fe f98b 	bl	800a93e <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 800c628:	2300      	movs	r3, #0
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c62e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c630:	f7fe fae9 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800c634:	4603      	mov	r3, r0
 800c636:	461c      	mov	r4, r3
 800c638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c63a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c63c:	f7fe fae3 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800c640:	4603      	mov	r3, r0
 800c642:	429c      	cmp	r4, r3
 800c644:	bf0c      	ite	eq
 800c646:	2301      	moveq	r3, #1
 800c648:	2300      	movne	r3, #0
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d003      	beq.n	800c658 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 800c650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c652:	3301      	adds	r3, #1
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c656:	e7e9      	b.n	800c62c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800c658:	2300      	movs	r3, #0
 800c65a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c65c:	f107 0310 	add.w	r3, r7, #16
 800c660:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c662:	4618      	mov	r0, r3
 800c664:	f7fe facf 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800c668:	4603      	mov	r3, r0
 800c66a:	461c      	mov	r4, r3
 800c66c:	f107 0318 	add.w	r3, r7, #24
 800c670:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c672:	4618      	mov	r0, r3
 800c674:	f7fe fac7 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800c678:	4603      	mov	r3, r0
 800c67a:	429c      	cmp	r4, r3
 800c67c:	bf0c      	ite	eq
 800c67e:	2301      	moveq	r3, #1
 800c680:	2300      	movne	r3, #0
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b00      	cmp	r3, #0
 800c686:	d003      	beq.n	800c690 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	3301      	adds	r3, #1
 800c68c:	63bb      	str	r3, [r7, #56]	; 0x38
 800c68e:	e7e5      	b.n	800c65c <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c696:	68f9      	ldr	r1, [r7, #12]
 800c698:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c69c:	f107 0210 	add.w	r2, r7, #16
 800c6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	f7ff fd8b 	bl	800c1c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800c6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	f7fe f9c1 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c6b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fe f93f 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800c6c0:	f107 0310 	add.w	r3, r7, #16
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7fe f93a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800c6ca:	f107 0318 	add.w	r3, r7, #24
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe f935 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3744      	adds	r7, #68	; 0x44
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	0802480c 	.word	0x0802480c

0800c6e4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800c6e4:	b590      	push	{r4, r7, lr}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c6f2:	68f8      	ldr	r0, [r7, #12]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	f7ff fc05 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c6fe:	4a1a      	ldr	r2, [pc, #104]	; (800c768 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c70a:	68f9      	ldr	r1, [r7, #12]
 800c70c:	f107 0310 	add.w	r3, r7, #16
 800c710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff fe00 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c718:	f107 0310 	add.w	r3, r7, #16
 800c71c:	4619      	mov	r1, r3
 800c71e:	4620      	mov	r0, r4
 800c720:	f7fd fdc1 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c724:	f107 0310 	add.w	r3, r7, #16
 800c728:	4618      	mov	r0, r3
 800c72a:	f7fe f908 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	332c      	adds	r3, #44	; 0x2c
 800c732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c734:	4618      	mov	r0, r3
 800c736:	f7fe f97f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	332c      	adds	r3, #44	; 0x2c
 800c73e:	490b      	ldr	r1, [pc, #44]	; (800c76c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe f98b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	332c      	adds	r3, #44	; 0x2c
 800c74a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7fe f973 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	332c      	adds	r3, #44	; 0x2c
 800c756:	4906      	ldr	r1, [pc, #24]	; (800c770 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c758:	4618      	mov	r0, r3
 800c75a:	f7fe f97f 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
}
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	4618      	mov	r0, r3
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	bd90      	pop	{r4, r7, pc}
 800c768:	080247e0 	.word	0x080247e0
 800c76c:	08021614 	.word	0x08021614
 800c770:	08021618 	.word	0x08021618

0800c774 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 800c774:	b5b0      	push	{r4, r5, r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c782:	68f8      	ldr	r0, [r7, #12]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	68b9      	ldr	r1, [r7, #8]
 800c78a:	f7ff fbbd 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c78e:	4a1c      	ldr	r2, [pc, #112]	; (800c800 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c79a:	68f9      	ldr	r1, [r7, #12]
 800c79c:	f107 0310 	add.w	r3, r7, #16
 800c7a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	f7ff fdb8 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c7a8:	f107 0310 	add.w	r3, r7, #16
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f7fd fd79 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c7b4:	f107 0310 	add.w	r3, r7, #16
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f7fe f8c0 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c7c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c7c6:	f7fe f88d 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c7ca:	4605      	mov	r5, r0
 800c7cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7ce:	f7fe f889 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	f107 0018 	add.w	r0, r7, #24
 800c7d8:	462a      	mov	r2, r5
 800c7da:	490a      	ldr	r1, [pc, #40]	; (800c804 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 800c7dc:	f7fe fdb6 	bl	800b34c <_Z16StringFromFormatPKcz>
 800c7e0:	f107 0318 	add.w	r3, r7, #24
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	4620      	mov	r0, r4
 800c7e8:	f7fe f926 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800c7ec:	f107 0318 	add.w	r3, r7, #24
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe f8a4 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c800:	080247b4 	.word	0x080247b4
 800c804:	08021624 	.word	0x08021624

0800c808 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 800c808:	b590      	push	{r4, r7, lr}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
 800c814:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	68b9      	ldr	r1, [r7, #8]
 800c81e:	f7ff fb73 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c822:	4a1a      	ldr	r2, [pc, #104]	; (800c88c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c82e:	68f9      	ldr	r1, [r7, #12]
 800c830:	f107 0310 	add.w	r3, r7, #16
 800c834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fd6e 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c83c:	f107 0310 	add.w	r3, r7, #16
 800c840:	4619      	mov	r1, r3
 800c842:	4620      	mov	r0, r4
 800c844:	f7fd fd2f 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c848:	f107 0310 	add.w	r3, r7, #16
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fe f876 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	332c      	adds	r3, #44	; 0x2c
 800c856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c858:	4618      	mov	r0, r3
 800c85a:	f7fe f8ed 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	332c      	adds	r3, #44	; 0x2c
 800c862:	490b      	ldr	r1, [pc, #44]	; (800c890 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe f8f9 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	332c      	adds	r3, #44	; 0x2c
 800c86e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c870:	4618      	mov	r0, r3
 800c872:	f7fe f8e1 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	332c      	adds	r3, #44	; 0x2c
 800c87a:	4906      	ldr	r1, [pc, #24]	; (800c894 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7fe f8ed 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
}
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	4618      	mov	r0, r3
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd90      	pop	{r4, r7, pc}
 800c88c:	08024788 	.word	0x08024788
 800c890:	08021614 	.word	0x08021614
 800c894:	08021618 	.word	0x08021618

0800c898 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	687a      	ldr	r2, [r7, #4]
 800c8ac:	68b9      	ldr	r1, [r7, #8]
 800c8ae:	f7ff fb2b 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c8b2:	4a07      	ldr	r2, [pc, #28]	; (800c8d0 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	332c      	adds	r3, #44	; 0x2c
 800c8bc:	69b9      	ldr	r1, [r7, #24]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7fd fcf1 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
}
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	08024444 	.word	0x08024444

0800c8d4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800c8d4:	b590      	push	{r4, r7, lr}
 800c8d6:	b09d      	sub	sp, #116	; 0x74
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
 800c8e0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800c8e2:	68f8      	ldr	r0, [r7, #12]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	68b9      	ldr	r1, [r7, #8]
 800c8ea:	f7ff fb0d 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800c8ee:	4a5d      	ldr	r2, [pc, #372]	; (800ca64 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800c8fa:	68f9      	ldr	r1, [r7, #12]
 800c8fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c900:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c904:	4618      	mov	r0, r3
 800c906:	f7ff fd07 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800c90a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c90e:	4619      	mov	r1, r3
 800c910:	4620      	mov	r0, r4
 800c912:	f7fd fcc8 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800c916:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe f80f 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800c920:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c924:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fae1 	bl	800aef0 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 800c92e:	f107 0320 	add.w	r3, r7, #32
 800c932:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c936:	4618      	mov	r0, r3
 800c938:	f7fe fada 	bl	800aef0 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800c93c:	f107 0120 	add.w	r1, r7, #32
 800c940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c944:	2220      	movs	r2, #32
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe f8b6 	bl	800aab8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800c94c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c950:	4945      	ldr	r1, [pc, #276]	; (800ca68 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c952:	4618      	mov	r0, r3
 800c954:	f7fd fc3b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800c958:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c95c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800c960:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c964:	4618      	mov	r0, r3
 800c966:	f7fe f84c 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c96a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c96e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fbd2 	bl	800b11c <_Z30BracketsFormattedHexStringFroml>
 800c978:	f107 0318 	add.w	r3, r7, #24
 800c97c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c980:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800c984:	4618      	mov	r0, r3
 800c986:	f7fe f83c 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c98a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c98e:	4618      	mov	r0, r3
 800c990:	f7fd ffd5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c994:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fd ffd0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c99e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fd ffcb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800c9a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c9ac:	492e      	ldr	r1, [pc, #184]	; (800ca68 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fd fc0d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800c9b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c9b8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9bc:	f107 0120 	add.w	r1, r7, #32
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fe f81e 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c9c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c9ca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7fe fba4 	bl	800b11c <_Z30BracketsFormattedHexStringFroml>
 800c9d4:	f107 0310 	add.w	r3, r7, #16
 800c9d8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800c9dc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f7fe f80e 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800c9e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fd ffa7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c9f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fd ffa2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800c9fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fd ff9d 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca0a:	68f9      	ldr	r1, [r7, #12]
 800ca0c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800ca10:	f107 0318 	add.w	r3, r7, #24
 800ca14:	f107 0210 	add.w	r2, r7, #16
 800ca18:	f7ff fbb8 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ca1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ca20:	4619      	mov	r1, r3
 800ca22:	4620      	mov	r0, r4
 800ca24:	f7fe f808 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800ca28:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fd ff86 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ca32:	f107 0310 	add.w	r3, r7, #16
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fd ff81 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800ca3c:	f107 0318 	add.w	r3, r7, #24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fd ff7c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800ca46:	f107 0320 	add.w	r3, r7, #32
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fd ff77 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800ca50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ca54:	4618      	mov	r0, r3
 800ca56:	f7fd ff72 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	3774      	adds	r7, #116	; 0x74
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd90      	pop	{r4, r7, pc}
 800ca64:	0802475c 	.word	0x0802475c
 800ca68:	08021578 	.word	0x08021578

0800ca6c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b09d      	sub	sp, #116	; 0x74
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800ca7a:	68f8      	ldr	r0, [r7, #12]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	f7ff fa41 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800ca86:	4a5d      	ldr	r2, [pc, #372]	; (800cbfc <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ca92:	68f9      	ldr	r1, [r7, #12]
 800ca94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ca98:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7ff fc3b 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800caa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800caa6:	4619      	mov	r1, r3
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7fd fbfc 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800caae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7fd ff43 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 800cab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cabc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7fe fc7d 	bl	800b3c0 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 800cac6:	f107 0320 	add.w	r3, r7, #32
 800caca:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe fc76 	bl	800b3c0 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800cad4:	f107 0120 	add.w	r1, r7, #32
 800cad8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cadc:	2220      	movs	r2, #32
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fd ffea 	bl	800aab8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cae4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cae8:	4945      	ldr	r1, [pc, #276]	; (800cc00 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd fb6f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800caf0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800caf4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800caf8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fd ff80 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cb02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb06:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fb22 	bl	800b154 <_Z30BracketsFormattedHexStringFromm>
 800cb10:	f107 0318 	add.w	r3, r7, #24
 800cb14:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cb18:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fd ff70 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cb22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb26:	4618      	mov	r0, r3
 800cb28:	f7fd ff09 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cb2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cb30:	4618      	mov	r0, r3
 800cb32:	f7fd ff04 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cb36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7fd feff 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cb40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb44:	492e      	ldr	r1, [pc, #184]	; (800cc00 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fd fb41 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800cb4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cb50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cb54:	f107 0120 	add.w	r1, r7, #32
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7fd ff52 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cb5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cb62:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7fe faf4 	bl	800b154 <_Z30BracketsFormattedHexStringFromm>
 800cb6c:	f107 0310 	add.w	r3, r7, #16
 800cb70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cb74:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fd ff42 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cb7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fd fedb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cb88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7fd fed6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cb92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cb96:	4618      	mov	r0, r3
 800cb98:	f7fd fed1 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800cba8:	f107 0318 	add.w	r3, r7, #24
 800cbac:	f107 0210 	add.w	r2, r7, #16
 800cbb0:	f7ff faec 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cbb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7fd ff3c 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800cbc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fd feba 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cbca:	f107 0310 	add.w	r3, r7, #16
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7fd feb5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cbd4:	f107 0318 	add.w	r3, r7, #24
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7fd feb0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 800cbde:	f107 0320 	add.w	r3, r7, #32
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fd feab 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 800cbe8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7fd fea6 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3774      	adds	r7, #116	; 0x74
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd90      	pop	{r4, r7, pc}
 800cbfc:	08024730 	.word	0x08024730
 800cc00:	08021578 	.word	0x08021578

0800cc04 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 800cc04:	b590      	push	{r4, r7, lr}
 800cc06:	b09d      	sub	sp, #116	; 0x74
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	607a      	str	r2, [r7, #4]
 800cc10:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	687a      	ldr	r2, [r7, #4]
 800cc18:	68b9      	ldr	r1, [r7, #8]
 800cc1a:	f7ff f975 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cc1e:	4a5f      	ldr	r2, [pc, #380]	; (800cd9c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cc2a:	68f9      	ldr	r1, [r7, #12]
 800cc2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc30:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff fb6f 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cc3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc3e:	4619      	mov	r1, r3
 800cc40:	4620      	mov	r0, r4
 800cc42:	f7fd fb30 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800cc46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fd fe77 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 800cc50:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800cc54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe f936 	bl	800aecc <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 800cc60:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800cc64:	f107 0320 	add.w	r3, r7, #32
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7fe f92e 	bl	800aecc <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 800cc70:	f107 0120 	add.w	r1, r7, #32
 800cc74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cc78:	2220      	movs	r2, #32
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fd ff1c 	bl	800aab8 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cc80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800cc84:	4946      	ldr	r1, [pc, #280]	; (800cda0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fd faa1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800cc8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800cc90:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800cc94:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fd feb2 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cc9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cca2:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fe fa6f 	bl	800b18c <_Z30BracketsFormattedHexStringFroma>
 800ccae:	f107 0318 	add.w	r3, r7, #24
 800ccb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ccb6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fd fea1 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800ccc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f7fd fe3a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800ccca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fd fe35 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800ccd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f7fd fe30 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800ccde:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cce2:	492f      	ldr	r1, [pc, #188]	; (800cda0 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 800cce4:	4618      	mov	r0, r3
 800cce6:	f7fd fa72 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800ccea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ccee:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ccf2:	f107 0120 	add.w	r1, r7, #32
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fd fe83 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800ccfc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cd00:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 800cd04:	4611      	mov	r1, r2
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7fe fa40 	bl	800b18c <_Z30BracketsFormattedHexStringFroma>
 800cd0c:	f107 0310 	add.w	r3, r7, #16
 800cd10:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800cd14:	f107 0150 	add.w	r1, r7, #80	; 0x50
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7fd fe72 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 800cd1e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800cd22:	4618      	mov	r0, r3
 800cd24:	f7fd fe0b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cd28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fd fe06 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800cd32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fd fe01 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cd42:	68f9      	ldr	r1, [r7, #12]
 800cd44:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800cd48:	f107 0318 	add.w	r3, r7, #24
 800cd4c:	f107 0210 	add.w	r2, r7, #16
 800cd50:	f7ff fa1c 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cd54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cd58:	4619      	mov	r1, r3
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7fd fe6c 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800cd60:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fd fdea 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 800cd6a:	f107 0310 	add.w	r3, r7, #16
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fd fde5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 800cd74:	f107 0318 	add.w	r3, r7, #24
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7fd fde0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 800cd7e:	f107 0320 	add.w	r3, r7, #32
 800cd82:	4618      	mov	r0, r3
 800cd84:	f7fd fddb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 800cd88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7fd fdd6 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	4618      	mov	r0, r3
 800cd96:	3774      	adds	r7, #116	; 0x74
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}
 800cd9c:	08024704 	.word	0x08024704
 800cda0:	08021578 	.word	0x08021578

0800cda4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b093      	sub	sp, #76	; 0x4c
 800cda8:	af02      	add	r7, sp, #8
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	68b9      	ldr	r1, [r7, #8]
 800cdba:	f7ff f8a5 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cdbe:	4a4a      	ldr	r2, [pc, #296]	; (800cee8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cdca:	68f9      	ldr	r1, [r7, #12]
 800cdcc:	f107 0320 	add.w	r3, r7, #32
 800cdd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7ff faa0 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cdd8:	f107 0320 	add.w	r3, r7, #32
 800cddc:	4619      	mov	r1, r3
 800cdde:	4620      	mov	r0, r4
 800cde0:	f7fd fa61 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800cde4:	f107 0320 	add.w	r3, r7, #32
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fd fda8 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cdee:	f107 0318 	add.w	r3, r7, #24
 800cdf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f7fe f83d 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cdfa:	f107 0310 	add.w	r3, r7, #16
 800cdfe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7fe f837 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce0c:	68f9      	ldr	r1, [r7, #12]
 800ce0e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ce12:	f107 0310 	add.w	r3, r7, #16
 800ce16:	f107 0218 	add.w	r2, r7, #24
 800ce1a:	f7ff f9b7 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800ce1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce22:	4619      	mov	r1, r3
 800ce24:	4620      	mov	r0, r4
 800ce26:	f7fd fe07 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800ce2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fd fd85 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800ce34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d046      	beq.n	800cec8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d043      	beq.n	800cec8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800ce40:	2300      	movs	r3, #0
 800ce42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce48:	4413      	add	r3, r2
 800ce4a:	781a      	ldrb	r2, [r3, #0]
 800ce4c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce50:	440b      	add	r3, r1
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d103      	bne.n	800ce60 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 800ce58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce5a:	3301      	adds	r3, #1
 800ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce5e:	e7f1      	b.n	800ce44 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 800ce60:	2300      	movs	r3, #0
 800ce62:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce64:	f107 0310 	add.w	r3, r7, #16
 800ce68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fd fecb 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800ce70:	4603      	mov	r3, r0
 800ce72:	461c      	mov	r4, r3
 800ce74:	f107 0318 	add.w	r3, r7, #24
 800ce78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fd fec3 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800ce80:	4603      	mov	r3, r0
 800ce82:	429c      	cmp	r4, r3
 800ce84:	bf0c      	ite	eq
 800ce86:	2301      	moveq	r3, #1
 800ce88:	2300      	movne	r3, #0
 800ce8a:	b2db      	uxtb	r3, r3
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d003      	beq.n	800ce98 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	3301      	adds	r3, #1
 800ce94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ce96:	e7e5      	b.n	800ce64 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800cea4:	f107 0210 	add.w	r2, r7, #16
 800cea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceaa:	9300      	str	r3, [sp, #0]
 800ceac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceae:	f7ff f987 	bl	800c1c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800ceb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	4620      	mov	r0, r4
 800ceba:	f7fd fdbd 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800cebe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fd fd3b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cec8:	f107 0310 	add.w	r3, r7, #16
 800cecc:	4618      	mov	r0, r3
 800cece:	f7fd fd36 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800ced2:	f107 0318 	add.w	r3, r7, #24
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fd fd31 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
}
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	4618      	mov	r0, r3
 800cee0:	3744      	adds	r7, #68	; 0x44
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd90      	pop	{r4, r7, pc}
 800cee6:	bf00      	nop
 800cee8:	080246d8 	.word	0x080246d8

0800ceec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 800ceec:	b590      	push	{r4, r7, lr}
 800ceee:	b093      	sub	sp, #76	; 0x4c
 800cef0:	af02      	add	r7, sp, #8
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800cefa:	68f8      	ldr	r0, [r7, #12]
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	68b9      	ldr	r1, [r7, #8]
 800cf02:	f7ff f801 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800cf06:	4a55      	ldr	r2, [pc, #340]	; (800d05c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	f107 0320 	add.w	r3, r7, #32
 800cf18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7ff f9fc 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800cf20:	f107 0320 	add.w	r3, r7, #32
 800cf24:	4619      	mov	r1, r3
 800cf26:	4620      	mov	r0, r4
 800cf28:	f7fd f9bd 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800cf2c:	f107 0320 	add.w	r3, r7, #32
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fd fd04 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800cf36:	f107 0318 	add.w	r3, r7, #24
 800cf3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fd ff99 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800cf42:	f107 0310 	add.w	r3, r7, #16
 800cf46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fd ff93 	bl	800ae74 <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800cf54:	68f9      	ldr	r1, [r7, #12]
 800cf56:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cf5a:	f107 0310 	add.w	r3, r7, #16
 800cf5e:	f107 0218 	add.w	r2, r7, #24
 800cf62:	f7ff f913 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800cf66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf6a:	4619      	mov	r1, r3
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7fd fd63 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800cf72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf76:	4618      	mov	r0, r3
 800cf78:	f7fd fce1 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 800cf7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d05c      	beq.n	800d03c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 800cf82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d059      	beq.n	800d03c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf90:	4413      	add	r3, r2
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd f824 	bl	8009fe2 <_ZN12SimpleString7ToLowerEc>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	461c      	mov	r4, r3
 800cf9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfa2:	4413      	add	r3, r2
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f7fd f81b 	bl	8009fe2 <_ZN12SimpleString7ToLowerEc>
 800cfac:	4603      	mov	r3, r0
 800cfae:	429c      	cmp	r4, r3
 800cfb0:	bf0c      	ite	eq
 800cfb2:	2301      	moveq	r3, #1
 800cfb4:	2300      	movne	r3, #0
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d003      	beq.n	800cfc4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cfc2:	e7e3      	b.n	800cf8c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 800cfc8:	f107 0310 	add.w	r3, r7, #16
 800cfcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f7fd fe19 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7fd f803 	bl	8009fe2 <_ZN12SimpleString7ToLowerEc>
 800cfdc:	4603      	mov	r3, r0
 800cfde:	461c      	mov	r4, r3
 800cfe0:	f107 0318 	add.w	r3, r7, #24
 800cfe4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7fd fe0d 	bl	800ac06 <_ZNK12SimpleString2atEj>
 800cfec:	4603      	mov	r3, r0
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fc fff7 	bl	8009fe2 <_ZN12SimpleString7ToLowerEc>
 800cff4:	4603      	mov	r3, r0
 800cff6:	429c      	cmp	r4, r3
 800cff8:	bf0c      	ite	eq
 800cffa:	2301      	moveq	r3, #1
 800cffc:	2300      	movne	r3, #0
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800d004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d006:	3301      	adds	r3, #1
 800d008:	63bb      	str	r3, [r7, #56]	; 0x38
 800d00a:	e7dd      	b.n	800cfc8 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d012:	68f9      	ldr	r1, [r7, #12]
 800d014:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800d018:	f107 0210 	add.w	r2, r7, #16
 800d01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01e:	9300      	str	r3, [sp, #0]
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	f7ff f8cd 	bl	800c1c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d02a:	4619      	mov	r1, r3
 800d02c:	4620      	mov	r0, r4
 800d02e:	f7fd fd03 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800d032:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d036:	4618      	mov	r0, r3
 800d038:	f7fd fc81 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 800d03c:	f107 0310 	add.w	r3, r7, #16
 800d040:	4618      	mov	r0, r3
 800d042:	f7fd fc7c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 800d046:	f107 0318 	add.w	r3, r7, #24
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fd fc77 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
}
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	4618      	mov	r0, r3
 800d054:	3744      	adds	r7, #68	; 0x44
 800d056:	46bd      	mov	sp, r7
 800d058:	bd90      	pop	{r4, r7, pc}
 800d05a:	bf00      	nop
 800d05c:	080246ac 	.word	0x080246ac

0800d060 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 800d060:	b5b0      	push	{r4, r5, r7, lr}
 800d062:	b092      	sub	sp, #72	; 0x48
 800d064:	af02      	add	r7, sp, #8
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	607a      	str	r2, [r7, #4]
 800d06c:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	f7fe ff47 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d07a:	4a40      	ldr	r2, [pc, #256]	; (800d17c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d086:	68f9      	ldr	r1, [r7, #12]
 800d088:	f107 031c 	add.w	r3, r7, #28
 800d08c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff f942 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d094:	f107 031c 	add.w	r3, r7, #28
 800d098:	4619      	mov	r1, r3
 800d09a:	4620      	mov	r0, r4
 800d09c:	f7fd f903 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800d0a0:	f107 031c 	add.w	r3, r7, #28
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7fd fc4a 	bl	800a93e <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe fa4c 	bl	800b550 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d0be:	68fd      	ldr	r5, [r7, #12]
 800d0c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d0c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fa41 	bl	800b550 <_Z22StringFromBinaryOrNullPKhj>
 800d0ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d0d2:	f107 0314 	add.w	r3, r7, #20
 800d0d6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d0da:	4629      	mov	r1, r5
 800d0dc:	f7ff f856 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d0e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0e4:	4619      	mov	r1, r3
 800d0e6:	4620      	mov	r0, r4
 800d0e8:	f7fd fca6 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800d0ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fd fc24 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800d0f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fd fc1f 	bl	800a93e <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 800d100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d102:	2b00      	cmp	r3, #0
 800d104:	d02f      	beq.n	800d166 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800d106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d02c      	beq.n	800d166 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 800d10c:	2300      	movs	r3, #0
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d110:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d114:	4413      	add	r3, r2
 800d116:	781a      	ldrb	r2, [r3, #0]
 800d118:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11c:	440b      	add	r3, r1
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	429a      	cmp	r2, r3
 800d122:	d103      	bne.n	800d12c <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800d124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d126:	3301      	adds	r3, #1
 800d128:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d12a:	e7f1      	b.n	800d110 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d132:	68f9      	ldr	r1, [r7, #12]
 800d134:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d136:	4613      	mov	r3, r2
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	4413      	add	r3, r2
 800d13c:	1c5d      	adds	r5, r3, #1
 800d13e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800d142:	f107 0214 	add.w	r2, r7, #20
 800d146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d148:	9300      	str	r3, [sp, #0]
 800d14a:	462b      	mov	r3, r5
 800d14c:	f7ff f838 	bl	800c1c0 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800d150:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d154:	4619      	mov	r1, r3
 800d156:	4620      	mov	r0, r4
 800d158:	f7fd fc6e 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800d15c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd fbec 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 800d166:	f107 0314 	add.w	r3, r7, #20
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fd fbe7 	bl	800a93e <_ZN12SimpleStringD1Ev>
	}
}
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	4618      	mov	r0, r3
 800d174:	3740      	adds	r7, #64	; 0x40
 800d176:	46bd      	mov	sp, r7
 800d178:	bdb0      	pop	{r4, r5, r7, pc}
 800d17a:	bf00      	nop
 800d17c:	08024680 	.word	0x08024680

0800d180 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 800d180:	b5b0      	push	{r4, r5, r7, lr}
 800d182:	b08c      	sub	sp, #48	; 0x30
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	f7fe feb7 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d19a:	4a26      	ldr	r2, [pc, #152]	; (800d234 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	f107 0310 	add.w	r3, r7, #16
 800d1ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff f8b2 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d1b4:	f107 0310 	add.w	r3, r7, #16
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	4620      	mov	r0, r4
 800d1bc:	f7fd f873 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800d1c0:	f107 0310 	add.w	r3, r7, #16
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fd fbba 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d1d0:	68fd      	ldr	r5, [r7, #12]
 800d1d2:	f107 0020 	add.w	r0, r7, #32
 800d1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d1dc:	f7fe fa24 	bl	800b628 <_Z20StringFromMaskedBitsmmj>
 800d1e0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800d1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d1ea:	f7fe fa1d 	bl	800b628 <_Z20StringFromMaskedBitsmmj>
 800d1ee:	f107 0018 	add.w	r0, r7, #24
 800d1f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1f6:	f107 0220 	add.w	r2, r7, #32
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	f7fe ffc6 	bl	800c18c <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800d200:	f107 0318 	add.w	r3, r7, #24
 800d204:	4619      	mov	r1, r3
 800d206:	4620      	mov	r0, r4
 800d208:	f7fd fc16 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800d20c:	f107 0318 	add.w	r3, r7, #24
 800d210:	4618      	mov	r0, r3
 800d212:	f7fd fb94 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800d216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fd fb8f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800d220:	f107 0320 	add.w	r3, r7, #32
 800d224:	4618      	mov	r0, r3
 800d226:	f7fd fb8a 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	4618      	mov	r0, r3
 800d22e:	3730      	adds	r7, #48	; 0x30
 800d230:	46bd      	mov	sp, r7
 800d232:	bdb0      	pop	{r4, r5, r7, pc}
 800d234:	08024654 	.word	0x08024654

0800d238 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 800d238:	b590      	push	{r4, r7, lr}
 800d23a:	b089      	sub	sp, #36	; 0x24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	687a      	ldr	r2, [r7, #4]
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	f7fe fe5b 	bl	800bf08 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800d252:	4a1a      	ldr	r2, [pc, #104]	; (800d2bc <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d25e:	68f9      	ldr	r1, [r7, #12]
 800d260:	f107 0310 	add.w	r3, r7, #16
 800d264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d266:	4618      	mov	r0, r3
 800d268:	f7ff f856 	bl	800c318 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800d26c:	f107 0310 	add.w	r3, r7, #16
 800d270:	4619      	mov	r1, r3
 800d272:	4620      	mov	r0, r4
 800d274:	f7fd f817 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800d278:	f107 0310 	add.w	r3, r7, #16
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fd fb5e 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800d288:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d28a:	f7fd fb2b 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800d28e:	4602      	mov	r2, r0
 800d290:	f107 0318 	add.w	r3, r7, #24
 800d294:	490a      	ldr	r1, [pc, #40]	; (800d2c0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800d296:	4618      	mov	r0, r3
 800d298:	f7fe f858 	bl	800b34c <_Z16StringFromFormatPKcz>
 800d29c:	f107 0318 	add.w	r3, r7, #24
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f7fd fbc8 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800d2a8:	f107 0318 	add.w	r3, r7, #24
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fd fb46 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3724      	adds	r7, #36	; 0x24
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd90      	pop	{r4, r7, pc}
 800d2bc:	08024628 	.word	0x08024628
 800d2c0:	08021648 	.word	0x08021648

0800d2c4 <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	4a05      	ldr	r2, [pc, #20]	; (800d2e4 <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	601a      	str	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f7fe fe99 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3708      	adds	r7, #8
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	08024628 	.word	0x08024628

0800d2e8 <_ZN25FeatureUnsupportedFailureD0Ev>:
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f7ff ffe7 	bl	800d2c4 <_ZN25FeatureUnsupportedFailureD1Ev>
 800d2f6:	2134      	movs	r1, #52	; 0x34
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7fa fbb9 	bl	8007a70 <_ZdlPvj>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	4a05      	ldr	r2, [pc, #20]	; (800d328 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	601a      	str	r2, [r3, #0]
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fe fe77 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4618      	mov	r0, r3
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	08024654 	.word	0x08024654

0800d32c <_ZN16BitsEqualFailureD0Ev>:
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f7ff ffe7 	bl	800d308 <_ZN16BitsEqualFailureD1Ev>
 800d33a:	2134      	movs	r1, #52	; 0x34
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7fa fb97 	bl	8007a70 <_ZdlPvj>
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	4a05      	ldr	r2, [pc, #20]	; (800d36c <_ZN18BinaryEqualFailureD1Ev+0x20>)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f7fe fe55 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	4618      	mov	r0, r3
 800d366:	3708      	adds	r7, #8
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}
 800d36c:	08024680 	.word	0x08024680

0800d370 <_ZN18BinaryEqualFailureD0Ev>:
 800d370:	b580      	push	{r7, lr}
 800d372:	b082      	sub	sp, #8
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f7ff ffe7 	bl	800d34c <_ZN18BinaryEqualFailureD1Ev>
 800d37e:	2134      	movs	r1, #52	; 0x34
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7fa fb75 	bl	8007a70 <_ZdlPvj>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4618      	mov	r0, r3
 800d38a:	3708      	adds	r7, #8
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	4a05      	ldr	r2, [pc, #20]	; (800d3b0 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	601a      	str	r2, [r3, #0]
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe fe33 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	080246ac 	.word	0x080246ac

0800d3b4 <_ZN24StringEqualNoCaseFailureD0Ev>:
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff ffe7 	bl	800d390 <_ZN24StringEqualNoCaseFailureD1Ev>
 800d3c2:	2134      	movs	r1, #52	; 0x34
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f7fa fb53 	bl	8007a70 <_ZdlPvj>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3708      	adds	r7, #8
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b082      	sub	sp, #8
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	4a05      	ldr	r2, [pc, #20]	; (800d3f4 <_ZN18StringEqualFailureD1Ev+0x20>)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	601a      	str	r2, [r3, #0]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f7fe fe11 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3708      	adds	r7, #8
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	080246d8 	.word	0x080246d8

0800d3f8 <_ZN18StringEqualFailureD0Ev>:
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff ffe7 	bl	800d3d4 <_ZN18StringEqualFailureD1Ev>
 800d406:	2134      	movs	r1, #52	; 0x34
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f7fa fb31 	bl	8007a70 <_ZdlPvj>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	4a05      	ldr	r2, [pc, #20]	; (800d438 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe fdef 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	4618      	mov	r0, r3
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	08024704 	.word	0x08024704

0800d43c <_ZN23SignedBytesEqualFailureD0Ev>:
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f7ff ffe7 	bl	800d418 <_ZN23SignedBytesEqualFailureD1Ev>
 800d44a:	2134      	movs	r1, #52	; 0x34
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7fa fb0f 	bl	8007a70 <_ZdlPvj>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4618      	mov	r0, r3
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	4a05      	ldr	r2, [pc, #20]	; (800d47c <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	601a      	str	r2, [r3, #0]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fe fdcd 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	4618      	mov	r0, r3
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	08024730 	.word	0x08024730

0800d480 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f7ff ffe7 	bl	800d45c <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d48e:	2134      	movs	r1, #52	; 0x34
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fa faed 	bl	8007a70 <_ZdlPvj>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4618      	mov	r0, r3
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
 800d4a8:	4a05      	ldr	r2, [pc, #20]	; (800d4c0 <_ZN17LongsEqualFailureD1Ev+0x20>)
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	601a      	str	r2, [r3, #0]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fe fdab 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}
 800d4c0:	0802475c 	.word	0x0802475c

0800d4c4 <_ZN17LongsEqualFailureD0Ev>:
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f7ff ffe7 	bl	800d4a0 <_ZN17LongsEqualFailureD1Ev>
 800d4d2:	2134      	movs	r1, #52	; 0x34
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7fa facb 	bl	8007a70 <_ZdlPvj>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	4a05      	ldr	r2, [pc, #20]	; (800d504 <_ZN12CheckFailureD1Ev+0x20>)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	601a      	str	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7fe fd89 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	08024788 	.word	0x08024788

0800d508 <_ZN12CheckFailureD0Ev>:
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff ffe7 	bl	800d4e4 <_ZN12CheckFailureD1Ev>
 800d516:	2134      	movs	r1, #52	; 0x34
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7fa faa9 	bl	8007a70 <_ZdlPvj>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	4618      	mov	r0, r3
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
 800d530:	4a05      	ldr	r2, [pc, #20]	; (800d548 <_ZN15ContainsFailureD1Ev+0x20>)
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	601a      	str	r2, [r3, #0]
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4618      	mov	r0, r3
 800d53a:	f7fe fd67 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	080247b4 	.word	0x080247b4

0800d54c <_ZN15ContainsFailureD0Ev>:
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f7ff ffe7 	bl	800d528 <_ZN15ContainsFailureD1Ev>
 800d55a:	2134      	movs	r1, #52	; 0x34
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f7fa fa87 	bl	8007a70 <_ZdlPvj>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}

0800d56c <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
 800d574:	4a05      	ldr	r2, [pc, #20]	; (800d58c <_ZN17ComparisonFailureD1Ev+0x20>)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	601a      	str	r2, [r3, #0]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7fe fd45 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	080247e0 	.word	0x080247e0

0800d590 <_ZN17ComparisonFailureD0Ev>:
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff ffe7 	bl	800d56c <_ZN17ComparisonFailureD1Ev>
 800d59e:	2134      	movs	r1, #52	; 0x34
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7fa fa65 	bl	8007a70 <_ZdlPvj>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	4a05      	ldr	r2, [pc, #20]	; (800d5d0 <_ZN17CheckEqualFailureD1Ev+0x20>)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fe fd23 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	0802480c 	.word	0x0802480c

0800d5d4 <_ZN17CheckEqualFailureD0Ev>:
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b082      	sub	sp, #8
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f7ff ffe7 	bl	800d5b0 <_ZN17CheckEqualFailureD1Ev>
 800d5e2:	2134      	movs	r1, #52	; 0x34
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7fa fa43 	bl	8007a70 <_ZdlPvj>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	4a05      	ldr	r2, [pc, #20]	; (800d614 <_ZN19DoublesEqualFailureD1Ev+0x20>)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	601a      	str	r2, [r3, #0]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4618      	mov	r0, r3
 800d606:	f7fe fd01 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	08024838 	.word	0x08024838

0800d618 <_ZN19DoublesEqualFailureD0Ev>:
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff ffe7 	bl	800d5f4 <_ZN19DoublesEqualFailureD1Ev>
 800d626:	2134      	movs	r1, #52	; 0x34
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f7fa fa21 	bl	8007a70 <_ZdlPvj>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 800d638:	b580      	push	{r7, lr}
 800d63a:	b082      	sub	sp, #8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	4a05      	ldr	r2, [pc, #20]	; (800d658 <_ZN13EqualsFailureD1Ev+0x20>)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	601a      	str	r2, [r3, #0]
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4618      	mov	r0, r3
 800d64a:	f7fe fcdf 	bl	800c00c <_ZN11TestFailureD1Ev>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	4618      	mov	r0, r3
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	08024864 	.word	0x08024864

0800d65c <_ZN13EqualsFailureD0Ev>:
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7ff ffe7 	bl	800d638 <_ZN13EqualsFailureD1Ev>
 800d66a:	2134      	movs	r1, #52	; 0x34
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7fa f9ff 	bl	8007a70 <_ZdlPvj>
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	4618      	mov	r0, r3
 800d676:	3708      	adds	r7, #8
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 800d67c:	b5b0      	push	{r4, r5, r7, lr}
 800d67e:	b086      	sub	sp, #24
 800d680:	af02      	add	r7, sp, #8
 800d682:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 800d684:	4b0d      	ldr	r3, [pc, #52]	; (800d6bc <_ZL13checkedMallocj+0x40>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6878      	ldr	r0, [r7, #4]
 800d68a:	4798      	blx	r3
 800d68c:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10e      	bne.n	800d6b2 <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800d694:	f004 f97e 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 800d698:	4604      	mov	r4, r0
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	3368      	adds	r3, #104	; 0x68
 800d69e:	681d      	ldr	r5, [r3, #0]
 800d6a0:	f004 f988 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	9300      	str	r3, [sp, #0]
 800d6a8:	2325      	movs	r3, #37	; 0x25
 800d6aa:	4a05      	ldr	r2, [pc, #20]	; (800d6c0 <_ZL13checkedMallocj+0x44>)
 800d6ac:	4905      	ldr	r1, [pc, #20]	; (800d6c4 <_ZL13checkedMallocj+0x48>)
 800d6ae:	4620      	mov	r0, r4
 800d6b0:	47a8      	blx	r5
    return mem;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3710      	adds	r7, #16
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bdb0      	pop	{r4, r5, r7, pc}
 800d6bc:	200000c4 	.word	0x200000c4
 800d6c0:	080216bc 	.word	0x080216bc
 800d6c4:	080216dc 	.word	0x080216dc

0800d6c8 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 800d6cc:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <_Z22getCurrentNewAllocatorv+0x18>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d101      	bne.n	800d6d8 <_Z22getCurrentNewAllocatorv+0x10>
 800d6d4:	f000 f806 	bl	800d6e4 <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 800d6d8:	4b01      	ldr	r3, [pc, #4]	; (800d6e0 <_Z22getCurrentNewAllocatorv+0x18>)
 800d6da:	681b      	ldr	r3, [r3, #0]
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	200006b4 	.word	0x200006b4

0800d6e4 <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 800d6e8:	f000 f810 	bl	800d70c <_Z19defaultNewAllocatorv>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	4a02      	ldr	r2, [pc, #8]	; (800d6f8 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 800d6f0:	6013      	str	r3, [r2, #0]
}
 800d6f2:	bf00      	nop
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	200006b4 	.word	0x200006b4

0800d6fc <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	4801      	ldr	r0, [pc, #4]	; (800d708 <__tcf_0+0xc>)
 800d702:	f000 f909 	bl	800d918 <_ZN19TestMemoryAllocatorD1Ev>
 800d706:	bd80      	pop	{r7, pc}
 800d708:	200006c0 	.word	0x200006c0

0800d70c <_Z19defaultNewAllocatorv>:
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 800d710:	4b13      	ldr	r3, [pc, #76]	; (800d760 <_Z19defaultNewAllocatorv+0x54>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	f3bf 8f5b 	dmb	ish
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	bf0c      	ite	eq
 800d722:	2301      	moveq	r3, #1
 800d724:	2300      	movne	r3, #0
 800d726:	b2db      	uxtb	r3, r3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d016      	beq.n	800d75a <_Z19defaultNewAllocatorv+0x4e>
 800d72c:	480c      	ldr	r0, [pc, #48]	; (800d760 <_Z19defaultNewAllocatorv+0x54>)
 800d72e:	f00f fc0f 	bl	801cf50 <__cxa_guard_acquire>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	bf14      	ite	ne
 800d738:	2301      	movne	r3, #1
 800d73a:	2300      	moveq	r3, #0
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00b      	beq.n	800d75a <_Z19defaultNewAllocatorv+0x4e>
 800d742:	4b08      	ldr	r3, [pc, #32]	; (800d764 <_Z19defaultNewAllocatorv+0x58>)
 800d744:	4a08      	ldr	r2, [pc, #32]	; (800d768 <_Z19defaultNewAllocatorv+0x5c>)
 800d746:	4909      	ldr	r1, [pc, #36]	; (800d76c <_Z19defaultNewAllocatorv+0x60>)
 800d748:	4809      	ldr	r0, [pc, #36]	; (800d770 <_Z19defaultNewAllocatorv+0x64>)
 800d74a:	f000 f8c5 	bl	800d8d8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d74e:	4804      	ldr	r0, [pc, #16]	; (800d760 <_Z19defaultNewAllocatorv+0x54>)
 800d750:	f00f fc0a 	bl	801cf68 <__cxa_guard_release>
 800d754:	4807      	ldr	r0, [pc, #28]	; (800d774 <_Z19defaultNewAllocatorv+0x68>)
 800d756:	f00f fc2e 	bl	801cfb6 <atexit>
    return &allocator;
 800d75a:	4b05      	ldr	r3, [pc, #20]	; (800d770 <_Z19defaultNewAllocatorv+0x64>)
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	200006d4 	.word	0x200006d4
 800d764:	080216fc 	.word	0x080216fc
 800d768:	08021704 	.word	0x08021704
 800d76c:	08021708 	.word	0x08021708
 800d770:	200006c0 	.word	0x200006c0
 800d774:	0800d6fd 	.word	0x0800d6fd

0800d778 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 800d778:	b580      	push	{r7, lr}
 800d77a:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 800d77c:	4b04      	ldr	r3, [pc, #16]	; (800d790 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <_Z27getCurrentNewArrayAllocatorv+0x10>
 800d784:	f000 f806 	bl	800d794 <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 800d788:	4b01      	ldr	r3, [pc, #4]	; (800d790 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 800d78a:	681b      	ldr	r3, [r3, #0]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	200006b8 	.word	0x200006b8

0800d794 <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 800d798:	f000 f810 	bl	800d7bc <_Z24defaultNewArrayAllocatorv>
 800d79c:	4603      	mov	r3, r0
 800d79e:	4a02      	ldr	r2, [pc, #8]	; (800d7a8 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 800d7a0:	6013      	str	r3, [r2, #0]
}
 800d7a2:	bf00      	nop
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	200006b8 	.word	0x200006b8

0800d7ac <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	4801      	ldr	r0, [pc, #4]	; (800d7b8 <__tcf_1+0xc>)
 800d7b2:	f000 f8b1 	bl	800d918 <_ZN19TestMemoryAllocatorD1Ev>
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	200006d8 	.word	0x200006d8

0800d7bc <_Z24defaultNewArrayAllocatorv>:
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 800d7c0:	4b13      	ldr	r3, [pc, #76]	; (800d810 <_Z24defaultNewArrayAllocatorv+0x54>)
 800d7c2:	781b      	ldrb	r3, [r3, #0]
 800d7c4:	f3bf 8f5b 	dmb	ish
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	bf0c      	ite	eq
 800d7d2:	2301      	moveq	r3, #1
 800d7d4:	2300      	movne	r3, #0
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d016      	beq.n	800d80a <_Z24defaultNewArrayAllocatorv+0x4e>
 800d7dc:	480c      	ldr	r0, [pc, #48]	; (800d810 <_Z24defaultNewArrayAllocatorv+0x54>)
 800d7de:	f00f fbb7 	bl	801cf50 <__cxa_guard_acquire>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	bf14      	ite	ne
 800d7e8:	2301      	movne	r3, #1
 800d7ea:	2300      	moveq	r3, #0
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00b      	beq.n	800d80a <_Z24defaultNewArrayAllocatorv+0x4e>
 800d7f2:	4b08      	ldr	r3, [pc, #32]	; (800d814 <_Z24defaultNewArrayAllocatorv+0x58>)
 800d7f4:	4a08      	ldr	r2, [pc, #32]	; (800d818 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800d7f6:	4909      	ldr	r1, [pc, #36]	; (800d81c <_Z24defaultNewArrayAllocatorv+0x60>)
 800d7f8:	4809      	ldr	r0, [pc, #36]	; (800d820 <_Z24defaultNewArrayAllocatorv+0x64>)
 800d7fa:	f000 f86d 	bl	800d8d8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d7fe:	4804      	ldr	r0, [pc, #16]	; (800d810 <_Z24defaultNewArrayAllocatorv+0x54>)
 800d800:	f00f fbb2 	bl	801cf68 <__cxa_guard_release>
 800d804:	4807      	ldr	r0, [pc, #28]	; (800d824 <_Z24defaultNewArrayAllocatorv+0x68>)
 800d806:	f00f fbd6 	bl	801cfb6 <atexit>
    return &allocator;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	200006ec 	.word	0x200006ec
 800d814:	08021720 	.word	0x08021720
 800d818:	0802172c 	.word	0x0802172c
 800d81c:	08021734 	.word	0x08021734
 800d820:	200006d8 	.word	0x200006d8
 800d824:	0800d7ad 	.word	0x0800d7ad

0800d828 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 800d82c:	4b04      	ldr	r3, [pc, #16]	; (800d840 <_Z25getCurrentMallocAllocatorv+0x18>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <_Z25getCurrentMallocAllocatorv+0x10>
 800d834:	f000 f806 	bl	800d844 <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 800d838:	4b01      	ldr	r3, [pc, #4]	; (800d840 <_Z25getCurrentMallocAllocatorv+0x18>)
 800d83a:	681b      	ldr	r3, [r3, #0]
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	200006bc 	.word	0x200006bc

0800d844 <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 800d844:	b580      	push	{r7, lr}
 800d846:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 800d848:	f000 f810 	bl	800d86c <_Z22defaultMallocAllocatorv>
 800d84c:	4603      	mov	r3, r0
 800d84e:	4a02      	ldr	r2, [pc, #8]	; (800d858 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 800d850:	6013      	str	r3, [r2, #0]
}
 800d852:	bf00      	nop
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	200006bc 	.word	0x200006bc

0800d85c <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
 800d860:	4801      	ldr	r0, [pc, #4]	; (800d868 <__tcf_2+0xc>)
 800d862:	f000 f859 	bl	800d918 <_ZN19TestMemoryAllocatorD1Ev>
 800d866:	bd80      	pop	{r7, pc}
 800d868:	200006f0 	.word	0x200006f0

0800d86c <_Z22defaultMallocAllocatorv>:
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 800d870:	4b13      	ldr	r3, [pc, #76]	; (800d8c0 <_Z22defaultMallocAllocatorv+0x54>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	f3bf 8f5b 	dmb	ish
 800d878:	b2db      	uxtb	r3, r3
 800d87a:	f003 0301 	and.w	r3, r3, #1
 800d87e:	2b00      	cmp	r3, #0
 800d880:	bf0c      	ite	eq
 800d882:	2301      	moveq	r3, #1
 800d884:	2300      	movne	r3, #0
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d016      	beq.n	800d8ba <_Z22defaultMallocAllocatorv+0x4e>
 800d88c:	480c      	ldr	r0, [pc, #48]	; (800d8c0 <_Z22defaultMallocAllocatorv+0x54>)
 800d88e:	f00f fb5f 	bl	801cf50 <__cxa_guard_acquire>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	bf14      	ite	ne
 800d898:	2301      	movne	r3, #1
 800d89a:	2300      	moveq	r3, #0
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00b      	beq.n	800d8ba <_Z22defaultMallocAllocatorv+0x4e>
 800d8a2:	4b08      	ldr	r3, [pc, #32]	; (800d8c4 <_Z22defaultMallocAllocatorv+0x58>)
 800d8a4:	4a08      	ldr	r2, [pc, #32]	; (800d8c8 <_Z22defaultMallocAllocatorv+0x5c>)
 800d8a6:	4909      	ldr	r1, [pc, #36]	; (800d8cc <_Z22defaultMallocAllocatorv+0x60>)
 800d8a8:	4809      	ldr	r0, [pc, #36]	; (800d8d0 <_Z22defaultMallocAllocatorv+0x64>)
 800d8aa:	f000 f815 	bl	800d8d8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800d8ae:	4804      	ldr	r0, [pc, #16]	; (800d8c0 <_Z22defaultMallocAllocatorv+0x54>)
 800d8b0:	f00f fb5a 	bl	801cf68 <__cxa_guard_release>
 800d8b4:	4807      	ldr	r0, [pc, #28]	; (800d8d4 <_Z22defaultMallocAllocatorv+0x68>)
 800d8b6:	f00f fb7e 	bl	801cfb6 <atexit>
    return &allocator;
 800d8ba:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <_Z22defaultMallocAllocatorv+0x64>)
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	bd80      	pop	{r7, pc}
 800d8c0:	20000704 	.word	0x20000704
 800d8c4:	08021750 	.word	0x08021750
 800d8c8:	08021758 	.word	0x08021758
 800d8cc:	08021760 	.word	0x08021760
 800d8d0:	200006f0 	.word	0x200006f0
 800d8d4:	0800d85d 	.word	0x0800d85d

0800d8d8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60f8      	str	r0, [r7, #12]
 800d8e0:	60b9      	str	r1, [r7, #8]
 800d8e2:	607a      	str	r2, [r7, #4]
 800d8e4:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800d8e6:	4a0b      	ldr	r2, [pc, #44]	; (800d914 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	605a      	str	r2, [r3, #4]
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	609a      	str	r2, [r3, #8]
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	683a      	ldr	r2, [r7, #0]
 800d8fc:	60da      	str	r2, [r3, #12]
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	2200      	movs	r2, #0
 800d902:	741a      	strb	r2, [r3, #16]
{
}
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	4618      	mov	r0, r3
 800d908:	3714      	adds	r7, #20
 800d90a:	46bd      	mov	sp, r7
 800d90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d910:	4770      	bx	lr
 800d912:	bf00      	nop
 800d914:	080248f0 	.word	0x080248f0

0800d918 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 800d918:	b480      	push	{r7}
 800d91a:	b083      	sub	sp, #12
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	4a06      	ldr	r2, [pc, #24]	; (800d93c <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	741a      	strb	r2, [r3, #16]
}
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	4618      	mov	r0, r3
 800d930:	370c      	adds	r7, #12
 800d932:	46bd      	mov	sp, r7
 800d934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	080248f0 	.word	0x080248f0

0800d940 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
}
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7ff ffe5 	bl	800d918 <_ZN19TestMemoryAllocatorD1Ev>
 800d94e:	2114      	movs	r1, #20
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7fa f88d 	bl	8007a70 <_ZdlPvj>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	4618      	mov	r0, r3
 800d95a:	3708      	adds	r7, #8
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7c1b      	ldrb	r3, [r3, #16]
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	370c      	adds	r7, #12
 800d970:	46bd      	mov	sp, r7
 800d972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d976:	4770      	bx	lr

0800d978 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 800d978:	b590      	push	{r4, r7, lr}
 800d97a:	b083      	sub	sp, #12
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	3310      	adds	r3, #16
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	4798      	blx	r3
 800d98e:	4604      	mov	r4, r0
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	3310      	adds	r3, #16
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6838      	ldr	r0, [r7, #0]
 800d99a:	4798      	blx	r3
 800d99c:	4603      	mov	r3, r0
 800d99e:	4619      	mov	r1, r3
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	f7fc fa51 	bl	8009e48 <_ZN12SimpleString6StrCmpEPKcS1_>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	bf0c      	ite	eq
 800d9ac:	2301      	moveq	r3, #1
 800d9ae:	2300      	movne	r3, #0
 800d9b0:	b2db      	uxtb	r3, r3
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd90      	pop	{r4, r7, pc}
	...

0800d9bc <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 800d9bc:	b590      	push	{r4, r7, lr}
 800d9be:	b083      	sub	sp, #12
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
 800d9c4:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	681c      	ldr	r4, [r3, #0]
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4a04      	ldr	r2, [pc, #16]	; (800d9e4 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	47a0      	blx	r4
 800d9d8:	4603      	mov	r3, r0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd90      	pop	{r4, r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	0802177c 	.word	0x0802177c

0800d9e8 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 800d9e8:	b590      	push	{r4, r7, lr}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	330c      	adds	r3, #12
 800d9f8:	681c      	ldr	r4, [r3, #0]
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	9300      	str	r3, [sp, #0]
 800d9fe:	4b04      	ldr	r3, [pc, #16]	; (800da10 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 800da00:	2200      	movs	r2, #0
 800da02:	6839      	ldr	r1, [r7, #0]
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	47a0      	blx	r4
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd90      	pop	{r4, r7, pc}
 800da10:	0802177c 	.word	0x0802177c

0800da14 <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b084      	sub	sp, #16
 800da18:	af00      	add	r7, sp, #0
 800da1a:	60f8      	str	r0, [r7, #12]
 800da1c:	60b9      	str	r1, [r7, #8]
 800da1e:	607a      	str	r2, [r7, #4]
 800da20:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7ff fe2a 	bl	800d67c <_ZL13checkedMallocj>
 800da28:	4603      	mov	r3, r0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
 800da40:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 800da42:	4b04      	ldr	r3, [pc, #16]	; (800da54 <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68b8      	ldr	r0, [r7, #8]
 800da48:	4798      	blx	r3
}
 800da4a:	bf00      	nop
 800da4c:	3710      	adds	r7, #16
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
 800da52:	bf00      	nop
 800da54:	200000cc 	.word	0x200000cc

0800da58 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 800da58:	b480      	push	{r7}
 800da5a:	b083      	sub	sp, #12
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
    return name_;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
}
 800da64:	4618      	mov	r0, r3
 800da66:	370c      	adds	r7, #12
 800da68:	46bd      	mov	sp, r7
 800da6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6e:	4770      	bx	lr

0800da70 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689b      	ldr	r3, [r3, #8]
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	370c      	adds	r7, #12
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
    return free_name_;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68db      	ldr	r3, [r3, #12]
}
 800da94:	4618      	mov	r0, r3
 800da96:	370c      	adds	r7, #12
 800da98:	46bd      	mov	sp, r7
 800da9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9e:	4770      	bx	lr

0800daa0 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 800daa0:	b480      	push	{r7}
 800daa2:	b083      	sub	sp, #12
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
    return this;
 800daa8:	687b      	ldr	r3, [r7, #4]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
	...

0800dab8 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 800dab8:	b580      	push	{r7, lr}
 800daba:	b082      	sub	sp, #8
 800dabc:	af00      	add	r7, sp, #0
 800dabe:	6078      	str	r0, [r7, #4]
 800dac0:	4a05      	ldr	r2, [pc, #20]	; (800dad8 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7ff ff25 	bl	800d918 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	4618      	mov	r0, r3
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	080248bc 	.word	0x080248bc

0800dadc <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
}
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff ffe7 	bl	800dab8 <_ZN20NullUnknownAllocatorD1Ev>
 800daea:	2114      	movs	r1, #20
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7f9 ffbf 	bl	8007a70 <_ZdlPvj>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}

0800dafc <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	60f8      	str	r0, [r7, #12]
 800db04:	60b9      	str	r1, [r7, #8]
 800db06:	607a      	str	r2, [r7, #4]
 800db08:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 800db0a:	2300      	movs	r3, #0
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3714      	adds	r7, #20
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	607a      	str	r2, [r7, #4]
 800db24:	603b      	str	r3, [r7, #0]
}
 800db26:	bf00      	nop
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
	...

0800db34 <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	4b06      	ldr	r3, [pc, #24]	; (800db58 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800db40:	4a05      	ldr	r2, [pc, #20]	; (800db58 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 800db42:	4906      	ldr	r1, [pc, #24]	; (800db5c <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 800db44:	f7ff fec8 	bl	800d8d8 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 800db48:	4a05      	ldr	r2, [pc, #20]	; (800db60 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	601a      	str	r2, [r3, #0]
{
}
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}
 800db58:	080217b0 	.word	0x080217b0
 800db5c:	080217b8 	.word	0x080217b8
 800db60:	080248bc 	.word	0x080248bc

0800db64 <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 800db64:	b580      	push	{r7, lr}
 800db66:	af00      	add	r7, sp, #0
 800db68:	4801      	ldr	r0, [pc, #4]	; (800db70 <__tcf_3+0xc>)
 800db6a:	f7ff ffa5 	bl	800dab8 <_ZN20NullUnknownAllocatorD1Ev>
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	20000708 	.word	0x20000708

0800db74 <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 800db78:	4b12      	ldr	r3, [pc, #72]	; (800dbc4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	f3bf 8f5b 	dmb	ish
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	2b00      	cmp	r3, #0
 800db88:	bf0c      	ite	eq
 800db8a:	2301      	moveq	r3, #1
 800db8c:	2300      	movne	r3, #0
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b00      	cmp	r3, #0
 800db92:	d013      	beq.n	800dbbc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800db94:	480b      	ldr	r0, [pc, #44]	; (800dbc4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800db96:	f00f f9db 	bl	801cf50 <__cxa_guard_acquire>
 800db9a:	4603      	mov	r3, r0
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	bf14      	ite	ne
 800dba0:	2301      	movne	r3, #1
 800dba2:	2300      	moveq	r3, #0
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d008      	beq.n	800dbbc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 800dbaa:	4807      	ldr	r0, [pc, #28]	; (800dbc8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 800dbac:	f7ff ffc2 	bl	800db34 <_ZN20NullUnknownAllocatorC1Ev>
 800dbb0:	4804      	ldr	r0, [pc, #16]	; (800dbc4 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 800dbb2:	f00f f9d9 	bl	801cf68 <__cxa_guard_release>
 800dbb6:	4805      	ldr	r0, [pc, #20]	; (800dbcc <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 800dbb8:	f00f f9fd 	bl	801cfb6 <atexit>
    return &allocator;
 800dbbc:	4b02      	ldr	r3, [pc, #8]	; (800dbc8 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	2000071c 	.word	0x2000071c
 800dbc8:	20000708 	.word	0x20000708
 800dbcc:	0800db65 	.word	0x0800db65

0800dbd0 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 800dbd0:	b480      	push	{r7}
 800dbd2:	b083      	sub	sp, #12
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
        return testCount_;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	689b      	ldr	r3, [r3, #8]
    }
 800dbdc:	4618      	mov	r0, r3
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr

0800dbe8 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	699b      	ldr	r3, [r3, #24]
    }
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfe:	4770      	bx	lr

0800dc00 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 800dc04:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d103      	bne.n	800dc14 <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 800dc0c:	f004 fa4a 	bl	80120a4 <_Z37PlatformSpecificGetWorkingEnvironmentv>
 800dc10:	4603      	mov	r3, r0
 800dc12:	e001      	b.n	800dc18 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 800dc14:	4b01      	ldr	r3, [pc, #4]	; (800dc1c <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	20000084 	.word	0x20000084

0800dc20 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 800dc20:	b480      	push	{r7}
 800dc22:	b083      	sub	sp, #12
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 800dc28:	4a0a      	ldr	r2, [pc, #40]	; (800dc54 <_ZN10TestOutputC1Ev+0x34>)
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	601a      	str	r2, [r3, #0]
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2200      	movs	r2, #0
 800dc32:	605a      	str	r2, [r3, #4]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	721a      	strb	r2, [r3, #8]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	725a      	strb	r2, [r3, #9]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	4a05      	ldr	r2, [pc, #20]	; (800dc58 <_ZN10TestOutputC1Ev+0x38>)
 800dc44:	60da      	str	r2, [r3, #12]
{
}
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4618      	mov	r0, r3
 800dc4a:	370c      	adds	r7, #12
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc52:	4770      	bx	lr
 800dc54:	080249f4 	.word	0x080249f4
 800dc58:	08021bb8 	.word	0x08021bb8

0800dc5c <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 800dc5c:	b480      	push	{r7}
 800dc5e:	b083      	sub	sp, #12
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	4a04      	ldr	r2, [pc, #16]	; (800dc78 <_ZN10TestOutputD1Ev+0x1c>)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	601a      	str	r2, [r3, #0]
{
}
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	370c      	adds	r7, #12
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr
 800dc78:	080249f4 	.word	0x080249f4

0800dc7c <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	460b      	mov	r3, r1
 800dc86:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	78fa      	ldrb	r2, [r7, #3]
 800dc8c:	721a      	strb	r2, [r3, #8]
}
 800dc8e:	bf00      	nop
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr

0800dc9a <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 800dc9a:	b480      	push	{r7}
 800dc9c:	b083      	sub	sp, #12
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	6078      	str	r0, [r7, #4]
    color_ = true;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	725a      	strb	r2, [r3, #9]
}
 800dca8:	bf00      	nop
 800dcaa:	370c      	adds	r7, #12
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr

0800dcb4 <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]
 800dcbc:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3328      	adds	r3, #40	; 0x28
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	6839      	ldr	r1, [r7, #0]
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	4798      	blx	r3
}
 800dccc:	bf00      	nop
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 800dcd4:	b590      	push	{r4, r7, lr}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	332c      	adds	r3, #44	; 0x2c
 800dce4:	681c      	ldr	r4, [r3, #0]
 800dce6:	f107 0308 	add.w	r3, r7, #8
 800dcea:	6839      	ldr	r1, [r7, #0]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fd f8ff 	bl	800aef0 <_Z10StringFroml>
 800dcf2:	f107 0308 	add.w	r3, r7, #8
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fc fdf4 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	4619      	mov	r1, r3
 800dd00:	6878      	ldr	r0, [r7, #4]
 800dd02:	47a0      	blx	r4
 800dd04:	f107 0308 	add.w	r3, r7, #8
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7fc fe18 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd90      	pop	{r4, r7, pc}

0800dd16 <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 800dd16:	b590      	push	{r4, r7, lr}
 800dd18:	b085      	sub	sp, #20
 800dd1a:	af00      	add	r7, sp, #0
 800dd1c:	6078      	str	r0, [r7, #4]
 800dd1e:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	332c      	adds	r3, #44	; 0x2c
 800dd26:	681c      	ldr	r4, [r3, #0]
 800dd28:	f107 0308 	add.w	r3, r7, #8
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fd fb34 	bl	800b39c <_Z10StringFromj>
 800dd34:	f107 0308 	add.w	r3, r7, #8
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7fc fdd3 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	4619      	mov	r1, r3
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	47a0      	blx	r4
 800dd46:	f107 0308 	add.w	r3, r7, #8
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7fc fdf7 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800dd50:	bf00      	nop
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd90      	pop	{r4, r7, pc}

0800dd58 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 800dd58:	b590      	push	{r4, r7, lr}
 800dd5a:	b087      	sub	sp, #28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	332c      	adds	r3, #44	; 0x2c
 800dd6a:	681c      	ldr	r4, [r3, #0]
 800dd6c:	f107 0310 	add.w	r3, r7, #16
 800dd70:	2106      	movs	r1, #6
 800dd72:	ed97 0b00 	vldr	d0, [r7]
 800dd76:	4618      	mov	r0, r3
 800dd78:	f7fd faa6 	bl	800b2c8 <_Z10StringFromdi>
 800dd7c:	f107 0310 	add.w	r3, r7, #16
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fc fdaf 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	68f8      	ldr	r0, [r7, #12]
 800dd8c:	47a0      	blx	r4
 800dd8e:	f107 0310 	add.w	r3, r7, #16
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7fc fdd3 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800dd98:	bf00      	nop
 800dd9a:	371c      	adds	r7, #28
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd90      	pop	{r4, r7, pc}

0800dda0 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
    p.print(s);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	332c      	adds	r3, #44	; 0x2c
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	6839      	ldr	r1, [r7, #0]
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	4798      	blx	r3
    return p;
 800ddb8:	687b      	ldr	r3, [r7, #4]
}
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
	...

0800ddc4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800ddc4:	b590      	push	{r4, r7, lr}
 800ddc6:	b085      	sub	sp, #20
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
 800ddcc:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	7a1b      	ldrb	r3, [r3, #8]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d01a      	beq.n	800de0c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	332c      	adds	r3, #44	; 0x2c
 800dddc:	681c      	ldr	r4, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	3314      	adds	r3, #20
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f107 0208 	add.w	r2, r7, #8
 800ddea:	6839      	ldr	r1, [r7, #0]
 800ddec:	4610      	mov	r0, r2
 800ddee:	4798      	blx	r3
 800ddf0:	f107 0308 	add.w	r3, r7, #8
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7fc fd75 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	47a0      	blx	r4
 800de02:	f107 0308 	add.w	r3, r7, #8
 800de06:	4618      	mov	r0, r3
 800de08:	f7fc fd99 	bl	800a93e <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	3318      	adds	r3, #24
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	6838      	ldr	r0, [r7, #0]
 800de16:	4798      	blx	r3
 800de18:	4603      	mov	r3, r0
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d007      	beq.n	800de2e <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3344      	adds	r3, #68	; 0x44
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4907      	ldr	r1, [pc, #28]	; (800de44 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 800de2c:	e006      	b.n	800de3c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	3344      	adds	r3, #68	; 0x44
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4904      	ldr	r1, [pc, #16]	; (800de48 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4798      	blx	r3
}
 800de3c:	bf00      	nop
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	bd90      	pop	{r4, r7, pc}
 800de44:	08021bb8 	.word	0x08021bb8
 800de48:	08021bbc 	.word	0x08021bbc

0800de4c <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 800de4c:	b590      	push	{r4, r7, lr}
 800de4e:	b083      	sub	sp, #12
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	7a1b      	ldrb	r3, [r3, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d019      	beq.n	800de92 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	332c      	adds	r3, #44	; 0x2c
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4910      	ldr	r1, [pc, #64]	; (800dea8 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	3334      	adds	r3, #52	; 0x34
 800de72:	681c      	ldr	r4, [r3, #0]
 800de74:	6838      	ldr	r0, [r7, #0]
 800de76:	f002 f845 	bl	800ff04 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 800de7a:	4603      	mov	r3, r0
 800de7c:	4619      	mov	r1, r3
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	47a0      	blx	r4
        print(" ms\n");
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	332c      	adds	r3, #44	; 0x2c
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4908      	ldr	r1, [pc, #32]	; (800deac <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 800de90:	e005      	b.n	800de9e <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	3358      	adds	r3, #88	; 0x58
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	4798      	blx	r3
}
 800de9e:	bf00      	nop
 800dea0:	370c      	adds	r7, #12
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd90      	pop	{r4, r7, pc}
 800dea6:	bf00      	nop
 800dea8:	08021bc0 	.word	0x08021bc0
 800deac:	08021bc4 	.word	0x08021bc4

0800deb0 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b082      	sub	sp, #8
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	332c      	adds	r3, #44	; 0x2c
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	68d2      	ldr	r2, [r2, #12]
 800dec4:	4611      	mov	r1, r2
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	1c5a      	adds	r2, r3, #1
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	605a      	str	r2, [r3, #4]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	685a      	ldr	r2, [r3, #4]
 800ded8:	4b0d      	ldr	r3, [pc, #52]	; (800df10 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 800deda:	fb83 1302 	smull	r1, r3, r3, r2
 800dede:	1119      	asrs	r1, r3, #4
 800dee0:	17d3      	asrs	r3, r2, #31
 800dee2:	1acb      	subs	r3, r1, r3
 800dee4:	2132      	movs	r1, #50	; 0x32
 800dee6:	fb01 f303 	mul.w	r3, r1, r3
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	2b00      	cmp	r3, #0
 800deee:	bf0c      	ite	eq
 800def0:	2301      	moveq	r3, #1
 800def2:	2300      	movne	r3, #0
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b00      	cmp	r3, #0
 800def8:	d006      	beq.n	800df08 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	332c      	adds	r3, #44	; 0x2c
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4904      	ldr	r1, [pc, #16]	; (800df14 <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	4798      	blx	r3
}
 800df08:	bf00      	nop
 800df0a:	3708      	adds	r7, #8
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	51eb851f 	.word	0x51eb851f
 800df14:	08021bcc 	.word	0x08021bcc

0800df18 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
 800df20:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	683a      	ldr	r2, [r7, #0]
 800df26:	60da      	str	r2, [r3, #12]
}
 800df28:	bf00      	nop
 800df2a:	370c      	adds	r7, #12
 800df2c:	46bd      	mov	sp, r7
 800df2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
}
 800df52:	bf00      	nop
 800df54:	370c      	adds	r7, #12
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 800df5e:	b480      	push	{r7}
 800df60:	b083      	sub	sp, #12
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 800df74:	b590      	push	{r4, r7, lr}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	6039      	str	r1, [r7, #0]
    print("\n");
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	332c      	adds	r3, #44	; 0x2c
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	496f      	ldr	r1, [pc, #444]	; (800e144 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800df8c:	6838      	ldr	r0, [r7, #0]
 800df8e:	f7f8 f83d 	bl	800600c <_ZNK10TestResult9isFailureEv>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800df96:	6838      	ldr	r0, [r7, #0]
 800df98:	f7f8 f82c 	bl	8005ff4 <_ZNK10TestResult15getFailureCountEv>
 800df9c:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800df9e:	7bfb      	ldrb	r3, [r7, #15]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d02b      	beq.n	800dffc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	7a5b      	ldrb	r3, [r3, #9]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d006      	beq.n	800dfba <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	332c      	adds	r3, #44	; 0x2c
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	4964      	ldr	r1, [pc, #400]	; (800e148 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	4798      	blx	r3
        }
        print("Errors (");
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	332c      	adds	r3, #44	; 0x2c
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4962      	ldr	r1, [pc, #392]	; (800e14c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	4798      	blx	r3
        if (failureCount > 0) {
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d00e      	beq.n	800dfec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	3334      	adds	r3, #52	; 0x34
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	68b9      	ldr	r1, [r7, #8]
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	4798      	blx	r3
            print(" failures, ");
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	332c      	adds	r3, #44	; 0x2c
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	495a      	ldr	r1, [pc, #360]	; (800e150 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	4798      	blx	r3
 800dfea:	e019      	b.n	800e020 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	332c      	adds	r3, #44	; 0x2c
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4957      	ldr	r1, [pc, #348]	; (800e154 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	4798      	blx	r3
 800dffa:	e011      	b.n	800e020 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	7a5b      	ldrb	r3, [r3, #9]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d006      	beq.n	800e012 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	332c      	adds	r3, #44	; 0x2c
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4952      	ldr	r1, [pc, #328]	; (800e158 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	4798      	blx	r3
        }
        print("OK (");
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	332c      	adds	r3, #44	; 0x2c
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4950      	ldr	r1, [pc, #320]	; (800e15c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4798      	blx	r3
    }
    print(result.getTestCount());
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	3334      	adds	r3, #52	; 0x34
 800e026:	681c      	ldr	r4, [r3, #0]
 800e028:	6838      	ldr	r0, [r7, #0]
 800e02a:	f7ff fdd1 	bl	800dbd0 <_ZNK10TestResult12getTestCountEv>
 800e02e:	4603      	mov	r3, r0
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	47a0      	blx	r4
    print(" tests, ");
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	332c      	adds	r3, #44	; 0x2c
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4948      	ldr	r1, [pc, #288]	; (800e160 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	4798      	blx	r3
    print(result.getRunCount());
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	3334      	adds	r3, #52	; 0x34
 800e04a:	681c      	ldr	r4, [r3, #0]
 800e04c:	6838      	ldr	r0, [r7, #0]
 800e04e:	f7f7 ffb9 	bl	8005fc4 <_ZNK10TestResult11getRunCountEv>
 800e052:	4603      	mov	r3, r0
 800e054:	4619      	mov	r1, r3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	47a0      	blx	r4
    print(" ran, ");
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	332c      	adds	r3, #44	; 0x2c
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	4940      	ldr	r1, [pc, #256]	; (800e164 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	4798      	blx	r3
    print(result.getCheckCount());
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	3334      	adds	r3, #52	; 0x34
 800e06e:	681c      	ldr	r4, [r3, #0]
 800e070:	6838      	ldr	r0, [r7, #0]
 800e072:	f7f8 fc13 	bl	800689c <_ZNK10TestResult13getCheckCountEv>
 800e076:	4603      	mov	r3, r0
 800e078:	4619      	mov	r1, r3
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	47a0      	blx	r4
    print(" checks, ");
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	332c      	adds	r3, #44	; 0x2c
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4938      	ldr	r1, [pc, #224]	; (800e168 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	4798      	blx	r3
    print(result.getIgnoredCount());
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3334      	adds	r3, #52	; 0x34
 800e092:	681c      	ldr	r4, [r3, #0]
 800e094:	6838      	ldr	r0, [r7, #0]
 800e096:	f7f7 ffa1 	bl	8005fdc <_ZNK10TestResult15getIgnoredCountEv>
 800e09a:	4603      	mov	r3, r0
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	47a0      	blx	r4
    print(" ignored, ");
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	332c      	adds	r3, #44	; 0x2c
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	4930      	ldr	r1, [pc, #192]	; (800e16c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	3334      	adds	r3, #52	; 0x34
 800e0b6:	681c      	ldr	r4, [r3, #0]
 800e0b8:	6838      	ldr	r0, [r7, #0]
 800e0ba:	f7ff fd95 	bl	800dbe8 <_ZNK10TestResult19getFilteredOutCountEv>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	47a0      	blx	r4
    print(" filtered out, ");
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	332c      	adds	r3, #44	; 0x2c
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	4928      	ldr	r1, [pc, #160]	; (800e170 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	3334      	adds	r3, #52	; 0x34
 800e0da:	681c      	ldr	r4, [r3, #0]
 800e0dc:	6838      	ldr	r0, [r7, #0]
 800e0de:	f001 ff05 	bl	800feec <_ZNK10TestResult21getTotalExecutionTimeEv>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	47a0      	blx	r4
    print(" ms)");
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	332c      	adds	r3, #44	; 0x2c
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4920      	ldr	r1, [pc, #128]	; (800e174 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	4798      	blx	r3
    if (color_) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7a5b      	ldrb	r3, [r3, #9]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d006      	beq.n	800e10e <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	332c      	adds	r3, #44	; 0x2c
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	491b      	ldr	r1, [pc, #108]	; (800e178 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800e10e:	7bfb      	ldrb	r3, [r7, #15]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d009      	beq.n	800e128 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d106      	bne.n	800e128 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	332c      	adds	r3, #44	; 0x2c
 800e120:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800e122:	4916      	ldr	r1, [pc, #88]	; (800e17c <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	4798      	blx	r3
    }
    print("\n\n");
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	332c      	adds	r3, #44	; 0x2c
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	4913      	ldr	r1, [pc, #76]	; (800e180 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	4798      	blx	r3

    dotCount_ = 0;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	605a      	str	r2, [r3, #4]
}
 800e13c:	bf00      	nop
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	bd90      	pop	{r4, r7, pc}
 800e144:	08021bcc 	.word	0x08021bcc
 800e148:	08021bd0 	.word	0x08021bd0
 800e14c:	08021bd8 	.word	0x08021bd8
 800e150:	08021be4 	.word	0x08021be4
 800e154:	08021bf0 	.word	0x08021bf0
 800e158:	08021c00 	.word	0x08021c00
 800e15c:	08021c08 	.word	0x08021c08
 800e160:	08021c10 	.word	0x08021c10
 800e164:	08021c1c 	.word	0x08021c1c
 800e168:	08021c24 	.word	0x08021c24
 800e16c:	08021c30 	.word	0x08021c30
 800e170:	08021c3c 	.word	0x08021c3c
 800e174:	08021c4c 	.word	0x08021c4c
 800e178:	08021c54 	.word	0x08021c54
 800e17c:	08021c58 	.word	0x08021c58
 800e180:	08021cfc 	.word	0x08021cfc

0800e184 <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b084      	sub	sp, #16
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2b01      	cmp	r3, #1
 800e194:	d922      	bls.n	800e1dc <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	332c      	adds	r3, #44	; 0x2c
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4911      	ldr	r1, [pc, #68]	; (800e1e4 <_ZN10TestOutput12printTestRunEjj+0x60>)
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	4798      	blx	r3
        print(number);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	3334      	adds	r3, #52	; 0x34
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	68b9      	ldr	r1, [r7, #8]
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	4798      	blx	r3
        print(" of ");
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	332c      	adds	r3, #44	; 0x2c
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	490b      	ldr	r1, [pc, #44]	; (800e1e8 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800e1bc:	68f8      	ldr	r0, [r7, #12]
 800e1be:	4798      	blx	r3
        print(total);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3334      	adds	r3, #52	; 0x34
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	6879      	ldr	r1, [r7, #4]
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	4798      	blx	r3
        print("\n");
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	332c      	adds	r3, #44	; 0x2c
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4905      	ldr	r1, [pc, #20]	; (800e1ec <_ZN10TestOutput12printTestRunEjj+0x68>)
 800e1d8:	68f8      	ldr	r0, [r7, #12]
 800e1da:	4798      	blx	r3
    }
}
 800e1dc:	bf00      	nop
 800e1de:	3710      	adds	r7, #16
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	08021d00 	.word	0x08021d00
 800e1e8:	08021d0c 	.word	0x08021d0c
 800e1ec:	08021bcc 	.word	0x08021bcc

0800e1f0 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b084      	sub	sp, #16
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
 800e1f8:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800e1fa:	6838      	ldr	r0, [r7, #0]
 800e1fc:	f7fd ffa1 	bl	800c142 <_ZNK11TestFailure17isOutsideTestFileEv>
 800e200:	4603      	mov	r3, r0
 800e202:	2b00      	cmp	r3, #0
 800e204:	d105      	bne.n	800e212 <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800e206:	6838      	ldr	r0, [r7, #0]
 800e208:	f7fd ffad 	bl	800c166 <_ZNK11TestFailure18isInHelperFunctionEv>
 800e20c:	4603      	mov	r3, r0
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d001      	beq.n	800e216 <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800e212:	2301      	movs	r3, #1
 800e214:	e000      	b.n	800e218 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800e216:	2300      	movs	r3, #0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d004      	beq.n	800e226 <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 f81d 	bl	800e25e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800e224:	e003      	b.n	800e22e <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800e226:	6839      	ldr	r1, [r7, #0]
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f000 f86b 	bl	800e304 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3318      	adds	r3, #24
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f107 0208 	add.w	r2, r7, #8
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	4610      	mov	r0, r2
 800e23e:	4798      	blx	r3
 800e240:	f107 0308 	add.w	r3, r7, #8
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f000 f8b2 	bl	800e3b0 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800e24c:	f107 0308 	add.w	r3, r7, #8
 800e250:	4618      	mov	r0, r3
 800e252:	f7fc fb74 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800e256:	bf00      	nop
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b088      	sub	sp, #32
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
 800e266:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800e268:	683b      	ldr	r3, [r7, #0]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	331c      	adds	r3, #28
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f107 0208 	add.w	r2, r7, #8
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	4610      	mov	r0, r2
 800e278:	4798      	blx	r3
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	3320      	adds	r3, #32
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6838      	ldr	r0, [r7, #0]
 800e284:	4798      	blx	r3
 800e286:	4602      	mov	r2, r0
 800e288:	f107 0308 	add.w	r3, r7, #8
 800e28c:	4619      	mov	r1, r3
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f8be 	bl	800e410 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e294:	f107 0308 	add.w	r3, r7, #8
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fc fb50 	bl	800a93e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	330c      	adds	r3, #12
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	f107 0210 	add.w	r2, r7, #16
 800e2aa:	6839      	ldr	r1, [r7, #0]
 800e2ac:	4610      	mov	r0, r2
 800e2ae:	4798      	blx	r3
 800e2b0:	f107 0310 	add.w	r3, r7, #16
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f000 f85c 	bl	800e374 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800e2bc:	f107 0310 	add.w	r3, r7, #16
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7fc fb3c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	3308      	adds	r3, #8
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f107 0218 	add.w	r2, r7, #24
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4798      	blx	r3
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	3314      	adds	r3, #20
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6838      	ldr	r0, [r7, #0]
 800e2e2:	4798      	blx	r3
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	f107 0318 	add.w	r3, r7, #24
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f88f 	bl	800e410 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e2f2:	f107 0318 	add.w	r3, r7, #24
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7fc fb21 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800e2fc:	bf00      	nop
 800e2fe:	3720      	adds	r7, #32
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}

0800e304 <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b086      	sub	sp, #24
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	3308      	adds	r3, #8
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f107 0208 	add.w	r2, r7, #8
 800e31a:	6839      	ldr	r1, [r7, #0]
 800e31c:	4610      	mov	r0, r2
 800e31e:	4798      	blx	r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3314      	adds	r3, #20
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	6838      	ldr	r0, [r7, #0]
 800e32a:	4798      	blx	r3
 800e32c:	4602      	mov	r2, r0
 800e32e:	f107 0308 	add.w	r3, r7, #8
 800e332:	4619      	mov	r1, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f86b 	bl	800e410 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800e33a:	f107 0308 	add.w	r3, r7, #8
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fc fafd 	bl	800a93e <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	330c      	adds	r3, #12
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f107 0210 	add.w	r2, r7, #16
 800e350:	6839      	ldr	r1, [r7, #0]
 800e352:	4610      	mov	r0, r2
 800e354:	4798      	blx	r3
 800e356:	f107 0310 	add.w	r3, r7, #16
 800e35a:	4619      	mov	r1, r3
 800e35c:	6878      	ldr	r0, [r7, #4]
 800e35e:	f000 f809 	bl	800e374 <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800e362:	f107 0310 	add.w	r3, r7, #16
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc fae9 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800e36c:	bf00      	nop
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800e374:	b590      	push	{r4, r7, lr}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	332c      	adds	r3, #44	; 0x2c
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	4909      	ldr	r1, [pc, #36]	; (800e3ac <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	4798      	blx	r3
    print(testName.asCharString());
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	332c      	adds	r3, #44	; 0x2c
 800e392:	681c      	ldr	r4, [r3, #0]
 800e394:	6838      	ldr	r0, [r7, #0]
 800e396:	f7fc faa5 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800e39a:	4603      	mov	r3, r0
 800e39c:	4619      	mov	r1, r3
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	47a0      	blx	r4
}
 800e3a2:	bf00      	nop
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd90      	pop	{r4, r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	08021d14 	.word	0x08021d14

0800e3b0 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800e3b0:	b590      	push	{r4, r7, lr}
 800e3b2:	b083      	sub	sp, #12
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
    print("\n");
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	332c      	adds	r3, #44	; 0x2c
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4910      	ldr	r1, [pc, #64]	; (800e404 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	4798      	blx	r3
    print("\t");
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	332c      	adds	r3, #44	; 0x2c
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	490d      	ldr	r1, [pc, #52]	; (800e408 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	4798      	blx	r3
    print(reason.asCharString());
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	332c      	adds	r3, #44	; 0x2c
 800e3dc:	681c      	ldr	r4, [r3, #0]
 800e3de:	6838      	ldr	r0, [r7, #0]
 800e3e0:	f7fc fa80 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	47a0      	blx	r4
    print("\n\n");
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	332c      	adds	r3, #44	; 0x2c
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	4905      	ldr	r1, [pc, #20]	; (800e40c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	4798      	blx	r3
}
 800e3fa:	bf00      	nop
 800e3fc:	370c      	adds	r7, #12
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd90      	pop	{r4, r7, pc}
 800e402:	bf00      	nop
 800e404:	08021bcc 	.word	0x08021bcc
 800e408:	08021d24 	.word	0x08021d24
 800e40c:	08021cfc 	.word	0x08021cfc

0800e410 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800e410:	b590      	push	{r4, r7, lr}
 800e412:	b089      	sub	sp, #36	; 0x24
 800e414:	af00      	add	r7, sp, #0
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800e41c:	f7ff fbf0 	bl	800dc00 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	bf0c      	ite	eq
 800e426:	2301      	moveq	r3, #1
 800e428:	2300      	movne	r3, #0
 800e42a:	b2db      	uxtb	r3, r3
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d015      	beq.n	800e45c <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3354      	adds	r3, #84	; 0x54
 800e436:	681c      	ldr	r4, [r3, #0]
 800e438:	f107 0310 	add.w	r3, r7, #16
 800e43c:	68b9      	ldr	r1, [r7, #8]
 800e43e:	4618      	mov	r0, r3
 800e440:	f7fb ff19 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800e444:	f107 0310 	add.w	r3, r7, #16
 800e448:	687a      	ldr	r2, [r7, #4]
 800e44a:	4619      	mov	r1, r3
 800e44c:	68f8      	ldr	r0, [r7, #12]
 800e44e:	47a0      	blx	r4
 800e450:	f107 0310 	add.w	r3, r7, #16
 800e454:	4618      	mov	r0, r3
 800e456:	f7fc fa72 	bl	800a93e <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800e45a:	e014      	b.n	800e486 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	3350      	adds	r3, #80	; 0x50
 800e462:	681c      	ldr	r4, [r3, #0]
 800e464:	f107 0318 	add.w	r3, r7, #24
 800e468:	68b9      	ldr	r1, [r7, #8]
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fb ff03 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800e470:	f107 0318 	add.w	r3, r7, #24
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	4619      	mov	r1, r3
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	47a0      	blx	r4
 800e47c:	f107 0318 	add.w	r3, r7, #24
 800e480:	4618      	mov	r0, r3
 800e482:	f7fc fa5c 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800e486:	bf00      	nop
 800e488:	3724      	adds	r7, #36	; 0x24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd90      	pop	{r4, r7, pc}
	...

0800e490 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e490:	b590      	push	{r4, r7, lr}
 800e492:	b085      	sub	sp, #20
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
    print("\n");
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	332c      	adds	r3, #44	; 0x2c
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4916      	ldr	r1, [pc, #88]	; (800e500 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800e4a6:	68f8      	ldr	r0, [r7, #12]
 800e4a8:	4798      	blx	r3
    print(file.asCharString());
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	332c      	adds	r3, #44	; 0x2c
 800e4b0:	681c      	ldr	r4, [r3, #0]
 800e4b2:	68b8      	ldr	r0, [r7, #8]
 800e4b4:	f7fc fa16 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	4619      	mov	r1, r3
 800e4bc:	68f8      	ldr	r0, [r7, #12]
 800e4be:	47a0      	blx	r4
    print(":");
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	332c      	adds	r3, #44	; 0x2c
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	490e      	ldr	r1, [pc, #56]	; (800e504 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e4ca:	68f8      	ldr	r0, [r7, #12]
 800e4cc:	4798      	blx	r3
    print(lineNumber);
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3334      	adds	r3, #52	; 0x34
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6879      	ldr	r1, [r7, #4]
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	4798      	blx	r3
    print(":");
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	332c      	adds	r3, #44	; 0x2c
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	4907      	ldr	r1, [pc, #28]	; (800e504 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800e4e6:	68f8      	ldr	r0, [r7, #12]
 800e4e8:	4798      	blx	r3
    print(" error:");
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	332c      	adds	r3, #44	; 0x2c
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	4905      	ldr	r1, [pc, #20]	; (800e508 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	4798      	blx	r3
}
 800e4f8:	bf00      	nop
 800e4fa:	3714      	adds	r7, #20
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd90      	pop	{r4, r7, pc}
 800e500:	08021bcc 	.word	0x08021bcc
 800e504:	08021d28 	.word	0x08021d28
 800e508:	08021d2c 	.word	0x08021d2c

0800e50c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800e50c:	b590      	push	{r4, r7, lr}
 800e50e:	b085      	sub	sp, #20
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
    print("\n");
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	332c      	adds	r3, #44	; 0x2c
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4916      	ldr	r1, [pc, #88]	; (800e57c <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	4798      	blx	r3
    print(file.asCharString());
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	332c      	adds	r3, #44	; 0x2c
 800e52c:	681c      	ldr	r4, [r3, #0]
 800e52e:	68b8      	ldr	r0, [r7, #8]
 800e530:	f7fc f9d8 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800e534:	4603      	mov	r3, r0
 800e536:	4619      	mov	r1, r3
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	47a0      	blx	r4
    print("(");
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	332c      	adds	r3, #44	; 0x2c
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	490e      	ldr	r1, [pc, #56]	; (800e580 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800e546:	68f8      	ldr	r0, [r7, #12]
 800e548:	4798      	blx	r3
    print(lineNumber);
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3334      	adds	r3, #52	; 0x34
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	6879      	ldr	r1, [r7, #4]
 800e554:	68f8      	ldr	r0, [r7, #12]
 800e556:	4798      	blx	r3
    print("):");
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	332c      	adds	r3, #44	; 0x2c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4908      	ldr	r1, [pc, #32]	; (800e584 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	4798      	blx	r3
    print(" error:");
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	332c      	adds	r3, #44	; 0x2c
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	4906      	ldr	r1, [pc, #24]	; (800e588 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800e570:	68f8      	ldr	r0, [r7, #12]
 800e572:	4798      	blx	r3
}
 800e574:	bf00      	nop
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd90      	pop	{r4, r7, pc}
 800e57c:	08021bcc 	.word	0x08021bcc
 800e580:	08021d34 	.word	0x08021d34
 800e584:	08021d38 	.word	0x08021d38
 800e588:	08021d2c 	.word	0x08021d2c

0800e58c <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	7a1b      	ldrb	r3, [r3, #8]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d106      	bne.n	800e5ac <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	3328      	adds	r3, #40	; 0x28
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	4798      	blx	r3
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
    while (*s) {
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d009      	beq.n	800e5da <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800e5c6:	4b0a      	ldr	r3, [pc, #40]	; (800e5f0 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	683a      	ldr	r2, [r7, #0]
 800e5cc:	7812      	ldrb	r2, [r2, #0]
 800e5ce:	4610      	mov	r0, r2
 800e5d0:	4798      	blx	r3
        s++;
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	603b      	str	r3, [r7, #0]
    while (*s) {
 800e5d8:	e7f1      	b.n	800e5be <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	334c      	adds	r3, #76	; 0x4c
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	4798      	blx	r3
}
 800e5e6:	bf00      	nop
 800e5e8:	3708      	adds	r7, #8
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	200000bc 	.word	0x200000bc

0800e5f4 <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800e5fc:	4b03      	ldr	r3, [pc, #12]	; (800e60c <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	4798      	blx	r3
}
 800e602:	bf00      	nop
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	200000c0 	.word	0x200000c0

0800e610 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f7ff fb00 	bl	800dc20 <_ZN10TestOutputC1Ev>
 800e620:	4a06      	ldr	r2, [pc, #24]	; (800e63c <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	601a      	str	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2200      	movs	r2, #0
 800e62a:	611a      	str	r2, [r3, #16]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	615a      	str	r2, [r3, #20]
{
}
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4618      	mov	r0, r3
 800e636:	3708      	adds	r7, #8
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd80      	pop	{r7, pc}
 800e63c:	08024924 	.word	0x08024924

0800e640 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	4a0e      	ldr	r2, [pc, #56]	; (800e684 <_ZN19CompositeTestOutputD1Ev+0x44>)
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	691b      	ldr	r3, [r3, #16]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d004      	beq.n	800e660 <_ZN19CompositeTestOutputD1Ev+0x20>
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	3204      	adds	r2, #4
 800e65a:	6812      	ldr	r2, [r2, #0]
 800e65c:	4618      	mov	r0, r3
 800e65e:	4790      	blx	r2
  delete outputTwo_;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	695b      	ldr	r3, [r3, #20]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d004      	beq.n	800e672 <_ZN19CompositeTestOutputD1Ev+0x32>
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	3204      	adds	r2, #4
 800e66c:	6812      	ldr	r2, [r2, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	4618      	mov	r0, r3
 800e676:	f7ff faf1 	bl	800dc5c <_ZN10TestOutputD1Ev>
}
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	08024924 	.word	0x08024924

0800e688 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
}
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f7ff ffd5 	bl	800e640 <_ZN19CompositeTestOutputD1Ev>
 800e696:	2118      	movs	r1, #24
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f7f9 f9e9 	bl	8007a70 <_ZdlPvj>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	3708      	adds	r7, #8
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	3204      	adds	r2, #4
 800e6be:	6812      	ldr	r2, [r2, #0]
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	4790      	blx	r2
  outputOne_ = output;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	683a      	ldr	r2, [r7, #0]
 800e6c8:	611a      	str	r2, [r3, #16]
}
 800e6ca:	bf00      	nop
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}

0800e6d2 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800e6d2:	b580      	push	{r7, lr}
 800e6d4:	b082      	sub	sp, #8
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d004      	beq.n	800e6ee <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	3204      	adds	r2, #4
 800e6e8:	6812      	ldr	r2, [r2, #0]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	4790      	blx	r2
  outputTwo_ = output;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	615a      	str	r2, [r3, #20]
}
 800e6f4:	bf00      	nop
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d008      	beq.n	800e71e <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	691a      	ldr	r2, [r3, #16]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	3308      	adds	r3, #8
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4610      	mov	r0, r2
 800e71c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	695b      	ldr	r3, [r3, #20]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d008      	beq.n	800e738 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	695a      	ldr	r2, [r3, #20]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	3308      	adds	r3, #8
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4610      	mov	r0, r2
 800e736:	4798      	blx	r3
}
 800e738:	bf00      	nop
 800e73a:	3708      	adds	r7, #8
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b082      	sub	sp, #8
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	691b      	ldr	r3, [r3, #16]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d009      	beq.n	800e766 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	691a      	ldr	r2, [r3, #16]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	330c      	adds	r3, #12
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6839      	ldr	r1, [r7, #0]
 800e762:	4610      	mov	r0, r2
 800e764:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d009      	beq.n	800e782 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	695a      	ldr	r2, [r3, #20]
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	330c      	adds	r3, #12
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	4610      	mov	r0, r2
 800e780:	4798      	blx	r3
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b082      	sub	sp, #8
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
 800e792:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	691b      	ldr	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d009      	beq.n	800e7b0 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691a      	ldr	r2, [r3, #16]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	3310      	adds	r3, #16
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	4610      	mov	r0, r2
 800e7ae:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	695b      	ldr	r3, [r3, #20]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d009      	beq.n	800e7cc <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	695a      	ldr	r2, [r3, #20]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	695b      	ldr	r3, [r3, #20]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3310      	adds	r3, #16
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	6839      	ldr	r1, [r7, #0]
 800e7c8:	4610      	mov	r0, r2
 800e7ca:	4798      	blx	r3
}
 800e7cc:	bf00      	nop
 800e7ce:	3708      	adds	r7, #8
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}

0800e7d4 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	691b      	ldr	r3, [r3, #16]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d009      	beq.n	800e7fa <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	691a      	ldr	r2, [r3, #16]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	691b      	ldr	r3, [r3, #16]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	3314      	adds	r3, #20
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6839      	ldr	r1, [r7, #0]
 800e7f6:	4610      	mov	r0, r2
 800e7f8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	695b      	ldr	r3, [r3, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	695a      	ldr	r2, [r3, #20]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	695b      	ldr	r3, [r3, #20]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	3314      	adds	r3, #20
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	4610      	mov	r0, r2
 800e814:	4798      	blx	r3
}
 800e816:	bf00      	nop
 800e818:	3708      	adds	r7, #8
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}

0800e81e <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800e81e:	b580      	push	{r7, lr}
 800e820:	b082      	sub	sp, #8
 800e822:	af00      	add	r7, sp, #0
 800e824:	6078      	str	r0, [r7, #4]
 800e826:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d009      	beq.n	800e844 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	691a      	ldr	r2, [r3, #16]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3318      	adds	r3, #24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	6839      	ldr	r1, [r7, #0]
 800e840:	4610      	mov	r0, r2
 800e842:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	695b      	ldr	r3, [r3, #20]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d009      	beq.n	800e860 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	695a      	ldr	r2, [r3, #20]
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3318      	adds	r3, #24
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	6839      	ldr	r1, [r7, #0]
 800e85c:	4610      	mov	r0, r2
 800e85e:	4798      	blx	r3
}
 800e860:	bf00      	nop
 800e862:	3708      	adds	r7, #8
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b082      	sub	sp, #8
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	691b      	ldr	r3, [r3, #16]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d009      	beq.n	800e88e <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	691a      	ldr	r2, [r3, #16]
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	331c      	adds	r3, #28
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	4610      	mov	r0, r2
 800e88c:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d009      	beq.n	800e8aa <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	695a      	ldr	r2, [r3, #20]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	331c      	adds	r3, #28
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	4798      	blx	r3
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b082      	sub	sp, #8
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d009      	beq.n	800e8da <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	691a      	ldr	r2, [r3, #16]
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	691b      	ldr	r3, [r3, #16]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	3320      	adds	r3, #32
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	78f9      	ldrb	r1, [r7, #3]
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	695b      	ldr	r3, [r3, #20]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d009      	beq.n	800e8f6 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	695a      	ldr	r2, [r3, #20]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	3320      	adds	r3, #32
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	78f9      	ldrb	r1, [r7, #3]
 800e8f2:	4610      	mov	r0, r2
 800e8f4:	4798      	blx	r3
}
 800e8f6:	bf00      	nop
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b082      	sub	sp, #8
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d008      	beq.n	800e920 <_ZN19CompositeTestOutput5colorEv+0x22>
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	691a      	ldr	r2, [r3, #16]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	691b      	ldr	r3, [r3, #16]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	3324      	adds	r3, #36	; 0x24
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	4610      	mov	r0, r2
 800e91e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	695b      	ldr	r3, [r3, #20]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d008      	beq.n	800e93a <_ZN19CompositeTestOutput5colorEv+0x3c>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	695a      	ldr	r2, [r3, #20]
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	3324      	adds	r3, #36	; 0x24
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4610      	mov	r0, r2
 800e938:	4798      	blx	r3
}
 800e93a:	bf00      	nop
 800e93c:	3708      	adds	r7, #8
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b082      	sub	sp, #8
 800e946:	af00      	add	r7, sp, #0
 800e948:	6078      	str	r0, [r7, #4]
 800e94a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	691b      	ldr	r3, [r3, #16]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d009      	beq.n	800e968 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	691a      	ldr	r2, [r3, #16]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	691b      	ldr	r3, [r3, #16]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	3328      	adds	r3, #40	; 0x28
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	6839      	ldr	r1, [r7, #0]
 800e964:	4610      	mov	r0, r2
 800e966:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	695b      	ldr	r3, [r3, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d009      	beq.n	800e984 <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	695a      	ldr	r2, [r3, #20]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	695b      	ldr	r3, [r3, #20]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	3328      	adds	r3, #40	; 0x28
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6839      	ldr	r1, [r7, #0]
 800e980:	4610      	mov	r0, r2
 800e982:	4798      	blx	r3
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d009      	beq.n	800e9b2 <_ZN19CompositeTestOutput5printEPKc+0x26>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	691a      	ldr	r2, [r3, #16]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	332c      	adds	r3, #44	; 0x2c
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	6839      	ldr	r1, [r7, #0]
 800e9ae:	4610      	mov	r0, r2
 800e9b0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	695b      	ldr	r3, [r3, #20]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d009      	beq.n	800e9ce <_ZN19CompositeTestOutput5printEPKc+0x42>
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	695a      	ldr	r2, [r3, #20]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	695b      	ldr	r3, [r3, #20]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	332c      	adds	r3, #44	; 0x2c
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6839      	ldr	r1, [r7, #0]
 800e9ca:	4610      	mov	r0, r2
 800e9cc:	4798      	blx	r3
}
 800e9ce:	bf00      	nop
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b082      	sub	sp, #8
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	691b      	ldr	r3, [r3, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d009      	beq.n	800e9fc <_ZN19CompositeTestOutput5printEl+0x26>
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	691a      	ldr	r2, [r3, #16]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	691b      	ldr	r3, [r3, #16]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3330      	adds	r3, #48	; 0x30
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	4610      	mov	r0, r2
 800e9fa:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	695b      	ldr	r3, [r3, #20]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d009      	beq.n	800ea18 <_ZN19CompositeTestOutput5printEl+0x42>
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	695a      	ldr	r2, [r3, #20]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	695b      	ldr	r3, [r3, #20]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	3330      	adds	r3, #48	; 0x30
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	4610      	mov	r0, r2
 800ea16:	4798      	blx	r3
}
 800ea18:	bf00      	nop
 800ea1a:	3708      	adds	r7, #8
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	691b      	ldr	r3, [r3, #16]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d009      	beq.n	800ea46 <_ZN19CompositeTestOutput5printEj+0x26>
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	691a      	ldr	r2, [r3, #16]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	691b      	ldr	r3, [r3, #16]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	3334      	adds	r3, #52	; 0x34
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6839      	ldr	r1, [r7, #0]
 800ea42:	4610      	mov	r0, r2
 800ea44:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	695b      	ldr	r3, [r3, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d009      	beq.n	800ea62 <_ZN19CompositeTestOutput5printEj+0x42>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	695a      	ldr	r2, [r3, #20]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	695b      	ldr	r3, [r3, #20]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	3334      	adds	r3, #52	; 0x34
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	4610      	mov	r0, r2
 800ea60:	4798      	blx	r3
}
 800ea62:	bf00      	nop
 800ea64:	3708      	adds	r7, #8
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800ea6a:	b580      	push	{r7, lr}
 800ea6c:	b084      	sub	sp, #16
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	60f8      	str	r0, [r7, #12]
 800ea72:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00a      	beq.n	800ea94 <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	691a      	ldr	r2, [r3, #16]
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	3338      	adds	r3, #56	; 0x38
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	ed97 0b00 	vldr	d0, [r7]
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	695b      	ldr	r3, [r3, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d00a      	beq.n	800eab2 <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	695a      	ldr	r2, [r3, #20]
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	695b      	ldr	r3, [r3, #20]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	3338      	adds	r3, #56	; 0x38
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	ed97 0b00 	vldr	d0, [r7]
 800eaae:	4610      	mov	r0, r2
 800eab0:	4798      	blx	r3
}
 800eab2:	bf00      	nop
 800eab4:	3710      	adds	r7, #16
 800eab6:	46bd      	mov	sp, r7
 800eab8:	bd80      	pop	{r7, pc}

0800eaba <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800eaba:	b580      	push	{r7, lr}
 800eabc:	b082      	sub	sp, #8
 800eabe:	af00      	add	r7, sp, #0
 800eac0:	6078      	str	r0, [r7, #4]
 800eac2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	691b      	ldr	r3, [r3, #16]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d009      	beq.n	800eae0 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	691a      	ldr	r2, [r3, #16]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	333c      	adds	r3, #60	; 0x3c
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	6839      	ldr	r1, [r7, #0]
 800eadc:	4610      	mov	r0, r2
 800eade:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	695b      	ldr	r3, [r3, #20]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d009      	beq.n	800eafc <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	695a      	ldr	r2, [r3, #20]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	333c      	adds	r3, #60	; 0x3c
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	4610      	mov	r0, r2
 800eafa:	4798      	blx	r3
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d009      	beq.n	800eb2a <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	691a      	ldr	r2, [r3, #16]
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	3344      	adds	r3, #68	; 0x44
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	6839      	ldr	r1, [r7, #0]
 800eb26:	4610      	mov	r0, r2
 800eb28:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	695b      	ldr	r3, [r3, #20]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d009      	beq.n	800eb46 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	695a      	ldr	r2, [r3, #20]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	3344      	adds	r3, #68	; 0x44
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	4610      	mov	r0, r2
 800eb44:	4798      	blx	r3
}
 800eb46:	bf00      	nop
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}

0800eb4e <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800eb4e:	b580      	push	{r7, lr}
 800eb50:	b082      	sub	sp, #8
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d008      	beq.n	800eb70 <_ZN19CompositeTestOutput5flushEv+0x22>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	691a      	ldr	r2, [r3, #16]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	691b      	ldr	r3, [r3, #16]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	334c      	adds	r3, #76	; 0x4c
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	695b      	ldr	r3, [r3, #20]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d008      	beq.n	800eb8a <_ZN19CompositeTestOutput5flushEv+0x3c>
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	695a      	ldr	r2, [r3, #20]
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	334c      	adds	r3, #76	; 0x4c
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	4610      	mov	r0, r2
 800eb88:	4798      	blx	r3
}
 800eb8a:	bf00      	nop
 800eb8c:	3708      	adds	r7, #8
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800eb92:	b480      	push	{r7}
 800eb94:	b085      	sub	sp, #20
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
    }
 800eb9e:	bf00      	nop
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800ebaa:	b480      	push	{r7}
 800ebac:	b085      	sub	sp, #20
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	60f8      	str	r0, [r7, #12]
 800ebb2:	60b9      	str	r1, [r7, #8]
 800ebb4:	607a      	str	r2, [r7, #4]
    }
 800ebb6:	bf00      	nop
 800ebb8:	3714      	adds	r7, #20
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
	...

0800ebc4 <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b082      	sub	sp, #8
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800ebce:	4a0b      	ldr	r2, [pc, #44]	; (800ebfc <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	f000 f9ce 	bl	800ef74 <_ZN14NullTestPlugin8instanceEv>
 800ebd8:	4602      	mov	r2, r0
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	605a      	str	r2, [r3, #4]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	3308      	adds	r3, #8
 800ebe2:	6839      	ldr	r1, [r7, #0]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7fb fb46 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2201      	movs	r2, #1
 800ebee:	741a      	strb	r2, [r3, #16]
{
}
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3708      	adds	r7, #8
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	08024ae0 	.word	0x08024ae0

0800ec00 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800ec0a:	4a0a      	ldr	r2, [pc, #40]	; (800ec34 <_ZN10TestPluginC1EPS_+0x34>)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	683a      	ldr	r2, [r7, #0]
 800ec14:	605a      	str	r2, [r3, #4]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3308      	adds	r3, #8
 800ec1a:	4907      	ldr	r1, [pc, #28]	; (800ec38 <_ZN10TestPluginC1EPS_+0x38>)
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7fb fad6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2201      	movs	r2, #1
 800ec26:	741a      	strb	r2, [r3, #16]
{
}
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3708      	adds	r7, #8
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}
 800ec32:	bf00      	nop
 800ec34:	08024ae0 	.word	0x08024ae0
 800ec38:	08021d3c 	.word	0x08021d3c

0800ec3c <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	4a06      	ldr	r2, [pc, #24]	; (800ec60 <_ZN10TestPluginD1Ev+0x24>)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	601a      	str	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	3308      	adds	r3, #8
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7fb fe75 	bl	800a93e <_ZN12SimpleStringD1Ev>
{
}
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4618      	mov	r0, r3
 800ec58:	3708      	adds	r7, #8
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	08024ae0 	.word	0x08024ae0

0800ec64 <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
}
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff ffe5 	bl	800ec3c <_ZN10TestPluginD1Ev>
 800ec72:	2114      	movs	r1, #20
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f7f8 fefb 	bl	8007a70 <_ZdlPvj>
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	605a      	str	r2, [r3, #4]
    return this;
 800ec94:	687b      	ldr	r3, [r7, #4]
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b084      	sub	sp, #16
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	60f8      	str	r0, [r7, #12]
 800ecaa:	60b9      	str	r1, [r7, #8]
 800ecac:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	7c1b      	ldrb	r3, [r3, #16]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d007      	beq.n	800ecc6 <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	3308      	adds	r3, #8
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	687a      	ldr	r2, [r7, #4]
 800ecc0:	68b9      	ldr	r1, [r7, #8]
 800ecc2:	68f8      	ldr	r0, [r7, #12]
 800ecc4:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6858      	ldr	r0, [r3, #4]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	3314      	adds	r3, #20
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	68b9      	ldr	r1, [r7, #8]
 800ecd8:	4798      	blx	r3
}
 800ecda:	bf00      	nop
 800ecdc:	3710      	adds	r7, #16
 800ecde:	46bd      	mov	sp, r7
 800ece0:	bd80      	pop	{r7, pc}

0800ece2 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800ece2:	b580      	push	{r7, lr}
 800ece4:	b084      	sub	sp, #16
 800ece6:	af00      	add	r7, sp, #0
 800ece8:	60f8      	str	r0, [r7, #12]
 800ecea:	60b9      	str	r1, [r7, #8]
 800ecec:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6858      	ldr	r0, [r3, #4]
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	685b      	ldr	r3, [r3, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	3318      	adds	r3, #24
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	68b9      	ldr	r1, [r7, #8]
 800ed00:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	7c1b      	ldrb	r3, [r3, #16]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d007      	beq.n	800ed1a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	330c      	adds	r3, #12
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	68b9      	ldr	r1, [r7, #8]
 800ed16:	68f8      	ldr	r0, [r7, #12]
 800ed18:	4798      	blx	r3
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}

0800ed22 <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800ed22:	b590      	push	{r4, r7, lr}
 800ed24:	b085      	sub	sp, #20
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	607a      	str	r2, [r7, #4]
 800ed2e:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	331c      	adds	r3, #28
 800ed36:	681c      	ldr	r4, [r3, #0]
 800ed38:	683b      	ldr	r3, [r7, #0]
 800ed3a:	687a      	ldr	r2, [r7, #4]
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	47a0      	blx	r4
 800ed42:	4603      	mov	r3, r0
}
 800ed44:	4618      	mov	r0, r3
 800ed46:	3714      	adds	r7, #20
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	bd90      	pop	{r4, r7, pc}

0800ed4c <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800ed4c:	b590      	push	{r4, r7, lr}
 800ed4e:	b085      	sub	sp, #20
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	3310      	adds	r3, #16
 800ed60:	681c      	ldr	r4, [r3, #0]
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	68b9      	ldr	r1, [r7, #8]
 800ed68:	68f8      	ldr	r0, [r7, #12]
 800ed6a:	47a0      	blx	r4
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800ed72:	2301      	movs	r3, #1
 800ed74:	e011      	b.n	800ed9a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d00c      	beq.n	800ed98 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	6858      	ldr	r0, [r3, #4]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	331c      	adds	r3, #28
 800ed8a:	681c      	ldr	r4, [r3, #0]
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	687a      	ldr	r2, [r7, #4]
 800ed90:	68b9      	ldr	r1, [r7, #8]
 800ed92:	47a0      	blx	r4
 800ed94:	4603      	mov	r3, r0
 800ed96:	e000      	b.n	800ed9a <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800ed98:	2300      	movs	r3, #0
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3714      	adds	r7, #20
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd90      	pop	{r4, r7, pc}

0800eda2 <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800eda2:	b480      	push	{r7}
 800eda4:	b083      	sub	sp, #12
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
    return name_;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	3308      	adds	r3, #8
}
 800edae:	4618      	mov	r0, r3
 800edb0:	370c      	adds	r7, #12
 800edb2:	46bd      	mov	sp, r7
 800edb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb8:	4770      	bx	lr

0800edba <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
 800edc2:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3308      	adds	r3, #8
 800edc8:	4619      	mov	r1, r3
 800edca:	6838      	ldr	r0, [r7, #0]
 800edcc:	f7fb fdc3 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800edd0:	4603      	mov	r3, r0
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d001      	beq.n	800edda <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	e00d      	b.n	800edf6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d007      	beq.n	800edf2 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	685b      	ldr	r3, [r3, #4]
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff ffe6 	bl	800edba <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800edee:	4603      	mov	r3, r0
 800edf0:	e001      	b.n	800edf6 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800edfe:	b480      	push	{r7}
 800ee00:	b083      	sub	sp, #12
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
    return next_;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	685b      	ldr	r3, [r3, #4]
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	370c      	adds	r7, #12
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee14:	4770      	bx	lr

0800ee16 <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800ee20:	2300      	movs	r3, #0
 800ee22:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	685b      	ldr	r3, [r3, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d00e      	beq.n	800ee4a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	685b      	ldr	r3, [r3, #4]
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7ff ffb6 	bl	800eda2 <_ZN10TestPlugin7getNameEv>
 800ee36:	4603      	mov	r3, r0
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fb fd8b 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800ee40:	4603      	mov	r3, r0
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800ee46:	2301      	movs	r3, #1
 800ee48:	e000      	b.n	800ee4c <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d007      	beq.n	800ee60 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	685a      	ldr	r2, [r3, #4]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800ee60:	68fb      	ldr	r3, [r7, #12]
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}

0800ee6a <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800ee6a:	b480      	push	{r7}
 800ee6c:	b083      	sub	sp, #12
 800ee6e:	af00      	add	r7, sp, #0
 800ee70:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2200      	movs	r2, #0
 800ee76:	741a      	strb	r2, [r3, #16]
}
 800ee78:	bf00      	nop
 800ee7a:	370c      	adds	r7, #12
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee82:	4770      	bx	lr

0800ee84 <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	741a      	strb	r2, [r3, #16]
}
 800ee92:	bf00      	nop
 800ee94:	370c      	adds	r7, #12
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr

0800ee9e <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800ee9e:	b480      	push	{r7}
 800eea0:	b083      	sub	sp, #12
 800eea2:	af00      	add	r7, sp, #0
 800eea4:	6078      	str	r0, [r7, #4]
    return enabled_;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7c1b      	ldrb	r3, [r3, #16]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	370c      	adds	r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
	...

0800eeb8 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6839      	ldr	r1, [r7, #0]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f7ff fe7c 	bl	800ebc4 <_ZN10TestPluginC1ERK12SimpleString>
 800eecc:	4a05      	ldr	r2, [pc, #20]	; (800eee4 <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800eed2:	4b05      	ldr	r3, [pc, #20]	; (800eee8 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	601a      	str	r2, [r3, #0]
}
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	4618      	mov	r0, r3
 800eedc:	3708      	adds	r7, #8
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	08024a9c 	.word	0x08024a9c
 800eee8:	20000720 	.word	0x20000720

0800eeec <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b087      	sub	sp, #28
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	60f8      	str	r0, [r7, #12]
 800eef4:	60b9      	str	r1, [r7, #8]
 800eef6:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800eef8:	4b0e      	ldr	r3, [pc, #56]	; (800ef34 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	617b      	str	r3, [r7, #20]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	db0d      	blt.n	800ef22 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800ef06:	4a0c      	ldr	r2, [pc, #48]	; (800ef38 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ef0e:	490a      	ldr	r1, [pc, #40]	; (800ef38 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	00db      	lsls	r3, r3, #3
 800ef14:	440b      	add	r3, r1
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	617b      	str	r3, [r7, #20]
 800ef20:	e7ee      	b.n	800ef00 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800ef22:	4b04      	ldr	r3, [pc, #16]	; (800ef34 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800ef24:	2200      	movs	r2, #0
 800ef26:	601a      	str	r2, [r3, #0]
}
 800ef28:	bf00      	nop
 800ef2a:	371c      	adds	r7, #28
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr
 800ef34:	20000720 	.word	0x20000720
 800ef38:	20000724 	.word	0x20000724

0800ef3c <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2100      	movs	r1, #0
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7ff fe59 	bl	800ec00 <_ZN10TestPluginC1EPS_>
 800ef4e:	4a04      	ldr	r2, [pc, #16]	; (800ef60 <_ZN14NullTestPluginC1Ev+0x24>)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	601a      	str	r2, [r3, #0]
{
}
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4618      	mov	r0, r3
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	08024a58 	.word	0x08024a58

0800ef64 <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800ef64:	b580      	push	{r7, lr}
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	4801      	ldr	r0, [pc, #4]	; (800ef70 <__tcf_0+0xc>)
 800ef6a:	f000 f849 	bl	800f000 <_ZN14NullTestPluginD1Ev>
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	20000824 	.word	0x20000824

0800ef74 <_ZN14NullTestPlugin8instanceEv>:
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800ef78:	4b12      	ldr	r3, [pc, #72]	; (800efc4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	f3bf 8f5b 	dmb	ish
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	f003 0301 	and.w	r3, r3, #1
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	bf0c      	ite	eq
 800ef8a:	2301      	moveq	r3, #1
 800ef8c:	2300      	movne	r3, #0
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d013      	beq.n	800efbc <_ZN14NullTestPlugin8instanceEv+0x48>
 800ef94:	480b      	ldr	r0, [pc, #44]	; (800efc4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800ef96:	f00d ffdb 	bl	801cf50 <__cxa_guard_acquire>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	bf14      	ite	ne
 800efa0:	2301      	movne	r3, #1
 800efa2:	2300      	moveq	r3, #0
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d008      	beq.n	800efbc <_ZN14NullTestPlugin8instanceEv+0x48>
 800efaa:	4807      	ldr	r0, [pc, #28]	; (800efc8 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800efac:	f7ff ffc6 	bl	800ef3c <_ZN14NullTestPluginC1Ev>
 800efb0:	4804      	ldr	r0, [pc, #16]	; (800efc4 <_ZN14NullTestPlugin8instanceEv+0x50>)
 800efb2:	f00d ffd9 	bl	801cf68 <__cxa_guard_release>
 800efb6:	4805      	ldr	r0, [pc, #20]	; (800efcc <_ZN14NullTestPlugin8instanceEv+0x58>)
 800efb8:	f00d fffd 	bl	801cfb6 <atexit>
    return &_instance;
 800efbc:	4b02      	ldr	r3, [pc, #8]	; (800efc8 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	20000838 	.word	0x20000838
 800efc8:	20000824 	.word	0x20000824
 800efcc:	0800ef65 	.word	0x0800ef65

0800efd0 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b085      	sub	sp, #20
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	607a      	str	r2, [r7, #4]
}
 800efdc:	bf00      	nop
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	607a      	str	r2, [r7, #4]
}
 800eff4:	bf00      	nop
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	4a05      	ldr	r2, [pc, #20]	; (800f020 <_ZN14NullTestPluginD1Ev+0x20>)
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	601a      	str	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fe13 	bl	800ec3c <_ZN10TestPluginD1Ev>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}
 800f020:	08024a58 	.word	0x08024a58

0800f024 <_ZN14NullTestPluginD0Ev>:
 800f024:	b580      	push	{r7, lr}
 800f026:	b082      	sub	sp, #8
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f7ff ffe7 	bl	800f000 <_ZN14NullTestPluginD1Ev>
 800f032:	2114      	movs	r1, #20
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f7f8 fd1b 	bl	8007a70 <_ZdlPvj>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	4618      	mov	r0, r3
 800f03e:	3708      	adds	r7, #8
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800f04c:	4a0f      	ldr	r2, [pc, #60]	; (800f08c <_ZN12TestRegistryC1Ev+0x48>)
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2200      	movs	r2, #0
 800f056:	605a      	str	r2, [r3, #4]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	609a      	str	r2, [r3, #8]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2200      	movs	r2, #0
 800f062:	60da      	str	r2, [r3, #12]
 800f064:	f7ff ff86 	bl	800ef74 <_ZN14NullTestPlugin8instanceEv>
 800f068:	4602      	mov	r2, r0
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	611a      	str	r2, [r3, #16]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2200      	movs	r2, #0
 800f072:	751a      	strb	r2, [r3, #20]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	2200      	movs	r2, #0
 800f078:	619a      	str	r2, [r3, #24]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2200      	movs	r2, #0
 800f07e:	771a      	strb	r2, [r3, #28]
{
}
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4618      	mov	r0, r3
 800f084:	3708      	adds	r7, #8
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	08024b24 	.word	0x08024b24

0800f090 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	4a04      	ldr	r2, [pc, #16]	; (800f0ac <_ZN12TestRegistryD1Ev+0x1c>)
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	601a      	str	r2, [r3, #0]
{
}
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr
 800f0ac:	08024b24 	.word	0x08024b24

0800f0b0 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
}
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff ffe9 	bl	800f090 <_ZN12TestRegistryD1Ev>
 800f0be:	2120      	movs	r1, #32
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7f8 fcd5 	bl	8007a70 <_ZdlPvj>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
 800f0d8:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3308      	adds	r3, #8
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	6852      	ldr	r2, [r2, #4]
 800f0e6:	4611      	mov	r1, r2
 800f0e8:	6838      	ldr	r0, [r7, #0]
 800f0ea:	4798      	blx	r3
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	605a      	str	r2, [r3, #4]
}
 800f0f2:	bf00      	nop
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800f0fa:	b580      	push	{r7, lr}
 800f0fc:	b084      	sub	sp, #16
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800f104:	2301      	movs	r3, #1
 800f106:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	3308      	adds	r3, #8
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6838      	ldr	r0, [r7, #0]
 800f112:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	60bb      	str	r3, [r7, #8]
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d05c      	beq.n	800f1da <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7d1b      	ldrb	r3, [r3, #20]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d005      	beq.n	800f134 <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	3380      	adds	r3, #128	; 0x80
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	68b8      	ldr	r0, [r7, #8]
 800f132:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	7f1b      	ldrb	r3, [r3, #28]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d005      	beq.n	800f148 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	3384      	adds	r3, #132	; 0x84
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	68b8      	ldr	r0, [r7, #8]
 800f146:	4798      	blx	r3

        if (groupStart) {
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d008      	beq.n	800f160 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	3310      	adds	r3, #16
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68b9      	ldr	r1, [r7, #8]
 800f158:	6838      	ldr	r0, [r7, #0]
 800f15a:	4798      	blx	r3
            groupStart = false;
 800f15c:	2300      	movs	r3, #0
 800f15e:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	3320      	adds	r3, #32
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	6838      	ldr	r0, [r7, #0]
 800f16a:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800f16c:	683a      	ldr	r2, [r7, #0]
 800f16e:	68b9      	ldr	r1, [r7, #8]
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 fb79 	bl	800f868 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f176:	4603      	mov	r3, r0
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d016      	beq.n	800f1aa <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	3318      	adds	r3, #24
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	68b9      	ldr	r1, [r7, #8]
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	3390      	adds	r3, #144	; 0x90
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	687a      	ldr	r2, [r7, #4]
 800f194:	6911      	ldr	r1, [r2, #16]
 800f196:	683a      	ldr	r2, [r7, #0]
 800f198:	68b8      	ldr	r0, [r7, #8]
 800f19a:	4798      	blx	r3
            result.currentTestEnded(test);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	331c      	adds	r3, #28
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68b9      	ldr	r1, [r7, #8]
 800f1a6:	6838      	ldr	r0, [r7, #0]
 800f1a8:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800f1aa:	68b9      	ldr	r1, [r7, #8]
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 fa5b 	bl	800f668 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d008      	beq.n	800f1ca <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3314      	adds	r3, #20
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	68b9      	ldr	r1, [r7, #8]
 800f1c6:	6838      	ldr	r0, [r7, #0]
 800f1c8:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	330c      	adds	r3, #12
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	68b8      	ldr	r0, [r7, #8]
 800f1d4:	4798      	blx	r3
 800f1d6:	60b8      	str	r0, [r7, #8]
 800f1d8:	e79f      	b.n	800f11a <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	330c      	adds	r3, #12
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6838      	ldr	r0, [r7, #0]
 800f1e4:	4798      	blx	r3
    currentRepetition_++;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	619a      	str	r2, [r3, #24]
}
 800f1f0:	bf00      	nop
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b08f      	sub	sp, #60	; 0x3c
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800f202:	f107 0314 	add.w	r3, r7, #20
 800f206:	4953      	ldr	r1, [pc, #332]	; (800f354 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fa ffe0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	637b      	str	r3, [r7, #52]	; 0x34
 800f214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f216:	2b00      	cmp	r3, #0
 800f218:	d04d      	beq.n	800f2b6 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800f21a:	f107 030c 	add.w	r3, r7, #12
 800f21e:	494d      	ldr	r1, [pc, #308]	; (800f354 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f220:	4618      	mov	r0, r3
 800f222:	f7fa ffd4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800f226:	f107 030c 	add.w	r3, r7, #12
 800f22a:	494b      	ldr	r1, [pc, #300]	; (800f358 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fb fc15 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800f232:	f107 031c 	add.w	r3, r7, #28
 800f236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f238:	4618      	mov	r0, r3
 800f23a:	f001 f9d2 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800f23e:	f107 021c 	add.w	r2, r7, #28
 800f242:	f107 030c 	add.w	r3, r7, #12
 800f246:	4611      	mov	r1, r2
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fb fbf5 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f24e:	f107 031c 	add.w	r3, r7, #28
 800f252:	4618      	mov	r0, r3
 800f254:	f7fb fb73 	bl	800a93e <_ZN12SimpleStringD1Ev>
        gname += "#";
 800f258:	f107 030c 	add.w	r3, r7, #12
 800f25c:	493e      	ldr	r1, [pc, #248]	; (800f358 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f25e:	4618      	mov	r0, r3
 800f260:	f7fb fbfc 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800f264:	f107 020c 	add.w	r2, r7, #12
 800f268:	f107 0314 	add.w	r3, r7, #20
 800f26c:	4611      	mov	r1, r2
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fb f82b 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 800f274:	4603      	mov	r3, r0
 800f276:	f083 0301 	eor.w	r3, r3, #1
 800f27a:	b2db      	uxtb	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00d      	beq.n	800f29c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800f280:	f107 020c 	add.w	r2, r7, #12
 800f284:	f107 0314 	add.w	r3, r7, #20
 800f288:	4611      	mov	r1, r2
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7fb fbd4 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800f290:	f107 0314 	add.w	r3, r7, #20
 800f294:	4931      	ldr	r1, [pc, #196]	; (800f35c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800f296:	4618      	mov	r0, r3
 800f298:	f7fb fbe0 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800f29c:	f107 030c 	add.w	r3, r7, #12
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fb fb4c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	330c      	adds	r3, #12
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f2b0:	4798      	blx	r3
 800f2b2:	6378      	str	r0, [r7, #52]	; 0x34
 800f2b4:	e7ae      	b.n	800f214 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800f2b6:	f107 0314 	add.w	r3, r7, #20
 800f2ba:	4a26      	ldr	r2, [pc, #152]	; (800f354 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800f2bc:	4926      	ldr	r1, [pc, #152]	; (800f358 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fb f99a 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800f2c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2c8:	4924      	ldr	r1, [pc, #144]	; (800f35c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f7fa ff7f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800f2d0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f2d4:	f107 0314 	add.w	r3, r7, #20
 800f2d8:	4611      	mov	r1, r2
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7fb f874 	bl	800a3c8 <_ZNK12SimpleString8endsWithERKS_>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	461c      	mov	r4, r3
 800f2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fb fb28 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800f2ee:	2c00      	cmp	r4, #0
 800f2f0:	d01a      	beq.n	800f328 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800f2f2:	f107 0314 	add.w	r3, r7, #20
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fb fb00 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	3b01      	subs	r3, #1
 800f300:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800f304:	f107 0114 	add.w	r1, r7, #20
 800f308:	2200      	movs	r2, #0
 800f30a:	f7fb fc21 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 800f30e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f312:	f107 0314 	add.w	r3, r7, #20
 800f316:	4611      	mov	r1, r2
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fa ffc4 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800f31e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f322:	4618      	mov	r0, r3
 800f324:	f7fb fb0b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	3338      	adds	r3, #56	; 0x38
 800f32e:	681c      	ldr	r4, [r3, #0]
 800f330:	f107 0314 	add.w	r3, r7, #20
 800f334:	4618      	mov	r0, r3
 800f336:	f7fb fad5 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800f33a:	4603      	mov	r3, r0
 800f33c:	4619      	mov	r1, r3
 800f33e:	6838      	ldr	r0, [r7, #0]
 800f340:	47a0      	blx	r4
    SimpleString groupList;
 800f342:	f107 0314 	add.w	r3, r7, #20
 800f346:	4618      	mov	r0, r3
 800f348:	f7fb faf9 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800f34c:	bf00      	nop
 800f34e:	373c      	adds	r7, #60	; 0x3c
 800f350:	46bd      	mov	sp, r7
 800f352:	bd90      	pop	{r4, r7, pc}
 800f354:	08021d8c 	.word	0x08021d8c
 800f358:	08021d90 	.word	0x08021d90
 800f35c:	08021d94 	.word	0x08021d94

0800f360 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800f360:	b590      	push	{r4, r7, lr}
 800f362:	b091      	sub	sp, #68	; 0x44
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800f36a:	f107 0314 	add.w	r3, r7, #20
 800f36e:	4964      	ldr	r1, [pc, #400]	; (800f500 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f370:	4618      	mov	r0, r3
 800f372:	f7fa ff2c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f37c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d06e      	beq.n	800f460 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800f382:	683a      	ldr	r2, [r7, #0]
 800f384:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f386:	6878      	ldr	r0, [r7, #4]
 800f388:	f000 fa6e 	bl	800f868 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d05e      	beq.n	800f450 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800f392:	f107 030c 	add.w	r3, r7, #12
 800f396:	495a      	ldr	r1, [pc, #360]	; (800f500 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f398:	4618      	mov	r0, r3
 800f39a:	f7fa ff18 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800f39e:	f107 030c 	add.w	r3, r7, #12
 800f3a2:	4958      	ldr	r1, [pc, #352]	; (800f504 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fb fb59 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800f3aa:	f107 031c 	add.w	r3, r7, #28
 800f3ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f001 f916 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800f3b6:	f107 021c 	add.w	r2, r7, #28
 800f3ba:	f107 030c 	add.w	r3, r7, #12
 800f3be:	4611      	mov	r1, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fb fb39 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f3c6:	f107 031c 	add.w	r3, r7, #28
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7fb fab7 	bl	800a93e <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800f3d0:	f107 030c 	add.w	r3, r7, #12
 800f3d4:	494c      	ldr	r1, [pc, #304]	; (800f508 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fb fb40 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800f3dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f001 f8ee 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800f3e8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f3ec:	f107 030c 	add.w	r3, r7, #12
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7fb fb20 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f3f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fb fa9e 	bl	800a93e <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800f402:	f107 030c 	add.w	r3, r7, #12
 800f406:	493f      	ldr	r1, [pc, #252]	; (800f504 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f408:	4618      	mov	r0, r3
 800f40a:	f7fb fb27 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800f40e:	f107 020c 	add.w	r2, r7, #12
 800f412:	f107 0314 	add.w	r3, r7, #20
 800f416:	4611      	mov	r1, r2
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fa ff56 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 800f41e:	4603      	mov	r3, r0
 800f420:	f083 0301 	eor.w	r3, r3, #1
 800f424:	b2db      	uxtb	r3, r3
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00d      	beq.n	800f446 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800f42a:	f107 020c 	add.w	r2, r7, #12
 800f42e:	f107 0314 	add.w	r3, r7, #20
 800f432:	4611      	mov	r1, r2
 800f434:	4618      	mov	r0, r3
 800f436:	f7fb faff 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800f43a:	f107 0314 	add.w	r3, r7, #20
 800f43e:	4933      	ldr	r1, [pc, #204]	; (800f50c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f440:	4618      	mov	r0, r3
 800f442:	f7fb fb0b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800f446:	f107 030c 	add.w	r3, r7, #12
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fb fa77 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	330c      	adds	r3, #12
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f45a:	4798      	blx	r3
 800f45c:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f45e:	e78d      	b.n	800f37c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800f460:	f107 0314 	add.w	r3, r7, #20
 800f464:	4a26      	ldr	r2, [pc, #152]	; (800f500 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800f466:	4927      	ldr	r1, [pc, #156]	; (800f504 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fb f8c5 	bl	800a5f8 <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800f46e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f472:	4926      	ldr	r1, [pc, #152]	; (800f50c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800f474:	4618      	mov	r0, r3
 800f476:	f7fa feaa 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 800f47a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f47e:	f107 0314 	add.w	r3, r7, #20
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7fa ff9f 	bl	800a3c8 <_ZNK12SimpleString8endsWithERKS_>
 800f48a:	4603      	mov	r3, r0
 800f48c:	461c      	mov	r4, r3
 800f48e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f492:	4618      	mov	r0, r3
 800f494:	f7fb fa53 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800f498:	2c00      	cmp	r4, #0
 800f49a:	d01a      	beq.n	800f4d2 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800f49c:	f107 0314 	add.w	r3, r7, #20
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fb fa2b 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800f4ae:	f107 0114 	add.w	r1, r7, #20
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f7fb fb4c 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 800f4b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f4bc:	f107 0314 	add.w	r3, r7, #20
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fa feef 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 800f4c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fb fa36 	bl	800a93e <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	3338      	adds	r3, #56	; 0x38
 800f4d8:	681c      	ldr	r4, [r3, #0]
 800f4da:	f107 0314 	add.w	r3, r7, #20
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fb fa00 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	6838      	ldr	r0, [r7, #0]
 800f4ea:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800f4ec:	f107 0314 	add.w	r3, r7, #20
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7fb fa24 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800f4f6:	bf00      	nop
 800f4f8:	3744      	adds	r7, #68	; 0x44
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd90      	pop	{r4, r7, pc}
 800f4fe:	bf00      	nop
 800f500:	08021d8c 	.word	0x08021d8c
 800f504:	08021d90 	.word	0x08021d90
 800f508:	08021d98 	.word	0x08021d98
 800f50c:	08021d94 	.word	0x08021d94

0800f510 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800f510:	b590      	push	{r4, r7, lr}
 800f512:	b091      	sub	sp, #68	; 0x44
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800f51a:	f107 0314 	add.w	r3, r7, #20
 800f51e:	494f      	ldr	r1, [pc, #316]	; (800f65c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f520:	4618      	mov	r0, r3
 800f522:	f7fa fe54 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	685b      	ldr	r3, [r3, #4]
 800f52a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d07d      	beq.n	800f62e <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800f532:	f107 030c 	add.w	r3, r7, #12
 800f536:	4949      	ldr	r1, [pc, #292]	; (800f65c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800f538:	4618      	mov	r0, r3
 800f53a:	f7fa fe48 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800f53e:	f107 031c 	add.w	r3, r7, #28
 800f542:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f544:	4618      	mov	r0, r3
 800f546:	f001 f84c 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800f54a:	f107 021c 	add.w	r2, r7, #28
 800f54e:	f107 030c 	add.w	r3, r7, #12
 800f552:	4611      	mov	r1, r2
 800f554:	4618      	mov	r0, r3
 800f556:	f7fb fa6f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f55a:	f107 031c 	add.w	r3, r7, #28
 800f55e:	4618      	mov	r0, r3
 800f560:	f7fb f9ed 	bl	800a93e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f564:	f107 030c 	add.w	r3, r7, #12
 800f568:	493d      	ldr	r1, [pc, #244]	; (800f660 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fb fa76 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800f570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f574:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f576:	4618      	mov	r0, r3
 800f578:	f001 f824 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800f57c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f580:	f107 030c 	add.w	r3, r7, #12
 800f584:	4611      	mov	r1, r2
 800f586:	4618      	mov	r0, r3
 800f588:	f7fb fa56 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f58c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f590:	4618      	mov	r0, r3
 800f592:	f7fb f9d4 	bl	800a93e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f596:	f107 030c 	add.w	r3, r7, #12
 800f59a:	4931      	ldr	r1, [pc, #196]	; (800f660 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f59c:	4618      	mov	r0, r3
 800f59e:	f7fb fa5d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800f5a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f001 f8dc 	bl	8010766 <_ZNK10UtestShell7getFileEv>
 800f5ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f5b2:	f107 030c 	add.w	r3, r7, #12
 800f5b6:	4611      	mov	r1, r2
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7fb fa3d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f5be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fb f9bb 	bl	800a93e <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800f5c8:	f107 030c 	add.w	r3, r7, #12
 800f5cc:	4924      	ldr	r1, [pc, #144]	; (800f660 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	f7fb fa44 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800f5d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5d6:	f001 f8d5 	bl	8010784 <_ZNK10UtestShell13getLineNumberEv>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	461a      	mov	r2, r3
 800f5de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5e2:	4920      	ldr	r1, [pc, #128]	; (800f664 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800f5e4:	4618      	mov	r0, r3
 800f5e6:	f7fb feb1 	bl	800b34c <_Z16StringFromFormatPKcz>
 800f5ea:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800f5ee:	f107 030c 	add.w	r3, r7, #12
 800f5f2:	4611      	mov	r1, r2
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f7fb fa1f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 800f5fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5fe:	4618      	mov	r0, r3
 800f600:	f7fb f99d 	bl	800a93e <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800f604:	f107 020c 	add.w	r2, r7, #12
 800f608:	f107 0314 	add.w	r3, r7, #20
 800f60c:	4611      	mov	r1, r2
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fb fa12 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800f614:	f107 030c 	add.w	r3, r7, #12
 800f618:	4618      	mov	r0, r3
 800f61a:	f7fb f990 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800f61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	330c      	adds	r3, #12
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f628:	4798      	blx	r3
 800f62a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800f62c:	e77e      	b.n	800f52c <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3338      	adds	r3, #56	; 0x38
 800f634:	681c      	ldr	r4, [r3, #0]
 800f636:	f107 0314 	add.w	r3, r7, #20
 800f63a:	4618      	mov	r0, r3
 800f63c:	f7fb f952 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 800f640:	4603      	mov	r3, r0
 800f642:	4619      	mov	r1, r3
 800f644:	6838      	ldr	r0, [r7, #0]
 800f646:	47a0      	blx	r4
    SimpleString testLocations;
 800f648:	f107 0314 	add.w	r3, r7, #20
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fb f976 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 800f652:	bf00      	nop
 800f654:	3744      	adds	r7, #68	; 0x44
 800f656:	46bd      	mov	sp, r7
 800f658:	bd90      	pop	{r4, r7, pc}
 800f65a:	bf00      	nop
 800f65c:	08021d8c 	.word	0x08021d8c
 800f660:	08021d98 	.word	0x08021d98
 800f664:	08021d9c 	.word	0x08021d9c

0800f668 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66a:	b087      	sub	sp, #28
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800f672:	2400      	movs	r4, #0
 800f674:	2500      	movs	r5, #0
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d028      	beq.n	800f6ce <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f67c:	683b      	ldr	r3, [r7, #0]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	330c      	adds	r3, #12
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	6838      	ldr	r0, [r7, #0]
 800f686:	4798      	blx	r3
 800f688:	4603      	mov	r3, r0
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d01f      	beq.n	800f6ce <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800f68e:	f107 0308 	add.w	r3, r7, #8
 800f692:	6839      	ldr	r1, [r7, #0]
 800f694:	4618      	mov	r0, r3
 800f696:	f000 ffa4 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800f69a:	2401      	movs	r4, #1
 800f69c:	683b      	ldr	r3, [r7, #0]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	330c      	adds	r3, #12
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	6838      	ldr	r0, [r7, #0]
 800f6a6:	4798      	blx	r3
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	f107 0310 	add.w	r3, r7, #16
 800f6ae:	4611      	mov	r1, r2
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f000 ff96 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800f6b6:	2501      	movs	r5, #1
 800f6b8:	f107 0210 	add.w	r2, r7, #16
 800f6bc:	f107 0308 	add.w	r3, r7, #8
 800f6c0:	4611      	mov	r1, r2
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	f7fb f98c 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 800f6c8:	4603      	mov	r3, r0
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800f6ce:	2601      	movs	r6, #1
 800f6d0:	e000      	b.n	800f6d4 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800f6d2:	2600      	movs	r6, #0
 800f6d4:	2d00      	cmp	r5, #0
 800f6d6:	d004      	beq.n	800f6e2 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800f6d8:	f107 0310 	add.w	r3, r7, #16
 800f6dc:	4618      	mov	r0, r3
 800f6de:	f7fb f92e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800f6e2:	2c00      	cmp	r4, #0
 800f6e4:	d004      	beq.n	800f6f0 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800f6e6:	f107 0308 	add.w	r3, r7, #8
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fb f927 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800f6f0:	4633      	mov	r3, r6
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	371c      	adds	r7, #28
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f6fa <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800f6fa:	b580      	push	{r7, lr}
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	685b      	ldr	r3, [r3, #4]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00a      	beq.n	800f720 <_ZN12TestRegistry10countTestsEv+0x26>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685b      	ldr	r3, [r3, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	3310      	adds	r3, #16
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4610      	mov	r0, r2
 800f71a:	4798      	blx	r3
 800f71c:	4603      	mov	r3, r0
 800f71e:	e000      	b.n	800f722 <_ZN12TestRegistry10countTestsEv+0x28>
 800f720:	2300      	movs	r3, #0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
	...

0800f72c <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800f72c:	b580      	push	{r7, lr}
 800f72e:	af00      	add	r7, sp, #0
 800f730:	4801      	ldr	r0, [pc, #4]	; (800f738 <__tcf_0+0xc>)
 800f732:	f7ff fcad 	bl	800f090 <_ZN12TestRegistryD1Ev>
 800f736:	bd80      	pop	{r7, pc}
 800f738:	20000840 	.word	0x20000840

0800f73c <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800f740:	4b15      	ldr	r3, [pc, #84]	; (800f798 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	f3bf 8f5b 	dmb	ish
 800f748:	b2db      	uxtb	r3, r3
 800f74a:	f003 0301 	and.w	r3, r3, #1
 800f74e:	2b00      	cmp	r3, #0
 800f750:	bf0c      	ite	eq
 800f752:	2301      	moveq	r3, #1
 800f754:	2300      	movne	r3, #0
 800f756:	b2db      	uxtb	r3, r3
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d013      	beq.n	800f784 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f75c:	480e      	ldr	r0, [pc, #56]	; (800f798 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f75e:	f00d fbf7 	bl	801cf50 <__cxa_guard_acquire>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	bf14      	ite	ne
 800f768:	2301      	movne	r3, #1
 800f76a:	2300      	moveq	r3, #0
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d008      	beq.n	800f784 <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800f772:	480a      	ldr	r0, [pc, #40]	; (800f79c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800f774:	f7ff fc66 	bl	800f044 <_ZN12TestRegistryC1Ev>
 800f778:	4807      	ldr	r0, [pc, #28]	; (800f798 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800f77a:	f00d fbf5 	bl	801cf68 <__cxa_guard_release>
 800f77e:	4808      	ldr	r0, [pc, #32]	; (800f7a0 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800f780:	f00d fc19 	bl	801cfb6 <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800f784:	4b07      	ldr	r3, [pc, #28]	; (800f7a4 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800f78c:	4b05      	ldr	r3, [pc, #20]	; (800f7a4 <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	e000      	b.n	800f794 <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800f792:	4b02      	ldr	r3, [pc, #8]	; (800f79c <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800f794:	4618      	mov	r0, r3
 800f796:	bd80      	pop	{r7, pc}
 800f798:	20000860 	.word	0x20000860
 800f79c:	20000840 	.word	0x20000840
 800f7a0:	0800f72d 	.word	0x0800f72d
 800f7a4:	2000083c 	.word	0x2000083c

0800f7a8 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
 800f7b0:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800f7b2:	4a04      	ldr	r2, [pc, #16]	; (800f7c4 <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	6013      	str	r3, [r2, #0]
}
 800f7b8:	bf00      	nop
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr
 800f7c4:	2000083c 	.word	0x2000083c

0800f7c8 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b082      	sub	sp, #8
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	685b      	ldr	r3, [r3, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d00a      	beq.n	800f7ee <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	685a      	ldr	r2, [r3, #4]
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	330c      	adds	r3, #12
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4610      	mov	r0, r2
 800f7e8:	4798      	blx	r3
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	e000      	b.n	800f7f0 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	6053      	str	r3, [r2, #4]

}
 800f7f4:	bf00      	nop
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	683a      	ldr	r2, [r7, #0]
 800f80a:	609a      	str	r2, [r3, #8]
}
 800f80c:	bf00      	nop
 800f80e:	370c      	adds	r7, #12
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800f818:	b480      	push	{r7}
 800f81a:	b083      	sub	sp, #12
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	683a      	ldr	r2, [r7, #0]
 800f826:	60da      	str	r2, [r3, #12]
}
 800f828:	bf00      	nop
 800f82a:	370c      	adds	r7, #12
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2201      	movs	r2, #1
 800f840:	771a      	strb	r2, [r3, #28]
}
 800f842:	bf00      	nop
 800f844:	370c      	adds	r7, #12
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800f84e:	b480      	push	{r7}
 800f850:	b083      	sub	sp, #12
 800f852:	af00      	add	r7, sp, #0
 800f854:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2201      	movs	r2, #1
 800f85a:	751a      	strb	r2, [r3, #20]
}
 800f85c:	bf00      	nop
 800f85e:	370c      	adds	r7, #12
 800f860:	46bd      	mov	sp, r7
 800f862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f866:	4770      	bx	lr

0800f868 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b084      	sub	sp, #16
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	68d9      	ldr	r1, [r3, #12]
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	689b      	ldr	r3, [r3, #8]
 800f87c:	461a      	mov	r2, r3
 800f87e:	68b8      	ldr	r0, [r7, #8]
 800f880:	f000 ffbb 	bl	80107fa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800f884:	4603      	mov	r3, r0
 800f886:	2b00      	cmp	r3, #0
 800f888:	d001      	beq.n	800f88e <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800f88a:	2301      	movs	r3, #1
 800f88c:	e006      	b.n	800f89c <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	332c      	adds	r3, #44	; 0x2c
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	4798      	blx	r3
        return false;
 800f89a:	2300      	movs	r3, #0
    }
}
 800f89c:	4618      	mov	r0, r3
 800f89e:	3710      	adds	r7, #16
 800f8a0:	46bd      	mov	sp, r7
 800f8a2:	bd80      	pop	{r7, pc}

0800f8a4 <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b082      	sub	sp, #8
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800f8ac:	f7ff fb62 	bl	800ef74 <_ZN14NullTestPlugin8instanceEv>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	611a      	str	r2, [r3, #16]
}
 800f8b6:	bf00      	nop
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}

0800f8be <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800f8be:	b580      	push	{r7, lr}
 800f8c0:	b082      	sub	sp, #8
 800f8c2:	af00      	add	r7, sp, #0
 800f8c4:	6078      	str	r0, [r7, #4]
 800f8c6:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3324      	adds	r3, #36	; 0x24
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	6912      	ldr	r2, [r2, #16]
 800f8d4:	4611      	mov	r1, r2
 800f8d6:	6838      	ldr	r0, [r7, #0]
 800f8d8:	4798      	blx	r3
 800f8da:	4602      	mov	r2, r0
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	611a      	str	r2, [r3, #16]
}
 800f8e0:	bf00      	nop
 800f8e2:	3708      	adds	r7, #8
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	691b      	ldr	r3, [r3, #16]
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	370c      	adds	r7, #12
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fe:	4770      	bx	lr

0800f900 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800f900:	b580      	push	{r7, lr}
 800f902:	b082      	sub	sp, #8
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	691b      	ldr	r3, [r3, #16]
 800f90e:	6839      	ldr	r1, [r7, #0]
 800f910:	4618      	mov	r0, r3
 800f912:	f7ff fa52 	bl	800edba <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800f916:	4603      	mov	r3, r0
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3708      	adds	r7, #8
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b082      	sub	sp, #8
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
 800f928:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	691a      	ldr	r2, [r3, #16]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	691b      	ldr	r3, [r3, #16]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	3328      	adds	r3, #40	; 0x28
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	6839      	ldr	r1, [r7, #0]
 800f93a:	4610      	mov	r0, r2
 800f93c:	4798      	blx	r3
 800f93e:	4602      	mov	r2, r0
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	691b      	ldr	r3, [r3, #16]
 800f944:	429a      	cmp	r2, r3
 800f946:	bf0c      	ite	eq
 800f948:	2301      	moveq	r3, #1
 800f94a:	2300      	movne	r3, #0
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00b      	beq.n	800f96a <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	691a      	ldr	r2, [r3, #16]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	691b      	ldr	r3, [r3, #16]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	332c      	adds	r3, #44	; 0x2c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	4610      	mov	r0, r2
 800f962:	4798      	blx	r3
 800f964:	4602      	mov	r2, r0
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	691b      	ldr	r3, [r3, #16]
 800f96e:	4618      	mov	r0, r3
 800f970:	f7ff fa17 	bl	800eda2 <_ZN10TestPlugin7getNameEv>
 800f974:	4603      	mov	r3, r0
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	4618      	mov	r0, r3
 800f97a:	f7fa ffec 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d00b      	beq.n	800f99c <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	691a      	ldr	r2, [r3, #16]
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	332c      	adds	r3, #44	; 0x2c
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4610      	mov	r0, r2
 800f994:	4798      	blx	r3
 800f996:	4602      	mov	r2, r0
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	691a      	ldr	r2, [r3, #16]
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	691b      	ldr	r3, [r3, #16]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3328      	adds	r3, #40	; 0x28
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	6839      	ldr	r1, [r7, #0]
 800f9ac:	4610      	mov	r0, r2
 800f9ae:	4798      	blx	r3
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b084      	sub	sp, #16
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
    int count = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	691b      	ldr	r3, [r3, #16]
 800f9c8:	60bb      	str	r3, [r7, #8]
 800f9ca:	f7ff fad3 	bl	800ef74 <_ZN14NullTestPlugin8instanceEv>
 800f9ce:	4602      	mov	r2, r0
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	bf14      	ite	ne
 800f9d6:	2301      	movne	r3, #1
 800f9d8:	2300      	moveq	r3, #0
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d00a      	beq.n	800f9f6 <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	332c      	adds	r3, #44	; 0x2c
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	68b8      	ldr	r0, [r7, #8]
 800f9f0:	4798      	blx	r3
 800f9f2:	60b8      	str	r0, [r7, #8]
 800f9f4:	e7e9      	b.n	800f9ca <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
}
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    return tests_;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b084      	sub	sp, #16
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	334c      	adds	r3, #76	; 0x4c
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	4798      	blx	r3
 800fa2e:	4602      	mov	r2, r0
 800fa30:	f107 0308 	add.w	r3, r7, #8
 800fa34:	4611      	mov	r1, r2
 800fa36:	4618      	mov	r0, r3
 800fa38:	f002 f8f8 	bl	8011c2c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800fa3c:	f107 0308 	add.w	r3, r7, #8
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	4618      	mov	r0, r3
 800fa44:	f002 f980 	bl	8011d48 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800fa48:	f107 0308 	add.w	r3, r7, #8
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f002 fa13 	bl	8011e78 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800fa52:	4602      	mov	r2, r0
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800fa58:	f107 0308 	add.w	r3, r7, #8
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f002 f939 	bl	8011cd4 <_ZN22UtestShellPointerArrayD1Ev>
}
 800fa62:	bf00      	nop
 800fa64:	3710      	adds	r7, #16
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}

0800fa6a <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800fa6a:	b580      	push	{r7, lr}
 800fa6c:	b084      	sub	sp, #16
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	334c      	adds	r3, #76	; 0x4c
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	6878      	ldr	r0, [r7, #4]
 800fa7c:	4798      	blx	r3
 800fa7e:	4602      	mov	r2, r0
 800fa80:	f107 0308 	add.w	r3, r7, #8
 800fa84:	4611      	mov	r1, r2
 800fa86:	4618      	mov	r0, r3
 800fa88:	f002 f8d0 	bl	8011c2c <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800fa8c:	f107 0308 	add.w	r3, r7, #8
 800fa90:	4618      	mov	r0, r3
 800fa92:	f002 f995 	bl	8011dc0 <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800fa96:	f107 0308 	add.w	r3, r7, #8
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f002 f9ec 	bl	8011e78 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800faa0:	4602      	mov	r2, r0
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800faa6:	f107 0308 	add.w	r3, r7, #8
 800faaa:	4618      	mov	r0, r3
 800faac:	f002 f912 	bl	8011cd4 <_ZN22UtestShellPointerArrayD1Ev>
}
 800fab0:	bf00      	nop
 800fab2:	3710      	adds	r7, #16
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00b      	beq.n	800fae6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	330c      	adds	r3, #12
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68f8      	ldr	r0, [r7, #12]
 800fad8:	4798      	blx	r3
 800fada:	4602      	mov	r2, r0
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	4293      	cmp	r3, r2
 800fae0:	d001      	beq.n	800fae6 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800fae6:	2300      	movs	r3, #0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d007      	beq.n	800fafc <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	330c      	adds	r3, #12
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	68f8      	ldr	r0, [r7, #12]
 800faf6:	4798      	blx	r3
 800faf8:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800fafa:	e7e5      	b.n	800fac8 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800fafc:	68fb      	ldr	r3, [r7, #12]
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3710      	adds	r7, #16
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}

0800fb06 <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800fb06:	b590      	push	{r4, r7, lr}
 800fb08:	b087      	sub	sp, #28
 800fb0a:	af00      	add	r7, sp, #0
 800fb0c:	6078      	str	r0, [r7, #4]
 800fb0e:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	617b      	str	r3, [r7, #20]
    while (current) {
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d01e      	beq.n	800fb5a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800fb1c:	f107 030c 	add.w	r3, r7, #12
 800fb20:	6979      	ldr	r1, [r7, #20]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f000 fd4e 	bl	80105c4 <_ZNK10UtestShell7getNameEv>
 800fb28:	f107 030c 	add.w	r3, r7, #12
 800fb2c:	6839      	ldr	r1, [r7, #0]
 800fb2e:	4618      	mov	r0, r3
 800fb30:	f7fa ff11 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800fb34:	4603      	mov	r3, r0
 800fb36:	461c      	mov	r4, r3
 800fb38:	f107 030c 	add.w	r3, r7, #12
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fa fefe 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800fb42:	2c00      	cmp	r4, #0
 800fb44:	d001      	beq.n	800fb4a <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800fb46:	697b      	ldr	r3, [r7, #20]
 800fb48:	e008      	b.n	800fb5c <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	330c      	adds	r3, #12
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	6978      	ldr	r0, [r7, #20]
 800fb54:	4798      	blx	r3
 800fb56:	6178      	str	r0, [r7, #20]
    while (current) {
 800fb58:	e7dd      	b.n	800fb16 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800fb5a:	2300      	movs	r3, #0
}
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	371c      	adds	r7, #28
 800fb60:	46bd      	mov	sp, r7
 800fb62:	bd90      	pop	{r4, r7, pc}

0800fb64 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800fb64:	b590      	push	{r4, r7, lr}
 800fb66:	b087      	sub	sp, #28
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
 800fb6c:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	617b      	str	r3, [r7, #20]
    while (current) {
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d01e      	beq.n	800fbb8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800fb7a:	f107 030c 	add.w	r3, r7, #12
 800fb7e:	6979      	ldr	r1, [r7, #20]
 800fb80:	4618      	mov	r0, r3
 800fb82:	f000 fd2e 	bl	80105e2 <_ZNK10UtestShell8getGroupEv>
 800fb86:	f107 030c 	add.w	r3, r7, #12
 800fb8a:	6839      	ldr	r1, [r7, #0]
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fa fee2 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 800fb92:	4603      	mov	r3, r0
 800fb94:	461c      	mov	r4, r3
 800fb96:	f107 030c 	add.w	r3, r7, #12
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fa fecf 	bl	800a93e <_ZN12SimpleStringD1Ev>
 800fba0:	2c00      	cmp	r4, #0
 800fba2:	d001      	beq.n	800fba8 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800fba4:	697b      	ldr	r3, [r7, #20]
 800fba6:	e008      	b.n	800fbba <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	330c      	adds	r3, #12
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	6978      	ldr	r0, [r7, #20]
 800fbb2:	4798      	blx	r3
 800fbb4:	6178      	str	r0, [r7, #20]
    while (current) {
 800fbb6:	e7dd      	b.n	800fb74 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800fbb8:	2300      	movs	r3, #0
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	371c      	adds	r7, #28
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd90      	pop	{r4, r7, pc}
	...

0800fbc4 <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
 800fbcc:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800fbce:	4a18      	ldr	r2, [pc, #96]	; (800fc30 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	601a      	str	r2, [r3, #0]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	683a      	ldr	r2, [r7, #0]
 800fbd8:	605a      	str	r2, [r3, #4]
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	609a      	str	r2, [r3, #8]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	60da      	str	r2, [r3, #12]
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	611a      	str	r2, [r3, #16]
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2200      	movs	r2, #0
 800fbf0:	615a      	str	r2, [r3, #20]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	619a      	str	r2, [r3, #24]
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	61da      	str	r2, [r3, #28]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	621a      	str	r2, [r3, #32]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2200      	movs	r2, #0
 800fc08:	625a      	str	r2, [r3, #36]	; 0x24
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	629a      	str	r2, [r3, #40]	; 0x28
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	62da      	str	r2, [r3, #44]	; 0x2c
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	631a      	str	r2, [r3, #48]	; 0x30
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4618      	mov	r0, r3
 800fc26:	370c      	adds	r7, #12
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2e:	4770      	bx	lr
 800fc30:	08024b90 	.word	0x08024b90

0800fc34 <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800fc34:	b480      	push	{r7}
 800fc36:	b083      	sub	sp, #12
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	4a04      	ldr	r2, [pc, #16]	; (800fc50 <_ZN10TestResultD1Ev+0x1c>)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	601a      	str	r2, [r3, #0]
{
}
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	4618      	mov	r0, r3
 800fc46:	370c      	adds	r7, #12
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr
 800fc50:	08024b90 	.word	0x08024b90

0800fc54 <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
}
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7ff ffe9 	bl	800fc34 <_ZN10TestResultD1Ev>
 800fc62:	2138      	movs	r1, #56	; 0x38
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f7f7 ff03 	bl	8007a70 <_ZdlPvj>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	3708      	adds	r7, #8
 800fc70:	46bd      	mov	sp, r7
 800fc72:	bd80      	pop	{r7, pc}

0800fc74 <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b082      	sub	sp, #8
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3318      	adds	r3, #24
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	4610      	mov	r0, r2
 800fc90:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800fc92:	4b05      	ldr	r3, [pc, #20]	; (800fca8 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4798      	blx	r3
 800fc98:	4603      	mov	r3, r0
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	200000a4 	.word	0x200000a4

0800fcac <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800fcac:	b580      	push	{r7, lr}
 800fcae:	b082      	sub	sp, #8
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800fcb6:	4b0c      	ldr	r3, [pc, #48]	; (800fce8 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4798      	blx	r3
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc4:	1ad2      	subs	r2, r2, r3
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	685a      	ldr	r2, [r3, #4]
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	685b      	ldr	r3, [r3, #4]
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	331c      	adds	r3, #28
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	4610      	mov	r0, r2
 800fcdc:	4798      	blx	r3
}
 800fcde:	bf00      	nop
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop
 800fce8:	200000a4 	.word	0x200000a4

0800fcec <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	685a      	ldr	r2, [r3, #4]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	685b      	ldr	r3, [r3, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	3310      	adds	r3, #16
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	4610      	mov	r0, r2
 800fd08:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800fd0a:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4798      	blx	r3
 800fd10:	4603      	mov	r3, r0
 800fd12:	461a      	mov	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	629a      	str	r2, [r3, #40]	; 0x28
}
 800fd18:	bf00      	nop
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	200000a4 	.word	0x200000a4

0800fd24 <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b082      	sub	sp, #8
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
 800fd2c:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	685a      	ldr	r2, [r3, #4]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	685b      	ldr	r3, [r3, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	332c      	adds	r3, #44	; 0x2c
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	6839      	ldr	r1, [r7, #0]
 800fd3e:	4610      	mov	r0, r2
 800fd40:	4798      	blx	r3
}
 800fd42:	bf00      	nop
 800fd44:	3708      	adds	r7, #8
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}

0800fd4a <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800fd4a:	b580      	push	{r7, lr}
 800fd4c:	b082      	sub	sp, #8
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	6078      	str	r0, [r7, #4]
 800fd52:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	685a      	ldr	r2, [r3, #4]
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3348      	adds	r3, #72	; 0x48
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	6839      	ldr	r1, [r7, #0]
 800fd64:	4610      	mov	r0, r2
 800fd66:	4798      	blx	r3
}
 800fd68:	bf00      	nop
 800fd6a:	3708      	adds	r7, #8
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800fd7a:	4b0c      	ldr	r3, [pc, #48]	; (800fdac <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	4798      	blx	r3
 800fd80:	4603      	mov	r3, r0
 800fd82:	461a      	mov	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd88:	1ad2      	subs	r2, r2, r3
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	685b      	ldr	r3, [r3, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	3314      	adds	r3, #20
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	4610      	mov	r0, r2
 800fda0:	4798      	blx	r3

}
 800fda2:	bf00      	nop
 800fda4:	3708      	adds	r7, #8
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop
 800fdac:	200000a4 	.word	0x200000a4

0800fdb0 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	685a      	ldr	r2, [r3, #4]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	333c      	adds	r3, #60	; 0x3c
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6839      	ldr	r1, [r7, #0]
 800fdca:	4610      	mov	r0, r2
 800fdcc:	4798      	blx	r3
    failureCount_++;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	695b      	ldr	r3, [r3, #20]
 800fdd2:	1c5a      	adds	r2, r3, #1
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	615a      	str	r2, [r3, #20]
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	6078      	str	r0, [r7, #4]
    testCount_++;
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	689b      	ldr	r3, [r3, #8]
 800fdec:	1c5a      	adds	r2, r3, #1
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	609a      	str	r2, [r3, #8]
}
 800fdf2:	bf00      	nop
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr

0800fdfe <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800fdfe:	b480      	push	{r7}
 800fe00:	b083      	sub	sp, #12
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
    runCount_++;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	60da      	str	r2, [r3, #12]
}
 800fe10:	bf00      	nop
 800fe12:	370c      	adds	r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	691b      	ldr	r3, [r3, #16]
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	611a      	str	r2, [r3, #16]
}
 800fe2e:	bf00      	nop
 800fe30:	370c      	adds	r7, #12
 800fe32:	46bd      	mov	sp, r7
 800fe34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe38:	4770      	bx	lr

0800fe3a <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800fe3a:	b480      	push	{r7}
 800fe3c:	b083      	sub	sp, #12
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	1c5a      	adds	r2, r3, #1
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	619a      	str	r2, [r3, #24]
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr

0800fe58 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	69db      	ldr	r3, [r3, #28]
 800fe64:	1c5a      	adds	r2, r3, #1
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	61da      	str	r2, [r3, #28]
}
 800fe6a:	bf00      	nop
 800fe6c:	370c      	adds	r7, #12
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe74:	4770      	bx	lr
	...

0800fe78 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b082      	sub	sp, #8
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800fe80:	4b09      	ldr	r3, [pc, #36]	; (800fea8 <_ZN10TestResult12testsStartedEv+0x30>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4798      	blx	r3
 800fe86:	4603      	mov	r3, r0
 800fe88:	461a      	mov	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	685a      	ldr	r2, [r3, #4]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	3308      	adds	r3, #8
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4610      	mov	r0, r2
 800fe9e:	4798      	blx	r3
}
 800fea0:	bf00      	nop
 800fea2:	3708      	adds	r7, #8
 800fea4:	46bd      	mov	sp, r7
 800fea6:	bd80      	pop	{r7, pc}
 800fea8:	200000a4 	.word	0x200000a4

0800feac <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800feb4:	4b0c      	ldr	r3, [pc, #48]	; (800fee8 <_ZN10TestResult10testsEndedEv+0x3c>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	4798      	blx	r3
 800feba:	4603      	mov	r3, r0
 800febc:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	68fa      	ldr	r2, [r7, #12]
 800fec4:	1ad2      	subs	r2, r2, r3
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	685a      	ldr	r2, [r3, #4]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	330c      	adds	r3, #12
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	6879      	ldr	r1, [r7, #4]
 800feda:	4610      	mov	r0, r2
 800fedc:	4798      	blx	r3
}
 800fede:	bf00      	nop
 800fee0:	3710      	adds	r7, #16
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	200000a4 	.word	0x200000a4

0800feec <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800feec:	b480      	push	{r7}
 800feee:	b083      	sub	sp, #12
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a1b      	ldr	r3, [r3, #32]
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800ff34:	b590      	push	{r4, r7, lr}
 800ff36:	b087      	sub	sp, #28
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	ed87 0b04 	vstr	d0, [r7, #16]
 800ff3e:	ed87 1b02 	vstr	d1, [r7, #8]
 800ff42:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800ff46:	4b2c      	ldr	r3, [pc, #176]	; (800fff8 <_Z13doubles_equalddd+0xc4>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	ed97 0b04 	vldr	d0, [r7, #16]
 800ff4e:	4798      	blx	r3
 800ff50:	4603      	mov	r3, r0
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10f      	bne.n	800ff76 <_Z13doubles_equalddd+0x42>
 800ff56:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <_Z13doubles_equalddd+0xc4>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	ed97 0b02 	vldr	d0, [r7, #8]
 800ff5e:	4798      	blx	r3
 800ff60:	4603      	mov	r3, r0
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d107      	bne.n	800ff76 <_Z13doubles_equalddd+0x42>
 800ff66:	4b24      	ldr	r3, [pc, #144]	; (800fff8 <_Z13doubles_equalddd+0xc4>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	ed97 0b00 	vldr	d0, [r7]
 800ff6e:	4798      	blx	r3
 800ff70:	4603      	mov	r3, r0
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d001      	beq.n	800ff7a <_Z13doubles_equalddd+0x46>
 800ff76:	2301      	movs	r3, #1
 800ff78:	e000      	b.n	800ff7c <_Z13doubles_equalddd+0x48>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d001      	beq.n	800ff84 <_Z13doubles_equalddd+0x50>
        return false;
 800ff80:	2300      	movs	r3, #0
 800ff82:	e035      	b.n	800fff0 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800ff84:	4b1d      	ldr	r3, [pc, #116]	; (800fffc <_Z13doubles_equalddd+0xc8>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	ed97 0b04 	vldr	d0, [r7, #16]
 800ff8c:	4798      	blx	r3
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d009      	beq.n	800ffa8 <_Z13doubles_equalddd+0x74>
 800ff94:	4b19      	ldr	r3, [pc, #100]	; (800fffc <_Z13doubles_equalddd+0xc8>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	ed97 0b02 	vldr	d0, [r7, #8]
 800ff9c:	4798      	blx	r3
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d001      	beq.n	800ffa8 <_Z13doubles_equalddd+0x74>
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	e000      	b.n	800ffaa <_Z13doubles_equalddd+0x76>
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e01e      	b.n	800fff0 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800ffb2:	4b13      	ldr	r3, [pc, #76]	; (8010000 <_Z13doubles_equalddd+0xcc>)
 800ffb4:	681c      	ldr	r4, [r3, #0]
 800ffb6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ffba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ffbe:	f7f0 f9a3 	bl	8000308 <__aeabi_dsub>
 800ffc2:	4602      	mov	r2, r0
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	ec43 2b17 	vmov	d7, r2, r3
 800ffca:	eeb0 0a47 	vmov.f32	s0, s14
 800ffce:	eef0 0a67 	vmov.f32	s1, s15
 800ffd2:	47a0      	blx	r4
 800ffd4:	ec53 2b10 	vmov	r2, r3, d0
 800ffd8:	2101      	movs	r1, #1
 800ffda:	460c      	mov	r4, r1
 800ffdc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ffe0:	f7f0 fbbe 	bl	8000760 <__aeabi_dcmpge>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d101      	bne.n	800ffee <_Z13doubles_equalddd+0xba>
 800ffea:	2300      	movs	r3, #0
 800ffec:	461c      	mov	r4, r3
 800ffee:	b2e3      	uxtb	r3, r4
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	371c      	adds	r7, #28
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd90      	pop	{r4, r7, pc}
 800fff8:	200000e4 	.word	0x200000e4
 800fffc:	200000e8 	.word	0x200000e8
 8010000:	200000d8 	.word	0x200000d8

08010004 <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	332c      	adds	r3, #44	; 0x2c
    }
 8010010:	4618      	mov	r0, r3
 8010012:	370c      	adds	r7, #12
 8010014:	46bd      	mov	sp, r7
 8010016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001a:	4770      	bx	lr

0801001c <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
    {
 8010024:	4a0a      	ldr	r2, [pc, #40]	; (8010050 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	601a      	str	r2, [r3, #0]
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	332c      	adds	r3, #44	; 0x2c
 801002e:	4618      	mov	r0, r3
 8010030:	f7ff fe00 	bl	800fc34 <_ZN10TestResultD1Ev>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	331c      	adds	r3, #28
 8010038:	4618      	mov	r0, r3
 801003a:	f7f6 f815 	bl	8006068 <_ZN17ConsoleTestOutputD1Ev>
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f000 f943 	bl	80102cc <_ZN10UtestShellD1Ev>
    }
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	4618      	mov	r0, r3
 801004a:	3708      	adds	r7, #8
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}
 8010050:	08024bd8 	.word	0x08024bd8

08010054 <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
    }
 801005c:	6878      	ldr	r0, [r7, #4]
 801005e:	f7ff ffdd 	bl	801001c <_ZN22OutsideTestRunnerUTestD1Ev>
 8010062:	2164      	movs	r1, #100	; 0x64
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7f7 fd03 	bl	8007a70 <_ZdlPvj>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	4618      	mov	r0, r3
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}

08010074 <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af02      	add	r7, sp, #8
 801007a:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 801007c:	6878      	ldr	r0, [r7, #4]
 801007e:	2300      	movs	r3, #0
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	4b0d      	ldr	r3, [pc, #52]	; (80100b8 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 8010084:	4a0d      	ldr	r2, [pc, #52]	; (80100bc <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 8010086:	490e      	ldr	r1, [pc, #56]	; (80100c0 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 8010088:	f000 f8f8 	bl	801027c <_ZN10UtestShellC1EPKcS1_S1_j>
 801008c:	4a0d      	ldr	r2, [pc, #52]	; (80100c4 <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	331c      	adds	r3, #28
 8010096:	4618      	mov	r0, r3
 8010098:	f7f5 ffd4 	bl	8006044 <_ZN17ConsoleTestOutputC1Ev>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	331c      	adds	r3, #28
 80100a6:	4619      	mov	r1, r3
 80100a8:	4610      	mov	r0, r2
 80100aa:	f7ff fd8b 	bl	800fbc4 <_ZN10TestResultC1ER10TestOutput>
    {
    }
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	08021da0 	.word	0x08021da0
 80100bc:	08021db0 	.word	0x08021db0
 80100c0:	08021df0 	.word	0x08021df0
 80100c4:	08024bd8 	.word	0x08024bd8

080100c8 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 80100c8:	b580      	push	{r7, lr}
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	4801      	ldr	r0, [pc, #4]	; (80100d4 <__tcf_0+0xc>)
 80100ce:	f7ff ffa5 	bl	801001c <_ZN22OutsideTestRunnerUTestD1Ev>
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	20000864 	.word	0x20000864

080100d8 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 80100dc:	4b12      	ldr	r3, [pc, #72]	; (8010128 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	f3bf 8f5b 	dmb	ish
 80100e4:	b2db      	uxtb	r3, r3
 80100e6:	f003 0301 	and.w	r3, r3, #1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	bf0c      	ite	eq
 80100ee:	2301      	moveq	r3, #1
 80100f0:	2300      	movne	r3, #0
 80100f2:	b2db      	uxtb	r3, r3
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d013      	beq.n	8010120 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 80100f8:	480b      	ldr	r0, [pc, #44]	; (8010128 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 80100fa:	f00c ff29 	bl	801cf50 <__cxa_guard_acquire>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	bf14      	ite	ne
 8010104:	2301      	movne	r3, #1
 8010106:	2300      	moveq	r3, #0
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d008      	beq.n	8010120 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 801010e:	4807      	ldr	r0, [pc, #28]	; (801012c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 8010110:	f7ff ffb0 	bl	8010074 <_ZN22OutsideTestRunnerUTestC1Ev>
 8010114:	4804      	ldr	r0, [pc, #16]	; (8010128 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 8010116:	f00c ff27 	bl	801cf68 <__cxa_guard_release>
 801011a:	4805      	ldr	r0, [pc, #20]	; (8010130 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 801011c:	f00c ff4b 	bl	801cfb6 <atexit>
    return instance_;
 8010120:	4b02      	ldr	r3, [pc, #8]	; (801012c <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 8010122:	4618      	mov	r0, r3
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	200008c8 	.word	0x200008c8
 801012c:	20000864 	.word	0x20000864
 8010130:	080100c9 	.word	0x080100c9

08010134 <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	330c      	adds	r3, #12
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	4798      	blx	r3
    }
 8010148:	bf00      	nop
 801014a:	3708      	adds	r7, #8
 801014c:	46bd      	mov	sp, r7
 801014e:	bd80      	pop	{r7, pc}

08010150 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 8010150:	b580      	push	{r7, lr}
 8010152:	b082      	sub	sp, #8
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	3314      	adds	r3, #20
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	4798      	blx	r3
    }
 8010164:	bf00      	nop
 8010166:	3708      	adds	r7, #8
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 801016c:	b580      	push	{r7, lr}
 801016e:	b082      	sub	sp, #8
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3310      	adds	r3, #16
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	4798      	blx	r3
    }
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	60f8      	str	r0, [r7, #12]
 8010190:	60b9      	str	r1, [r7, #8]
 8010192:	607a      	str	r2, [r7, #4]
 8010194:	603b      	str	r3, [r7, #0]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	601a      	str	r2, [r3, #0]
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	605a      	str	r2, [r3, #4]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	683a      	ldr	r2, [r7, #0]
 80101a6:	609a      	str	r2, [r3, #8]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	4618      	mov	r0, r3
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b086      	sub	sp, #24
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80101c2:	697b      	ldr	r3, [r7, #20]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	689b      	ldr	r3, [r3, #8]
 80101d2:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3394      	adds	r3, #148	; 0x94
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	68ba      	ldr	r2, [r7, #8]
 80101de:	68f9      	ldr	r1, [r7, #12]
 80101e0:	6938      	ldr	r0, [r7, #16]
 80101e2:	4798      	blx	r3
    }
 80101e4:	bf00      	nop
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 8010204:	697b      	ldr	r3, [r7, #20]
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 801020a:	4b05      	ldr	r3, [pc, #20]	; (8010220 <helperDoRunOneTestSeperateProcess+0x34>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	68f9      	ldr	r1, [r7, #12]
 8010212:	6938      	ldr	r0, [r7, #16]
 8010214:	4798      	blx	r3
    }
 8010216:	bf00      	nop
 8010218:	3718      	adds	r7, #24
 801021a:	46bd      	mov	sp, r7
 801021c:	bd80      	pop	{r7, pc}
 801021e:	bf00      	nop
 8010220:	20000098 	.word	0x20000098

08010224 <_ZN10UtestShellC1Ev>:

const TestTerminator *UtestShell::currentTestTerminator_ = &normalTestTerminator;

/******************************** */

UtestShell::UtestShell() :
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801022c:	4a0f      	ldr	r2, [pc, #60]	; (801026c <_ZN10UtestShellC1Ev+0x48>)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4a0e      	ldr	r2, [pc, #56]	; (8010270 <_ZN10UtestShellC1Ev+0x4c>)
 8010236:	605a      	str	r2, [r3, #4]
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	4a0e      	ldr	r2, [pc, #56]	; (8010274 <_ZN10UtestShellC1Ev+0x50>)
 801023c:	609a      	str	r2, [r3, #8]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	4a0d      	ldr	r2, [pc, #52]	; (8010278 <_ZN10UtestShellC1Ev+0x54>)
 8010242:	60da      	str	r2, [r3, #12]
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	611a      	str	r2, [r3, #16]
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	615a      	str	r2, [r3, #20]
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2200      	movs	r2, #0
 8010254:	761a      	strb	r2, [r3, #24]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2200      	movs	r2, #0
 801025a:	765a      	strb	r2, [r3, #25]
{
}
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	4618      	mov	r0, r3
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr
 801026a:	bf00      	nop
 801026c:	08024c98 	.word	0x08024c98
 8010270:	08021e3c 	.word	0x08021e3c
 8010274:	08021e50 	.word	0x08021e50
 8010278:	08021e60 	.word	0x08021e60

0801027c <_ZN10UtestShellC1EPKcS1_S1_j>:

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 801027c:	b480      	push	{r7}
 801027e:	b085      	sub	sp, #20
 8010280:	af00      	add	r7, sp, #0
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
 8010288:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 801028a:	4a0f      	ldr	r2, [pc, #60]	; (80102c8 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	601a      	str	r2, [r3, #0]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68ba      	ldr	r2, [r7, #8]
 8010294:	605a      	str	r2, [r3, #4]
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	609a      	str	r2, [r3, #8]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	60da      	str	r2, [r3, #12]
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	69ba      	ldr	r2, [r7, #24]
 80102a6:	611a      	str	r2, [r3, #16]
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	2200      	movs	r2, #0
 80102ac:	615a      	str	r2, [r3, #20]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	2200      	movs	r2, #0
 80102b2:	761a      	strb	r2, [r3, #24]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	2200      	movs	r2, #0
 80102b8:	765a      	strb	r2, [r3, #25]
{
}
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	4618      	mov	r0, r3
 80102be:	3714      	adds	r7, #20
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	08024c98 	.word	0x08024c98

080102cc <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
 80102d4:	4a04      	ldr	r2, [pc, #16]	; (80102e8 <_ZN10UtestShellD1Ev+0x1c>)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	601a      	str	r2, [r3, #0]
{
}
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	4618      	mov	r0, r3
 80102de:	370c      	adds	r7, #12
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr
 80102e8:	08024c98 	.word	0x08024c98

080102ec <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
}
 80102f4:	6878      	ldr	r0, [r7, #4]
 80102f6:	f7ff ffe9 	bl	80102cc <_ZN10UtestShellD1Ev>
 80102fa:	211c      	movs	r1, #28
 80102fc:	6878      	ldr	r0, [r7, #4]
 80102fe:	f7f7 fbb7 	bl	8007a70 <_ZdlPvj>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4618      	mov	r0, r3
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}

0801030c <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 801030c:	b580      	push	{r7, lr}
 801030e:	b082      	sub	sp, #8
 8010310:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 8010312:	2300      	movs	r3, #0
 8010314:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	3310      	adds	r3, #16
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	6878      	ldr	r0, [r7, #4]
 8010320:	4798      	blx	r3
}
 8010322:	bf00      	nop
 8010324:	3708      	adds	r7, #8
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
	...

0801032c <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 801032c:	b580      	push	{r7, lr}
 801032e:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 8010330:	4b02      	ldr	r3, [pc, #8]	; (801033c <_ZN10UtestShell5crashEv+0x10>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4798      	blx	r3
}
 8010336:	bf00      	nop
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	20000094 	.word	0x20000094

08010340 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	2200      	movs	r2, #0
 8010350:	765a      	strb	r2, [r3, #25]
    result.countRun();
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3324      	adds	r3, #36	; 0x24
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 801035e:	f107 0014 	add.w	r0, r7, #20
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	68ba      	ldr	r2, [r7, #8]
 8010366:	68f9      	ldr	r1, [r7, #12]
 8010368:	f7ff ff0e 	bl	8010188 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	337c      	adds	r3, #124	; 0x7c
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	4798      	blx	r3
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d007      	beq.n	801038e <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 801037e:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	f107 0214 	add.w	r2, r7, #20
 8010386:	4611      	mov	r1, r2
 8010388:	4807      	ldr	r0, [pc, #28]	; (80103a8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 801038a:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 801038c:	e006      	b.n	801039c <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 801038e:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	f107 0214 	add.w	r2, r7, #20
 8010396:	4611      	mov	r1, r2
 8010398:	4804      	ldr	r0, [pc, #16]	; (80103ac <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 801039a:	4798      	blx	r3
}
 801039c:	bf00      	nop
 801039e:	3720      	adds	r7, #32
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}
 80103a4:	200000a0 	.word	0x200000a0
 80103a8:	080101ed 	.word	0x080101ed
 80103ac:	080101b7 	.word	0x080101b7

080103b0 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 80103b0:	b590      	push	{r4, r7, lr}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
    return new Utest();
 80103b8:	22d3      	movs	r2, #211	; 0xd3
 80103ba:	4906      	ldr	r1, [pc, #24]	; (80103d4 <_ZN10UtestShell10createTestEv+0x24>)
 80103bc:	2004      	movs	r0, #4
 80103be:	f7f7 fb43 	bl	8007a48 <_ZnwjPKci>
 80103c2:	4604      	mov	r4, r0
 80103c4:	4620      	mov	r0, r4
 80103c6:	f001 fb0f 	bl	80119e8 <_ZN5UtestC1Ev>
 80103ca:	4623      	mov	r3, r4
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	370c      	adds	r7, #12
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd90      	pop	{r4, r7, pc}
 80103d4:	08021e70 	.word	0x08021e70

080103d8 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
    delete test;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d004      	beq.n	80103f2 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	3204      	adds	r2, #4
 80103ec:	6812      	ldr	r2, [r2, #0]
 80103ee:	4618      	mov	r0, r3
 80103f0:	4790      	blx	r2
}
 80103f2:	bf00      	nop
 80103f4:	3708      	adds	r7, #8
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}
	...

080103fc <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b088      	sub	sp, #32
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	60b9      	str	r1, [r7, #8]
 8010406:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	333c      	adds	r3, #60	; 0x3c
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4940      	ldr	r1, [pc, #256]	; (8010514 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 8010412:	6878      	ldr	r0, [r7, #4]
 8010414:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	3314      	adds	r3, #20
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	687a      	ldr	r2, [r7, #4]
 8010420:	68f9      	ldr	r1, [r7, #12]
 8010422:	68b8      	ldr	r0, [r7, #8]
 8010424:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	333c      	adds	r3, #60	; 0x3c
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	493a      	ldr	r1, [pc, #232]	; (8010518 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 8010434:	f001 faae 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8010438:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 801043a:	68f8      	ldr	r0, [r7, #12]
 801043c:	f001 fa90 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010440:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 8010442:	6879      	ldr	r1, [r7, #4]
 8010444:	68f8      	ldr	r0, [r7, #12]
 8010446:	f001 fa6b 	bl	8011920 <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 801044a:	68f9      	ldr	r1, [r7, #12]
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f001 fa77 	bl	8011940 <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	333c      	adds	r3, #60	; 0x3c
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	4930      	ldr	r1, [pc, #192]	; (801051c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	4798      	blx	r3
    Utest* testToRun = createTest();
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3388      	adds	r3, #136	; 0x88
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	4798      	blx	r3
 801046c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	333c      	adds	r3, #60	; 0x3c
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	492a      	ldr	r1, [pc, #168]	; (8010520 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 8010478:	6878      	ldr	r0, [r7, #4]
 801047a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	333c      	adds	r3, #60	; 0x3c
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	4927      	ldr	r1, [pc, #156]	; (8010524 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	4798      	blx	r3
    testToRun->run();
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	3308      	adds	r3, #8
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	6978      	ldr	r0, [r7, #20]
 8010494:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	333c      	adds	r3, #60	; 0x3c
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	4922      	ldr	r1, [pc, #136]	; (8010528 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 80104a4:	69f9      	ldr	r1, [r7, #28]
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	f001 fa4a 	bl	8011940 <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 80104ac:	69b9      	ldr	r1, [r7, #24]
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f001 fa36 	bl	8011920 <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	333c      	adds	r3, #60	; 0x3c
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	491b      	ldr	r1, [pc, #108]	; (801052c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	4798      	blx	r3
    destroyTest(testToRun);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	338c      	adds	r3, #140	; 0x8c
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	6979      	ldr	r1, [r7, #20]
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	333c      	adds	r3, #60	; 0x3c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4915      	ldr	r1, [pc, #84]	; (8010530 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	333c      	adds	r3, #60	; 0x3c
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4913      	ldr	r1, [pc, #76]	; (8010534 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3318      	adds	r3, #24
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	68f9      	ldr	r1, [r7, #12]
 80104f8:	68b8      	ldr	r0, [r7, #8]
 80104fa:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	333c      	adds	r3, #60	; 0x3c
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	490c      	ldr	r1, [pc, #48]	; (8010538 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 8010506:	6878      	ldr	r0, [r7, #4]
 8010508:	4798      	blx	r3
}
 801050a:	bf00      	nop
 801050c:	3720      	adds	r7, #32
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	08021e84 	.word	0x08021e84
 8010518:	08021ea8 	.word	0x08021ea8
 801051c:	08021ec8 	.word	0x08021ec8
 8010520:	08021ee4 	.word	0x08021ee4
 8010524:	08021f00 	.word	0x08021f00
 8010528:	08021f1c 	.word	0x08021f1c
 801052c:	08021f34 	.word	0x08021f34
 8010530:	08021f50 	.word	0x08021f50
 8010534:	08021f6c 	.word	0x08021f6c
 8010538:	08021f90 	.word	0x08021f90

0801053c <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 801053c:	b480      	push	{r7}
 801053e:	b083      	sub	sp, #12
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
    return next_;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	695b      	ldr	r3, [r3, #20]
}
 8010548:	4618      	mov	r0, r3
 801054a:	370c      	adds	r7, #12
 801054c:	46bd      	mov	sp, r7
 801054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010552:	4770      	bx	lr

08010554 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
    next_ = test;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	683a      	ldr	r2, [r7, #0]
 8010562:	615a      	str	r2, [r3, #20]
    return this;
 8010564:	687b      	ldr	r3, [r7, #4]
}
 8010566:	4618      	mov	r0, r3
 8010568:	370c      	adds	r7, #12
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b082      	sub	sp, #8
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	695b      	ldr	r3, [r3, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00b      	beq.n	801059a <_ZN10UtestShell10countTestsEv+0x28>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	695a      	ldr	r2, [r3, #20]
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	695b      	ldr	r3, [r3, #20]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	3310      	adds	r3, #16
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	4610      	mov	r0, r2
 8010592:	4798      	blx	r3
 8010594:	4603      	mov	r3, r0
 8010596:	3301      	adds	r3, #1
 8010598:	e000      	b.n	801059c <_ZN10UtestShell10countTestsEv+0x2a>
 801059a:	2301      	movs	r3, #1
}
 801059c:	4618      	mov	r0, r3
 801059e:	3708      	adds	r7, #8
 80105a0:	46bd      	mov	sp, r7
 80105a2:	bd80      	pop	{r7, pc}

080105a4 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
 80105ac:	6039      	str	r1, [r7, #0]
    return "TEST";
 80105ae:	4904      	ldr	r1, [pc, #16]	; (80105c0 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7f9 fe0c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
 80105be:	bf00      	nop
 80105c0:	08021fb4 	.word	0x08021fb4

080105c4 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	689b      	ldr	r3, [r3, #8]
 80105d2:	4619      	mov	r1, r3
 80105d4:	6878      	ldr	r0, [r7, #4]
 80105d6:	f7f9 fdfa 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 80105da:	6878      	ldr	r0, [r7, #4]
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}

080105e2 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 80105e2:	b580      	push	{r7, lr}
 80105e4:	b082      	sub	sp, #8
 80105e6:	af00      	add	r7, sp, #0
 80105e8:	6078      	str	r0, [r7, #4]
 80105ea:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	4619      	mov	r1, r3
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7f9 fdeb 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	3708      	adds	r7, #8
 80105fc:	46bd      	mov	sp, r7
 80105fe:	bd80      	pop	{r7, pc}

08010600 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
 8010608:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	33a0      	adds	r3, #160	; 0xa0
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	687a      	ldr	r2, [r7, #4]
 8010614:	6839      	ldr	r1, [r7, #0]
 8010616:	4610      	mov	r0, r2
 8010618:	4798      	blx	r3
    formattedName += "(";
 801061a:	490e      	ldr	r1, [pc, #56]	; (8010654 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f7fa fa1d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	4619      	mov	r1, r3
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7fa fa17 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 801062e:	490a      	ldr	r1, [pc, #40]	; (8010658 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f7fa fa13 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	689b      	ldr	r3, [r3, #8]
 801063a:	4619      	mov	r1, r3
 801063c:	6878      	ldr	r0, [r7, #4]
 801063e:	f7fa fa0d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 8010642:	4906      	ldr	r1, [pc, #24]	; (801065c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7fa fa09 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    return formattedName;
 801064a:	bf00      	nop
}
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	08021fbc 	.word	0x08021fbc
 8010658:	08021fc0 	.word	0x08021fc0
 801065c:	08021fc4 	.word	0x08021fc4

08010660 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	7e5b      	ldrb	r3, [r3, #25]
}
 801066c:	4618      	mov	r0, r3
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <_ZN10UtestShell10countCheckEv>:

void UtestShell::countCheck()
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b082      	sub	sp, #8
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
    getTestResult()->countCheck();
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f001 f96d 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010686:	4603      	mov	r3, r0
 8010688:	681a      	ldr	r2, [r3, #0]
 801068a:	3228      	adds	r2, #40	; 0x28
 801068c:	6812      	ldr	r2, [r2, #0]
 801068e:	4618      	mov	r0, r3
 8010690:	4790      	blx	r2
}
 8010692:	bf00      	nop
 8010694:	3708      	adds	r7, #8
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <_ZNK10UtestShell7willRunEv>:

bool UtestShell::willRun() const
{
 801069a:	b480      	push	{r7}
 801069c:	b083      	sub	sp, #12
 801069e:	af00      	add	r7, sp, #0
 80106a0:	6078      	str	r0, [r7, #4]
    return true;
 80106a2:	2301      	movs	r3, #1
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	370c      	adds	r7, #12
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 80106b0:	b480      	push	{r7}
 80106b2:	b083      	sub	sp, #12
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	7e1b      	ldrb	r3, [r3, #24]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2201      	movs	r2, #1
 80106d4:	761a      	strb	r2, [r3, #24]
}
 80106d6:	bf00      	nop
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 80106e2:	b480      	push	{r7}
 80106e4:	b083      	sub	sp, #12
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]

}
 80106ea:	bf00      	nop
 80106ec:	370c      	adds	r7, #12
 80106ee:	46bd      	mov	sp, r7
 80106f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f4:	4770      	bx	lr

080106f6 <_ZN10UtestShell11setFileNameEPKc>:

void UtestShell::setFileName(const char* fileName)
{
 80106f6:	b480      	push	{r7}
 80106f8:	b083      	sub	sp, #12
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	6039      	str	r1, [r7, #0]
    file_ = fileName;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	683a      	ldr	r2, [r7, #0]
 8010704:	60da      	str	r2, [r3, #12]
}
 8010706:	bf00      	nop
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <_ZN10UtestShell13setLineNumberEj>:

void UtestShell::setLineNumber(size_t lineNumber)
{
 8010712:	b480      	push	{r7}
 8010714:	b083      	sub	sp, #12
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]
    lineNumber_ = lineNumber;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	683a      	ldr	r2, [r7, #0]
 8010720:	611a      	str	r2, [r3, #16]
}
 8010722:	bf00      	nop
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr

0801072e <_ZN10UtestShell12setGroupNameEPKc>:

void UtestShell::setGroupName(const char* groupName)
{
 801072e:	b480      	push	{r7}
 8010730:	b083      	sub	sp, #12
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
 8010736:	6039      	str	r1, [r7, #0]
    group_ = groupName;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	683a      	ldr	r2, [r7, #0]
 801073c:	605a      	str	r2, [r3, #4]
}
 801073e:	bf00      	nop
 8010740:	370c      	adds	r7, #12
 8010742:	46bd      	mov	sp, r7
 8010744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010748:	4770      	bx	lr

0801074a <_ZN10UtestShell11setTestNameEPKc>:

void UtestShell::setTestName(const char* testName)
{
 801074a:	b480      	push	{r7}
 801074c:	b083      	sub	sp, #12
 801074e:	af00      	add	r7, sp, #0
 8010750:	6078      	str	r0, [r7, #4]
 8010752:	6039      	str	r1, [r7, #0]
    name_ = testName;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	683a      	ldr	r2, [r7, #0]
 8010758:	609a      	str	r2, [r3, #8]
}
 801075a:	bf00      	nop
 801075c:	370c      	adds	r7, #12
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr

08010766 <_ZNK10UtestShell7getFileEv>:

const SimpleString UtestShell::getFile() const
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b082      	sub	sp, #8
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
 801076e:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 8010770:	683b      	ldr	r3, [r7, #0]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	4619      	mov	r1, r3
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7f9 fd29 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	691b      	ldr	r3, [r3, #16]
}
 8010790:	4618      	mov	r0, r3
 8010792:	370c      	adds	r7, #12
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 801079c:	b590      	push	{r4, r7, lr}
 801079e:	b087      	sub	sp, #28
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	60f8      	str	r0, [r7, #12]
 80107a4:	60b9      	str	r1, [r7, #8]
 80107a6:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 80107ae:	2301      	movs	r3, #1
 80107b0:	e01f      	b.n	80107f2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d01b      	beq.n	80107f0 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 80107b8:	f107 0310 	add.w	r3, r7, #16
 80107bc:	68b9      	ldr	r1, [r7, #8]
 80107be:	4618      	mov	r0, r3
 80107c0:	f7f9 fd05 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80107c4:	f107 0310 	add.w	r3, r7, #16
 80107c8:	4619      	mov	r1, r3
 80107ca:	6878      	ldr	r0, [r7, #4]
 80107cc:	f00c fb93 	bl	801cef6 <_ZNK10TestFilter5matchERK12SimpleString>
 80107d0:	4603      	mov	r3, r0
 80107d2:	461c      	mov	r4, r3
 80107d4:	f107 0310 	add.w	r3, r7, #16
 80107d8:	4618      	mov	r0, r3
 80107da:	f7fa f8b0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80107de:	2c00      	cmp	r4, #0
 80107e0:	d001      	beq.n	80107e6 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 80107e2:	2301      	movs	r3, #1
 80107e4:	e005      	b.n	80107f2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f00c fb5f 	bl	801ceaa <_ZNK10TestFilter7getNextEv>
 80107ec:	6078      	str	r0, [r7, #4]
 80107ee:	e7e0      	b.n	80107b2 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 80107f0:	2300      	movs	r3, #0
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	371c      	adds	r7, #28
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd90      	pop	{r4, r7, pc}

080107fa <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 80107fa:	b580      	push	{r7, lr}
 80107fc:	b084      	sub	sp, #16
 80107fe:	af00      	add	r7, sp, #0
 8010800:	60f8      	str	r0, [r7, #12]
 8010802:	60b9      	str	r1, [r7, #8]
 8010804:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	685b      	ldr	r3, [r3, #4]
 801080a:	68ba      	ldr	r2, [r7, #8]
 801080c:	4619      	mov	r1, r3
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f7ff ffc4 	bl	801079c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010814:	4603      	mov	r3, r0
 8010816:	2b00      	cmp	r3, #0
 8010818:	d00b      	beq.n	8010832 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff ffba 	bl	801079c <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	d001      	beq.n	8010832 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 801082e:	2301      	movs	r3, #1
 8010830:	e000      	b.n	8010834 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 8010832:	2300      	movs	r3, #0
}
 8010834:	4618      	mov	r0, r3
 8010836:	3710      	adds	r7, #16
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}

0801083c <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 801083c:	b590      	push	{r4, r7, lr}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	339c      	adds	r3, #156	; 0x9c
 801084c:	681c      	ldr	r4, [r3, #0]
 801084e:	f001 f8b1 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8010852:	4603      	mov	r3, r0
 8010854:	461a      	mov	r2, r3
 8010856:	6839      	ldr	r1, [r7, #0]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 801085c:	bf00      	nop
 801085e:	370c      	adds	r7, #12
 8010860:	46bd      	mov	sp, r7
 8010862:	bd90      	pop	{r4, r7, pc}

08010864 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b084      	sub	sp, #16
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2201      	movs	r2, #1
 8010874:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 8010876:	68f8      	ldr	r0, [r7, #12]
 8010878:	f001 f872 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 801087c:	4603      	mov	r3, r0
 801087e:	681a      	ldr	r2, [r3, #0]
 8010880:	3234      	adds	r2, #52	; 0x34
 8010882:	6812      	ldr	r2, [r2, #0]
 8010884:	68b9      	ldr	r1, [r7, #8]
 8010886:	4618      	mov	r0, r3
 8010888:	4790      	blx	r2
    terminator.exitCurrentTest();
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8010894:	bf00      	nop
 8010896:	3710      	adds	r7, #16
 8010898:	46bd      	mov	sp, r7
 801089a:	bd80      	pop	{r7, pc}

0801089c <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b082      	sub	sp, #8
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	6838      	ldr	r0, [r7, #0]
 80108ae:	4798      	blx	r3
} // LCOV_EXCL_LINE
 80108b0:	bf00      	nop
 80108b2:	3708      	adds	r7, #8
 80108b4:	46bd      	mov	sp, r7
 80108b6:	bd80      	pop	{r7, pc}

080108b8 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80108b8:	b590      	push	{r4, r7, lr}
 80108ba:	b09d      	sub	sp, #116	; 0x74
 80108bc:	af04      	add	r7, sp, #16
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	607a      	str	r2, [r7, #4]
 80108c2:	603b      	str	r3, [r7, #0]
 80108c4:	460b      	mov	r3, r1
 80108c6:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f001 f849 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80108ce:	4603      	mov	r3, r0
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	3228      	adds	r2, #40	; 0x28
 80108d4:	6812      	ldr	r2, [r2, #0]
 80108d6:	4618      	mov	r0, r3
 80108d8:	4790      	blx	r2
    if (!condition)
 80108da:	7afb      	ldrb	r3, [r7, #11]
 80108dc:	f083 0301 	eor.w	r3, r3, #1
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d03f      	beq.n	8010966 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	339c      	adds	r3, #156	; 0x9c
 80108ec:	681c      	ldr	r4, [r3, #0]
 80108ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80108f2:	6879      	ldr	r1, [r7, #4]
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f9 fc6a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80108fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80108fe:	6839      	ldr	r1, [r7, #0]
 8010900:	4618      	mov	r0, r3
 8010902:	f7f9 fc64 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010906:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801090a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801090c:	4618      	mov	r0, r3
 801090e:	f7f9 fc5e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010912:	f107 0014 	add.w	r0, r7, #20
 8010916:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801091a:	9302      	str	r3, [sp, #8]
 801091c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010920:	9301      	str	r3, [sp, #4]
 8010922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010926:	9300      	str	r3, [sp, #0]
 8010928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801092a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801092c:	68f9      	ldr	r1, [r7, #12]
 801092e:	f7fb ff6b 	bl	800c808 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010932:	f107 0314 	add.w	r3, r7, #20
 8010936:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010938:	4619      	mov	r1, r3
 801093a:	68f8      	ldr	r0, [r7, #12]
 801093c:	47a0      	blx	r4
 801093e:	f107 0314 	add.w	r3, r7, #20
 8010942:	4618      	mov	r0, r3
 8010944:	f7fc fdce 	bl	800d4e4 <_ZN12CheckFailureD1Ev>
 8010948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801094c:	4618      	mov	r0, r3
 801094e:	f7f9 fff6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010952:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010956:	4618      	mov	r0, r3
 8010958:	f7f9 fff1 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801095c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010960:	4618      	mov	r0, r3
 8010962:	f7f9 ffec 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8010966:	bf00      	nop
 8010968:	3764      	adds	r7, #100	; 0x64
 801096a:	46bd      	mov	sp, r7
 801096c:	bd90      	pop	{r4, r7, pc}

0801096e <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801096e:	b590      	push	{r4, r7, lr}
 8010970:	b097      	sub	sp, #92	; 0x5c
 8010972:	af02      	add	r7, sp, #8
 8010974:	60f8      	str	r0, [r7, #12]
 8010976:	60b9      	str	r1, [r7, #8]
 8010978:	607a      	str	r2, [r7, #4]
 801097a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801097c:	68f8      	ldr	r0, [r7, #12]
 801097e:	f000 ffef 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010982:	4603      	mov	r3, r0
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	3228      	adds	r2, #40	; 0x28
 8010988:	6812      	ldr	r2, [r2, #0]
 801098a:	4618      	mov	r0, r3
 801098c:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	339c      	adds	r3, #156	; 0x9c
 8010994:	681c      	ldr	r4, [r3, #0]
 8010996:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801099a:	68b9      	ldr	r1, [r7, #8]
 801099c:	4618      	mov	r0, r3
 801099e:	f7f9 fc16 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80109a2:	f107 0014 	add.w	r0, r7, #20
 80109a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	687a      	ldr	r2, [r7, #4]
 80109b0:	68f9      	ldr	r1, [r7, #12]
 80109b2:	f7fb ff71 	bl	800c898 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 80109b6:	f107 0314 	add.w	r3, r7, #20
 80109ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80109bc:	4619      	mov	r1, r3
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	47a0      	blx	r4
 80109c2:	f107 0314 	add.w	r3, r7, #20
 80109c6:	4618      	mov	r0, r3
 80109c8:	f7f7 fc16 	bl	80081f8 <_ZN11FailFailureD1Ev>
 80109cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7f9 ffb4 	bl	800a93e <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 80109d6:	bf00      	nop
 80109d8:	3754      	adds	r7, #84	; 0x54
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd90      	pop	{r4, r7, pc}

080109de <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80109de:	b590      	push	{r4, r7, lr}
 80109e0:	b0a7      	sub	sp, #156	; 0x9c
 80109e2:	af04      	add	r7, sp, #16
 80109e4:	60f8      	str	r0, [r7, #12]
 80109e6:	60b9      	str	r1, [r7, #8]
 80109e8:	607a      	str	r2, [r7, #4]
 80109ea:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f000 ffb7 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80109f2:	4603      	mov	r3, r0
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	3228      	adds	r2, #40	; 0x28
 80109f8:	6812      	ldr	r2, [r2, #0]
 80109fa:	4618      	mov	r0, r3
 80109fc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d102      	bne.n	8010a0a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d068      	beq.n	8010adc <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d002      	beq.n	8010a16 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 8010a10:	68bb      	ldr	r3, [r7, #8]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d12a      	bne.n	8010a6c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	339c      	adds	r3, #156	; 0x9c
 8010a1c:	681c      	ldr	r4, [r3, #0]
 8010a1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a22:	6839      	ldr	r1, [r7, #0]
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7f9 fbd2 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010a2a:	f107 0010 	add.w	r0, r7, #16
 8010a2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a32:	9302      	str	r3, [sp, #8]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	9301      	str	r3, [sp, #4]
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	9300      	str	r3, [sp, #0]
 8010a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010a40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010a44:	68f9      	ldr	r1, [r7, #12]
 8010a46:	f7fc f9ad 	bl	800cda4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010a4a:	f107 0310 	add.w	r3, r7, #16
 8010a4e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010a52:	4619      	mov	r1, r3
 8010a54:	68f8      	ldr	r0, [r7, #12]
 8010a56:	47a0      	blx	r4
 8010a58:	f107 0310 	add.w	r3, r7, #16
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f7fc fcb9 	bl	800d3d4 <_ZN18StringEqualFailureD1Ev>
 8010a62:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7f9 ff69 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 8010a6c:	6879      	ldr	r1, [r7, #4]
 8010a6e:	68b8      	ldr	r0, [r7, #8]
 8010a70:	f7f9 f9ea 	bl	8009e48 <_ZN12SimpleString6StrCmpEPKcS1_>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	bf14      	ite	ne
 8010a7a:	2301      	movne	r3, #1
 8010a7c:	2300      	moveq	r3, #0
 8010a7e:	b2db      	uxtb	r3, r3
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d02c      	beq.n	8010ade <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	339c      	adds	r3, #156	; 0x9c
 8010a8a:	681c      	ldr	r4, [r3, #0]
 8010a8c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010a90:	6839      	ldr	r1, [r7, #0]
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f9 fb9b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010a98:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010a9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010aa0:	9302      	str	r3, [sp, #8]
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	9301      	str	r3, [sp, #4]
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	9300      	str	r3, [sp, #0]
 8010aaa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010aae:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010ab2:	68f9      	ldr	r1, [r7, #12]
 8010ab4:	f7fc f976 	bl	800cda4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010abc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	68f8      	ldr	r0, [r7, #12]
 8010ac4:	47a0      	blx	r4
 8010ac6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fc fc82 	bl	800d3d4 <_ZN18StringEqualFailureD1Ev>
 8010ad0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7f9 ff32 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010ada:	e000      	b.n	8010ade <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010adc:	bf00      	nop
}
 8010ade:	378c      	adds	r7, #140	; 0x8c
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd90      	pop	{r4, r7, pc}

08010ae4 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8010ae4:	b590      	push	{r4, r7, lr}
 8010ae6:	b0a7      	sub	sp, #156	; 0x9c
 8010ae8:	af04      	add	r7, sp, #16
 8010aea:	60f8      	str	r0, [r7, #12]
 8010aec:	60b9      	str	r1, [r7, #8]
 8010aee:	607a      	str	r2, [r7, #4]
 8010af0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010af2:	68f8      	ldr	r0, [r7, #12]
 8010af4:	f000 ff34 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010af8:	4603      	mov	r3, r0
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	3228      	adds	r2, #40	; 0x28
 8010afe:	6812      	ldr	r2, [r2, #0]
 8010b00:	4618      	mov	r0, r3
 8010b02:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d102      	bne.n	8010b10 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d06b      	beq.n	8010be8 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d002      	beq.n	8010b1c <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d12b      	bne.n	8010b74 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	339c      	adds	r3, #156	; 0x9c
 8010b22:	681c      	ldr	r4, [r3, #0]
 8010b24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b28:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f7f9 fb4e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010b32:	f107 0010 	add.w	r0, r7, #16
 8010b36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b3a:	9302      	str	r3, [sp, #8]
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	9301      	str	r3, [sp, #4]
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010b48:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010b4c:	68f9      	ldr	r1, [r7, #12]
 8010b4e:	f7fc f929 	bl	800cda4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010b52:	f107 0310 	add.w	r3, r7, #16
 8010b56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	68f8      	ldr	r0, [r7, #12]
 8010b5e:	47a0      	blx	r4
 8010b60:	f107 0310 	add.w	r3, r7, #16
 8010b64:	4618      	mov	r0, r3
 8010b66:	f7fc fc35 	bl	800d3d4 <_ZN18StringEqualFailureD1Ev>
 8010b6a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7f9 fee5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	6879      	ldr	r1, [r7, #4]
 8010b78:	68b8      	ldr	r0, [r7, #8]
 8010b7a:	f7f9 f9a4 	bl	8009ec6 <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	bf14      	ite	ne
 8010b84:	2301      	movne	r3, #1
 8010b86:	2300      	moveq	r3, #0
 8010b88:	b2db      	uxtb	r3, r3
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d02d      	beq.n	8010bea <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	339c      	adds	r3, #156	; 0x9c
 8010b94:	681c      	ldr	r4, [r3, #0]
 8010b96:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010b9a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7f9 fb15 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010ba4:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8010ba8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010bac:	9302      	str	r3, [sp, #8]
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	9301      	str	r3, [sp, #4]
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010bba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8010bbe:	68f9      	ldr	r1, [r7, #12]
 8010bc0:	f7fc f8f0 	bl	800cda4 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010bc4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010bc8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010bcc:	4619      	mov	r1, r3
 8010bce:	68f8      	ldr	r0, [r7, #12]
 8010bd0:	47a0      	blx	r4
 8010bd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fc fbfc 	bl	800d3d4 <_ZN18StringEqualFailureD1Ev>
 8010bdc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7f9 feac 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010be6:	e000      	b.n	8010bea <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010be8:	bf00      	nop
}
 8010bea:	378c      	adds	r7, #140	; 0x8c
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd90      	pop	{r4, r7, pc}

08010bf0 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b0ab      	sub	sp, #172	; 0xac
 8010bf4:	af04      	add	r7, sp, #16
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010bfe:	68f8      	ldr	r0, [r7, #12]
 8010c00:	f000 feae 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010c04:	4603      	mov	r3, r0
 8010c06:	681a      	ldr	r2, [r3, #0]
 8010c08:	3228      	adds	r2, #40	; 0x28
 8010c0a:	6812      	ldr	r2, [r2, #0]
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d102      	bne.n	8010c1c <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d07c      	beq.n	8010d16 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d002      	beq.n	8010c28 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d128      	bne.n	8010c7a <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	3398      	adds	r3, #152	; 0x98
 8010c2e:	681c      	ldr	r4, [r3, #0]
 8010c30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c34:	6839      	ldr	r1, [r7, #0]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7f9 fac9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010c3c:	f107 0010 	add.w	r0, r7, #16
 8010c40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c44:	9302      	str	r3, [sp, #8]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	9301      	str	r3, [sp, #4]
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010c56:	68f9      	ldr	r1, [r7, #12]
 8010c58:	f7fc f948 	bl	800ceec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010c5c:	f107 0310 	add.w	r3, r7, #16
 8010c60:	4619      	mov	r1, r3
 8010c62:	68f8      	ldr	r0, [r7, #12]
 8010c64:	47a0      	blx	r4
 8010c66:	f107 0310 	add.w	r3, r7, #16
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fc fb90 	bl	800d390 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7f9 fe62 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 8010c7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c7e:	68b9      	ldr	r1, [r7, #8]
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f9 faa4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010c86:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f9 fa9e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010c92:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8010c96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7f9 fe75 	bl	800a98c <_ZNK12SimpleString12equalsNoCaseERKS_>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	f083 0301 	eor.w	r3, r3, #1
 8010ca8:	b2dc      	uxtb	r4, r3
 8010caa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f7f9 fe45 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010cb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7f9 fe40 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010cbe:	2c00      	cmp	r4, #0
 8010cc0:	d02a      	beq.n	8010d18 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	3398      	adds	r3, #152	; 0x98
 8010cc8:	681c      	ldr	r4, [r3, #0]
 8010cca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010cce:	6839      	ldr	r1, [r7, #0]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7f9 fa7c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010cd6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8010cda:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010cde:	9302      	str	r3, [sp, #8]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	9301      	str	r3, [sp, #4]
 8010ce4:	68bb      	ldr	r3, [r7, #8]
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010cec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010cf0:	68f9      	ldr	r1, [r7, #12]
 8010cf2:	f7fc f8fb 	bl	800ceec <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 8010cf6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010cfa:	4619      	mov	r1, r3
 8010cfc:	68f8      	ldr	r0, [r7, #12]
 8010cfe:	47a0      	blx	r4
 8010d00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fc fb43 	bl	800d390 <_ZN24StringEqualNoCaseFailureD1Ev>
 8010d0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7f9 fe15 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010d14:	e000      	b.n	8010d18 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010d16:	bf00      	nop
}
 8010d18:	379c      	adds	r7, #156	; 0x9c
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd90      	pop	{r4, r7, pc}

08010d1e <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010d1e:	b590      	push	{r4, r7, lr}
 8010d20:	b0b3      	sub	sp, #204	; 0xcc
 8010d22:	af04      	add	r7, sp, #16
 8010d24:	60f8      	str	r0, [r7, #12]
 8010d26:	60b9      	str	r1, [r7, #8]
 8010d28:	607a      	str	r2, [r7, #4]
 8010d2a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010d2c:	68f8      	ldr	r0, [r7, #12]
 8010d2e:	f000 fe17 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010d32:	4603      	mov	r3, r0
 8010d34:	681a      	ldr	r2, [r3, #0]
 8010d36:	3228      	adds	r2, #40	; 0x28
 8010d38:	6812      	ldr	r2, [r2, #0]
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d103      	bne.n	8010d4c <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	f000 80ad 	beq.w	8010ea6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d002      	beq.n	8010d58 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d140      	bne.n	8010dda <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	3398      	adds	r3, #152	; 0x98
 8010d5e:	681c      	ldr	r4, [r3, #0]
 8010d60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010d64:	68b9      	ldr	r1, [r7, #8]
 8010d66:	4618      	mov	r0, r3
 8010d68:	f7f9 fa31 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010d6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d70:	6879      	ldr	r1, [r7, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7f9 fa2b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010d78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7f9 fa25 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010d84:	f107 0010 	add.w	r0, r7, #16
 8010d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010d8c:	9302      	str	r3, [sp, #8]
 8010d8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010d92:	9301      	str	r3, [sp, #4]
 8010d94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010d9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010da2:	68f9      	ldr	r1, [r7, #12]
 8010da4:	f7fb fce6 	bl	800c774 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010da8:	f107 0310 	add.w	r3, r7, #16
 8010dac:	4619      	mov	r1, r3
 8010dae:	68f8      	ldr	r0, [r7, #12]
 8010db0:	47a0      	blx	r4
 8010db2:	f107 0310 	add.w	r3, r7, #16
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fc fbb6 	bl	800d528 <_ZN15ContainsFailureD1Ev>
 8010dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f7f9 fdbc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010dc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7f9 fdb7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7f9 fdb2 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 8010dda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7f9 f9f4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010de6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010dea:	68b9      	ldr	r1, [r7, #8]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f9 f9ee 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010df2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010df6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010dfa:	4611      	mov	r1, r2
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7f9 fa64 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 8010e02:	4603      	mov	r3, r0
 8010e04:	f083 0301 	eor.w	r3, r3, #1
 8010e08:	b2dc      	uxtb	r4, r3
 8010e0a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7f9 fd95 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010e14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7f9 fd90 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010e1e:	2c00      	cmp	r4, #0
 8010e20:	d042      	beq.n	8010ea8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	3398      	adds	r3, #152	; 0x98
 8010e28:	681c      	ldr	r4, [r3, #0]
 8010e2a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e2e:	68b9      	ldr	r1, [r7, #8]
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7f9 f9cc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010e36:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010e3a:	6879      	ldr	r1, [r7, #4]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7f9 f9c6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010e42:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7f9 f9c0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010e4e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010e52:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e56:	9302      	str	r3, [sp, #8]
 8010e58:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010e5c:	9301      	str	r3, [sp, #4]
 8010e5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e62:	9300      	str	r3, [sp, #0]
 8010e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010e68:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010e6c:	68f9      	ldr	r1, [r7, #12]
 8010e6e:	f7fb fc81 	bl	800c774 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010e72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e76:	4619      	mov	r1, r3
 8010e78:	68f8      	ldr	r0, [r7, #12]
 8010e7a:	47a0      	blx	r4
 8010e7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010e80:	4618      	mov	r0, r3
 8010e82:	f7fc fb51 	bl	800d528 <_ZN15ContainsFailureD1Ev>
 8010e86:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7f9 fd57 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010e90:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010e94:	4618      	mov	r0, r3
 8010e96:	f7f9 fd52 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010e9a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7f9 fd4d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010ea4:	e000      	b.n	8010ea8 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010ea6:	bf00      	nop
}
 8010ea8:	37bc      	adds	r7, #188	; 0xbc
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd90      	pop	{r4, r7, pc}

08010eae <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 8010eae:	b590      	push	{r4, r7, lr}
 8010eb0:	b0b3      	sub	sp, #204	; 0xcc
 8010eb2:	af04      	add	r7, sp, #16
 8010eb4:	60f8      	str	r0, [r7, #12]
 8010eb6:	60b9      	str	r1, [r7, #8]
 8010eb8:	607a      	str	r2, [r7, #4]
 8010eba:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8010ebc:	68f8      	ldr	r0, [r7, #12]
 8010ebe:	f000 fd4f 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	681a      	ldr	r2, [r3, #0]
 8010ec6:	3228      	adds	r2, #40	; 0x28
 8010ec8:	6812      	ldr	r2, [r2, #0]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d103      	bne.n	8010edc <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	f000 80ad 	beq.w	8011036 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d002      	beq.n	8010ee8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d140      	bne.n	8010f6a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3398      	adds	r3, #152	; 0x98
 8010eee:	681c      	ldr	r4, [r3, #0]
 8010ef0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010ef4:	68b9      	ldr	r1, [r7, #8]
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	f7f9 f969 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010efc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010f00:	6879      	ldr	r1, [r7, #4]
 8010f02:	4618      	mov	r0, r3
 8010f04:	f7f9 f963 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f0c:	6839      	ldr	r1, [r7, #0]
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7f9 f95d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010f14:	f107 0010 	add.w	r0, r7, #16
 8010f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f1c:	9302      	str	r3, [sp, #8]
 8010f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010f22:	9301      	str	r3, [sp, #4]
 8010f24:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010f28:	9300      	str	r3, [sp, #0]
 8010f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010f2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010f32:	68f9      	ldr	r1, [r7, #12]
 8010f34:	f7fb fc1e 	bl	800c774 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8010f38:	f107 0310 	add.w	r3, r7, #16
 8010f3c:	4619      	mov	r1, r3
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	47a0      	blx	r4
 8010f42:	f107 0310 	add.w	r3, r7, #16
 8010f46:	4618      	mov	r0, r3
 8010f48:	f7fc faee 	bl	800d528 <_ZN15ContainsFailureD1Ev>
 8010f4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010f50:	4618      	mov	r0, r3
 8010f52:	f7f9 fcf4 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f9 fcef 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010f64:	4618      	mov	r0, r3
 8010f66:	f7f9 fcea 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 8010f6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010f6e:	6879      	ldr	r1, [r7, #4]
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7f9 f92c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010f76:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010f7a:	68b9      	ldr	r1, [r7, #8]
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7f9 f926 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010f82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010f86:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010f8a:	4611      	mov	r1, r2
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f7f9 f9b7 	bl	800a300 <_ZNK12SimpleString14containsNoCaseERKS_>
 8010f92:	4603      	mov	r3, r0
 8010f94:	f083 0301 	eor.w	r3, r3, #1
 8010f98:	b2dc      	uxtb	r4, r3
 8010f9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7f9 fccd 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010fa4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f9 fcc8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8010fae:	2c00      	cmp	r4, #0
 8010fb0:	d042      	beq.n	8011038 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	3398      	adds	r3, #152	; 0x98
 8010fb8:	681c      	ldr	r4, [r3, #0]
 8010fba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010fbe:	68b9      	ldr	r1, [r7, #8]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7f9 f904 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010fc6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010fca:	6879      	ldr	r1, [r7, #4]
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f7f9 f8fe 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010fd2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010fd6:	6839      	ldr	r1, [r7, #0]
 8010fd8:	4618      	mov	r0, r3
 8010fda:	f7f9 f8f8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8010fde:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8010fe2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010fe6:	9302      	str	r3, [sp, #8]
 8010fe8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010fec:	9301      	str	r3, [sp, #4]
 8010fee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010ff2:	9300      	str	r3, [sp, #0]
 8010ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010ff8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8010ffc:	68f9      	ldr	r1, [r7, #12]
 8010ffe:	f7fb fbb9 	bl	800c774 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011002:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011006:	4619      	mov	r1, r3
 8011008:	68f8      	ldr	r0, [r7, #12]
 801100a:	47a0      	blx	r4
 801100c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011010:	4618      	mov	r0, r3
 8011012:	f7fc fa89 	bl	800d528 <_ZN15ContainsFailureD1Ev>
 8011016:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801101a:	4618      	mov	r0, r3
 801101c:	f7f9 fc8f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011020:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8011024:	4618      	mov	r0, r3
 8011026:	f7f9 fc8a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801102a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801102e:	4618      	mov	r0, r3
 8011030:	f7f9 fc85 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011034:	e000      	b.n	8011038 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 8011036:	bf00      	nop
}
 8011038:	37bc      	adds	r7, #188	; 0xbc
 801103a:	46bd      	mov	sp, r7
 801103c:	bd90      	pop	{r4, r7, pc}

0801103e <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 801103e:	b590      	push	{r4, r7, lr}
 8011040:	b099      	sub	sp, #100	; 0x64
 8011042:	af04      	add	r7, sp, #16
 8011044:	60f8      	str	r0, [r7, #12]
 8011046:	60b9      	str	r1, [r7, #8]
 8011048:	607a      	str	r2, [r7, #4]
 801104a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801104c:	68f8      	ldr	r0, [r7, #12]
 801104e:	f000 fc87 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011052:	4603      	mov	r3, r0
 8011054:	681a      	ldr	r2, [r3, #0]
 8011056:	3228      	adds	r2, #40	; 0x28
 8011058:	6812      	ldr	r2, [r2, #0]
 801105a:	4618      	mov	r0, r3
 801105c:	4790      	blx	r2
    if (expected != actual)
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	429a      	cmp	r2, r3
 8011064:	d027      	beq.n	80110b6 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	339c      	adds	r3, #156	; 0x9c
 801106c:	681c      	ldr	r4, [r3, #0]
 801106e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011072:	6839      	ldr	r1, [r7, #0]
 8011074:	4618      	mov	r0, r3
 8011076:	f7f9 f8aa 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801107a:	f107 0014 	add.w	r0, r7, #20
 801107e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011082:	9302      	str	r3, [sp, #8]
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	9301      	str	r3, [sp, #4]
 8011088:	68bb      	ldr	r3, [r7, #8]
 801108a:	9300      	str	r3, [sp, #0]
 801108c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801108e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011090:	68f9      	ldr	r1, [r7, #12]
 8011092:	f7fb fc1f 	bl	800c8d4 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 8011096:	f107 0314 	add.w	r3, r7, #20
 801109a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801109c:	4619      	mov	r1, r3
 801109e:	68f8      	ldr	r0, [r7, #12]
 80110a0:	47a0      	blx	r4
 80110a2:	f107 0314 	add.w	r3, r7, #20
 80110a6:	4618      	mov	r0, r3
 80110a8:	f7fc f9fa 	bl	800d4a0 <_ZN17LongsEqualFailureD1Ev>
 80110ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7f9 fc44 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80110b6:	bf00      	nop
 80110b8:	3754      	adds	r7, #84	; 0x54
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd90      	pop	{r4, r7, pc}

080110be <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80110be:	b590      	push	{r4, r7, lr}
 80110c0:	b099      	sub	sp, #100	; 0x64
 80110c2:	af04      	add	r7, sp, #16
 80110c4:	60f8      	str	r0, [r7, #12]
 80110c6:	60b9      	str	r1, [r7, #8]
 80110c8:	607a      	str	r2, [r7, #4]
 80110ca:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f000 fc47 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80110d2:	4603      	mov	r3, r0
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	3228      	adds	r2, #40	; 0x28
 80110d8:	6812      	ldr	r2, [r2, #0]
 80110da:	4618      	mov	r0, r3
 80110dc:	4790      	blx	r2
    if (expected != actual)
 80110de:	68ba      	ldr	r2, [r7, #8]
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d027      	beq.n	8011136 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	339c      	adds	r3, #156	; 0x9c
 80110ec:	681c      	ldr	r4, [r3, #0]
 80110ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110f2:	6839      	ldr	r1, [r7, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7f9 f86a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80110fa:	f107 0014 	add.w	r0, r7, #20
 80110fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011102:	9302      	str	r3, [sp, #8]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	9301      	str	r3, [sp, #4]
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	9300      	str	r3, [sp, #0]
 801110c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801110e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011110:	68f9      	ldr	r1, [r7, #12]
 8011112:	f7fb fcab 	bl	800ca6c <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 8011116:	f107 0314 	add.w	r3, r7, #20
 801111a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801111c:	4619      	mov	r1, r3
 801111e:	68f8      	ldr	r0, [r7, #12]
 8011120:	47a0      	blx	r4
 8011122:	f107 0314 	add.w	r3, r7, #20
 8011126:	4618      	mov	r0, r3
 8011128:	f7fc f998 	bl	800d45c <_ZN25UnsignedLongsEqualFailureD1Ev>
 801112c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011130:	4618      	mov	r0, r3
 8011132:	f7f9 fc04 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8011136:	bf00      	nop
 8011138:	3754      	adds	r7, #84	; 0x54
 801113a:	46bd      	mov	sp, r7
 801113c:	bd90      	pop	{r4, r7, pc}
	...

08011140 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011140:	b082      	sub	sp, #8
 8011142:	b590      	push	{r4, r7, lr}
 8011144:	b099      	sub	sp, #100	; 0x64
 8011146:	af02      	add	r7, sp, #8
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	1d38      	adds	r0, r7, #4
 801114c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011150:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 8011152:	68f8      	ldr	r0, [r7, #12]
 8011154:	f000 fc04 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011158:	4603      	mov	r3, r0
 801115a:	681a      	ldr	r2, [r3, #0]
 801115c:	3228      	adds	r2, #40	; 0x28
 801115e:	6812      	ldr	r2, [r2, #0]
 8011160:	4618      	mov	r0, r3
 8011162:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	339c      	adds	r3, #156	; 0x9c
 801116a:	681c      	ldr	r4, [r3, #0]
 801116c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011170:	4919      	ldr	r1, [pc, #100]	; (80111d8 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 8011172:	4618      	mov	r0, r3
 8011174:	f7f9 f82b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011178:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801117c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801117e:	4618      	mov	r0, r3
 8011180:	f7f9 f825 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011184:	f107 0014 	add.w	r0, r7, #20
 8011188:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801118c:	9301      	str	r3, [sp, #4]
 801118e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011192:	9300      	str	r3, [sp, #0]
 8011194:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011196:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011198:	68f9      	ldr	r1, [r7, #12]
 801119a:	f7fc f84d 	bl	800d238 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801119e:	f107 0314 	add.w	r3, r7, #20
 80111a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80111a6:	4619      	mov	r1, r3
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	47a0      	blx	r4
 80111ac:	f107 0314 	add.w	r3, r7, #20
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fc f887 	bl	800d2c4 <_ZN25FeatureUnsupportedFailureD1Ev>
 80111b6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7f9 fbbf 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80111c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7f9 fbba 	bl	800a93e <_ZN12SimpleStringD1Ev>
#endif
}
 80111ca:	bf00      	nop
 80111cc:	375c      	adds	r7, #92	; 0x5c
 80111ce:	46bd      	mov	sp, r7
 80111d0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80111d4:	b002      	add	sp, #8
 80111d6:	4770      	bx	lr
 80111d8:	08021fc8 	.word	0x08021fc8

080111dc <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80111dc:	b082      	sub	sp, #8
 80111de:	b590      	push	{r4, r7, lr}
 80111e0:	b099      	sub	sp, #100	; 0x64
 80111e2:	af02      	add	r7, sp, #8
 80111e4:	60f8      	str	r0, [r7, #12]
 80111e6:	1d38      	adds	r0, r7, #4
 80111e8:	e880 0006 	stmia.w	r0, {r1, r2}
 80111ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f000 fbb6 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80111f4:	4603      	mov	r3, r0
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	3228      	adds	r2, #40	; 0x28
 80111fa:	6812      	ldr	r2, [r2, #0]
 80111fc:	4618      	mov	r0, r3
 80111fe:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	339c      	adds	r3, #156	; 0x9c
 8011206:	681c      	ldr	r4, [r3, #0]
 8011208:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801120c:	4919      	ldr	r1, [pc, #100]	; (8011274 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 801120e:	4618      	mov	r0, r3
 8011210:	f7f8 ffdd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011214:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011218:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801121a:	4618      	mov	r0, r3
 801121c:	f7f8 ffd7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011220:	f107 0014 	add.w	r0, r7, #20
 8011224:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011228:	9301      	str	r3, [sp, #4]
 801122a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801122e:	9300      	str	r3, [sp, #0]
 8011230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011232:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011234:	68f9      	ldr	r1, [r7, #12]
 8011236:	f7fb ffff 	bl	800d238 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 801123a:	f107 0314 	add.w	r3, r7, #20
 801123e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011242:	4619      	mov	r1, r3
 8011244:	68f8      	ldr	r0, [r7, #12]
 8011246:	47a0      	blx	r4
 8011248:	f107 0314 	add.w	r3, r7, #20
 801124c:	4618      	mov	r0, r3
 801124e:	f7fc f839 	bl	800d2c4 <_ZN25FeatureUnsupportedFailureD1Ev>
 8011252:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011256:	4618      	mov	r0, r3
 8011258:	f7f9 fb71 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801125c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011260:	4618      	mov	r0, r3
 8011262:	f7f9 fb6c 	bl	800a93e <_ZN12SimpleStringD1Ev>
#endif
}
 8011266:	bf00      	nop
 8011268:	375c      	adds	r7, #92	; 0x5c
 801126a:	46bd      	mov	sp, r7
 801126c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8011270:	b002      	add	sp, #8
 8011272:	4770      	bx	lr
 8011274:	08021fc8 	.word	0x08021fc8

08011278 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011278:	b590      	push	{r4, r7, lr}
 801127a:	b099      	sub	sp, #100	; 0x64
 801127c:	af04      	add	r7, sp, #16
 801127e:	60f8      	str	r0, [r7, #12]
 8011280:	607b      	str	r3, [r7, #4]
 8011282:	460b      	mov	r3, r1
 8011284:	72fb      	strb	r3, [r7, #11]
 8011286:	4613      	mov	r3, r2
 8011288:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 801128a:	68f8      	ldr	r0, [r7, #12]
 801128c:	f000 fb68 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011290:	4603      	mov	r3, r0
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	3228      	adds	r2, #40	; 0x28
 8011296:	6812      	ldr	r2, [r2, #0]
 8011298:	4618      	mov	r0, r3
 801129a:	4790      	blx	r2
    if (expected != actual)
 801129c:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80112a0:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d029      	beq.n	80112fc <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	339c      	adds	r3, #156	; 0x9c
 80112ae:	681c      	ldr	r4, [r3, #0]
 80112b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112b4:	6879      	ldr	r1, [r7, #4]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7f8 ff89 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80112bc:	f107 0014 	add.w	r0, r7, #20
 80112c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112c4:	9302      	str	r3, [sp, #8]
 80112c6:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80112ca:	9301      	str	r3, [sp, #4]
 80112cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80112d0:	9300      	str	r3, [sp, #0]
 80112d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80112d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80112d6:	68f9      	ldr	r1, [r7, #12]
 80112d8:	f7fb fc94 	bl	800cc04 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 80112dc:	f107 0314 	add.w	r3, r7, #20
 80112e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80112e2:	4619      	mov	r1, r3
 80112e4:	68f8      	ldr	r0, [r7, #12]
 80112e6:	47a0      	blx	r4
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4618      	mov	r0, r3
 80112ee:	f7fc f893 	bl	800d418 <_ZN23SignedBytesEqualFailureD1Ev>
 80112f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f9 fb21 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80112fc:	bf00      	nop
 80112fe:	3754      	adds	r7, #84	; 0x54
 8011300:	46bd      	mov	sp, r7
 8011302:	bd90      	pop	{r4, r7, pc}

08011304 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011304:	b590      	push	{r4, r7, lr}
 8011306:	b09d      	sub	sp, #116	; 0x74
 8011308:	af04      	add	r7, sp, #16
 801130a:	60f8      	str	r0, [r7, #12]
 801130c:	60b9      	str	r1, [r7, #8]
 801130e:	607a      	str	r2, [r7, #4]
 8011310:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011312:	68f8      	ldr	r0, [r7, #12]
 8011314:	f000 fb24 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011318:	4603      	mov	r3, r0
 801131a:	681a      	ldr	r2, [r3, #0]
 801131c:	3228      	adds	r2, #40	; 0x28
 801131e:	6812      	ldr	r2, [r2, #0]
 8011320:	4618      	mov	r0, r3
 8011322:	4790      	blx	r2
    if (expected != actual)
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	429a      	cmp	r2, r3
 801132a:	d03f      	beq.n	80113ac <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	339c      	adds	r3, #156	; 0x9c
 8011332:	681c      	ldr	r4, [r3, #0]
 8011334:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011338:	68b9      	ldr	r1, [r7, #8]
 801133a:	4618      	mov	r0, r3
 801133c:	f7f9 fdea 	bl	800af14 <_Z10StringFromPKv>
 8011340:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	f7f9 fde4 	bl	800af14 <_Z10StringFromPKv>
 801134c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011350:	6839      	ldr	r1, [r7, #0]
 8011352:	4618      	mov	r0, r3
 8011354:	f7f8 ff3b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011358:	f107 0014 	add.w	r0, r7, #20
 801135c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011360:	9302      	str	r3, [sp, #8]
 8011362:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011366:	9301      	str	r3, [sp, #4]
 8011368:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801136c:	9300      	str	r3, [sp, #0]
 801136e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011372:	68f9      	ldr	r1, [r7, #12]
 8011374:	f7fb f814 	bl	800c3a0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011378:	f107 0314 	add.w	r3, r7, #20
 801137c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801137e:	4619      	mov	r1, r3
 8011380:	68f8      	ldr	r0, [r7, #12]
 8011382:	47a0      	blx	r4
 8011384:	f107 0314 	add.w	r3, r7, #20
 8011388:	4618      	mov	r0, r3
 801138a:	f7fc f955 	bl	800d638 <_ZN13EqualsFailureD1Ev>
 801138e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011392:	4618      	mov	r0, r3
 8011394:	f7f9 fad3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011398:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801139c:	4618      	mov	r0, r3
 801139e:	f7f9 face 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80113a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7f9 fac9 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80113ac:	bf00      	nop
 80113ae:	3764      	adds	r7, #100	; 0x64
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd90      	pop	{r4, r7, pc}

080113b4 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 80113b4:	b590      	push	{r4, r7, lr}
 80113b6:	b09d      	sub	sp, #116	; 0x74
 80113b8:	af04      	add	r7, sp, #16
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
 80113c0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f000 facc 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80113c8:	4603      	mov	r3, r0
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	3228      	adds	r2, #40	; 0x28
 80113ce:	6812      	ldr	r2, [r2, #0]
 80113d0:	4618      	mov	r0, r3
 80113d2:	4790      	blx	r2
    if (expected != actual)
 80113d4:	68ba      	ldr	r2, [r7, #8]
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d03f      	beq.n	801145c <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	339c      	adds	r3, #156	; 0x9c
 80113e2:	681c      	ldr	r4, [r3, #0]
 80113e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80113e8:	68b9      	ldr	r1, [r7, #8]
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7f9 fdbc 	bl	800af68 <_Z10StringFromPFvvE>
 80113f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80113f4:	6879      	ldr	r1, [r7, #4]
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7f9 fdb6 	bl	800af68 <_Z10StringFromPFvvE>
 80113fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011400:	6839      	ldr	r1, [r7, #0]
 8011402:	4618      	mov	r0, r3
 8011404:	f7f8 fee3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011408:	f107 0014 	add.w	r0, r7, #20
 801140c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011410:	9302      	str	r3, [sp, #8]
 8011412:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011416:	9301      	str	r3, [sp, #4]
 8011418:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801141c:	9300      	str	r3, [sp, #0]
 801141e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011420:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011422:	68f9      	ldr	r1, [r7, #12]
 8011424:	f7fa ffbc 	bl	800c3a0 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011428:	f107 0314 	add.w	r3, r7, #20
 801142c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801142e:	4619      	mov	r1, r3
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	47a0      	blx	r4
 8011434:	f107 0314 	add.w	r3, r7, #20
 8011438:	4618      	mov	r0, r3
 801143a:	f7fc f8fd 	bl	800d638 <_ZN13EqualsFailureD1Ev>
 801143e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011442:	4618      	mov	r0, r3
 8011444:	f7f9 fa7b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011448:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801144c:	4618      	mov	r0, r3
 801144e:	f7f9 fa76 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011452:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011456:	4618      	mov	r0, r3
 8011458:	f7f9 fa71 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801145c:	bf00      	nop
 801145e:	3764      	adds	r7, #100	; 0x64
 8011460:	46bd      	mov	sp, r7
 8011462:	bd90      	pop	{r4, r7, pc}

08011464 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011464:	b590      	push	{r4, r7, lr}
 8011466:	b09d      	sub	sp, #116	; 0x74
 8011468:	af02      	add	r7, sp, #8
 801146a:	6278      	str	r0, [r7, #36]	; 0x24
 801146c:	ed87 0b06 	vstr	d0, [r7, #24]
 8011470:	ed87 1b04 	vstr	d1, [r7, #16]
 8011474:	ed87 2b02 	vstr	d2, [r7, #8]
 8011478:	6239      	str	r1, [r7, #32]
 801147a:	607a      	str	r2, [r7, #4]
 801147c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 801147e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011480:	f000 fa6e 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011484:	4603      	mov	r3, r0
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	3228      	adds	r2, #40	; 0x28
 801148a:	6812      	ldr	r2, [r2, #0]
 801148c:	4618      	mov	r0, r3
 801148e:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 8011490:	ed97 2b02 	vldr	d2, [r7, #8]
 8011494:	ed97 1b04 	vldr	d1, [r7, #16]
 8011498:	ed97 0b06 	vldr	d0, [r7, #24]
 801149c:	f7fe fd4a 	bl	800ff34 <_Z13doubles_equalddd>
 80114a0:	4603      	mov	r3, r0
 80114a2:	f083 0301 	eor.w	r3, r3, #1
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d029      	beq.n	8011500 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 80114ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	339c      	adds	r3, #156	; 0x9c
 80114b2:	681c      	ldr	r4, [r3, #0]
 80114b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114b8:	6a39      	ldr	r1, [r7, #32]
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7f8 fe87 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80114c0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80114c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114c8:	9300      	str	r3, [sp, #0]
 80114ca:	ed97 2b02 	vldr	d2, [r7, #8]
 80114ce:	ed97 1b04 	vldr	d1, [r7, #16]
 80114d2:	ed97 0b06 	vldr	d0, [r7, #24]
 80114d6:	683b      	ldr	r3, [r7, #0]
 80114d8:	687a      	ldr	r2, [r7, #4]
 80114da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80114dc:	f7fa ffa2 	bl	800c424 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 80114e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114e4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114e6:	4619      	mov	r1, r3
 80114e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80114ea:	47a0      	blx	r4
 80114ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fc f87f 	bl	800d5f4 <_ZN19DoublesEqualFailureD1Ev>
 80114f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f9 fa1f 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8011500:	bf00      	nop
 8011502:	376c      	adds	r7, #108	; 0x6c
 8011504:	46bd      	mov	sp, r7
 8011506:	bd90      	pop	{r4, r7, pc}

08011508 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011508:	b590      	push	{r4, r7, lr}
 801150a:	b0a7      	sub	sp, #156	; 0x9c
 801150c:	af04      	add	r7, sp, #16
 801150e:	60f8      	str	r0, [r7, #12]
 8011510:	60b9      	str	r1, [r7, #8]
 8011512:	607a      	str	r2, [r7, #4]
 8011514:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f000 fa22 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 801151c:	4603      	mov	r3, r0
 801151e:	681a      	ldr	r2, [r3, #0]
 8011520:	3228      	adds	r2, #40	; 0x28
 8011522:	6812      	ldr	r2, [r2, #0]
 8011524:	4618      	mov	r0, r3
 8011526:	4790      	blx	r2
	if (length == 0) return;
 8011528:	683b      	ldr	r3, [r7, #0]
 801152a:	2b00      	cmp	r3, #0
 801152c:	d075      	beq.n	801161a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d102      	bne.n	801153a <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d071      	beq.n	801161e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d002      	beq.n	8011546 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d12d      	bne.n	80115a2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	339c      	adds	r3, #156	; 0x9c
 801154c:	681c      	ldr	r4, [r3, #0]
 801154e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011552:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8011556:	4618      	mov	r0, r3
 8011558:	f7f8 fe39 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801155c:	f107 0010 	add.w	r0, r7, #16
 8011560:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011564:	9303      	str	r3, [sp, #12]
 8011566:	683b      	ldr	r3, [r7, #0]
 8011568:	9302      	str	r3, [sp, #8]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	9301      	str	r3, [sp, #4]
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	9300      	str	r3, [sp, #0]
 8011572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011576:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801157a:	68f9      	ldr	r1, [r7, #12]
 801157c:	f7fb fd70 	bl	800d060 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 8011580:	f107 0310 	add.w	r3, r7, #16
 8011584:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011588:	4619      	mov	r1, r3
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	47a0      	blx	r4
 801158e:	f107 0310 	add.w	r3, r7, #16
 8011592:	4618      	mov	r0, r3
 8011594:	f7fb feda 	bl	800d34c <_ZN18BinaryEqualFailureD1Ev>
 8011598:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801159c:	4618      	mov	r0, r3
 801159e:	f7f9 f9ce 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 80115a2:	683a      	ldr	r2, [r7, #0]
 80115a4:	6879      	ldr	r1, [r7, #4]
 80115a6:	68b8      	ldr	r0, [r7, #8]
 80115a8:	f7f8 fd30 	bl	800a00c <_ZN12SimpleString6MemCmpEPKvS1_j>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	bf14      	ite	ne
 80115b2:	2301      	movne	r3, #1
 80115b4:	2300      	moveq	r3, #0
 80115b6:	b2db      	uxtb	r3, r3
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d031      	beq.n	8011620 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	339c      	adds	r3, #156	; 0x9c
 80115c2:	681c      	ldr	r4, [r3, #0]
 80115c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80115c8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7f8 fdfe 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80115d2:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80115d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80115da:	9303      	str	r3, [sp, #12]
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	9302      	str	r3, [sp, #8]
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	9301      	str	r3, [sp, #4]
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	9300      	str	r3, [sp, #0]
 80115e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80115ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80115f0:	68f9      	ldr	r1, [r7, #12]
 80115f2:	f7fb fd35 	bl	800d060 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 80115f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80115fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80115fe:	4619      	mov	r1, r3
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	47a0      	blx	r4
 8011604:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011608:	4618      	mov	r0, r3
 801160a:	f7fb fe9f 	bl	800d34c <_ZN18BinaryEqualFailureD1Ev>
 801160e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011612:	4618      	mov	r0, r3
 8011614:	f7f9 f993 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011618:	e002      	b.n	8011620 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 801161a:	bf00      	nop
 801161c:	e000      	b.n	8011620 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 801161e:	bf00      	nop
}
 8011620:	378c      	adds	r7, #140	; 0x8c
 8011622:	46bd      	mov	sp, r7
 8011624:	bd90      	pop	{r4, r7, pc}

08011626 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 8011626:	b590      	push	{r4, r7, lr}
 8011628:	b09b      	sub	sp, #108	; 0x6c
 801162a:	af06      	add	r7, sp, #24
 801162c:	60f8      	str	r0, [r7, #12]
 801162e:	60b9      	str	r1, [r7, #8]
 8011630:	607a      	str	r2, [r7, #4]
 8011632:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f000 f993 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 801163a:	4603      	mov	r3, r0
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	3228      	adds	r2, #40	; 0x28
 8011640:	6812      	ldr	r2, [r2, #0]
 8011642:	4618      	mov	r0, r3
 8011644:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 8011646:	68ba      	ldr	r2, [r7, #8]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	405a      	eors	r2, r3
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	4013      	ands	r3, r2
 8011650:	2b00      	cmp	r3, #0
 8011652:	d02b      	beq.n	80116ac <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	339c      	adds	r3, #156	; 0x9c
 801165a:	681c      	ldr	r4, [r3, #0]
 801165c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011660:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011662:	4618      	mov	r0, r3
 8011664:	f7f8 fdb3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011668:	f107 0014 	add.w	r0, r7, #20
 801166c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011670:	9304      	str	r3, [sp, #16]
 8011672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011674:	9303      	str	r3, [sp, #12]
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	9302      	str	r3, [sp, #8]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	9301      	str	r3, [sp, #4]
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	9300      	str	r3, [sp, #0]
 8011682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011684:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011686:	68f9      	ldr	r1, [r7, #12]
 8011688:	f7fb fd7a 	bl	800d180 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 801168c:	f107 0314 	add.w	r3, r7, #20
 8011690:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011692:	4619      	mov	r1, r3
 8011694:	68f8      	ldr	r0, [r7, #12]
 8011696:	47a0      	blx	r4
 8011698:	f107 0314 	add.w	r3, r7, #20
 801169c:	4618      	mov	r0, r3
 801169e:	f7fb fe33 	bl	800d308 <_ZN16BitsEqualFailureD1Ev>
 80116a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7f9 f949 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80116ac:	bf00      	nop
 80116ae:	3754      	adds	r7, #84	; 0x54
 80116b0:	46bd      	mov	sp, r7
 80116b2:	bd90      	pop	{r4, r7, pc}

080116b4 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 80116b4:	b590      	push	{r4, r7, lr}
 80116b6:	b09d      	sub	sp, #116	; 0x74
 80116b8:	af04      	add	r7, sp, #16
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	607a      	str	r2, [r7, #4]
 80116be:	603b      	str	r3, [r7, #0]
 80116c0:	460b      	mov	r3, r1
 80116c2:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f000 f94b 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 80116ca:	4603      	mov	r3, r0
 80116cc:	681a      	ldr	r2, [r3, #0]
 80116ce:	3228      	adds	r2, #40	; 0x28
 80116d0:	6812      	ldr	r2, [r2, #0]
 80116d2:	4618      	mov	r0, r3
 80116d4:	4790      	blx	r2
    if (failed)
 80116d6:	7afb      	ldrb	r3, [r7, #11]
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d03f      	beq.n	801175c <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	339c      	adds	r3, #156	; 0x9c
 80116e2:	681c      	ldr	r4, [r3, #0]
 80116e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80116e8:	6879      	ldr	r1, [r7, #4]
 80116ea:	4618      	mov	r0, r3
 80116ec:	f7f8 fd6f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80116f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80116f4:	6839      	ldr	r1, [r7, #0]
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7f8 fd69 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80116fc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011700:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011702:	4618      	mov	r0, r3
 8011704:	f7f8 fd63 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8011708:	f107 0014 	add.w	r0, r7, #20
 801170c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011710:	9302      	str	r3, [sp, #8]
 8011712:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011716:	9301      	str	r3, [sp, #4]
 8011718:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011720:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011722:	68f9      	ldr	r1, [r7, #12]
 8011724:	f7fa ff30 	bl	800c588 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 8011728:	f107 0314 	add.w	r3, r7, #20
 801172c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801172e:	4619      	mov	r1, r3
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	47a0      	blx	r4
 8011734:	f107 0314 	add.w	r3, r7, #20
 8011738:	4618      	mov	r0, r3
 801173a:	f7fb ff39 	bl	800d5b0 <_ZN17CheckEqualFailureD1Ev>
 801173e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011742:	4618      	mov	r0, r3
 8011744:	f7f9 f8fb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801174c:	4618      	mov	r0, r3
 801174e:	f7f9 f8f6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011752:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011756:	4618      	mov	r0, r3
 8011758:	f7f9 f8f1 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801175c:	bf00      	nop
 801175e:	3764      	adds	r7, #100	; 0x64
 8011760:	46bd      	mov	sp, r7
 8011762:	bd90      	pop	{r4, r7, pc}

08011764 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 8011764:	b590      	push	{r4, r7, lr}
 8011766:	b09d      	sub	sp, #116	; 0x74
 8011768:	af04      	add	r7, sp, #16
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	607a      	str	r2, [r7, #4]
 801176e:	603b      	str	r3, [r7, #0]
 8011770:	460b      	mov	r3, r1
 8011772:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f000 f8f3 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 801177a:	4603      	mov	r3, r0
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	3228      	adds	r2, #40	; 0x28
 8011780:	6812      	ldr	r2, [r2, #0]
 8011782:	4618      	mov	r0, r3
 8011784:	4790      	blx	r2
    if (!comparison)
 8011786:	7afb      	ldrb	r3, [r7, #11]
 8011788:	f083 0301 	eor.w	r3, r3, #1
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d03f      	beq.n	8011812 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	339c      	adds	r3, #156	; 0x9c
 8011798:	681c      	ldr	r4, [r3, #0]
 801179a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801179e:	6879      	ldr	r1, [r7, #4]
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f8 fd14 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80117a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117aa:	6839      	ldr	r1, [r7, #0]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f7f8 fd0e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80117b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117b6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7f8 fd08 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80117be:	f107 0014 	add.w	r0, r7, #20
 80117c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117c6:	9302      	str	r3, [sp, #8]
 80117c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80117cc:	9301      	str	r3, [sp, #4]
 80117ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80117d2:	9300      	str	r3, [sp, #0]
 80117d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80117d8:	68f9      	ldr	r1, [r7, #12]
 80117da:	f7fa ff83 	bl	800c6e4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 80117de:	f107 0314 	add.w	r3, r7, #20
 80117e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80117e4:	4619      	mov	r1, r3
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	47a0      	blx	r4
 80117ea:	f107 0314 	add.w	r3, r7, #20
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fb febc 	bl	800d56c <_ZN17ComparisonFailureD1Ev>
 80117f4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7f9 f8a0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80117fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011802:	4618      	mov	r0, r3
 8011804:	f7f9 f89b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8011808:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801180c:	4618      	mov	r0, r3
 801180e:	f7f9 f896 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8011812:	bf00      	nop
 8011814:	3764      	adds	r7, #100	; 0x64
 8011816:	46bd      	mov	sp, r7
 8011818:	bd90      	pop	{r4, r7, pc}
	...

0801181c <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 801181c:	b5b0      	push	{r4, r5, r7, lr}
 801181e:	b088      	sub	sp, #32
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	607a      	str	r2, [r7, #4]
 8011828:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 801182a:	f107 0310 	add.w	r3, r7, #16
 801182e:	4924      	ldr	r1, [pc, #144]	; (80118c0 <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 8011830:	4618      	mov	r0, r3
 8011832:	f7f8 fccc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 8011836:	f107 0310 	add.w	r3, r7, #16
 801183a:	6879      	ldr	r1, [r7, #4]
 801183c:	4618      	mov	r0, r3
 801183e:	f7f9 f90d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 8011842:	f107 0310 	add.w	r3, r7, #16
 8011846:	491f      	ldr	r1, [pc, #124]	; (80118c4 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 8011848:	4618      	mov	r0, r3
 801184a:	f7f9 f907 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 801184e:	f107 0318 	add.w	r3, r7, #24
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	4618      	mov	r0, r3
 8011856:	f7f9 fda1 	bl	800b39c <_Z10StringFromj>
 801185a:	f107 0218 	add.w	r2, r7, #24
 801185e:	f107 0310 	add.w	r3, r7, #16
 8011862:	4611      	mov	r1, r2
 8011864:	4618      	mov	r0, r3
 8011866:	f7f9 f8e7 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801186a:	f107 0318 	add.w	r3, r7, #24
 801186e:	4618      	mov	r0, r3
 8011870:	f7f9 f865 	bl	800a93e <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 8011874:	f107 0310 	add.w	r3, r7, #16
 8011878:	4913      	ldr	r1, [pc, #76]	; (80118c8 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 801187a:	4618      	mov	r0, r3
 801187c:	f7f9 f8ee 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 8011880:	f107 0310 	add.w	r3, r7, #16
 8011884:	68b9      	ldr	r1, [r7, #8]
 8011886:	4618      	mov	r0, r3
 8011888:	f7f9 f8e8 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 f867 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 8011892:	4604      	mov	r4, r0
 8011894:	6823      	ldr	r3, [r4, #0]
 8011896:	3338      	adds	r3, #56	; 0x38
 8011898:	681d      	ldr	r5, [r3, #0]
 801189a:	f107 0310 	add.w	r3, r7, #16
 801189e:	4618      	mov	r0, r3
 80118a0:	f7f9 f820 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80118a4:	4603      	mov	r3, r0
 80118a6:	4619      	mov	r1, r3
 80118a8:	4620      	mov	r0, r4
 80118aa:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 80118ac:	f107 0310 	add.w	r3, r7, #16
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7f9 f844 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80118b6:	bf00      	nop
 80118b8:	3720      	adds	r7, #32
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bdb0      	pop	{r4, r5, r7, pc}
 80118be:	bf00      	nop
 80118c0:	08021fe0 	.word	0x08021fe0
 80118c4:	08021fe4 	.word	0x08021fe4
 80118c8:	08021fe8 	.word	0x08021fe8

080118cc <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 80118cc:	b590      	push	{r4, r7, lr}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	60f8      	str	r0, [r7, #12]
 80118d4:	60b9      	str	r1, [r7, #8]
 80118d6:	607a      	str	r2, [r7, #4]
 80118d8:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	3370      	adds	r3, #112	; 0x70
 80118e0:	681c      	ldr	r4, [r3, #0]
 80118e2:	68b8      	ldr	r0, [r7, #8]
 80118e4:	f7f8 fffe 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80118e8:	4601      	mov	r1, r0
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	687a      	ldr	r2, [r7, #4]
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	47a0      	blx	r4
}
 80118f2:	bf00      	nop
 80118f4:	3714      	adds	r7, #20
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd90      	pop	{r4, r7, pc}

080118fa <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 80118fa:	b580      	push	{r7, lr}
 80118fc:	b082      	sub	sp, #8
 80118fe:	af00      	add	r7, sp, #0
 8011900:	6078      	str	r0, [r7, #4]
 8011902:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 f82b 	bl	8011960 <_ZN10UtestShell13getTestResultEv>
 801190a:	4603      	mov	r3, r0
 801190c:	681a      	ldr	r2, [r3, #0]
 801190e:	323c      	adds	r2, #60	; 0x3c
 8011910:	6812      	ldr	r2, [r2, #0]
 8011912:	6839      	ldr	r1, [r7, #0]
 8011914:	4618      	mov	r0, r3
 8011916:	4790      	blx	r2
}
 8011918:	bf00      	nop
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
 8011928:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 801192a:	4a04      	ldr	r2, [pc, #16]	; (801193c <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	6013      	str	r3, [r2, #0]
}
 8011930:	bf00      	nop
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr
 801193c:	200008cc 	.word	0x200008cc

08011940 <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
 8011948:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 801194a:	4a04      	ldr	r2, [pc, #16]	; (801195c <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 801194c:	683b      	ldr	r3, [r7, #0]
 801194e:	6013      	str	r3, [r2, #0]
}
 8011950:	bf00      	nop
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	200008d0 	.word	0x200008d0

08011960 <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 8011968:	4b09      	ldr	r3, [pc, #36]	; (8011990 <_ZN10UtestShell13getTestResultEv+0x30>)
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d109      	bne.n	8011984 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 8011970:	f7fe fbb2 	bl	80100d8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 8011974:	4603      	mov	r3, r0
 8011976:	681a      	ldr	r2, [r3, #0]
 8011978:	32a4      	adds	r2, #164	; 0xa4
 801197a:	6812      	ldr	r2, [r2, #0]
 801197c:	4618      	mov	r0, r3
 801197e:	4790      	blx	r2
 8011980:	4603      	mov	r3, r0
 8011982:	e001      	b.n	8011988 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 8011984:	4b02      	ldr	r3, [pc, #8]	; (8011990 <_ZN10UtestShell13getTestResultEv+0x30>)
 8011986:	681b      	ldr	r3, [r3, #0]
}
 8011988:	4618      	mov	r0, r3
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}
 8011990:	200008cc 	.word	0x200008cc

08011994 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 8011994:	b580      	push	{r7, lr}
 8011996:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 8011998:	4b05      	ldr	r3, [pc, #20]	; (80119b0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d103      	bne.n	80119a8 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 80119a0:	f7fe fb9a 	bl	80100d8 <_ZN22OutsideTestRunnerUTest8instanceEv>
 80119a4:	4603      	mov	r3, r0
 80119a6:	e001      	b.n	80119ac <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 80119a8:	4b01      	ldr	r3, [pc, #4]	; (80119b0 <_ZN10UtestShell10getCurrentEv+0x1c>)
 80119aa:	681b      	ldr	r3, [r3, #0]
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	200008d0 	.word	0x200008d0

080119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 80119b4:	b480      	push	{r7}
 80119b6:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 80119b8:	4b03      	ldr	r3, [pc, #12]	; (80119c8 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 80119ba:	681b      	ldr	r3, [r3, #0]
}
 80119bc:	4618      	mov	r0, r3
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	20000090 	.word	0x20000090

080119cc <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 80119cc:	b480      	push	{r7}
 80119ce:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 80119d0:	4b03      	ldr	r3, [pc, #12]	; (80119e0 <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 80119d2:	4a04      	ldr	r2, [pc, #16]	; (80119e4 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 80119d4:	601a      	str	r2, [r3, #0]
}
 80119d6:	bf00      	nop
 80119d8:	46bd      	mov	sp, r7
 80119da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119de:	4770      	bx	lr
 80119e0:	20000090 	.word	0x20000090
 80119e4:	2000008c 	.word	0x2000008c

080119e8 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	4a04      	ldr	r2, [pc, #16]	; (8011a04 <_ZN5UtestC1Ev+0x1c>)
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	601a      	str	r2, [r3, #0]
{
}
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	4618      	mov	r0, r3
 80119fa:	370c      	adds	r7, #12
 80119fc:	46bd      	mov	sp, r7
 80119fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a02:	4770      	bx	lr
 8011a04:	08024d94 	.word	0x08024d94

08011a08 <_ZN5UtestD1Ev>:

Utest::~Utest()
 8011a08:	b480      	push	{r7}
 8011a0a:	b083      	sub	sp, #12
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	4a04      	ldr	r2, [pc, #16]	; (8011a24 <_ZN5UtestD1Ev+0x1c>)
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	601a      	str	r2, [r3, #0]
{
}
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	4618      	mov	r0, r3
 8011a1a:	370c      	adds	r7, #12
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr
 8011a24:	08024d94 	.word	0x08024d94

08011a28 <_ZN5UtestD0Ev>:
Utest::~Utest()
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b082      	sub	sp, #8
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
}
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7ff ffe9 	bl	8011a08 <_ZN5UtestD1Ev>
 8011a36:	2104      	movs	r1, #4
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7f6 f819 	bl	8007a70 <_ZdlPvj>
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 8011a50:	4b0d      	ldr	r3, [pc, #52]	; (8011a88 <_ZN5Utest3runEv+0x40>)
 8011a52:	681b      	ldr	r3, [r3, #0]
 8011a54:	6879      	ldr	r1, [r7, #4]
 8011a56:	480d      	ldr	r0, [pc, #52]	; (8011a8c <_ZN5Utest3runEv+0x44>)
 8011a58:	4798      	blx	r3
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	bf14      	ite	ne
 8011a60:	2301      	movne	r3, #1
 8011a62:	2300      	moveq	r3, #0
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d004      	beq.n	8011a74 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 8011a6a:	4b07      	ldr	r3, [pc, #28]	; (8011a88 <_ZN5Utest3runEv+0x40>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	6879      	ldr	r1, [r7, #4]
 8011a70:	4807      	ldr	r0, [pc, #28]	; (8011a90 <_ZN5Utest3runEv+0x48>)
 8011a72:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 8011a74:	4b04      	ldr	r3, [pc, #16]	; (8011a88 <_ZN5Utest3runEv+0x40>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	6879      	ldr	r1, [r7, #4]
 8011a7a:	4806      	ldr	r0, [pc, #24]	; (8011a94 <_ZN5Utest3runEv+0x4c>)
 8011a7c:	4798      	blx	r3
}
 8011a7e:	bf00      	nop
 8011a80:	3708      	adds	r7, #8
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}
 8011a86:	bf00      	nop
 8011a88:	200000a0 	.word	0x200000a0
 8011a8c:	08010135 	.word	0x08010135
 8011a90:	08010151 	.word	0x08010151
 8011a94:	0801016d 	.word	0x0801016d

08011a98 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b083      	sub	sp, #12
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
}
 8011aa0:	bf00      	nop
 8011aa2:	370c      	adds	r7, #12
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aaa:	4770      	bx	lr

08011aac <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 8011aac:	b480      	push	{r7}
 8011aae:	b083      	sub	sp, #12
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
}
 8011ab4:	bf00      	nop
 8011ab6:	370c      	adds	r7, #12
 8011ab8:	46bd      	mov	sp, r7
 8011aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abe:	4770      	bx	lr

08011ac0 <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
}
 8011ac8:	bf00      	nop
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	4a04      	ldr	r2, [pc, #16]	; (8011af0 <_ZN14TestTerminatorD1Ev+0x1c>)
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	601a      	str	r2, [r3, #0]
{
}
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	08024d80 	.word	0x08024d80

08011af4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 8011afc:	2300      	movs	r3, #0
 8011afe:	60fb      	str	r3, [r7, #12]
 8011b00:	f107 030c 	add.w	r3, r7, #12
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7f6 f975 	bl	8007df4 <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8011b0a:	f107 030c 	add.w	r3, r7, #12
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f000 f82c 	bl	8011b6c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 8011b14:	f107 030c 	add.w	r3, r7, #12
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f000 f835 	bl	8011b88 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 8011b1e:	bf00      	nop
 8011b20:	3710      	adds	r7, #16
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
	...

08011b28 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b082      	sub	sp, #8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	4a05      	ldr	r2, [pc, #20]	; (8011b48 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	601a      	str	r2, [r3, #0]
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff ffcb 	bl	8011ad4 <_ZN14TestTerminatorD1Ev>
{
}
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}
 8011b48:	08024d6c 	.word	0x08024d6c

08011b4c <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
}
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff ffe7 	bl	8011b28 <_ZN20NormalTestTerminatorD1Ev>
 8011b5a:	2104      	movs	r1, #4
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7f5 ff87 	bl	8007a70 <_ZdlPvj>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	4618      	mov	r0, r3
 8011b66:	3708      	adds	r7, #8
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 8011b74:	4b03      	ldr	r3, [pc, #12]	; (8011b84 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	4798      	blx	r3
} // LCOV_EXCL_LINE
 8011b7a:	bf00      	nop
 8011b7c:	3708      	adds	r7, #8
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bd80      	pop	{r7, pc}
 8011b82:	bf00      	nop
 8011b84:	2000009c 	.word	0x2000009c

08011b88 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b082      	sub	sp, #8
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	4a05      	ldr	r2, [pc, #20]	; (8011ba8 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	601a      	str	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	4618      	mov	r0, r3
 8011b9a:	f7ff ff9b 	bl	8011ad4 <_ZN14TestTerminatorD1Ev>
{
}
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	3708      	adds	r7, #8
 8011ba4:	46bd      	mov	sp, r7
 8011ba6:	bd80      	pop	{r7, pc}
 8011ba8:	08024d58 	.word	0x08024d58

08011bac <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
}
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7ff ffe7 	bl	8011b88 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8011bba:	2104      	movs	r1, #4
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f7f5 ff57 	bl	8007a70 <_ZdlPvj>
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b082      	sub	sp, #8
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 8011bd4:	f7fe fbaa 	bl	801032c <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff ff8a 	bl	8011af4 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	4a05      	ldr	r2, [pc, #20]	; (8011c08 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	601a      	str	r2, [r3, #0]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f7ff ff95 	bl	8011b28 <_ZN20NormalTestTerminatorD1Ev>
{
}
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4618      	mov	r0, r3
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	08024d44 	.word	0x08024d44

08011c0c <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b082      	sub	sp, #8
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
}
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f7ff ffe7 	bl	8011be8 <_ZN22CrashingTestTerminatorD1Ev>
 8011c1a:	2104      	movs	r1, #4
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f7f5 ff27 	bl	8007a70 <_ZdlPvj>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4618      	mov	r0, r3
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	601a      	str	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2200      	movs	r2, #0
 8011c40:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d007      	beq.n	8011c58 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	3310      	adds	r3, #16
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	6838      	ldr	r0, [r7, #0]
 8011c52:	4798      	blx	r3
 8011c54:	4603      	mov	r3, r0
 8011c56:	e000      	b.n	8011c5a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 8011c58:	2300      	movs	r3, #0
 8011c5a:	687a      	ldr	r2, [r7, #4]
 8011c5c:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d02d      	beq.n	8011cc2 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	685b      	ldr	r3, [r3, #4]
 8011c6a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d201      	bcs.n	8011c76 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	e001      	b.n	8011c7a <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 8011c76:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7a:	f240 3237 	movw	r2, #823	; 0x337
 8011c7e:	4914      	ldr	r1, [pc, #80]	; (8011cd0 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7f5 ff05 	bl	8007a90 <_ZnajPKci>
 8011c86:	4602      	mov	r2, r0
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 8011c8c:	683b      	ldr	r3, [r7, #0]
 8011c8e:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011c90:	2300      	movs	r3, #0
 8011c92:	60bb      	str	r3, [r7, #8]
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	685b      	ldr	r3, [r3, #4]
 8011c98:	68ba      	ldr	r2, [r7, #8]
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d212      	bcs.n	8011cc4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	681a      	ldr	r2, [r3, #0]
 8011ca2:	68bb      	ldr	r3, [r7, #8]
 8011ca4:	009b      	lsls	r3, r3, #2
 8011ca6:	4413      	add	r3, r2
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	330c      	adds	r3, #12
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	4798      	blx	r3
 8011cb8:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	60bb      	str	r3, [r7, #8]
 8011cc0:	e7e8      	b.n	8011c94 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 8011cc2:	bf00      	nop
    }
}
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	3710      	adds	r7, #16
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	bd80      	pop	{r7, pc}
 8011cce:	bf00      	nop
 8011cd0:	08021e70 	.word	0x08021e70

08011cd4 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d004      	beq.n	8011cee <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7f5 fee5 	bl	8007ab8 <_ZdaPv>
}
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	3708      	adds	r7, #8
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b087      	sub	sp, #28
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	60f8      	str	r0, [r7, #12]
 8011d00:	60b9      	str	r1, [r7, #8]
 8011d02:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681a      	ldr	r2, [r3, #0]
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	681a      	ldr	r2, [r3, #0]
 8011d16:	68bb      	ldr	r3, [r7, #8]
 8011d18:	009b      	lsls	r3, r3, #2
 8011d1a:	4413      	add	r3, r2
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	697a      	ldr	r2, [r7, #20]
 8011d2c:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	681a      	ldr	r2, [r3, #0]
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	693a      	ldr	r2, [r7, #16]
 8011d3a:	601a      	str	r2, [r3, #0]
}
 8011d3c:	bf00      	nop
 8011d3e:	371c      	adds	r7, #28
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b084      	sub	sp, #16
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d028      	beq.n	8011dac <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 8011d5a:	4b17      	ldr	r3, [pc, #92]	; (8011db8 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	6838      	ldr	r0, [r7, #0]
 8011d60:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	3b01      	subs	r3, #1
 8011d68:	60fb      	str	r3, [r7, #12]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d019      	beq.n	8011da4 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d01b      	beq.n	8011db0 <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 8011d78:	4b10      	ldr	r3, [pc, #64]	; (8011dbc <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	4798      	blx	r3
 8011d7e:	4603      	mov	r3, r0
 8011d80:	461a      	mov	r2, r3
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	3301      	adds	r3, #1
 8011d86:	fbb2 f1f3 	udiv	r1, r2, r3
 8011d8a:	fb03 f301 	mul.w	r3, r3, r1
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 8011d92:	68ba      	ldr	r2, [r7, #8]
 8011d94:	68f9      	ldr	r1, [r7, #12]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f7ff ffae 	bl	8011cf8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	3b01      	subs	r3, #1
 8011da0:	60fb      	str	r3, [r7, #12]
 8011da2:	e7e2      	b.n	8011d6a <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 8011da4:	6878      	ldr	r0, [r7, #4]
 8011da6:	f000 f834 	bl	8011e12 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011daa:	e002      	b.n	8011db2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 8011dac:	bf00      	nop
 8011dae:	e000      	b.n	8011db2 <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 8011db0:	bf00      	nop
}
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}
 8011db8:	200000dc 	.word	0x200000dc
 8011dbc:	200000e0 	.word	0x200000e0

08011dc0 <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b086      	sub	sp, #24
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d01c      	beq.n	8011e0a <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	685b      	ldr	r3, [r3, #4]
 8011dd4:	085b      	lsrs	r3, r3, #1
 8011dd6:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 8011dd8:	2300      	movs	r3, #0
 8011dda:	617b      	str	r3, [r7, #20]
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d20e      	bcs.n	8011e02 <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	685a      	ldr	r2, [r3, #4]
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	1ad3      	subs	r3, r2, r3
 8011dec:	3b01      	subs	r3, #1
 8011dee:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	6979      	ldr	r1, [r7, #20]
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f7ff ff7f 	bl	8011cf8 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	617b      	str	r3, [r7, #20]
 8011e00:	e7ec      	b.n	8011ddc <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 f805 	bl	8011e12 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 8011e08:	e000      	b.n	8011e0c <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 8011e0a:	bf00      	nop
}
 8011e0c:	3718      	adds	r7, #24
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}

08011e12 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 8011e12:	b580      	push	{r7, lr}
 8011e14:	b084      	sub	sp, #16
 8011e16:	af00      	add	r7, sp, #0
 8011e18:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 8011e1a:	2300      	movs	r3, #0
 8011e1c:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011e1e:	2300      	movs	r3, #0
 8011e20:	60bb      	str	r3, [r7, #8]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	685b      	ldr	r3, [r3, #4]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d221      	bcs.n	8011e70 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681a      	ldr	r2, [r3, #0]
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6859      	ldr	r1, [r3, #4]
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	1acb      	subs	r3, r1, r3
 8011e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e3c:	3b01      	subs	r3, #1
 8011e3e:	009b      	lsls	r3, r3, #2
 8011e40:	4413      	add	r3, r2
 8011e42:	6818      	ldr	r0, [r3, #0]
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6859      	ldr	r1, [r3, #4]
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	1acb      	subs	r3, r1, r3
 8011e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011e54:	3b01      	subs	r3, #1
 8011e56:	009b      	lsls	r3, r3, #2
 8011e58:	4413      	add	r3, r2
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	3308      	adds	r3, #8
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	68f9      	ldr	r1, [r7, #12]
 8011e64:	4798      	blx	r3
 8011e66:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	3301      	adds	r3, #1
 8011e6c:	60bb      	str	r3, [r7, #8]
 8011e6e:	e7d8      	b.n	8011e22 <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 8011e70:	bf00      	nop
 8011e72:	3710      	adds	r7, #16
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b082      	sub	sp, #8
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
    return get(0);
 8011e80:	2100      	movs	r1, #0
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	f000 f805 	bl	8011e92 <_ZNK22UtestShellPointerArray3getEj>
 8011e88:	4603      	mov	r3, r0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 8011e92:	b480      	push	{r7}
 8011e94:	b083      	sub	sp, #12
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
 8011e9a:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	685b      	ldr	r3, [r3, #4]
 8011ea0:	683a      	ldr	r2, [r7, #0]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d301      	bcc.n	8011eaa <_ZNK22UtestShellPointerArray3getEj+0x18>
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e005      	b.n	8011eb6 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	009b      	lsls	r3, r3, #2
 8011eb2:	4413      	add	r3, r2
 8011eb4:	681b      	ldr	r3, [r3, #0]
}
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	370c      	adds	r7, #12
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec0:	4770      	bx	lr
	...

08011ec4 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j>:



////////////// TestInstaller ////////////

TestInstaller::TestInstaller(UtestShell& shell, const char* groupName, const char* testName, const char* fileName, size_t lineNumber)
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b084      	sub	sp, #16
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
 8011ed0:	603b      	str	r3, [r7, #0]
 8011ed2:	4a10      	ldr	r2, [pc, #64]	; (8011f14 <_ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j+0x50>)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	601a      	str	r2, [r3, #0]
{
    shell.setGroupName(groupName);
 8011ed8:	6879      	ldr	r1, [r7, #4]
 8011eda:	68b8      	ldr	r0, [r7, #8]
 8011edc:	f7fe fc27 	bl	801072e <_ZN10UtestShell12setGroupNameEPKc>
    shell.setTestName(testName);
 8011ee0:	6839      	ldr	r1, [r7, #0]
 8011ee2:	68b8      	ldr	r0, [r7, #8]
 8011ee4:	f7fe fc31 	bl	801074a <_ZN10UtestShell11setTestNameEPKc>
    shell.setFileName(fileName);
 8011ee8:	69b9      	ldr	r1, [r7, #24]
 8011eea:	68b8      	ldr	r0, [r7, #8]
 8011eec:	f7fe fc03 	bl	80106f6 <_ZN10UtestShell11setFileNameEPKc>
    shell.setLineNumber(lineNumber);
 8011ef0:	69f9      	ldr	r1, [r7, #28]
 8011ef2:	68b8      	ldr	r0, [r7, #8]
 8011ef4:	f7fe fc0d 	bl	8010712 <_ZN10UtestShell13setLineNumberEj>
    TestRegistry::getCurrentRegistry()->addTest(&shell);
 8011ef8:	f7fd fc20 	bl	800f73c <_ZN12TestRegistry18getCurrentRegistryEv>
 8011efc:	4603      	mov	r3, r0
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	3208      	adds	r2, #8
 8011f02:	6812      	ldr	r2, [r2, #0]
 8011f04:	68b9      	ldr	r1, [r7, #8]
 8011f06:	4618      	mov	r0, r3
 8011f08:	4790      	blx	r2
}
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	08024c88 	.word	0x08024c88

08011f18 <_ZN13TestInstallerD1Ev>:

TestInstaller::~TestInstaller()
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	4a04      	ldr	r2, [pc, #16]	; (8011f34 <_ZN13TestInstallerD1Ev+0x1c>)
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	601a      	str	r2, [r3, #0]
{
}
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	4618      	mov	r0, r3
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr
 8011f34:	08024c88 	.word	0x08024c88

08011f38 <_ZN13TestInstallerD0Ev>:
TestInstaller::~TestInstaller()
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b082      	sub	sp, #8
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
}
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7ff ffe9 	bl	8011f18 <_ZN13TestInstallerD1Ev>
 8011f46:	2104      	movs	r1, #4
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f7f5 fd91 	bl	8007a70 <_ZdlPvj>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	4618      	mov	r0, r3
 8011f52:	3708      	adds	r7, #8
 8011f54:	46bd      	mov	sp, r7
 8011f56:	bd80      	pop	{r7, pc}

08011f58 <_Z41__static_initialization_and_destruction_0ii>:

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10a      	bne.n	8011f7e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d105      	bne.n	8011f7e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8011f72:	4805      	ldr	r0, [pc, #20]	; (8011f88 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8011f74:	f7ff fe38 	bl	8011be8 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 8011f78:	4804      	ldr	r0, [pc, #16]	; (8011f8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8011f7a:	f7ff fdd5 	bl	8011b28 <_ZN20NormalTestTerminatorD1Ev>
}
 8011f7e:	bf00      	nop
 8011f80:	3708      	adds	r7, #8
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	2000008c 	.word	0x2000008c
 8011f8c:	20000088 	.word	0x20000088

08011f90 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 8011f90:	b580      	push	{r7, lr}
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f98:	2001      	movs	r0, #1
 8011f9a:	f7ff ffdd 	bl	8011f58 <_Z41__static_initialization_and_destruction_0ii>
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	af00      	add	r7, sp, #0
 8011fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011fa8:	2000      	movs	r0, #0
 8011faa:	f7ff ffd5 	bl	8011f58 <_Z41__static_initialization_and_destruction_0ii>
 8011fae:	bd80      	pop	{r7, pc}

08011fb0 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 8011fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fb2:	b083      	sub	sp, #12
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	ed87 0b00 	vstr	d0, [r7]
 8011fba:	683c      	ldr	r4, [r7, #0]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	461e      	mov	r6, r3
 8011fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8011fca:	4b10      	ldr	r3, [pc, #64]	; (801200c <_ZSt5isinfd+0x5c>)
 8011fcc:	4620      	mov	r0, r4
 8011fce:	4629      	mov	r1, r5
 8011fd0:	f7ee fbda 	bl	8000788 <__aeabi_dcmpun>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10b      	bne.n	8011ff2 <_ZSt5isinfd+0x42>
 8011fda:	f04f 32ff 	mov.w	r2, #4294967295
 8011fde:	4b0b      	ldr	r3, [pc, #44]	; (801200c <_ZSt5isinfd+0x5c>)
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	f7ee fbb2 	bl	800074c <__aeabi_dcmple>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d101      	bne.n	8011ff2 <_ZSt5isinfd+0x42>
 8011fee:	2300      	movs	r3, #0
 8011ff0:	461e      	mov	r6, r3
 8011ff2:	b2f3      	uxtb	r3, r6
 8011ff4:	f083 0301 	eor.w	r3, r3, #1
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	bf14      	ite	ne
 8011ffe:	2301      	movne	r3, #1
 8012000:	2300      	moveq	r3, #0
 8012002:	b2db      	uxtb	r3, r3
 8012004:	4618      	mov	r0, r3
 8012006:	370c      	adds	r7, #12
 8012008:	46bd      	mov	sp, r7
 801200a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801200c:	7fefffff 	.word	0x7fefffff

08012010 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 8012010:	b590      	push	{r4, r7, lr}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	ed87 0b00 	vstr	d0, [r7]
 801201a:	2301      	movs	r3, #1
 801201c:	461c      	mov	r4, r3
 801201e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012022:	e9d7 0100 	ldrd	r0, r1, [r7]
 8012026:	f7ee fbaf 	bl	8000788 <__aeabi_dcmpun>
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d101      	bne.n	8012034 <_ZSt5isnand+0x24>
 8012030:	2300      	movs	r3, #0
 8012032:	461c      	mov	r4, r3
 8012034:	b2e3      	uxtb	r3, r4
 8012036:	2b00      	cmp	r3, #0
 8012038:	bf14      	ite	ne
 801203a:	2301      	movne	r3, #1
 801203c:	2300      	moveq	r3, #0
 801203e:	b2db      	uxtb	r3, r3
 8012040:	4618      	mov	r0, r3
 8012042:	370c      	adds	r7, #12
 8012044:	46bd      	mov	sp, r7
 8012046:	bd90      	pop	{r4, r7, pc}

08012048 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 8012048:	b590      	push	{r4, r7, lr}
 801204a:	b095      	sub	sp, #84	; 0x54
 801204c:	af00      	add	r7, sp, #0
 801204e:	60f8      	str	r0, [r7, #12]
 8012050:	60b9      	str	r1, [r7, #8]
 8012052:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	3334      	adds	r3, #52	; 0x34
 801205a:	681c      	ldr	r4, [r3, #0]
 801205c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012060:	490f      	ldr	r1, [pc, #60]	; (80120a0 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 8012062:	4618      	mov	r0, r3
 8012064:	f7f8 f8b3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012068:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801206c:	f107 0314 	add.w	r3, r7, #20
 8012070:	68f9      	ldr	r1, [r7, #12]
 8012072:	4618      	mov	r0, r3
 8012074:	f7f9 ff0a 	bl	800be8c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8012078:	f107 0314 	add.w	r3, r7, #20
 801207c:	4619      	mov	r1, r3
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	47a0      	blx	r4
 8012082:	f107 0314 	add.w	r3, r7, #20
 8012086:	4618      	mov	r0, r3
 8012088:	f7f9 ffc0 	bl	800c00c <_ZN11TestFailureD1Ev>
 801208c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012090:	4618      	mov	r0, r3
 8012092:	f7f8 fc54 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8012096:	bf00      	nop
 8012098:	3754      	adds	r7, #84	; 0x54
 801209a:	46bd      	mov	sp, r7
 801209c:	bd90      	pop	{r4, r7, pc}
 801209e:	bf00      	nop
 80120a0:	08021ff8 	.word	0x08021ff8

080120a4 <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 80120a4:	b480      	push	{r7}
 80120a6:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 80120a8:	2301      	movs	r3, #1
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr

080120b4 <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b082      	sub	sp, #8
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
 80120bc:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 80120be:	4b13      	ldr	r3, [pc, #76]	; (801210c <PlatformSpecificSetJmpImplementation+0x58>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	225c      	movs	r2, #92	; 0x5c
 80120c4:	fb02 f303 	mul.w	r3, r2, r3
 80120c8:	4a11      	ldr	r2, [pc, #68]	; (8012110 <PlatformSpecificSetJmpImplementation+0x5c>)
 80120ca:	4413      	add	r3, r2
 80120cc:	4618      	mov	r0, r3
 80120ce:	f7ee f8a7 	bl	8000220 <setjmp>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	bf0c      	ite	eq
 80120d8:	2301      	moveq	r3, #1
 80120da:	2300      	movne	r3, #0
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00e      	beq.n	8012100 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 80120e2:	4b0a      	ldr	r3, [pc, #40]	; (801210c <PlatformSpecificSetJmpImplementation+0x58>)
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	3301      	adds	r3, #1
 80120e8:	4a08      	ldr	r2, [pc, #32]	; (801210c <PlatformSpecificSetJmpImplementation+0x58>)
 80120ea:	6013      	str	r3, [r2, #0]
        function(data);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6838      	ldr	r0, [r7, #0]
 80120f0:	4798      	blx	r3
        jmp_buf_index--;
 80120f2:	4b06      	ldr	r3, [pc, #24]	; (801210c <PlatformSpecificSetJmpImplementation+0x58>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3b01      	subs	r3, #1
 80120f8:	4a04      	ldr	r2, [pc, #16]	; (801210c <PlatformSpecificSetJmpImplementation+0x58>)
 80120fa:	6013      	str	r3, [r2, #0]
        return 1;
 80120fc:	2301      	movs	r3, #1
 80120fe:	e000      	b.n	8012102 <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 8012100:	2300      	movs	r3, #0
}
 8012102:	4618      	mov	r0, r3
 8012104:	3708      	adds	r7, #8
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	20000c6c 	.word	0x20000c6c
 8012110:	200008d4 	.word	0x200008d4

08012114 <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 8012114:	b580      	push	{r7, lr}
 8012116:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 8012118:	4b07      	ldr	r3, [pc, #28]	; (8012138 <PlatformSpecificLongJmpImplementation+0x24>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	3b01      	subs	r3, #1
 801211e:	4a06      	ldr	r2, [pc, #24]	; (8012138 <PlatformSpecificLongJmpImplementation+0x24>)
 8012120:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 8012122:	4b05      	ldr	r3, [pc, #20]	; (8012138 <PlatformSpecificLongJmpImplementation+0x24>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	225c      	movs	r2, #92	; 0x5c
 8012128:	fb02 f303 	mul.w	r3, r2, r3
 801212c:	4a03      	ldr	r2, [pc, #12]	; (801213c <PlatformSpecificLongJmpImplementation+0x28>)
 801212e:	4413      	add	r3, r2
 8012130:	2101      	movs	r1, #1
 8012132:	4618      	mov	r0, r3
 8012134:	f7ee f87a 	bl	800022c <longjmp>
 8012138:	20000c6c 	.word	0x20000c6c
 801213c:	200008d4 	.word	0x200008d4

08012140 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 8012140:	b480      	push	{r7}
 8012142:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 8012144:	2300      	movs	r3, #0
#endif
}
 8012146:	4618      	mov	r0, r3
 8012148:	46bd      	mov	sp, r7
 801214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214e:	4770      	bx	lr

08012150 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 8012156:	2000      	movs	r0, #0
 8012158:	f00e ec1e 	blx	8020998 <__time_veneer>
 801215c:	4602      	mov	r2, r0
 801215e:	460b      	mov	r3, r1
 8012160:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 8012164:	463b      	mov	r3, r7
 8012166:	4618      	mov	r0, r3
 8012168:	f00b fb76 	bl	801d858 <localtime>
 801216c:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	4a04      	ldr	r2, [pc, #16]	; (8012184 <TimeStringImplementation+0x34>)
 8012172:	2150      	movs	r1, #80	; 0x50
 8012174:	4804      	ldr	r0, [pc, #16]	; (8012188 <TimeStringImplementation+0x38>)
 8012176:	f00c fc57 	bl	801ea28 <strftime>
    return dateTime;
 801217a:	4b03      	ldr	r3, [pc, #12]	; (8012188 <TimeStringImplementation+0x38>)
}
 801217c:	4618      	mov	r0, r3
 801217e:	3710      	adds	r7, #16
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	08022034 	.word	0x08022034
 8012188:	20000c70 	.word	0x20000c70

0801218c <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b082      	sub	sp, #8
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
 8012194:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 8012196:	6839      	ldr	r1, [r7, #0]
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f00b f993 	bl	801d4c4 <fopen>
 801219e:	4603      	mov	r3, r0
#endif
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	3708      	adds	r7, #8
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}

080121a8 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 80121b2:	6839      	ldr	r1, [r7, #0]
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f00b f9f3 	bl	801d5a0 <fputs>
}
 80121ba:	bf00      	nop
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b082      	sub	sp, #8
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f00a ff74 	bl	801d0b8 <fclose>
}
 80121d0:	bf00      	nop
 80121d2:	3708      	adds	r7, #8
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}

080121d8 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	af00      	add	r7, sp, #0
  fflush(stdout);
 80121dc:	4b03      	ldr	r3, [pc, #12]	; (80121ec <PlatformSpecificFlushImplementation+0x14>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	689b      	ldr	r3, [r3, #8]
 80121e2:	4618      	mov	r0, r3
 80121e4:	f00b f832 	bl	801d24c <fflush>
}
 80121e8:	bf00      	nop
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	20000104 	.word	0x20000104

080121f0 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b082      	sub	sp, #8
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 80121fa:	ed97 0b00 	vldr	d0, [r7]
 80121fe:	f7ff ff07 	bl	8012010 <_ZSt5isnand>
 8012202:	4603      	mov	r3, r0
}
 8012204:	4618      	mov	r0, r3
 8012206:	3708      	adds	r7, #8
 8012208:	46bd      	mov	sp, r7
 801220a:	bd80      	pop	{r7, pc}

0801220c <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b082      	sub	sp, #8
 8012210:	af00      	add	r7, sp, #0
 8012212:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 8012216:	ed97 0b00 	vldr	d0, [r7]
 801221a:	f7ff fec9 	bl	8011fb0 <_ZSt5isinfd>
 801221e:	4603      	mov	r3, r0
}
 8012220:	4618      	mov	r0, r3
 8012222:	3708      	adds	r7, #8
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 8012228:	b480      	push	{r7}
 801222a:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 801222c:	2300      	movs	r3, #0
#endif

}
 801222e:	4618      	mov	r0, r3
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
}
 8012240:	bf00      	nop
 8012242:	370c      	adds	r7, #12
 8012244:	46bd      	mov	sp, r7
 8012246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801224a:	4770      	bx	lr

0801224c <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 801224c:	b480      	push	{r7}
 801224e:	b083      	sub	sp, #12
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
}
 8012254:	bf00      	nop
 8012256:	370c      	adds	r7, #12
 8012258:	46bd      	mov	sp, r7
 801225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801225e:	4770      	bx	lr

08012260 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 8012260:	b480      	push	{r7}
 8012262:	b083      	sub	sp, #12
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
}
 8012268:	bf00      	nop
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	60b9      	str	r1, [r7, #8]
 801227e:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 8012280:	4a25      	ldr	r2, [pc, #148]	; (8012318 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	601a      	str	r2, [r3, #0]
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	68ba      	ldr	r2, [r7, #8]
 801228a:	605a      	str	r2, [r3, #4]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	609a      	str	r2, [r3, #8]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2200      	movs	r2, #0
 8012296:	731a      	strb	r2, [r3, #12]
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2200      	movs	r2, #0
 801229c:	735a      	strb	r2, [r3, #13]
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2200      	movs	r2, #0
 80122a2:	739a      	strb	r2, [r3, #14]
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	2200      	movs	r2, #0
 80122a8:	73da      	strb	r2, [r3, #15]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	2200      	movs	r2, #0
 80122ae:	741a      	strb	r2, [r3, #16]
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2200      	movs	r2, #0
 80122b4:	745a      	strb	r2, [r3, #17]
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	2200      	movs	r2, #0
 80122ba:	749a      	strb	r2, [r3, #18]
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	2200      	movs	r2, #0
 80122c0:	74da      	strb	r2, [r3, #19]
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2200      	movs	r2, #0
 80122c6:	751a      	strb	r2, [r3, #20]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2200      	movs	r2, #0
 80122cc:	755a      	strb	r2, [r3, #21]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2200      	movs	r2, #0
 80122d2:	759a      	strb	r2, [r3, #22]
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	75da      	strb	r2, [r3, #23]
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2200      	movs	r2, #0
 80122de:	761a      	strb	r2, [r3, #24]
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2201      	movs	r2, #1
 80122e4:	61da      	str	r2, [r3, #28]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2200      	movs	r2, #0
 80122ea:	621a      	str	r2, [r3, #32]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2200      	movs	r2, #0
 80122f0:	625a      	str	r2, [r3, #36]	; 0x24
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2200      	movs	r2, #0
 80122f6:	629a      	str	r2, [r3, #40]	; 0x28
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	2200      	movs	r2, #0
 80122fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	3330      	adds	r3, #48	; 0x30
 8012304:	4905      	ldr	r1, [pc, #20]	; (801231c <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 8012306:	4618      	mov	r0, r3
 8012308:	f7f7 ff61 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
{
}
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	4618      	mov	r0, r3
 8012310:	3710      	adds	r7, #16
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	08024db4 	.word	0x08024db4
 801231c:	08022048 	.word	0x08022048

08012320 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	f7f8 fb07 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	4618      	mov	r0, r3
 8012334:	3708      	adds	r7, #8
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
	...

0801233c <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 801233c:	b590      	push	{r4, r7, lr}
 801233e:	b085      	sub	sp, #20
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	4a20      	ldr	r2, [pc, #128]	; (80123c8 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801234e:	2b00      	cmp	r3, #0
 8012350:	d015      	beq.n	801237e <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012356:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235c:	4618      	mov	r0, r3
 801235e:	f00a fda4 	bl	801ceaa <_ZNK10TestFilter7getNextEv>
 8012362:	4602      	mov	r2, r0
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 8012368:	68fc      	ldr	r4, [r7, #12]
 801236a:	2c00      	cmp	r4, #0
 801236c:	d0ed      	beq.n	801234a <_ZN20CommandLineArgumentsD1Ev+0xe>
 801236e:	4620      	mov	r0, r4
 8012370:	f7ff ffd6 	bl	8012320 <_ZN10TestFilterD1Ev>
 8012374:	2110      	movs	r1, #16
 8012376:	4620      	mov	r0, r4
 8012378:	f7f5 fb7a 	bl	8007a70 <_ZdlPvj>
    while(groupFilters_) {
 801237c:	e7e5      	b.n	801234a <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012382:	2b00      	cmp	r3, #0
 8012384:	d015      	beq.n	80123b2 <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801238a:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012390:	4618      	mov	r0, r3
 8012392:	f00a fd8a 	bl	801ceaa <_ZNK10TestFilter7getNextEv>
 8012396:	4602      	mov	r2, r0
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 801239c:	68bc      	ldr	r4, [r7, #8]
 801239e:	2c00      	cmp	r4, #0
 80123a0:	d0ed      	beq.n	801237e <_ZN20CommandLineArgumentsD1Ev+0x42>
 80123a2:	4620      	mov	r0, r4
 80123a4:	f7ff ffbc 	bl	8012320 <_ZN10TestFilterD1Ev>
 80123a8:	2110      	movs	r1, #16
 80123aa:	4620      	mov	r0, r4
 80123ac:	f7f5 fb60 	bl	8007a70 <_ZdlPvj>
    while(nameFilters_) {
 80123b0:	e7e5      	b.n	801237e <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3330      	adds	r3, #48	; 0x30
 80123b6:	4618      	mov	r0, r3
 80123b8:	f7f8 fac1 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
}
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	4618      	mov	r0, r3
 80123c0:	3714      	adds	r7, #20
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd90      	pop	{r4, r7, pc}
 80123c6:	bf00      	nop
 80123c8:	08024db4 	.word	0x08024db4

080123cc <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b082      	sub	sp, #8
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
}
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7ff ffb1 	bl	801233c <_ZN20CommandLineArgumentsD1Ev>
 80123da:	2138      	movs	r1, #56	; 0x38
 80123dc:	6878      	ldr	r0, [r7, #4]
 80123de:	f7f5 fb47 	bl	8007a70 <_ZdlPvj>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	4618      	mov	r0, r3
 80123e6:	3708      	adds	r7, #8
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 80123ec:	b5b0      	push	{r4, r5, r7, lr}
 80123ee:	b0be      	sub	sp, #248	; 0xf8
 80123f0:	af02      	add	r7, sp, #8
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
 80123f6:	2400      	movs	r4, #0
    bool correctParameters = true;
 80123f8:	2301      	movs	r3, #1
 80123fa:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 80123fe:	2301      	movs	r3, #1
 8012400:	613b      	str	r3, [r7, #16]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	685a      	ldr	r2, [r3, #4]
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	429a      	cmp	r2, r3
 801240a:	f340 83a4 	ble.w	8012b56 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	689a      	ldr	r2, [r3, #8]
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	009b      	lsls	r3, r3, #2
 8012416:	4413      	add	r3, r2
 8012418:	681a      	ldr	r2, [r3, #0]
 801241a:	f107 0308 	add.w	r3, r7, #8
 801241e:	4611      	mov	r1, r2
 8012420:	4618      	mov	r0, r3
 8012422:	f7f7 fed4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 8012426:	f107 0314 	add.w	r3, r7, #20
 801242a:	49c8      	ldr	r1, [pc, #800]	; (801274c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 801242c:	4618      	mov	r0, r3
 801242e:	f7f7 fece 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012432:	f107 0214 	add.w	r2, r7, #20
 8012436:	f107 0308 	add.w	r3, r7, #8
 801243a:	4611      	mov	r1, r2
 801243c:	4618      	mov	r0, r3
 801243e:	f7f8 fa8a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8012442:	4603      	mov	r3, r0
 8012444:	461d      	mov	r5, r3
 8012446:	f107 0314 	add.w	r3, r7, #20
 801244a:	4618      	mov	r0, r3
 801244c:	f7f8 fa77 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012450:	2d00      	cmp	r5, #0
 8012452:	d006      	beq.n	8012462 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2201      	movs	r2, #1
 8012458:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 801245a:	2300      	movs	r3, #0
 801245c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012460:	e366      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 8012462:	f107 031c 	add.w	r3, r7, #28
 8012466:	49ba      	ldr	r1, [pc, #744]	; (8012750 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 8012468:	4618      	mov	r0, r3
 801246a:	f7f7 feb0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801246e:	f107 021c 	add.w	r2, r7, #28
 8012472:	f107 0308 	add.w	r3, r7, #8
 8012476:	4611      	mov	r1, r2
 8012478:	4618      	mov	r0, r3
 801247a:	f7f8 fa6c 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801247e:	4603      	mov	r3, r0
 8012480:	461d      	mov	r5, r3
 8012482:	f107 031c 	add.w	r3, r7, #28
 8012486:	4618      	mov	r0, r3
 8012488:	f7f8 fa59 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801248c:	2d00      	cmp	r5, #0
 801248e:	d003      	beq.n	8012498 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	2201      	movs	r2, #1
 8012494:	735a      	strb	r2, [r3, #13]
 8012496:	e34b      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 8012498:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801249c:	49ad      	ldr	r1, [pc, #692]	; (8012754 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 801249e:	4618      	mov	r0, r3
 80124a0:	f7f7 fe95 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80124a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80124a8:	f107 0308 	add.w	r3, r7, #8
 80124ac:	4611      	mov	r1, r2
 80124ae:	4618      	mov	r0, r3
 80124b0:	f7f8 fa51 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80124b4:	4603      	mov	r3, r0
 80124b6:	461d      	mov	r5, r3
 80124b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f8 fa3e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80124c2:	2d00      	cmp	r5, #0
 80124c4:	d003      	beq.n	80124ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2201      	movs	r2, #1
 80124ca:	739a      	strb	r2, [r3, #14]
 80124cc:	e330      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 80124ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80124d2:	49a1      	ldr	r1, [pc, #644]	; (8012758 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 80124d4:	4618      	mov	r0, r3
 80124d6:	f7f7 fe7a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80124da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80124de:	f107 0308 	add.w	r3, r7, #8
 80124e2:	4611      	mov	r1, r2
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7f8 fa36 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80124ea:	4603      	mov	r3, r0
 80124ec:	461d      	mov	r5, r3
 80124ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7f8 fa23 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80124f8:	2d00      	cmp	r5, #0
 80124fa:	d003      	beq.n	8012504 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2201      	movs	r2, #1
 8012500:	73da      	strb	r2, [r3, #15]
 8012502:	e315      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 8012504:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012508:	4994      	ldr	r1, [pc, #592]	; (801275c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 801250a:	4618      	mov	r0, r3
 801250c:	f7f7 fe5f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012510:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8012514:	f107 0308 	add.w	r3, r7, #8
 8012518:	4611      	mov	r1, r2
 801251a:	4618      	mov	r0, r3
 801251c:	f7f8 fa1b 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8012520:	4603      	mov	r3, r0
 8012522:	461d      	mov	r5, r3
 8012524:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8012528:	4618      	mov	r0, r3
 801252a:	f7f8 fa08 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801252e:	2d00      	cmp	r5, #0
 8012530:	d003      	beq.n	801253a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	2201      	movs	r2, #1
 8012536:	741a      	strb	r2, [r3, #16]
 8012538:	e2fa      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 801253a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801253e:	4988      	ldr	r1, [pc, #544]	; (8012760 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 8012540:	4618      	mov	r0, r3
 8012542:	f7f7 fe44 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012546:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801254a:	f107 0308 	add.w	r3, r7, #8
 801254e:	4611      	mov	r1, r2
 8012550:	4618      	mov	r0, r3
 8012552:	f7f8 fa00 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8012556:	4603      	mov	r3, r0
 8012558:	461d      	mov	r5, r3
 801255a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801255e:	4618      	mov	r0, r3
 8012560:	f7f8 f9ed 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012564:	2d00      	cmp	r5, #0
 8012566:	d003      	beq.n	8012570 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	2201      	movs	r2, #1
 801256c:	755a      	strb	r2, [r3, #21]
 801256e:	e2df      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 8012570:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012574:	497b      	ldr	r1, [pc, #492]	; (8012764 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 8012576:	4618      	mov	r0, r3
 8012578:	f7f7 fe29 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801257c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8012580:	f107 0308 	add.w	r3, r7, #8
 8012584:	4611      	mov	r1, r2
 8012586:	4618      	mov	r0, r3
 8012588:	f7f8 f9e5 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801258c:	4603      	mov	r3, r0
 801258e:	461d      	mov	r5, r3
 8012590:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8012594:	4618      	mov	r0, r3
 8012596:	f7f8 f9d2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801259a:	2d00      	cmp	r5, #0
 801259c:	d003      	beq.n	80125a6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2201      	movs	r2, #1
 80125a2:	745a      	strb	r2, [r3, #17]
 80125a4:	e2c4      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 80125a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80125aa:	496f      	ldr	r1, [pc, #444]	; (8012768 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 80125ac:	4618      	mov	r0, r3
 80125ae:	f7f7 fe0e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80125b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80125b6:	f107 0308 	add.w	r3, r7, #8
 80125ba:	4611      	mov	r1, r2
 80125bc:	4618      	mov	r0, r3
 80125be:	f7f8 f9ca 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80125c2:	4603      	mov	r3, r0
 80125c4:	461d      	mov	r5, r3
 80125c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7f8 f9b7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80125d0:	2d00      	cmp	r5, #0
 80125d2:	d003      	beq.n	80125dc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2201      	movs	r2, #1
 80125d8:	749a      	strb	r2, [r3, #18]
 80125da:	e2a9      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 80125dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80125e0:	4962      	ldr	r1, [pc, #392]	; (801276c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7f7 fdf3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80125e8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80125ec:	f107 0308 	add.w	r3, r7, #8
 80125f0:	4611      	mov	r1, r2
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7f8 f9af 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80125f8:	4603      	mov	r3, r0
 80125fa:	461d      	mov	r5, r3
 80125fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012600:	4618      	mov	r0, r3
 8012602:	f7f8 f99c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012606:	2d00      	cmp	r5, #0
 8012608:	d003      	beq.n	8012612 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2201      	movs	r2, #1
 801260e:	74da      	strb	r2, [r3, #19]
 8012610:	e28e      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 8012612:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012616:	4956      	ldr	r1, [pc, #344]	; (8012770 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 8012618:	4618      	mov	r0, r3
 801261a:	f7f7 fdd8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801261e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8012622:	f107 0308 	add.w	r3, r7, #8
 8012626:	4611      	mov	r1, r2
 8012628:	4618      	mov	r0, r3
 801262a:	f7f8 f994 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801262e:	4603      	mov	r3, r0
 8012630:	461d      	mov	r5, r3
 8012632:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8012636:	4618      	mov	r0, r3
 8012638:	f7f8 f981 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801263c:	2d00      	cmp	r5, #0
 801263e:	d003      	beq.n	8012648 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2201      	movs	r2, #1
 8012644:	751a      	strb	r2, [r3, #20]
 8012646:	e273      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 8012648:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801264c:	4949      	ldr	r1, [pc, #292]	; (8012774 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 801264e:	4618      	mov	r0, r3
 8012650:	f7f7 fdbd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012654:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8012658:	f107 0308 	add.w	r3, r7, #8
 801265c:	4611      	mov	r1, r2
 801265e:	4618      	mov	r0, r3
 8012660:	f7f8 f979 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8012664:	4603      	mov	r3, r0
 8012666:	461d      	mov	r5, r3
 8012668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801266c:	4618      	mov	r0, r3
 801266e:	f7f8 f966 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012672:	2d00      	cmp	r5, #0
 8012674:	d003      	beq.n	801267e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2201      	movs	r2, #1
 801267a:	759a      	strb	r2, [r3, #22]
 801267c:	e258      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 801267e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012682:	493d      	ldr	r1, [pc, #244]	; (8012778 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 8012684:	4618      	mov	r0, r3
 8012686:	f7f7 fda2 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801268a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 801268e:	f107 0308 	add.w	r3, r7, #8
 8012692:	4611      	mov	r1, r2
 8012694:	4618      	mov	r0, r3
 8012696:	f7f7 fe5e 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 801269a:	4603      	mov	r3, r0
 801269c:	461d      	mov	r5, r3
 801269e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80126a2:	4618      	mov	r0, r3
 80126a4:	f7f8 f94b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80126a8:	2d00      	cmp	r5, #0
 80126aa:	d009      	beq.n	80126c0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6859      	ldr	r1, [r3, #4]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	689a      	ldr	r2, [r3, #8]
 80126b4:	f107 0310 	add.w	r3, r7, #16
 80126b8:	6878      	ldr	r0, [r7, #4]
 80126ba:	f000 fb33 	bl	8012d24 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 80126be:	e237      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 80126c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80126c4:	492d      	ldr	r1, [pc, #180]	; (801277c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7f7 fd81 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80126cc:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80126d0:	f107 0308 	add.w	r3, r7, #8
 80126d4:	4611      	mov	r1, r2
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7f7 fe3d 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80126dc:	4603      	mov	r3, r0
 80126de:	461d      	mov	r5, r3
 80126e0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80126e4:	4618      	mov	r0, r3
 80126e6:	f7f8 f92a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80126ea:	2d00      	cmp	r5, #0
 80126ec:	d009      	beq.n	8012702 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6859      	ldr	r1, [r3, #4]
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	689a      	ldr	r2, [r3, #8]
 80126f6:	f107 0310 	add.w	r3, r7, #16
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f000 fc40 	bl	8012f80 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 8012700:	e216      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 8012702:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012706:	491e      	ldr	r1, [pc, #120]	; (8012780 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 8012708:	4618      	mov	r0, r3
 801270a:	f7f7 fd60 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801270e:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8012712:	f107 0308 	add.w	r3, r7, #8
 8012716:	4611      	mov	r1, r2
 8012718:	4618      	mov	r0, r3
 801271a:	f7f7 fe1c 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 801271e:	4603      	mov	r3, r0
 8012720:	461d      	mov	r5, r3
 8012722:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8012726:	4618      	mov	r0, r3
 8012728:	f7f8 f909 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801272c:	2d00      	cmp	r5, #0
 801272e:	d029      	beq.n	8012784 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	6859      	ldr	r1, [r3, #4]
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	689a      	ldr	r2, [r3, #8]
 8012738:	f107 0310 	add.w	r3, r7, #16
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 fc61 	bl	8013004 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 8012742:	4603      	mov	r3, r0
 8012744:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012748:	e1f2      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 801274a:	bf00      	nop
 801274c:	0802204c 	.word	0x0802204c
 8012750:	08022050 	.word	0x08022050
 8012754:	08022054 	.word	0x08022054
 8012758:	08022058 	.word	0x08022058
 801275c:	0802205c 	.word	0x0802205c
 8012760:	08022060 	.word	0x08022060
 8012764:	08022064 	.word	0x08022064
 8012768:	08022068 	.word	0x08022068
 801276c:	0802206c 	.word	0x0802206c
 8012770:	08022070 	.word	0x08022070
 8012774:	08022074 	.word	0x08022074
 8012778:	08022078 	.word	0x08022078
 801277c:	0802207c 	.word	0x0802207c
 8012780:	08022080 	.word	0x08022080
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 8012784:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012788:	49b9      	ldr	r1, [pc, #740]	; (8012a70 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 801278a:	4618      	mov	r0, r3
 801278c:	f7f7 fd1f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012790:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8012794:	f107 0308 	add.w	r3, r7, #8
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f7f7 fddb 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80127a0:	4603      	mov	r3, r0
 80127a2:	461d      	mov	r5, r3
 80127a4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80127a8:	4618      	mov	r0, r3
 80127aa:	f7f8 f8c8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80127ae:	2d00      	cmp	r5, #0
 80127b0:	d009      	beq.n	80127c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	6859      	ldr	r1, [r3, #4]
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	689a      	ldr	r2, [r3, #8]
 80127ba:	f107 0310 	add.w	r3, r7, #16
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f000 fccc 	bl	801315c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 80127c4:	e1b4      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 80127c6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80127ca:	49aa      	ldr	r1, [pc, #680]	; (8012a74 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 80127cc:	4618      	mov	r0, r3
 80127ce:	f7f7 fcfe 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80127d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80127d6:	f107 0308 	add.w	r3, r7, #8
 80127da:	4611      	mov	r1, r2
 80127dc:	4618      	mov	r0, r3
 80127de:	f7f7 fdba 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80127e2:	4603      	mov	r3, r0
 80127e4:	461d      	mov	r5, r3
 80127e6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7f8 f8a7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80127f0:	2d00      	cmp	r5, #0
 80127f2:	d009      	beq.n	8012808 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6859      	ldr	r1, [r3, #4]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	689a      	ldr	r2, [r3, #8]
 80127fc:	f107 0310 	add.w	r3, r7, #16
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f000 fcf1 	bl	80131e8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 8012806:	e193      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 8012808:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801280c:	499a      	ldr	r1, [pc, #616]	; (8012a78 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 801280e:	4618      	mov	r0, r3
 8012810:	f7f7 fcdd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012814:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8012818:	f107 0308 	add.w	r3, r7, #8
 801281c:	4611      	mov	r1, r2
 801281e:	4618      	mov	r0, r3
 8012820:	f7f7 fd99 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 8012824:	4603      	mov	r3, r0
 8012826:	461d      	mov	r5, r3
 8012828:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801282c:	4618      	mov	r0, r3
 801282e:	f7f8 f886 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012832:	2d00      	cmp	r5, #0
 8012834:	d009      	beq.n	801284a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6859      	ldr	r1, [r3, #4]
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	689a      	ldr	r2, [r3, #8]
 801283e:	f107 0310 	add.w	r3, r7, #16
 8012842:	6878      	ldr	r0, [r7, #4]
 8012844:	f000 fd16 	bl	8013274 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 8012848:	e172      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 801284a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801284e:	498b      	ldr	r1, [pc, #556]	; (8012a7c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 8012850:	4618      	mov	r0, r3
 8012852:	f7f7 fcbc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012856:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801285a:	f107 0308 	add.w	r3, r7, #8
 801285e:	4611      	mov	r1, r2
 8012860:	4618      	mov	r0, r3
 8012862:	f7f7 fd78 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 8012866:	4603      	mov	r3, r0
 8012868:	461d      	mov	r5, r3
 801286a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801286e:	4618      	mov	r0, r3
 8012870:	f7f8 f865 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012874:	2d00      	cmp	r5, #0
 8012876:	d009      	beq.n	801288c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6859      	ldr	r1, [r3, #4]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	689a      	ldr	r2, [r3, #8]
 8012880:	f107 0310 	add.w	r3, r7, #16
 8012884:	6878      	ldr	r0, [r7, #4]
 8012886:	f000 fd3d 	bl	8013304 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 801288a:	e151      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 801288c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012890:	497b      	ldr	r1, [pc, #492]	; (8012a80 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 8012892:	4618      	mov	r0, r3
 8012894:	f7f7 fc9b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012898:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 801289c:	f107 0308 	add.w	r3, r7, #8
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f7f7 fd57 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80128a8:	4603      	mov	r3, r0
 80128aa:	461d      	mov	r5, r3
 80128ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7f8 f844 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80128b6:	2d00      	cmp	r5, #0
 80128b8:	d009      	beq.n	80128ce <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6859      	ldr	r1, [r3, #4]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	689a      	ldr	r2, [r3, #8]
 80128c2:	f107 0310 	add.w	r3, r7, #16
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 fd5e 	bl	8013388 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 80128cc:	e130      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 80128ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80128d2:	496c      	ldr	r1, [pc, #432]	; (8012a84 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 80128d4:	4618      	mov	r0, r3
 80128d6:	f7f7 fc7a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80128da:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80128de:	f107 0308 	add.w	r3, r7, #8
 80128e2:	4611      	mov	r1, r2
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7f7 fd36 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80128ea:	4603      	mov	r3, r0
 80128ec:	461d      	mov	r5, r3
 80128ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80128f2:	4618      	mov	r0, r3
 80128f4:	f7f8 f823 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80128f8:	2d00      	cmp	r5, #0
 80128fa:	d009      	beq.n	8012910 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	6859      	ldr	r1, [r3, #4]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	689a      	ldr	r2, [r3, #8]
 8012904:	f107 0310 	add.w	r3, r7, #16
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 fd83 	bl	8013414 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 801290e:	e10f      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 8012910:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012914:	495c      	ldr	r1, [pc, #368]	; (8012a88 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 8012916:	4618      	mov	r0, r3
 8012918:	f7f7 fc59 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801291c:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8012920:	f107 0308 	add.w	r3, r7, #8
 8012924:	4611      	mov	r1, r2
 8012926:	4618      	mov	r0, r3
 8012928:	f7f7 fd15 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 801292c:	4603      	mov	r3, r0
 801292e:	461d      	mov	r5, r3
 8012930:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012934:	4618      	mov	r0, r3
 8012936:	f7f8 f802 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801293a:	2d00      	cmp	r5, #0
 801293c:	d009      	beq.n	8012952 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6859      	ldr	r1, [r3, #4]
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	689a      	ldr	r2, [r3, #8]
 8012946:	f107 0310 	add.w	r3, r7, #16
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f000 fda8 	bl	80134a0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 8012950:	e0ee      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 8012952:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012956:	494d      	ldr	r1, [pc, #308]	; (8012a8c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 8012958:	4618      	mov	r0, r3
 801295a:	f7f7 fc38 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801295e:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8012962:	f107 0308 	add.w	r3, r7, #8
 8012966:	4611      	mov	r1, r2
 8012968:	4618      	mov	r0, r3
 801296a:	f7f7 fcf4 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 801296e:	4603      	mov	r3, r0
 8012970:	461d      	mov	r5, r3
 8012972:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8012976:	4618      	mov	r0, r3
 8012978:	f7f7 ffe1 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801297c:	2d00      	cmp	r5, #0
 801297e:	d00c      	beq.n	801299a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	6859      	ldr	r1, [r3, #4]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	689a      	ldr	r2, [r3, #8]
 8012988:	f107 0310 	add.w	r3, r7, #16
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fa29 	bl	8012de4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 8012992:	4603      	mov	r3, r0
 8012994:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012998:	e0ca      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 801299a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 801299e:	493c      	ldr	r1, [pc, #240]	; (8012a90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7f7 fc14 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80129a6:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 80129aa:	f107 0308 	add.w	r3, r7, #8
 80129ae:	4611      	mov	r1, r2
 80129b0:	4618      	mov	r0, r3
 80129b2:	f7f7 fcd0 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80129b6:	4603      	mov	r3, r0
 80129b8:	461d      	mov	r5, r3
 80129ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80129be:	4618      	mov	r0, r3
 80129c0:	f7f7 ffbd 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80129c4:	2d00      	cmp	r5, #0
 80129c6:	d00b      	beq.n	80129e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	6859      	ldr	r1, [r3, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	689a      	ldr	r2, [r3, #8]
 80129d0:	f107 0310 	add.w	r3, r7, #16
 80129d4:	482e      	ldr	r0, [pc, #184]	; (8012a90 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 80129d6:	9000      	str	r0, [sp, #0]
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f000 fda9 	bl	8013530 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 80129de:	e0a7      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 80129e0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80129e4:	492b      	ldr	r1, [pc, #172]	; (8012a94 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 80129e6:	4618      	mov	r0, r3
 80129e8:	f7f7 fbf1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80129ec:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80129f0:	f107 0308 	add.w	r3, r7, #8
 80129f4:	4611      	mov	r1, r2
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7f7 fcad 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 80129fc:	4603      	mov	r3, r0
 80129fe:	461d      	mov	r5, r3
 8012a00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7f7 ff9a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012a0a:	2d00      	cmp	r5, #0
 8012a0c:	d00b      	beq.n	8012a26 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6859      	ldr	r1, [r3, #4]
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	689a      	ldr	r2, [r3, #8]
 8012a16:	f107 0310 	add.w	r3, r7, #16
 8012a1a:	481e      	ldr	r0, [pc, #120]	; (8012a94 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 8012a1c:	9000      	str	r0, [sp, #0]
 8012a1e:	6878      	ldr	r0, [r7, #4]
 8012a20:	f000 fd86 	bl	8013530 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 8012a24:	e084      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 8012a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012a2a:	491b      	ldr	r1, [pc, #108]	; (8012a98 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 8012a2c:	4618      	mov	r0, r3
 8012a2e:	f7f7 fbce 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012a32:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8012a36:	f107 0308 	add.w	r3, r7, #8
 8012a3a:	4611      	mov	r1, r2
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f7 fc8a 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 8012a42:	4603      	mov	r3, r0
 8012a44:	461d      	mov	r5, r3
 8012a46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7f7 ff77 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012a50:	2d00      	cmp	r5, #0
 8012a52:	d023      	beq.n	8012a9c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6859      	ldr	r1, [r3, #4]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	689a      	ldr	r2, [r3, #8]
 8012a5c:	f107 0310 	add.w	r3, r7, #16
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 fe3b 	bl	80136dc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 8012a66:	4603      	mov	r3, r0
 8012a68:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012a6c:	e060      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 8012a6e:	bf00      	nop
 8012a70:	08022084 	.word	0x08022084
 8012a74:	08022088 	.word	0x08022088
 8012a78:	0802208c 	.word	0x0802208c
 8012a7c:	08022094 	.word	0x08022094
 8012a80:	08022098 	.word	0x08022098
 8012a84:	0802209c 	.word	0x0802209c
 8012a88:	080220a0 	.word	0x080220a0
 8012a8c:	080220a8 	.word	0x080220a8
 8012a90:	080220ac 	.word	0x080220ac
 8012a94:	080220b4 	.word	0x080220b4
 8012a98:	080220c4 	.word	0x080220c4
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 8012a9c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012aa0:	4930      	ldr	r1, [pc, #192]	; (8012b64 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 8012aa2:	4618      	mov	r0, r3
 8012aa4:	f7f7 fb93 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012aa8:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8012aac:	f107 0308 	add.w	r3, r7, #8
 8012ab0:	4611      	mov	r1, r2
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7f7 fc4f 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	461d      	mov	r5, r3
 8012abc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8012ac0:	4618      	mov	r0, r3
 8012ac2:	f7f7 ff3c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012ac6:	2d00      	cmp	r5, #0
 8012ac8:	d00e      	beq.n	8012ae8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	331c      	adds	r3, #28
 8012ad0:	681d      	ldr	r5, [r3, #0]
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	6859      	ldr	r1, [r3, #4]
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	689a      	ldr	r2, [r3, #8]
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	6838      	ldr	r0, [r7, #0]
 8012ade:	47a8      	blx	r5
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8012ae6:	e023      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 8012ae8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012aec:	491e      	ldr	r1, [pc, #120]	; (8012b68 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7f7 fb6d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012af4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 8012af8:	f107 0308 	add.w	r3, r7, #8
 8012afc:	4611      	mov	r1, r2
 8012afe:	4618      	mov	r0, r3
 8012b00:	f7f7 fc29 	bl	800a356 <_ZNK12SimpleString10startsWithERKS_>
 8012b04:	4603      	mov	r3, r0
 8012b06:	461d      	mov	r5, r3
 8012b08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7f7 ff16 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012b12:	2d00      	cmp	r5, #0
 8012b14:	d009      	beq.n	8012b2a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	6859      	ldr	r1, [r3, #4]
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	689a      	ldr	r2, [r3, #8]
 8012b1e:	f107 0310 	add.w	r3, r7, #16
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 fd98 	bl	8013658 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 8012b28:	e002      	b.n	8012b30 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 8012b30:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 8012b38:	2400      	movs	r4, #0
 8012b3a:	2500      	movs	r5, #0
 8012b3c:	e000      	b.n	8012b40 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 8012b3e:	2501      	movs	r5, #1
 8012b40:	f107 0308 	add.w	r3, r7, #8
 8012b44:	4618      	mov	r0, r3
 8012b46:	f7f7 fefa 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012b4a:	2d01      	cmp	r5, #1
 8012b4c:	d104      	bne.n	8012b58 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	3301      	adds	r3, #1
 8012b52:	613b      	str	r3, [r7, #16]
 8012b54:	e455      	b.n	8012402 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 8012b56:	2401      	movs	r4, #1
 8012b58:	4623      	mov	r3, r4
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	37f0      	adds	r7, #240	; 0xf0
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bdb0      	pop	{r4, r5, r7, pc}
 8012b62:	bf00      	nop
 8012b64:	0802205c 	.word	0x0802205c
 8012b68:	080220c8 	.word	0x080220c8

08012b6c <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 8012b6c:	b480      	push	{r7}
 8012b6e:	b083      	sub	sp, #12
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 8012b74:	4b03      	ldr	r3, [pc, #12]	; (8012b84 <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	370c      	adds	r7, #12
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr
 8012b82:	bf00      	nop
 8012b84:	080220cc 	.word	0x080220cc

08012b88 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 8012b88:	b480      	push	{r7}
 8012b8a:	b083      	sub	sp, #12
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 8012b90:	4b03      	ldr	r3, [pc, #12]	; (8012ba0 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	370c      	adds	r7, #12
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	080221fc 	.word	0x080221fc

08012ba4 <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
    return needHelp_;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	7b1b      	ldrb	r3, [r3, #12]
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	370c      	adds	r7, #12
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bba:	4770      	bx	lr

08012bbc <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 8012bbc:	b480      	push	{r7}
 8012bbe:	b083      	sub	sp, #12
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
    return verbose_;
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	7b5b      	ldrb	r3, [r3, #13]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	7b9b      	ldrb	r3, [r3, #14]
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	370c      	adds	r7, #12
 8012be4:	46bd      	mov	sp, r7
 8012be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bea:	4770      	bx	lr

08012bec <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 8012bec:	b480      	push	{r7}
 8012bee:	b083      	sub	sp, #12
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
    return color_;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	7bdb      	ldrb	r3, [r3, #15]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	370c      	adds	r7, #12
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c02:	4770      	bx	lr

08012c04 <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	7c5b      	ldrb	r3, [r3, #17]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	370c      	adds	r7, #12
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b083      	sub	sp, #12
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	7c9b      	ldrb	r3, [r3, #18]
}
 8012c28:	4618      	mov	r0, r3
 8012c2a:	370c      	adds	r7, #12
 8012c2c:	46bd      	mov	sp, r7
 8012c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c32:	4770      	bx	lr

08012c34 <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	7cdb      	ldrb	r3, [r3, #19]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	370c      	adds	r7, #12
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	7d1b      	ldrb	r3, [r3, #20]
}
 8012c58:	4618      	mov	r0, r3
 8012c5a:	370c      	adds	r7, #12
 8012c5c:	46bd      	mov	sp, r7
 8012c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c62:	4770      	bx	lr

08012c64 <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	7c1b      	ldrb	r3, [r3, #16]
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	370c      	adds	r7, #12
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr

08012c7c <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b083      	sub	sp, #12
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
    return repeat_;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	69db      	ldr	r3, [r3, #28]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	370c      	adds	r7, #12
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c92:	4770      	bx	lr

08012c94 <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 8012c94:	b480      	push	{r7}
 8012c96:	b083      	sub	sp, #12
 8012c98:	af00      	add	r7, sp, #0
 8012c9a:	6078      	str	r0, [r7, #4]
    return reversing_;
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	7d5b      	ldrb	r3, [r3, #21]
}
 8012ca0:	4618      	mov	r0, r3
 8012ca2:	370c      	adds	r7, #12
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012caa:	4770      	bx	lr

08012cac <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	7d9b      	ldrb	r3, [r3, #22]
}
 8012cb8:	4618      	mov	r0, r3
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr

08012cc4 <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b083      	sub	sp, #12
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
    return shuffling_;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	7ddb      	ldrb	r3, [r3, #23]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	370c      	adds	r7, #12
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cda:	4770      	bx	lr

08012cdc <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b083      	sub	sp, #12
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6a1b      	ldr	r3, [r3, #32]
}
 8012ce8:	4618      	mov	r0, r3
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 8012cf4:	b480      	push	{r7}
 8012cf6:	b083      	sub	sp, #12
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr

08012d0c <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b083      	sub	sp, #12
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr

08012d24 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b086      	sub	sp, #24
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2200      	movs	r2, #0
 8012d36:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 8012d38:	683b      	ldr	r3, [r7, #0]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	4413      	add	r3, r2
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	f107 0310 	add.w	r3, r7, #16
 8012d48:	4611      	mov	r1, r2
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f7f7 fa3f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 8012d50:	f107 0310 	add.w	r3, r7, #16
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f7 fdd1 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	bf8c      	ite	hi
 8012d60:	2301      	movhi	r3, #1
 8012d62:	2300      	movls	r3, #0
 8012d64:	b2db      	uxtb	r3, r3
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d00e      	beq.n	8012d88 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	009b      	lsls	r3, r3, #2
 8012d70:	687a      	ldr	r2, [r7, #4]
 8012d72:	4413      	add	r3, r2
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	3302      	adds	r3, #2
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f7f7 f824 	bl	8009dc6 <_ZN12SimpleString4AtoIEPKc>
 8012d7e:	4603      	mov	r3, r0
 8012d80:	461a      	mov	r2, r3
 8012d82:	68fb      	ldr	r3, [r7, #12]
 8012d84:	61da      	str	r2, [r3, #28]
 8012d86:	e01c      	b.n	8012dc2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	68ba      	ldr	r2, [r7, #8]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	dd16      	ble.n	8012dc2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	3301      	adds	r3, #1
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	687a      	ldr	r2, [r7, #4]
 8012d9e:	4413      	add	r3, r2
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7f7 f80f 	bl	8009dc6 <_ZN12SimpleString4AtoIEPKc>
 8012da8:	4603      	mov	r3, r0
 8012daa:	461a      	mov	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	69db      	ldr	r3, [r3, #28]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d004      	beq.n	8012dc2 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	1c5a      	adds	r2, r3, #1
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	69db      	ldr	r3, [r3, #28]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d102      	bne.n	8012dd0 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2202      	movs	r2, #2
 8012dce:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 8012dd0:	f107 0310 	add.w	r3, r7, #16
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7f7 fdb2 	bl	800a93e <_ZN12SimpleStringD1Ev>

}
 8012dda:	bf00      	nop
 8012ddc:	3718      	adds	r7, #24
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
	...

08012de4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 8012de4:	b590      	push	{r4, r7, lr}
 8012de6:	b089      	sub	sp, #36	; 0x24
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	60f8      	str	r0, [r7, #12]
 8012dec:	60b9      	str	r1, [r7, #8]
 8012dee:	607a      	str	r2, [r7, #4]
 8012df0:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	2201      	movs	r2, #1
 8012df6:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 8012df8:	4b34      	ldr	r3, [pc, #208]	; (8012ecc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4798      	blx	r3
 8012dfe:	4603      	mov	r3, r0
 8012e00:	461a      	mov	r2, r3
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d104      	bne.n	8012e18 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	6a1b      	ldr	r3, [r3, #32]
 8012e12:	1c5a      	adds	r2, r3, #1
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 8012e18:	683b      	ldr	r3, [r7, #0]
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	009b      	lsls	r3, r3, #2
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	4413      	add	r3, r2
 8012e22:	681a      	ldr	r2, [r3, #0]
 8012e24:	f107 0314 	add.w	r3, r7, #20
 8012e28:	4611      	mov	r1, r2
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7f7 f9cf 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 8012e30:	f107 0314 	add.w	r3, r7, #20
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7f7 fd61 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	bf8c      	ite	hi
 8012e40:	2301      	movhi	r3, #1
 8012e42:	2300      	movls	r3, #0
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d010      	beq.n	8012e6c <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	2201      	movs	r2, #1
 8012e4e:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	009b      	lsls	r3, r3, #2
 8012e56:	687a      	ldr	r2, [r7, #4]
 8012e58:	4413      	add	r3, r2
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	3302      	adds	r3, #2
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7f6 ff78 	bl	8009d54 <_ZN12SimpleString4AtoUEPKc>
 8012e64:	4602      	mov	r2, r0
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	621a      	str	r2, [r3, #32]
 8012e6a:	e01e      	b.n	8012eaa <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	3301      	adds	r3, #1
 8012e72:	68ba      	ldr	r2, [r7, #8]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	dd18      	ble.n	8012eaa <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	687a      	ldr	r2, [r7, #4]
 8012e82:	4413      	add	r3, r2
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7f6 ff64 	bl	8009d54 <_ZN12SimpleString4AtoUEPKc>
 8012e8c:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 8012e8e:	69fb      	ldr	r3, [r7, #28]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d00a      	beq.n	8012eaa <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2201      	movs	r2, #1
 8012e98:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	69fa      	ldr	r2, [r7, #28]
 8012e9e:	621a      	str	r2, [r3, #32]
            i++;
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	1c5a      	adds	r2, r3, #1
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	6a1b      	ldr	r3, [r3, #32]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	bf14      	ite	ne
 8012eb2:	2301      	movne	r3, #1
 8012eb4:	2300      	moveq	r3, #0
 8012eb6:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 8012eb8:	f107 0314 	add.w	r3, r7, #20
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	f7f7 fd3e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 8012ec2:	4623      	mov	r3, r4
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3724      	adds	r7, #36	; 0x24
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd90      	pop	{r4, r7, pc}
 8012ecc:	200000a4 	.word	0x200000a4

08012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b088      	sub	sp, #32
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	60f8      	str	r0, [r7, #12]
 8012ed8:	60b9      	str	r1, [r7, #8]
 8012eda:	607a      	str	r2, [r7, #4]
 8012edc:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 8012ede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ee0:	f7f7 fd0c 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 8012ee4:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 8012ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	683a      	ldr	r2, [r7, #0]
 8012eee:	4413      	add	r3, r2
 8012ef0:	681a      	ldr	r2, [r3, #0]
 8012ef2:	f107 0314 	add.w	r3, r7, #20
 8012ef6:	4611      	mov	r1, r2
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7f7 f968 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 8012efe:	f107 0314 	add.w	r3, r7, #20
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7f7 fcfa 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 8012f08:	4602      	mov	r2, r0
 8012f0a:	69fb      	ldr	r3, [r7, #28]
 8012f0c:	4293      	cmp	r3, r2
 8012f0e:	bf34      	ite	cc
 8012f10:	2301      	movcc	r3, #1
 8012f12:	2300      	movcs	r3, #0
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d00c      	beq.n	8012f34 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 8012f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	009b      	lsls	r3, r3, #2
 8012f20:	683a      	ldr	r2, [r7, #0]
 8012f22:	4413      	add	r3, r2
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	69fb      	ldr	r3, [r7, #28]
 8012f28:	4413      	add	r3, r2
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	68f8      	ldr	r0, [r7, #12]
 8012f2e:	f7f7 f94e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012f32:	e019      	b.n	8012f68 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 8012f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	3301      	adds	r3, #1
 8012f3a:	687a      	ldr	r2, [r7, #4]
 8012f3c:	429a      	cmp	r2, r3
 8012f3e:	dd0f      	ble.n	8012f60 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 8012f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	1c5a      	adds	r2, r3, #1
 8012f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f48:	601a      	str	r2, [r3, #0]
 8012f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4c:	681b      	ldr	r3, [r3, #0]
 8012f4e:	009b      	lsls	r3, r3, #2
 8012f50:	683a      	ldr	r2, [r7, #0]
 8012f52:	4413      	add	r3, r2
 8012f54:	681b      	ldr	r3, [r3, #0]
 8012f56:	4619      	mov	r1, r3
 8012f58:	68f8      	ldr	r0, [r7, #12]
 8012f5a:	f7f7 f938 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012f5e:	e003      	b.n	8012f68 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 8012f60:	4906      	ldr	r1, [pc, #24]	; (8012f7c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 8012f62:	68f8      	ldr	r0, [r7, #12]
 8012f64:	f7f7 f933 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 8012f68:	f107 0314 	add.w	r3, r7, #20
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f7 fce6 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8012f72:	68f8      	ldr	r0, [r7, #12]
 8012f74:	3720      	adds	r7, #32
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}
 8012f7a:	bf00      	nop
 8012f7c:	08022048 	.word	0x08022048

08012f80 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 8012f80:	b5b0      	push	{r4, r5, r7, lr}
 8012f82:	b08c      	sub	sp, #48	; 0x30
 8012f84:	af02      	add	r7, sp, #8
 8012f86:	60f8      	str	r0, [r7, #12]
 8012f88:	60b9      	str	r1, [r7, #8]
 8012f8a:	607a      	str	r2, [r7, #4]
 8012f8c:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 8012f8e:	f107 031c 	add.w	r3, r7, #28
 8012f92:	491a      	ldr	r1, [pc, #104]	; (8012ffc <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 8012f94:	4618      	mov	r0, r3
 8012f96:	f7f7 f91a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8012f9a:	f107 0014 	add.w	r0, r7, #20
 8012f9e:	f107 031c 	add.w	r3, r7, #28
 8012fa2:	9301      	str	r3, [sp, #4]
 8012fa4:	683b      	ldr	r3, [r7, #0]
 8012fa6:	9300      	str	r3, [sp, #0]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	68f9      	ldr	r1, [r7, #12]
 8012fae:	f7ff ff8f 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8012fb2:	f107 0514 	add.w	r5, r7, #20
 8012fb6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012fba:	4911      	ldr	r1, [pc, #68]	; (8013000 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 8012fbc:	2010      	movs	r0, #16
 8012fbe:	f7f4 fd43 	bl	8007a48 <_ZnwjPKci>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	4629      	mov	r1, r5
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	f009 ff40 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 8012fcc:	627c      	str	r4, [r7, #36]	; 0x24
 8012fce:	f107 0314 	add.w	r3, r7, #20
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7f7 fcb3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8012fd8:	f107 031c 	add.w	r3, r7, #28
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f7 fcae 	bl	800a93e <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 8012fe2:	68fb      	ldr	r3, [r7, #12]
 8012fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fe6:	4619      	mov	r1, r3
 8012fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fea:	f009 ff4f 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8012ff4:	bf00      	nop
 8012ff6:	3728      	adds	r7, #40	; 0x28
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8012ffc:	0802207c 	.word	0x0802207c
 8013000:	08022a10 	.word	0x08022a10

08013004 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 8013004:	b5b0      	push	{r4, r5, r7, lr}
 8013006:	b092      	sub	sp, #72	; 0x48
 8013008:	af02      	add	r7, sp, #8
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
 8013010:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 8013012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013016:	494e      	ldr	r1, [pc, #312]	; (8013150 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 8013018:	4618      	mov	r0, r3
 801301a:	f7f7 f8d8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801301e:	f107 0020 	add.w	r0, r7, #32
 8013022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013026:	9301      	str	r3, [sp, #4]
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	68ba      	ldr	r2, [r7, #8]
 8013030:	68f9      	ldr	r1, [r7, #12]
 8013032:	f7ff ff4d 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013036:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801303a:	4618      	mov	r0, r3
 801303c:	f7f7 fc7f 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 8013040:	f107 0310 	add.w	r3, r7, #16
 8013044:	4618      	mov	r0, r3
 8013046:	f7f8 fb8f 	bl	800b768 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 801304a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801304e:	4941      	ldr	r1, [pc, #260]	; (8013154 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 8013050:	4618      	mov	r0, r3
 8013052:	f7f7 f8bc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013056:	f107 0210 	add.w	r2, r7, #16
 801305a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801305e:	f107 0320 	add.w	r3, r7, #32
 8013062:	4618      	mov	r0, r3
 8013064:	f7f7 fa1f 	bl	800a4a6 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 8013068:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801306c:	4618      	mov	r0, r3
 801306e:	f7f7 fc66 	bl	800a93e <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 8013072:	f107 0310 	add.w	r3, r7, #16
 8013076:	4618      	mov	r0, r3
 8013078:	f7f8 fc1b 	bl	800b8b2 <_ZNK22SimpleStringCollection4sizeEv>
 801307c:	4603      	mov	r3, r0
 801307e:	2b02      	cmp	r3, #2
 8013080:	bf14      	ite	ne
 8013082:	2301      	movne	r3, #1
 8013084:	2300      	moveq	r3, #0
 8013086:	b2db      	uxtb	r3, r3
 8013088:	2b00      	cmp	r3, #0
 801308a:	d001      	beq.n	8013090 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 801308c:	2400      	movs	r4, #0
 801308e:	e04f      	b.n	8013130 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 8013090:	f107 0310 	add.w	r3, r7, #16
 8013094:	2100      	movs	r1, #0
 8013096:	4618      	mov	r0, r3
 8013098:	f7f8 fc18 	bl	800b8cc <_ZN22SimpleStringCollectionixEj>
 801309c:	4604      	mov	r4, r0
 801309e:	f107 0310 	add.w	r3, r7, #16
 80130a2:	2100      	movs	r1, #0
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7f8 fc11 	bl	800b8cc <_ZN22SimpleStringCollectionixEj>
 80130aa:	4603      	mov	r3, r0
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7f7 fc25 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 80130b2:	4603      	mov	r3, r0
 80130b4:	3b01      	subs	r3, #1
 80130b6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80130ba:	2200      	movs	r2, #0
 80130bc:	4621      	mov	r1, r4
 80130be:	f7f7 fd47 	bl	800ab50 <_ZNK12SimpleString9subStringEjj>
 80130c2:	f107 0538 	add.w	r5, r7, #56	; 0x38
 80130c6:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80130ca:	4923      	ldr	r1, [pc, #140]	; (8013158 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 80130cc:	2010      	movs	r0, #16
 80130ce:	f7f4 fcbb 	bl	8007a48 <_ZnwjPKci>
 80130d2:	4604      	mov	r4, r0
 80130d4:	4629      	mov	r1, r5
 80130d6:	4620      	mov	r0, r4
 80130d8:	f009 feb8 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130e0:	4619      	mov	r1, r3
 80130e2:	4620      	mov	r0, r4
 80130e4:	f009 fed2 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 80130e8:	4602      	mov	r2, r0
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	625a      	str	r2, [r3, #36]	; 0x24
 80130ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7f7 fc23 	bl	800a93e <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 80130f8:	f107 0310 	add.w	r3, r7, #16
 80130fc:	2101      	movs	r1, #1
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f8 fbe4 	bl	800b8cc <_ZN22SimpleStringCollectionixEj>
 8013104:	4605      	mov	r5, r0
 8013106:	f240 121f 	movw	r2, #287	; 0x11f
 801310a:	4913      	ldr	r1, [pc, #76]	; (8013158 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 801310c:	2010      	movs	r0, #16
 801310e:	f7f4 fc9b 	bl	8007a48 <_ZnwjPKci>
 8013112:	4604      	mov	r4, r0
 8013114:	4629      	mov	r1, r5
 8013116:	4620      	mov	r0, r4
 8013118:	f009 fe98 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013120:	4619      	mov	r1, r3
 8013122:	4620      	mov	r0, r4
 8013124:	f009 feb2 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 8013128:	4602      	mov	r2, r0
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 801312e:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 8013130:	f107 0310 	add.w	r3, r7, #16
 8013134:	4618      	mov	r0, r3
 8013136:	f7f8 fb8b 	bl	800b850 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 801313a:	f107 0320 	add.w	r3, r7, #32
 801313e:	4618      	mov	r0, r3
 8013140:	f7f7 fbfd 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8013144:	4623      	mov	r3, r4
}
 8013146:	4618      	mov	r0, r3
 8013148:	3740      	adds	r7, #64	; 0x40
 801314a:	46bd      	mov	sp, r7
 801314c:	bdb0      	pop	{r4, r5, r7, pc}
 801314e:	bf00      	nop
 8013150:	08022080 	.word	0x08022080
 8013154:	08022a30 	.word	0x08022a30
 8013158:	08022a10 	.word	0x08022a10

0801315c <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 801315c:	b5b0      	push	{r4, r5, r7, lr}
 801315e:	b08c      	sub	sp, #48	; 0x30
 8013160:	af02      	add	r7, sp, #8
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	607a      	str	r2, [r7, #4]
 8013168:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 801316a:	f107 031c 	add.w	r3, r7, #28
 801316e:	491c      	ldr	r1, [pc, #112]	; (80131e0 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 8013170:	4618      	mov	r0, r3
 8013172:	f7f7 f82c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013176:	f107 0014 	add.w	r0, r7, #20
 801317a:	f107 031c 	add.w	r3, r7, #28
 801317e:	9301      	str	r3, [sp, #4]
 8013180:	683b      	ldr	r3, [r7, #0]
 8013182:	9300      	str	r3, [sp, #0]
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	68ba      	ldr	r2, [r7, #8]
 8013188:	68f9      	ldr	r1, [r7, #12]
 801318a:	f7ff fea1 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801318e:	f107 0514 	add.w	r5, r7, #20
 8013192:	f240 1225 	movw	r2, #293	; 0x125
 8013196:	4913      	ldr	r1, [pc, #76]	; (80131e4 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 8013198:	2010      	movs	r0, #16
 801319a:	f7f4 fc55 	bl	8007a48 <_ZnwjPKci>
 801319e:	4604      	mov	r4, r0
 80131a0:	4629      	mov	r1, r5
 80131a2:	4620      	mov	r0, r4
 80131a4:	f009 fe52 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80131a8:	627c      	str	r4, [r7, #36]	; 0x24
 80131aa:	f107 0314 	add.w	r3, r7, #20
 80131ae:	4618      	mov	r0, r3
 80131b0:	f7f7 fbc5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80131b4:	f107 031c 	add.w	r3, r7, #28
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f7 fbc0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80131be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131c0:	f009 fe7f 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131c8:	4619      	mov	r1, r3
 80131ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131cc:	f009 fe5e 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 80131d0:	4602      	mov	r2, r0
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80131d6:	bf00      	nop
 80131d8:	3728      	adds	r7, #40	; 0x28
 80131da:	46bd      	mov	sp, r7
 80131dc:	bdb0      	pop	{r4, r5, r7, pc}
 80131de:	bf00      	nop
 80131e0:	08022084 	.word	0x08022084
 80131e4:	08022a10 	.word	0x08022a10

080131e8 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 80131e8:	b5b0      	push	{r4, r5, r7, lr}
 80131ea:	b08c      	sub	sp, #48	; 0x30
 80131ec:	af02      	add	r7, sp, #8
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
 80131f4:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 80131f6:	f107 031c 	add.w	r3, r7, #28
 80131fa:	491c      	ldr	r1, [pc, #112]	; (801326c <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7f6 ffe6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013202:	f107 0014 	add.w	r0, r7, #20
 8013206:	f107 031c 	add.w	r3, r7, #28
 801320a:	9301      	str	r3, [sp, #4]
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	9300      	str	r3, [sp, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	68f9      	ldr	r1, [r7, #12]
 8013216:	f7ff fe5b 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801321a:	f107 0514 	add.w	r5, r7, #20
 801321e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013222:	4913      	ldr	r1, [pc, #76]	; (8013270 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 8013224:	2010      	movs	r0, #16
 8013226:	f7f4 fc0f 	bl	8007a48 <_ZnwjPKci>
 801322a:	4604      	mov	r4, r0
 801322c:	4629      	mov	r1, r5
 801322e:	4620      	mov	r0, r4
 8013230:	f009 fe0c 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 8013234:	627c      	str	r4, [r7, #36]	; 0x24
 8013236:	f107 0314 	add.w	r3, r7, #20
 801323a:	4618      	mov	r0, r3
 801323c:	f7f7 fb7f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8013240:	f107 031c 	add.w	r3, r7, #28
 8013244:	4618      	mov	r0, r3
 8013246:	f7f7 fb7a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 801324a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801324c:	f009 fe46 	bl	801cedc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013254:	4619      	mov	r1, r3
 8013256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013258:	f009 fe18 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 801325c:	4602      	mov	r2, r0
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	625a      	str	r2, [r3, #36]	; 0x24
}
 8013262:	bf00      	nop
 8013264:	3728      	adds	r7, #40	; 0x28
 8013266:	46bd      	mov	sp, r7
 8013268:	bdb0      	pop	{r4, r5, r7, pc}
 801326a:	bf00      	nop
 801326c:	08022088 	.word	0x08022088
 8013270:	08022a10 	.word	0x08022a10

08013274 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 8013274:	b5b0      	push	{r4, r5, r7, lr}
 8013276:	b08c      	sub	sp, #48	; 0x30
 8013278:	af02      	add	r7, sp, #8
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
 8013280:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 8013282:	f107 031c 	add.w	r3, r7, #28
 8013286:	491d      	ldr	r1, [pc, #116]	; (80132fc <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 8013288:	4618      	mov	r0, r3
 801328a:	f7f6 ffa0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801328e:	f107 0014 	add.w	r0, r7, #20
 8013292:	f107 031c 	add.w	r3, r7, #28
 8013296:	9301      	str	r3, [sp, #4]
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	9300      	str	r3, [sp, #0]
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	68ba      	ldr	r2, [r7, #8]
 80132a0:	68f9      	ldr	r1, [r7, #12]
 80132a2:	f7ff fe15 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80132a6:	f107 0514 	add.w	r5, r7, #20
 80132aa:	f240 1233 	movw	r2, #307	; 0x133
 80132ae:	4914      	ldr	r1, [pc, #80]	; (8013300 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 80132b0:	2010      	movs	r0, #16
 80132b2:	f7f4 fbc9 	bl	8007a48 <_ZnwjPKci>
 80132b6:	4604      	mov	r4, r0
 80132b8:	4629      	mov	r1, r5
 80132ba:	4620      	mov	r0, r4
 80132bc:	f009 fdc6 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80132c0:	627c      	str	r4, [r7, #36]	; 0x24
 80132c2:	f107 0314 	add.w	r3, r7, #20
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7f7 fb39 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80132cc:	f107 031c 	add.w	r3, r7, #28
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f7 fb34 	bl	800a93e <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 80132d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132d8:	f009 fdf3 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 80132dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132de:	f009 fdfd 	bl	801cedc <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132e6:	4619      	mov	r1, r3
 80132e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132ea:	f009 fdcf 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 80132ee:	4602      	mov	r2, r0
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80132f4:	bf00      	nop
 80132f6:	3728      	adds	r7, #40	; 0x28
 80132f8:	46bd      	mov	sp, r7
 80132fa:	bdb0      	pop	{r4, r5, r7, pc}
 80132fc:	0802208c 	.word	0x0802208c
 8013300:	08022a10 	.word	0x08022a10

08013304 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 8013304:	b5b0      	push	{r4, r5, r7, lr}
 8013306:	b08c      	sub	sp, #48	; 0x30
 8013308:	af02      	add	r7, sp, #8
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	60b9      	str	r1, [r7, #8]
 801330e:	607a      	str	r2, [r7, #4]
 8013310:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 8013312:	f107 031c 	add.w	r3, r7, #28
 8013316:	491a      	ldr	r1, [pc, #104]	; (8013380 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 8013318:	4618      	mov	r0, r3
 801331a:	f7f6 ff58 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801331e:	f107 0014 	add.w	r0, r7, #20
 8013322:	f107 031c 	add.w	r3, r7, #28
 8013326:	9301      	str	r3, [sp, #4]
 8013328:	683b      	ldr	r3, [r7, #0]
 801332a:	9300      	str	r3, [sp, #0]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	68ba      	ldr	r2, [r7, #8]
 8013330:	68f9      	ldr	r1, [r7, #12]
 8013332:	f7ff fdcd 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013336:	f107 0514 	add.w	r5, r7, #20
 801333a:	f240 123b 	movw	r2, #315	; 0x13b
 801333e:	4911      	ldr	r1, [pc, #68]	; (8013384 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 8013340:	2010      	movs	r0, #16
 8013342:	f7f4 fb81 	bl	8007a48 <_ZnwjPKci>
 8013346:	4604      	mov	r4, r0
 8013348:	4629      	mov	r1, r5
 801334a:	4620      	mov	r0, r4
 801334c:	f009 fd7e 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 8013350:	627c      	str	r4, [r7, #36]	; 0x24
 8013352:	f107 0314 	add.w	r3, r7, #20
 8013356:	4618      	mov	r0, r3
 8013358:	f7f7 faf1 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801335c:	f107 031c 	add.w	r3, r7, #28
 8013360:	4618      	mov	r0, r3
 8013362:	f7f7 faec 	bl	800a93e <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801336a:	4619      	mov	r1, r3
 801336c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801336e:	f009 fd8d 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 8013372:	4602      	mov	r2, r0
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013378:	bf00      	nop
 801337a:	3728      	adds	r7, #40	; 0x28
 801337c:	46bd      	mov	sp, r7
 801337e:	bdb0      	pop	{r4, r5, r7, pc}
 8013380:	08022094 	.word	0x08022094
 8013384:	08022a10 	.word	0x08022a10

08013388 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 8013388:	b5b0      	push	{r4, r5, r7, lr}
 801338a:	b08c      	sub	sp, #48	; 0x30
 801338c:	af02      	add	r7, sp, #8
 801338e:	60f8      	str	r0, [r7, #12]
 8013390:	60b9      	str	r1, [r7, #8]
 8013392:	607a      	str	r2, [r7, #4]
 8013394:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 8013396:	f107 031c 	add.w	r3, r7, #28
 801339a:	491c      	ldr	r1, [pc, #112]	; (801340c <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 801339c:	4618      	mov	r0, r3
 801339e:	f7f6 ff16 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80133a2:	f107 0014 	add.w	r0, r7, #20
 80133a6:	f107 031c 	add.w	r3, r7, #28
 80133aa:	9301      	str	r3, [sp, #4]
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	68ba      	ldr	r2, [r7, #8]
 80133b4:	68f9      	ldr	r1, [r7, #12]
 80133b6:	f7ff fd8b 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80133ba:	f107 0514 	add.w	r5, r7, #20
 80133be:	f240 1241 	movw	r2, #321	; 0x141
 80133c2:	4913      	ldr	r1, [pc, #76]	; (8013410 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 80133c4:	2010      	movs	r0, #16
 80133c6:	f7f4 fb3f 	bl	8007a48 <_ZnwjPKci>
 80133ca:	4604      	mov	r4, r0
 80133cc:	4629      	mov	r1, r5
 80133ce:	4620      	mov	r0, r4
 80133d0:	f009 fd3c 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80133d4:	627c      	str	r4, [r7, #36]	; 0x24
 80133d6:	f107 0314 	add.w	r3, r7, #20
 80133da:	4618      	mov	r0, r3
 80133dc:	f7f7 faaf 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80133e0:	f107 031c 	add.w	r3, r7, #28
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7f7 faaa 	bl	800a93e <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 80133ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133ec:	f009 fd69 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133f4:	4619      	mov	r1, r3
 80133f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133f8:	f009 fd48 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 80133fc:	4602      	mov	r2, r0
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013402:	bf00      	nop
 8013404:	3728      	adds	r7, #40	; 0x28
 8013406:	46bd      	mov	sp, r7
 8013408:	bdb0      	pop	{r4, r5, r7, pc}
 801340a:	bf00      	nop
 801340c:	08022098 	.word	0x08022098
 8013410:	08022a10 	.word	0x08022a10

08013414 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 8013414:	b5b0      	push	{r4, r5, r7, lr}
 8013416:	b08c      	sub	sp, #48	; 0x30
 8013418:	af02      	add	r7, sp, #8
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	607a      	str	r2, [r7, #4]
 8013420:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 8013422:	f107 031c 	add.w	r3, r7, #28
 8013426:	491c      	ldr	r1, [pc, #112]	; (8013498 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 8013428:	4618      	mov	r0, r3
 801342a:	f7f6 fed0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801342e:	f107 0014 	add.w	r0, r7, #20
 8013432:	f107 031c 	add.w	r3, r7, #28
 8013436:	9301      	str	r3, [sp, #4]
 8013438:	683b      	ldr	r3, [r7, #0]
 801343a:	9300      	str	r3, [sp, #0]
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	68ba      	ldr	r2, [r7, #8]
 8013440:	68f9      	ldr	r1, [r7, #12]
 8013442:	f7ff fd45 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013446:	f107 0514 	add.w	r5, r7, #20
 801344a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801344e:	4913      	ldr	r1, [pc, #76]	; (801349c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 8013450:	2010      	movs	r0, #16
 8013452:	f7f4 faf9 	bl	8007a48 <_ZnwjPKci>
 8013456:	4604      	mov	r4, r0
 8013458:	4629      	mov	r1, r5
 801345a:	4620      	mov	r0, r4
 801345c:	f009 fcf6 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 8013460:	627c      	str	r4, [r7, #36]	; 0x24
 8013462:	f107 0314 	add.w	r3, r7, #20
 8013466:	4618      	mov	r0, r3
 8013468:	f7f7 fa69 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801346c:	f107 031c 	add.w	r3, r7, #28
 8013470:	4618      	mov	r0, r3
 8013472:	f7f7 fa64 	bl	800a93e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013478:	f009 fd30 	bl	801cedc <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013480:	4619      	mov	r1, r3
 8013482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013484:	f009 fd02 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 8013488:	4602      	mov	r2, r0
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	629a      	str	r2, [r3, #40]	; 0x28
}
 801348e:	bf00      	nop
 8013490:	3728      	adds	r7, #40	; 0x28
 8013492:	46bd      	mov	sp, r7
 8013494:	bdb0      	pop	{r4, r5, r7, pc}
 8013496:	bf00      	nop
 8013498:	0802209c 	.word	0x0802209c
 801349c:	08022a10 	.word	0x08022a10

080134a0 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 80134a0:	b5b0      	push	{r4, r5, r7, lr}
 80134a2:	b08c      	sub	sp, #48	; 0x30
 80134a4:	af02      	add	r7, sp, #8
 80134a6:	60f8      	str	r0, [r7, #12]
 80134a8:	60b9      	str	r1, [r7, #8]
 80134aa:	607a      	str	r2, [r7, #4]
 80134ac:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 80134ae:	f107 031c 	add.w	r3, r7, #28
 80134b2:	491d      	ldr	r1, [pc, #116]	; (8013528 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7f6 fe8a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80134ba:	f107 0014 	add.w	r0, r7, #20
 80134be:	f107 031c 	add.w	r3, r7, #28
 80134c2:	9301      	str	r3, [sp, #4]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	9300      	str	r3, [sp, #0]
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	68ba      	ldr	r2, [r7, #8]
 80134cc:	68f9      	ldr	r1, [r7, #12]
 80134ce:	f7ff fcff 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 80134d2:	f107 0514 	add.w	r5, r7, #20
 80134d6:	f240 124f 	movw	r2, #335	; 0x14f
 80134da:	4914      	ldr	r1, [pc, #80]	; (801352c <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 80134dc:	2010      	movs	r0, #16
 80134de:	f7f4 fab3 	bl	8007a48 <_ZnwjPKci>
 80134e2:	4604      	mov	r4, r0
 80134e4:	4629      	mov	r1, r5
 80134e6:	4620      	mov	r0, r4
 80134e8:	f009 fcb0 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80134ec:	627c      	str	r4, [r7, #36]	; 0x24
 80134ee:	f107 0314 	add.w	r3, r7, #20
 80134f2:	4618      	mov	r0, r3
 80134f4:	f7f7 fa23 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80134f8:	f107 031c 	add.w	r3, r7, #28
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f7 fa1e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 8013502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013504:	f009 fcea 	bl	801cedc <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 8013508:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801350a:	f009 fcda 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 801350e:	68fb      	ldr	r3, [r7, #12]
 8013510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013512:	4619      	mov	r1, r3
 8013514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013516:	f009 fcb9 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 801351a:	4602      	mov	r2, r0
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8013520:	bf00      	nop
 8013522:	3728      	adds	r7, #40	; 0x28
 8013524:	46bd      	mov	sp, r7
 8013526:	bdb0      	pop	{r4, r5, r7, pc}
 8013528:	080220a0 	.word	0x080220a0
 801352c:	08022a10 	.word	0x08022a10

08013530 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 8013530:	b5b0      	push	{r4, r5, r7, lr}
 8013532:	b092      	sub	sp, #72	; 0x48
 8013534:	af02      	add	r7, sp, #8
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 801353e:	f107 0320 	add.w	r3, r7, #32
 8013542:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013544:	4618      	mov	r0, r3
 8013546:	f7f6 fe42 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801354a:	f107 0018 	add.w	r0, r7, #24
 801354e:	f107 0320 	add.w	r3, r7, #32
 8013552:	9301      	str	r3, [sp, #4]
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	9300      	str	r3, [sp, #0]
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	68ba      	ldr	r2, [r7, #8]
 801355c:	68f9      	ldr	r1, [r7, #12]
 801355e:	f7ff fcb7 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 8013562:	f107 0320 	add.w	r3, r7, #32
 8013566:	4618      	mov	r0, r3
 8013568:	f7f7 f9e9 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 801356c:	f107 0010 	add.w	r0, r7, #16
 8013570:	f107 0118 	add.w	r1, r7, #24
 8013574:	2329      	movs	r3, #41	; 0x29
 8013576:	222c      	movs	r2, #44	; 0x2c
 8013578:	f7f7 fb92 	bl	800aca0 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 801357c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013580:	f107 0110 	add.w	r1, r7, #16
 8013584:	2202      	movs	r2, #2
 8013586:	4618      	mov	r0, r3
 8013588:	f7f7 fb2c 	bl	800abe4 <_ZNK12SimpleString9subStringEj>
 801358c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013590:	f107 0310 	add.w	r3, r7, #16
 8013594:	4611      	mov	r1, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f7f6 fe85 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801359c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f7 f9cc 	bl	800a93e <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 80135a6:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 80135aa:	492a      	ldr	r1, [pc, #168]	; (8013654 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80135ac:	2010      	movs	r0, #16
 80135ae:	f7f4 fa4b 	bl	8007a48 <_ZnwjPKci>
 80135b2:	4604      	mov	r4, r0
 80135b4:	f107 0310 	add.w	r3, r7, #16
 80135b8:	4619      	mov	r1, r3
 80135ba:	4620      	mov	r0, r4
 80135bc:	f009 fc46 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80135c0:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 80135c2:	f107 0318 	add.w	r3, r7, #24
 80135c6:	2100      	movs	r1, #0
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7f7 fb1c 	bl	800ac06 <_ZNK12SimpleString2atEj>
 80135ce:	4603      	mov	r3, r0
 80135d0:	461a      	mov	r2, r3
 80135d2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80135d6:	f107 0118 	add.w	r1, r7, #24
 80135da:	232c      	movs	r3, #44	; 0x2c
 80135dc:	f7f7 fb60 	bl	800aca0 <_ZNK12SimpleString17subStringFromTillEcc>
 80135e0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80135e4:	f240 125b 	movw	r2, #347	; 0x15b
 80135e8:	491a      	ldr	r1, [pc, #104]	; (8013654 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 80135ea:	2010      	movs	r0, #16
 80135ec:	f7f4 fa2c 	bl	8007a48 <_ZnwjPKci>
 80135f0:	4604      	mov	r4, r0
 80135f2:	4629      	mov	r1, r5
 80135f4:	4620      	mov	r0, r4
 80135f6:	f009 fc29 	bl	801ce4c <_ZN10TestFilterC1ERK12SimpleString>
 80135fa:	63bc      	str	r4, [r7, #56]	; 0x38
 80135fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013600:	4618      	mov	r0, r3
 8013602:	f7f7 f99c 	bl	800a93e <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 8013606:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013608:	f009 fc5b 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 801360c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801360e:	f009 fc58 	bl	801cec2 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013616:	4619      	mov	r1, r3
 8013618:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801361a:	f009 fc37 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 801361e:	4602      	mov	r2, r0
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013628:	4619      	mov	r1, r3
 801362a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801362c:	f009 fc2e 	bl	801ce8c <_ZN10TestFilter3addEPS_>
 8013630:	4602      	mov	r2, r0
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 8013636:	f107 0310 	add.w	r3, r7, #16
 801363a:	4618      	mov	r0, r3
 801363c:	f7f7 f97f 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 8013640:	f107 0318 	add.w	r3, r7, #24
 8013644:	4618      	mov	r0, r3
 8013646:	f7f7 f97a 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801364a:	bf00      	nop
 801364c:	3740      	adds	r7, #64	; 0x40
 801364e:	46bd      	mov	sp, r7
 8013650:	bdb0      	pop	{r4, r5, r7, pc}
 8013652:	bf00      	nop
 8013654:	08022a10 	.word	0x08022a10

08013658 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 8013658:	b590      	push	{r4, r7, lr}
 801365a:	b08b      	sub	sp, #44	; 0x2c
 801365c:	af02      	add	r7, sp, #8
 801365e:	60f8      	str	r0, [r7, #12]
 8013660:	60b9      	str	r1, [r7, #8]
 8013662:	607a      	str	r2, [r7, #4]
 8013664:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 8013666:	f107 0318 	add.w	r3, r7, #24
 801366a:	491b      	ldr	r1, [pc, #108]	; (80136d8 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 801366c:	4618      	mov	r0, r3
 801366e:	f7f6 fdae 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013672:	f107 0010 	add.w	r0, r7, #16
 8013676:	f107 0318 	add.w	r3, r7, #24
 801367a:	9301      	str	r3, [sp, #4]
 801367c:	683b      	ldr	r3, [r7, #0]
 801367e:	9300      	str	r3, [sp, #0]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	68ba      	ldr	r2, [r7, #8]
 8013684:	68f9      	ldr	r1, [r7, #12]
 8013686:	f7ff fc23 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801368a:	f107 0318 	add.w	r3, r7, #24
 801368e:	4618      	mov	r0, r3
 8013690:	f7f7 f955 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 8013694:	f107 0310 	add.w	r3, r7, #16
 8013698:	4618      	mov	r0, r3
 801369a:	f7f7 f92f 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	bf0c      	ite	eq
 80136a4:	2301      	moveq	r3, #1
 80136a6:	2300      	movne	r3, #0
 80136a8:	b2db      	uxtb	r3, r3
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d001      	beq.n	80136b2 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 80136ae:	2400      	movs	r4, #0
 80136b0:	e008      	b.n	80136c4 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	3330      	adds	r3, #48	; 0x30
 80136b6:	f107 0210 	add.w	r2, r7, #16
 80136ba:	4611      	mov	r1, r2
 80136bc:	4618      	mov	r0, r3
 80136be:	f7f6 fdf2 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 80136c2:	2401      	movs	r4, #1
 80136c4:	f107 0310 	add.w	r3, r7, #16
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7f7 f938 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80136ce:	2c01      	cmp	r4, #1
}
 80136d0:	3724      	adds	r7, #36	; 0x24
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd90      	pop	{r4, r7, pc}
 80136d6:	bf00      	nop
 80136d8:	080220c8 	.word	0x080220c8

080136dc <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 80136dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80136de:	b093      	sub	sp, #76	; 0x4c
 80136e0:	af02      	add	r7, sp, #8
 80136e2:	60f8      	str	r0, [r7, #12]
 80136e4:	60b9      	str	r1, [r7, #8]
 80136e6:	607a      	str	r2, [r7, #4]
 80136e8:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 80136ea:	f107 0318 	add.w	r3, r7, #24
 80136ee:	4953      	ldr	r1, [pc, #332]	; (801383c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 80136f0:	4618      	mov	r0, r3
 80136f2:	f7f6 fd6c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80136f6:	f107 0010 	add.w	r0, r7, #16
 80136fa:	f107 0318 	add.w	r3, r7, #24
 80136fe:	9301      	str	r3, [sp, #4]
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	9300      	str	r3, [sp, #0]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	68ba      	ldr	r2, [r7, #8]
 8013708:	68f9      	ldr	r1, [r7, #12]
 801370a:	f7ff fbe1 	bl	8012ed0 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 801370e:	f107 0318 	add.w	r3, r7, #24
 8013712:	4618      	mov	r0, r3
 8013714:	f7f7 f913 	bl	800a93e <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 8013718:	f107 0310 	add.w	r3, r7, #16
 801371c:	4618      	mov	r0, r3
 801371e:	f7f7 f8ed 	bl	800a8fc <_ZNK12SimpleString4sizeEv>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	bf0c      	ite	eq
 8013728:	2301      	moveq	r3, #1
 801372a:	2300      	movne	r3, #0
 801372c:	b2db      	uxtb	r3, r3
 801372e:	2b00      	cmp	r3, #0
 8013730:	d001      	beq.n	8013736 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 8013732:	2400      	movs	r4, #0
 8013734:	e078      	b.n	8013828 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 8013736:	2500      	movs	r5, #0
 8013738:	f107 0320 	add.w	r3, r7, #32
 801373c:	4940      	ldr	r1, [pc, #256]	; (8013840 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 801373e:	4618      	mov	r0, r3
 8013740:	f7f6 fd45 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013744:	2601      	movs	r6, #1
 8013746:	f107 0220 	add.w	r2, r7, #32
 801374a:	f107 0310 	add.w	r3, r7, #16
 801374e:	4611      	mov	r1, r2
 8013750:	4618      	mov	r0, r3
 8013752:	f7f7 f900 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8013756:	4603      	mov	r3, r0
 8013758:	2b00      	cmp	r3, #0
 801375a:	d111      	bne.n	8013780 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 801375c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013760:	4938      	ldr	r1, [pc, #224]	; (8013844 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 8013762:	4618      	mov	r0, r3
 8013764:	f7f6 fd33 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8013768:	2501      	movs	r5, #1
 801376a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801376e:	f107 0310 	add.w	r3, r7, #16
 8013772:	4611      	mov	r1, r2
 8013774:	4618      	mov	r0, r3
 8013776:	f7f7 f8ee 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d001      	beq.n	8013784 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 8013780:	2401      	movs	r4, #1
 8013782:	e000      	b.n	8013786 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 8013784:	2400      	movs	r4, #0
 8013786:	2d00      	cmp	r5, #0
 8013788:	d004      	beq.n	8013794 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 801378a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801378e:	4618      	mov	r0, r3
 8013790:	f7f7 f8d5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8013794:	2e00      	cmp	r6, #0
 8013796:	d004      	beq.n	80137a2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 8013798:	f107 0320 	add.w	r3, r7, #32
 801379c:	4618      	mov	r0, r3
 801379e:	f7f7 f8ce 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80137a2:	2c00      	cmp	r4, #0
 80137a4:	d005      	beq.n	80137b2 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 80137a6:	68fb      	ldr	r3, [r7, #12]
 80137a8:	2200      	movs	r2, #0
 80137aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80137ae:	2401      	movs	r4, #1
 80137b0:	e03a      	b.n	8013828 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 80137b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80137b6:	4924      	ldr	r1, [pc, #144]	; (8013848 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f6 fd08 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80137be:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80137c2:	f107 0310 	add.w	r3, r7, #16
 80137c6:	4611      	mov	r1, r2
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f7 f8c4 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80137ce:	4603      	mov	r3, r0
 80137d0:	461c      	mov	r4, r3
 80137d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7f7 f8b1 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80137dc:	2c00      	cmp	r4, #0
 80137de:	d005      	beq.n	80137ec <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	2201      	movs	r2, #1
 80137e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 80137e8:	2401      	movs	r4, #1
 80137ea:	e01d      	b.n	8013828 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 80137ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80137f0:	4916      	ldr	r1, [pc, #88]	; (801384c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f6 fceb 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80137f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80137fc:	f107 0310 	add.w	r3, r7, #16
 8013800:	4611      	mov	r1, r2
 8013802:	4618      	mov	r0, r3
 8013804:	f7f7 f8a7 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8013808:	4603      	mov	r3, r0
 801380a:	461c      	mov	r4, r3
 801380c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013810:	4618      	mov	r0, r3
 8013812:	f7f7 f894 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8013816:	2c00      	cmp	r4, #0
 8013818:	d005      	beq.n	8013826 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	2202      	movs	r2, #2
 801381e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 8013822:	2401      	movs	r4, #1
 8013824:	e000      	b.n	8013828 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 8013826:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 8013828:	f107 0310 	add.w	r3, r7, #16
 801382c:	4618      	mov	r0, r3
 801382e:	f7f7 f886 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8013832:	4623      	mov	r3, r4
}
 8013834:	4618      	mov	r0, r3
 8013836:	3744      	adds	r7, #68	; 0x44
 8013838:	46bd      	mov	sp, r7
 801383a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801383c:	080220c4 	.word	0x080220c4
 8013840:	08022a34 	.word	0x08022a34
 8013844:	08022a3c 	.word	0x08022a3c
 8013848:	08022a44 	.word	0x08022a44
 801384c:	08022a4c 	.word	0x08022a4c

08013850 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801385e:	2b01      	cmp	r3, #1
 8013860:	bf0c      	ite	eq
 8013862:	2301      	moveq	r3, #1
 8013864:	2300      	movne	r3, #0
 8013866:	b2db      	uxtb	r3, r3
}
 8013868:	4618      	mov	r0, r3
 801386a:	370c      	adds	r7, #12
 801386c:	46bd      	mov	sp, r7
 801386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013872:	4770      	bx	lr

08013874 <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 8013874:	b480      	push	{r7}
 8013876:	b083      	sub	sp, #12
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013882:	2b02      	cmp	r3, #2
 8013884:	bf0c      	ite	eq
 8013886:	2301      	moveq	r3, #1
 8013888:	2300      	movne	r3, #0
 801388a:	b2db      	uxtb	r3, r3
}
 801388c:	4618      	mov	r0, r3
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 8013898:	b480      	push	{r7}
 801389a:	b083      	sub	sp, #12
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
    return packageName_;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	3330      	adds	r3, #48	; 0x30
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	370c      	adds	r7, #12
 80138a8:	46bd      	mov	sp, r7
 80138aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ae:	4770      	bx	lr

080138b0 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 80138b0:	b480      	push	{r7}
 80138b2:	b083      	sub	sp, #12
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2200      	movs	r2, #0
 80138bc:	601a      	str	r2, [r3, #0]
    {}
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	4618      	mov	r0, r3
 80138c2:	370c      	adds	r7, #12
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 80138cc:	b480      	push	{r7}
 80138ce:	b083      	sub	sp, #12
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80138da:	2200      	movs	r2, #0
 80138dc:	601a      	str	r2, [r3, #0]
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80138e4:	3304      	adds	r3, #4
 80138e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80138ea:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	2200      	movs	r2, #0
 80138f0:	701a      	strb	r2, [r3, #0]
}
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	4618      	mov	r0, r3
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 8013900:	b480      	push	{r7}
 8013902:	b083      	sub	sp, #12
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801390e:	2200      	movs	r2, #0
 8013910:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	2200      	movs	r2, #0
 8013916:	701a      	strb	r2, [r3, #0]
}
 8013918:	bf00      	nop
 801391a:	370c      	adds	r7, #12
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 8013924:	b40e      	push	{r1, r2, r3}
 8013926:	b590      	push	{r4, r7, lr}
 8013928:	b086      	sub	sp, #24
 801392a:	af00      	add	r7, sp, #0
 801392c:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013934:	3304      	adds	r3, #4
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	1ad3      	subs	r3, r2, r3
 8013942:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d032      	beq.n	80139b0 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 801394a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801394e:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 8013950:	4b1b      	ldr	r3, [pc, #108]	; (80139c0 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 8013952:	681c      	ldr	r4, [r3, #0]
 8013954:	687a      	ldr	r2, [r7, #4]
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	18d0      	adds	r0, r2, r3
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	1c59      	adds	r1, r3, #1
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013968:	47a0      	blx	r4
 801396a:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	2b00      	cmp	r3, #0
 8013970:	dd09      	ble.n	8013986 <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013978:	681a      	ldr	r2, [r3, #0]
 801397a:	693b      	ldr	r3, [r7, #16]
 801397c:	441a      	add	r2, r3
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013984:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013994:	3304      	adds	r3, #4
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	429a      	cmp	r2, r3
 801399a:	d90a      	bls.n	80139b2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139a2:	3304      	adds	r3, #4
 80139a4:	681a      	ldr	r2, [r3, #0]
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139ac:	601a      	str	r2, [r3, #0]
 80139ae:	e000      	b.n	80139b2 <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 80139b0:	bf00      	nop
    va_end(arguments);
}
 80139b2:	3718      	adds	r7, #24
 80139b4:	46bd      	mov	sp, r7
 80139b6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80139ba:	b003      	add	sp, #12
 80139bc:	4770      	bx	lr
 80139be:	bf00      	nop
 80139c0:	200000ac 	.word	0x200000ac

080139c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b08c      	sub	sp, #48	; 0x30
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60f8      	str	r0, [r7, #12]
 80139cc:	60b9      	str	r1, [r7, #8]
 80139ce:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 80139d4:	2310      	movs	r3, #16
 80139d6:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 80139d8:	2300      	movs	r3, #0
 80139da:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 80139dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d273      	bcs.n	8013acc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 80139e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139e6:	493b      	ldr	r1, [pc, #236]	; (8013ad4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 80139e8:	68f8      	ldr	r0, [r7, #12]
 80139ea:	f7ff ff9b 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f2:	1ad3      	subs	r3, r2, r3
 80139f4:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	2b10      	cmp	r3, #16
 80139fa:	d901      	bls.n	8013a00 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 80139fc:	2310      	movs	r3, #16
 80139fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 8013a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a02:	f1c3 0310 	rsb	r3, r3, #16
 8013a06:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 8013a08:	2300      	movs	r3, #0
 8013a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d215      	bcs.n	8013a40 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 8013a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a18:	4413      	add	r3, r2
 8013a1a:	69fa      	ldr	r2, [r7, #28]
 8013a1c:	4413      	add	r3, r2
 8013a1e:	781b      	ldrb	r3, [r3, #0]
 8013a20:	461a      	mov	r2, r3
 8013a22:	492d      	ldr	r1, [pc, #180]	; (8013ad8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7ff ff7d 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 8013a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a2c:	2b07      	cmp	r3, #7
 8013a2e:	d103      	bne.n	8013a38 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 8013a30:	492a      	ldr	r1, [pc, #168]	; (8013adc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8013a32:	68f8      	ldr	r0, [r7, #12]
 8013a34:	f7ff ff76 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3a:	3301      	adds	r3, #1
 8013a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a3e:	e7e5      	b.n	8013a0c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 8013a40:	2300      	movs	r3, #0
 8013a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d207      	bcs.n	8013a5c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 8013a4c:	4924      	ldr	r1, [pc, #144]	; (8013ae0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	f7ff ff68 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	3301      	adds	r3, #1
 8013a58:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a5a:	e7f3      	b.n	8013a44 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 8013a5c:	697b      	ldr	r3, [r7, #20]
 8013a5e:	2b08      	cmp	r3, #8
 8013a60:	d903      	bls.n	8013a6a <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 8013a62:	491e      	ldr	r1, [pc, #120]	; (8013adc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7ff ff5d 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 8013a6a:	491e      	ldr	r1, [pc, #120]	; (8013ae4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f7ff ff59 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013a72:	2300      	movs	r3, #0
 8013a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d21d      	bcs.n	8013aba <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 8013a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a82:	4413      	add	r3, r2
 8013a84:	69fa      	ldr	r2, [r7, #28]
 8013a86:	4413      	add	r3, r2
 8013a88:	781b      	ldrb	r3, [r3, #0]
 8013a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 8013a8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013a92:	2b1f      	cmp	r3, #31
 8013a94:	d903      	bls.n	8013a9e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 8013a96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013a9a:	2b7e      	cmp	r3, #126	; 0x7e
 8013a9c:	d902      	bls.n	8013aa4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 8013a9e:	232e      	movs	r3, #46	; 0x2e
 8013aa0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 8013aa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	490f      	ldr	r1, [pc, #60]	; (8013ae8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 8013aac:	68f8      	ldr	r0, [r7, #12]
 8013aae:	f7ff ff39 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 8013ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab4:	3301      	adds	r3, #1
 8013ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8013ab8:	e7dd      	b.n	8013a76 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 8013aba:	490c      	ldr	r1, [pc, #48]	; (8013aec <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 8013abc:	68f8      	ldr	r0, [r7, #12]
 8013abe:	f7ff ff31 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 8013ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac6:	4413      	add	r3, r2
 8013ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 8013aca:	e787      	b.n	80139dc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 8013acc:	bf00      	nop
 8013ace:	3730      	adds	r7, #48	; 0x30
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	08022a64 	.word	0x08022a64
 8013ad8:	08022a70 	.word	0x08022a70
 8013adc:	08022a78 	.word	0x08022a78
 8013ae0:	08022a7c 	.word	0x08022a7c
 8013ae4:	08022a80 	.word	0x08022a80
 8013ae8:	08022a84 	.word	0x08022a84
 8013aec:	08022a88 	.word	0x08022a88

08013af0 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 8013af0:	b480      	push	{r7}
 8013af2:	b083      	sub	sp, #12
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
    return buffer_;
 8013af8:	687b      	ldr	r3, [r7, #4]
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	370c      	adds	r7, #12
 8013afe:	46bd      	mov	sp, r7
 8013b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b04:	4770      	bx	lr

08013b06 <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 8013b06:	b480      	push	{r7}
 8013b08:	b083      	sub	sp, #12
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	6078      	str	r0, [r7, #4]
 8013b0e:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b16:	3304      	adds	r3, #4
 8013b18:	683a      	ldr	r2, [r7, #0]
 8013b1a:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b22:	3304      	adds	r3, #4
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013b2a:	d306      	bcc.n	8013b3a <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b32:	3304      	adds	r3, #4
 8013b34:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013b38:	601a      	str	r2, [r3, #0]
}
 8013b3a:	bf00      	nop
 8013b3c:	370c      	adds	r7, #12
 8013b3e:	46bd      	mov	sp, r7
 8013b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b44:	4770      	bx	lr

08013b46 <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 8013b46:	b480      	push	{r7}
 8013b48:	b083      	sub	sp, #12
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b54:	3304      	adds	r3, #4
 8013b56:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013b5a:	601a      	str	r2, [r3, #0]
}
 8013b5c:	bf00      	nop
 8013b5e:	370c      	adds	r7, #12
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr

08013b68 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b76:	681a      	ldr	r2, [r3, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b7e:	3304      	adds	r3, #4
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	429a      	cmp	r2, r3
 8013b84:	bf2c      	ite	cs
 8013b86:	2301      	movcs	r3, #1
 8013b88:	2300      	movcc	r3, #0
 8013b8a:	b2db      	uxtb	r3, r3
}
 8013b8c:	4618      	mov	r0, r3
 8013b8e:	370c      	adds	r7, #12
 8013b90:	46bd      	mov	sp, r7
 8013b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b96:	4770      	bx	lr

08013b98 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b082      	sub	sp, #8
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	601a      	str	r2, [r3, #0]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	2200      	movs	r2, #0
 8013baa:	711a      	strb	r2, [r3, #4]
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	3308      	adds	r3, #8
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff fe8b 	bl	80138cc <_ZN18SimpleStringBufferC1Ev>
{
}
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	4618      	mov	r0, r3
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 8013bc0:	b5b0      	push	{r4, r5, r7, lr}
 8013bc2:	b086      	sub	sp, #24
 8013bc4:	af02      	add	r7, sp, #8
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	60b9      	str	r1, [r7, #8]
 8013bca:	607a      	str	r2, [r7, #4]
 8013bcc:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f103 0408 	add.w	r4, r3, #8
 8013bd4:	687d      	ldr	r5, [r7, #4]
 8013bd6:	6a3b      	ldr	r3, [r7, #32]
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	3314      	adds	r3, #20
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	6a38      	ldr	r0, [r7, #32]
 8013be0:	4798      	blx	r3
 8013be2:	4603      	mov	r3, r0
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	9300      	str	r3, [sp, #0]
 8013bea:	462b      	mov	r3, r5
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	4904      	ldr	r1, [pc, #16]	; (8013c00 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f7ff fe97 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013bf6:	bf00      	nop
 8013bf8:	3710      	adds	r7, #16
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	08022a8c 	.word	0x08022a8c

08013c04 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b086      	sub	sp, #24
 8013c08:	af02      	add	r7, sp, #8
 8013c0a:	60f8      	str	r0, [r7, #12]
 8013c0c:	60b9      	str	r1, [r7, #8]
 8013c0e:	607a      	str	r2, [r7, #4]
 8013c10:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f103 0408 	add.w	r4, r3, #8
 8013c18:	687d      	ldr	r5, [r7, #4]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	3318      	adds	r3, #24
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	6838      	ldr	r0, [r7, #0]
 8013c24:	4798      	blx	r3
 8013c26:	4603      	mov	r3, r0
 8013c28:	9300      	str	r3, [sp, #0]
 8013c2a:	462b      	mov	r3, r5
 8013c2c:	68ba      	ldr	r2, [r7, #8]
 8013c2e:	4904      	ldr	r1, [pc, #16]	; (8013c40 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 8013c30:	4620      	mov	r0, r4
 8013c32:	f7ff fe77 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013c36:	bf00      	nop
 8013c38:	3710      	adds	r7, #16
 8013c3a:	46bd      	mov	sp, r7
 8013c3c:	bdb0      	pop	{r4, r5, r7, pc}
 8013c3e:	bf00      	nop
 8013c40:	08022ac4 	.word	0x08022ac4

08013c44 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b082      	sub	sp, #8
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	3308      	adds	r3, #8
 8013c50:	4903      	ldr	r1, [pc, #12]	; (8013c60 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 8013c52:	4618      	mov	r0, r3
 8013c54:	f7ff fe66 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013c58:	bf00      	nop
 8013c5a:	3708      	adds	r7, #8
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	08022af4 	.word	0x08022af4

08013c64 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b084      	sub	sp, #16
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 8013c78:	2367      	movs	r3, #103	; 0x67
 8013c7a:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f203 1311 	addw	r3, r3, #273	; 0x111
 8013c82:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f103 0208 	add.w	r2, r3, #8
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8013c90:	4619      	mov	r1, r3
 8013c92:	4610      	mov	r0, r2
 8013c94:	f7ff ff37 	bl	8013b06 <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 8013c98:	bf00      	nop
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 8013ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ca2:	b089      	sub	sp, #36	; 0x24
 8013ca4:	af04      	add	r7, sp, #16
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d102      	bne.n	8013cb8 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 8013cb2:	68f8      	ldr	r0, [r7, #12]
 8013cb4:	f000 f882 	bl	8013dbc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	1c5a      	adds	r2, r3, #1
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	f103 0508 	add.w	r5, r3, #8
 8013cc8:	68bb      	ldr	r3, [r7, #8]
 8013cca:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013cda:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	695a      	ldr	r2, [r3, #20]
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	695b      	ldr	r3, [r3, #20]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013cea:	4610      	mov	r0, r2
 8013cec:	4798      	blx	r3
 8013cee:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 8013cf4:	9303      	str	r3, [sp, #12]
 8013cf6:	9202      	str	r2, [sp, #8]
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	9201      	str	r2, [sp, #4]
 8013cfc:	9400      	str	r4, [sp, #0]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	4632      	mov	r2, r6
 8013d02:	4915      	ldr	r1, [pc, #84]	; (8013d58 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 8013d04:	4628      	mov	r0, r5
 8013d06:	f7ff fe0d 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f103 0008 	add.w	r0, r3, #8
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	6899      	ldr	r1, [r3, #8]
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	f7ff fe53 	bl	80139c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	695a      	ldr	r2, [r3, #20]
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	695b      	ldr	r3, [r3, #20]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	3314      	adds	r3, #20
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	4610      	mov	r0, r2
 8013d2e:	4798      	blx	r3
 8013d30:	4603      	mov	r3, r0
 8013d32:	490a      	ldr	r1, [pc, #40]	; (8013d5c <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 8013d34:	4618      	mov	r0, r3
 8013d36:	f7f6 f887 	bl	8009e48 <_ZN12SimpleString6StrCmpEPKcS1_>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	bf0c      	ite	eq
 8013d40:	2301      	moveq	r3, #1
 8013d42:	2300      	movne	r3, #0
 8013d44:	b2db      	uxtb	r3, r3
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d002      	beq.n	8013d50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	2201      	movs	r2, #1
 8013d4e:	711a      	strb	r2, [r3, #4]
}
 8013d50:	bf00      	nop
 8013d52:	3714      	adds	r7, #20
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d58:	08022b14 	.word	0x08022b14
 8013d5c:	08022b74 	.word	0x08022b74

08013d60 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b084      	sub	sp, #16
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d103      	bne.n	8013d78 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 8013d70:	6878      	ldr	r0, [r7, #4]
 8013d72:	f7ff ff67 	bl	8013c44 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 8013d76:	e01e      	b.n	8013db6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	3308      	adds	r3, #8
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7ff fef3 	bl	8013b68 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 8013d82:	4603      	mov	r3, r0
 8013d84:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	3308      	adds	r3, #8
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7ff fedb 	bl	8013b46 <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 8013d90:	7bfb      	ldrb	r3, [r7, #15]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d002      	beq.n	8013d9c <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 8013d96:	6878      	ldr	r0, [r7, #4]
 8013d98:	f000 f820 	bl	8013ddc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	4619      	mov	r1, r3
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f000 f82a 	bl	8013dfc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	791b      	ldrb	r3, [r3, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d002      	beq.n	8013db6 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f000 f839 	bl	8013e28 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b082      	sub	sp, #8
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	3308      	adds	r3, #8
 8013dc8:	4903      	ldr	r1, [pc, #12]	; (8013dd8 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff fdaa 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013dd0:	bf00      	nop
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}
 8013dd8:	08022b7c 	.word	0x08022b7c

08013ddc <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3308      	adds	r3, #8
 8013de8:	4903      	ldr	r1, [pc, #12]	; (8013df8 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7ff fd9a 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013df0:	bf00      	nop
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}
 8013df8:	08022b94 	.word	0x08022b94

08013dfc <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b082      	sub	sp, #8
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f103 0008 	add.w	r0, r3, #8
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	4a04      	ldr	r2, [pc, #16]	; (8013e20 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 8013e10:	4904      	ldr	r1, [pc, #16]	; (8013e24 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 8013e12:	f7ff fd87 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013e16:	bf00      	nop
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	08022bdc 	.word	0x08022bdc
 8013e24:	08022bf4 	.word	0x08022bf4

08013e28 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	3308      	adds	r3, #8
 8013e34:	4903      	ldr	r1, [pc, #12]	; (8013e44 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 8013e36:	4618      	mov	r0, r3
 8013e38:	f7ff fd74 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
}
 8013e3c:	bf00      	nop
 8013e3e:	3708      	adds	r7, #8
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	08022bfc 	.word	0x08022bfc

08013e48 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013e48:	b580      	push	{r7, lr}
 8013e4a:	b08a      	sub	sp, #40	; 0x28
 8013e4c:	af06      	add	r7, sp, #24
 8013e4e:	60f8      	str	r0, [r7, #12]
 8013e50:	60b9      	str	r1, [r7, #8]
 8013e52:	607a      	str	r2, [r7, #4]
 8013e54:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 8013e56:	f7f9 fe8d 	bl	800db74 <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 8013e5a:	4602      	mov	r2, r0
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	9305      	str	r3, [sp, #20]
 8013e60:	683b      	ldr	r3, [r7, #0]
 8013e62:	9304      	str	r3, [sp, #16]
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	9303      	str	r3, [sp, #12]
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	9302      	str	r3, [sp, #8]
 8013e6c:	9201      	str	r2, [sp, #4]
 8013e6e:	2300      	movs	r3, #0
 8013e70:	9300      	str	r3, [sp, #0]
 8013e72:	2300      	movs	r3, #0
 8013e74:	4a04      	ldr	r2, [pc, #16]	; (8013e88 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 8013e76:	4905      	ldr	r1, [pc, #20]	; (8013e8c <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 8013e78:	68f8      	ldr	r0, [r7, #12]
 8013e7a:	f000 f855 	bl	8013f28 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013e7e:	bf00      	nop
 8013e80:	3710      	adds	r7, #16
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	08022a58 	.word	0x08022a58
 8013e8c:	08022d10 	.word	0x08022d10

08013e90 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013e90:	b590      	push	{r4, r7, lr}
 8013e92:	b08b      	sub	sp, #44	; 0x2c
 8013e94:	af06      	add	r7, sp, #24
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013e9e:	68bb      	ldr	r3, [r7, #8]
 8013ea0:	68d8      	ldr	r0, [r3, #12]
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	691c      	ldr	r4, [r3, #16]
 8013ea6:	68bb      	ldr	r3, [r7, #8]
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	68ba      	ldr	r2, [r7, #8]
 8013eac:	6952      	ldr	r2, [r2, #20]
 8013eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013eb0:	9105      	str	r1, [sp, #20]
 8013eb2:	6a39      	ldr	r1, [r7, #32]
 8013eb4:	9104      	str	r1, [sp, #16]
 8013eb6:	6839      	ldr	r1, [r7, #0]
 8013eb8:	9103      	str	r1, [sp, #12]
 8013eba:	6879      	ldr	r1, [r7, #4]
 8013ebc:	9102      	str	r1, [sp, #8]
 8013ebe:	9201      	str	r2, [sp, #4]
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	4623      	mov	r3, r4
 8013ec4:	4602      	mov	r2, r0
 8013ec6:	4904      	ldr	r1, [pc, #16]	; (8013ed8 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f000 f82d 	bl	8013f28 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013ece:	bf00      	nop
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd90      	pop	{r4, r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	08022d34 	.word	0x08022d34

08013edc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013edc:	b590      	push	{r4, r7, lr}
 8013ede:	b08b      	sub	sp, #44	; 0x2c
 8013ee0:	af06      	add	r7, sp, #24
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	60b9      	str	r1, [r7, #8]
 8013ee6:	607a      	str	r2, [r7, #4]
 8013ee8:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 8013eea:	68bb      	ldr	r3, [r7, #8]
 8013eec:	68d8      	ldr	r0, [r3, #12]
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	691c      	ldr	r4, [r3, #16]
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	68ba      	ldr	r2, [r7, #8]
 8013ef8:	6952      	ldr	r2, [r2, #20]
 8013efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013efc:	9105      	str	r1, [sp, #20]
 8013efe:	6a39      	ldr	r1, [r7, #32]
 8013f00:	9104      	str	r1, [sp, #16]
 8013f02:	6839      	ldr	r1, [r7, #0]
 8013f04:	9103      	str	r1, [sp, #12]
 8013f06:	6879      	ldr	r1, [r7, #4]
 8013f08:	9102      	str	r1, [sp, #8]
 8013f0a:	9201      	str	r2, [sp, #4]
 8013f0c:	9300      	str	r3, [sp, #0]
 8013f0e:	4623      	mov	r3, r4
 8013f10:	4602      	mov	r2, r0
 8013f12:	4904      	ldr	r1, [pc, #16]	; (8013f24 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 8013f14:	68f8      	ldr	r0, [r7, #12]
 8013f16:	f000 f807 	bl	8013f28 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 8013f1a:	bf00      	nop
 8013f1c:	3714      	adds	r7, #20
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd90      	pop	{r4, r7, pc}
 8013f22:	bf00      	nop
 8013f24:	08022d5c 	.word	0x08022d5c

08013f28 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 8013f28:	b590      	push	{r4, r7, lr}
 8013f2a:	b087      	sub	sp, #28
 8013f2c:	af02      	add	r7, sp, #8
 8013f2e:	60f8      	str	r0, [r7, #12]
 8013f30:	60b9      	str	r1, [r7, #8]
 8013f32:	607a      	str	r2, [r7, #4]
 8013f34:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3308      	adds	r3, #8
 8013f3a:	68ba      	ldr	r2, [r7, #8]
 8013f3c:	4910      	ldr	r1, [pc, #64]	; (8013f80 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7ff fcf0 	bl	8013924 <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 8013f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f46:	9300      	str	r3, [sp, #0]
 8013f48:	6a3b      	ldr	r3, [r7, #32]
 8013f4a:	683a      	ldr	r2, [r7, #0]
 8013f4c:	6879      	ldr	r1, [r7, #4]
 8013f4e:	68f8      	ldr	r0, [r7, #12]
 8013f50:	f7ff fe36 	bl	8013bc0 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 8013f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013f5a:	68f8      	ldr	r0, [r7, #12]
 8013f5c:	f7ff fe52 	bl	8013c04 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 8013f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3308      	adds	r3, #8
 8013f66:	681c      	ldr	r4, [r3, #0]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f000 f80b 	bl	8013f84 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	4619      	mov	r1, r3
 8013f72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013f74:	47a0      	blx	r4
}
 8013f76:	bf00      	nop
 8013f78:	3714      	adds	r7, #20
 8013f7a:	46bd      	mov	sp, r7
 8013f7c:	bd90      	pop	{r4, r7, pc}
 8013f7e:	bf00      	nop
 8013f80:	08022d88 	.word	0x08022d88

08013f84 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b082      	sub	sp, #8
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	3308      	adds	r3, #8
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7ff fdad 	bl	8013af0 <_ZN18SimpleStringBuffer8toStringEv>
 8013f96:	4603      	mov	r3, r0
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3708      	adds	r7, #8
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b082      	sub	sp, #8
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3308      	adds	r3, #8
 8013fac:	4618      	mov	r0, r3
 8013fae:	f7ff fca7 	bl	8013900 <_ZN18SimpleStringBuffer5clearEv>
}
 8013fb2:	bf00      	nop
 8013fb4:	3708      	adds	r7, #8
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}

08013fba <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 8013fba:	b480      	push	{r7}
 8013fbc:	b085      	sub	sp, #20
 8013fbe:	af00      	add	r7, sp, #0
 8013fc0:	60f8      	str	r0, [r7, #12]
 8013fc2:	60b9      	str	r1, [r7, #8]
 8013fc4:	607a      	str	r2, [r7, #4]
 8013fc6:	603b      	str	r3, [r7, #0]
    number_ = number;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	68ba      	ldr	r2, [r7, #8]
 8013fd2:	609a      	str	r2, [r3, #8]
    size_ = size;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	683a      	ldr	r2, [r7, #0]
 8013fd8:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	69ba      	ldr	r2, [r7, #24]
 8013fde:	615a      	str	r2, [r3, #20]
    period_ = period;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	7f3a      	ldrb	r2, [r7, #28]
 8013fe4:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8013fec:	765a      	strb	r2, [r3, #25]
    file_ = file;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ff2:	60da      	str	r2, [r3, #12]
    line_ = line;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ff8:	611a      	str	r2, [r3, #16]
}
 8013ffa:	bf00      	nop
 8013ffc:	3714      	adds	r7, #20
 8013ffe:	46bd      	mov	sp, r7
 8014000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014004:	4770      	bx	lr

08014006 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014006:	b480      	push	{r7}
 8014008:	b085      	sub	sp, #20
 801400a:	af00      	add	r7, sp, #0
 801400c:	60f8      	str	r0, [r7, #12]
 801400e:	60b9      	str	r1, [r7, #8]
 8014010:	4613      	mov	r3, r2
 8014012:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 8014014:	79fb      	ldrb	r3, [r7, #7]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d00b      	beq.n	8014032 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	7e1b      	ldrb	r3, [r3, #24]
 801401e:	79fa      	ldrb	r2, [r7, #7]
 8014020:	429a      	cmp	r2, r3
 8014022:	d006      	beq.n	8014032 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	7e1b      	ldrb	r3, [r3, #24]
 8014028:	2b01      	cmp	r3, #1
 801402a:	d004      	beq.n	8014036 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 801402c:	79fb      	ldrb	r3, [r7, #7]
 801402e:	2b02      	cmp	r3, #2
 8014030:	d101      	bne.n	8014036 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 8014032:	2301      	movs	r3, #1
 8014034:	e000      	b.n	8014038 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 8014036:	2300      	movs	r3, #0
}
 8014038:	4618      	mov	r0, r3
 801403a:	3714      	adds	r7, #20
 801403c:	46bd      	mov	sp, r7
 801403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014042:	4770      	bx	lr

08014044 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 8014044:	b480      	push	{r7}
 8014046:	b083      	sub	sp, #12
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
 801404c:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681a      	ldr	r2, [r3, #0]
 8014052:	683b      	ldr	r3, [r7, #0]
 8014054:	61da      	str	r2, [r3, #28]
    head_ = node;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	683a      	ldr	r2, [r7, #0]
 801405a:	601a      	str	r2, [r3, #0]
}
 801405c:	bf00      	nop
 801405e:	370c      	adds	r7, #12
 8014060:	46bd      	mov	sp, r7
 8014062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014066:	4770      	bx	lr

08014068 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 8014068:	b480      	push	{r7}
 801406a:	b085      	sub	sp, #20
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
 8014070:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 8014078:	2300      	movs	r3, #0
 801407a:	60bb      	str	r3, [r7, #8]
    while (cur) {
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d019      	beq.n	80140b6 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	689b      	ldr	r3, [r3, #8]
 8014086:	683a      	ldr	r2, [r7, #0]
 8014088:	429a      	cmp	r2, r3
 801408a:	d10e      	bne.n	80140aa <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d005      	beq.n	801409e <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	69da      	ldr	r2, [r3, #28]
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	61da      	str	r2, [r3, #28]
                return cur;
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	e00c      	b.n	80140b8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 801409e:	68fb      	ldr	r3, [r7, #12]
 80140a0:	69da      	ldr	r2, [r3, #28]
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	601a      	str	r2, [r3, #0]
                return cur;
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	e006      	b.n	80140b8 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	69db      	ldr	r3, [r3, #28]
 80140b2:	60fb      	str	r3, [r7, #12]
    while (cur) {
 80140b4:	e7e2      	b.n	801407c <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3714      	adds	r7, #20
 80140bc:	46bd      	mov	sp, r7
 80140be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c2:	4770      	bx	lr

080140c4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 80140c4:	b480      	push	{r7}
 80140c6:	b085      	sub	sp, #20
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00a      	beq.n	80140f0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	689b      	ldr	r3, [r3, #8]
 80140de:	683a      	ldr	r2, [r7, #0]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d101      	bne.n	80140e8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	e004      	b.n	80140f2 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	69db      	ldr	r3, [r3, #28]
 80140ec:	60fb      	str	r3, [r7, #12]
  while (cur) {
 80140ee:	e7f1      	b.n	80140d4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3714      	adds	r7, #20
 80140f6:	46bd      	mov	sp, r7
 80140f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140fc:	4770      	bx	lr

080140fe <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b086      	sub	sp, #24
 8014102:	af00      	add	r7, sp, #0
 8014104:	60f8      	str	r0, [r7, #12]
 8014106:	60b9      	str	r1, [r7, #8]
 8014108:	4613      	mov	r3, r2
 801410a:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	617b      	str	r3, [r7, #20]
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d00e      	beq.n	8014134 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 8014116:	79fb      	ldrb	r3, [r7, #7]
 8014118:	461a      	mov	r2, r3
 801411a:	6979      	ldr	r1, [r7, #20]
 801411c:	68f8      	ldr	r0, [r7, #12]
 801411e:	f7ff ff72 	bl	8014006 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014122:	4603      	mov	r3, r0
 8014124:	2b00      	cmp	r3, #0
 8014126:	d001      	beq.n	801412c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8014128:	697b      	ldr	r3, [r7, #20]
 801412a:	e004      	b.n	8014136 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	69db      	ldr	r3, [r3, #28]
 8014130:	617b      	str	r3, [r7, #20]
 8014132:	e7ed      	b.n	8014110 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 8014134:	2300      	movs	r3, #0
}
 8014136:	4618      	mov	r0, r3
 8014138:	3718      	adds	r7, #24
 801413a:	46bd      	mov	sp, r7
 801413c:	bd80      	pop	{r7, pc}

0801413e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 801413e:	b580      	push	{r7, lr}
 8014140:	b082      	sub	sp, #8
 8014142:	af00      	add	r7, sp, #0
 8014144:	6078      	str	r0, [r7, #4]
 8014146:	460b      	mov	r3, r1
 8014148:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	78fa      	ldrb	r2, [r7, #3]
 8014150:	4619      	mov	r1, r3
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	f7ff ffd3 	bl	80140fe <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014158:	4603      	mov	r3, r0
}
 801415a:	4618      	mov	r0, r3
 801415c:	3708      	adds	r7, #8
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}

08014162 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 8014162:	b580      	push	{r7, lr}
 8014164:	b084      	sub	sp, #16
 8014166:	af00      	add	r7, sp, #0
 8014168:	60f8      	str	r0, [r7, #12]
 801416a:	60b9      	str	r1, [r7, #8]
 801416c:	4613      	mov	r3, r2
 801416e:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	69db      	ldr	r3, [r3, #28]
 8014174:	79fa      	ldrb	r2, [r7, #7]
 8014176:	4619      	mov	r1, r3
 8014178:	68f8      	ldr	r0, [r7, #12]
 801417a:	f7ff ffc0 	bl	80140fe <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801417e:	4603      	mov	r3, r0
}
 8014180:	4618      	mov	r0, r3
 8014182:	3710      	adds	r7, #16
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}

08014188 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b084      	sub	sp, #16
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
 8014190:	460b      	mov	r3, r1
 8014192:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8014194:	2300      	movs	r3, #0
 8014196:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	60bb      	str	r3, [r7, #8]
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00f      	beq.n	80141c4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 80141a4:	78fb      	ldrb	r3, [r7, #3]
 80141a6:	461a      	mov	r2, r3
 80141a8:	68b9      	ldr	r1, [r7, #8]
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f7ff ff2b 	bl	8014006 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80141b0:	4603      	mov	r3, r0
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d002      	beq.n	80141bc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	3301      	adds	r3, #1
 80141ba:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80141bc:	68bb      	ldr	r3, [r7, #8]
 80141be:	69db      	ldr	r3, [r3, #28]
 80141c0:	60bb      	str	r3, [r7, #8]
 80141c2:	e7ec      	b.n	801419e <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80141c4:	68fb      	ldr	r3, [r7, #12]
}
 80141c6:	4618      	mov	r0, r3
 80141c8:	3710      	adds	r7, #16
 80141ca:	46bd      	mov	sp, r7
 80141cc:	bd80      	pop	{r7, pc}
	...

080141d0 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80141d0:	b480      	push	{r7}
 80141d2:	b083      	sub	sp, #12
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	4b09      	ldr	r3, [pc, #36]	; (8014204 <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80141de:	fba3 2301 	umull	r2, r3, r3, r1
 80141e2:	1aca      	subs	r2, r1, r3
 80141e4:	0852      	lsrs	r2, r2, #1
 80141e6:	4413      	add	r3, r2
 80141e8:	099a      	lsrs	r2, r3, #6
 80141ea:	4613      	mov	r3, r2
 80141ec:	00db      	lsls	r3, r3, #3
 80141ee:	4413      	add	r3, r2
 80141f0:	00db      	lsls	r3, r3, #3
 80141f2:	4413      	add	r3, r2
 80141f4:	1aca      	subs	r2, r1, r3
 80141f6:	4613      	mov	r3, r2
}
 80141f8:	4618      	mov	r0, r3
 80141fa:	370c      	adds	r7, #12
 80141fc:	46bd      	mov	sp, r7
 80141fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014202:	4770      	bx	lr
 8014204:	c0e07039 	.word	0xc0e07039

08014208 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
 8014210:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 8014212:	683b      	ldr	r3, [r7, #0]
 8014214:	689b      	ldr	r3, [r3, #8]
 8014216:	4619      	mov	r1, r3
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f7ff ffd9 	bl	80141d0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801421e:	4603      	mov	r3, r0
 8014220:	009b      	lsls	r3, r3, #2
 8014222:	687a      	ldr	r2, [r7, #4]
 8014224:	4413      	add	r3, r2
 8014226:	6839      	ldr	r1, [r7, #0]
 8014228:	4618      	mov	r0, r3
 801422a:	f7ff ff0b 	bl	8014044 <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}

08014236 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 8014236:	b580      	push	{r7, lr}
 8014238:	b082      	sub	sp, #8
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
 801423e:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8014240:	6839      	ldr	r1, [r7, #0]
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f7ff ffc4 	bl	80141d0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014248:	4603      	mov	r3, r0
 801424a:	009b      	lsls	r3, r3, #2
 801424c:	687a      	ldr	r2, [r7, #4]
 801424e:	4413      	add	r3, r2
 8014250:	6839      	ldr	r1, [r7, #0]
 8014252:	4618      	mov	r0, r3
 8014254:	f7ff ff08 	bl	8014068 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8014258:	4603      	mov	r3, r0
}
 801425a:	4618      	mov	r0, r3
 801425c:	3708      	adds	r7, #8
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}

08014262 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 8014262:	b580      	push	{r7, lr}
 8014264:	b082      	sub	sp, #8
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
 801426a:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 801426c:	6839      	ldr	r1, [r7, #0]
 801426e:	6878      	ldr	r0, [r7, #4]
 8014270:	f7ff ffae 	bl	80141d0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014274:	4603      	mov	r3, r0
 8014276:	009b      	lsls	r3, r3, #2
 8014278:	687a      	ldr	r2, [r7, #4]
 801427a:	4413      	add	r3, r2
 801427c:	6839      	ldr	r1, [r7, #0]
 801427e:	4618      	mov	r0, r3
 8014280:	f7ff ff20 	bl	80140c4 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 8014284:	4603      	mov	r3, r0
}
 8014286:	4618      	mov	r0, r3
 8014288:	3708      	adds	r7, #8
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}

0801428e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 801428e:	b580      	push	{r7, lr}
 8014290:	b084      	sub	sp, #16
 8014292:	af00      	add	r7, sp, #0
 8014294:	6078      	str	r0, [r7, #4]
 8014296:	460b      	mov	r3, r1
 8014298:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 801429e:	2300      	movs	r3, #0
 80142a0:	60bb      	str	r3, [r7, #8]
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	2b48      	cmp	r3, #72	; 0x48
 80142a6:	dc10      	bgt.n	80142ca <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	009b      	lsls	r3, r3, #2
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	4413      	add	r3, r2
 80142b0:	78fa      	ldrb	r2, [r7, #3]
 80142b2:	4611      	mov	r1, r2
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7ff ff67 	bl	8014188 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 80142ba:	4602      	mov	r2, r0
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	4413      	add	r3, r2
 80142c0:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80142c2:	68bb      	ldr	r3, [r7, #8]
 80142c4:	3301      	adds	r3, #1
 80142c6:	60bb      	str	r3, [r7, #8]
 80142c8:	e7eb      	b.n	80142a2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80142ca:	68fb      	ldr	r3, [r7, #12]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3710      	adds	r7, #16
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bd80      	pop	{r7, pc}

080142d4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b084      	sub	sp, #16
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	460b      	mov	r3, r1
 80142de:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80142e0:	2300      	movs	r3, #0
 80142e2:	60fb      	str	r3, [r7, #12]
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	2b48      	cmp	r3, #72	; 0x48
 80142e8:	dc12      	bgt.n	8014310 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	687a      	ldr	r2, [r7, #4]
 80142f0:	4413      	add	r3, r2
 80142f2:	78fa      	ldrb	r2, [r7, #3]
 80142f4:	4611      	mov	r1, r2
 80142f6:	4618      	mov	r0, r3
 80142f8:	f7ff ff21 	bl	801413e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80142fc:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	2b00      	cmp	r3, #0
 8014302:	d001      	beq.n	8014308 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	e004      	b.n	8014312 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	3301      	adds	r3, #1
 801430c:	60fb      	str	r3, [r7, #12]
 801430e:	e7e9      	b.n	80142e4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8014310:	2300      	movs	r3, #0
}
 8014312:	4618      	mov	r0, r3
 8014314:	3710      	adds	r7, #16
 8014316:	46bd      	mov	sp, r7
 8014318:	bd80      	pop	{r7, pc}

0801431a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 801431a:	b580      	push	{r7, lr}
 801431c:	b086      	sub	sp, #24
 801431e:	af00      	add	r7, sp, #0
 8014320:	60f8      	str	r0, [r7, #12]
 8014322:	60b9      	str	r1, [r7, #8]
 8014324:	4613      	mov	r3, r2
 8014326:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8014328:	68bb      	ldr	r3, [r7, #8]
 801432a:	689b      	ldr	r3, [r3, #8]
 801432c:	4619      	mov	r1, r3
 801432e:	68f8      	ldr	r0, [r7, #12]
 8014330:	f7ff ff4e 	bl	80141d0 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8014334:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 8014336:	697b      	ldr	r3, [r7, #20]
 8014338:	009b      	lsls	r3, r3, #2
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	4413      	add	r3, r2
 801433e:	79fa      	ldrb	r2, [r7, #7]
 8014340:	68b9      	ldr	r1, [r7, #8]
 8014342:	4618      	mov	r0, r3
 8014344:	f7ff ff0d 	bl	8014162 <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014348:	6138      	str	r0, [r7, #16]
    if (node) return node;
 801434a:	693b      	ldr	r3, [r7, #16]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d001      	beq.n	8014354 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	e019      	b.n	8014388 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	3301      	adds	r3, #1
 8014358:	617b      	str	r3, [r7, #20]
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	2b48      	cmp	r3, #72	; 0x48
 801435e:	d812      	bhi.n	8014386 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	68fa      	ldr	r2, [r7, #12]
 8014366:	4413      	add	r3, r2
 8014368:	79fa      	ldrb	r2, [r7, #7]
 801436a:	4611      	mov	r1, r2
 801436c:	4618      	mov	r0, r3
 801436e:	f7ff fee6 	bl	801413e <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 8014372:	6138      	str	r0, [r7, #16]
        if (node) return node;
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d001      	beq.n	801437e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	e004      	b.n	8014388 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 801437e:	697b      	ldr	r3, [r7, #20]
 8014380:	3301      	adds	r3, #1
 8014382:	617b      	str	r3, [r7, #20]
 8014384:	e7e9      	b.n	801435a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 8014386:	2300      	movs	r3, #0
}
 8014388:	4618      	mov	r0, r3
 801438a:	3718      	adds	r7, #24
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8014390:	b5b0      	push	{r4, r5, r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	2448      	movs	r4, #72	; 0x48
 801439c:	461d      	mov	r5, r3
 801439e:	2c00      	cmp	r4, #0
 80143a0:	db05      	blt.n	80143ae <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 80143a2:	4628      	mov	r0, r5
 80143a4:	f7ff fa84 	bl	80138b0 <_ZN22MemoryLeakDetectorListC1Ev>
 80143a8:	3504      	adds	r5, #4
 80143aa:	3c01      	subs	r4, #1
 80143ac:	e7f7      	b.n	801439e <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	4618      	mov	r0, r3
 80143b2:	3708      	adds	r7, #8
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bdb0      	pop	{r4, r5, r7, pc}

080143b8 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 80143b8:	b590      	push	{r4, r7, lr}
 80143ba:	b083      	sub	sp, #12
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
 80143c2:	4a1d      	ldr	r2, [pc, #116]	; (8014438 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	601a      	str	r2, [r3, #0]
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	330c      	adds	r3, #12
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7ff fbe3 	bl	8013b98 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80143d8:	331c      	adds	r3, #28
 80143da:	4618      	mov	r0, r3
 80143dc:	f7ff ffd8 	bl	8014390 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80143e6:	2201      	movs	r2, #1
 80143e8:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80143f0:	3304      	adds	r3, #4
 80143f2:	2201      	movs	r2, #1
 80143f4:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	2201      	movs	r2, #1
 80143fa:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014402:	3308      	adds	r3, #8
 8014404:	2200      	movs	r2, #0
 8014406:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	683a      	ldr	r2, [r7, #0]
 801440c:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 801440e:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 8014412:	490a      	ldr	r1, [pc, #40]	; (801443c <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 8014414:	2004      	movs	r0, #4
 8014416:	f7f3 fb17 	bl	8007a48 <_ZnwjPKci>
 801441a:	4604      	mov	r4, r0
 801441c:	4620      	mov	r0, r4
 801441e:	f7f5 fbe7 	bl	8009bf0 <_ZN11SimpleMutexC1Ev>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014428:	330c      	adds	r3, #12
 801442a:	601c      	str	r4, [r3, #0]
}
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4618      	mov	r0, r3
 8014430:	370c      	adds	r7, #12
 8014432:	46bd      	mov	sp, r7
 8014434:	bd90      	pop	{r4, r7, pc}
 8014436:	bf00      	nop
 8014438:	08024dc8 	.word	0x08024dc8
 801443c:	08022d8c 	.word	0x08022d8c

08014440 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8014440:	b590      	push	{r4, r7, lr}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	4a0e      	ldr	r2, [pc, #56]	; (8014484 <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014454:	330c      	adds	r3, #12
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00d      	beq.n	8014478 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014462:	330c      	adds	r3, #12
 8014464:	681c      	ldr	r4, [r3, #0]
 8014466:	2c00      	cmp	r4, #0
 8014468:	d006      	beq.n	8014478 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 801446a:	4620      	mov	r0, r4
 801446c:	f7f5 fbd2 	bl	8009c14 <_ZN11SimpleMutexD1Ev>
 8014470:	2104      	movs	r1, #4
 8014472:	4620      	mov	r0, r4
 8014474:	f7f3 fafc 	bl	8007a70 <_ZdlPvj>
    }
}
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	4618      	mov	r0, r3
 801447c:	370c      	adds	r7, #12
 801447e:	46bd      	mov	sp, r7
 8014480:	bd90      	pop	{r4, r7, pc}
 8014482:	bf00      	nop
 8014484:	08024dc8 	.word	0x08024dc8

08014488 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
 801448e:	6078      	str	r0, [r7, #4]
}
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f7ff ffd5 	bl	8014440 <_ZN18MemoryLeakDetectorD1Ev>
 8014496:	f241 1150 	movw	r1, #4432	; 0x1150
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f7f3 fae8 	bl	8007a70 <_ZdlPvj>
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	4618      	mov	r0, r3
 80144a4:	3708      	adds	r7, #8
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}

080144aa <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 80144aa:	b580      	push	{r7, lr}
 80144ac:	b082      	sub	sp, #8
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	330c      	adds	r3, #12
 80144b6:	4618      	mov	r0, r3
 80144b8:	f7ff fd72 	bl	8013fa0 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	2203      	movs	r2, #3
 80144c0:	721a      	strb	r2, [r3, #8]
}
 80144c2:	bf00      	nop
 80144c4:	3708      	adds	r7, #8
 80144c6:	46bd      	mov	sp, r7
 80144c8:	bd80      	pop	{r7, pc}

080144ca <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80144ca:	b480      	push	{r7}
 80144cc:	b083      	sub	sp, #12
 80144ce:	af00      	add	r7, sp, #0
 80144d0:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2202      	movs	r2, #2
 80144d6:	721a      	strb	r2, [r3, #8]
}
 80144d8:	bf00      	nop
 80144da:	370c      	adds	r7, #12
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr

080144e4 <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2202      	movs	r2, #2
 80144f0:	721a      	strb	r2, [r3, #8]
}
 80144f2:	bf00      	nop
 80144f4:	370c      	adds	r7, #12
 80144f6:	46bd      	mov	sp, r7
 80144f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fc:	4770      	bx	lr

080144fe <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80144fe:	b480      	push	{r7}
 8014500:	b083      	sub	sp, #12
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
    return mutex_;
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801450c:	330c      	adds	r3, #12
 801450e:	681b      	ldr	r3, [r3, #0]
}
 8014510:	4618      	mov	r0, r3
 8014512:	370c      	adds	r7, #12
 8014514:	46bd      	mov	sp, r7
 8014516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801451a:	4770      	bx	lr

0801451c <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 801451c:	b480      	push	{r7}
 801451e:	b083      	sub	sp, #12
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f023 0303 	bic.w	r3, r3, #3
 801452a:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 801452c:	4618      	mov	r0, r3
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr

08014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 8014542:	683b      	ldr	r3, [r7, #0]
 8014544:	3303      	adds	r3, #3
 8014546:	4618      	mov	r0, r3
 8014548:	f7ff ffe8 	bl	801451c <_ZL31calculateVoidPointerAlignedSizej>
 801454c:	4603      	mov	r3, r0
}
 801454e:	4618      	mov	r0, r3
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b084      	sub	sp, #16
 801455a:	af00      	add	r7, sp, #0
 801455c:	60f8      	str	r0, [r7, #12]
 801455e:	60b9      	str	r1, [r7, #8]
 8014560:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 8014562:	6879      	ldr	r1, [r7, #4]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f7ff ffe7 	bl	8014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801456a:	4602      	mov	r2, r0
 801456c:	68bb      	ldr	r3, [r7, #8]
 801456e:	4413      	add	r3, r2
}
 8014570:	4618      	mov	r0, r3
 8014572:	3710      	adds	r7, #16
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08a      	sub	sp, #40	; 0x28
 801457c:	af06      	add	r7, sp, #24
 801457e:	60f8      	str	r0, [r7, #12]
 8014580:	60b9      	str	r1, [r7, #8]
 8014582:	607a      	str	r2, [r7, #4]
 8014584:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801458c:	3304      	adds	r3, #4
 801458e:	681a      	ldr	r2, [r3, #0]
 8014590:	1c51      	adds	r1, r2, #1
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8014598:	3304      	adds	r3, #4
 801459a:	6019      	str	r1, [r3, #0]
 801459c:	68fb      	ldr	r3, [r7, #12]
 801459e:	7a19      	ldrb	r1, [r3, #8]
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80145a6:	3308      	adds	r3, #8
 80145a8:	781b      	ldrb	r3, [r3, #0]
 80145aa:	6a38      	ldr	r0, [r7, #32]
 80145ac:	9004      	str	r0, [sp, #16]
 80145ae:	69f8      	ldr	r0, [r7, #28]
 80145b0:	9003      	str	r0, [sp, #12]
 80145b2:	9302      	str	r3, [sp, #8]
 80145b4:	9101      	str	r1, [sp, #4]
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	9300      	str	r3, [sp, #0]
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	6879      	ldr	r1, [r7, #4]
 80145be:	68b8      	ldr	r0, [r7, #8]
 80145c0:	f7ff fcfb 	bl	8013fba <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80145c4:	68bb      	ldr	r3, [r7, #8]
 80145c6:	689a      	ldr	r2, [r3, #8]
 80145c8:	68bb      	ldr	r3, [r7, #8]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	4413      	add	r3, r2
 80145ce:	4619      	mov	r1, r3
 80145d0:	68f8      	ldr	r0, [r7, #12]
 80145d2:	f000 f861 	bl	8014698 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80145dc:	331c      	adds	r3, #28
 80145de:	68b9      	ldr	r1, [r7, #8]
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7ff fe11 	bl	8014208 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80145e6:	bf00      	nop
 80145e8:	3710      	adds	r7, #16
 80145ea:	46bd      	mov	sp, r7
 80145ec:	bd80      	pop	{r7, pc}

080145ee <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80145ee:	b580      	push	{r7, lr}
 80145f0:	b08a      	sub	sp, #40	; 0x28
 80145f2:	af04      	add	r7, sp, #16
 80145f4:	60f8      	str	r0, [r7, #12]
 80145f6:	60b9      	str	r1, [r7, #8]
 80145f8:	607a      	str	r2, [r7, #4]
 80145fa:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80145fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014600:	9302      	str	r3, [sp, #8]
 8014602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014604:	9301      	str	r3, [sp, #4]
 8014606:	6a3b      	ldr	r3, [r7, #32]
 8014608:	9300      	str	r3, [sp, #0]
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	687a      	ldr	r2, [r7, #4]
 801460e:	68b9      	ldr	r1, [r7, #8]
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f000 f96f 	bl	80148f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014616:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d101      	bne.n	8014622 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 801461e:	2300      	movs	r3, #0
 8014620:	e017      	b.n	8014652 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 8014622:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014626:	9300      	str	r3, [sp, #0]
 8014628:	697b      	ldr	r3, [r7, #20]
 801462a:	683a      	ldr	r2, [r7, #0]
 801462c:	68b9      	ldr	r1, [r7, #8]
 801462e:	68f8      	ldr	r0, [r7, #12]
 8014630:	f000 f98a 	bl	8014948 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 8014634:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 8014636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014638:	9302      	str	r3, [sp, #8]
 801463a:	6a3b      	ldr	r3, [r7, #32]
 801463c:	9301      	str	r3, [sp, #4]
 801463e:	68bb      	ldr	r3, [r7, #8]
 8014640:	9300      	str	r3, [sp, #0]
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	697a      	ldr	r2, [r7, #20]
 8014646:	6939      	ldr	r1, [r7, #16]
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f7ff ff95 	bl	8014578 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	689b      	ldr	r3, [r3, #8]
}
 8014652:	4618      	mov	r0, r3
 8014654:	3718      	adds	r7, #24
 8014656:	46bd      	mov	sp, r7
 8014658:	bd80      	pop	{r7, pc}
	...

0801465c <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 801465c:	b580      	push	{r7, lr}
 801465e:	b084      	sub	sp, #16
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
 8014664:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801466c:	331c      	adds	r3, #28
 801466e:	6839      	ldr	r1, [r7, #0]
 8014670:	4618      	mov	r0, r3
 8014672:	f7ff fdf6 	bl	8014262 <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 8014676:	60f8      	str	r0, [r7, #12]
  if (node)
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d006      	beq.n	801468c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 801467e:	4b05      	ldr	r3, [pc, #20]	; (8014694 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	68fa      	ldr	r2, [r7, #12]
 8014684:	6812      	ldr	r2, [r2, #0]
 8014686:	21cd      	movs	r1, #205	; 0xcd
 8014688:	6838      	ldr	r0, [r7, #0]
 801468a:	4798      	blx	r3
#endif
}
 801468c:	bf00      	nop
 801468e:	3710      	adds	r7, #16
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}
 8014694:	200000d4 	.word	0x200000d4

08014698 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8014698:	b480      	push	{r7}
 801469a:	b085      	sub	sp, #20
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80146a2:	2300      	movs	r3, #0
 80146a4:	60fb      	str	r3, [r7, #12]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	2b02      	cmp	r3, #2
 80146aa:	d812      	bhi.n	80146d2 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80146ac:	68f9      	ldr	r1, [r7, #12]
 80146ae:	4b0c      	ldr	r3, [pc, #48]	; (80146e0 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80146b0:	fba3 2301 	umull	r2, r3, r3, r1
 80146b4:	085a      	lsrs	r2, r3, #1
 80146b6:	4613      	mov	r3, r2
 80146b8:	005b      	lsls	r3, r3, #1
 80146ba:	4413      	add	r3, r2
 80146bc:	1aca      	subs	r2, r1, r3
 80146be:	6839      	ldr	r1, [r7, #0]
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	440b      	add	r3, r1
 80146c4:	4907      	ldr	r1, [pc, #28]	; (80146e4 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80146c6:	5c8a      	ldrb	r2, [r1, r2]
 80146c8:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	3301      	adds	r3, #1
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	e7e9      	b.n	80146a6 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80146d2:	bf00      	nop
 80146d4:	3714      	adds	r7, #20
 80146d6:	46bd      	mov	sp, r7
 80146d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146dc:	4770      	bx	lr
 80146de:	bf00      	nop
 80146e0:	aaaaaaab 	.word	0xaaaaaaab
 80146e4:	08024dbc 	.word	0x08024dbc

080146e8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
 80146f0:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80146f2:	2300      	movs	r3, #0
 80146f4:	60fb      	str	r3, [r7, #12]
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2b02      	cmp	r3, #2
 80146fa:	d816      	bhi.n	801472a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80146fc:	683a      	ldr	r2, [r7, #0]
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	4413      	add	r3, r2
 8014702:	7818      	ldrb	r0, [r3, #0]
 8014704:	68f9      	ldr	r1, [r7, #12]
 8014706:	4b0c      	ldr	r3, [pc, #48]	; (8014738 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8014708:	fba3 2301 	umull	r2, r3, r3, r1
 801470c:	085a      	lsrs	r2, r3, #1
 801470e:	4613      	mov	r3, r2
 8014710:	005b      	lsls	r3, r3, #1
 8014712:	4413      	add	r3, r2
 8014714:	1aca      	subs	r2, r1, r3
 8014716:	4b09      	ldr	r3, [pc, #36]	; (801473c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8014718:	5c9b      	ldrb	r3, [r3, r2]
 801471a:	4298      	cmp	r0, r3
 801471c:	d001      	beq.n	8014722 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 801471e:	2300      	movs	r3, #0
 8014720:	e004      	b.n	801472c <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	3301      	adds	r3, #1
 8014726:	60fb      	str	r3, [r7, #12]
 8014728:	e7e5      	b.n	80146f6 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 801472a:	2301      	movs	r3, #1
}
 801472c:	4618      	mov	r0, r3
 801472e:	3714      	adds	r7, #20
 8014730:	46bd      	mov	sp, r7
 8014732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014736:	4770      	bx	lr
 8014738:	aaaaaaab 	.word	0xaaaaaaab
 801473c:	08024dbc 	.word	0x08024dbc

08014740 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b084      	sub	sp, #16
 8014744:	af00      	add	r7, sp, #0
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	60b9      	str	r1, [r7, #8]
 801474a:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 801474c:	68ba      	ldr	r2, [r7, #8]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	429a      	cmp	r2, r3
 8014752:	d101      	bne.n	8014758 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 8014754:	2301      	movs	r3, #1
 8014756:	e013      	b.n	8014780 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	f083 0301 	eor.w	r3, r3, #1
 8014764:	b2db      	uxtb	r3, r3
 8014766:	2b00      	cmp	r3, #0
 8014768:	d001      	beq.n	801476e <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 801476a:	2301      	movs	r3, #1
 801476c:	e008      	b.n	8014780 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	331c      	adds	r3, #28
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	68b9      	ldr	r1, [r7, #8]
 8014778:	6878      	ldr	r0, [r7, #4]
 801477a:	4798      	blx	r3
 801477c:	4603      	mov	r3, r0
 801477e:	bf00      	nop
}
 8014780:	4618      	mov	r0, r3
 8014782:	3710      	adds	r7, #16
 8014784:	46bd      	mov	sp, r7
 8014786:	bd80      	pop	{r7, pc}

08014788 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8014788:	b590      	push	{r4, r7, lr}
 801478a:	b087      	sub	sp, #28
 801478c:	af02      	add	r7, sp, #8
 801478e:	60f8      	str	r0, [r7, #12]
 8014790:	60b9      	str	r1, [r7, #8]
 8014792:	607a      	str	r2, [r7, #4]
 8014794:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 8014796:	68bb      	ldr	r3, [r7, #8]
 8014798:	695a      	ldr	r2, [r3, #20]
 801479a:	68bb      	ldr	r3, [r7, #8]
 801479c:	695b      	ldr	r3, [r3, #20]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	3328      	adds	r3, #40	; 0x28
 80147a2:	681b      	ldr	r3, [r3, #0]
 80147a4:	4610      	mov	r0, r2
 80147a6:	4798      	blx	r3
 80147a8:	4604      	mov	r4, r0
 80147aa:	6a3b      	ldr	r3, [r7, #32]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	3328      	adds	r3, #40	; 0x28
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	6a38      	ldr	r0, [r7, #32]
 80147b4:	4798      	blx	r3
 80147b6:	4603      	mov	r3, r0
 80147b8:	461a      	mov	r2, r3
 80147ba:	4621      	mov	r1, r4
 80147bc:	68f8      	ldr	r0, [r7, #12]
 80147be:	f7ff ffbf 	bl	8014740 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80147c2:	4603      	mov	r3, r0
 80147c4:	f083 0301 	eor.w	r3, r3, #1
 80147c8:	b2db      	uxtb	r3, r3
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d014      	beq.n	80147f8 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f103 040c 	add.w	r4, r3, #12
 80147d4:	6a3b      	ldr	r3, [r7, #32]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	3328      	adds	r3, #40	; 0x28
 80147da:	681b      	ldr	r3, [r3, #0]
 80147dc:	6a38      	ldr	r0, [r7, #32]
 80147de:	4798      	blx	r3
 80147e0:	4602      	mov	r2, r0
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	685b      	ldr	r3, [r3, #4]
 80147e6:	9301      	str	r3, [sp, #4]
 80147e8:	9200      	str	r2, [sp, #0]
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	687a      	ldr	r2, [r7, #4]
 80147ee:	68b9      	ldr	r1, [r7, #8]
 80147f0:	4620      	mov	r0, r4
 80147f2:	f7ff fb4d 	bl	8013e90 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80147f6:	e02e      	b.n	8014856 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	689a      	ldr	r2, [r3, #8]
 80147fc:	68bb      	ldr	r3, [r7, #8]
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	4413      	add	r3, r2
 8014802:	4619      	mov	r1, r3
 8014804:	68f8      	ldr	r0, [r7, #12]
 8014806:	f7ff ff6f 	bl	80146e8 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 801480a:	4603      	mov	r3, r0
 801480c:	f083 0301 	eor.w	r3, r3, #1
 8014810:	b2db      	uxtb	r3, r3
 8014812:	2b00      	cmp	r3, #0
 8014814:	d014      	beq.n	8014840 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f103 040c 	add.w	r4, r3, #12
 801481c:	6a3b      	ldr	r3, [r7, #32]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	3328      	adds	r3, #40	; 0x28
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	6a38      	ldr	r0, [r7, #32]
 8014826:	4798      	blx	r3
 8014828:	4602      	mov	r2, r0
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	685b      	ldr	r3, [r3, #4]
 801482e:	9301      	str	r3, [sp, #4]
 8014830:	9200      	str	r2, [sp, #0]
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	68b9      	ldr	r1, [r7, #8]
 8014838:	4620      	mov	r0, r4
 801483a:	f7ff fb4f 	bl	8013edc <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 801483e:	e00a      	b.n	8014856 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8014840:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014844:	2b00      	cmp	r3, #0
 8014846:	d006      	beq.n	8014856 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	3324      	adds	r3, #36	; 0x24
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	68b9      	ldr	r1, [r7, #8]
 8014852:	6a38      	ldr	r0, [r7, #32]
 8014854:	4798      	blx	r3
}
 8014856:	bf00      	nop
 8014858:	3714      	adds	r7, #20
 801485a:	46bd      	mov	sp, r7
 801485c:	bd90      	pop	{r4, r7, pc}
	...

08014860 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b086      	sub	sp, #24
 8014864:	af02      	add	r7, sp, #8
 8014866:	60f8      	str	r0, [r7, #12]
 8014868:	60b9      	str	r1, [r7, #8]
 801486a:	607a      	str	r2, [r7, #4]
 801486c:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 801486e:	4b08      	ldr	r3, [pc, #32]	; (8014890 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	78fb      	ldrb	r3, [r7, #3]
 8014874:	9301      	str	r3, [sp, #4]
 8014876:	2300      	movs	r3, #0
 8014878:	9300      	str	r3, [sp, #0]
 801487a:	4613      	mov	r3, r2
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	68b9      	ldr	r1, [r7, #8]
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f000 f87f 	bl	8014984 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8014886:	4603      	mov	r3, r0
}
 8014888:	4618      	mov	r0, r3
 801488a:	3710      	adds	r7, #16
 801488c:	46bd      	mov	sp, r7
 801488e:	bd80      	pop	{r7, pc}
 8014890:	200000fc 	.word	0x200000fc

08014894 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014894:	b590      	push	{r4, r7, lr}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
 80148a0:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 80148a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d00e      	beq.n	80148c8 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80148aa:	68bb      	ldr	r3, [r7, #8]
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	3308      	adds	r3, #8
 80148b0:	681c      	ldr	r4, [r3, #0]
 80148b2:	6879      	ldr	r1, [r7, #4]
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f7ff fe3f 	bl	8014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80148ba:	4601      	mov	r1, r0
 80148bc:	6a3b      	ldr	r3, [r7, #32]
 80148be:	683a      	ldr	r2, [r7, #0]
 80148c0:	68b8      	ldr	r0, [r7, #8]
 80148c2:	47a0      	blx	r4
 80148c4:	4603      	mov	r3, r0
 80148c6:	e010      	b.n	80148ea <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	3308      	adds	r3, #8
 80148ce:	681c      	ldr	r4, [r3, #0]
 80148d0:	6879      	ldr	r1, [r7, #4]
 80148d2:	68f8      	ldr	r0, [r7, #12]
 80148d4:	f7ff fe30 	bl	8014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80148d8:	4603      	mov	r3, r0
 80148da:	f103 0120 	add.w	r1, r3, #32
 80148de:	6a3b      	ldr	r3, [r7, #32]
 80148e0:	683a      	ldr	r2, [r7, #0]
 80148e2:	68b8      	ldr	r0, [r7, #8]
 80148e4:	47a0      	blx	r4
 80148e6:	4603      	mov	r3, r0
 80148e8:	bf00      	nop
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3714      	adds	r7, #20
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd90      	pop	{r4, r7, pc}
	...

080148f4 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80148f4:	b590      	push	{r4, r7, lr}
 80148f6:	b085      	sub	sp, #20
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	60f8      	str	r0, [r7, #12]
 80148fc:	60b9      	str	r1, [r7, #8]
 80148fe:	607a      	str	r2, [r7, #4]
 8014900:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 8014902:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014906:	2b00      	cmp	r3, #0
 8014908:	d00b      	beq.n	8014922 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 801490a:	4b0e      	ldr	r3, [pc, #56]	; (8014944 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801490c:	681c      	ldr	r4, [r3, #0]
 801490e:	6839      	ldr	r1, [r7, #0]
 8014910:	68f8      	ldr	r0, [r7, #12]
 8014912:	f7ff fe11 	bl	8014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8014916:	4603      	mov	r3, r0
 8014918:	4619      	mov	r1, r3
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	47a0      	blx	r4
 801491e:	4603      	mov	r3, r0
 8014920:	e00c      	b.n	801493c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 8014922:	4b08      	ldr	r3, [pc, #32]	; (8014944 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8014924:	681c      	ldr	r4, [r3, #0]
 8014926:	6839      	ldr	r1, [r7, #0]
 8014928:	68f8      	ldr	r0, [r7, #12]
 801492a:	f7ff fe05 	bl	8014538 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801492e:	4603      	mov	r3, r0
 8014930:	3320      	adds	r3, #32
 8014932:	4619      	mov	r1, r3
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	47a0      	blx	r4
 8014938:	4603      	mov	r3, r0
 801493a:	bf00      	nop
}
 801493c:	4618      	mov	r0, r3
 801493e:	3714      	adds	r7, #20
 8014940:	46bd      	mov	sp, r7
 8014942:	bd90      	pop	{r4, r7, pc}
 8014944:	200000c8 	.word	0x200000c8

08014948 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8014948:	b580      	push	{r7, lr}
 801494a:	b084      	sub	sp, #16
 801494c:	af00      	add	r7, sp, #0
 801494e:	60f8      	str	r0, [r7, #12]
 8014950:	60b9      	str	r1, [r7, #8]
 8014952:	607a      	str	r2, [r7, #4]
 8014954:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 8014956:	7e3b      	ldrb	r3, [r7, #24]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d008      	beq.n	801496e <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	3320      	adds	r3, #32
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	2120      	movs	r1, #32
 8014966:	68b8      	ldr	r0, [r7, #8]
 8014968:	4798      	blx	r3
 801496a:	4603      	mov	r3, r0
 801496c:	e006      	b.n	801497c <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	6839      	ldr	r1, [r7, #0]
 8014972:	68f8      	ldr	r0, [r7, #12]
 8014974:	f7ff fdef 	bl	8014556 <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8014978:	4603      	mov	r3, r0
 801497a:	bf00      	nop
}
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}

08014984 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014984:	b580      	push	{r7, lr}
 8014986:	b08a      	sub	sp, #40	; 0x28
 8014988:	af04      	add	r7, sp, #16
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
 8014990:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 8014992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014996:	9301      	str	r3, [sp, #4]
 8014998:	6a3b      	ldr	r3, [r7, #32]
 801499a:	9300      	str	r3, [sp, #0]
 801499c:	683b      	ldr	r3, [r7, #0]
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	68b9      	ldr	r1, [r7, #8]
 80149a2:	68f8      	ldr	r0, [r7, #12]
 80149a4:	f7ff ff76 	bl	8014894 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80149a8:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80149aa:	697b      	ldr	r3, [r7, #20]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d101      	bne.n	80149b4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80149b0:	2300      	movs	r3, #0
 80149b2:	e017      	b.n	80149e4 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80149b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149b8:	9300      	str	r3, [sp, #0]
 80149ba:	697b      	ldr	r3, [r7, #20]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	68b9      	ldr	r1, [r7, #8]
 80149c0:	68f8      	ldr	r0, [r7, #12]
 80149c2:	f7ff ffc1 	bl	8014948 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80149c6:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80149c8:	6a3b      	ldr	r3, [r7, #32]
 80149ca:	9302      	str	r3, [sp, #8]
 80149cc:	683b      	ldr	r3, [r7, #0]
 80149ce:	9301      	str	r3, [sp, #4]
 80149d0:	68bb      	ldr	r3, [r7, #8]
 80149d2:	9300      	str	r3, [sp, #0]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	697a      	ldr	r2, [r7, #20]
 80149d8:	6939      	ldr	r1, [r7, #16]
 80149da:	68f8      	ldr	r0, [r7, #12]
 80149dc:	f7ff fdcc 	bl	8014578 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	689b      	ldr	r3, [r3, #8]
}
 80149e4:	4618      	mov	r0, r3
 80149e6:	3718      	adds	r7, #24
 80149e8:	46bd      	mov	sp, r7
 80149ea:	bd80      	pop	{r7, pc}

080149ec <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80149ec:	b590      	push	{r4, r7, lr}
 80149ee:	b089      	sub	sp, #36	; 0x24
 80149f0:	af02      	add	r7, sp, #8
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
 80149f8:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d03a      	beq.n	8014a76 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a06:	331c      	adds	r3, #28
 8014a08:	6879      	ldr	r1, [r7, #4]
 8014a0a:	4618      	mov	r0, r3
 8014a0c:	f7ff fc13 	bl	8014236 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8014a10:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d10b      	bne.n	8014a30 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	f103 000c 	add.w	r0, r3, #12
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	9300      	str	r3, [sp, #0]
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a28:	6839      	ldr	r1, [r7, #0]
 8014a2a:	f7ff fa0d 	bl	8013e48 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8014a2e:	e023      	b.n	8014a78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8014a30:	68b8      	ldr	r0, [r7, #8]
 8014a32:	f7f8 ff95 	bl	800d960 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 8014a36:	4603      	mov	r3, r0
 8014a38:	f083 0301 	eor.w	r3, r3, #1
 8014a3c:	b2db      	uxtb	r3, r3
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d01a      	beq.n	8014a78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 8014a42:	697b      	ldr	r3, [r7, #20]
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014a48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014a4c:	9301      	str	r3, [sp, #4]
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	9300      	str	r3, [sp, #0]
 8014a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a54:	683a      	ldr	r2, [r7, #0]
 8014a56:	6979      	ldr	r1, [r7, #20]
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f7ff fe95 	bl	8014788 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	330c      	adds	r3, #12
 8014a64:	681c      	ldr	r4, [r3, #0]
 8014a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a68:	9300      	str	r3, [sp, #0]
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	693a      	ldr	r2, [r7, #16]
 8014a6e:	6879      	ldr	r1, [r7, #4]
 8014a70:	68b8      	ldr	r0, [r7, #8]
 8014a72:	47a0      	blx	r4
 8014a74:	e000      	b.n	8014a78 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 8014a76:	bf00      	nop
    }
}
 8014a78:	371c      	adds	r7, #28
 8014a7a:	46bd      	mov	sp, r7
 8014a7c:	bd90      	pop	{r4, r7, pc}
	...

08014a80 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b086      	sub	sp, #24
 8014a84:	af02      	add	r7, sp, #8
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	607a      	str	r2, [r7, #4]
 8014a8c:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8014a8e:	4b08      	ldr	r3, [pc, #32]	; (8014ab0 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	78fb      	ldrb	r3, [r7, #3]
 8014a94:	9301      	str	r3, [sp, #4]
 8014a96:	2300      	movs	r3, #0
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	4613      	mov	r3, r2
 8014a9c:	687a      	ldr	r2, [r7, #4]
 8014a9e:	68b9      	ldr	r1, [r7, #8]
 8014aa0:	68f8      	ldr	r0, [r7, #12]
 8014aa2:	f7ff ffa3 	bl	80149ec <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8014aa6:	bf00      	nop
 8014aa8:	3710      	adds	r7, #16
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	200000fc 	.word	0x200000fc

08014ab4 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b08a      	sub	sp, #40	; 0x28
 8014ab8:	af04      	add	r7, sp, #16
 8014aba:	60f8      	str	r0, [r7, #12]
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d023      	beq.n	8014b10 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014ace:	331c      	adds	r3, #28
 8014ad0:	6879      	ldr	r1, [r7, #4]
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	f7ff fbaf 	bl	8014236 <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8014ad8:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 8014ada:	697b      	ldr	r3, [r7, #20]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d10c      	bne.n	8014afa <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f103 000c 	add.w	r0, r3, #12
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	685b      	ldr	r3, [r3, #4]
 8014aea:	9300      	str	r3, [sp, #0]
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014af0:	6a39      	ldr	r1, [r7, #32]
 8014af2:	f7ff f9a9 	bl	8013e48 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 8014af6:	2300      	movs	r3, #0
 8014af8:	e019      	b.n	8014b2e <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8014afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014afe:	9301      	str	r3, [sp, #4]
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	9300      	str	r3, [sp, #0]
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	6a3a      	ldr	r2, [r7, #32]
 8014b08:	6979      	ldr	r1, [r7, #20]
 8014b0a:	68f8      	ldr	r0, [r7, #12]
 8014b0c:	f7ff fe3c 	bl	8014788 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8014b10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014b14:	9302      	str	r3, [sp, #8]
 8014b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b18:	9301      	str	r3, [sp, #4]
 8014b1a:	6a3b      	ldr	r3, [r7, #32]
 8014b1c:	9300      	str	r3, [sp, #0]
 8014b1e:	683b      	ldr	r3, [r7, #0]
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	68b9      	ldr	r1, [r7, #8]
 8014b24:	68f8      	ldr	r0, [r7, #12]
 8014b26:	f7ff fd62 	bl	80145ee <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	bf00      	nop
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	3718      	adds	r7, #24
 8014b32:	46bd      	mov	sp, r7
 8014b34:	bd80      	pop	{r7, pc}

08014b36 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8014b36:	b580      	push	{r7, lr}
 8014b38:	b084      	sub	sp, #16
 8014b3a:	af00      	add	r7, sp, #0
 8014b3c:	6078      	str	r0, [r7, #4]
 8014b3e:	460b      	mov	r3, r1
 8014b40:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b48:	331c      	adds	r3, #28
 8014b4a:	78fa      	ldrb	r2, [r7, #3]
 8014b4c:	4611      	mov	r1, r2
 8014b4e:	4618      	mov	r0, r3
 8014b50:	f7ff fbc0 	bl	80142d4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014b54:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	330c      	adds	r3, #12
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7ff f882 	bl	8013c64 <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d010      	beq.n	8014b88 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	330c      	adds	r3, #12
 8014b6a:	68f9      	ldr	r1, [r7, #12]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7ff f897 	bl	8013ca0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014b78:	331c      	adds	r3, #28
 8014b7a:	78fa      	ldrb	r2, [r7, #3]
 8014b7c:	68f9      	ldr	r1, [r7, #12]
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7ff fbcb 	bl	801431a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014b84:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014b86:	e7eb      	b.n	8014b60 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	330c      	adds	r3, #12
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f7ff f8e7 	bl	8013d60 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8014b92:	bf00      	nop
 8014b94:	3710      	adds	r7, #16
 8014b96:	46bd      	mov	sp, r7
 8014b98:	bd80      	pop	{r7, pc}

08014b9a <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8014b9a:	b580      	push	{r7, lr}
 8014b9c:	b082      	sub	sp, #8
 8014b9e:	af00      	add	r7, sp, #0
 8014ba0:	6078      	str	r0, [r7, #4]
 8014ba2:	460b      	mov	r3, r1
 8014ba4:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8014ba6:	78fb      	ldrb	r3, [r7, #3]
 8014ba8:	4619      	mov	r1, r3
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7ff ffc3 	bl	8014b36 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	330c      	adds	r3, #12
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f7ff f9e5 	bl	8013f84 <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8014bba:	4603      	mov	r3, r0
}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}

08014bc4 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	b084      	sub	sp, #16
 8014bc8:	af00      	add	r7, sp, #0
 8014bca:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bd2:	331c      	adds	r3, #28
 8014bd4:	2103      	movs	r1, #3
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7ff fb7c 	bl	80142d4 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8014bdc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d011      	beq.n	8014c08 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	7e1b      	ldrb	r3, [r3, #24]
 8014be8:	2b03      	cmp	r3, #3
 8014bea:	d102      	bne.n	8014bf2 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2202      	movs	r2, #2
 8014bf0:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014bf8:	331c      	adds	r3, #28
 8014bfa:	2203      	movs	r2, #3
 8014bfc:	68f9      	ldr	r1, [r7, #12]
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f7ff fb8b 	bl	801431a <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8014c04:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8014c06:	e7ea      	b.n	8014bde <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8014c08:	bf00      	nop
 8014c0a:	3710      	adds	r7, #16
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b082      	sub	sp, #8
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	460b      	mov	r3, r1
 8014c1a:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014c22:	331c      	adds	r3, #28
 8014c24:	78fa      	ldrb	r2, [r7, #3]
 8014c26:	4611      	mov	r1, r2
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f7ff fb30 	bl	801428e <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8014c2e:	4603      	mov	r3, r0
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	3708      	adds	r7, #8
 8014c34:	46bd      	mov	sp, r7
 8014c36:	bd80      	pop	{r7, pc}

08014c38 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>:
        SimpleString name_;
        SimpleString type_;
        void* ptr_;

        MockOutputParametersListNode* next_;
        MockOutputParametersListNode(const SimpleString& name, const SimpleString& type, void* ptr)
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b084      	sub	sp, #16
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
 8014c44:	603b      	str	r3, [r7, #0]
            : name_(name), type_(type), ptr_(ptr), next_(NULLPTR) {}
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	68b9      	ldr	r1, [r7, #8]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	f7f5 fb13 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	3308      	adds	r3, #8
 8014c54:	6879      	ldr	r1, [r7, #4]
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7f5 fb0d 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	611a      	str	r2, [r3, #16]
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	2200      	movs	r2, #0
 8014c66:	615a      	str	r2, [r3, #20]
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	4618      	mov	r0, r3
 8014c6c:	3710      	adds	r7, #16
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	bd80      	pop	{r7, pc}

08014c72 <_ZN21MockIgnoredActualCall8withNameERK12SimpleString>:
};

class MockIgnoredActualCall: public MockActualCall
{
public:
    virtual MockActualCall& withName(const SimpleString&) _override { return *this;}
 8014c72:	b480      	push	{r7}
 8014c74:	b083      	sub	sp, #12
 8014c76:	af00      	add	r7, sp, #0
 8014c78:	6078      	str	r0, [r7, #4]
 8014c7a:	6039      	str	r1, [r7, #0]
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	4618      	mov	r0, r3
 8014c80:	370c      	adds	r7, #12
 8014c82:	46bd      	mov	sp, r7
 8014c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c88:	4770      	bx	lr

08014c8a <_ZN21MockIgnoredActualCall13withCallOrderEj>:
    virtual MockActualCall& withCallOrder(unsigned int) _override { return *this; }
 8014c8a:	b480      	push	{r7}
 8014c8c:	b083      	sub	sp, #12
 8014c8e:	af00      	add	r7, sp, #0
 8014c90:	6078      	str	r0, [r7, #4]
 8014c92:	6039      	str	r1, [r7, #0]
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	4618      	mov	r0, r3
 8014c98:	370c      	adds	r7, #12
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca0:	4770      	bx	lr

08014ca2 <_ZN21MockIgnoredActualCall17withBoolParameterERK12SimpleStringb>:
    virtual MockActualCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8014ca2:	b480      	push	{r7}
 8014ca4:	b085      	sub	sp, #20
 8014ca6:	af00      	add	r7, sp, #0
 8014ca8:	60f8      	str	r0, [r7, #12]
 8014caa:	60b9      	str	r1, [r7, #8]
 8014cac:	4613      	mov	r3, r2
 8014cae:	71fb      	strb	r3, [r7, #7]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3714      	adds	r7, #20
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cbc:	4770      	bx	lr

08014cbe <_ZN21MockIgnoredActualCall16withIntParameterERK12SimpleStringi>:
    virtual MockActualCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 8014cbe:	b480      	push	{r7}
 8014cc0:	b085      	sub	sp, #20
 8014cc2:	af00      	add	r7, sp, #0
 8014cc4:	60f8      	str	r0, [r7, #12]
 8014cc6:	60b9      	str	r1, [r7, #8]
 8014cc8:	607a      	str	r2, [r7, #4]
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3714      	adds	r7, #20
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd6:	4770      	bx	lr

08014cd8 <_ZN21MockIgnoredActualCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockActualCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override { return *this; }
 8014cd8:	b480      	push	{r7}
 8014cda:	b085      	sub	sp, #20
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	60f8      	str	r0, [r7, #12]
 8014ce0:	60b9      	str	r1, [r7, #8]
 8014ce2:	607a      	str	r2, [r7, #4]
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	4618      	mov	r0, r3
 8014ce8:	3714      	adds	r7, #20
 8014cea:	46bd      	mov	sp, r7
 8014cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf0:	4770      	bx	lr

08014cf2 <_ZN21MockIgnoredActualCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockActualCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 8014cf2:	b480      	push	{r7}
 8014cf4:	b085      	sub	sp, #20
 8014cf6:	af00      	add	r7, sp, #0
 8014cf8:	60f8      	str	r0, [r7, #12]
 8014cfa:	60b9      	str	r1, [r7, #8]
 8014cfc:	607a      	str	r2, [r7, #4]
 8014cfe:	68fb      	ldr	r3, [r7, #12]
 8014d00:	4618      	mov	r0, r3
 8014d02:	3714      	adds	r7, #20
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <_ZN21MockIgnoredActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockActualCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 8014d0c:	b480      	push	{r7}
 8014d0e:	b085      	sub	sp, #20
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	60b9      	str	r1, [r7, #8]
 8014d16:	607a      	str	r2, [r7, #4]
 8014d18:	68fb      	ldr	r3, [r7, #12]
 8014d1a:	4618      	mov	r0, r3
 8014d1c:	3714      	adds	r7, #20
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <_ZN21MockIgnoredActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockActualCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 8014d26:	b480      	push	{r7}
 8014d28:	b085      	sub	sp, #20
 8014d2a:	af00      	add	r7, sp, #0
 8014d2c:	60f8      	str	r0, [r7, #12]
 8014d2e:	60b9      	str	r1, [r7, #8]
 8014d30:	4639      	mov	r1, r7
 8014d32:	e881 000c 	stmia.w	r1, {r2, r3}
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3714      	adds	r7, #20
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr

08014d44 <_ZN21MockIgnoredActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockActualCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 8014d44:	b480      	push	{r7}
 8014d46:	b085      	sub	sp, #20
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	60f8      	str	r0, [r7, #12]
 8014d4c:	60b9      	str	r1, [r7, #8]
 8014d4e:	4639      	mov	r1, r7
 8014d50:	e881 000c 	stmia.w	r1, {r2, r3}
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	4618      	mov	r0, r3
 8014d58:	3714      	adds	r7, #20
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <_ZN21MockIgnoredActualCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockActualCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8014d62:	b480      	push	{r7}
 8014d64:	b085      	sub	sp, #20
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	60f8      	str	r0, [r7, #12]
 8014d6a:	60b9      	str	r1, [r7, #8]
 8014d6c:	ed87 0b00 	vstr	d0, [r7]
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	4618      	mov	r0, r3
 8014d74:	3714      	adds	r7, #20
 8014d76:	46bd      	mov	sp, r7
 8014d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d7c:	4770      	bx	lr

08014d7e <_ZN21MockIgnoredActualCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockActualCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 8014d7e:	b480      	push	{r7}
 8014d80:	b085      	sub	sp, #20
 8014d82:	af00      	add	r7, sp, #0
 8014d84:	60f8      	str	r0, [r7, #12]
 8014d86:	60b9      	str	r1, [r7, #8]
 8014d88:	607a      	str	r2, [r7, #4]
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	3714      	adds	r7, #20
 8014d90:	46bd      	mov	sp, r7
 8014d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d96:	4770      	bx	lr

08014d98 <_ZN21MockIgnoredActualCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockActualCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8014d98:	b480      	push	{r7}
 8014d9a:	b085      	sub	sp, #20
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	60f8      	str	r0, [r7, #12]
 8014da0:	60b9      	str	r1, [r7, #8]
 8014da2:	607a      	str	r2, [r7, #4]
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	4618      	mov	r0, r3
 8014da8:	3714      	adds	r7, #20
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr

08014db2 <_ZN21MockIgnoredActualCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockActualCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8014db2:	b480      	push	{r7}
 8014db4:	b085      	sub	sp, #20
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	60f8      	str	r0, [r7, #12]
 8014dba:	60b9      	str	r1, [r7, #8]
 8014dbc:	607a      	str	r2, [r7, #4]
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	3714      	adds	r7, #20
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <_ZN21MockIgnoredActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockActualCall& withFunctionPointerParameter(const SimpleString& , void (*)()) _override { return *this; }
 8014dcc:	b480      	push	{r7}
 8014dce:	b085      	sub	sp, #20
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	60f8      	str	r0, [r7, #12]
 8014dd4:	60b9      	str	r1, [r7, #8]
 8014dd6:	607a      	str	r2, [r7, #4]
 8014dd8:	68fb      	ldr	r3, [r7, #12]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3714      	adds	r7, #20
 8014dde:	46bd      	mov	sp, r7
 8014de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de4:	4770      	bx	lr

08014de6 <_ZN21MockIgnoredActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockActualCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override  { return *this; }
 8014de6:	b480      	push	{r7}
 8014de8:	b085      	sub	sp, #20
 8014dea:	af00      	add	r7, sp, #0
 8014dec:	60f8      	str	r0, [r7, #12]
 8014dee:	60b9      	str	r1, [r7, #8]
 8014df0:	607a      	str	r2, [r7, #4]
 8014df2:	603b      	str	r3, [r7, #0]
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	4618      	mov	r0, r3
 8014df8:	3714      	adds	r7, #20
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr

08014e02 <_ZN21MockIgnoredActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockActualCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 8014e02:	b480      	push	{r7}
 8014e04:	b085      	sub	sp, #20
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	60f8      	str	r0, [r7, #12]
 8014e0a:	60b9      	str	r1, [r7, #8]
 8014e0c:	607a      	str	r2, [r7, #4]
 8014e0e:	603b      	str	r3, [r7, #0]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	4618      	mov	r0, r3
 8014e14:	3714      	adds	r7, #20
 8014e16:	46bd      	mov	sp, r7
 8014e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1c:	4770      	bx	lr

08014e1e <_ZN21MockIgnoredActualCall19withOutputParameterERK12SimpleStringPv>:
    virtual MockActualCall& withOutputParameter(const SimpleString&, void*) _override { return *this; }
 8014e1e:	b480      	push	{r7}
 8014e20:	b085      	sub	sp, #20
 8014e22:	af00      	add	r7, sp, #0
 8014e24:	60f8      	str	r0, [r7, #12]
 8014e26:	60b9      	str	r1, [r7, #8]
 8014e28:	607a      	str	r2, [r7, #4]
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3714      	adds	r7, #20
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <_ZN21MockIgnoredActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:
    virtual MockActualCall& withOutputParameterOfType(const SimpleString&, const SimpleString&, void*) _override { return *this; }
 8014e38:	b480      	push	{r7}
 8014e3a:	b085      	sub	sp, #20
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	60f8      	str	r0, [r7, #12]
 8014e40:	60b9      	str	r1, [r7, #8]
 8014e42:	607a      	str	r2, [r7, #4]
 8014e44:	603b      	str	r3, [r7, #0]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	4618      	mov	r0, r3
 8014e4a:	3714      	adds	r7, #20
 8014e4c:	46bd      	mov	sp, r7
 8014e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e52:	4770      	bx	lr

08014e54 <_ZN21MockIgnoredActualCall14hasReturnValueEv>:

    virtual bool hasReturnValue() _override { return false; }
 8014e54:	b480      	push	{r7}
 8014e56:	b083      	sub	sp, #12
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	4618      	mov	r0, r3
 8014e60:	370c      	adds	r7, #12
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr
	...

08014e6c <_ZN21MockIgnoredActualCall11returnValueEv>:
    virtual MockNamedValue returnValue() _override { return MockNamedValue(""); }
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b084      	sub	sp, #16
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
 8014e76:	f107 0308 	add.w	r3, r7, #8
 8014e7a:	4909      	ldr	r1, [pc, #36]	; (8014ea0 <_ZN21MockIgnoredActualCall11returnValueEv+0x34>)
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f5 f9a6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8014e82:	f107 0308 	add.w	r3, r7, #8
 8014e86:	4619      	mov	r1, r3
 8014e88:	6878      	ldr	r0, [r7, #4]
 8014e8a:	f005 fec5 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8014e8e:	f107 0308 	add.w	r3, r7, #8
 8014e92:	4618      	mov	r0, r3
 8014e94:	f7f5 fd53 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	3710      	adds	r7, #16
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}
 8014ea0:	08022dac 	.word	0x08022dac

08014ea4 <_ZN21MockIgnoredActualCall24returnBoolValueOrDefaultEb>:

    virtual bool returnBoolValueOrDefault(bool value) _override { return value; }
 8014ea4:	b480      	push	{r7}
 8014ea6:	b083      	sub	sp, #12
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
 8014eac:	460b      	mov	r3, r1
 8014eae:	70fb      	strb	r3, [r7, #3]
 8014eb0:	78fb      	ldrb	r3, [r7, #3]
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	370c      	adds	r7, #12
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ebc:	4770      	bx	lr

08014ebe <_ZN21MockIgnoredActualCall15returnBoolValueEv>:
    virtual bool returnBoolValue() _override { return false; }
 8014ebe:	b480      	push	{r7}
 8014ec0:	b083      	sub	sp, #12
 8014ec2:	af00      	add	r7, sp, #0
 8014ec4:	6078      	str	r0, [r7, #4]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	4618      	mov	r0, r3
 8014eca:	370c      	adds	r7, #12
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed2:	4770      	bx	lr

08014ed4 <_ZN21MockIgnoredActualCall14returnIntValueEv>:

    virtual int returnIntValue() _override { return 0; }
 8014ed4:	b480      	push	{r7}
 8014ed6:	b083      	sub	sp, #12
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	2300      	movs	r3, #0
 8014ede:	4618      	mov	r0, r3
 8014ee0:	370c      	adds	r7, #12
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee8:	4770      	bx	lr

08014eea <_ZN21MockIgnoredActualCall23returnIntValueOrDefaultEi>:
    virtual int returnIntValueOrDefault(int value) _override { return value; }
 8014eea:	b480      	push	{r7}
 8014eec:	b083      	sub	sp, #12
 8014eee:	af00      	add	r7, sp, #0
 8014ef0:	6078      	str	r0, [r7, #4]
 8014ef2:	6039      	str	r1, [r7, #0]
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	370c      	adds	r7, #12
 8014efa:	46bd      	mov	sp, r7
 8014efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f00:	4770      	bx	lr

08014f02 <_ZN21MockIgnoredActualCall26returnUnsignedLongIntValueEv>:

    virtual unsigned long int returnUnsignedLongIntValue() _override { return 0; }
 8014f02:	b480      	push	{r7}
 8014f04:	b083      	sub	sp, #12
 8014f06:	af00      	add	r7, sp, #0
 8014f08:	6078      	str	r0, [r7, #4]
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	4618      	mov	r0, r3
 8014f0e:	370c      	adds	r7, #12
 8014f10:	46bd      	mov	sp, r7
 8014f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f16:	4770      	bx	lr

08014f18 <_ZN21MockIgnoredActualCall35returnUnsignedLongIntValueOrDefaultEm>:
    virtual unsigned long int returnUnsignedLongIntValueOrDefault(unsigned long int value) _override { return value; }
 8014f18:	b480      	push	{r7}
 8014f1a:	b083      	sub	sp, #12
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
 8014f20:	6039      	str	r1, [r7, #0]
 8014f22:	683b      	ldr	r3, [r7, #0]
 8014f24:	4618      	mov	r0, r3
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr

08014f30 <_ZN21MockIgnoredActualCall18returnLongIntValueEv>:

    virtual long int returnLongIntValue() _override { return 0; }
 8014f30:	b480      	push	{r7}
 8014f32:	b083      	sub	sp, #12
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	2300      	movs	r3, #0
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	370c      	adds	r7, #12
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr

08014f46 <_ZN21MockIgnoredActualCall27returnLongIntValueOrDefaultEl>:
    virtual long int returnLongIntValueOrDefault(long int value) _override { return value; }
 8014f46:	b480      	push	{r7}
 8014f48:	b083      	sub	sp, #12
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	6039      	str	r1, [r7, #0]
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	4618      	mov	r0, r3
 8014f54:	370c      	adds	r7, #12
 8014f56:	46bd      	mov	sp, r7
 8014f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5c:	4770      	bx	lr

08014f5e <_ZN21MockIgnoredActualCall30returnUnsignedLongLongIntValueEv>:

    virtual cpputest_ulonglong returnUnsignedLongLongIntValue() _override { return 0; }
 8014f5e:	b580      	push	{r7, lr}
 8014f60:	b082      	sub	sp, #8
 8014f62:	af00      	add	r7, sp, #0
 8014f64:	6078      	str	r0, [r7, #4]
 8014f66:	6039      	str	r1, [r7, #0]
 8014f68:	2100      	movs	r1, #0
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f7f3 f972 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
 8014f70:	6878      	ldr	r0, [r7, #4]
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <_ZN21MockIgnoredActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:
    virtual cpputest_ulonglong returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong value) _override { return value; }
 8014f78:	b480      	push	{r7}
 8014f7a:	b085      	sub	sp, #20
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	4639      	mov	r1, r7
 8014f84:	e881 000c 	stmia.w	r1, {r2, r3}
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	461a      	mov	r2, r3
 8014f8c:	463b      	mov	r3, r7
 8014f8e:	cb03      	ldmia	r3!, {r0, r1}
 8014f90:	6010      	str	r0, [r2, #0]
 8014f92:	6051      	str	r1, [r2, #4]
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	3714      	adds	r7, #20
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f9e:	4770      	bx	lr

08014fa0 <_ZN21MockIgnoredActualCall22returnLongLongIntValueEv>:

    virtual cpputest_longlong returnLongLongIntValue() _override { return 0; }
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
 8014faa:	2100      	movs	r1, #0
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f7f3 f945 	bl	800823c <_ZN17cpputest_longlongC1Ei>
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	46bd      	mov	sp, r7
 8014fb8:	bd80      	pop	{r7, pc}

08014fba <_ZN21MockIgnoredActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:
    virtual cpputest_longlong returnLongLongIntValueOrDefault(cpputest_longlong value) _override { return value; }
 8014fba:	b480      	push	{r7}
 8014fbc:	b085      	sub	sp, #20
 8014fbe:	af00      	add	r7, sp, #0
 8014fc0:	60f8      	str	r0, [r7, #12]
 8014fc2:	60b9      	str	r1, [r7, #8]
 8014fc4:	4639      	mov	r1, r7
 8014fc6:	e881 000c 	stmia.w	r1, {r2, r3}
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	461a      	mov	r2, r3
 8014fce:	463b      	mov	r3, r7
 8014fd0:	cb03      	ldmia	r3!, {r0, r1}
 8014fd2:	6010      	str	r0, [r2, #0]
 8014fd4:	6051      	str	r1, [r2, #4]
 8014fd6:	68f8      	ldr	r0, [r7, #12]
 8014fd8:	3714      	adds	r7, #20
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe0:	4770      	bx	lr

08014fe2 <_ZN21MockIgnoredActualCall22returnUnsignedIntValueEv>:

    virtual unsigned int returnUnsignedIntValue() _override { return 0; }
 8014fe2:	b480      	push	{r7}
 8014fe4:	b083      	sub	sp, #12
 8014fe6:	af00      	add	r7, sp, #0
 8014fe8:	6078      	str	r0, [r7, #4]
 8014fea:	2300      	movs	r3, #0
 8014fec:	4618      	mov	r0, r3
 8014fee:	370c      	adds	r7, #12
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff6:	4770      	bx	lr

08014ff8 <_ZN21MockIgnoredActualCall31returnUnsignedIntValueOrDefaultEj>:
    virtual unsigned int returnUnsignedIntValueOrDefault(unsigned int value) _override { return value; }
 8014ff8:	b480      	push	{r7}
 8014ffa:	b083      	sub	sp, #12
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
 8015000:	6039      	str	r1, [r7, #0]
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	4618      	mov	r0, r3
 8015006:	370c      	adds	r7, #12
 8015008:	46bd      	mov	sp, r7
 801500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801500e:	4770      	bx	lr

08015010 <_ZN21MockIgnoredActualCall17returnDoubleValueEv>:

    virtual double returnDoubleValue() _override { return 0.0; }
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
 8015018:	f04f 0200 	mov.w	r2, #0
 801501c:	f04f 0300 	mov.w	r3, #0
 8015020:	ec43 2b17 	vmov	d7, r2, r3
 8015024:	eeb0 0a47 	vmov.f32	s0, s14
 8015028:	eef0 0a67 	vmov.f32	s1, s15
 801502c:	370c      	adds	r7, #12
 801502e:	46bd      	mov	sp, r7
 8015030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015034:	4770      	bx	lr

08015036 <_ZN21MockIgnoredActualCall26returnDoubleValueOrDefaultEd>:
    virtual double returnDoubleValueOrDefault(double value) _override { return value; }
 8015036:	b480      	push	{r7}
 8015038:	b085      	sub	sp, #20
 801503a:	af00      	add	r7, sp, #0
 801503c:	60f8      	str	r0, [r7, #12]
 801503e:	ed87 0b00 	vstr	d0, [r7]
 8015042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015046:	ec43 2b17 	vmov	d7, r2, r3
 801504a:	eeb0 0a47 	vmov.f32	s0, s14
 801504e:	eef0 0a67 	vmov.f32	s1, s15
 8015052:	3714      	adds	r7, #20
 8015054:	46bd      	mov	sp, r7
 8015056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801505a:	4770      	bx	lr

0801505c <_ZN21MockIgnoredActualCall17returnStringValueEv>:

    virtual const char * returnStringValue() _override { return ""; }
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
 8015064:	4b03      	ldr	r3, [pc, #12]	; (8015074 <_ZN21MockIgnoredActualCall17returnStringValueEv+0x18>)
 8015066:	4618      	mov	r0, r3
 8015068:	370c      	adds	r7, #12
 801506a:	46bd      	mov	sp, r7
 801506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015070:	4770      	bx	lr
 8015072:	bf00      	nop
 8015074:	08022dac 	.word	0x08022dac

08015078 <_ZN21MockIgnoredActualCall26returnStringValueOrDefaultEPKc>:
    virtual const char * returnStringValueOrDefault(const char * value) _override { return value; }
 8015078:	b480      	push	{r7}
 801507a:	b083      	sub	sp, #12
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
 8015080:	6039      	str	r1, [r7, #0]
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	4618      	mov	r0, r3
 8015086:	370c      	adds	r7, #12
 8015088:	46bd      	mov	sp, r7
 801508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801508e:	4770      	bx	lr

08015090 <_ZN21MockIgnoredActualCall18returnPointerValueEv>:

    virtual void * returnPointerValue() _override { return NULLPTR; }
 8015090:	b480      	push	{r7}
 8015092:	b083      	sub	sp, #12
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	2300      	movs	r3, #0
 801509a:	4618      	mov	r0, r3
 801509c:	370c      	adds	r7, #12
 801509e:	46bd      	mov	sp, r7
 80150a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a4:	4770      	bx	lr

080150a6 <_ZN21MockIgnoredActualCall27returnPointerValueOrDefaultEPv>:
    virtual void * returnPointerValueOrDefault(void * value) _override { return value; }
 80150a6:	b480      	push	{r7}
 80150a8:	b083      	sub	sp, #12
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
 80150ae:	6039      	str	r1, [r7, #0]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	4618      	mov	r0, r3
 80150b4:	370c      	adds	r7, #12
 80150b6:	46bd      	mov	sp, r7
 80150b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150bc:	4770      	bx	lr

080150be <_ZN21MockIgnoredActualCall23returnConstPointerValueEv>:

    virtual const void * returnConstPointerValue() _override { return NULLPTR; }
 80150be:	b480      	push	{r7}
 80150c0:	b083      	sub	sp, #12
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
 80150c6:	2300      	movs	r3, #0
 80150c8:	4618      	mov	r0, r3
 80150ca:	370c      	adds	r7, #12
 80150cc:	46bd      	mov	sp, r7
 80150ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d2:	4770      	bx	lr

080150d4 <_ZN21MockIgnoredActualCall32returnConstPointerValueOrDefaultEPKv>:
    virtual const void * returnConstPointerValueOrDefault(const void * value) _override { return value; }
 80150d4:	b480      	push	{r7}
 80150d6:	b083      	sub	sp, #12
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
 80150dc:	6039      	str	r1, [r7, #0]
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	4618      	mov	r0, r3
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ea:	4770      	bx	lr

080150ec <_ZN21MockIgnoredActualCall26returnFunctionPointerValueEv>:

    virtual void (*returnFunctionPointerValue())() _override { return NULLPTR; }
 80150ec:	b480      	push	{r7}
 80150ee:	b083      	sub	sp, #12
 80150f0:	af00      	add	r7, sp, #0
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	2300      	movs	r3, #0
 80150f6:	4618      	mov	r0, r3
 80150f8:	370c      	adds	r7, #12
 80150fa:	46bd      	mov	sp, r7
 80150fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015100:	4770      	bx	lr

08015102 <_ZN21MockIgnoredActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:
    virtual void (*returnFunctionPointerValueOrDefault(void (*value)()))() _override { return value; }
 8015102:	b480      	push	{r7}
 8015104:	b083      	sub	sp, #12
 8015106:	af00      	add	r7, sp, #0
 8015108:	6078      	str	r0, [r7, #4]
 801510a:	6039      	str	r1, [r7, #0]
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	4618      	mov	r0, r3
 8015110:	370c      	adds	r7, #12
 8015112:	46bd      	mov	sp, r7
 8015114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015118:	4770      	bx	lr

0801511a <_ZN21MockIgnoredActualCall8onObjectEPKv>:

    virtual MockActualCall& onObject(const void* ) _override { return *this; }
 801511a:	b480      	push	{r7}
 801511c:	b083      	sub	sp, #12
 801511e:	af00      	add	r7, sp, #0
 8015120:	6078      	str	r0, [r7, #4]
 8015122:	6039      	str	r1, [r7, #0]
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	4618      	mov	r0, r3
 8015128:	370c      	adds	r7, #12
 801512a:	46bd      	mov	sp, r7
 801512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015130:	4770      	bx	lr
	...

08015134 <_ZN14MockActualCallC1Ev>:
#include "CppUTestExt/MockCheckedActualCall.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"
#include "CppUTestExt/MockFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

MockActualCall::MockActualCall()
 8015134:	b480      	push	{r7}
 8015136:	b083      	sub	sp, #12
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	4a04      	ldr	r2, [pc, #16]	; (8015150 <_ZN14MockActualCallC1Ev+0x1c>)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	601a      	str	r2, [r3, #0]
{
}
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	370c      	adds	r7, #12
 8015148:	46bd      	mov	sp, r7
 801514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801514e:	4770      	bx	lr
 8015150:	080251c0 	.word	0x080251c0

08015154 <_ZN14MockActualCallD1Ev>:

MockActualCall::~MockActualCall()
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	4a04      	ldr	r2, [pc, #16]	; (8015170 <_ZN14MockActualCallD1Ev+0x1c>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	601a      	str	r2, [r3, #0]
{
}
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4618      	mov	r0, r3
 8015166:	370c      	adds	r7, #12
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr
 8015170:	080251c0 	.word	0x080251c0

08015174 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>:

void MockCheckedActualCall::setName(const SimpleString& name)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	3304      	adds	r3, #4
 8015182:	6839      	ldr	r1, [r7, #0]
 8015184:	4618      	mov	r0, r3
 8015186:	f7f5 f88e 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
}
 801518a:	bf00      	nop
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <_ZNK21MockCheckedActualCall7getNameEv>:

SimpleString MockCheckedActualCall::getName() const
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b082      	sub	sp, #8
 8015196:	af00      	add	r7, sp, #0
 8015198:	6078      	str	r0, [r7, #4]
 801519a:	6039      	str	r1, [r7, #0]
    return functionName_;
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	3304      	adds	r3, #4
 80151a0:	4619      	mov	r1, r3
 80151a2:	6878      	ldr	r0, [r7, #4]
 80151a4:	f7f5 f867 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 80151a8:	6878      	ldr	r0, [r7, #4]
 80151aa:	3708      	adds	r7, #8
 80151ac:	46bd      	mov	sp, r7
 80151ae:	bd80      	pop	{r7, pc}

080151b0 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList>:

MockCheckedActualCall::MockCheckedActualCall(unsigned int callOrder, MockFailureReporter* reporter, const MockExpectedCallsList& allExpectations)
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b084      	sub	sp, #16
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	60f8      	str	r0, [r7, #12]
 80151b8:	60b9      	str	r1, [r7, #8]
 80151ba:	607a      	str	r2, [r7, #4]
 80151bc:	603b      	str	r3, [r7, #0]
    : callOrder_(callOrder), reporter_(reporter), state_(CALL_SUCCEED), expectationsChecked_(false), matchingExpectation_(NULLPTR),
      allExpectations_(allExpectations), outputParameterExpectations_(NULLPTR)
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7ff ffb7 	bl	8015134 <_ZN14MockActualCallC1Ev>
 80151c6:	4a17      	ldr	r2, [pc, #92]	; (8015224 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x74>)
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	601a      	str	r2, [r3, #0]
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	3304      	adds	r3, #4
 80151d0:	4915      	ldr	r1, [pc, #84]	; (8015228 <_ZN21MockCheckedActualCallC1EjP19MockFailureReporterRK21MockExpectedCallsList+0x78>)
 80151d2:	4618      	mov	r0, r3
 80151d4:	f7f4 fffb 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	68ba      	ldr	r2, [r7, #8]
 80151dc:	60da      	str	r2, [r3, #12]
 80151de:	68fb      	ldr	r3, [r7, #12]
 80151e0:	687a      	ldr	r2, [r7, #4]
 80151e2:	611a      	str	r2, [r3, #16]
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	2202      	movs	r2, #2
 80151e8:	751a      	strb	r2, [r3, #20]
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	2200      	movs	r2, #0
 80151ee:	755a      	strb	r2, [r3, #21]
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2200      	movs	r2, #0
 80151f4:	619a      	str	r2, [r3, #24]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	331c      	adds	r3, #28
 80151fa:	4618      	mov	r0, r3
 80151fc:	f004 f814 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
 8015200:	68fb      	ldr	r3, [r7, #12]
 8015202:	683a      	ldr	r2, [r7, #0]
 8015204:	625a      	str	r2, [r3, #36]	; 0x24
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	2200      	movs	r2, #0
 801520a:	629a      	str	r2, [r3, #40]	; 0x28
{
    potentiallyMatchingExpectations_.addPotentiallyMatchingExpectations(allExpectations);
 801520c:	68fb      	ldr	r3, [r7, #12]
 801520e:	331c      	adds	r3, #28
 8015210:	6839      	ldr	r1, [r7, #0]
 8015212:	4618      	mov	r0, r3
 8015214:	f004 f986 	bl	8019524 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>
}
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	080250c0 	.word	0x080250c0
 8015228:	08022dac 	.word	0x08022dac

0801522c <_ZN21MockCheckedActualCallD1Ev>:

MockCheckedActualCall::~MockCheckedActualCall()
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
 8015232:	6078      	str	r0, [r7, #4]
 8015234:	4a0c      	ldr	r2, [pc, #48]	; (8015268 <_ZN21MockCheckedActualCallD1Ev+0x3c>)
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	601a      	str	r2, [r3, #0]
{
    cleanUpOutputParameterList();
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f001 fae4 	bl	8016808 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>
MockCheckedActualCall::~MockCheckedActualCall()
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	331c      	adds	r3, #28
 8015244:	4618      	mov	r0, r3
 8015246:	f004 f803 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	3304      	adds	r3, #4
 801524e:	4618      	mov	r0, r3
 8015250:	f7f5 fb75 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	4618      	mov	r0, r3
 8015258:	f7ff ff7c 	bl	8015154 <_ZN14MockActualCallD1Ev>
}
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	4618      	mov	r0, r3
 8015260:	3708      	adds	r7, #8
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	080250c0 	.word	0x080250c0

0801526c <_ZN21MockCheckedActualCallD0Ev>:
MockCheckedActualCall::~MockCheckedActualCall()
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
}
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7ff ffd9 	bl	801522c <_ZN21MockCheckedActualCallD1Ev>
 801527a:	212c      	movs	r1, #44	; 0x2c
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f7f2 fbf7 	bl	8007a70 <_ZdlPvj>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	4618      	mov	r0, r3
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}

0801528c <_ZN21MockCheckedActualCall22setMockFailureReporterEP19MockFailureReporter>:

void MockCheckedActualCall::setMockFailureReporter(MockFailureReporter* reporter)
{
 801528c:	b480      	push	{r7}
 801528e:	b083      	sub	sp, #12
 8015290:	af00      	add	r7, sp, #0
 8015292:	6078      	str	r0, [r7, #4]
 8015294:	6039      	str	r1, [r7, #0]
    reporter_ = reporter;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	611a      	str	r2, [r3, #16]
}
 801529c:	bf00      	nop
 801529e:	370c      	adds	r7, #12
 80152a0:	46bd      	mov	sp, r7
 80152a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a6:	4770      	bx	lr

080152a8 <_ZNK21MockCheckedActualCall7getTestEv>:

UtestShell* MockCheckedActualCall::getTest() const
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b082      	sub	sp, #8
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	6078      	str	r0, [r7, #4]
    return reporter_->getTestToFail();
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	691a      	ldr	r2, [r3, #16]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	691b      	ldr	r3, [r3, #16]
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	330c      	adds	r3, #12
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	4610      	mov	r0, r2
 80152c0:	4798      	blx	r3
 80152c2:	4603      	mov	r3, r0
}
 80152c4:	4618      	mov	r0, r3
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <_ZN21MockCheckedActualCall8failTestERK11MockFailure>:

void MockCheckedActualCall::failTest(const MockFailure& failure)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
    if (!hasFailed()) {
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	33c0      	adds	r3, #192	; 0xc0
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	4798      	blx	r3
 80152e2:	4603      	mov	r3, r0
 80152e4:	f083 0301 	eor.w	r3, r3, #1
 80152e8:	b2db      	uxtb	r3, r3
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d010      	beq.n	8015310 <_ZN21MockCheckedActualCall8failTestERK11MockFailure+0x44>
        setState(CALL_FAILED);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	33ec      	adds	r3, #236	; 0xec
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	2101      	movs	r1, #1
 80152f8:	6878      	ldr	r0, [r7, #4]
 80152fa:	4798      	blx	r3
        reporter_->failTest(failure);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	691a      	ldr	r2, [r3, #16]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	3308      	adds	r3, #8
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	6839      	ldr	r1, [r7, #0]
 801530c:	4610      	mov	r0, r2
 801530e:	4798      	blx	r3
    }
}
 8015310:	bf00      	nop
 8015312:	3708      	adds	r7, #8
 8015314:	46bd      	mov	sp, r7
 8015316:	bd80      	pop	{r7, pc}

08015318 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall>:

void MockCheckedActualCall::copyOutputParameters(MockCheckedExpectedCall* expectedCall)
{
 8015318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801531c:	b0bc      	sub	sp, #240	; 0xf0
 801531e:	af00      	add	r7, sp, #0
 8015320:	6078      	str	r0, [r7, #4]
 8015322:	6039      	str	r1, [r7, #0]
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015328:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801532c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015330:	2b00      	cmp	r3, #0
 8015332:	f000 80f5 	beq.w	8015520 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x208>
    {
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	339c      	adds	r3, #156	; 0x9c
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015342:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8015346:	6839      	ldr	r1, [r7, #0]
 8015348:	4798      	blx	r3
        MockNamedValueCopier* copier = outputParameter.getCopier();
 801534a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801534e:	4618      	mov	r0, r3
 8015350:	f006 fa6e 	bl	801b830 <_ZNK14MockNamedValue9getCopierEv>
 8015354:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
        if (copier)
 8015358:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801535c:	2b00      	cmp	r3, #0
 801535e:	d013      	beq.n	8015388 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x70>
        {
            copier->copy(p->ptr_, outputParameter.getConstObjectPointer());
 8015360:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	3308      	adds	r3, #8
 8015368:	681c      	ldr	r4, [r3, #0]
 801536a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801536e:	691d      	ldr	r5, [r3, #16]
 8015370:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015374:	4618      	mov	r0, r3
 8015376:	f006 fa2b 	bl	801b7d0 <_ZNK14MockNamedValue21getConstObjectPointerEv>
 801537a:	4603      	mov	r3, r0
 801537c:	461a      	mov	r2, r3
 801537e:	4629      	mov	r1, r5
 8015380:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8015384:	47a0      	blx	r4
 8015386:	e0c0      	b.n	801550a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if ((outputParameter.getType() == "const void*") && (p->type_ == "void*"))
 8015388:	2500      	movs	r5, #0
 801538a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801538e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015392:	4611      	mov	r1, r2
 8015394:	4618      	mov	r0, r3
 8015396:	f005 ff0e 	bl	801b1b6 <_ZNK14MockNamedValue7getTypeEv>
 801539a:	2601      	movs	r6, #1
 801539c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80153a0:	4962      	ldr	r1, [pc, #392]	; (801552c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x214>)
 80153a2:	4618      	mov	r0, r3
 80153a4:	f7f4 ff13 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80153a8:	f04f 0801 	mov.w	r8, #1
 80153ac:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80153b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80153b4:	4611      	mov	r1, r2
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7f5 facd 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d015      	beq.n	80153ee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80153c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80153c6:	f103 0408 	add.w	r4, r3, #8
 80153ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80153ce:	4958      	ldr	r1, [pc, #352]	; (8015530 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x218>)
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7f4 fefc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80153d6:	2501      	movs	r5, #1
 80153d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80153dc:	4619      	mov	r1, r3
 80153de:	4620      	mov	r0, r4
 80153e0:	f7f5 fab9 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80153e4:	4603      	mov	r3, r0
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d001      	beq.n	80153ee <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd6>
 80153ea:	2401      	movs	r4, #1
 80153ec:	e000      	b.n	80153f0 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xd8>
 80153ee:	2400      	movs	r4, #0
 80153f0:	2d00      	cmp	r5, #0
 80153f2:	d004      	beq.n	80153fe <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xe6>
 80153f4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80153f8:	4618      	mov	r0, r3
 80153fa:	f7f5 faa0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80153fe:	f1b8 0f00 	cmp.w	r8, #0
 8015402:	d004      	beq.n	801540e <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0xf6>
 8015404:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015408:	4618      	mov	r0, r3
 801540a:	f7f5 fa98 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801540e:	2e00      	cmp	r6, #0
 8015410:	d004      	beq.n	801541c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x104>
 8015412:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8015416:	4618      	mov	r0, r3
 8015418:	f7f5 fa91 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801541c:	2c00      	cmp	r4, #0
 801541e:	d018      	beq.n	8015452 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x13a>
        {
            const void* data = outputParameter.getConstPointerValue();
 8015420:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015424:	4618      	mov	r0, r3
 8015426:	f006 f95b 	bl	801b6e0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 801542a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
            size_t size = outputParameter.getSize();
 801542e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015432:	4618      	mov	r0, r3
 8015434:	f006 f9e4 	bl	801b800 <_ZNK14MockNamedValue7getSizeEv>
 8015438:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
            PlatformSpecificMemCpy(p->ptr_, data, size);
 801543c:	4b3d      	ldr	r3, [pc, #244]	; (8015534 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x21c>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8015444:	6910      	ldr	r0, [r2, #16]
 8015446:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801544a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 801544e:	4798      	blx	r3
 8015450:	e05b      	b.n	801550a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        }
        else if (outputParameter.getName() != "")
 8015452:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015456:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801545a:	4611      	mov	r1, r2
 801545c:	4618      	mov	r0, r3
 801545e:	f005 fe9b 	bl	801b198 <_ZNK14MockNamedValue7getNameEv>
 8015462:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015466:	4934      	ldr	r1, [pc, #208]	; (8015538 <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x220>)
 8015468:	4618      	mov	r0, r3
 801546a:	f7f4 feb0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801546e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8015472:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015476:	4611      	mov	r1, r2
 8015478:	4618      	mov	r0, r3
 801547a:	f7f5 fab1 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 801547e:	4603      	mov	r3, r0
 8015480:	461c      	mov	r4, r3
 8015482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8015486:	4618      	mov	r0, r3
 8015488:	f7f5 fa59 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801548c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8015490:	4618      	mov	r0, r3
 8015492:	f7f5 fa54 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8015496:	2c00      	cmp	r4, #0
 8015498:	d037      	beq.n	801550a <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x1f2>
        {
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 801549a:	683b      	ldr	r3, [r7, #0]
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	339c      	adds	r3, #156	; 0x9c
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80154a6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	4798      	blx	r3
 80154ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80154b2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80154b6:	4611      	mov	r1, r2
 80154b8:	4618      	mov	r0, r3
 80154ba:	f005 fe7c 	bl	801b1b6 <_ZNK14MockNamedValue7getTypeEv>
 80154be:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80154c2:	4618      	mov	r0, r3
 80154c4:	f005 fbd2 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	33cc      	adds	r3, #204	; 0xcc
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	6878      	ldr	r0, [r7, #4]
 80154d2:	4798      	blx	r3
 80154d4:	4601      	mov	r1, r0
 80154d6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80154da:	f107 030c 	add.w	r3, r7, #12
 80154de:	4618      	mov	r0, r3
 80154e0:	f005 faee 	bl	801aac0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>
            failTest(failure);
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	33dc      	adds	r3, #220	; 0xdc
 80154ea:	681b      	ldr	r3, [r3, #0]
 80154ec:	f107 020c 	add.w	r2, r7, #12
 80154f0:	4611      	mov	r1, r2
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	4798      	blx	r3
            MockNoWayToCopyCustomTypeFailure failure(getTest(), type);
 80154f6:	f107 030c 	add.w	r3, r7, #12
 80154fa:	4618      	mov	r0, r3
 80154fc:	f001 ffe2 	bl	80174c4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
            SimpleString type = expectedCall->getOutputParameter(p->name_).getType();
 8015500:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8015504:	4618      	mov	r0, r3
 8015506:	f7f5 fa1a 	bl	800a93e <_ZN12SimpleStringD1Ev>
        MockNamedValue outputParameter = expectedCall->getOutputParameter(p->name_);
 801550a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801550e:	4618      	mov	r0, r3
 8015510:	f005 fbac 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    for (MockOutputParametersListNode* p = outputParameterExpectations_; p; p = p->next_)
 8015514:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8015518:	695b      	ldr	r3, [r3, #20]
 801551a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801551e:	e705      	b.n	801532c <_ZN21MockCheckedActualCall20copyOutputParametersEP23MockCheckedExpectedCall+0x14>
        }
    }
}
 8015520:	bf00      	nop
 8015522:	37f0      	adds	r7, #240	; 0xf0
 8015524:	46bd      	mov	sp, r7
 8015526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801552a:	bf00      	nop
 801552c:	08022db0 	.word	0x08022db0
 8015530:	08022dbc 	.word	0x08022dbc
 8015534:	200000d0 	.word	0x200000d0
 8015538:	08022dac 	.word	0x08022dac

0801553c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv>:

void MockCheckedActualCall::completeCallWhenMatchIsFound()
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
 8015542:	6078      	str	r0, [r7, #4]
    // Expectations that don't ignore parameters have higher fulfillment preference than those that ignore parameters

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstFinalizedMatchingExpectation();
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	331c      	adds	r3, #28
 8015548:	4618      	mov	r0, r3
 801554a:	f004 f9bb 	bl	80198c4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>
 801554e:	4602      	mov	r2, r0
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	699b      	ldr	r3, [r3, #24]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d00f      	beq.n	801557c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x40>
        copyOutputParameters(matchingExpectation_);
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	33d4      	adds	r3, #212	; 0xd4
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	6992      	ldr	r2, [r2, #24]
 8015568:	4611      	mov	r1, r2
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	4798      	blx	r3
        callHasSucceeded();
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	33d0      	adds	r3, #208	; 0xd0
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	4798      	blx	r3
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
        if (matchingExpectationWithIgnoredParameters) {
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
        }
    }
}
 801557a:	e00f      	b.n	801559c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
        MockCheckedExpectedCall* matchingExpectationWithIgnoredParameters = potentiallyMatchingExpectations_.getFirstMatchingExpectation();
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	331c      	adds	r3, #28
 8015580:	4618      	mov	r0, r3
 8015582:	f004 f9cc 	bl	801991e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>
 8015586:	60f8      	str	r0, [r7, #12]
        if (matchingExpectationWithIgnoredParameters) {
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d006      	beq.n	801559c <_ZN21MockCheckedActualCall28completeCallWhenMatchIsFoundEv+0x60>
            copyOutputParameters(matchingExpectationWithIgnoredParameters);
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	33d4      	adds	r3, #212	; 0xd4
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	68f9      	ldr	r1, [r7, #12]
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	4798      	blx	r3
}
 801559c:	bf00      	nop
 801559e:	3710      	adds	r7, #16
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <_ZN21MockCheckedActualCall16callHasSucceededEv>:

void MockCheckedActualCall::callHasSucceeded()
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b082      	sub	sp, #8
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
    setState(CALL_SUCCEED);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	33ec      	adds	r3, #236	; 0xec
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	2102      	movs	r1, #2
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	4798      	blx	r3
}
 80155ba:	bf00      	nop
 80155bc:	3708      	adds	r7, #8
 80155be:	46bd      	mov	sp, r7
 80155c0:	bd80      	pop	{r7, pc}

080155c2 <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv>:

void MockCheckedActualCall::discardCurrentlyMatchingExpectations()
{
 80155c2:	b580      	push	{r7, lr}
 80155c4:	b082      	sub	sp, #8
 80155c6:	af00      	add	r7, sp, #0
 80155c8:	6078      	str	r0, [r7, #4]
    if (matchingExpectation_)
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	699b      	ldr	r3, [r3, #24]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d00b      	beq.n	80155ea <_ZN21MockCheckedActualCall36discardCurrentlyMatchingExpectationsEv+0x28>
    {
        matchingExpectation_->resetActualCallMatchingState();
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	699a      	ldr	r2, [r3, #24]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	699b      	ldr	r3, [r3, #24]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	33ec      	adds	r3, #236	; 0xec
 80155de:	681b      	ldr	r3, [r3, #0]
 80155e0:	4610      	mov	r0, r2
 80155e2:	4798      	blx	r3
        matchingExpectation_ = NULLPTR;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	2200      	movs	r2, #0
 80155e8:	619a      	str	r2, [r3, #24]
    }
    potentiallyMatchingExpectations_.onlyKeepUnmatchingExpectations();
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	331c      	adds	r3, #28
 80155ee:	4618      	mov	r0, r3
 80155f0:	f004 f85c 	bl	80196ac <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>
}
 80155f4:	bf00      	nop
 80155f6:	3708      	adds	r7, #8
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <_ZN21MockCheckedActualCall8withNameERK12SimpleString>:

MockActualCall& MockCheckedActualCall::withName(const SimpleString& name)
{
 80155fc:	b590      	push	{r4, r7, lr}
 80155fe:	b091      	sub	sp, #68	; 0x44
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
    setName(name);
 8015606:	6839      	ldr	r1, [r7, #0]
 8015608:	6878      	ldr	r0, [r7, #4]
 801560a:	f7ff fdb3 	bl	8015174 <_ZN21MockCheckedActualCall7setNameERK12SimpleString>
    setState(CALL_IN_PROGRESS);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	681b      	ldr	r3, [r3, #0]
 8015612:	33ec      	adds	r3, #236	; 0xec
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2100      	movs	r1, #0
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsRelatedTo(name);
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	331c      	adds	r3, #28
 8015620:	6839      	ldr	r1, [r7, #0]
 8015622:	4618      	mov	r0, r3
 8015624:	f003 ffec 	bl	8019600 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>
    if (potentiallyMatchingExpectations_.isEmpty()) {
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	331c      	adds	r3, #28
 801562c:	4618      	mov	r0, r3
 801562e:	f003 fe7c 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 8015632:	4603      	mov	r3, r0
 8015634:	2b00      	cmp	r3, #0
 8015636:	d01d      	beq.n	8015674 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x78>
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	33cc      	adds	r3, #204	; 0xcc
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	6878      	ldr	r0, [r7, #4]
 8015642:	4798      	blx	r3
 8015644:	4601      	mov	r1, r0
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801564a:	f107 000c 	add.w	r0, r7, #12
 801564e:	683a      	ldr	r2, [r7, #0]
 8015650:	f004 fe24 	bl	801a29c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
        failTest(failure);
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	33dc      	adds	r3, #220	; 0xdc
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	f107 020c 	add.w	r2, r7, #12
 8015660:	4611      	mov	r1, r2
 8015662:	6878      	ldr	r0, [r7, #4]
 8015664:	4798      	blx	r3
        return *this;
 8015666:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedCallHappenedFailure failure(getTest(), name, allExpectations_);
 8015668:	f107 030c 	add.w	r3, r7, #12
 801566c:	4618      	mov	r0, r3
 801566e:	f001 ff4b 	bl	8017508 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 8015672:	e006      	b.n	8015682 <_ZN21MockCheckedActualCall8withNameERK12SimpleString+0x86>
    }

    completeCallWhenMatchIsFound();
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	681b      	ldr	r3, [r3, #0]
 8015678:	33d8      	adds	r3, #216	; 0xd8
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	6878      	ldr	r0, [r7, #4]
 801567e:	4798      	blx	r3

    return *this;
 8015680:	687c      	ldr	r4, [r7, #4]
 8015682:	4623      	mov	r3, r4
}
 8015684:	4618      	mov	r0, r3
 8015686:	3744      	adds	r7, #68	; 0x44
 8015688:	46bd      	mov	sp, r7
 801568a:	bd90      	pop	{r4, r7, pc}

0801568c <_ZN21MockCheckedActualCall13withCallOrderEj>:

MockActualCall& MockCheckedActualCall::withCallOrder(unsigned int)
{
 801568c:	b480      	push	{r7}
 801568e:	b083      	sub	sp, #12
 8015690:	af00      	add	r7, sp, #0
 8015692:	6078      	str	r0, [r7, #4]
 8015694:	6039      	str	r1, [r7, #0]
    return *this;
 8015696:	687b      	ldr	r3, [r7, #4]
}
 8015698:	4618      	mov	r0, r3
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr

080156a4 <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkInputParameter(const MockNamedValue& actualParameter)
{
 80156a4:	b590      	push	{r4, r7, lr}
 80156a6:	b097      	sub	sp, #92	; 0x5c
 80156a8:	af02      	add	r7, sp, #8
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	33c0      	adds	r3, #192	; 0xc0
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	6878      	ldr	r0, [r7, #4]
 80156b8:	4798      	blx	r3
 80156ba:	4603      	mov	r3, r0
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d164      	bne.n	801578a <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	33ec      	adds	r3, #236	; 0xec
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	2100      	movs	r1, #0
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	681b      	ldr	r3, [r3, #0]
 80156d2:	33e8      	adds	r3, #232	; 0xe8
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithInputParameter(actualParameter);
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	331c      	adds	r3, #28
 80156de:	6839      	ldr	r1, [r7, #0]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f004 f86b 	bl	80197bc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	331c      	adds	r3, #28
 80156ea:	4618      	mov	r0, r3
 80156ec:	f003 fe1d 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 80156f0:	4603      	mov	r3, r0
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d02b      	beq.n	801574e <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	33cc      	adds	r3, #204	; 0xcc
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	4798      	blx	r3
 8015702:	4604      	mov	r4, r0
 8015704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015708:	6879      	ldr	r1, [r7, #4]
 801570a:	4618      	mov	r0, r3
 801570c:	f7ff fd41 	bl	8015192 <_ZNK21MockCheckedActualCall7getNameEv>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015714:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015718:	f107 000c 	add.w	r0, r7, #12
 801571c:	9300      	str	r3, [sp, #0]
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	4621      	mov	r1, r4
 8015722:	f004 fe7f 	bl	801a424 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801572a:	4618      	mov	r0, r3
 801572c:	f7f5 f907 	bl	800a93e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	33dc      	adds	r3, #220	; 0xdc
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	f107 020c 	add.w	r2, r7, #12
 801573c:	4611      	mov	r1, r2
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	4798      	blx	r3
        MockUnexpectedInputParameterFailure failure(getTest(), getName(), actualParameter, allExpectations_);
 8015742:	f107 030c 	add.w	r3, r7, #12
 8015746:	4618      	mov	r0, r3
 8015748:	f001 ff00 	bl	801754c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801574c:	e01e      	b.n	801578c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.parameterWasPassed(actualParameter.getName());
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	f103 041c 	add.w	r4, r3, #28
 8015754:	683b      	ldr	r3, [r7, #0]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	335c      	adds	r3, #92	; 0x5c
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015760:	6839      	ldr	r1, [r7, #0]
 8015762:	4610      	mov	r0, r2
 8015764:	4798      	blx	r3
 8015766:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801576a:	4619      	mov	r1, r3
 801576c:	4620      	mov	r0, r4
 801576e:	f004 f9b8 	bl	8019ae2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>
 8015772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015776:	4618      	mov	r0, r3
 8015778:	f7f5 f8e1 	bl	800a93e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	33d8      	adds	r3, #216	; 0xd8
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	4798      	blx	r3
 8015788:	e000      	b.n	801578c <_ZN21MockCheckedActualCall19checkInputParameterERK14MockNamedValue+0xe8>
        return;
 801578a:	bf00      	nop
}
 801578c:	3754      	adds	r7, #84	; 0x54
 801578e:	46bd      	mov	sp, r7
 8015790:	bd90      	pop	{r4, r7, pc}

08015792 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue>:

void MockCheckedActualCall::checkOutputParameter(const MockNamedValue& outputParameter)
{
 8015792:	b590      	push	{r4, r7, lr}
 8015794:	b097      	sub	sp, #92	; 0x5c
 8015796:	af02      	add	r7, sp, #8
 8015798:	6078      	str	r0, [r7, #4]
 801579a:	6039      	str	r1, [r7, #0]
    if(hasFailed())
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	33c0      	adds	r3, #192	; 0xc0
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	4798      	blx	r3
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d164      	bne.n	8015878 <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe6>
    {
        return;
    }

    setState(CALL_IN_PROGRESS);
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	33ec      	adds	r3, #236	; 0xec
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	2100      	movs	r1, #0
 80157b8:	6878      	ldr	r0, [r7, #4]
 80157ba:	4798      	blx	r3
    discardCurrentlyMatchingExpectations();
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	33e8      	adds	r3, #232	; 0xe8
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	6878      	ldr	r0, [r7, #4]
 80157c6:	4798      	blx	r3

    potentiallyMatchingExpectations_.onlyKeepExpectationsWithOutputParameter(outputParameter);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	331c      	adds	r3, #28
 80157cc:	6839      	ldr	r1, [r7, #0]
 80157ce:	4618      	mov	r0, r3
 80157d0:	f004 f820 	bl	8019814 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>

    if (potentiallyMatchingExpectations_.isEmpty()) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	331c      	adds	r3, #28
 80157d8:	4618      	mov	r0, r3
 80157da:	f003 fda6 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d02b      	beq.n	801583c <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xaa>
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	33cc      	adds	r3, #204	; 0xcc
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	4798      	blx	r3
 80157f0:	4604      	mov	r4, r0
 80157f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80157f6:	6879      	ldr	r1, [r7, #4]
 80157f8:	4618      	mov	r0, r3
 80157fa:	f7ff fcca 	bl	8015192 <_ZNK21MockCheckedActualCall7getNameEv>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015802:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015806:	f107 000c 	add.w	r0, r7, #12
 801580a:	9300      	str	r3, [sp, #0]
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	4621      	mov	r1, r4
 8015810:	f004 ff6a 	bl	801a6e8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>
 8015814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015818:	4618      	mov	r0, r3
 801581a:	f7f5 f890 	bl	800a93e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	33dc      	adds	r3, #220	; 0xdc
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	f107 020c 	add.w	r2, r7, #12
 801582a:	4611      	mov	r1, r2
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	4798      	blx	r3
        MockUnexpectedOutputParameterFailure failure(getTest(), getName(), outputParameter, allExpectations_);
 8015830:	f107 030c 	add.w	r3, r7, #12
 8015834:	4618      	mov	r0, r3
 8015836:	f001 feab 	bl	8017590 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 801583a:	e01e      	b.n	801587a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
    }

    potentiallyMatchingExpectations_.outputParameterWasPassed(outputParameter.getName());
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f103 041c 	add.w	r4, r3, #28
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	335c      	adds	r3, #92	; 0x5c
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	4610      	mov	r0, r2
 8015852:	4798      	blx	r3
 8015854:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015858:	4619      	mov	r1, r3
 801585a:	4620      	mov	r0, r4
 801585c:	f004 f95e 	bl	8019b1c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>
 8015860:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015864:	4618      	mov	r0, r3
 8015866:	f7f5 f86a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    completeCallWhenMatchIsFound();
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	33d8      	adds	r3, #216	; 0xd8
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	6878      	ldr	r0, [r7, #4]
 8015874:	4798      	blx	r3
 8015876:	e000      	b.n	801587a <_ZN21MockCheckedActualCall20checkOutputParameterERK14MockNamedValue+0xe8>
        return;
 8015878:	bf00      	nop
}
 801587a:	3754      	adds	r7, #84	; 0x54
 801587c:	46bd      	mov	sp, r7
 801587e:	bd90      	pop	{r4, r7, pc}

08015880 <_ZN21MockCheckedActualCall17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockCheckedActualCall::withBoolParameter(const SimpleString& name, bool value)
{
 8015880:	b590      	push	{r4, r7, lr}
 8015882:	b093      	sub	sp, #76	; 0x4c
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	4613      	mov	r3, r2
 801588c:	71fb      	strb	r3, [r7, #7]
    MockNamedValue actualParameter(name);
 801588e:	f107 0310 	add.w	r3, r7, #16
 8015892:	68b9      	ldr	r1, [r7, #8]
 8015894:	4618      	mov	r0, r3
 8015896:	f005 f9bf 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 801589a:	79fa      	ldrb	r2, [r7, #7]
 801589c:	f107 0310 	add.w	r3, r7, #16
 80158a0:	4611      	mov	r1, r2
 80158a2:	4618      	mov	r0, r3
 80158a4:	f005 fa0a 	bl	801acbc <_ZN14MockNamedValue8setValueEb>
    checkInputParameter(actualParameter);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	33e0      	adds	r3, #224	; 0xe0
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	f107 0210 	add.w	r2, r7, #16
 80158b4:	4611      	mov	r1, r2
 80158b6:	68f8      	ldr	r0, [r7, #12]
 80158b8:	4798      	blx	r3
    return *this;
 80158ba:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80158bc:	f107 0310 	add.w	r3, r7, #16
 80158c0:	4618      	mov	r0, r3
 80158c2:	f005 f9d3 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 80158c6:	4623      	mov	r3, r4
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	374c      	adds	r7, #76	; 0x4c
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd90      	pop	{r4, r7, pc}

080158d0 <_ZN21MockCheckedActualCall24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockCheckedActualCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80158d0:	b590      	push	{r4, r7, lr}
 80158d2:	b093      	sub	sp, #76	; 0x4c
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80158dc:	f107 0310 	add.w	r3, r7, #16
 80158e0:	68b9      	ldr	r1, [r7, #8]
 80158e2:	4618      	mov	r0, r3
 80158e4:	f005 f998 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80158e8:	f107 0310 	add.w	r3, r7, #16
 80158ec:	6879      	ldr	r1, [r7, #4]
 80158ee:	4618      	mov	r0, r3
 80158f0:	f005 fa08 	bl	801ad04 <_ZN14MockNamedValue8setValueEj>
    checkInputParameter(actualParameter);
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	33e0      	adds	r3, #224	; 0xe0
 80158fa:	681b      	ldr	r3, [r3, #0]
 80158fc:	f107 0210 	add.w	r2, r7, #16
 8015900:	4611      	mov	r1, r2
 8015902:	68f8      	ldr	r0, [r7, #12]
 8015904:	4798      	blx	r3
    return *this;
 8015906:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015908:	f107 0310 	add.w	r3, r7, #16
 801590c:	4618      	mov	r0, r3
 801590e:	f005 f9ad 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015912:	4623      	mov	r3, r4
}
 8015914:	4618      	mov	r0, r3
 8015916:	374c      	adds	r7, #76	; 0x4c
 8015918:	46bd      	mov	sp, r7
 801591a:	bd90      	pop	{r4, r7, pc}

0801591c <_ZN21MockCheckedActualCall16withIntParameterERK12SimpleStringi>:

MockActualCall& MockCheckedActualCall::withIntParameter(const SimpleString& name, int value)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b093      	sub	sp, #76	; 0x4c
 8015920:	af00      	add	r7, sp, #0
 8015922:	60f8      	str	r0, [r7, #12]
 8015924:	60b9      	str	r1, [r7, #8]
 8015926:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015928:	f107 0310 	add.w	r3, r7, #16
 801592c:	68b9      	ldr	r1, [r7, #8]
 801592e:	4618      	mov	r0, r3
 8015930:	f005 f972 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015934:	f107 0310 	add.w	r3, r7, #16
 8015938:	6879      	ldr	r1, [r7, #4]
 801593a:	4618      	mov	r0, r3
 801593c:	f005 fa04 	bl	801ad48 <_ZN14MockNamedValue8setValueEi>
    checkInputParameter(actualParameter);
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	33e0      	adds	r3, #224	; 0xe0
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	f107 0210 	add.w	r2, r7, #16
 801594c:	4611      	mov	r1, r2
 801594e:	68f8      	ldr	r0, [r7, #12]
 8015950:	4798      	blx	r3
    return *this;
 8015952:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015954:	f107 0310 	add.w	r3, r7, #16
 8015958:	4618      	mov	r0, r3
 801595a:	f005 f987 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 801595e:	4623      	mov	r3, r4
}
 8015960:	4618      	mov	r0, r3
 8015962:	374c      	adds	r7, #76	; 0x4c
 8015964:	46bd      	mov	sp, r7
 8015966:	bd90      	pop	{r4, r7, pc}

08015968 <_ZN21MockCheckedActualCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockCheckedActualCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8015968:	b590      	push	{r4, r7, lr}
 801596a:	b093      	sub	sp, #76	; 0x4c
 801596c:	af00      	add	r7, sp, #0
 801596e:	60f8      	str	r0, [r7, #12]
 8015970:	60b9      	str	r1, [r7, #8]
 8015972:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015974:	f107 0310 	add.w	r3, r7, #16
 8015978:	68b9      	ldr	r1, [r7, #8]
 801597a:	4618      	mov	r0, r3
 801597c:	f005 f94c 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015980:	f107 0310 	add.w	r3, r7, #16
 8015984:	6879      	ldr	r1, [r7, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	f005 fa22 	bl	801add0 <_ZN14MockNamedValue8setValueEm>
    checkInputParameter(actualParameter);
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	33e0      	adds	r3, #224	; 0xe0
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	f107 0210 	add.w	r2, r7, #16
 8015998:	4611      	mov	r1, r2
 801599a:	68f8      	ldr	r0, [r7, #12]
 801599c:	4798      	blx	r3
    return *this;
 801599e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80159a0:	f107 0310 	add.w	r3, r7, #16
 80159a4:	4618      	mov	r0, r3
 80159a6:	f005 f961 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 80159aa:	4623      	mov	r3, r4
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	374c      	adds	r7, #76	; 0x4c
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bd90      	pop	{r4, r7, pc}

080159b4 <_ZN21MockCheckedActualCall20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockCheckedActualCall::withLongIntParameter(const SimpleString& name, long int value)
{
 80159b4:	b590      	push	{r4, r7, lr}
 80159b6:	b093      	sub	sp, #76	; 0x4c
 80159b8:	af00      	add	r7, sp, #0
 80159ba:	60f8      	str	r0, [r7, #12]
 80159bc:	60b9      	str	r1, [r7, #8]
 80159be:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 80159c0:	f107 0310 	add.w	r3, r7, #16
 80159c4:	68b9      	ldr	r1, [r7, #8]
 80159c6:	4618      	mov	r0, r3
 80159c8:	f005 f926 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 80159cc:	f107 0310 	add.w	r3, r7, #16
 80159d0:	6879      	ldr	r1, [r7, #4]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f005 f9da 	bl	801ad8c <_ZN14MockNamedValue8setValueEl>
    checkInputParameter(actualParameter);
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	33e0      	adds	r3, #224	; 0xe0
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	f107 0210 	add.w	r2, r7, #16
 80159e4:	4611      	mov	r1, r2
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	4798      	blx	r3
    return *this;
 80159ea:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 80159ec:	f107 0310 	add.w	r3, r7, #16
 80159f0:	4618      	mov	r0, r3
 80159f2:	f005 f93b 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 80159f6:	4623      	mov	r3, r4
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	374c      	adds	r7, #76	; 0x4c
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd90      	pop	{r4, r7, pc}

08015a00 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockCheckedActualCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8015a00:	b5b0      	push	{r4, r5, r7, lr}
 8015a02:	b086      	sub	sp, #24
 8015a04:	af02      	add	r7, sp, #8
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	4639      	mov	r1, r7
 8015a0c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8015a10:	f7fb ffc0 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8015a14:	4604      	mov	r4, r0
 8015a16:	6823      	ldr	r3, [r4, #0]
 8015a18:	3368      	adds	r3, #104	; 0x68
 8015a1a:	681d      	ldr	r5, [r3, #0]
 8015a1c:	f7fb ffca 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015a20:	4603      	mov	r3, r0
 8015a22:	9300      	str	r3, [sp, #0]
 8015a24:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8015a28:	4a04      	ldr	r2, [pc, #16]	; (8015a3c <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8015a2a:	4905      	ldr	r1, [pc, #20]	; (8015a40 <_ZN21MockCheckedActualCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	47a8      	blx	r5
    return *this;
 8015a30:	68fb      	ldr	r3, [r7, #12]
}
 8015a32:	4618      	mov	r0, r3
 8015a34:	3710      	adds	r7, #16
 8015a36:	46bd      	mov	sp, r7
 8015a38:	bdb0      	pop	{r4, r5, r7, pc}
 8015a3a:	bf00      	nop
 8015a3c:	08022dc4 	.word	0x08022dc4
 8015a40:	08022de0 	.word	0x08022de0

08015a44 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockCheckedActualCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8015a44:	b5b0      	push	{r4, r5, r7, lr}
 8015a46:	b086      	sub	sp, #24
 8015a48:	af02      	add	r7, sp, #8
 8015a4a:	60f8      	str	r0, [r7, #12]
 8015a4c:	60b9      	str	r1, [r7, #8]
 8015a4e:	4639      	mov	r1, r7
 8015a50:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8015a54:	f7fb ff9e 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8015a58:	4604      	mov	r4, r0
 8015a5a:	6823      	ldr	r3, [r4, #0]
 8015a5c:	3368      	adds	r3, #104	; 0x68
 8015a5e:	681d      	ldr	r5, [r3, #0]
 8015a60:	f7fb ffa8 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015a64:	4603      	mov	r3, r0
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015a6c:	4a04      	ldr	r2, [pc, #16]	; (8015a80 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8015a6e:	4905      	ldr	r1, [pc, #20]	; (8015a84 <_ZN21MockCheckedActualCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8015a70:	4620      	mov	r0, r4
 8015a72:	47a8      	blx	r5
    return *this;
 8015a74:	68fb      	ldr	r3, [r7, #12]
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3710      	adds	r7, #16
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	08022dc4 	.word	0x08022dc4
 8015a84:	08022e0c 	.word	0x08022e0c

08015a88 <_ZN21MockCheckedActualCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockCheckedActualCall::withDoubleParameter(const SimpleString& name, double value)
{
 8015a88:	b590      	push	{r4, r7, lr}
 8015a8a:	b093      	sub	sp, #76	; 0x4c
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	60f8      	str	r0, [r7, #12]
 8015a90:	60b9      	str	r1, [r7, #8]
 8015a92:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue actualParameter(name);
 8015a96:	f107 0310 	add.w	r3, r7, #16
 8015a9a:	68b9      	ldr	r1, [r7, #8]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f005 f8bb 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015aa2:	f107 0310 	add.w	r3, r7, #16
 8015aa6:	ed97 0b00 	vldr	d0, [r7]
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f005 f9f0 	bl	801ae90 <_ZN14MockNamedValue8setValueEd>
    checkInputParameter(actualParameter);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	33e0      	adds	r3, #224	; 0xe0
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	f107 0210 	add.w	r2, r7, #16
 8015abc:	4611      	mov	r1, r2
 8015abe:	68f8      	ldr	r0, [r7, #12]
 8015ac0:	4798      	blx	r3
    return *this;
 8015ac2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015ac4:	f107 0310 	add.w	r3, r7, #16
 8015ac8:	4618      	mov	r0, r3
 8015aca:	f005 f8cf 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015ace:	4623      	mov	r3, r4
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	374c      	adds	r7, #76	; 0x4c
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd90      	pop	{r4, r7, pc}

08015ad8 <_ZN21MockCheckedActualCall19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockCheckedActualCall::withStringParameter(const SimpleString& name, const char* value)
{
 8015ad8:	b590      	push	{r4, r7, lr}
 8015ada:	b093      	sub	sp, #76	; 0x4c
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015ae4:	f107 0310 	add.w	r3, r7, #16
 8015ae8:	68b9      	ldr	r1, [r7, #8]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f005 f894 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015af0:	f107 0310 	add.w	r3, r7, #16
 8015af4:	6879      	ldr	r1, [r7, #4]
 8015af6:	4618      	mov	r0, r3
 8015af8:	f005 fa74 	bl	801afe4 <_ZN14MockNamedValue8setValueEPKc>
    checkInputParameter(actualParameter);
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	33e0      	adds	r3, #224	; 0xe0
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	f107 0210 	add.w	r2, r7, #16
 8015b08:	4611      	mov	r1, r2
 8015b0a:	68f8      	ldr	r0, [r7, #12]
 8015b0c:	4798      	blx	r3
    return *this;
 8015b0e:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015b10:	f107 0310 	add.w	r3, r7, #16
 8015b14:	4618      	mov	r0, r3
 8015b16:	f005 f8a9 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015b1a:	4623      	mov	r3, r4
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	374c      	adds	r7, #76	; 0x4c
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd90      	pop	{r4, r7, pc}

08015b24 <_ZN21MockCheckedActualCall20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withPointerParameter(const SimpleString& name, void* value)
{
 8015b24:	b590      	push	{r4, r7, lr}
 8015b26:	b093      	sub	sp, #76	; 0x4c
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	60f8      	str	r0, [r7, #12]
 8015b2c:	60b9      	str	r1, [r7, #8]
 8015b2e:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015b30:	f107 0310 	add.w	r3, r7, #16
 8015b34:	68b9      	ldr	r1, [r7, #8]
 8015b36:	4618      	mov	r0, r3
 8015b38:	f005 f86e 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015b3c:	f107 0310 	add.w	r3, r7, #16
 8015b40:	6879      	ldr	r1, [r7, #4]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f005 f9e8 	bl	801af18 <_ZN14MockNamedValue8setValueEPv>
    checkInputParameter(actualParameter);
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	33e0      	adds	r3, #224	; 0xe0
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	f107 0210 	add.w	r2, r7, #16
 8015b54:	4611      	mov	r1, r2
 8015b56:	68f8      	ldr	r0, [r7, #12]
 8015b58:	4798      	blx	r3
    return *this;
 8015b5a:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015b5c:	f107 0310 	add.w	r3, r7, #16
 8015b60:	4618      	mov	r0, r3
 8015b62:	f005 f883 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015b66:	4623      	mov	r3, r4
}
 8015b68:	4618      	mov	r0, r3
 8015b6a:	374c      	adds	r7, #76	; 0x4c
 8015b6c:	46bd      	mov	sp, r7
 8015b6e:	bd90      	pop	{r4, r7, pc}

08015b70 <_ZN21MockCheckedActualCall25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockCheckedActualCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8015b70:	b590      	push	{r4, r7, lr}
 8015b72:	b093      	sub	sp, #76	; 0x4c
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	60f8      	str	r0, [r7, #12]
 8015b78:	60b9      	str	r1, [r7, #8]
 8015b7a:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015b7c:	f107 0310 	add.w	r3, r7, #16
 8015b80:	68b9      	ldr	r1, [r7, #8]
 8015b82:	4618      	mov	r0, r3
 8015b84:	f005 f848 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015b88:	f107 0310 	add.w	r3, r7, #16
 8015b8c:	6879      	ldr	r1, [r7, #4]
 8015b8e:	4618      	mov	r0, r3
 8015b90:	f005 f9e4 	bl	801af5c <_ZN14MockNamedValue8setValueEPKv>
    checkInputParameter(actualParameter);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	681b      	ldr	r3, [r3, #0]
 8015b98:	33e0      	adds	r3, #224	; 0xe0
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	f107 0210 	add.w	r2, r7, #16
 8015ba0:	4611      	mov	r1, r2
 8015ba2:	68f8      	ldr	r0, [r7, #12]
 8015ba4:	4798      	blx	r3
    return *this;
 8015ba6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015ba8:	f107 0310 	add.w	r3, r7, #16
 8015bac:	4618      	mov	r0, r3
 8015bae:	f005 f85d 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015bb2:	4623      	mov	r3, r4
}
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	374c      	adds	r7, #76	; 0x4c
 8015bb8:	46bd      	mov	sp, r7
 8015bba:	bd90      	pop	{r4, r7, pc}

08015bbc <_ZN21MockCheckedActualCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockCheckedActualCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8015bbc:	b590      	push	{r4, r7, lr}
 8015bbe:	b093      	sub	sp, #76	; 0x4c
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	607a      	str	r2, [r7, #4]
    MockNamedValue actualParameter(name);
 8015bc8:	f107 0310 	add.w	r3, r7, #16
 8015bcc:	68b9      	ldr	r1, [r7, #8]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f005 f822 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setValue(value);
 8015bd4:	f107 0310 	add.w	r3, r7, #16
 8015bd8:	6879      	ldr	r1, [r7, #4]
 8015bda:	4618      	mov	r0, r3
 8015bdc:	f005 f9e0 	bl	801afa0 <_ZN14MockNamedValue8setValueEPFvvE>
    checkInputParameter(actualParameter);
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	33e0      	adds	r3, #224	; 0xe0
 8015be6:	681b      	ldr	r3, [r3, #0]
 8015be8:	f107 0210 	add.w	r2, r7, #16
 8015bec:	4611      	mov	r1, r2
 8015bee:	68f8      	ldr	r0, [r7, #12]
 8015bf0:	4798      	blx	r3
    return *this;
 8015bf2:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015bf4:	f107 0310 	add.w	r3, r7, #16
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f005 f837 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015bfe:	4623      	mov	r3, r4
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	374c      	adds	r7, #76	; 0x4c
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd90      	pop	{r4, r7, pc}

08015c08 <_ZN21MockCheckedActualCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockCheckedActualCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8015c08:	b590      	push	{r4, r7, lr}
 8015c0a:	b093      	sub	sp, #76	; 0x4c
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	60f8      	str	r0, [r7, #12]
 8015c10:	60b9      	str	r1, [r7, #8]
 8015c12:	607a      	str	r2, [r7, #4]
 8015c14:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015c16:	f107 0310 	add.w	r3, r7, #16
 8015c1a:	68b9      	ldr	r1, [r7, #8]
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f004 fffb 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setMemoryBuffer(value, size);
 8015c22:	f107 0310 	add.w	r3, r7, #16
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	6879      	ldr	r1, [r7, #4]
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f005 f9fc 	bl	801b028 <_ZN14MockNamedValue15setMemoryBufferEPKhj>
    checkInputParameter(actualParameter);
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	33e0      	adds	r3, #224	; 0xe0
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	f107 0210 	add.w	r2, r7, #16
 8015c3c:	4611      	mov	r1, r2
 8015c3e:	68f8      	ldr	r0, [r7, #12]
 8015c40:	4798      	blx	r3
    return *this;
 8015c42:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015c44:	f107 0310 	add.w	r3, r7, #16
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f005 f80f 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015c4e:	4623      	mov	r3, r4
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	374c      	adds	r7, #76	; 0x4c
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd90      	pop	{r4, r7, pc}

08015c58 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockCheckedActualCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 8015c58:	b590      	push	{r4, r7, lr}
 8015c5a:	b0a1      	sub	sp, #132	; 0x84
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	60b9      	str	r1, [r7, #8]
 8015c62:	607a      	str	r2, [r7, #4]
 8015c64:	603b      	str	r3, [r7, #0]
    MockNamedValue actualParameter(name);
 8015c66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c6a:	6879      	ldr	r1, [r7, #4]
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f004 ffd3 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    actualParameter.setConstObjectPointer(type, value);
 8015c72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c76:	683a      	ldr	r2, [r7, #0]
 8015c78:	68b9      	ldr	r1, [r7, #8]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f005 f9fa 	bl	801b074 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>

    if (actualParameter.getComparator() == NULLPTR) {
 8015c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015c84:	4618      	mov	r0, r3
 8015c86:	f005 fdc7 	bl	801b818 <_ZNK14MockNamedValue13getComparatorEv>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	bf0c      	ite	eq
 8015c90:	2301      	moveq	r3, #1
 8015c92:	2300      	movne	r3, #0
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d01c      	beq.n	8015cd4 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x7c>
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	33cc      	adds	r3, #204	; 0xcc
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	4798      	blx	r3
 8015ca6:	4601      	mov	r1, r0
 8015ca8:	f107 0314 	add.w	r3, r7, #20
 8015cac:	68ba      	ldr	r2, [r7, #8]
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f004 fed6 	bl	801aa60 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>
        failTest(failure);
 8015cb4:	68fb      	ldr	r3, [r7, #12]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	33dc      	adds	r3, #220	; 0xdc
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	f107 0214 	add.w	r2, r7, #20
 8015cc0:	4611      	mov	r1, r2
 8015cc2:	68f8      	ldr	r0, [r7, #12]
 8015cc4:	4798      	blx	r3
        return *this;
 8015cc6:	68fc      	ldr	r4, [r7, #12]
        MockNoWayToCompareCustomTypeFailure failure(getTest(), type);
 8015cc8:	f107 0314 	add.w	r3, r7, #20
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f001 fc81 	bl	80175d4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8015cd2:	e009      	b.n	8015ce8 <_ZN21MockCheckedActualCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x90>
    }
    checkInputParameter(actualParameter);
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	33e0      	adds	r3, #224	; 0xe0
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015ce0:	4611      	mov	r1, r2
 8015ce2:	68f8      	ldr	r0, [r7, #12]
 8015ce4:	4798      	blx	r3
    return *this;
 8015ce6:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue actualParameter(name);
 8015ce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015cec:	4618      	mov	r0, r3
 8015cee:	f004 ffbd 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8015cf2:	4623      	mov	r3, r4
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	3784      	adds	r7, #132	; 0x84
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd90      	pop	{r4, r7, pc}

08015cfc <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockCheckedActualCall::withOutputParameter(const SimpleString& name, void* output)
{
 8015cfc:	b590      	push	{r4, r7, lr}
 8015cfe:	b095      	sub	sp, #84	; 0x54
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
    addOutputParameter(name, "void*", output);
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	681b      	ldr	r3, [r3, #0]
 8015d0c:	33f0      	adds	r3, #240	; 0xf0
 8015d0e:	681c      	ldr	r4, [r3, #0]
 8015d10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d14:	4917      	ldr	r1, [pc, #92]	; (8015d74 <_ZN21MockCheckedActualCall19withOutputParameterERK12SimpleStringPv+0x78>)
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7f4 fa59 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8015d1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	68b9      	ldr	r1, [r7, #8]
 8015d24:	68f8      	ldr	r0, [r7, #12]
 8015d26:	47a0      	blx	r4
 8015d28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f4 fe06 	bl	800a93e <_ZN12SimpleStringD1Ev>

    MockNamedValue outputParameter(name);
 8015d32:	f107 0310 	add.w	r3, r7, #16
 8015d36:	68b9      	ldr	r1, [r7, #8]
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f004 ff6d 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setValue(output);
 8015d3e:	f107 0310 	add.w	r3, r7, #16
 8015d42:	6879      	ldr	r1, [r7, #4]
 8015d44:	4618      	mov	r0, r3
 8015d46:	f005 f8e7 	bl	801af18 <_ZN14MockNamedValue8setValueEPv>
    checkOutputParameter(outputParameter);
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	33e4      	adds	r3, #228	; 0xe4
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	f107 0210 	add.w	r2, r7, #16
 8015d56:	4611      	mov	r1, r2
 8015d58:	68f8      	ldr	r0, [r7, #12]
 8015d5a:	4798      	blx	r3

    return *this;
 8015d5c:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015d5e:	f107 0310 	add.w	r3, r7, #16
 8015d62:	4618      	mov	r0, r3
 8015d64:	f004 ff82 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015d68:	4623      	mov	r3, r4
}
 8015d6a:	4618      	mov	r0, r3
 8015d6c:	3754      	adds	r7, #84	; 0x54
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bd90      	pop	{r4, r7, pc}
 8015d72:	bf00      	nop
 8015d74:	08022dbc 	.word	0x08022dbc

08015d78 <_ZN21MockCheckedActualCall25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockCheckedActualCall::withOutputParameterOfType(const SimpleString& type, const SimpleString& name, void* output)
{
 8015d78:	b590      	push	{r4, r7, lr}
 8015d7a:	b093      	sub	sp, #76	; 0x4c
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	607a      	str	r2, [r7, #4]
 8015d84:	603b      	str	r3, [r7, #0]
    addOutputParameter(name, type, output);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	33f0      	adds	r3, #240	; 0xf0
 8015d8c:	681c      	ldr	r4, [r3, #0]
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	68ba      	ldr	r2, [r7, #8]
 8015d92:	6879      	ldr	r1, [r7, #4]
 8015d94:	68f8      	ldr	r0, [r7, #12]
 8015d96:	47a0      	blx	r4

    MockNamedValue outputParameter(name);
 8015d98:	f107 0310 	add.w	r3, r7, #16
 8015d9c:	6879      	ldr	r1, [r7, #4]
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f004 ff3a 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
    outputParameter.setConstObjectPointer(type, output);
 8015da4:	f107 0310 	add.w	r3, r7, #16
 8015da8:	683a      	ldr	r2, [r7, #0]
 8015daa:	68b9      	ldr	r1, [r7, #8]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f005 f961 	bl	801b074 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>
    checkOutputParameter(outputParameter);
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	33e4      	adds	r3, #228	; 0xe4
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	f107 0210 	add.w	r2, r7, #16
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	68f8      	ldr	r0, [r7, #12]
 8015dc2:	4798      	blx	r3

    return *this;
 8015dc4:	68fc      	ldr	r4, [r7, #12]
    MockNamedValue outputParameter(name);
 8015dc6:	f107 0310 	add.w	r3, r7, #16
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f004 ff4e 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
    return *this;
 8015dd0:	4623      	mov	r3, r4
}
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	374c      	adds	r7, #76	; 0x4c
 8015dd6:	46bd      	mov	sp, r7
 8015dd8:	bd90      	pop	{r4, r7, pc}

08015dda <_ZNK21MockCheckedActualCall11isFulfilledEv>:

bool MockCheckedActualCall::isFulfilled() const
{
 8015dda:	b480      	push	{r7}
 8015ddc:	b083      	sub	sp, #12
 8015dde:	af00      	add	r7, sp, #0
 8015de0:	6078      	str	r0, [r7, #4]
    return state_ == CALL_SUCCEED;
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	7d1b      	ldrb	r3, [r3, #20]
 8015de6:	2b02      	cmp	r3, #2
 8015de8:	bf0c      	ite	eq
 8015dea:	2301      	moveq	r3, #1
 8015dec:	2300      	movne	r3, #0
 8015dee:	b2db      	uxtb	r3, r3
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	370c      	adds	r7, #12
 8015df4:	46bd      	mov	sp, r7
 8015df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfa:	4770      	bx	lr

08015dfc <_ZNK21MockCheckedActualCall9hasFailedEv>:

bool MockCheckedActualCall::hasFailed() const
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
    return state_ == CALL_FAILED;
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	7d1b      	ldrb	r3, [r3, #20]
 8015e08:	2b01      	cmp	r3, #1
 8015e0a:	bf0c      	ite	eq
 8015e0c:	2301      	moveq	r3, #1
 8015e0e:	2300      	movne	r3, #0
 8015e10:	b2db      	uxtb	r3, r3
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	370c      	adds	r7, #12
 8015e16:	46bd      	mov	sp, r7
 8015e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e1c:	4770      	bx	lr
	...

08015e20 <_ZN21MockCheckedActualCall17checkExpectationsEv>:

void MockCheckedActualCall::checkExpectations()
{
 8015e20:	b5b0      	push	{r4, r5, r7, lr}
 8015e22:	b096      	sub	sp, #88	; 0x58
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	6078      	str	r0, [r7, #4]
    if(expectationsChecked_) {
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	7d5b      	ldrb	r3, [r3, #21]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	f040 80bc 	bne.w	8015faa <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18a>
        return;
    }

    expectationsChecked_ = true;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	2201      	movs	r2, #1
 8015e36:	755a      	strb	r2, [r3, #21]

    if (state_ != CALL_IN_PROGRESS) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	7d1b      	ldrb	r3, [r3, #20]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d014      	beq.n	8015e6a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x4a>
        if(state_ == CALL_SUCCEED) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	7d1b      	ldrb	r3, [r3, #20]
 8015e44:	2b02      	cmp	r3, #2
 8015e46:	d10a      	bne.n	8015e5e <_ZN21MockCheckedActualCall17checkExpectationsEv+0x3e>
            matchingExpectation_->callWasMade(callOrder_);
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	6998      	ldr	r0, [r3, #24]
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	699b      	ldr	r3, [r3, #24]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	33d8      	adds	r3, #216	; 0xd8
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	687a      	ldr	r2, [r7, #4]
 8015e58:	68d2      	ldr	r2, [r2, #12]
 8015e5a:	4611      	mov	r1, r2
 8015e5c:	4798      	blx	r3
        }
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	331c      	adds	r3, #28
 8015e62:	4618      	mov	r0, r3
 8015e64:	f003 fe07 	bl	8019a76 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8015e68:	e0a0      	b.n	8015fac <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasFinalizedMatchingExpectations())
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	331c      	adds	r3, #28
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f003 fac3 	bl	80193fa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>
 8015e74:	4603      	mov	r3, r0
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00f      	beq.n	8015e9a <_ZN21MockCheckedActualCall17checkExpectationsEv+0x7a>
        FAIL("Actual call is in progress, but there are finalized matching expectations when checking expectations. This cannot happen."); // LCOV_EXCL_LINE
 8015e7a:	f7fb fd8b 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8015e7e:	4604      	mov	r4, r0
 8015e80:	6823      	ldr	r3, [r4, #0]
 8015e82:	3368      	adds	r3, #104	; 0x68
 8015e84:	681d      	ldr	r5, [r3, #0]
 8015e86:	f7fb fd95 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	9300      	str	r3, [sp, #0]
 8015e8e:	f240 1385 	movw	r3, #389	; 0x185
 8015e92:	4a48      	ldr	r2, [pc, #288]	; (8015fb4 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x194>)
 8015e94:	4948      	ldr	r1, [pc, #288]	; (8015fb8 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x198>)
 8015e96:	4620      	mov	r0, r4
 8015e98:	47a8      	blx	r5

    matchingExpectation_ = potentiallyMatchingExpectations_.removeFirstMatchingExpectation();
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	331c      	adds	r3, #28
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f003 fd5f 	bl	8019962 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>
 8015ea4:	4602      	mov	r2, r0
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	619a      	str	r2, [r3, #24]
    if (matchingExpectation_) {
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	699b      	ldr	r3, [r3, #24]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d01f      	beq.n	8015ef2 <_ZN21MockCheckedActualCall17checkExpectationsEv+0xd2>
        matchingExpectation_->finalizeActualCallMatch();
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	699a      	ldr	r2, [r3, #24]
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	699b      	ldr	r3, [r3, #24]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	33e4      	adds	r3, #228	; 0xe4
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	4610      	mov	r0, r2
 8015ec2:	4798      	blx	r3
        callHasSucceeded();
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	33d0      	adds	r3, #208	; 0xd0
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	6878      	ldr	r0, [r7, #4]
 8015ece:	4798      	blx	r3
        matchingExpectation_->callWasMade(callOrder_);
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	6998      	ldr	r0, [r3, #24]
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	699b      	ldr	r3, [r3, #24]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	33d8      	adds	r3, #216	; 0xd8
 8015edc:	681b      	ldr	r3, [r3, #0]
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	68d2      	ldr	r2, [r2, #12]
 8015ee2:	4611      	mov	r1, r2
 8015ee4:	4798      	blx	r3
        potentiallyMatchingExpectations_.resetActualCallMatchingState();
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	331c      	adds	r3, #28
 8015eea:	4618      	mov	r0, r3
 8015eec:	f003 fdc3 	bl	8019a76 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>
        return;
 8015ef0:	e05c      	b.n	8015fac <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }

    if (potentiallyMatchingExpectations_.hasUnmatchingExpectationsBecauseOfMissingParameters()) {
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	331c      	adds	r3, #28
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f003 ffc4 	bl	8019e84 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>
 8015efc:	4603      	mov	r3, r0
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d029      	beq.n	8015f56 <_ZN21MockCheckedActualCall17checkExpectationsEv+0x136>
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	33cc      	adds	r3, #204	; 0xcc
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	6878      	ldr	r0, [r7, #4]
 8015f0c:	4798      	blx	r3
 8015f0e:	4604      	mov	r4, r0
 8015f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f14:	6879      	ldr	r1, [r7, #4]
 8015f16:	4618      	mov	r0, r3
 8015f18:	f7ff f93b 	bl	8015192 <_ZNK21MockCheckedActualCall7getNameEv>
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f20:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8015f24:	f107 000c 	add.w	r0, r7, #12
 8015f28:	4621      	mov	r1, r4
 8015f2a:	f004 fd21 	bl	801a970 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8015f2e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7f4 fd03 	bl	800a93e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	33dc      	adds	r3, #220	; 0xdc
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	f107 020c 	add.w	r2, r7, #12
 8015f44:	4611      	mov	r1, r2
 8015f46:	6878      	ldr	r0, [r7, #4]
 8015f48:	4798      	blx	r3
        MockExpectedParameterDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015f4a:	f107 030c 	add.w	r3, r7, #12
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f001 fb62 	bl	8017618 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 8015f54:	e02a      	b.n	8015fac <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
    }
    else {
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	33cc      	adds	r3, #204	; 0xcc
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	6878      	ldr	r0, [r7, #4]
 8015f60:	4798      	blx	r3
 8015f62:	4604      	mov	r4, r0
 8015f64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f68:	6879      	ldr	r1, [r7, #4]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7ff f911 	bl	8015192 <_ZNK21MockCheckedActualCall7getNameEv>
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8015f78:	f107 000c 	add.w	r0, r7, #12
 8015f7c:	4621      	mov	r1, r4
 8015f7e:	f004 fe05 	bl	801ab8c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>
 8015f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015f86:	4618      	mov	r0, r3
 8015f88:	f7f4 fcd9 	bl	800a93e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	33dc      	adds	r3, #220	; 0xdc
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	f107 020c 	add.w	r2, r7, #12
 8015f98:	4611      	mov	r1, r2
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	4798      	blx	r3
        MockExpectedObjectDidntHappenFailure failure(getTest(), getName(), allExpectations_);
 8015f9e:	f107 030c 	add.w	r3, r7, #12
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f001 fb5a 	bl	801765c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 8015fa8:	e000      	b.n	8015fac <_ZN21MockCheckedActualCall17checkExpectationsEv+0x18c>
        return;
 8015faa:	bf00      	nop
    }
}
 8015fac:	3750      	adds	r7, #80	; 0x50
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	08022dc4 	.word	0x08022dc4
 8015fb8:	08022e2c 	.word	0x08022e2c

08015fbc <_ZN21MockCheckedActualCall8setStateENS_15ActualCallStateE>:

void MockCheckedActualCall::setState(ActualCallState state)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b083      	sub	sp, #12
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	70fb      	strb	r3, [r7, #3]
    state_ = state;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	78fa      	ldrb	r2, [r7, #3]
 8015fcc:	751a      	strb	r2, [r3, #20]
}
 8015fce:	bf00      	nop
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd8:	4770      	bx	lr
	...

08015fdc <_ZN21MockCheckedActualCall11returnValueEv>:

MockNamedValue MockCheckedActualCall::returnValue()
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b084      	sub	sp, #16
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
    checkExpectations();
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	33c4      	adds	r3, #196	; 0xc4
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	6838      	ldr	r0, [r7, #0]
 8015ff0:	4798      	blx	r3
    if (matchingExpectation_)
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	699b      	ldr	r3, [r3, #24]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d00a      	beq.n	8016010 <_ZN21MockCheckedActualCall11returnValueEv+0x34>
        return matchingExpectation_->returnValue();
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	6999      	ldr	r1, [r3, #24]
 8015ffe:	683b      	ldr	r3, [r7, #0]
 8016000:	699b      	ldr	r3, [r3, #24]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	3394      	adds	r3, #148	; 0x94
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	687a      	ldr	r2, [r7, #4]
 801600a:	4610      	mov	r0, r2
 801600c:	4798      	blx	r3
 801600e:	e010      	b.n	8016032 <_ZN21MockCheckedActualCall11returnValueEv+0x56>
    return MockNamedValue("no return value");
 8016010:	f107 0308 	add.w	r3, r7, #8
 8016014:	4909      	ldr	r1, [pc, #36]	; (801603c <_ZN21MockCheckedActualCall11returnValueEv+0x60>)
 8016016:	4618      	mov	r0, r3
 8016018:	f7f4 f8d9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801601c:	f107 0308 	add.w	r3, r7, #8
 8016020:	4619      	mov	r1, r3
 8016022:	6878      	ldr	r0, [r7, #4]
 8016024:	f004 fdf8 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016028:	f107 0308 	add.w	r3, r7, #8
 801602c:	4618      	mov	r0, r3
 801602e:	f7f4 fc86 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	08022ea8 	.word	0x08022ea8

08016040 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb>:

bool MockCheckedActualCall::returnBoolValueOrDefault(bool default_value)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b082      	sub	sp, #8
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	460b      	mov	r3, r1
 801604a:	70fb      	strb	r3, [r7, #3]
    if (!hasReturnValue()) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	681b      	ldr	r3, [r3, #0]
 8016050:	3350      	adds	r3, #80	; 0x50
 8016052:	681b      	ldr	r3, [r3, #0]
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	4798      	blx	r3
 8016058:	4603      	mov	r3, r0
 801605a:	f083 0301 	eor.w	r3, r3, #1
 801605e:	b2db      	uxtb	r3, r3
 8016060:	2b00      	cmp	r3, #0
 8016062:	d001      	beq.n	8016068 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x28>
        return default_value;
 8016064:	78fb      	ldrb	r3, [r7, #3]
 8016066:	e007      	b.n	8016078 <_ZN21MockCheckedActualCall24returnBoolValueOrDefaultEb+0x38>
    }
    return returnBoolValue();
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	335c      	adds	r3, #92	; 0x5c
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	4798      	blx	r3
 8016074:	4603      	mov	r3, r0
 8016076:	bf00      	nop
}
 8016078:	4618      	mov	r0, r3
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}

08016080 <_ZN21MockCheckedActualCall15returnBoolValueEv>:

bool MockCheckedActualCall::returnBoolValue()
{
 8016080:	b590      	push	{r4, r7, lr}
 8016082:	b091      	sub	sp, #68	; 0x44
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
    return returnValue().getBoolValue();
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	3354      	adds	r3, #84	; 0x54
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	f107 0208 	add.w	r2, r7, #8
 8016094:	6879      	ldr	r1, [r7, #4]
 8016096:	4610      	mov	r0, r2
 8016098:	4798      	blx	r3
 801609a:	f107 0308 	add.w	r3, r7, #8
 801609e:	4618      	mov	r0, r3
 80160a0:	f005 f898 	bl	801b1d4 <_ZNK14MockNamedValue12getBoolValueEv>
 80160a4:	4603      	mov	r3, r0
 80160a6:	461c      	mov	r4, r3
 80160a8:	bf00      	nop
 80160aa:	f107 0308 	add.w	r3, r7, #8
 80160ae:	4618      	mov	r0, r3
 80160b0:	f004 fddc 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80160b4:	4623      	mov	r3, r4
}
 80160b6:	4618      	mov	r0, r3
 80160b8:	3744      	adds	r7, #68	; 0x44
 80160ba:	46bd      	mov	sp, r7
 80160bc:	bd90      	pop	{r4, r7, pc}

080160be <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi>:

int MockCheckedActualCall::returnIntValueOrDefault(int default_value)
{
 80160be:	b580      	push	{r7, lr}
 80160c0:	b082      	sub	sp, #8
 80160c2:	af00      	add	r7, sp, #0
 80160c4:	6078      	str	r0, [r7, #4]
 80160c6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	3350      	adds	r3, #80	; 0x50
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	4798      	blx	r3
 80160d4:	4603      	mov	r3, r0
 80160d6:	f083 0301 	eor.w	r3, r3, #1
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d001      	beq.n	80160e4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x26>
        return default_value;
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	e007      	b.n	80160f4 <_ZN21MockCheckedActualCall23returnIntValueOrDefaultEi+0x36>
    }
    return returnIntValue();
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	3364      	adds	r3, #100	; 0x64
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	4798      	blx	r3
 80160f0:	4603      	mov	r3, r0
 80160f2:	bf00      	nop
}
 80160f4:	4618      	mov	r0, r3
 80160f6:	3708      	adds	r7, #8
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}

080160fc <_ZN21MockCheckedActualCall14returnIntValueEv>:

int MockCheckedActualCall::returnIntValue()
{
 80160fc:	b590      	push	{r4, r7, lr}
 80160fe:	b091      	sub	sp, #68	; 0x44
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
    return returnValue().getIntValue();
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	3354      	adds	r3, #84	; 0x54
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f107 0208 	add.w	r2, r7, #8
 8016110:	6879      	ldr	r1, [r7, #4]
 8016112:	4610      	mov	r0, r2
 8016114:	4798      	blx	r3
 8016116:	f107 0308 	add.w	r3, r7, #8
 801611a:	4618      	mov	r0, r3
 801611c:	f005 f8d2 	bl	801b2c4 <_ZNK14MockNamedValue11getIntValueEv>
 8016120:	4604      	mov	r4, r0
 8016122:	bf00      	nop
 8016124:	f107 0308 	add.w	r3, r7, #8
 8016128:	4618      	mov	r0, r3
 801612a:	f004 fd9f 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 801612e:	4623      	mov	r3, r4
}
 8016130:	4618      	mov	r0, r3
 8016132:	3744      	adds	r7, #68	; 0x44
 8016134:	46bd      	mov	sp, r7
 8016136:	bd90      	pop	{r4, r7, pc}

08016138 <_ZN21MockCheckedActualCall26returnUnsignedLongIntValueEv>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValue()
{
 8016138:	b590      	push	{r4, r7, lr}
 801613a:	b091      	sub	sp, #68	; 0x44
 801613c:	af00      	add	r7, sp, #0
 801613e:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedLongIntValue();
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	3354      	adds	r3, #84	; 0x54
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	f107 0208 	add.w	r2, r7, #8
 801614c:	6879      	ldr	r1, [r7, #4]
 801614e:	4610      	mov	r0, r2
 8016150:	4798      	blx	r3
 8016152:	f107 0308 	add.w	r3, r7, #8
 8016156:	4618      	mov	r0, r3
 8016158:	f005 f93e 	bl	801b3d8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>
 801615c:	4604      	mov	r4, r0
 801615e:	bf00      	nop
 8016160:	f107 0308 	add.w	r3, r7, #8
 8016164:	4618      	mov	r0, r3
 8016166:	f004 fd81 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 801616a:	4623      	mov	r3, r4
}
 801616c:	4618      	mov	r0, r3
 801616e:	3744      	adds	r7, #68	; 0x44
 8016170:	46bd      	mov	sp, r7
 8016172:	bd90      	pop	{r4, r7, pc}

08016174 <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockCheckedActualCall::returnUnsignedLongIntValueOrDefault(unsigned long int default_value)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	6078      	str	r0, [r7, #4]
 801617c:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	3350      	adds	r3, #80	; 0x50
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	6878      	ldr	r0, [r7, #4]
 8016188:	4798      	blx	r3
 801618a:	4603      	mov	r3, r0
 801618c:	f083 0301 	eor.w	r3, r3, #1
 8016190:	b2db      	uxtb	r3, r3
 8016192:	2b00      	cmp	r3, #0
 8016194:	d001      	beq.n	801619a <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x26>
        return default_value;
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	e007      	b.n	80161aa <_ZN21MockCheckedActualCall35returnUnsignedLongIntValueOrDefaultEm+0x36>
    }
    return returnUnsignedLongIntValue();
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	3368      	adds	r3, #104	; 0x68
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	4798      	blx	r3
 80161a6:	4603      	mov	r3, r0
 80161a8:	bf00      	nop
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <_ZN21MockCheckedActualCall18returnLongIntValueEv>:

long int MockCheckedActualCall::returnLongIntValue()
{
 80161b2:	b590      	push	{r4, r7, lr}
 80161b4:	b091      	sub	sp, #68	; 0x44
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
    return returnValue().getLongIntValue();
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	3354      	adds	r3, #84	; 0x54
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	f107 0208 	add.w	r2, r7, #8
 80161c6:	6879      	ldr	r1, [r7, #4]
 80161c8:	4610      	mov	r0, r2
 80161ca:	4798      	blx	r3
 80161cc:	f107 0308 	add.w	r3, r7, #8
 80161d0:	4618      	mov	r0, r3
 80161d2:	f005 f89f 	bl	801b314 <_ZNK14MockNamedValue15getLongIntValueEv>
 80161d6:	4604      	mov	r4, r0
 80161d8:	bf00      	nop
 80161da:	f107 0308 	add.w	r3, r7, #8
 80161de:	4618      	mov	r0, r3
 80161e0:	f004 fd44 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80161e4:	4623      	mov	r3, r4
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3744      	adds	r7, #68	; 0x44
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd90      	pop	{r4, r7, pc}

080161ee <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl>:

long int MockCheckedActualCall::returnLongIntValueOrDefault(long int default_value)
{
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b082      	sub	sp, #8
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
 80161f6:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	3350      	adds	r3, #80	; 0x50
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	4798      	blx	r3
 8016204:	4603      	mov	r3, r0
 8016206:	f083 0301 	eor.w	r3, r3, #1
 801620a:	b2db      	uxtb	r3, r3
 801620c:	2b00      	cmp	r3, #0
 801620e:	d001      	beq.n	8016214 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x26>
        return default_value;
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	e007      	b.n	8016224 <_ZN21MockCheckedActualCall27returnLongIntValueOrDefaultEl+0x36>
    }
    return returnLongIntValue();
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	3370      	adds	r3, #112	; 0x70
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	6878      	ldr	r0, [r7, #4]
 801621e:	4798      	blx	r3
 8016220:	4603      	mov	r3, r0
 8016222:	bf00      	nop
}
 8016224:	4618      	mov	r0, r3
 8016226:	3708      	adds	r7, #8
 8016228:	46bd      	mov	sp, r7
 801622a:	bd80      	pop	{r7, pc}

0801622c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv>:
}

#else

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValue()
{
 801622c:	b5b0      	push	{r4, r5, r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af02      	add	r7, sp, #8
 8016232:	6078      	str	r0, [r7, #4]
 8016234:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 8016236:	f7fb fbad 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801623a:	4604      	mov	r4, r0
 801623c:	6823      	ldr	r3, [r4, #0]
 801623e:	3368      	adds	r3, #104	; 0x68
 8016240:	681d      	ldr	r5, [r3, #0]
 8016242:	f7fb fbb7 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016246:	4603      	mov	r3, r0
 8016248:	9300      	str	r3, [sp, #0]
 801624a:	f240 13fb 	movw	r3, #507	; 0x1fb
 801624e:	4a06      	ldr	r2, [pc, #24]	; (8016268 <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x3c>)
 8016250:	4906      	ldr	r1, [pc, #24]	; (801626c <_ZN21MockCheckedActualCall30returnUnsignedLongLongIntValueEv+0x40>)
 8016252:	4620      	mov	r0, r4
 8016254:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8016256:	2100      	movs	r1, #0
 8016258:	6878      	ldr	r0, [r7, #4]
 801625a:	f7f1 fffb 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
}
 801625e:	6878      	ldr	r0, [r7, #4]
 8016260:	3708      	adds	r7, #8
 8016262:	46bd      	mov	sp, r7
 8016264:	bdb0      	pop	{r4, r5, r7, pc}
 8016266:	bf00      	nop
 8016268:	08022dc4 	.word	0x08022dc4
 801626c:	08022de0 	.word	0x08022de0

08016270 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockCheckedActualCall::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong default_value)
{
 8016270:	b5b0      	push	{r4, r5, r7, lr}
 8016272:	b086      	sub	sp, #24
 8016274:	af02      	add	r7, sp, #8
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	4639      	mov	r1, r7
 801627c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016280:	f7fb fb88 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8016284:	4604      	mov	r4, r0
 8016286:	6823      	ldr	r3, [r4, #0]
 8016288:	3368      	adds	r3, #104	; 0x68
 801628a:	681d      	ldr	r5, [r3, #0]
 801628c:	f7fb fb92 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016290:	4603      	mov	r3, r0
 8016292:	9300      	str	r3, [sp, #0]
 8016294:	f240 2301 	movw	r3, #513	; 0x201
 8016298:	4a06      	ldr	r2, [pc, #24]	; (80162b4 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 801629a:	4907      	ldr	r1, [pc, #28]	; (80162b8 <_ZN21MockCheckedActualCall39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x48>)
 801629c:	4620      	mov	r0, r4
 801629e:	47a8      	blx	r5
    return default_value;
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	461a      	mov	r2, r3
 80162a4:	463b      	mov	r3, r7
 80162a6:	cb03      	ldmia	r3!, {r0, r1}
 80162a8:	6010      	str	r0, [r2, #0]
 80162aa:	6051      	str	r1, [r2, #4]
}
 80162ac:	68f8      	ldr	r0, [r7, #12]
 80162ae:	3710      	adds	r7, #16
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bdb0      	pop	{r4, r5, r7, pc}
 80162b4:	08022dc4 	.word	0x08022dc4
 80162b8:	08022de0 	.word	0x08022de0

080162bc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValue()
{
 80162bc:	b5b0      	push	{r4, r5, r7, lr}
 80162be:	b084      	sub	sp, #16
 80162c0:	af02      	add	r7, sp, #8
 80162c2:	6078      	str	r0, [r7, #4]
 80162c4:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 80162c6:	f7fb fb65 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80162ca:	4604      	mov	r4, r0
 80162cc:	6823      	ldr	r3, [r4, #0]
 80162ce:	3368      	adds	r3, #104	; 0x68
 80162d0:	681d      	ldr	r5, [r3, #0]
 80162d2:	f7fb fb6f 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80162d6:	4603      	mov	r3, r0
 80162d8:	9300      	str	r3, [sp, #0]
 80162da:	f240 2307 	movw	r3, #519	; 0x207
 80162de:	4a06      	ldr	r2, [pc, #24]	; (80162f8 <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x3c>)
 80162e0:	4906      	ldr	r1, [pc, #24]	; (80162fc <_ZN21MockCheckedActualCall22returnLongLongIntValueEv+0x40>)
 80162e2:	4620      	mov	r0, r4
 80162e4:	47a8      	blx	r5
    return cpputest_longlong(0);
 80162e6:	2100      	movs	r1, #0
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f7f1 ffa7 	bl	800823c <_ZN17cpputest_longlongC1Ei>
}
 80162ee:	6878      	ldr	r0, [r7, #4]
 80162f0:	3708      	adds	r7, #8
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bdb0      	pop	{r4, r5, r7, pc}
 80162f6:	bf00      	nop
 80162f8:	08022dc4 	.word	0x08022dc4
 80162fc:	08022e0c 	.word	0x08022e0c

08016300 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockCheckedActualCall::returnLongLongIntValueOrDefault(cpputest_longlong default_value)
{
 8016300:	b5b0      	push	{r4, r5, r7, lr}
 8016302:	b086      	sub	sp, #24
 8016304:	af02      	add	r7, sp, #8
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	4639      	mov	r1, r7
 801630c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016310:	f7fb fb40 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8016314:	4604      	mov	r4, r0
 8016316:	6823      	ldr	r3, [r4, #0]
 8016318:	3368      	adds	r3, #104	; 0x68
 801631a:	681d      	ldr	r5, [r3, #0]
 801631c:	f7fb fb4a 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016320:	4603      	mov	r3, r0
 8016322:	9300      	str	r3, [sp, #0]
 8016324:	f240 230d 	movw	r3, #525	; 0x20d
 8016328:	4a06      	ldr	r2, [pc, #24]	; (8016344 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 801632a:	4907      	ldr	r1, [pc, #28]	; (8016348 <_ZN21MockCheckedActualCall31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x48>)
 801632c:	4620      	mov	r0, r4
 801632e:	47a8      	blx	r5
    return default_value;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	461a      	mov	r2, r3
 8016334:	463b      	mov	r3, r7
 8016336:	cb03      	ldmia	r3!, {r0, r1}
 8016338:	6010      	str	r0, [r2, #0]
 801633a:	6051      	str	r1, [r2, #4]
}
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	3710      	adds	r7, #16
 8016340:	46bd      	mov	sp, r7
 8016342:	bdb0      	pop	{r4, r5, r7, pc}
 8016344:	08022dc4 	.word	0x08022dc4
 8016348:	08022e0c 	.word	0x08022e0c

0801634c <_ZN21MockCheckedActualCall17returnDoubleValueEv>:

#endif

double MockCheckedActualCall::returnDoubleValue()
{
 801634c:	b580      	push	{r7, lr}
 801634e:	ed2d 8b02 	vpush	{d8}
 8016352:	b090      	sub	sp, #64	; 0x40
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
    return returnValue().getDoubleValue();
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	3354      	adds	r3, #84	; 0x54
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	f107 0208 	add.w	r2, r7, #8
 8016364:	6879      	ldr	r1, [r7, #4]
 8016366:	4610      	mov	r0, r2
 8016368:	4798      	blx	r3
 801636a:	f107 0308 	add.w	r3, r7, #8
 801636e:	4618      	mov	r0, r3
 8016370:	f005 f90a 	bl	801b588 <_ZNK14MockNamedValue14getDoubleValueEv>
 8016374:	eeb0 8a40 	vmov.f32	s16, s0
 8016378:	eef0 8a60 	vmov.f32	s17, s1
 801637c:	bf00      	nop
 801637e:	f107 0308 	add.w	r3, r7, #8
 8016382:	4618      	mov	r0, r3
 8016384:	f004 fc72 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8016388:	eeb0 7a48 	vmov.f32	s14, s16
 801638c:	eef0 7a68 	vmov.f32	s15, s17
}
 8016390:	eeb0 0a47 	vmov.f32	s0, s14
 8016394:	eef0 0a67 	vmov.f32	s1, s15
 8016398:	3740      	adds	r7, #64	; 0x40
 801639a:	46bd      	mov	sp, r7
 801639c:	ecbd 8b02 	vpop	{d8}
 80163a0:	bd80      	pop	{r7, pc}

080163a2 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd>:

double MockCheckedActualCall::returnDoubleValueOrDefault(double default_value)
{
 80163a2:	b580      	push	{r7, lr}
 80163a4:	b084      	sub	sp, #16
 80163a6:	af00      	add	r7, sp, #0
 80163a8:	60f8      	str	r0, [r7, #12]
 80163aa:	ed87 0b00 	vstr	d0, [r7]
    if (!hasReturnValue()) {
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	3350      	adds	r3, #80	; 0x50
 80163b4:	681b      	ldr	r3, [r3, #0]
 80163b6:	68f8      	ldr	r0, [r7, #12]
 80163b8:	4798      	blx	r3
 80163ba:	4603      	mov	r3, r0
 80163bc:	f083 0301 	eor.w	r3, r3, #1
 80163c0:	b2db      	uxtb	r3, r3
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d002      	beq.n	80163cc <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x2a>
        return default_value;
 80163c6:	ed97 7b00 	vldr	d7, [r7]
 80163ca:	e00a      	b.n	80163e2 <_ZN21MockCheckedActualCall26returnDoubleValueOrDefaultEd+0x40>
    }
    return returnDoubleValue();
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	3398      	adds	r3, #152	; 0x98
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	4798      	blx	r3
 80163d8:	eeb0 7a40 	vmov.f32	s14, s0
 80163dc:	eef0 7a60 	vmov.f32	s15, s1
 80163e0:	bf00      	nop
}
 80163e2:	eeb0 0a47 	vmov.f32	s0, s14
 80163e6:	eef0 0a67 	vmov.f32	s1, s15
 80163ea:	3710      	adds	r7, #16
 80163ec:	46bd      	mov	sp, r7
 80163ee:	bd80      	pop	{r7, pc}

080163f0 <_ZN21MockCheckedActualCall22returnUnsignedIntValueEv>:

unsigned int MockCheckedActualCall::returnUnsignedIntValue()
{
 80163f0:	b590      	push	{r4, r7, lr}
 80163f2:	b091      	sub	sp, #68	; 0x44
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	6078      	str	r0, [r7, #4]
    return returnValue().getUnsignedIntValue();
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	3354      	adds	r3, #84	; 0x54
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	f107 0208 	add.w	r2, r7, #8
 8016404:	6879      	ldr	r1, [r7, #4]
 8016406:	4610      	mov	r0, r2
 8016408:	4798      	blx	r3
 801640a:	f107 0308 	add.w	r3, r7, #8
 801640e:	4618      	mov	r0, r3
 8016410:	f004 ff08 	bl	801b224 <_ZNK14MockNamedValue19getUnsignedIntValueEv>
 8016414:	4604      	mov	r4, r0
 8016416:	bf00      	nop
 8016418:	f107 0308 	add.w	r3, r7, #8
 801641c:	4618      	mov	r0, r3
 801641e:	f004 fc25 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8016422:	4623      	mov	r3, r4
}
 8016424:	4618      	mov	r0, r3
 8016426:	3744      	adds	r7, #68	; 0x44
 8016428:	46bd      	mov	sp, r7
 801642a:	bd90      	pop	{r4, r7, pc}

0801642c <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockCheckedActualCall::returnUnsignedIntValueOrDefault(unsigned int default_value)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	3350      	adds	r3, #80	; 0x50
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	4798      	blx	r3
 8016442:	4603      	mov	r3, r0
 8016444:	f083 0301 	eor.w	r3, r3, #1
 8016448:	b2db      	uxtb	r3, r3
 801644a:	2b00      	cmp	r3, #0
 801644c:	d001      	beq.n	8016452 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x26>
        return default_value;
 801644e:	683b      	ldr	r3, [r7, #0]
 8016450:	e007      	b.n	8016462 <_ZN21MockCheckedActualCall31returnUnsignedIntValueOrDefaultEj+0x36>
    }
    return returnUnsignedIntValue();
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	3388      	adds	r3, #136	; 0x88
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	6878      	ldr	r0, [r7, #4]
 801645c:	4798      	blx	r3
 801645e:	4603      	mov	r3, r0
 8016460:	bf00      	nop
}
 8016462:	4618      	mov	r0, r3
 8016464:	3708      	adds	r7, #8
 8016466:	46bd      	mov	sp, r7
 8016468:	bd80      	pop	{r7, pc}

0801646a <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv>:

void * MockCheckedActualCall::returnPointerValueOrDefault(void * default_value)
{
 801646a:	b580      	push	{r7, lr}
 801646c:	b082      	sub	sp, #8
 801646e:	af00      	add	r7, sp, #0
 8016470:	6078      	str	r0, [r7, #4]
 8016472:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3350      	adds	r3, #80	; 0x50
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	4798      	blx	r3
 8016480:	4603      	mov	r3, r0
 8016482:	f083 0301 	eor.w	r3, r3, #1
 8016486:	b2db      	uxtb	r3, r3
 8016488:	2b00      	cmp	r3, #0
 801648a:	d001      	beq.n	8016490 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x26>
        return default_value;
 801648c:	683b      	ldr	r3, [r7, #0]
 801648e:	e007      	b.n	80164a0 <_ZN21MockCheckedActualCall27returnPointerValueOrDefaultEPv+0x36>
    }
    return returnPointerValue();
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	33a0      	adds	r3, #160	; 0xa0
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	4798      	blx	r3
 801649c:	4603      	mov	r3, r0
 801649e:	bf00      	nop
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3708      	adds	r7, #8
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <_ZN21MockCheckedActualCall18returnPointerValueEv>:

void * MockCheckedActualCall::returnPointerValue()
{
 80164a8:	b590      	push	{r4, r7, lr}
 80164aa:	b091      	sub	sp, #68	; 0x44
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
    return returnValue().getPointerValue();
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	3354      	adds	r3, #84	; 0x54
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	f107 0208 	add.w	r2, r7, #8
 80164bc:	6879      	ldr	r1, [r7, #4]
 80164be:	4610      	mov	r0, r2
 80164c0:	4798      	blx	r3
 80164c2:	f107 0308 	add.w	r3, r7, #8
 80164c6:	4618      	mov	r0, r3
 80164c8:	f005 f8e2 	bl	801b690 <_ZNK14MockNamedValue15getPointerValueEv>
 80164cc:	4604      	mov	r4, r0
 80164ce:	bf00      	nop
 80164d0:	f107 0308 	add.w	r3, r7, #8
 80164d4:	4618      	mov	r0, r3
 80164d6:	f004 fbc9 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80164da:	4623      	mov	r3, r4
}
 80164dc:	4618      	mov	r0, r3
 80164de:	3744      	adds	r7, #68	; 0x44
 80164e0:	46bd      	mov	sp, r7
 80164e2:	bd90      	pop	{r4, r7, pc}

080164e4 <_ZN21MockCheckedActualCall23returnConstPointerValueEv>:

const void * MockCheckedActualCall::returnConstPointerValue()
{
 80164e4:	b590      	push	{r4, r7, lr}
 80164e6:	b091      	sub	sp, #68	; 0x44
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
    return returnValue().getConstPointerValue();
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	3354      	adds	r3, #84	; 0x54
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	f107 0208 	add.w	r2, r7, #8
 80164f8:	6879      	ldr	r1, [r7, #4]
 80164fa:	4610      	mov	r0, r2
 80164fc:	4798      	blx	r3
 80164fe:	f107 0308 	add.w	r3, r7, #8
 8016502:	4618      	mov	r0, r3
 8016504:	f005 f8ec 	bl	801b6e0 <_ZNK14MockNamedValue20getConstPointerValueEv>
 8016508:	4604      	mov	r4, r0
 801650a:	bf00      	nop
 801650c:	f107 0308 	add.w	r3, r7, #8
 8016510:	4618      	mov	r0, r3
 8016512:	f004 fbab 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8016516:	4623      	mov	r3, r4
}
 8016518:	4618      	mov	r0, r3
 801651a:	3744      	adds	r7, #68	; 0x44
 801651c:	46bd      	mov	sp, r7
 801651e:	bd90      	pop	{r4, r7, pc}

08016520 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv>:

const void * MockCheckedActualCall::returnConstPointerValueOrDefault(const void * default_value)
{
 8016520:	b580      	push	{r7, lr}
 8016522:	b082      	sub	sp, #8
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
 8016528:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	3350      	adds	r3, #80	; 0x50
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	6878      	ldr	r0, [r7, #4]
 8016534:	4798      	blx	r3
 8016536:	4603      	mov	r3, r0
 8016538:	f083 0301 	eor.w	r3, r3, #1
 801653c:	b2db      	uxtb	r3, r3
 801653e:	2b00      	cmp	r3, #0
 8016540:	d001      	beq.n	8016546 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x26>
        return default_value;
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	e007      	b.n	8016556 <_ZN21MockCheckedActualCall32returnConstPointerValueOrDefaultEPKv+0x36>
    }
    return returnConstPointerValue();
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	33a8      	adds	r3, #168	; 0xa8
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	6878      	ldr	r0, [r7, #4]
 8016550:	4798      	blx	r3
 8016552:	4603      	mov	r3, r0
 8016554:	bf00      	nop
}
 8016556:	4618      	mov	r0, r3
 8016558:	3708      	adds	r7, #8
 801655a:	46bd      	mov	sp, r7
 801655c:	bd80      	pop	{r7, pc}

0801655e <_ZN21MockCheckedActualCall26returnFunctionPointerValueEv>:

void (*MockCheckedActualCall::returnFunctionPointerValue())()
{
 801655e:	b590      	push	{r4, r7, lr}
 8016560:	b091      	sub	sp, #68	; 0x44
 8016562:	af00      	add	r7, sp, #0
 8016564:	6078      	str	r0, [r7, #4]
    return returnValue().getFunctionPointerValue();
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	3354      	adds	r3, #84	; 0x54
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	f107 0208 	add.w	r2, r7, #8
 8016572:	6879      	ldr	r1, [r7, #4]
 8016574:	4610      	mov	r0, r2
 8016576:	4798      	blx	r3
 8016578:	f107 0308 	add.w	r3, r7, #8
 801657c:	4618      	mov	r0, r3
 801657e:	f005 f8d7 	bl	801b730 <_ZNK14MockNamedValue23getFunctionPointerValueEv>
 8016582:	4604      	mov	r4, r0
 8016584:	bf00      	nop
 8016586:	f107 0308 	add.w	r3, r7, #8
 801658a:	4618      	mov	r0, r3
 801658c:	f004 fb6e 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8016590:	4623      	mov	r3, r4
}
 8016592:	4618      	mov	r0, r3
 8016594:	3744      	adds	r7, #68	; 0x44
 8016596:	46bd      	mov	sp, r7
 8016598:	bd90      	pop	{r4, r7, pc}

0801659a <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockCheckedActualCall::returnFunctionPointerValueOrDefault(void (*default_value)()))()
{
 801659a:	b580      	push	{r7, lr}
 801659c:	b082      	sub	sp, #8
 801659e:	af00      	add	r7, sp, #0
 80165a0:	6078      	str	r0, [r7, #4]
 80165a2:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	3350      	adds	r3, #80	; 0x50
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	6878      	ldr	r0, [r7, #4]
 80165ae:	4798      	blx	r3
 80165b0:	4603      	mov	r3, r0
 80165b2:	f083 0301 	eor.w	r3, r3, #1
 80165b6:	b2db      	uxtb	r3, r3
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d001      	beq.n	80165c0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x26>
        return default_value;
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	e007      	b.n	80165d0 <_ZN21MockCheckedActualCall35returnFunctionPointerValueOrDefaultEPFvvE+0x36>
    }
    return returnFunctionPointerValue();
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	33b0      	adds	r3, #176	; 0xb0
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	4798      	blx	r3
 80165cc:	4603      	mov	r3, r0
 80165ce:	bf00      	nop
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	3708      	adds	r7, #8
 80165d4:	46bd      	mov	sp, r7
 80165d6:	bd80      	pop	{r7, pc}

080165d8 <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc>:

const char * MockCheckedActualCall::returnStringValueOrDefault(const char * default_value)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
 80165e0:	6039      	str	r1, [r7, #0]
    if (!hasReturnValue()) {
 80165e2:	687b      	ldr	r3, [r7, #4]
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	3350      	adds	r3, #80	; 0x50
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	6878      	ldr	r0, [r7, #4]
 80165ec:	4798      	blx	r3
 80165ee:	4603      	mov	r3, r0
 80165f0:	f083 0301 	eor.w	r3, r3, #1
 80165f4:	b2db      	uxtb	r3, r3
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d001      	beq.n	80165fe <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x26>
        return default_value;
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	e007      	b.n	801660e <_ZN21MockCheckedActualCall26returnStringValueOrDefaultEPKc+0x36>
    }
    return returnStringValue();
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	3394      	adds	r3, #148	; 0x94
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	4798      	blx	r3
 801660a:	4603      	mov	r3, r0
 801660c:	bf00      	nop
}
 801660e:	4618      	mov	r0, r3
 8016610:	3708      	adds	r7, #8
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}

08016616 <_ZN21MockCheckedActualCall17returnStringValueEv>:

const char * MockCheckedActualCall::returnStringValue()
{
 8016616:	b590      	push	{r4, r7, lr}
 8016618:	b091      	sub	sp, #68	; 0x44
 801661a:	af00      	add	r7, sp, #0
 801661c:	6078      	str	r0, [r7, #4]
    return returnValue().getStringValue();
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	3354      	adds	r3, #84	; 0x54
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f107 0208 	add.w	r2, r7, #8
 801662a:	6879      	ldr	r1, [r7, #4]
 801662c:	4610      	mov	r0, r2
 801662e:	4798      	blx	r3
 8016630:	f107 0308 	add.w	r3, r7, #8
 8016634:	4618      	mov	r0, r3
 8016636:	f005 f803 	bl	801b640 <_ZNK14MockNamedValue14getStringValueEv>
 801663a:	4604      	mov	r4, r0
 801663c:	bf00      	nop
 801663e:	f107 0308 	add.w	r3, r7, #8
 8016642:	4618      	mov	r0, r3
 8016644:	f004 fb12 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8016648:	4623      	mov	r3, r4
}
 801664a:	4618      	mov	r0, r3
 801664c:	3744      	adds	r7, #68	; 0x44
 801664e:	46bd      	mov	sp, r7
 8016650:	bd90      	pop	{r4, r7, pc}

08016652 <_ZN21MockCheckedActualCall14hasReturnValueEv>:

bool MockCheckedActualCall::hasReturnValue()
{
 8016652:	b590      	push	{r4, r7, lr}
 8016654:	b093      	sub	sp, #76	; 0x4c
 8016656:	af00      	add	r7, sp, #0
 8016658:	6078      	str	r0, [r7, #4]
    return ! returnValue().getName().isEmpty();
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	3354      	adds	r3, #84	; 0x54
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	f107 0210 	add.w	r2, r7, #16
 8016666:	6879      	ldr	r1, [r7, #4]
 8016668:	4610      	mov	r0, r2
 801666a:	4798      	blx	r3
 801666c:	f107 0308 	add.w	r3, r7, #8
 8016670:	f107 0210 	add.w	r2, r7, #16
 8016674:	4611      	mov	r1, r2
 8016676:	4618      	mov	r0, r3
 8016678:	f004 fd8e 	bl	801b198 <_ZNK14MockNamedValue7getNameEv>
 801667c:	f107 0308 	add.w	r3, r7, #8
 8016680:	4618      	mov	r0, r3
 8016682:	f7f4 f94b 	bl	800a91c <_ZNK12SimpleString7isEmptyEv>
 8016686:	4603      	mov	r3, r0
 8016688:	f083 0301 	eor.w	r3, r3, #1
 801668c:	b2dc      	uxtb	r4, r3
 801668e:	f107 0308 	add.w	r3, r7, #8
 8016692:	4618      	mov	r0, r3
 8016694:	f7f4 f953 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016698:	f107 0310 	add.w	r3, r7, #16
 801669c:	4618      	mov	r0, r3
 801669e:	f004 fae5 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80166a2:	4623      	mov	r3, r4
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	374c      	adds	r7, #76	; 0x4c
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd90      	pop	{r4, r7, pc}

080166ac <_ZN21MockCheckedActualCall8onObjectEPKv>:

MockActualCall& MockCheckedActualCall::onObject(const void* objectPtr)
{
 80166ac:	b590      	push	{r4, r7, lr}
 80166ae:	b095      	sub	sp, #84	; 0x54
 80166b0:	af02      	add	r7, sp, #8
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
    if(hasFailed()) {
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	681b      	ldr	r3, [r3, #0]
 80166ba:	33c0      	adds	r3, #192	; 0xc0
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	4798      	blx	r3
 80166c2:	4603      	mov	r3, r0
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d001      	beq.n	80166cc <_ZN21MockCheckedActualCall8onObjectEPKv+0x20>
        return *this;
 80166c8:	687c      	ldr	r4, [r7, #4]
 80166ca:	e053      	b.n	8016774 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    // Currently matching expectations are not discarded because the passed object
    // is ignored if not specifically set in the expectation

    potentiallyMatchingExpectations_.onlyKeepExpectationsOnObject(objectPtr);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	331c      	adds	r3, #28
 80166d0:	6839      	ldr	r1, [r7, #0]
 80166d2:	4618      	mov	r0, r3
 80166d4:	f003 f8ca 	bl	801986c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>

    if ((!matchingExpectation_) && potentiallyMatchingExpectations_.isEmpty()) {
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	699b      	ldr	r3, [r3, #24]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d109      	bne.n	80166f4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	331c      	adds	r3, #28
 80166e4:	4618      	mov	r0, r3
 80166e6:	f002 fe20 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 80166ea:	4603      	mov	r3, r0
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d001      	beq.n	80166f4 <_ZN21MockCheckedActualCall8onObjectEPKv+0x48>
 80166f0:	2301      	movs	r3, #1
 80166f2:	e000      	b.n	80166f6 <_ZN21MockCheckedActualCall8onObjectEPKv+0x4a>
 80166f4:	2300      	movs	r3, #0
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d02c      	beq.n	8016754 <_ZN21MockCheckedActualCall8onObjectEPKv+0xa8>
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	33cc      	adds	r3, #204	; 0xcc
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	4798      	blx	r3
 8016706:	4604      	mov	r4, r0
 8016708:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801670c:	6879      	ldr	r1, [r7, #4]
 801670e:	4618      	mov	r0, r3
 8016710:	f7fe fd3f 	bl	8015192 <_ZNK21MockCheckedActualCall7getNameEv>
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016718:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801671c:	f107 000c 	add.w	r0, r7, #12
 8016720:	9300      	str	r3, [sp, #0]
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	4621      	mov	r1, r4
 8016726:	f004 f9fb 	bl	801ab20 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>
 801672a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801672e:	4618      	mov	r0, r3
 8016730:	f7f4 f905 	bl	800a93e <_ZN12SimpleStringD1Ev>
        failTest(failure);
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	33dc      	adds	r3, #220	; 0xdc
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	f107 020c 	add.w	r2, r7, #12
 8016740:	4611      	mov	r1, r2
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	4798      	blx	r3
        return *this;
 8016746:	687c      	ldr	r4, [r7, #4]
        MockUnexpectedObjectFailure failure(getTest(), getName(), objectPtr, allExpectations_);
 8016748:	f107 030c 	add.w	r3, r7, #12
 801674c:	4618      	mov	r0, r3
 801674e:	f000 ffa7 	bl	80176a0 <_ZN27MockUnexpectedObjectFailureD1Ev>
 8016752:	e00f      	b.n	8016774 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc8>
    }

    potentiallyMatchingExpectations_.wasPassedToObject();
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	331c      	adds	r3, #28
 8016758:	4618      	mov	r0, r3
 801675a:	f003 f9a7 	bl	8019aac <_ZN21MockExpectedCallsList17wasPassedToObjectEv>

    if (!matchingExpectation_) {
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	699b      	ldr	r3, [r3, #24]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d105      	bne.n	8016772 <_ZN21MockCheckedActualCall8onObjectEPKv+0xc6>
        completeCallWhenMatchIsFound();
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	33d8      	adds	r3, #216	; 0xd8
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	6878      	ldr	r0, [r7, #4]
 8016770:	4798      	blx	r3
    }

    return *this;
 8016772:	687c      	ldr	r4, [r7, #4]
 8016774:	4623      	mov	r3, r4
}
 8016776:	4618      	mov	r0, r3
 8016778:	374c      	adds	r7, #76	; 0x4c
 801677a:	46bd      	mov	sp, r7
 801677c:	bd90      	pop	{r4, r7, pc}
	...

08016780 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv>:

void MockCheckedActualCall::addOutputParameter(const SimpleString& name, const SimpleString& type, void* ptr)
{
 8016780:	b590      	push	{r4, r7, lr}
 8016782:	b087      	sub	sp, #28
 8016784:	af00      	add	r7, sp, #0
 8016786:	60f8      	str	r0, [r7, #12]
 8016788:	60b9      	str	r1, [r7, #8]
 801678a:	607a      	str	r2, [r7, #4]
 801678c:	603b      	str	r3, [r7, #0]
    MockOutputParametersListNode* newNode = new MockOutputParametersListNode(name, type, ptr);
 801678e:	f240 2282 	movw	r2, #642	; 0x282
 8016792:	4913      	ldr	r1, [pc, #76]	; (80167e0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x60>)
 8016794:	2018      	movs	r0, #24
 8016796:	f7f1 f957 	bl	8007a48 <_ZnwjPKci>
 801679a:	4604      	mov	r4, r0
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	687a      	ldr	r2, [r7, #4]
 80167a0:	68b9      	ldr	r1, [r7, #8]
 80167a2:	4620      	mov	r0, r4
 80167a4:	f7fe fa48 	bl	8014c38 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeC1ERK12SimpleStringS3_Pv>
 80167a8:	613c      	str	r4, [r7, #16]

    if (outputParameterExpectations_ == NULLPTR)
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	d103      	bne.n	80167ba <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x3a>
        outputParameterExpectations_ = newNode;
 80167b2:	68fb      	ldr	r3, [r7, #12]
 80167b4:	693a      	ldr	r2, [r7, #16]
 80167b6:	629a      	str	r2, [r3, #40]	; 0x28
    else {
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
        while (lastNode->next_) lastNode = lastNode->next_;
        lastNode->next_ = newNode;
    }
}
 80167b8:	e00d      	b.n	80167d6 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x56>
        MockOutputParametersListNode* lastNode = outputParameterExpectations_;
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167be:	617b      	str	r3, [r7, #20]
        while (lastNode->next_) lastNode = lastNode->next_;
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	695b      	ldr	r3, [r3, #20]
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d003      	beq.n	80167d0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x50>
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	695b      	ldr	r3, [r3, #20]
 80167cc:	617b      	str	r3, [r7, #20]
 80167ce:	e7f7      	b.n	80167c0 <_ZN21MockCheckedActualCall18addOutputParameterERK12SimpleStringS2_Pv+0x40>
        lastNode->next_ = newNode;
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	693a      	ldr	r2, [r7, #16]
 80167d4:	615a      	str	r2, [r3, #20]
}
 80167d6:	bf00      	nop
 80167d8:	371c      	adds	r7, #28
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd90      	pop	{r4, r7, pc}
 80167de:	bf00      	nop
 80167e0:	08022dc4 	.word	0x08022dc4

080167e4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>:
    class MockOutputParametersListNode
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b082      	sub	sp, #8
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	6078      	str	r0, [r7, #4]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	3308      	adds	r3, #8
 80167f0:	4618      	mov	r0, r3
 80167f2:	f7f4 f8a4 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	4618      	mov	r0, r3
 80167fa:	f7f4 f8a0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	4618      	mov	r0, r3
 8016802:	3708      	adds	r7, #8
 8016804:	46bd      	mov	sp, r7
 8016806:	bd80      	pop	{r7, pc}

08016808 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv>:

void MockCheckedActualCall::cleanUpOutputParameterList()
{
 8016808:	b590      	push	{r4, r7, lr}
 801680a:	b085      	sub	sp, #20
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]
    MockOutputParametersListNode* current = outputParameterExpectations_;
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016814:	60fb      	str	r3, [r7, #12]
    MockOutputParametersListNode* toBeDeleted = NULLPTR;
 8016816:	2300      	movs	r3, #0
 8016818:	60bb      	str	r3, [r7, #8]

    while (current) {
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d012      	beq.n	8016846 <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x3e>
        toBeDeleted = current;
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	60bb      	str	r3, [r7, #8]
        outputParameterExpectations_ = current = current->next_;
 8016824:	68fb      	ldr	r3, [r7, #12]
 8016826:	695b      	ldr	r3, [r3, #20]
 8016828:	60fb      	str	r3, [r7, #12]
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	68fa      	ldr	r2, [r7, #12]
 801682e:	629a      	str	r2, [r3, #40]	; 0x28
        delete toBeDeleted;
 8016830:	68bc      	ldr	r4, [r7, #8]
 8016832:	2c00      	cmp	r4, #0
 8016834:	d0f1      	beq.n	801681a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
 8016836:	4620      	mov	r0, r4
 8016838:	f7ff ffd4 	bl	80167e4 <_ZN21MockCheckedActualCall28MockOutputParametersListNodeD1Ev>
 801683c:	2118      	movs	r1, #24
 801683e:	4620      	mov	r0, r4
 8016840:	f7f1 f916 	bl	8007a70 <_ZdlPvj>
    while (current) {
 8016844:	e7e9      	b.n	801681a <_ZN21MockCheckedActualCall26cleanUpOutputParameterListEv+0x12>
    }
}
 8016846:	bf00      	nop
 8016848:	3714      	adds	r7, #20
 801684a:	46bd      	mov	sp, r7
 801684c:	bd90      	pop	{r4, r7, pc}
	...

08016850 <_ZN19MockActualCallTraceC1Ev>:


MockActualCallTrace::MockActualCallTrace()
 8016850:	b580      	push	{r7, lr}
 8016852:	b082      	sub	sp, #8
 8016854:	af00      	add	r7, sp, #0
 8016856:	6078      	str	r0, [r7, #4]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	4618      	mov	r0, r3
 801685c:	f7fe fc6a 	bl	8015134 <_ZN14MockActualCallC1Ev>
 8016860:	4a06      	ldr	r2, [pc, #24]	; (801687c <_ZN19MockActualCallTraceC1Ev+0x2c>)
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	601a      	str	r2, [r3, #0]
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	3304      	adds	r3, #4
 801686a:	4905      	ldr	r1, [pc, #20]	; (8016880 <_ZN19MockActualCallTraceC1Ev+0x30>)
 801686c:	4618      	mov	r0, r3
 801686e:	f7f3 fcae 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
{
}
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	4618      	mov	r0, r3
 8016876:	3708      	adds	r7, #8
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}
 801687c:	08024ffc 	.word	0x08024ffc
 8016880:	08022dac 	.word	0x08022dac

08016884 <_ZN19MockActualCallTraceD1Ev>:

MockActualCallTrace::~MockActualCallTrace()
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
 801688c:	4a08      	ldr	r2, [pc, #32]	; (80168b0 <_ZN19MockActualCallTraceD1Ev+0x2c>)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	601a      	str	r2, [r3, #0]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	3304      	adds	r3, #4
 8016896:	4618      	mov	r0, r3
 8016898:	f7f4 f851 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	4618      	mov	r0, r3
 80168a0:	f7fe fc58 	bl	8015154 <_ZN14MockActualCallD1Ev>
{
}
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	4618      	mov	r0, r3
 80168a8:	3708      	adds	r7, #8
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	08024ffc 	.word	0x08024ffc

080168b4 <_ZN19MockActualCallTraceD0Ev>:
MockActualCallTrace::~MockActualCallTrace()
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
}
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f7ff ffe1 	bl	8016884 <_ZN19MockActualCallTraceD1Ev>
 80168c2:	210c      	movs	r1, #12
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f7f1 f8d3 	bl	8007a70 <_ZdlPvj>
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	4618      	mov	r0, r3
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZN19MockActualCallTrace8withNameERK12SimpleString>:

MockActualCall& MockActualCallTrace::withName(const SimpleString& name)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
    traceBuffer_ += "\nFunction name:";
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	3304      	adds	r3, #4
 80168e2:	4907      	ldr	r1, [pc, #28]	; (8016900 <_ZN19MockActualCallTrace8withNameERK12SimpleString+0x2c>)
 80168e4:	4618      	mov	r0, r3
 80168e6:	f7f4 f8b9 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	3304      	adds	r3, #4
 80168ee:	6839      	ldr	r1, [r7, #0]
 80168f0:	4618      	mov	r0, r3
 80168f2:	f7f4 f8a1 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    return *this;
 80168f6:	687b      	ldr	r3, [r7, #4]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}
 8016900:	08022eb8 	.word	0x08022eb8

08016904 <_ZN19MockActualCallTrace13withCallOrderEj>:

MockActualCall& MockActualCallTrace::withCallOrder(unsigned int callOrder)
{
 8016904:	b590      	push	{r4, r7, lr}
 8016906:	b085      	sub	sp, #20
 8016908:	af00      	add	r7, sp, #0
 801690a:	6078      	str	r0, [r7, #4]
 801690c:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " withCallOrder:";
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	3304      	adds	r3, #4
 8016912:	490e      	ldr	r1, [pc, #56]	; (801694c <_ZN19MockActualCallTrace13withCallOrderEj+0x48>)
 8016914:	4618      	mov	r0, r3
 8016916:	f7f4 f8a1 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(callOrder);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	1d1c      	adds	r4, r3, #4
 801691e:	f107 0308 	add.w	r3, r7, #8
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	4618      	mov	r0, r3
 8016926:	f7f4 fd39 	bl	800b39c <_Z10StringFromj>
 801692a:	f107 0308 	add.w	r3, r7, #8
 801692e:	4619      	mov	r1, r3
 8016930:	4620      	mov	r0, r4
 8016932:	f7f4 f881 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016936:	f107 0308 	add.w	r3, r7, #8
 801693a:	4618      	mov	r0, r3
 801693c:	f7f3 ffff 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016940:	687b      	ldr	r3, [r7, #4]
}
 8016942:	4618      	mov	r0, r3
 8016944:	3714      	adds	r7, #20
 8016946:	46bd      	mov	sp, r7
 8016948:	bd90      	pop	{r4, r7, pc}
 801694a:	bf00      	nop
 801694c:	08022ec8 	.word	0x08022ec8

08016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>:

void MockActualCallTrace::addParameterName(const SimpleString& name)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " ";
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	3304      	adds	r3, #4
 801695e:	490a      	ldr	r1, [pc, #40]	; (8016988 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x38>)
 8016960:	4618      	mov	r0, r3
 8016962:	f7f4 f87b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += name;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	3304      	adds	r3, #4
 801696a:	6839      	ldr	r1, [r7, #0]
 801696c:	4618      	mov	r0, r3
 801696e:	f7f4 f863 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    traceBuffer_ += ":";
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	3304      	adds	r3, #4
 8016976:	4905      	ldr	r1, [pc, #20]	; (801698c <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString+0x3c>)
 8016978:	4618      	mov	r0, r3
 801697a:	f7f4 f86f 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
}
 801697e:	bf00      	nop
 8016980:	3708      	adds	r7, #8
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	08022ed8 	.word	0x08022ed8
 801698c:	08022edc 	.word	0x08022edc

08016990 <_ZN19MockActualCallTrace17withBoolParameterERK12SimpleStringb>:

MockActualCall& MockActualCallTrace::withBoolParameter(const SimpleString& name, bool value)
{
 8016990:	b590      	push	{r4, r7, lr}
 8016992:	b087      	sub	sp, #28
 8016994:	af00      	add	r7, sp, #0
 8016996:	60f8      	str	r0, [r7, #12]
 8016998:	60b9      	str	r1, [r7, #8]
 801699a:	4613      	mov	r3, r2
 801699c:	71fb      	strb	r3, [r7, #7]
    addParameterName(name);
 801699e:	68b9      	ldr	r1, [r7, #8]
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	f7ff ffd5 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	1d1c      	adds	r4, r3, #4
 80169aa:	f107 0310 	add.w	r3, r7, #16
 80169ae:	79fa      	ldrb	r2, [r7, #7]
 80169b0:	4611      	mov	r1, r2
 80169b2:	4618      	mov	r0, r3
 80169b4:	f7f4 fa34 	bl	800ae20 <_Z10StringFromb>
 80169b8:	f107 0310 	add.w	r3, r7, #16
 80169bc:	4619      	mov	r1, r3
 80169be:	4620      	mov	r0, r4
 80169c0:	f7f4 f83a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 80169c4:	f107 0310 	add.w	r3, r7, #16
 80169c8:	4618      	mov	r0, r3
 80169ca:	f7f3 ffb8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 80169ce:	68fb      	ldr	r3, [r7, #12]
}
 80169d0:	4618      	mov	r0, r3
 80169d2:	371c      	adds	r7, #28
 80169d4:	46bd      	mov	sp, r7
 80169d6:	bd90      	pop	{r4, r7, pc}

080169d8 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj>:

MockActualCall& MockActualCallTrace::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 80169d8:	b590      	push	{r4, r7, lr}
 80169da:	b08f      	sub	sp, #60	; 0x3c
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 80169e4:	68b9      	ldr	r1, [r7, #8]
 80169e6:	68f8      	ldr	r0, [r7, #12]
 80169e8:	f7ff ffb2 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	1d1c      	adds	r4, r3, #4
 80169f0:	f107 0320 	add.w	r3, r7, #32
 80169f4:	6879      	ldr	r1, [r7, #4]
 80169f6:	4618      	mov	r0, r3
 80169f8:	f7f4 fcd0 	bl	800b39c <_Z10StringFromj>
 80169fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a00:	491f      	ldr	r1, [pc, #124]	; (8016a80 <_ZN19MockActualCallTrace24withUnsignedIntParameterERK12SimpleStringj+0xa8>)
 8016a02:	4618      	mov	r0, r3
 8016a04:	f7f3 fbe3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8016a08:	f107 0318 	add.w	r3, r7, #24
 8016a0c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016a10:	f107 0120 	add.w	r1, r7, #32
 8016a14:	4618      	mov	r0, r3
 8016a16:	f7f3 fff4 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016a1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a1e:	6879      	ldr	r1, [r7, #4]
 8016a20:	4618      	mov	r0, r3
 8016a22:	f7f4 fb5f 	bl	800b0e4 <_Z30BracketsFormattedHexStringFromj>
 8016a26:	f107 0310 	add.w	r3, r7, #16
 8016a2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016a2e:	f107 0118 	add.w	r1, r7, #24
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7f3 ffe5 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016a38:	f107 0310 	add.w	r3, r7, #16
 8016a3c:	4619      	mov	r1, r3
 8016a3e:	4620      	mov	r0, r4
 8016a40:	f7f3 fffa 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016a44:	f107 0310 	add.w	r3, r7, #16
 8016a48:	4618      	mov	r0, r3
 8016a4a:	f7f3 ff78 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016a4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016a52:	4618      	mov	r0, r3
 8016a54:	f7f3 ff73 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016a58:	f107 0318 	add.w	r3, r7, #24
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7f3 ff6e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7f3 ff69 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016a6c:	f107 0320 	add.w	r3, r7, #32
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7f3 ff64 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016a76:	68fb      	ldr	r3, [r7, #12]
}
 8016a78:	4618      	mov	r0, r3
 8016a7a:	373c      	adds	r7, #60	; 0x3c
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	bd90      	pop	{r4, r7, pc}
 8016a80:	08022ed8 	.word	0x08022ed8

08016a84 <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi>:

MockActualCall& MockActualCallTrace::withIntParameter(const SimpleString& name, int value)
{
 8016a84:	b590      	push	{r4, r7, lr}
 8016a86:	b08f      	sub	sp, #60	; 0x3c
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	60f8      	str	r0, [r7, #12]
 8016a8c:	60b9      	str	r1, [r7, #8]
 8016a8e:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016a90:	68b9      	ldr	r1, [r7, #8]
 8016a92:	68f8      	ldr	r0, [r7, #12]
 8016a94:	f7ff ff5c 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	1d1c      	adds	r4, r3, #4
 8016a9c:	f107 0320 	add.w	r3, r7, #32
 8016aa0:	6879      	ldr	r1, [r7, #4]
 8016aa2:	4618      	mov	r0, r3
 8016aa4:	f7f4 fa12 	bl	800aecc <_Z10StringFromi>
 8016aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016aac:	491f      	ldr	r1, [pc, #124]	; (8016b2c <_ZN19MockActualCallTrace16withIntParameterERK12SimpleStringi+0xa8>)
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7f3 fb8d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8016ab4:	f107 0318 	add.w	r3, r7, #24
 8016ab8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016abc:	f107 0120 	add.w	r1, r7, #32
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7f3 ff9e 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016ac6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016aca:	6879      	ldr	r1, [r7, #4]
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7f4 faed 	bl	800b0ac <_Z30BracketsFormattedHexStringFromi>
 8016ad2:	f107 0310 	add.w	r3, r7, #16
 8016ad6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016ada:	f107 0118 	add.w	r1, r7, #24
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f3 ff8f 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016ae4:	f107 0310 	add.w	r3, r7, #16
 8016ae8:	4619      	mov	r1, r3
 8016aea:	4620      	mov	r0, r4
 8016aec:	f7f3 ffa4 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016af0:	f107 0310 	add.w	r3, r7, #16
 8016af4:	4618      	mov	r0, r3
 8016af6:	f7f3 ff22 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7f3 ff1d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016b04:	f107 0318 	add.w	r3, r7, #24
 8016b08:	4618      	mov	r0, r3
 8016b0a:	f7f3 ff18 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016b0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7f3 ff13 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016b18:	f107 0320 	add.w	r3, r7, #32
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	f7f3 ff0e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016b22:	68fb      	ldr	r3, [r7, #12]
}
 8016b24:	4618      	mov	r0, r3
 8016b26:	373c      	adds	r7, #60	; 0x3c
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd90      	pop	{r4, r7, pc}
 8016b2c:	08022ed8 	.word	0x08022ed8

08016b30 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm>:

MockActualCall& MockActualCallTrace::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8016b30:	b590      	push	{r4, r7, lr}
 8016b32:	b08f      	sub	sp, #60	; 0x3c
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	60f8      	str	r0, [r7, #12]
 8016b38:	60b9      	str	r1, [r7, #8]
 8016b3a:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016b3c:	68b9      	ldr	r1, [r7, #8]
 8016b3e:	68f8      	ldr	r0, [r7, #12]
 8016b40:	f7ff ff06 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	1d1c      	adds	r4, r3, #4
 8016b48:	f107 0320 	add.w	r3, r7, #32
 8016b4c:	6879      	ldr	r1, [r7, #4]
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7f4 fc36 	bl	800b3c0 <_Z10StringFromm>
 8016b54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016b58:	491f      	ldr	r1, [pc, #124]	; (8016bd8 <_ZN19MockActualCallTrace28withUnsignedLongIntParameterERK12SimpleStringm+0xa8>)
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7f3 fb37 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8016b60:	f107 0318 	add.w	r3, r7, #24
 8016b64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016b68:	f107 0120 	add.w	r1, r7, #32
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7f3 ff48 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016b76:	6879      	ldr	r1, [r7, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7f4 faeb 	bl	800b154 <_Z30BracketsFormattedHexStringFromm>
 8016b7e:	f107 0310 	add.w	r3, r7, #16
 8016b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016b86:	f107 0118 	add.w	r1, r7, #24
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7f3 ff39 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016b90:	f107 0310 	add.w	r3, r7, #16
 8016b94:	4619      	mov	r1, r3
 8016b96:	4620      	mov	r0, r4
 8016b98:	f7f3 ff4e 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016b9c:	f107 0310 	add.w	r3, r7, #16
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7f3 fecc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016ba6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7f3 fec7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016bb0:	f107 0318 	add.w	r3, r7, #24
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f7f3 fec2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f7f3 febd 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016bc4:	f107 0320 	add.w	r3, r7, #32
 8016bc8:	4618      	mov	r0, r3
 8016bca:	f7f3 feb8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016bce:	68fb      	ldr	r3, [r7, #12]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	373c      	adds	r7, #60	; 0x3c
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd90      	pop	{r4, r7, pc}
 8016bd8:	08022ed8 	.word	0x08022ed8

08016bdc <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl>:

MockActualCall& MockActualCallTrace::withLongIntParameter(const SimpleString& name, long int value)
{
 8016bdc:	b590      	push	{r4, r7, lr}
 8016bde:	b08f      	sub	sp, #60	; 0x3c
 8016be0:	af00      	add	r7, sp, #0
 8016be2:	60f8      	str	r0, [r7, #12]
 8016be4:	60b9      	str	r1, [r7, #8]
 8016be6:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016be8:	68b9      	ldr	r1, [r7, #8]
 8016bea:	68f8      	ldr	r0, [r7, #12]
 8016bec:	f7ff feb0 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value) + " " + BracketsFormattedHexStringFrom(value);
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	1d1c      	adds	r4, r3, #4
 8016bf4:	f107 0320 	add.w	r3, r7, #32
 8016bf8:	6879      	ldr	r1, [r7, #4]
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7f4 f978 	bl	800aef0 <_Z10StringFroml>
 8016c00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c04:	491f      	ldr	r1, [pc, #124]	; (8016c84 <_ZN19MockActualCallTrace20withLongIntParameterERK12SimpleStringl+0xa8>)
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7f3 fae1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8016c0c:	f107 0318 	add.w	r3, r7, #24
 8016c10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8016c14:	f107 0120 	add.w	r1, r7, #32
 8016c18:	4618      	mov	r0, r3
 8016c1a:	f7f3 fef2 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c22:	6879      	ldr	r1, [r7, #4]
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7f4 fa79 	bl	800b11c <_Z30BracketsFormattedHexStringFroml>
 8016c2a:	f107 0310 	add.w	r3, r7, #16
 8016c2e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8016c32:	f107 0118 	add.w	r1, r7, #24
 8016c36:	4618      	mov	r0, r3
 8016c38:	f7f3 fee3 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 8016c3c:	f107 0310 	add.w	r3, r7, #16
 8016c40:	4619      	mov	r1, r3
 8016c42:	4620      	mov	r0, r4
 8016c44:	f7f3 fef8 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016c48:	f107 0310 	add.w	r3, r7, #16
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	f7f3 fe76 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016c52:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c56:	4618      	mov	r0, r3
 8016c58:	f7f3 fe71 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016c5c:	f107 0318 	add.w	r3, r7, #24
 8016c60:	4618      	mov	r0, r3
 8016c62:	f7f3 fe6c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016c66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	f7f3 fe67 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8016c70:	f107 0320 	add.w	r3, r7, #32
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7f3 fe62 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	373c      	adds	r7, #60	; 0x3c
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd90      	pop	{r4, r7, pc}
 8016c84:	08022ed8 	.word	0x08022ed8

08016c88 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
}

#else

MockActualCall& MockActualCallTrace::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8016c88:	b5b0      	push	{r4, r5, r7, lr}
 8016c8a:	b086      	sub	sp, #24
 8016c8c:	af02      	add	r7, sp, #8
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	60b9      	str	r1, [r7, #8]
 8016c92:	4639      	mov	r1, r7
 8016c94:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8016c98:	f7fa fe7c 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	6823      	ldr	r3, [r4, #0]
 8016ca0:	3368      	adds	r3, #104	; 0x68
 8016ca2:	681d      	ldr	r5, [r3, #0]
 8016ca4:	f7fa fe86 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	9300      	str	r3, [sp, #0]
 8016cac:	f240 23ee 	movw	r3, #750	; 0x2ee
 8016cb0:	4a04      	ldr	r2, [pc, #16]	; (8016cc4 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8016cb2:	4905      	ldr	r1, [pc, #20]	; (8016cc8 <_ZN19MockActualCallTrace32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x40>)
 8016cb4:	4620      	mov	r0, r4
 8016cb6:	47a8      	blx	r5
    return *this;
 8016cb8:	68fb      	ldr	r3, [r7, #12]
}
 8016cba:	4618      	mov	r0, r3
 8016cbc:	3710      	adds	r7, #16
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8016cc2:	bf00      	nop
 8016cc4:	08022dc4 	.word	0x08022dc4
 8016cc8:	08022de0 	.word	0x08022de0

08016ccc <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:

MockActualCall& MockActualCallTrace::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8016ccc:	b5b0      	push	{r4, r5, r7, lr}
 8016cce:	b086      	sub	sp, #24
 8016cd0:	af02      	add	r7, sp, #8
 8016cd2:	60f8      	str	r0, [r7, #12]
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	4639      	mov	r1, r7
 8016cd8:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8016cdc:	f7fa fe5a 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8016ce0:	4604      	mov	r4, r0
 8016ce2:	6823      	ldr	r3, [r4, #0]
 8016ce4:	3368      	adds	r3, #104	; 0x68
 8016ce6:	681d      	ldr	r5, [r3, #0]
 8016ce8:	f7fa fe64 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8016cec:	4603      	mov	r3, r0
 8016cee:	9300      	str	r3, [sp, #0]
 8016cf0:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8016cf4:	4a04      	ldr	r2, [pc, #16]	; (8016d08 <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8016cf6:	4905      	ldr	r1, [pc, #20]	; (8016d0c <_ZN19MockActualCallTrace24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x40>)
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	47a8      	blx	r5
    return *this;
 8016cfc:	68fb      	ldr	r3, [r7, #12]
}
 8016cfe:	4618      	mov	r0, r3
 8016d00:	3710      	adds	r7, #16
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bdb0      	pop	{r4, r5, r7, pc}
 8016d06:	bf00      	nop
 8016d08:	08022dc4 	.word	0x08022dc4
 8016d0c:	08022e0c 	.word	0x08022e0c

08016d10 <_ZN19MockActualCallTrace19withDoubleParameterERK12SimpleStringd>:

#endif

MockActualCall& MockActualCallTrace::withDoubleParameter(const SimpleString& name, double value)
{
 8016d10:	b590      	push	{r4, r7, lr}
 8016d12:	b087      	sub	sp, #28
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	60f8      	str	r0, [r7, #12]
 8016d18:	60b9      	str	r1, [r7, #8]
 8016d1a:	ed87 0b00 	vstr	d0, [r7]
    addParameterName(name);
 8016d1e:	68b9      	ldr	r1, [r7, #8]
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	f7ff fe15 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	1d1c      	adds	r4, r3, #4
 8016d2a:	f107 0310 	add.w	r3, r7, #16
 8016d2e:	2106      	movs	r1, #6
 8016d30:	ed97 0b00 	vldr	d0, [r7]
 8016d34:	4618      	mov	r0, r3
 8016d36:	f7f4 fac7 	bl	800b2c8 <_Z10StringFromdi>
 8016d3a:	f107 0310 	add.w	r3, r7, #16
 8016d3e:	4619      	mov	r1, r3
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7f3 fe79 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016d46:	f107 0310 	add.w	r3, r7, #16
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	f7f3 fdf7 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016d50:	68fb      	ldr	r3, [r7, #12]
}
 8016d52:	4618      	mov	r0, r3
 8016d54:	371c      	adds	r7, #28
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd90      	pop	{r4, r7, pc}

08016d5a <_ZN19MockActualCallTrace19withStringParameterERK12SimpleStringPKc>:

MockActualCall& MockActualCallTrace::withStringParameter(const SimpleString& name, const char* value)
{
 8016d5a:	b590      	push	{r4, r7, lr}
 8016d5c:	b087      	sub	sp, #28
 8016d5e:	af00      	add	r7, sp, #0
 8016d60:	60f8      	str	r0, [r7, #12]
 8016d62:	60b9      	str	r1, [r7, #8]
 8016d64:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016d66:	68b9      	ldr	r1, [r7, #8]
 8016d68:	68f8      	ldr	r0, [r7, #12]
 8016d6a:	f7ff fdf1 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	1d1c      	adds	r4, r3, #4
 8016d72:	f107 0310 	add.w	r3, r7, #16
 8016d76:	6879      	ldr	r1, [r7, #4]
 8016d78:	4618      	mov	r0, r3
 8016d7a:	f7f4 f86d 	bl	800ae58 <_Z10StringFromPKc>
 8016d7e:	f107 0310 	add.w	r3, r7, #16
 8016d82:	4619      	mov	r1, r3
 8016d84:	4620      	mov	r0, r4
 8016d86:	f7f3 fe57 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016d8a:	f107 0310 	add.w	r3, r7, #16
 8016d8e:	4618      	mov	r0, r3
 8016d90:	f7f3 fdd5 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016d94:	68fb      	ldr	r3, [r7, #12]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	371c      	adds	r7, #28
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd90      	pop	{r4, r7, pc}

08016d9e <_ZN19MockActualCallTrace20withPointerParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withPointerParameter(const SimpleString& name, void* value)
{
 8016d9e:	b590      	push	{r4, r7, lr}
 8016da0:	b087      	sub	sp, #28
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	60f8      	str	r0, [r7, #12]
 8016da6:	60b9      	str	r1, [r7, #8]
 8016da8:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016daa:	68b9      	ldr	r1, [r7, #8]
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f7ff fdcf 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016db2:	68fb      	ldr	r3, [r7, #12]
 8016db4:	1d1c      	adds	r4, r3, #4
 8016db6:	f107 0310 	add.w	r3, r7, #16
 8016dba:	6879      	ldr	r1, [r7, #4]
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7f4 f8a9 	bl	800af14 <_Z10StringFromPKv>
 8016dc2:	f107 0310 	add.w	r3, r7, #16
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	4620      	mov	r0, r4
 8016dca:	f7f3 fe35 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016dce:	f107 0310 	add.w	r3, r7, #16
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	f7f3 fdb3 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	371c      	adds	r7, #28
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd90      	pop	{r4, r7, pc}

08016de2 <_ZN19MockActualCallTrace25withConstPointerParameterERK12SimpleStringPKv>:

MockActualCall& MockActualCallTrace::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8016de2:	b590      	push	{r4, r7, lr}
 8016de4:	b087      	sub	sp, #28
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	60f8      	str	r0, [r7, #12]
 8016dea:	60b9      	str	r1, [r7, #8]
 8016dec:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016dee:	68b9      	ldr	r1, [r7, #8]
 8016df0:	68f8      	ldr	r0, [r7, #12]
 8016df2:	f7ff fdad 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	1d1c      	adds	r4, r3, #4
 8016dfa:	f107 0310 	add.w	r3, r7, #16
 8016dfe:	6879      	ldr	r1, [r7, #4]
 8016e00:	4618      	mov	r0, r3
 8016e02:	f7f4 f887 	bl	800af14 <_Z10StringFromPKv>
 8016e06:	f107 0310 	add.w	r3, r7, #16
 8016e0a:	4619      	mov	r1, r3
 8016e0c:	4620      	mov	r0, r4
 8016e0e:	f7f3 fe13 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016e12:	f107 0310 	add.w	r3, r7, #16
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7f3 fd91 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016e1c:	68fb      	ldr	r3, [r7, #12]
}
 8016e1e:	4618      	mov	r0, r3
 8016e20:	371c      	adds	r7, #28
 8016e22:	46bd      	mov	sp, r7
 8016e24:	bd90      	pop	{r4, r7, pc}

08016e26 <_ZN19MockActualCallTrace28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockActualCall& MockActualCallTrace::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 8016e26:	b590      	push	{r4, r7, lr}
 8016e28:	b087      	sub	sp, #28
 8016e2a:	af00      	add	r7, sp, #0
 8016e2c:	60f8      	str	r0, [r7, #12]
 8016e2e:	60b9      	str	r1, [r7, #8]
 8016e30:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016e32:	68b9      	ldr	r1, [r7, #8]
 8016e34:	68f8      	ldr	r0, [r7, #12]
 8016e36:	f7ff fd8b 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	1d1c      	adds	r4, r3, #4
 8016e3e:	f107 0310 	add.w	r3, r7, #16
 8016e42:	6879      	ldr	r1, [r7, #4]
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f4 f88f 	bl	800af68 <_Z10StringFromPFvvE>
 8016e4a:	f107 0310 	add.w	r3, r7, #16
 8016e4e:	4619      	mov	r1, r3
 8016e50:	4620      	mov	r0, r4
 8016e52:	f7f3 fdf1 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016e56:	f107 0310 	add.w	r3, r7, #16
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f7f3 fd6f 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016e60:	68fb      	ldr	r3, [r7, #12]
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	371c      	adds	r7, #28
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd90      	pop	{r4, r7, pc}

08016e6a <_ZN19MockActualCallTrace25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockActualCall& MockActualCallTrace::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8016e6a:	b590      	push	{r4, r7, lr}
 8016e6c:	b087      	sub	sp, #28
 8016e6e:	af00      	add	r7, sp, #0
 8016e70:	60f8      	str	r0, [r7, #12]
 8016e72:	60b9      	str	r1, [r7, #8]
 8016e74:	607a      	str	r2, [r7, #4]
 8016e76:	603b      	str	r3, [r7, #0]
    addParameterName(name);
 8016e78:	68b9      	ldr	r1, [r7, #8]
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f7ff fd68 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFromBinaryWithSizeOrNull(value, size);
 8016e80:	68fb      	ldr	r3, [r7, #12]
 8016e82:	1d1c      	adds	r4, r3, #4
 8016e84:	f107 0310 	add.w	r3, r7, #16
 8016e88:	683a      	ldr	r2, [r7, #0]
 8016e8a:	6879      	ldr	r1, [r7, #4]
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f4 fbaf 	bl	800b5f0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 8016e92:	f107 0310 	add.w	r3, r7, #16
 8016e96:	4619      	mov	r1, r3
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f7f3 fdcd 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016e9e:	f107 0310 	add.w	r3, r7, #16
 8016ea2:	4618      	mov	r0, r3
 8016ea4:	f7f3 fd4b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	371c      	adds	r7, #28
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd90      	pop	{r4, r7, pc}
	...

08016eb4 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockActualCall& MockActualCallTrace::withParameterOfType(const SimpleString& typeName, const SimpleString& name, const void* value)
{
 8016eb4:	b590      	push	{r4, r7, lr}
 8016eb6:	b087      	sub	sp, #28
 8016eb8:	af00      	add	r7, sp, #0
 8016eba:	60f8      	str	r0, [r7, #12]
 8016ebc:	60b9      	str	r1, [r7, #8]
 8016ebe:	607a      	str	r2, [r7, #4]
 8016ec0:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	3304      	adds	r3, #4
 8016ec6:	4913      	ldr	r1, [pc, #76]	; (8016f14 <_ZN19MockActualCallTrace19withParameterOfTypeERK12SimpleStringS2_PKv+0x60>)
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f3 fdc7 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	3304      	adds	r3, #4
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	4618      	mov	r0, r3
 8016ed6:	f7f3 fdaf 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8016eda:	6879      	ldr	r1, [r7, #4]
 8016edc:	68f8      	ldr	r0, [r7, #12]
 8016ede:	f7ff fd37 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(value);
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	1d1c      	adds	r4, r3, #4
 8016ee6:	f107 0310 	add.w	r3, r7, #16
 8016eea:	6839      	ldr	r1, [r7, #0]
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7f4 f811 	bl	800af14 <_Z10StringFromPKv>
 8016ef2:	f107 0310 	add.w	r3, r7, #16
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f7f3 fd9d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016efe:	f107 0310 	add.w	r3, r7, #16
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7f3 fd1b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016f08:	68fb      	ldr	r3, [r7, #12]
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	371c      	adds	r7, #28
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd90      	pop	{r4, r7, pc}
 8016f12:	bf00      	nop
 8016f14:	08022ed8 	.word	0x08022ed8

08016f18 <_ZN19MockActualCallTrace19withOutputParameterERK12SimpleStringPv>:

MockActualCall& MockActualCallTrace::withOutputParameter(const SimpleString& name, void* output)
{
 8016f18:	b590      	push	{r4, r7, lr}
 8016f1a:	b087      	sub	sp, #28
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
    addParameterName(name);
 8016f24:	68b9      	ldr	r1, [r7, #8]
 8016f26:	68f8      	ldr	r0, [r7, #12]
 8016f28:	f7ff fd12 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016f2c:	68fb      	ldr	r3, [r7, #12]
 8016f2e:	1d1c      	adds	r4, r3, #4
 8016f30:	f107 0310 	add.w	r3, r7, #16
 8016f34:	6879      	ldr	r1, [r7, #4]
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7f3 ffec 	bl	800af14 <_Z10StringFromPKv>
 8016f3c:	f107 0310 	add.w	r3, r7, #16
 8016f40:	4619      	mov	r1, r3
 8016f42:	4620      	mov	r0, r4
 8016f44:	f7f3 fd78 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016f48:	f107 0310 	add.w	r3, r7, #16
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7f3 fcf6 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016f52:	68fb      	ldr	r3, [r7, #12]
}
 8016f54:	4618      	mov	r0, r3
 8016f56:	371c      	adds	r7, #28
 8016f58:	46bd      	mov	sp, r7
 8016f5a:	bd90      	pop	{r4, r7, pc}

08016f5c <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv>:

MockActualCall& MockActualCallTrace::withOutputParameterOfType(const SimpleString& typeName, const SimpleString& name, void* output)
{
 8016f5c:	b590      	push	{r4, r7, lr}
 8016f5e:	b087      	sub	sp, #28
 8016f60:	af00      	add	r7, sp, #0
 8016f62:	60f8      	str	r0, [r7, #12]
 8016f64:	60b9      	str	r1, [r7, #8]
 8016f66:	607a      	str	r2, [r7, #4]
 8016f68:	603b      	str	r3, [r7, #0]
    traceBuffer_ += " ";
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	3304      	adds	r3, #4
 8016f6e:	4913      	ldr	r1, [pc, #76]	; (8016fbc <_ZN19MockActualCallTrace25withOutputParameterOfTypeERK12SimpleStringS2_Pv+0x60>)
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7f3 fd73 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += typeName;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	3304      	adds	r3, #4
 8016f7a:	68b9      	ldr	r1, [r7, #8]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7f3 fd5b 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    addParameterName(name);
 8016f82:	6879      	ldr	r1, [r7, #4]
 8016f84:	68f8      	ldr	r0, [r7, #12]
 8016f86:	f7ff fce3 	bl	8016950 <_ZN19MockActualCallTrace16addParameterNameERK12SimpleString>
    traceBuffer_ += StringFrom(output);
 8016f8a:	68fb      	ldr	r3, [r7, #12]
 8016f8c:	1d1c      	adds	r4, r3, #4
 8016f8e:	f107 0310 	add.w	r3, r7, #16
 8016f92:	6839      	ldr	r1, [r7, #0]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7f3 ffbd 	bl	800af14 <_Z10StringFromPKv>
 8016f9a:	f107 0310 	add.w	r3, r7, #16
 8016f9e:	4619      	mov	r1, r3
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f7f3 fd49 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8016fa6:	f107 0310 	add.w	r3, r7, #16
 8016faa:	4618      	mov	r0, r3
 8016fac:	f7f3 fcc7 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8016fb0:	68fb      	ldr	r3, [r7, #12]
}
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	371c      	adds	r7, #28
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd90      	pop	{r4, r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	08022ed8 	.word	0x08022ed8

08016fc0 <_ZN19MockActualCallTrace14hasReturnValueEv>:

bool MockActualCallTrace::hasReturnValue()
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b083      	sub	sp, #12
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
    return false;
 8016fc8:	2300      	movs	r3, #0
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	370c      	adds	r7, #12
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fd4:	4770      	bx	lr
	...

08016fd8 <_ZN19MockActualCallTrace11returnValueEv>:

MockNamedValue MockActualCallTrace::returnValue()
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
    return MockNamedValue("");
 8016fe2:	f107 0308 	add.w	r3, r7, #8
 8016fe6:	4909      	ldr	r1, [pc, #36]	; (801700c <_ZN19MockActualCallTrace11returnValueEv+0x34>)
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7f3 f8f0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8016fee:	f107 0308 	add.w	r3, r7, #8
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f003 fe0f 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8016ffa:	f107 0308 	add.w	r3, r7, #8
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7f3 fc9d 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	3710      	adds	r7, #16
 8017008:	46bd      	mov	sp, r7
 801700a:	bd80      	pop	{r7, pc}
 801700c:	08022dac 	.word	0x08022dac

08017010 <_ZN19MockActualCallTrace18returnLongIntValueEv>:

long int MockActualCallTrace::returnLongIntValue()
{
 8017010:	b480      	push	{r7}
 8017012:	b083      	sub	sp, #12
 8017014:	af00      	add	r7, sp, #0
 8017016:	6078      	str	r0, [r7, #4]
    return 0;
 8017018:	2300      	movs	r3, #0
}
 801701a:	4618      	mov	r0, r3
 801701c:	370c      	adds	r7, #12
 801701e:	46bd      	mov	sp, r7
 8017020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017024:	4770      	bx	lr

08017026 <_ZN19MockActualCallTrace26returnUnsignedLongIntValueEv>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValue()
{
 8017026:	b480      	push	{r7}
 8017028:	b083      	sub	sp, #12
 801702a:	af00      	add	r7, sp, #0
 801702c:	6078      	str	r0, [r7, #4]
    return 0;
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	370c      	adds	r7, #12
 8017034:	46bd      	mov	sp, r7
 8017036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703a:	4770      	bx	lr

0801703c <_ZN19MockActualCallTrace35returnUnsignedLongIntValueOrDefaultEm>:

unsigned long int MockActualCallTrace::returnUnsignedLongIntValueOrDefault(unsigned long)
{
 801703c:	b480      	push	{r7}
 801703e:	b083      	sub	sp, #12
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
 8017044:	6039      	str	r1, [r7, #0]
    return 0;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	370c      	adds	r7, #12
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr

08017054 <_ZN19MockActualCallTrace27returnLongIntValueOrDefaultEl>:

long int MockActualCallTrace::returnLongIntValueOrDefault(long int)
{
 8017054:	b480      	push	{r7}
 8017056:	b083      	sub	sp, #12
 8017058:	af00      	add	r7, sp, #0
 801705a:	6078      	str	r0, [r7, #4]
 801705c:	6039      	str	r1, [r7, #0]
    return 0;
 801705e:	2300      	movs	r3, #0
}
 8017060:	4618      	mov	r0, r3
 8017062:	370c      	adds	r7, #12
 8017064:	46bd      	mov	sp, r7
 8017066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706a:	4770      	bx	lr

0801706c <_ZN19MockActualCallTrace22returnLongLongIntValueEv>:
}

#else

cpputest_longlong MockActualCallTrace::returnLongLongIntValue()
{
 801706c:	b5b0      	push	{r4, r5, r7, lr}
 801706e:	b084      	sub	sp, #16
 8017070:	af02      	add	r7, sp, #8
 8017072:	6078      	str	r0, [r7, #4]
 8017074:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 8017076:	f7fa fc8d 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801707a:	4604      	mov	r4, r0
 801707c:	6823      	ldr	r3, [r4, #0]
 801707e:	3368      	adds	r3, #104	; 0x68
 8017080:	681d      	ldr	r5, [r3, #0]
 8017082:	f7fa fc97 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017086:	4603      	mov	r3, r0
 8017088:	9300      	str	r3, [sp, #0]
 801708a:	f240 3375 	movw	r3, #885	; 0x375
 801708e:	4a06      	ldr	r2, [pc, #24]	; (80170a8 <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x3c>)
 8017090:	4906      	ldr	r1, [pc, #24]	; (80170ac <_ZN19MockActualCallTrace22returnLongLongIntValueEv+0x40>)
 8017092:	4620      	mov	r0, r4
 8017094:	47a8      	blx	r5
    return cpputest_longlong(0);
 8017096:	2100      	movs	r1, #0
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7f1 f8cf 	bl	800823c <_ZN17cpputest_longlongC1Ei>
}
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	3708      	adds	r7, #8
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bdb0      	pop	{r4, r5, r7, pc}
 80170a6:	bf00      	nop
 80170a8:	08022dc4 	.word	0x08022dc4
 80170ac:	08022e0c 	.word	0x08022e0c

080170b0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValue()
{
 80170b0:	b5b0      	push	{r4, r5, r7, lr}
 80170b2:	b084      	sub	sp, #16
 80170b4:	af02      	add	r7, sp, #8
 80170b6:	6078      	str	r0, [r7, #4]
 80170b8:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 80170ba:	f7fa fc6b 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 80170be:	4604      	mov	r4, r0
 80170c0:	6823      	ldr	r3, [r4, #0]
 80170c2:	3368      	adds	r3, #104	; 0x68
 80170c4:	681d      	ldr	r5, [r3, #0]
 80170c6:	f7fa fc75 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 80170ca:	4603      	mov	r3, r0
 80170cc:	9300      	str	r3, [sp, #0]
 80170ce:	f240 337b 	movw	r3, #891	; 0x37b
 80170d2:	4a06      	ldr	r2, [pc, #24]	; (80170ec <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x3c>)
 80170d4:	4906      	ldr	r1, [pc, #24]	; (80170f0 <_ZN19MockActualCallTrace30returnUnsignedLongLongIntValueEv+0x40>)
 80170d6:	4620      	mov	r0, r4
 80170d8:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 80170da:	2100      	movs	r1, #0
 80170dc:	6878      	ldr	r0, [r7, #4]
 80170de:	f7f1 f8b9 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
}
 80170e2:	6878      	ldr	r0, [r7, #4]
 80170e4:	3708      	adds	r7, #8
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bdb0      	pop	{r4, r5, r7, pc}
 80170ea:	bf00      	nop
 80170ec:	08022dc4 	.word	0x08022dc4
 80170f0:	08022de0 	.word	0x08022de0

080170f4 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong>:

cpputest_ulonglong MockActualCallTrace::returnUnsignedLongLongIntValueOrDefault(cpputest_ulonglong)
{
 80170f4:	b5b0      	push	{r4, r5, r7, lr}
 80170f6:	b086      	sub	sp, #24
 80170f8:	af02      	add	r7, sp, #8
 80170fa:	60f8      	str	r0, [r7, #12]
 80170fc:	60b9      	str	r1, [r7, #8]
 80170fe:	4639      	mov	r1, r7
 8017100:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017104:	f7fa fc46 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8017108:	4604      	mov	r4, r0
 801710a:	6823      	ldr	r3, [r4, #0]
 801710c:	3368      	adds	r3, #104	; 0x68
 801710e:	681d      	ldr	r5, [r3, #0]
 8017110:	f7fa fc50 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017114:	4603      	mov	r3, r0
 8017116:	9300      	str	r3, [sp, #0]
 8017118:	f240 3381 	movw	r3, #897	; 0x381
 801711c:	4a05      	ldr	r2, [pc, #20]	; (8017134 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x40>)
 801711e:	4906      	ldr	r1, [pc, #24]	; (8017138 <_ZN19MockActualCallTrace39returnUnsignedLongLongIntValueOrDefaultE18cpputest_ulonglong+0x44>)
 8017120:	4620      	mov	r0, r4
 8017122:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 8017124:	2100      	movs	r1, #0
 8017126:	68f8      	ldr	r0, [r7, #12]
 8017128:	f7f1 f894 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
}
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	3710      	adds	r7, #16
 8017130:	46bd      	mov	sp, r7
 8017132:	bdb0      	pop	{r4, r5, r7, pc}
 8017134:	08022dc4 	.word	0x08022dc4
 8017138:	08022de0 	.word	0x08022de0

0801713c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong>:

cpputest_longlong MockActualCallTrace::returnLongLongIntValueOrDefault(cpputest_longlong)
{
 801713c:	b5b0      	push	{r4, r5, r7, lr}
 801713e:	b086      	sub	sp, #24
 8017140:	af02      	add	r7, sp, #8
 8017142:	60f8      	str	r0, [r7, #12]
 8017144:	60b9      	str	r1, [r7, #8]
 8017146:	4639      	mov	r1, r7
 8017148:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 801714c:	f7fa fc22 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8017150:	4604      	mov	r4, r0
 8017152:	6823      	ldr	r3, [r4, #0]
 8017154:	3368      	adds	r3, #104	; 0x68
 8017156:	681d      	ldr	r5, [r3, #0]
 8017158:	f7fa fc2c 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801715c:	4603      	mov	r3, r0
 801715e:	9300      	str	r3, [sp, #0]
 8017160:	f240 3387 	movw	r3, #903	; 0x387
 8017164:	4a05      	ldr	r2, [pc, #20]	; (801717c <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x40>)
 8017166:	4906      	ldr	r1, [pc, #24]	; (8017180 <_ZN19MockActualCallTrace31returnLongLongIntValueOrDefaultE17cpputest_longlong+0x44>)
 8017168:	4620      	mov	r0, r4
 801716a:	47a8      	blx	r5
    return cpputest_longlong(0);
 801716c:	2100      	movs	r1, #0
 801716e:	68f8      	ldr	r0, [r7, #12]
 8017170:	f7f1 f864 	bl	800823c <_ZN17cpputest_longlongC1Ei>
}
 8017174:	68f8      	ldr	r0, [r7, #12]
 8017176:	3710      	adds	r7, #16
 8017178:	46bd      	mov	sp, r7
 801717a:	bdb0      	pop	{r4, r5, r7, pc}
 801717c:	08022dc4 	.word	0x08022dc4
 8017180:	08022e0c 	.word	0x08022e0c

08017184 <_ZN19MockActualCallTrace15returnBoolValueEv>:

#endif

bool MockActualCallTrace::returnBoolValue()
{
 8017184:	b480      	push	{r7}
 8017186:	b083      	sub	sp, #12
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]
    return false;
 801718c:	2300      	movs	r3, #0
}
 801718e:	4618      	mov	r0, r3
 8017190:	370c      	adds	r7, #12
 8017192:	46bd      	mov	sp, r7
 8017194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017198:	4770      	bx	lr

0801719a <_ZN19MockActualCallTrace24returnBoolValueOrDefaultEb>:

bool MockActualCallTrace::returnBoolValueOrDefault(bool)
{
 801719a:	b480      	push	{r7}
 801719c:	b083      	sub	sp, #12
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
 80171a2:	460b      	mov	r3, r1
 80171a4:	70fb      	strb	r3, [r7, #3]
    return false;
 80171a6:	2300      	movs	r3, #0
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	370c      	adds	r7, #12
 80171ac:	46bd      	mov	sp, r7
 80171ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b2:	4770      	bx	lr

080171b4 <_ZN19MockActualCallTrace14returnIntValueEv>:

int MockActualCallTrace::returnIntValue()
{
 80171b4:	b480      	push	{r7}
 80171b6:	b083      	sub	sp, #12
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
    return 0;
 80171bc:	2300      	movs	r3, #0
}
 80171be:	4618      	mov	r0, r3
 80171c0:	370c      	adds	r7, #12
 80171c2:	46bd      	mov	sp, r7
 80171c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c8:	4770      	bx	lr

080171ca <_ZN19MockActualCallTrace17returnDoubleValueEv>:

double MockActualCallTrace::returnDoubleValue()
{
 80171ca:	b480      	push	{r7}
 80171cc:	b083      	sub	sp, #12
 80171ce:	af00      	add	r7, sp, #0
 80171d0:	6078      	str	r0, [r7, #4]
    return 0.0;
 80171d2:	f04f 0200 	mov.w	r2, #0
 80171d6:	f04f 0300 	mov.w	r3, #0
 80171da:	ec43 2b17 	vmov	d7, r2, r3
}
 80171de:	eeb0 0a47 	vmov.f32	s0, s14
 80171e2:	eef0 0a67 	vmov.f32	s1, s15
 80171e6:	370c      	adds	r7, #12
 80171e8:	46bd      	mov	sp, r7
 80171ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ee:	4770      	bx	lr

080171f0 <_ZN19MockActualCallTrace26returnDoubleValueOrDefaultEd>:

double MockActualCallTrace::returnDoubleValueOrDefault(double)
{
 80171f0:	b580      	push	{r7, lr}
 80171f2:	b084      	sub	sp, #16
 80171f4:	af00      	add	r7, sp, #0
 80171f6:	60f8      	str	r0, [r7, #12]
 80171f8:	ed87 0b00 	vstr	d0, [r7]
    return returnDoubleValue();
 80171fc:	68fb      	ldr	r3, [r7, #12]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	3398      	adds	r3, #152	; 0x98
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	68f8      	ldr	r0, [r7, #12]
 8017206:	4798      	blx	r3
 8017208:	eeb0 7a40 	vmov.f32	s14, s0
 801720c:	eef0 7a60 	vmov.f32	s15, s1
}
 8017210:	eeb0 0a47 	vmov.f32	s0, s14
 8017214:	eef0 0a67 	vmov.f32	s1, s15
 8017218:	3710      	adds	r7, #16
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}

0801721e <_ZN19MockActualCallTrace22returnUnsignedIntValueEv>:

unsigned int MockActualCallTrace::returnUnsignedIntValue()
{
 801721e:	b480      	push	{r7}
 8017220:	b083      	sub	sp, #12
 8017222:	af00      	add	r7, sp, #0
 8017224:	6078      	str	r0, [r7, #4]
    return 0;
 8017226:	2300      	movs	r3, #0
}
 8017228:	4618      	mov	r0, r3
 801722a:	370c      	adds	r7, #12
 801722c:	46bd      	mov	sp, r7
 801722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017232:	4770      	bx	lr

08017234 <_ZN19MockActualCallTrace18returnPointerValueEv>:

void * MockActualCallTrace::returnPointerValue()
{
 8017234:	b480      	push	{r7}
 8017236:	b083      	sub	sp, #12
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 801723c:	2300      	movs	r3, #0
}
 801723e:	4618      	mov	r0, r3
 8017240:	370c      	adds	r7, #12
 8017242:	46bd      	mov	sp, r7
 8017244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017248:	4770      	bx	lr

0801724a <_ZN19MockActualCallTrace23returnConstPointerValueEv>:

const void * MockActualCallTrace::returnConstPointerValue()
{
 801724a:	b480      	push	{r7}
 801724c:	b083      	sub	sp, #12
 801724e:	af00      	add	r7, sp, #0
 8017250:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017252:	2300      	movs	r3, #0
}
 8017254:	4618      	mov	r0, r3
 8017256:	370c      	adds	r7, #12
 8017258:	46bd      	mov	sp, r7
 801725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725e:	4770      	bx	lr

08017260 <_ZN19MockActualCallTrace26returnFunctionPointerValueEv>:

void (*MockActualCallTrace::returnFunctionPointerValue())()
{
 8017260:	b480      	push	{r7}
 8017262:	b083      	sub	sp, #12
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
    return NULLPTR;
 8017268:	2300      	movs	r3, #0
}
 801726a:	4618      	mov	r0, r3
 801726c:	370c      	adds	r7, #12
 801726e:	46bd      	mov	sp, r7
 8017270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017274:	4770      	bx	lr

08017276 <_ZN19MockActualCallTrace32returnConstPointerValueOrDefaultEPKv>:

const void * MockActualCallTrace::returnConstPointerValueOrDefault(const void *)
{
 8017276:	b580      	push	{r7, lr}
 8017278:	b082      	sub	sp, #8
 801727a:	af00      	add	r7, sp, #0
 801727c:	6078      	str	r0, [r7, #4]
 801727e:	6039      	str	r1, [r7, #0]
    return returnConstPointerValue();
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	33a8      	adds	r3, #168	; 0xa8
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	6878      	ldr	r0, [r7, #4]
 801728a:	4798      	blx	r3
 801728c:	4603      	mov	r3, r0
}
 801728e:	4618      	mov	r0, r3
 8017290:	3708      	adds	r7, #8
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <_ZN19MockActualCallTrace27returnPointerValueOrDefaultEPv>:

void * MockActualCallTrace::returnPointerValueOrDefault(void *)
{
 8017296:	b580      	push	{r7, lr}
 8017298:	b082      	sub	sp, #8
 801729a:	af00      	add	r7, sp, #0
 801729c:	6078      	str	r0, [r7, #4]
 801729e:	6039      	str	r1, [r7, #0]
    return returnPointerValue();
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	33a0      	adds	r3, #160	; 0xa0
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	4798      	blx	r3
 80172ac:	4603      	mov	r3, r0
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3708      	adds	r7, #8
 80172b2:	46bd      	mov	sp, r7
 80172b4:	bd80      	pop	{r7, pc}

080172b6 <_ZN19MockActualCallTrace35returnFunctionPointerValueOrDefaultEPFvvE>:

void (*MockActualCallTrace::returnFunctionPointerValueOrDefault(void (*)()))()
{
 80172b6:	b580      	push	{r7, lr}
 80172b8:	b082      	sub	sp, #8
 80172ba:	af00      	add	r7, sp, #0
 80172bc:	6078      	str	r0, [r7, #4]
 80172be:	6039      	str	r1, [r7, #0]
    return returnFunctionPointerValue();
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	33b0      	adds	r3, #176	; 0xb0
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	6878      	ldr	r0, [r7, #4]
 80172ca:	4798      	blx	r3
 80172cc:	4603      	mov	r3, r0
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	3708      	adds	r7, #8
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd80      	pop	{r7, pc}
	...

080172d8 <_ZN19MockActualCallTrace17returnStringValueEv>:

const char * MockActualCallTrace::returnStringValue()
{
 80172d8:	b480      	push	{r7}
 80172da:	b083      	sub	sp, #12
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
    return "";
 80172e0:	4b03      	ldr	r3, [pc, #12]	; (80172f0 <_ZN19MockActualCallTrace17returnStringValueEv+0x18>)
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	370c      	adds	r7, #12
 80172e6:	46bd      	mov	sp, r7
 80172e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ec:	4770      	bx	lr
 80172ee:	bf00      	nop
 80172f0:	08022dac 	.word	0x08022dac

080172f4 <_ZN19MockActualCallTrace26returnStringValueOrDefaultEPKc>:

const char * MockActualCallTrace::returnStringValueOrDefault(const char *)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b082      	sub	sp, #8
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]
    return returnStringValue();
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	3394      	adds	r3, #148	; 0x94
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	6878      	ldr	r0, [r7, #4]
 8017308:	4798      	blx	r3
 801730a:	4603      	mov	r3, r0
}
 801730c:	4618      	mov	r0, r3
 801730e:	3708      	adds	r7, #8
 8017310:	46bd      	mov	sp, r7
 8017312:	bd80      	pop	{r7, pc}

08017314 <_ZN19MockActualCallTrace23returnIntValueOrDefaultEi>:

int MockActualCallTrace::returnIntValueOrDefault(int)
{
 8017314:	b480      	push	{r7}
 8017316:	b083      	sub	sp, #12
 8017318:	af00      	add	r7, sp, #0
 801731a:	6078      	str	r0, [r7, #4]
 801731c:	6039      	str	r1, [r7, #0]
    return 0;
 801731e:	2300      	movs	r3, #0
}
 8017320:	4618      	mov	r0, r3
 8017322:	370c      	adds	r7, #12
 8017324:	46bd      	mov	sp, r7
 8017326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732a:	4770      	bx	lr

0801732c <_ZN19MockActualCallTrace31returnUnsignedIntValueOrDefaultEj>:

unsigned int MockActualCallTrace::returnUnsignedIntValueOrDefault(unsigned int)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b082      	sub	sp, #8
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
    return returnUnsignedIntValue();
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	3388      	adds	r3, #136	; 0x88
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	6878      	ldr	r0, [r7, #4]
 8017340:	4798      	blx	r3
 8017342:	4603      	mov	r3, r0
}
 8017344:	4618      	mov	r0, r3
 8017346:	3708      	adds	r7, #8
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <_ZN19MockActualCallTrace8onObjectEPKv>:

MockActualCall& MockActualCallTrace::onObject(const void* objectPtr)
{
 801734c:	b590      	push	{r4, r7, lr}
 801734e:	b085      	sub	sp, #20
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
    traceBuffer_ += " onObject:";
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	3304      	adds	r3, #4
 801735a:	490e      	ldr	r1, [pc, #56]	; (8017394 <_ZN19MockActualCallTrace8onObjectEPKv+0x48>)
 801735c:	4618      	mov	r0, r3
 801735e:	f7f3 fb7d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    traceBuffer_ += StringFrom(objectPtr);
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	1d1c      	adds	r4, r3, #4
 8017366:	f107 0308 	add.w	r3, r7, #8
 801736a:	6839      	ldr	r1, [r7, #0]
 801736c:	4618      	mov	r0, r3
 801736e:	f7f3 fdd1 	bl	800af14 <_Z10StringFromPKv>
 8017372:	f107 0308 	add.w	r3, r7, #8
 8017376:	4619      	mov	r1, r3
 8017378:	4620      	mov	r0, r4
 801737a:	f7f3 fb5d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801737e:	f107 0308 	add.w	r3, r7, #8
 8017382:	4618      	mov	r0, r3
 8017384:	f7f3 fadb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return *this;
 8017388:	687b      	ldr	r3, [r7, #4]
}
 801738a:	4618      	mov	r0, r3
 801738c:	3714      	adds	r7, #20
 801738e:	46bd      	mov	sp, r7
 8017390:	bd90      	pop	{r4, r7, pc}
 8017392:	bf00      	nop
 8017394:	08022ee0 	.word	0x08022ee0

08017398 <_ZN19MockActualCallTrace8instanceEv>:
}

MockActualCallTrace* MockActualCallTrace::instance_ = NULLPTR;

MockActualCallTrace& MockActualCallTrace::instance()
{
 8017398:	b598      	push	{r3, r4, r7, lr}
 801739a:	af00      	add	r7, sp, #0
    if (instance_ == NULLPTR)
 801739c:	4b09      	ldr	r3, [pc, #36]	; (80173c4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10b      	bne.n	80173bc <_ZN19MockActualCallTrace8instanceEv+0x24>
        instance_ = new MockActualCallTrace;
 80173a4:	f240 32f3 	movw	r2, #1011	; 0x3f3
 80173a8:	4907      	ldr	r1, [pc, #28]	; (80173c8 <_ZN19MockActualCallTrace8instanceEv+0x30>)
 80173aa:	200c      	movs	r0, #12
 80173ac:	f7f0 fb4c 	bl	8007a48 <_ZnwjPKci>
 80173b0:	4604      	mov	r4, r0
 80173b2:	4620      	mov	r0, r4
 80173b4:	f7ff fa4c 	bl	8016850 <_ZN19MockActualCallTraceC1Ev>
 80173b8:	4b02      	ldr	r3, [pc, #8]	; (80173c4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80173ba:	601c      	str	r4, [r3, #0]
    return *instance_;
 80173bc:	4b01      	ldr	r3, [pc, #4]	; (80173c4 <_ZN19MockActualCallTrace8instanceEv+0x2c>)
 80173be:	681b      	ldr	r3, [r3, #0]
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	bd98      	pop	{r3, r4, r7, pc}
 80173c4:	20000cc0 	.word	0x20000cc0
 80173c8:	08022dc4 	.word	0x08022dc4

080173cc <_ZN19MockActualCallTrace13clearInstanceEv>:

void MockActualCallTrace::clearInstance()
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	af00      	add	r7, sp, #0
    delete instance_;
 80173d0:	4b06      	ldr	r3, [pc, #24]	; (80173ec <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d004      	beq.n	80173e2 <_ZN19MockActualCallTrace13clearInstanceEv+0x16>
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	3204      	adds	r2, #4
 80173dc:	6812      	ldr	r2, [r2, #0]
 80173de:	4618      	mov	r0, r3
 80173e0:	4790      	blx	r2
    instance_ = NULLPTR;
 80173e2:	4b02      	ldr	r3, [pc, #8]	; (80173ec <_ZN19MockActualCallTrace13clearInstanceEv+0x20>)
 80173e4:	2200      	movs	r2, #0
 80173e6:	601a      	str	r2, [r3, #0]
}
 80173e8:	bf00      	nop
 80173ea:	bd80      	pop	{r7, pc}
 80173ec:	20000cc0 	.word	0x20000cc0

080173f0 <_ZN21MockIgnoredActualCallC1Ev>:
class MockIgnoredActualCall: public MockActualCall
 80173f0:	b580      	push	{r7, lr}
 80173f2:	b082      	sub	sp, #8
 80173f4:	af00      	add	r7, sp, #0
 80173f6:	6078      	str	r0, [r7, #4]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fd fe9a 	bl	8015134 <_ZN14MockActualCallC1Ev>
 8017400:	4a03      	ldr	r2, [pc, #12]	; (8017410 <_ZN21MockIgnoredActualCallC1Ev+0x20>)
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	601a      	str	r2, [r3, #0]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4618      	mov	r0, r3
 801740a:	3708      	adds	r7, #8
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	08024f38 	.word	0x08024f38

08017414 <__tcf_0>:

MockIgnoredActualCall& MockIgnoredActualCall::instance()
{
    static MockIgnoredActualCall call;
 8017414:	b580      	push	{r7, lr}
 8017416:	af00      	add	r7, sp, #0
 8017418:	4801      	ldr	r0, [pc, #4]	; (8017420 <__tcf_0+0xc>)
 801741a:	f000 f831 	bl	8017480 <_ZN21MockIgnoredActualCallD1Ev>
 801741e:	bd80      	pop	{r7, pc}
 8017420:	20000cc4 	.word	0x20000cc4

08017424 <_ZN21MockIgnoredActualCall8instanceEv>:
{
 8017424:	b580      	push	{r7, lr}
 8017426:	af00      	add	r7, sp, #0
    static MockIgnoredActualCall call;
 8017428:	4b12      	ldr	r3, [pc, #72]	; (8017474 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 801742a:	781b      	ldrb	r3, [r3, #0]
 801742c:	f3bf 8f5b 	dmb	ish
 8017430:	b2db      	uxtb	r3, r3
 8017432:	f003 0301 	and.w	r3, r3, #1
 8017436:	2b00      	cmp	r3, #0
 8017438:	bf0c      	ite	eq
 801743a:	2301      	moveq	r3, #1
 801743c:	2300      	movne	r3, #0
 801743e:	b2db      	uxtb	r3, r3
 8017440:	2b00      	cmp	r3, #0
 8017442:	d013      	beq.n	801746c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 8017444:	480b      	ldr	r0, [pc, #44]	; (8017474 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017446:	f005 fd83 	bl	801cf50 <__cxa_guard_acquire>
 801744a:	4603      	mov	r3, r0
 801744c:	2b00      	cmp	r3, #0
 801744e:	bf14      	ite	ne
 8017450:	2301      	movne	r3, #1
 8017452:	2300      	moveq	r3, #0
 8017454:	b2db      	uxtb	r3, r3
 8017456:	2b00      	cmp	r3, #0
 8017458:	d008      	beq.n	801746c <_ZN21MockIgnoredActualCall8instanceEv+0x48>
 801745a:	4807      	ldr	r0, [pc, #28]	; (8017478 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
 801745c:	f7ff ffc8 	bl	80173f0 <_ZN21MockIgnoredActualCallC1Ev>
 8017460:	4804      	ldr	r0, [pc, #16]	; (8017474 <_ZN21MockIgnoredActualCall8instanceEv+0x50>)
 8017462:	f005 fd81 	bl	801cf68 <__cxa_guard_release>
 8017466:	4805      	ldr	r0, [pc, #20]	; (801747c <_ZN21MockIgnoredActualCall8instanceEv+0x58>)
 8017468:	f005 fda5 	bl	801cfb6 <atexit>
    return call;
 801746c:	4b02      	ldr	r3, [pc, #8]	; (8017478 <_ZN21MockIgnoredActualCall8instanceEv+0x54>)
}
 801746e:	4618      	mov	r0, r3
 8017470:	bd80      	pop	{r7, pc}
 8017472:	bf00      	nop
 8017474:	20000cc8 	.word	0x20000cc8
 8017478:	20000cc4 	.word	0x20000cc4
 801747c:	08017415 	.word	0x08017415

08017480 <_ZN21MockIgnoredActualCallD1Ev>:
 8017480:	b580      	push	{r7, lr}
 8017482:	b082      	sub	sp, #8
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	4a05      	ldr	r2, [pc, #20]	; (80174a0 <_ZN21MockIgnoredActualCallD1Ev+0x20>)
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	601a      	str	r2, [r3, #0]
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	4618      	mov	r0, r3
 8017492:	f7fd fe5f 	bl	8015154 <_ZN14MockActualCallD1Ev>
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	4618      	mov	r0, r3
 801749a:	3708      	adds	r7, #8
 801749c:	46bd      	mov	sp, r7
 801749e:	bd80      	pop	{r7, pc}
 80174a0:	08024f38 	.word	0x08024f38

080174a4 <_ZN21MockIgnoredActualCallD0Ev>:
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
 80174ac:	6878      	ldr	r0, [r7, #4]
 80174ae:	f7ff ffe7 	bl	8017480 <_ZN21MockIgnoredActualCallD1Ev>
 80174b2:	2104      	movs	r1, #4
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7f0 fadb 	bl	8007a70 <_ZdlPvj>
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	4618      	mov	r0, r3
 80174be:	3708      	adds	r7, #8
 80174c0:	46bd      	mov	sp, r7
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>:
{
public:
    MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName);
};

class MockNoWayToCopyCustomTypeFailure : public MockFailure
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
 80174cc:	4a05      	ldr	r2, [pc, #20]	; (80174e4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev+0x20>)
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	601a      	str	r2, [r3, #0]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	4618      	mov	r0, r3
 80174d6:	f7f0 fefd 	bl	80082d4 <_ZN11MockFailureD1Ev>
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	4618      	mov	r0, r3
 80174de:	3708      	adds	r7, #8
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}
 80174e4:	08024e30 	.word	0x08024e30

080174e8 <_ZN32MockNoWayToCopyCustomTypeFailureD0Ev>:
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b082      	sub	sp, #8
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6878      	ldr	r0, [r7, #4]
 80174f2:	f7ff ffe7 	bl	80174c4 <_ZN32MockNoWayToCopyCustomTypeFailureD1Ev>
 80174f6:	2134      	movs	r1, #52	; 0x34
 80174f8:	6878      	ldr	r0, [r7, #4]
 80174fa:	f7f0 fab9 	bl	8007a70 <_ZdlPvj>
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	4618      	mov	r0, r3
 8017502:	3708      	adds	r7, #8
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>:
class MockUnexpectedCallHappenedFailure : public MockFailure
 8017508:	b580      	push	{r7, lr}
 801750a:	b082      	sub	sp, #8
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
 8017510:	4a05      	ldr	r2, [pc, #20]	; (8017528 <_ZN33MockUnexpectedCallHappenedFailureD1Ev+0x20>)
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	601a      	str	r2, [r3, #0]
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	4618      	mov	r0, r3
 801751a:	f7f0 fedb 	bl	80082d4 <_ZN11MockFailureD1Ev>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	4618      	mov	r0, r3
 8017522:	3708      	adds	r7, #8
 8017524:	46bd      	mov	sp, r7
 8017526:	bd80      	pop	{r7, pc}
 8017528:	08024f0c 	.word	0x08024f0c

0801752c <_ZN33MockUnexpectedCallHappenedFailureD0Ev>:
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f7ff ffe7 	bl	8017508 <_ZN33MockUnexpectedCallHappenedFailureD1Ev>
 801753a:	2134      	movs	r1, #52	; 0x34
 801753c:	6878      	ldr	r0, [r7, #4]
 801753e:	f7f0 fa97 	bl	8007a70 <_ZdlPvj>
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	4618      	mov	r0, r3
 8017546:	3708      	adds	r7, #8
 8017548:	46bd      	mov	sp, r7
 801754a:	bd80      	pop	{r7, pc}

0801754c <_ZN35MockUnexpectedInputParameterFailureD1Ev>:
class MockUnexpectedInputParameterFailure : public MockFailure
 801754c:	b580      	push	{r7, lr}
 801754e:	b082      	sub	sp, #8
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
 8017554:	4a05      	ldr	r2, [pc, #20]	; (801756c <_ZN35MockUnexpectedInputParameterFailureD1Ev+0x20>)
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	601a      	str	r2, [r3, #0]
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	4618      	mov	r0, r3
 801755e:	f7f0 feb9 	bl	80082d4 <_ZN11MockFailureD1Ev>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	4618      	mov	r0, r3
 8017566:	3708      	adds	r7, #8
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}
 801756c:	08024ee0 	.word	0x08024ee0

08017570 <_ZN35MockUnexpectedInputParameterFailureD0Ev>:
 8017570:	b580      	push	{r7, lr}
 8017572:	b082      	sub	sp, #8
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6878      	ldr	r0, [r7, #4]
 801757a:	f7ff ffe7 	bl	801754c <_ZN35MockUnexpectedInputParameterFailureD1Ev>
 801757e:	2134      	movs	r1, #52	; 0x34
 8017580:	6878      	ldr	r0, [r7, #4]
 8017582:	f7f0 fa75 	bl	8007a70 <_ZdlPvj>
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	4618      	mov	r0, r3
 801758a:	3708      	adds	r7, #8
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>:
class MockUnexpectedOutputParameterFailure : public MockFailure
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	6078      	str	r0, [r7, #4]
 8017598:	4a05      	ldr	r2, [pc, #20]	; (80175b0 <_ZN36MockUnexpectedOutputParameterFailureD1Ev+0x20>)
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	601a      	str	r2, [r3, #0]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7f0 fe97 	bl	80082d4 <_ZN11MockFailureD1Ev>
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	4618      	mov	r0, r3
 80175aa:	3708      	adds	r7, #8
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}
 80175b0:	08024eb4 	.word	0x08024eb4

080175b4 <_ZN36MockUnexpectedOutputParameterFailureD0Ev>:
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b082      	sub	sp, #8
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	6078      	str	r0, [r7, #4]
 80175bc:	6878      	ldr	r0, [r7, #4]
 80175be:	f7ff ffe7 	bl	8017590 <_ZN36MockUnexpectedOutputParameterFailureD1Ev>
 80175c2:	2134      	movs	r1, #52	; 0x34
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f7f0 fa53 	bl	8007a70 <_ZdlPvj>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	4618      	mov	r0, r3
 80175ce:	3708      	adds	r7, #8
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>:
class MockNoWayToCompareCustomTypeFailure : public MockFailure
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b082      	sub	sp, #8
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	4a05      	ldr	r2, [pc, #20]	; (80175f4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev+0x20>)
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	601a      	str	r2, [r3, #0]
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7f0 fe75 	bl	80082d4 <_ZN11MockFailureD1Ev>
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	4618      	mov	r0, r3
 80175ee:	3708      	adds	r7, #8
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	08024e5c 	.word	0x08024e5c

080175f8 <_ZN35MockNoWayToCompareCustomTypeFailureD0Ev>:
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b082      	sub	sp, #8
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
 8017600:	6878      	ldr	r0, [r7, #4]
 8017602:	f7ff ffe7 	bl	80175d4 <_ZN35MockNoWayToCompareCustomTypeFailureD1Ev>
 8017606:	2134      	movs	r1, #52	; 0x34
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f7f0 fa31 	bl	8007a70 <_ZdlPvj>
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	4618      	mov	r0, r3
 8017612:	3708      	adds	r7, #8
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}

08017618 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>:
class MockExpectedParameterDidntHappenFailure : public MockFailure
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	4a05      	ldr	r2, [pc, #20]	; (8017638 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev+0x20>)
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	601a      	str	r2, [r3, #0]
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	4618      	mov	r0, r3
 801762a:	f7f0 fe53 	bl	80082d4 <_ZN11MockFailureD1Ev>
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	4618      	mov	r0, r3
 8017632:	3708      	adds	r7, #8
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}
 8017638:	08024e88 	.word	0x08024e88

0801763c <_ZN39MockExpectedParameterDidntHappenFailureD0Ev>:
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f7ff ffe7 	bl	8017618 <_ZN39MockExpectedParameterDidntHappenFailureD1Ev>
 801764a:	2134      	movs	r1, #52	; 0x34
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f7f0 fa0f 	bl	8007a70 <_ZdlPvj>
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	4618      	mov	r0, r3
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>:
{
public:
    MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* expected, const MockExpectedCallsList& expectations);
};

class MockExpectedObjectDidntHappenFailure : public MockFailure
 801765c:	b580      	push	{r7, lr}
 801765e:	b082      	sub	sp, #8
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	4a05      	ldr	r2, [pc, #20]	; (801767c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev+0x20>)
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	601a      	str	r2, [r3, #0]
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	4618      	mov	r0, r3
 801766e:	f7f0 fe31 	bl	80082d4 <_ZN11MockFailureD1Ev>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	4618      	mov	r0, r3
 8017676:	3708      	adds	r7, #8
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}
 801767c:	08024dd8 	.word	0x08024dd8

08017680 <_ZN36MockExpectedObjectDidntHappenFailureD0Ev>:
 8017680:	b580      	push	{r7, lr}
 8017682:	b082      	sub	sp, #8
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7ff ffe7 	bl	801765c <_ZN36MockExpectedObjectDidntHappenFailureD1Ev>
 801768e:	2134      	movs	r1, #52	; 0x34
 8017690:	6878      	ldr	r0, [r7, #4]
 8017692:	f7f0 f9ed 	bl	8007a70 <_ZdlPvj>
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	4618      	mov	r0, r3
 801769a:	3708      	adds	r7, #8
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <_ZN27MockUnexpectedObjectFailureD1Ev>:
class MockUnexpectedObjectFailure : public MockFailure
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b082      	sub	sp, #8
 80176a4:	af00      	add	r7, sp, #0
 80176a6:	6078      	str	r0, [r7, #4]
 80176a8:	4a05      	ldr	r2, [pc, #20]	; (80176c0 <_ZN27MockUnexpectedObjectFailureD1Ev+0x20>)
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	601a      	str	r2, [r3, #0]
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7f0 fe0f 	bl	80082d4 <_ZN11MockFailureD1Ev>
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	4618      	mov	r0, r3
 80176ba:	3708      	adds	r7, #8
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}
 80176c0:	08024e04 	.word	0x08024e04

080176c4 <_ZN27MockUnexpectedObjectFailureD0Ev>:
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6878      	ldr	r0, [r7, #4]
 80176ce:	f7ff ffe7 	bl	80176a0 <_ZN27MockUnexpectedObjectFailureD1Ev>
 80176d2:	2134      	movs	r1, #52	; 0x34
 80176d4:	6878      	ldr	r0, [r7, #4]
 80176d6:	f7f0 f9cb 	bl	8007a70 <_ZdlPvj>
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	4618      	mov	r0, r3
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}

080176e4 <_ZN23MockCheckedExpectedCall13withCallOrderEj>:
    MockCheckedExpectedCall();
    MockCheckedExpectedCall(unsigned int numCalls);
    virtual ~MockCheckedExpectedCall() _destructor_override;

    virtual MockExpectedCall& withName(const SimpleString& name) _override;
    virtual MockExpectedCall& withCallOrder(unsigned int callOrder) _override { return withCallOrder(callOrder, callOrder); }
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]
 80176ec:	6039      	str	r1, [r7, #0]
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	681b      	ldr	r3, [r3, #0]
 80176f2:	3310      	adds	r3, #16
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	683a      	ldr	r2, [r7, #0]
 80176f8:	6839      	ldr	r1, [r7, #0]
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	4798      	blx	r3
 80176fe:	4603      	mov	r3, r0
 8017700:	4618      	mov	r0, r3
 8017702:	3708      	adds	r7, #8
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}

08017708 <_ZN23MockIgnoredExpectedCall8withNameERK12SimpleString>:

class MockIgnoredExpectedCall: public MockExpectedCall
{
public:

    virtual MockExpectedCall& withName(const SimpleString&) _override { return *this;}
 8017708:	b480      	push	{r7}
 801770a:	b083      	sub	sp, #12
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
 8017710:	6039      	str	r1, [r7, #0]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	4618      	mov	r0, r3
 8017716:	370c      	adds	r7, #12
 8017718:	46bd      	mov	sp, r7
 801771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801771e:	4770      	bx	lr

08017720 <_ZN23MockIgnoredExpectedCall13withCallOrderEj>:
    virtual MockExpectedCall& withCallOrder(unsigned int) _override { return *this; }
 8017720:	b480      	push	{r7}
 8017722:	b083      	sub	sp, #12
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	4618      	mov	r0, r3
 801772e:	370c      	adds	r7, #12
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr

08017738 <_ZN23MockIgnoredExpectedCall13withCallOrderEjj>:
    virtual MockExpectedCall& withCallOrder(unsigned int, unsigned int) _override { return *this; }
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	60f8      	str	r0, [r7, #12]
 8017740:	60b9      	str	r1, [r7, #8]
 8017742:	607a      	str	r2, [r7, #4]
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	4618      	mov	r0, r3
 8017748:	3714      	adds	r7, #20
 801774a:	46bd      	mov	sp, r7
 801774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017750:	4770      	bx	lr

08017752 <_ZN23MockIgnoredExpectedCall17withBoolParameterERK12SimpleStringb>:
    virtual MockExpectedCall& withBoolParameter(const SimpleString&, bool) _override { return *this; }
 8017752:	b480      	push	{r7}
 8017754:	b085      	sub	sp, #20
 8017756:	af00      	add	r7, sp, #0
 8017758:	60f8      	str	r0, [r7, #12]
 801775a:	60b9      	str	r1, [r7, #8]
 801775c:	4613      	mov	r3, r2
 801775e:	71fb      	strb	r3, [r7, #7]
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	4618      	mov	r0, r3
 8017764:	3714      	adds	r7, #20
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr

0801776e <_ZN23MockIgnoredExpectedCall16withIntParameterERK12SimpleStringi>:
    virtual MockExpectedCall& withIntParameter(const SimpleString&, int) _override { return *this; }
 801776e:	b480      	push	{r7}
 8017770:	b085      	sub	sp, #20
 8017772:	af00      	add	r7, sp, #0
 8017774:	60f8      	str	r0, [r7, #12]
 8017776:	60b9      	str	r1, [r7, #8]
 8017778:	607a      	str	r2, [r7, #4]
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	4618      	mov	r0, r3
 801777e:	3714      	adds	r7, #20
 8017780:	46bd      	mov	sp, r7
 8017782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017786:	4770      	bx	lr

08017788 <_ZN23MockIgnoredExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:
    virtual MockExpectedCall& withUnsignedIntParameter(const SimpleString&, unsigned int) _override{ return *this; }
 8017788:	b480      	push	{r7}
 801778a:	b085      	sub	sp, #20
 801778c:	af00      	add	r7, sp, #0
 801778e:	60f8      	str	r0, [r7, #12]
 8017790:	60b9      	str	r1, [r7, #8]
 8017792:	607a      	str	r2, [r7, #4]
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	4618      	mov	r0, r3
 8017798:	3714      	adds	r7, #20
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr

080177a2 <_ZN23MockIgnoredExpectedCall20withLongIntParameterERK12SimpleStringl>:
    virtual MockExpectedCall& withLongIntParameter(const SimpleString&, long int) _override { return *this; }
 80177a2:	b480      	push	{r7}
 80177a4:	b085      	sub	sp, #20
 80177a6:	af00      	add	r7, sp, #0
 80177a8:	60f8      	str	r0, [r7, #12]
 80177aa:	60b9      	str	r1, [r7, #8]
 80177ac:	607a      	str	r2, [r7, #4]
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	4618      	mov	r0, r3
 80177b2:	3714      	adds	r7, #20
 80177b4:	46bd      	mov	sp, r7
 80177b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ba:	4770      	bx	lr

080177bc <_ZN23MockIgnoredExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:
    virtual MockExpectedCall& withUnsignedLongIntParameter(const SimpleString&, unsigned long int) _override { return *this; }
 80177bc:	b480      	push	{r7}
 80177be:	b085      	sub	sp, #20
 80177c0:	af00      	add	r7, sp, #0
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	4618      	mov	r0, r3
 80177cc:	3714      	adds	r7, #20
 80177ce:	46bd      	mov	sp, r7
 80177d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d4:	4770      	bx	lr

080177d6 <_ZN23MockIgnoredExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
    virtual MockExpectedCall& withLongLongIntParameter(const SimpleString&, cpputest_longlong) _override { return *this; }
 80177d6:	b480      	push	{r7}
 80177d8:	b085      	sub	sp, #20
 80177da:	af00      	add	r7, sp, #0
 80177dc:	60f8      	str	r0, [r7, #12]
 80177de:	60b9      	str	r1, [r7, #8]
 80177e0:	4639      	mov	r1, r7
 80177e2:	e881 000c 	stmia.w	r1, {r2, r3}
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	4618      	mov	r0, r3
 80177ea:	3714      	adds	r7, #20
 80177ec:	46bd      	mov	sp, r7
 80177ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f2:	4770      	bx	lr

080177f4 <_ZN23MockIgnoredExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:
    virtual MockExpectedCall& withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong) _override { return *this; }
 80177f4:	b480      	push	{r7}
 80177f6:	b085      	sub	sp, #20
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	4639      	mov	r1, r7
 8017800:	e881 000c 	stmia.w	r1, {r2, r3}
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	4618      	mov	r0, r3
 8017808:	3714      	adds	r7, #20
 801780a:	46bd      	mov	sp, r7
 801780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017810:	4770      	bx	lr

08017812 <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double) _override { return *this; }
 8017812:	b480      	push	{r7}
 8017814:	b085      	sub	sp, #20
 8017816:	af00      	add	r7, sp, #0
 8017818:	60f8      	str	r0, [r7, #12]
 801781a:	60b9      	str	r1, [r7, #8]
 801781c:	ed87 0b00 	vstr	d0, [r7]
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	4618      	mov	r0, r3
 8017824:	3714      	adds	r7, #20
 8017826:	46bd      	mov	sp, r7
 8017828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782c:	4770      	bx	lr

0801782e <_ZN23MockIgnoredExpectedCall19withDoubleParameterERK12SimpleStringdd>:
    virtual MockExpectedCall& withDoubleParameter(const SimpleString&, double, double) _override { return *this; }
 801782e:	b480      	push	{r7}
 8017830:	b087      	sub	sp, #28
 8017832:	af00      	add	r7, sp, #0
 8017834:	6178      	str	r0, [r7, #20]
 8017836:	6139      	str	r1, [r7, #16]
 8017838:	ed87 0b02 	vstr	d0, [r7, #8]
 801783c:	ed87 1b00 	vstr	d1, [r7]
 8017840:	697b      	ldr	r3, [r7, #20]
 8017842:	4618      	mov	r0, r3
 8017844:	371c      	adds	r7, #28
 8017846:	46bd      	mov	sp, r7
 8017848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784c:	4770      	bx	lr

0801784e <_ZN23MockIgnoredExpectedCall19withStringParameterERK12SimpleStringPKc>:
    virtual MockExpectedCall& withStringParameter(const SimpleString&, const char*) _override { return *this; }
 801784e:	b480      	push	{r7}
 8017850:	b085      	sub	sp, #20
 8017852:	af00      	add	r7, sp, #0
 8017854:	60f8      	str	r0, [r7, #12]
 8017856:	60b9      	str	r1, [r7, #8]
 8017858:	607a      	str	r2, [r7, #4]
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	4618      	mov	r0, r3
 801785e:	3714      	adds	r7, #20
 8017860:	46bd      	mov	sp, r7
 8017862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017866:	4770      	bx	lr

08017868 <_ZN23MockIgnoredExpectedCall20withPointerParameterERK12SimpleStringPv>:
    virtual MockExpectedCall& withPointerParameter(const SimpleString& , void*) _override { return *this; }
 8017868:	b480      	push	{r7}
 801786a:	b085      	sub	sp, #20
 801786c:	af00      	add	r7, sp, #0
 801786e:	60f8      	str	r0, [r7, #12]
 8017870:	60b9      	str	r1, [r7, #8]
 8017872:	607a      	str	r2, [r7, #4]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	4618      	mov	r0, r3
 8017878:	3714      	adds	r7, #20
 801787a:	46bd      	mov	sp, r7
 801787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017880:	4770      	bx	lr

08017882 <_ZN23MockIgnoredExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:
    virtual MockExpectedCall& withConstPointerParameter(const SimpleString& , const void*) _override { return *this; }
 8017882:	b480      	push	{r7}
 8017884:	b085      	sub	sp, #20
 8017886:	af00      	add	r7, sp, #0
 8017888:	60f8      	str	r0, [r7, #12]
 801788a:	60b9      	str	r1, [r7, #8]
 801788c:	607a      	str	r2, [r7, #4]
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	4618      	mov	r0, r3
 8017892:	3714      	adds	r7, #20
 8017894:	46bd      	mov	sp, r7
 8017896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801789a:	4770      	bx	lr

0801789c <_ZN23MockIgnoredExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:
    virtual MockExpectedCall& withFunctionPointerParameter(const SimpleString& , void(*)()) _override { return *this; }
 801789c:	b480      	push	{r7}
 801789e:	b085      	sub	sp, #20
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	60f8      	str	r0, [r7, #12]
 80178a4:	60b9      	str	r1, [r7, #8]
 80178a6:	607a      	str	r2, [r7, #4]
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	4618      	mov	r0, r3
 80178ac:	3714      	adds	r7, #20
 80178ae:	46bd      	mov	sp, r7
 80178b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b4:	4770      	bx	lr

080178b6 <_ZN23MockIgnoredExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:
    virtual MockExpectedCall& withMemoryBufferParameter(const SimpleString&, const unsigned char*, size_t) _override { return *this; }
 80178b6:	b480      	push	{r7}
 80178b8:	b085      	sub	sp, #20
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	60f8      	str	r0, [r7, #12]
 80178be:	60b9      	str	r1, [r7, #8]
 80178c0:	607a      	str	r2, [r7, #4]
 80178c2:	603b      	str	r3, [r7, #0]
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	4618      	mov	r0, r3
 80178c8:	3714      	adds	r7, #20
 80178ca:	46bd      	mov	sp, r7
 80178cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d0:	4770      	bx	lr

080178d2 <_ZN23MockIgnoredExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withParameterOfType(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 80178d2:	b480      	push	{r7}
 80178d4:	b085      	sub	sp, #20
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	60f8      	str	r0, [r7, #12]
 80178da:	60b9      	str	r1, [r7, #8]
 80178dc:	607a      	str	r2, [r7, #4]
 80178de:	603b      	str	r3, [r7, #0]
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	4618      	mov	r0, r3
 80178e4:	3714      	adds	r7, #20
 80178e6:	46bd      	mov	sp, r7
 80178e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ec:	4770      	bx	lr

080178ee <_ZN23MockIgnoredExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:
    virtual MockExpectedCall& withOutputParameterReturning(const SimpleString&, const void*, size_t) _override { return *this; }
 80178ee:	b480      	push	{r7}
 80178f0:	b085      	sub	sp, #20
 80178f2:	af00      	add	r7, sp, #0
 80178f4:	60f8      	str	r0, [r7, #12]
 80178f6:	60b9      	str	r1, [r7, #8]
 80178f8:	607a      	str	r2, [r7, #4]
 80178fa:	603b      	str	r3, [r7, #0]
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	4618      	mov	r0, r3
 8017900:	3714      	adds	r7, #20
 8017902:	46bd      	mov	sp, r7
 8017904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017908:	4770      	bx	lr

0801790a <_ZN23MockIgnoredExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:
    virtual MockExpectedCall& withOutputParameterOfTypeReturning(const SimpleString&, const SimpleString&, const void*) _override { return *this; }
 801790a:	b480      	push	{r7}
 801790c:	b085      	sub	sp, #20
 801790e:	af00      	add	r7, sp, #0
 8017910:	60f8      	str	r0, [r7, #12]
 8017912:	60b9      	str	r1, [r7, #8]
 8017914:	607a      	str	r2, [r7, #4]
 8017916:	603b      	str	r3, [r7, #0]
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	4618      	mov	r0, r3
 801791c:	3714      	adds	r7, #20
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr

08017926 <_ZN23MockIgnoredExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:
    virtual MockExpectedCall& withUnmodifiedOutputParameter(const SimpleString&) _override { return *this; }
 8017926:	b480      	push	{r7}
 8017928:	b083      	sub	sp, #12
 801792a:	af00      	add	r7, sp, #0
 801792c:	6078      	str	r0, [r7, #4]
 801792e:	6039      	str	r1, [r7, #0]
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	4618      	mov	r0, r3
 8017934:	370c      	adds	r7, #12
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr

0801793e <_ZN23MockIgnoredExpectedCall21ignoreOtherParametersEv>:
    virtual MockExpectedCall& ignoreOtherParameters() _override { return *this;}
 801793e:	b480      	push	{r7}
 8017940:	b083      	sub	sp, #12
 8017942:	af00      	add	r7, sp, #0
 8017944:	6078      	str	r0, [r7, #4]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	4618      	mov	r0, r3
 801794a:	370c      	adds	r7, #12
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr

08017954 <_ZN23MockIgnoredExpectedCall14andReturnValueEb>:

    virtual MockExpectedCall& andReturnValue(bool) _override { return *this; }
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	460b      	mov	r3, r1
 801795e:	70fb      	strb	r3, [r7, #3]
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	4618      	mov	r0, r3
 8017964:	370c      	adds	r7, #12
 8017966:	46bd      	mov	sp, r7
 8017968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801796c:	4770      	bx	lr

0801796e <_ZN23MockIgnoredExpectedCall14andReturnValueEi>:
    virtual MockExpectedCall& andReturnValue(int) _override { return *this; }
 801796e:	b480      	push	{r7}
 8017970:	b083      	sub	sp, #12
 8017972:	af00      	add	r7, sp, #0
 8017974:	6078      	str	r0, [r7, #4]
 8017976:	6039      	str	r1, [r7, #0]
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	4618      	mov	r0, r3
 801797c:	370c      	adds	r7, #12
 801797e:	46bd      	mov	sp, r7
 8017980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017984:	4770      	bx	lr

08017986 <_ZN23MockIgnoredExpectedCall14andReturnValueEj>:
    virtual MockExpectedCall& andReturnValue(unsigned int) _override { return *this; }
 8017986:	b480      	push	{r7}
 8017988:	b083      	sub	sp, #12
 801798a:	af00      	add	r7, sp, #0
 801798c:	6078      	str	r0, [r7, #4]
 801798e:	6039      	str	r1, [r7, #0]
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	4618      	mov	r0, r3
 8017994:	370c      	adds	r7, #12
 8017996:	46bd      	mov	sp, r7
 8017998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799c:	4770      	bx	lr

0801799e <_ZN23MockIgnoredExpectedCall14andReturnValueEl>:
    virtual MockExpectedCall& andReturnValue(long int) _override { return *this; }
 801799e:	b480      	push	{r7}
 80179a0:	b083      	sub	sp, #12
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	6078      	str	r0, [r7, #4]
 80179a6:	6039      	str	r1, [r7, #0]
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	4618      	mov	r0, r3
 80179ac:	370c      	adds	r7, #12
 80179ae:	46bd      	mov	sp, r7
 80179b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b4:	4770      	bx	lr

080179b6 <_ZN23MockIgnoredExpectedCall14andReturnValueEm>:
    virtual MockExpectedCall& andReturnValue(unsigned long int) _override { return *this; }
 80179b6:	b480      	push	{r7}
 80179b8:	b083      	sub	sp, #12
 80179ba:	af00      	add	r7, sp, #0
 80179bc:	6078      	str	r0, [r7, #4]
 80179be:	6039      	str	r1, [r7, #0]
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	4618      	mov	r0, r3
 80179c4:	370c      	adds	r7, #12
 80179c6:	46bd      	mov	sp, r7
 80179c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179cc:	4770      	bx	lr

080179ce <_ZN23MockIgnoredExpectedCall14andReturnValueE17cpputest_longlong>:
    virtual MockExpectedCall& andReturnValue(cpputest_longlong) _override { return *this; }
 80179ce:	b480      	push	{r7}
 80179d0:	b085      	sub	sp, #20
 80179d2:	af00      	add	r7, sp, #0
 80179d4:	60f8      	str	r0, [r7, #12]
 80179d6:	1d3b      	adds	r3, r7, #4
 80179d8:	e883 0006 	stmia.w	r3, {r1, r2}
 80179dc:	68fb      	ldr	r3, [r7, #12]
 80179de:	4618      	mov	r0, r3
 80179e0:	3714      	adds	r7, #20
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr

080179ea <_ZN23MockIgnoredExpectedCall14andReturnValueE18cpputest_ulonglong>:
    virtual MockExpectedCall& andReturnValue(cpputest_ulonglong) _override { return *this; }
 80179ea:	b480      	push	{r7}
 80179ec:	b085      	sub	sp, #20
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	60f8      	str	r0, [r7, #12]
 80179f2:	1d3b      	adds	r3, r7, #4
 80179f4:	e883 0006 	stmia.w	r3, {r1, r2}
 80179f8:	68fb      	ldr	r3, [r7, #12]
 80179fa:	4618      	mov	r0, r3
 80179fc:	3714      	adds	r7, #20
 80179fe:	46bd      	mov	sp, r7
 8017a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a04:	4770      	bx	lr

08017a06 <_ZN23MockIgnoredExpectedCall14andReturnValueEd>:
    virtual MockExpectedCall& andReturnValue(double) _override { return *this;}
 8017a06:	b480      	push	{r7}
 8017a08:	b085      	sub	sp, #20
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	60f8      	str	r0, [r7, #12]
 8017a0e:	ed87 0b00 	vstr	d0, [r7]
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	4618      	mov	r0, r3
 8017a16:	3714      	adds	r7, #20
 8017a18:	46bd      	mov	sp, r7
 8017a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1e:	4770      	bx	lr

08017a20 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKc>:
    virtual MockExpectedCall& andReturnValue(const char*) _override { return *this; }
 8017a20:	b480      	push	{r7}
 8017a22:	b083      	sub	sp, #12
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	6078      	str	r0, [r7, #4]
 8017a28:	6039      	str	r1, [r7, #0]
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	4618      	mov	r0, r3
 8017a2e:	370c      	adds	r7, #12
 8017a30:	46bd      	mov	sp, r7
 8017a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a36:	4770      	bx	lr

08017a38 <_ZN23MockIgnoredExpectedCall14andReturnValueEPv>:
    virtual MockExpectedCall& andReturnValue(void*) _override { return *this; }
 8017a38:	b480      	push	{r7}
 8017a3a:	b083      	sub	sp, #12
 8017a3c:	af00      	add	r7, sp, #0
 8017a3e:	6078      	str	r0, [r7, #4]
 8017a40:	6039      	str	r1, [r7, #0]
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	4618      	mov	r0, r3
 8017a46:	370c      	adds	r7, #12
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4e:	4770      	bx	lr

08017a50 <_ZN23MockIgnoredExpectedCall14andReturnValueEPKv>:
    virtual MockExpectedCall& andReturnValue(const void*) _override { return *this; }
 8017a50:	b480      	push	{r7}
 8017a52:	b083      	sub	sp, #12
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
 8017a58:	6039      	str	r1, [r7, #0]
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	370c      	adds	r7, #12
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr

08017a68 <_ZN23MockIgnoredExpectedCall14andReturnValueEPFvvE>:
    virtual MockExpectedCall& andReturnValue(void (*)()) _override { return *this; }
 8017a68:	b480      	push	{r7}
 8017a6a:	b083      	sub	sp, #12
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
 8017a70:	6039      	str	r1, [r7, #0]
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	4618      	mov	r0, r3
 8017a76:	370c      	adds	r7, #12
 8017a78:	46bd      	mov	sp, r7
 8017a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7e:	4770      	bx	lr

08017a80 <_ZN23MockIgnoredExpectedCall8onObjectEPv>:

    virtual MockExpectedCall& onObject(void*) _override { return *this; }
 8017a80:	b480      	push	{r7}
 8017a82:	b083      	sub	sp, #12
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
 8017a88:	6039      	str	r1, [r7, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	4618      	mov	r0, r3
 8017a8e:	370c      	adds	r7, #12
 8017a90:	46bd      	mov	sp, r7
 8017a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a96:	4770      	bx	lr

08017a98 <_ZN16MockExpectedCallC1Ev>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCall::MockExpectedCall()
 8017a98:	b480      	push	{r7}
 8017a9a:	b083      	sub	sp, #12
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	4a04      	ldr	r2, [pc, #16]	; (8017ab4 <_ZN16MockExpectedCallC1Ev+0x1c>)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	601a      	str	r2, [r3, #0]
{
}
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	370c      	adds	r7, #12
 8017aac:	46bd      	mov	sp, r7
 8017aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab2:	4770      	bx	lr
 8017ab4:	080254dc 	.word	0x080254dc

08017ab8 <_ZN16MockExpectedCallD1Ev>:

MockExpectedCall::~MockExpectedCall()
 8017ab8:	b480      	push	{r7}
 8017aba:	b083      	sub	sp, #12
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	4a04      	ldr	r2, [pc, #16]	; (8017ad4 <_ZN16MockExpectedCallD1Ev+0x1c>)
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	601a      	str	r2, [r3, #0]
{
}
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4618      	mov	r0, r3
 8017aca:	370c      	adds	r7, #12
 8017acc:	46bd      	mov	sp, r7
 8017ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ad2:	4770      	bx	lr
 8017ad4:	080254dc 	.word	0x080254dc

08017ad8 <_Z10StringFromRK14MockNamedValue>:

SimpleString StringFrom(const MockNamedValue& parameter)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b082      	sub	sp, #8
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	6078      	str	r0, [r7, #4]
 8017ae0:	6039      	str	r1, [r7, #0]
    return parameter.toString();
 8017ae2:	683b      	ldr	r3, [r7, #0]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	3358      	adds	r3, #88	; 0x58
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	687a      	ldr	r2, [r7, #4]
 8017aec:	6839      	ldr	r1, [r7, #0]
 8017aee:	4610      	mov	r0, r2
 8017af0:	4798      	blx	r3
}
 8017af2:	6878      	ldr	r0, [r7, #4]
 8017af4:	3708      	adds	r7, #8
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}

08017afa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>:

void MockCheckedExpectedCall::setName(const SimpleString& name)
{
 8017afa:	b580      	push	{r7, lr}
 8017afc:	b082      	sub	sp, #8
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]
 8017b02:	6039      	str	r1, [r7, #0]
    functionName_ = name;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	3304      	adds	r3, #4
 8017b08:	6839      	ldr	r1, [r7, #0]
 8017b0a:	4618      	mov	r0, r3
 8017b0c:	f7f2 fbcb 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
}
 8017b10:	bf00      	nop
 8017b12:	3708      	adds	r7, #8
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}

08017b18 <_ZNK23MockCheckedExpectedCall7getNameEv>:

SimpleString MockCheckedExpectedCall::getName() const
{
 8017b18:	b580      	push	{r7, lr}
 8017b1a:	b082      	sub	sp, #8
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	6078      	str	r0, [r7, #4]
 8017b20:	6039      	str	r1, [r7, #0]
    return functionName_;
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	3304      	adds	r3, #4
 8017b26:	4619      	mov	r1, r3
 8017b28:	6878      	ldr	r0, [r7, #4]
 8017b2a:	f7f2 fba4 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	3708      	adds	r7, #8
 8017b32:	46bd      	mov	sp, r7
 8017b34:	bd80      	pop	{r7, pc}
	...

08017b38 <_ZN23MockCheckedExpectedCallC1Ej>:
{
    inputParameters_ = new MockNamedValueList();
    outputParameters_ = new MockNamedValueList();
}

MockCheckedExpectedCall::MockCheckedExpectedCall(unsigned int numCalls)
 8017b38:	b590      	push	{r4, r7, lr}
 8017b3a:	b085      	sub	sp, #20
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
 8017b40:	6039      	str	r1, [r7, #0]
    : ignoreOtherParameters_(false), isActualCallMatchFinalized_(false),
      initialExpectedCallOrder_(NO_EXPECTED_CALL_ORDER), finalExpectedCallOrder_(NO_EXPECTED_CALL_ORDER),
      outOfOrder_(false), returnValue_(""), objectPtr_(NULLPTR), isSpecificObjectExpected_(false), wasPassedToObject_(true),
      actualCalls_(0), expectedCalls_(numCalls)
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7ff ffa7 	bl	8017a98 <_ZN16MockExpectedCallC1Ev>
 8017b4a:	4a2c      	ldr	r2, [pc, #176]	; (8017bfc <_ZN23MockCheckedExpectedCallC1Ej+0xc4>)
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	601a      	str	r2, [r3, #0]
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	3304      	adds	r3, #4
 8017b54:	492a      	ldr	r1, [pc, #168]	; (8017c00 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7f2 fb39 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	731a      	strb	r2, [r3, #12]
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	2200      	movs	r2, #0
 8017b66:	735a      	strb	r2, [r3, #13]
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2200      	movs	r2, #0
 8017b6c:	611a      	str	r2, [r3, #16]
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2200      	movs	r2, #0
 8017b72:	615a      	str	r2, [r3, #20]
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2200      	movs	r2, #0
 8017b78:	761a      	strb	r2, [r3, #24]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017b80:	f107 0308 	add.w	r3, r7, #8
 8017b84:	491e      	ldr	r1, [pc, #120]	; (8017c00 <_ZN23MockCheckedExpectedCallC1Ej+0xc8>)
 8017b86:	4618      	mov	r0, r3
 8017b88:	f7f2 fb21 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8017b8c:	f107 0308 	add.w	r3, r7, #8
 8017b90:	4619      	mov	r1, r3
 8017b92:	4620      	mov	r0, r4
 8017b94:	f003 f840 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8017b98:	f107 0308 	add.w	r3, r7, #8
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7f2 fece 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	661a      	str	r2, [r3, #96]	; 0x60
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	2201      	movs	r2, #1
 8017bb4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	2200      	movs	r2, #0
 8017bbc:	669a      	str	r2, [r3, #104]	; 0x68
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	683a      	ldr	r2, [r7, #0]
 8017bc2:	66da      	str	r2, [r3, #108]	; 0x6c
{
    inputParameters_ = new MockNamedValueList();
 8017bc4:	2246      	movs	r2, #70	; 0x46
 8017bc6:	490f      	ldr	r1, [pc, #60]	; (8017c04 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8017bc8:	2004      	movs	r0, #4
 8017bca:	f7ef ff3d 	bl	8007a48 <_ZnwjPKci>
 8017bce:	4604      	mov	r4, r0
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	f004 ff36 	bl	801ca42 <_ZN18MockNamedValueListC1Ev>
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	61dc      	str	r4, [r3, #28]
    outputParameters_ = new MockNamedValueList();
 8017bda:	2247      	movs	r2, #71	; 0x47
 8017bdc:	4909      	ldr	r1, [pc, #36]	; (8017c04 <_ZN23MockCheckedExpectedCallC1Ej+0xcc>)
 8017bde:	2004      	movs	r0, #4
 8017be0:	f7ef ff32 	bl	8007a48 <_ZnwjPKci>
 8017be4:	4604      	mov	r4, r0
 8017be6:	4620      	mov	r0, r4
 8017be8:	f004 ff2b 	bl	801ca42 <_ZN18MockNamedValueListC1Ev>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	621c      	str	r4, [r3, #32]
}
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	4618      	mov	r0, r3
 8017bf4:	3714      	adds	r7, #20
 8017bf6:	46bd      	mov	sp, r7
 8017bf8:	bd90      	pop	{r4, r7, pc}
 8017bfa:	bf00      	nop
 8017bfc:	08025320 	.word	0x08025320
 8017c00:	08022eec 	.word	0x08022eec
 8017c04:	08022ef0 	.word	0x08022ef0

08017c08 <_ZN23MockCheckedExpectedCallD1Ev>:

MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b082      	sub	sp, #8
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	4a17      	ldr	r2, [pc, #92]	; (8017c70 <_ZN23MockCheckedExpectedCallD1Ev+0x68>)
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	601a      	str	r2, [r3, #0]
{
    inputParameters_->clear();
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	69db      	ldr	r3, [r3, #28]
 8017c1a:	4618      	mov	r0, r3
 8017c1c:	f004 ff1f 	bl	801ca5e <_ZN18MockNamedValueList5clearEv>
    delete inputParameters_;
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	69db      	ldr	r3, [r3, #28]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d003      	beq.n	8017c30 <_ZN23MockCheckedExpectedCallD1Ev+0x28>
 8017c28:	2104      	movs	r1, #4
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7ef ff20 	bl	8007a70 <_ZdlPvj>
    outputParameters_->clear();
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a1b      	ldr	r3, [r3, #32]
 8017c34:	4618      	mov	r0, r3
 8017c36:	f004 ff12 	bl	801ca5e <_ZN18MockNamedValueList5clearEv>
    delete outputParameters_;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6a1b      	ldr	r3, [r3, #32]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d003      	beq.n	8017c4a <_ZN23MockCheckedExpectedCallD1Ev+0x42>
 8017c42:	2104      	movs	r1, #4
 8017c44:	4618      	mov	r0, r3
 8017c46:	f7ef ff13 	bl	8007a70 <_ZdlPvj>
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	3328      	adds	r3, #40	; 0x28
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f003 f80c 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	3304      	adds	r3, #4
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7f2 fe70 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	4618      	mov	r0, r3
 8017c62:	f7ff ff29 	bl	8017ab8 <_ZN16MockExpectedCallD1Ev>
}
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3708      	adds	r7, #8
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}
 8017c70:	08025320 	.word	0x08025320

08017c74 <_ZN23MockCheckedExpectedCallD0Ev>:
MockCheckedExpectedCall::~MockCheckedExpectedCall()
 8017c74:	b580      	push	{r7, lr}
 8017c76:	b082      	sub	sp, #8
 8017c78:	af00      	add	r7, sp, #0
 8017c7a:	6078      	str	r0, [r7, #4]
}
 8017c7c:	6878      	ldr	r0, [r7, #4]
 8017c7e:	f7ff ffc3 	bl	8017c08 <_ZN23MockCheckedExpectedCallD1Ev>
 8017c82:	2170      	movs	r1, #112	; 0x70
 8017c84:	6878      	ldr	r0, [r7, #4]
 8017c86:	f7ef fef3 	bl	8007a70 <_ZdlPvj>
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	3708      	adds	r7, #8
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}

08017c94 <_ZN23MockCheckedExpectedCall8withNameERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withName(const SimpleString& name)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b082      	sub	sp, #8
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
 8017c9c:	6039      	str	r1, [r7, #0]
    setName(name);
 8017c9e:	6839      	ldr	r1, [r7, #0]
 8017ca0:	6878      	ldr	r0, [r7, #4]
 8017ca2:	f7ff ff2a 	bl	8017afa <_ZN23MockCheckedExpectedCall7setNameERK12SimpleString>
    return *this;
 8017ca6:	687b      	ldr	r3, [r7, #4]
}
 8017ca8:	4618      	mov	r0, r3
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb>:

MockExpectedCall& MockCheckedExpectedCall::withBoolParameter(const SimpleString& name, bool value)
{
 8017cb0:	b590      	push	{r4, r7, lr}
 8017cb2:	b087      	sub	sp, #28
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	60f8      	str	r0, [r7, #12]
 8017cb8:	60b9      	str	r1, [r7, #8]
 8017cba:	4613      	mov	r3, r2
 8017cbc:	71fb      	strb	r3, [r7, #7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017cbe:	225a      	movs	r2, #90	; 0x5a
 8017cc0:	490e      	ldr	r1, [pc, #56]	; (8017cfc <_ZN23MockCheckedExpectedCall17withBoolParameterERK12SimpleStringb+0x4c>)
 8017cc2:	2038      	movs	r0, #56	; 0x38
 8017cc4:	f7ef fec0 	bl	8007a48 <_ZnwjPKci>
 8017cc8:	4604      	mov	r4, r0
 8017cca:	68b9      	ldr	r1, [r7, #8]
 8017ccc:	4620      	mov	r0, r4
 8017cce:	f001 f851 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017cd2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	69db      	ldr	r3, [r3, #28]
 8017cd8:	6979      	ldr	r1, [r7, #20]
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f004 fee2 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	3308      	adds	r3, #8
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	79fa      	ldrb	r2, [r7, #7]
 8017cea:	4611      	mov	r1, r2
 8017cec:	6978      	ldr	r0, [r7, #20]
 8017cee:	4798      	blx	r3
    return *this;
 8017cf0:	68fb      	ldr	r3, [r7, #12]
}
 8017cf2:	4618      	mov	r0, r3
 8017cf4:	371c      	adds	r7, #28
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd90      	pop	{r4, r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	08022ef0 	.word	0x08022ef0

08017d00 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedIntParameter(const SimpleString& name, unsigned int value)
{
 8017d00:	b590      	push	{r4, r7, lr}
 8017d02:	b087      	sub	sp, #28
 8017d04:	af00      	add	r7, sp, #0
 8017d06:	60f8      	str	r0, [r7, #12]
 8017d08:	60b9      	str	r1, [r7, #8]
 8017d0a:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017d0c:	2262      	movs	r2, #98	; 0x62
 8017d0e:	490e      	ldr	r1, [pc, #56]	; (8017d48 <_ZN23MockCheckedExpectedCall24withUnsignedIntParameterERK12SimpleStringj+0x48>)
 8017d10:	2038      	movs	r0, #56	; 0x38
 8017d12:	f7ef fe99 	bl	8007a48 <_ZnwjPKci>
 8017d16:	4604      	mov	r4, r0
 8017d18:	68b9      	ldr	r1, [r7, #8]
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f001 f82a 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017d20:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	69db      	ldr	r3, [r3, #28]
 8017d26:	6979      	ldr	r1, [r7, #20]
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f004 febb 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017d2e:	697b      	ldr	r3, [r7, #20]
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	3310      	adds	r3, #16
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	6879      	ldr	r1, [r7, #4]
 8017d38:	6978      	ldr	r0, [r7, #20]
 8017d3a:	4798      	blx	r3
    return *this;
 8017d3c:	68fb      	ldr	r3, [r7, #12]
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	371c      	adds	r7, #28
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd90      	pop	{r4, r7, pc}
 8017d46:	bf00      	nop
 8017d48:	08022ef0 	.word	0x08022ef0

08017d4c <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi>:

MockExpectedCall& MockCheckedExpectedCall::withIntParameter(const SimpleString& name, int value)
{
 8017d4c:	b590      	push	{r4, r7, lr}
 8017d4e:	b087      	sub	sp, #28
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017d58:	226a      	movs	r2, #106	; 0x6a
 8017d5a:	490e      	ldr	r1, [pc, #56]	; (8017d94 <_ZN23MockCheckedExpectedCall16withIntParameterERK12SimpleStringi+0x48>)
 8017d5c:	2038      	movs	r0, #56	; 0x38
 8017d5e:	f7ef fe73 	bl	8007a48 <_ZnwjPKci>
 8017d62:	4604      	mov	r4, r0
 8017d64:	68b9      	ldr	r1, [r7, #8]
 8017d66:	4620      	mov	r0, r4
 8017d68:	f001 f804 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017d6c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	69db      	ldr	r3, [r3, #28]
 8017d72:	6979      	ldr	r1, [r7, #20]
 8017d74:	4618      	mov	r0, r3
 8017d76:	f004 fe95 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	330c      	adds	r3, #12
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	6879      	ldr	r1, [r7, #4]
 8017d84:	6978      	ldr	r0, [r7, #20]
 8017d86:	4798      	blx	r3
    return *this;
 8017d88:	68fb      	ldr	r3, [r7, #12]
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	371c      	adds	r7, #28
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd90      	pop	{r4, r7, pc}
 8017d92:	bf00      	nop
 8017d94:	08022ef0 	.word	0x08022ef0

08017d98 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl>:

MockExpectedCall& MockCheckedExpectedCall::withLongIntParameter(const SimpleString& name, long int value)
{
 8017d98:	b590      	push	{r4, r7, lr}
 8017d9a:	b087      	sub	sp, #28
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	60f8      	str	r0, [r7, #12]
 8017da0:	60b9      	str	r1, [r7, #8]
 8017da2:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017da4:	2272      	movs	r2, #114	; 0x72
 8017da6:	490e      	ldr	r1, [pc, #56]	; (8017de0 <_ZN23MockCheckedExpectedCall20withLongIntParameterERK12SimpleStringl+0x48>)
 8017da8:	2038      	movs	r0, #56	; 0x38
 8017daa:	f7ef fe4d 	bl	8007a48 <_ZnwjPKci>
 8017dae:	4604      	mov	r4, r0
 8017db0:	68b9      	ldr	r1, [r7, #8]
 8017db2:	4620      	mov	r0, r4
 8017db4:	f000 ffde 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017db8:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	69db      	ldr	r3, [r3, #28]
 8017dbe:	6979      	ldr	r1, [r7, #20]
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f004 fe6f 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017dc6:	697b      	ldr	r3, [r7, #20]
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	3314      	adds	r3, #20
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	6879      	ldr	r1, [r7, #4]
 8017dd0:	6978      	ldr	r0, [r7, #20]
 8017dd2:	4798      	blx	r3
    return *this;
 8017dd4:	68fb      	ldr	r3, [r7, #12]
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	371c      	adds	r7, #28
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	bd90      	pop	{r4, r7, pc}
 8017dde:	bf00      	nop
 8017de0:	08022ef0 	.word	0x08022ef0

08017de4 <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongIntParameter(const SimpleString& name, unsigned long int value)
{
 8017de4:	b590      	push	{r4, r7, lr}
 8017de6:	b087      	sub	sp, #28
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	60f8      	str	r0, [r7, #12]
 8017dec:	60b9      	str	r1, [r7, #8]
 8017dee:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017df0:	227a      	movs	r2, #122	; 0x7a
 8017df2:	490e      	ldr	r1, [pc, #56]	; (8017e2c <_ZN23MockCheckedExpectedCall28withUnsignedLongIntParameterERK12SimpleStringm+0x48>)
 8017df4:	2038      	movs	r0, #56	; 0x38
 8017df6:	f7ef fe27 	bl	8007a48 <_ZnwjPKci>
 8017dfa:	4604      	mov	r4, r0
 8017dfc:	68b9      	ldr	r1, [r7, #8]
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f000 ffb8 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017e04:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	69db      	ldr	r3, [r3, #28]
 8017e0a:	6979      	ldr	r1, [r7, #20]
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f004 fe49 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017e12:	697b      	ldr	r3, [r7, #20]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	3318      	adds	r3, #24
 8017e18:	681b      	ldr	r3, [r3, #0]
 8017e1a:	6879      	ldr	r1, [r7, #4]
 8017e1c:	6978      	ldr	r0, [r7, #20]
 8017e1e:	4798      	blx	r3
    return *this;
 8017e20:	68fb      	ldr	r3, [r7, #12]
}
 8017e22:	4618      	mov	r0, r3
 8017e24:	371c      	adds	r7, #28
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd90      	pop	{r4, r7, pc}
 8017e2a:	bf00      	nop
 8017e2c:	08022ef0 	.word	0x08022ef0

08017e30 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::withLongLongIntParameter(const SimpleString&, cpputest_longlong)
{
 8017e30:	b5b0      	push	{r4, r5, r7, lr}
 8017e32:	b086      	sub	sp, #24
 8017e34:	af02      	add	r7, sp, #8
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	4639      	mov	r1, r7
 8017e3c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Long Long type is not supported");
 8017e40:	f7f9 fda8 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8017e44:	4604      	mov	r4, r0
 8017e46:	6823      	ldr	r3, [r4, #0]
 8017e48:	3368      	adds	r3, #104	; 0x68
 8017e4a:	681d      	ldr	r5, [r3, #0]
 8017e4c:	f7f9 fdb2 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017e50:	4603      	mov	r3, r0
 8017e52:	9300      	str	r3, [sp, #0]
 8017e54:	2396      	movs	r3, #150	; 0x96
 8017e56:	4a04      	ldr	r2, [pc, #16]	; (8017e68 <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x38>)
 8017e58:	4904      	ldr	r1, [pc, #16]	; (8017e6c <_ZN23MockCheckedExpectedCall24withLongLongIntParameterERK12SimpleString17cpputest_longlong+0x3c>)
 8017e5a:	4620      	mov	r0, r4
 8017e5c:	47a8      	blx	r5
    return *this;
 8017e5e:	68fb      	ldr	r3, [r7, #12]
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3710      	adds	r7, #16
 8017e64:	46bd      	mov	sp, r7
 8017e66:	bdb0      	pop	{r4, r5, r7, pc}
 8017e68:	08022ef0 	.word	0x08022ef0
 8017e6c:	08022f0c 	.word	0x08022f0c

08017e70 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::withUnsignedLongLongIntParameter(const SimpleString&, cpputest_ulonglong)
{
 8017e70:	b5b0      	push	{r4, r5, r7, lr}
 8017e72:	b086      	sub	sp, #24
 8017e74:	af02      	add	r7, sp, #8
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	60b9      	str	r1, [r7, #8]
 8017e7a:	4639      	mov	r1, r7
 8017e7c:	e881 000c 	stmia.w	r1, {r2, r3}
    FAIL("Unsigned Long Long type is not supported");
 8017e80:	f7f9 fd88 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8017e84:	4604      	mov	r4, r0
 8017e86:	6823      	ldr	r3, [r4, #0]
 8017e88:	3368      	adds	r3, #104	; 0x68
 8017e8a:	681d      	ldr	r5, [r3, #0]
 8017e8c:	f7f9 fd92 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8017e90:	4603      	mov	r3, r0
 8017e92:	9300      	str	r3, [sp, #0]
 8017e94:	239c      	movs	r3, #156	; 0x9c
 8017e96:	4a04      	ldr	r2, [pc, #16]	; (8017ea8 <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x38>)
 8017e98:	4904      	ldr	r1, [pc, #16]	; (8017eac <_ZN23MockCheckedExpectedCall32withUnsignedLongLongIntParameterERK12SimpleString18cpputest_ulonglong+0x3c>)
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	47a8      	blx	r5
    return *this;
 8017e9e:	68fb      	ldr	r3, [r7, #12]
}
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	3710      	adds	r7, #16
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8017ea8:	08022ef0 	.word	0x08022ef0
 8017eac:	08022f2c 	.word	0x08022f2c

08017eb0 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd>:

#endif

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value)
{
 8017eb0:	b590      	push	{r4, r7, lr}
 8017eb2:	b087      	sub	sp, #28
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	60f8      	str	r0, [r7, #12]
 8017eb8:	60b9      	str	r1, [r7, #8]
 8017eba:	ed87 0b00 	vstr	d0, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017ebe:	22a4      	movs	r2, #164	; 0xa4
 8017ec0:	490e      	ldr	r1, [pc, #56]	; (8017efc <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringd+0x4c>)
 8017ec2:	2038      	movs	r0, #56	; 0x38
 8017ec4:	f7ef fdc0 	bl	8007a48 <_ZnwjPKci>
 8017ec8:	4604      	mov	r4, r0
 8017eca:	68b9      	ldr	r1, [r7, #8]
 8017ecc:	4620      	mov	r0, r4
 8017ece:	f000 ff51 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017ed2:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	69db      	ldr	r3, [r3, #28]
 8017ed8:	6979      	ldr	r1, [r7, #20]
 8017eda:	4618      	mov	r0, r3
 8017edc:	f004 fde2 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017ee0:	697b      	ldr	r3, [r7, #20]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	3324      	adds	r3, #36	; 0x24
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	ed97 0b00 	vldr	d0, [r7]
 8017eec:	6978      	ldr	r0, [r7, #20]
 8017eee:	4798      	blx	r3
    return *this;
 8017ef0:	68fb      	ldr	r3, [r7, #12]
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	371c      	adds	r7, #28
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd90      	pop	{r4, r7, pc}
 8017efa:	bf00      	nop
 8017efc:	08022ef0 	.word	0x08022ef0

08017f00 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd>:

MockExpectedCall& MockCheckedExpectedCall::withDoubleParameter(const SimpleString& name, double value, double tolerance)
{
 8017f00:	b590      	push	{r4, r7, lr}
 8017f02:	b089      	sub	sp, #36	; 0x24
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6178      	str	r0, [r7, #20]
 8017f08:	6139      	str	r1, [r7, #16]
 8017f0a:	ed87 0b02 	vstr	d0, [r7, #8]
 8017f0e:	ed87 1b00 	vstr	d1, [r7]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017f12:	22ac      	movs	r2, #172	; 0xac
 8017f14:	490f      	ldr	r1, [pc, #60]	; (8017f54 <_ZN23MockCheckedExpectedCall19withDoubleParameterERK12SimpleStringdd+0x54>)
 8017f16:	2038      	movs	r0, #56	; 0x38
 8017f18:	f7ef fd96 	bl	8007a48 <_ZnwjPKci>
 8017f1c:	4604      	mov	r4, r0
 8017f1e:	6939      	ldr	r1, [r7, #16]
 8017f20:	4620      	mov	r0, r4
 8017f22:	f000 ff27 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017f26:	61fc      	str	r4, [r7, #28]
    inputParameters_->add(newParameter);
 8017f28:	697b      	ldr	r3, [r7, #20]
 8017f2a:	69db      	ldr	r3, [r3, #28]
 8017f2c:	69f9      	ldr	r1, [r7, #28]
 8017f2e:	4618      	mov	r0, r3
 8017f30:	f004 fdb8 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value, tolerance);
 8017f34:	69fb      	ldr	r3, [r7, #28]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	3328      	adds	r3, #40	; 0x28
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	ed97 1b00 	vldr	d1, [r7]
 8017f40:	ed97 0b02 	vldr	d0, [r7, #8]
 8017f44:	69f8      	ldr	r0, [r7, #28]
 8017f46:	4798      	blx	r3
    return *this;
 8017f48:	697b      	ldr	r3, [r7, #20]
}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	3724      	adds	r7, #36	; 0x24
 8017f4e:	46bd      	mov	sp, r7
 8017f50:	bd90      	pop	{r4, r7, pc}
 8017f52:	bf00      	nop
 8017f54:	08022ef0 	.word	0x08022ef0

08017f58 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc>:

MockExpectedCall& MockCheckedExpectedCall::withStringParameter(const SimpleString& name, const char* value)
{
 8017f58:	b590      	push	{r4, r7, lr}
 8017f5a:	b087      	sub	sp, #28
 8017f5c:	af00      	add	r7, sp, #0
 8017f5e:	60f8      	str	r0, [r7, #12]
 8017f60:	60b9      	str	r1, [r7, #8]
 8017f62:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017f64:	22b4      	movs	r2, #180	; 0xb4
 8017f66:	490e      	ldr	r1, [pc, #56]	; (8017fa0 <_ZN23MockCheckedExpectedCall19withStringParameterERK12SimpleStringPKc+0x48>)
 8017f68:	2038      	movs	r0, #56	; 0x38
 8017f6a:	f7ef fd6d 	bl	8007a48 <_ZnwjPKci>
 8017f6e:	4604      	mov	r4, r0
 8017f70:	68b9      	ldr	r1, [r7, #8]
 8017f72:	4620      	mov	r0, r4
 8017f74:	f000 fefe 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017f78:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	69db      	ldr	r3, [r3, #28]
 8017f7e:	6979      	ldr	r1, [r7, #20]
 8017f80:	4618      	mov	r0, r3
 8017f82:	f004 fd8f 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	3338      	adds	r3, #56	; 0x38
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	6879      	ldr	r1, [r7, #4]
 8017f90:	6978      	ldr	r0, [r7, #20]
 8017f92:	4798      	blx	r3
    return *this;
 8017f94:	68fb      	ldr	r3, [r7, #12]
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	371c      	adds	r7, #28
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd90      	pop	{r4, r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	08022ef0 	.word	0x08022ef0

08017fa4 <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv>:

MockExpectedCall& MockCheckedExpectedCall::withPointerParameter(const SimpleString& name, void* value)
{
 8017fa4:	b590      	push	{r4, r7, lr}
 8017fa6:	b087      	sub	sp, #28
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	60f8      	str	r0, [r7, #12]
 8017fac:	60b9      	str	r1, [r7, #8]
 8017fae:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017fb0:	22bc      	movs	r2, #188	; 0xbc
 8017fb2:	490e      	ldr	r1, [pc, #56]	; (8017fec <_ZN23MockCheckedExpectedCall20withPointerParameterERK12SimpleStringPv+0x48>)
 8017fb4:	2038      	movs	r0, #56	; 0x38
 8017fb6:	f7ef fd47 	bl	8007a48 <_ZnwjPKci>
 8017fba:	4604      	mov	r4, r0
 8017fbc:	68b9      	ldr	r1, [r7, #8]
 8017fbe:	4620      	mov	r0, r4
 8017fc0:	f000 fed8 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8017fc4:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	69db      	ldr	r3, [r3, #28]
 8017fca:	6979      	ldr	r1, [r7, #20]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f004 fd69 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	332c      	adds	r3, #44	; 0x2c
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	6879      	ldr	r1, [r7, #4]
 8017fdc:	6978      	ldr	r0, [r7, #20]
 8017fde:	4798      	blx	r3
    return *this;
 8017fe0:	68fb      	ldr	r3, [r7, #12]
}
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	371c      	adds	r7, #28
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd90      	pop	{r4, r7, pc}
 8017fea:	bf00      	nop
 8017fec:	08022ef0 	.word	0x08022ef0

08017ff0 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv>:

MockExpectedCall& MockCheckedExpectedCall::withConstPointerParameter(const SimpleString& name, const void* value)
{
 8017ff0:	b590      	push	{r4, r7, lr}
 8017ff2:	b087      	sub	sp, #28
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	60f8      	str	r0, [r7, #12]
 8017ff8:	60b9      	str	r1, [r7, #8]
 8017ffa:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8017ffc:	22c4      	movs	r2, #196	; 0xc4
 8017ffe:	490e      	ldr	r1, [pc, #56]	; (8018038 <_ZN23MockCheckedExpectedCall25withConstPointerParameterERK12SimpleStringPKv+0x48>)
 8018000:	2038      	movs	r0, #56	; 0x38
 8018002:	f7ef fd21 	bl	8007a48 <_ZnwjPKci>
 8018006:	4604      	mov	r4, r0
 8018008:	68b9      	ldr	r1, [r7, #8]
 801800a:	4620      	mov	r0, r4
 801800c:	f000 feb2 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 8018010:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	69db      	ldr	r3, [r3, #28]
 8018016:	6979      	ldr	r1, [r7, #20]
 8018018:	4618      	mov	r0, r3
 801801a:	f004 fd43 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801801e:	697b      	ldr	r3, [r7, #20]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	3330      	adds	r3, #48	; 0x30
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	6879      	ldr	r1, [r7, #4]
 8018028:	6978      	ldr	r0, [r7, #20]
 801802a:	4798      	blx	r3
    return *this;
 801802c:	68fb      	ldr	r3, [r7, #12]
}
 801802e:	4618      	mov	r0, r3
 8018030:	371c      	adds	r7, #28
 8018032:	46bd      	mov	sp, r7
 8018034:	bd90      	pop	{r4, r7, pc}
 8018036:	bf00      	nop
 8018038:	08022ef0 	.word	0x08022ef0

0801803c <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::withFunctionPointerParameter(const SimpleString& name, void (*value)())
{
 801803c:	b590      	push	{r4, r7, lr}
 801803e:	b087      	sub	sp, #28
 8018040:	af00      	add	r7, sp, #0
 8018042:	60f8      	str	r0, [r7, #12]
 8018044:	60b9      	str	r1, [r7, #8]
 8018046:	607a      	str	r2, [r7, #4]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018048:	22cc      	movs	r2, #204	; 0xcc
 801804a:	490e      	ldr	r1, [pc, #56]	; (8018084 <_ZN23MockCheckedExpectedCall28withFunctionPointerParameterERK12SimpleStringPFvvE+0x48>)
 801804c:	2038      	movs	r0, #56	; 0x38
 801804e:	f7ef fcfb 	bl	8007a48 <_ZnwjPKci>
 8018052:	4604      	mov	r4, r0
 8018054:	68b9      	ldr	r1, [r7, #8]
 8018056:	4620      	mov	r0, r4
 8018058:	f000 fe8c 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801805c:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 801805e:	68fb      	ldr	r3, [r7, #12]
 8018060:	69db      	ldr	r3, [r3, #28]
 8018062:	6979      	ldr	r1, [r7, #20]
 8018064:	4618      	mov	r0, r3
 8018066:	f004 fd1d 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 801806a:	697b      	ldr	r3, [r7, #20]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	3334      	adds	r3, #52	; 0x34
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	6879      	ldr	r1, [r7, #4]
 8018074:	6978      	ldr	r0, [r7, #20]
 8018076:	4798      	blx	r3
    return *this;
 8018078:	68fb      	ldr	r3, [r7, #12]
}
 801807a:	4618      	mov	r0, r3
 801807c:	371c      	adds	r7, #28
 801807e:	46bd      	mov	sp, r7
 8018080:	bd90      	pop	{r4, r7, pc}
 8018082:	bf00      	nop
 8018084:	08022ef0 	.word	0x08022ef0

08018088 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj>:

MockExpectedCall& MockCheckedExpectedCall::withMemoryBufferParameter(const SimpleString& name, const unsigned char* value, size_t size)
{
 8018088:	b590      	push	{r4, r7, lr}
 801808a:	b087      	sub	sp, #28
 801808c:	af00      	add	r7, sp, #0
 801808e:	60f8      	str	r0, [r7, #12]
 8018090:	60b9      	str	r1, [r7, #8]
 8018092:	607a      	str	r2, [r7, #4]
 8018094:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018096:	22d4      	movs	r2, #212	; 0xd4
 8018098:	490e      	ldr	r1, [pc, #56]	; (80180d4 <_ZN23MockCheckedExpectedCall25withMemoryBufferParameterERK12SimpleStringPKhj+0x4c>)
 801809a:	2038      	movs	r0, #56	; 0x38
 801809c:	f7ef fcd4 	bl	8007a48 <_ZnwjPKci>
 80180a0:	4604      	mov	r4, r0
 80180a2:	68b9      	ldr	r1, [r7, #8]
 80180a4:	4620      	mov	r0, r4
 80180a6:	f000 fe65 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80180aa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	69db      	ldr	r3, [r3, #28]
 80180b0:	6979      	ldr	r1, [r7, #20]
 80180b2:	4618      	mov	r0, r3
 80180b4:	f004 fcf6 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setMemoryBuffer(value, size);
 80180b8:	697b      	ldr	r3, [r7, #20]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	333c      	adds	r3, #60	; 0x3c
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	683a      	ldr	r2, [r7, #0]
 80180c2:	6879      	ldr	r1, [r7, #4]
 80180c4:	6978      	ldr	r0, [r7, #20]
 80180c6:	4798      	blx	r3
    return *this;
 80180c8:	68fb      	ldr	r3, [r7, #12]
}
 80180ca:	4618      	mov	r0, r3
 80180cc:	371c      	adds	r7, #28
 80180ce:	46bd      	mov	sp, r7
 80180d0:	bd90      	pop	{r4, r7, pc}
 80180d2:	bf00      	nop
 80180d4:	08022ef0 	.word	0x08022ef0

080180d8 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withParameterOfType(const SimpleString& type, const SimpleString& name, const void* value)
{
 80180d8:	b590      	push	{r4, r7, lr}
 80180da:	b087      	sub	sp, #28
 80180dc:	af00      	add	r7, sp, #0
 80180de:	60f8      	str	r0, [r7, #12]
 80180e0:	60b9      	str	r1, [r7, #8]
 80180e2:	607a      	str	r2, [r7, #4]
 80180e4:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 80180e6:	22dc      	movs	r2, #220	; 0xdc
 80180e8:	490e      	ldr	r1, [pc, #56]	; (8018124 <_ZN23MockCheckedExpectedCall19withParameterOfTypeERK12SimpleStringS2_PKv+0x4c>)
 80180ea:	2038      	movs	r0, #56	; 0x38
 80180ec:	f7ef fcac 	bl	8007a48 <_ZnwjPKci>
 80180f0:	4604      	mov	r4, r0
 80180f2:	6879      	ldr	r1, [r7, #4]
 80180f4:	4620      	mov	r0, r4
 80180f6:	f000 fe3d 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80180fa:	617c      	str	r4, [r7, #20]
    inputParameters_->add(newParameter);
 80180fc:	68fb      	ldr	r3, [r7, #12]
 80180fe:	69db      	ldr	r3, [r3, #28]
 8018100:	6979      	ldr	r1, [r7, #20]
 8018102:	4618      	mov	r0, r3
 8018104:	f004 fcce 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 8018108:	697b      	ldr	r3, [r7, #20]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	3340      	adds	r3, #64	; 0x40
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	683a      	ldr	r2, [r7, #0]
 8018112:	68b9      	ldr	r1, [r7, #8]
 8018114:	6978      	ldr	r0, [r7, #20]
 8018116:	4798      	blx	r3
    return *this;
 8018118:	68fb      	ldr	r3, [r7, #12]
}
 801811a:	4618      	mov	r0, r3
 801811c:	371c      	adds	r7, #28
 801811e:	46bd      	mov	sp, r7
 8018120:	bd90      	pop	{r4, r7, pc}
 8018122:	bf00      	nop
 8018124:	08022ef0 	.word	0x08022ef0

08018128 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterReturning(const SimpleString& name, const void* value, size_t size)
{
 8018128:	b590      	push	{r4, r7, lr}
 801812a:	b087      	sub	sp, #28
 801812c:	af00      	add	r7, sp, #0
 801812e:	60f8      	str	r0, [r7, #12]
 8018130:	60b9      	str	r1, [r7, #8]
 8018132:	607a      	str	r2, [r7, #4]
 8018134:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018136:	22e4      	movs	r2, #228	; 0xe4
 8018138:	4911      	ldr	r1, [pc, #68]	; (8018180 <_ZN23MockCheckedExpectedCall28withOutputParameterReturningERK12SimpleStringPKvj+0x58>)
 801813a:	2038      	movs	r0, #56	; 0x38
 801813c:	f7ef fc84 	bl	8007a48 <_ZnwjPKci>
 8018140:	4604      	mov	r4, r0
 8018142:	68b9      	ldr	r1, [r7, #8]
 8018144:	4620      	mov	r0, r4
 8018146:	f000 fe15 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 801814a:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	6a1b      	ldr	r3, [r3, #32]
 8018150:	6979      	ldr	r1, [r7, #20]
 8018152:	4618      	mov	r0, r3
 8018154:	f004 fca6 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setValue(value);
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	3330      	adds	r3, #48	; 0x30
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	6879      	ldr	r1, [r7, #4]
 8018162:	6978      	ldr	r0, [r7, #20]
 8018164:	4798      	blx	r3
    newParameter->setSize(size);
 8018166:	697b      	ldr	r3, [r7, #20]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	3348      	adds	r3, #72	; 0x48
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	6839      	ldr	r1, [r7, #0]
 8018170:	6978      	ldr	r0, [r7, #20]
 8018172:	4798      	blx	r3
    return *this;
 8018174:	68fb      	ldr	r3, [r7, #12]
}
 8018176:	4618      	mov	r0, r3
 8018178:	371c      	adds	r7, #28
 801817a:	46bd      	mov	sp, r7
 801817c:	bd90      	pop	{r4, r7, pc}
 801817e:	bf00      	nop
 8018180:	08022ef0 	.word	0x08022ef0

08018184 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv>:

MockExpectedCall& MockCheckedExpectedCall::withOutputParameterOfTypeReturning(const SimpleString& type, const SimpleString& name, const void* value)
{
 8018184:	b590      	push	{r4, r7, lr}
 8018186:	b087      	sub	sp, #28
 8018188:	af00      	add	r7, sp, #0
 801818a:	60f8      	str	r0, [r7, #12]
 801818c:	60b9      	str	r1, [r7, #8]
 801818e:	607a      	str	r2, [r7, #4]
 8018190:	603b      	str	r3, [r7, #0]
    MockNamedValue* newParameter = new MockExpectedFunctionParameter(name);
 8018192:	22ed      	movs	r2, #237	; 0xed
 8018194:	490e      	ldr	r1, [pc, #56]	; (80181d0 <_ZN23MockCheckedExpectedCall34withOutputParameterOfTypeReturningERK12SimpleStringS2_PKv+0x4c>)
 8018196:	2038      	movs	r0, #56	; 0x38
 8018198:	f7ef fc56 	bl	8007a48 <_ZnwjPKci>
 801819c:	4604      	mov	r4, r0
 801819e:	6879      	ldr	r1, [r7, #4]
 80181a0:	4620      	mov	r0, r4
 80181a2:	f000 fde7 	bl	8018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>
 80181a6:	617c      	str	r4, [r7, #20]
    outputParameters_->add(newParameter);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	6a1b      	ldr	r3, [r3, #32]
 80181ac:	6979      	ldr	r1, [r7, #20]
 80181ae:	4618      	mov	r0, r3
 80181b0:	f004 fc78 	bl	801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>
    newParameter->setConstObjectPointer(type, value);
 80181b4:	697b      	ldr	r3, [r7, #20]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	3340      	adds	r3, #64	; 0x40
 80181ba:	681b      	ldr	r3, [r3, #0]
 80181bc:	683a      	ldr	r2, [r7, #0]
 80181be:	68b9      	ldr	r1, [r7, #8]
 80181c0:	6978      	ldr	r0, [r7, #20]
 80181c2:	4798      	blx	r3
    return *this;
 80181c4:	68fb      	ldr	r3, [r7, #12]
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	371c      	adds	r7, #28
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd90      	pop	{r4, r7, pc}
 80181ce:	bf00      	nop
 80181d0:	08022ef0 	.word	0x08022ef0

080181d4 <_ZN23MockCheckedExpectedCall29withUnmodifiedOutputParameterERK12SimpleString>:

MockExpectedCall& MockCheckedExpectedCall::withUnmodifiedOutputParameter(const SimpleString& name)
{
 80181d4:	b590      	push	{r4, r7, lr}
 80181d6:	b083      	sub	sp, #12
 80181d8:	af00      	add	r7, sp, #0
 80181da:	6078      	str	r0, [r7, #4]
 80181dc:	6039      	str	r1, [r7, #0]
    return withOutputParameterReturning(name, NULLPTR, 0);
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	3318      	adds	r3, #24
 80181e4:	681c      	ldr	r4, [r3, #0]
 80181e6:	2300      	movs	r3, #0
 80181e8:	2200      	movs	r2, #0
 80181ea:	6839      	ldr	r1, [r7, #0]
 80181ec:	6878      	ldr	r0, [r7, #4]
 80181ee:	47a0      	blx	r4
 80181f0:	4603      	mov	r3, r0
}
 80181f2:	4618      	mov	r0, r3
 80181f4:	370c      	adds	r7, #12
 80181f6:	46bd      	mov	sp, r7
 80181f8:	bd90      	pop	{r4, r7, pc}
	...

080181fc <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterType(const SimpleString& name)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	b086      	sub	sp, #24
 8018200:	af00      	add	r7, sp, #0
 8018202:	60f8      	str	r0, [r7, #12]
 8018204:	60b9      	str	r1, [r7, #8]
 8018206:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 8018208:	68bb      	ldr	r3, [r7, #8]
 801820a:	69db      	ldr	r3, [r3, #28]
 801820c:	6879      	ldr	r1, [r7, #4]
 801820e:	4618      	mov	r0, r3
 8018210:	f004 fc7e 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018214:	6178      	str	r0, [r7, #20]
    return (p) ? p->getType() : StringFrom("");
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	2b00      	cmp	r3, #0
 801821a:	d008      	beq.n	801822e <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x32>
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	681b      	ldr	r3, [r3, #0]
 8018220:	3360      	adds	r3, #96	; 0x60
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	68fa      	ldr	r2, [r7, #12]
 8018226:	6979      	ldr	r1, [r7, #20]
 8018228:	4610      	mov	r0, r2
 801822a:	4798      	blx	r3
 801822c:	e004      	b.n	8018238 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x3c>
 801822e:	68fb      	ldr	r3, [r7, #12]
 8018230:	4903      	ldr	r1, [pc, #12]	; (8018240 <_ZN23MockCheckedExpectedCall21getInputParameterTypeERK12SimpleString+0x44>)
 8018232:	4618      	mov	r0, r3
 8018234:	f7f2 fe10 	bl	800ae58 <_Z10StringFromPKc>
}
 8018238:	68f8      	ldr	r0, [r7, #12]
 801823a:	3718      	adds	r7, #24
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}
 8018240:	08022eec 	.word	0x08022eec

08018244 <_ZN23MockCheckedExpectedCall25hasInputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasInputParameterWithName(const SimpleString& name)
{
 8018244:	b580      	push	{r7, lr}
 8018246:	b084      	sub	sp, #16
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
 801824c:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	69db      	ldr	r3, [r3, #28]
 8018252:	6839      	ldr	r1, [r7, #0]
 8018254:	4618      	mov	r0, r3
 8018256:	f004 fc5b 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 801825a:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 801825c:	68fb      	ldr	r3, [r7, #12]
 801825e:	2b00      	cmp	r3, #0
 8018260:	bf14      	ite	ne
 8018262:	2301      	movne	r3, #1
 8018264:	2300      	moveq	r3, #0
 8018266:	b2db      	uxtb	r3, r3
}
 8018268:	4618      	mov	r0, r3
 801826a:	3710      	adds	r7, #16
 801826c:	46bd      	mov	sp, r7
 801826e:	bd80      	pop	{r7, pc}

08018270 <_ZN23MockCheckedExpectedCall26hasOutputParameterWithNameERK12SimpleString>:

bool MockCheckedExpectedCall::hasOutputParameterWithName(const SimpleString& name)
{
 8018270:	b580      	push	{r7, lr}
 8018272:	b084      	sub	sp, #16
 8018274:	af00      	add	r7, sp, #0
 8018276:	6078      	str	r0, [r7, #4]
 8018278:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	6a1b      	ldr	r3, [r3, #32]
 801827e:	6839      	ldr	r1, [r7, #0]
 8018280:	4618      	mov	r0, r3
 8018282:	f004 fc45 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018286:	60f8      	str	r0, [r7, #12]
    return p != NULLPTR;
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	2b00      	cmp	r3, #0
 801828c:	bf14      	ite	ne
 801828e:	2301      	movne	r3, #1
 8018290:	2300      	moveq	r3, #0
 8018292:	b2db      	uxtb	r3, r3
}
 8018294:	4618      	mov	r0, r3
 8018296:	3710      	adds	r7, #16
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}

0801829c <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getInputParameter(const SimpleString& name)
{
 801829c:	b590      	push	{r4, r7, lr}
 801829e:	b089      	sub	sp, #36	; 0x24
 80182a0:	af00      	add	r7, sp, #0
 80182a2:	60f8      	str	r0, [r7, #12]
 80182a4:	60b9      	str	r1, [r7, #8]
 80182a6:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	69db      	ldr	r3, [r3, #28]
 80182ac:	6879      	ldr	r1, [r7, #4]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f004 fc2e 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80182b4:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 80182b6:	2400      	movs	r4, #0
 80182b8:	69fb      	ldr	r3, [r7, #28]
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d004      	beq.n	80182c8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x2c>
 80182be:	69f9      	ldr	r1, [r7, #28]
 80182c0:	68f8      	ldr	r0, [r7, #12]
 80182c2:	f7f0 f829 	bl	8008318 <_ZN14MockNamedValueC1ERKS_>
 80182c6:	e00c      	b.n	80182e2 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x46>
 80182c8:	f107 0314 	add.w	r3, r7, #20
 80182cc:	490a      	ldr	r1, [pc, #40]	; (80182f8 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x5c>)
 80182ce:	4618      	mov	r0, r3
 80182d0:	f7f1 ff7d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 80182d4:	2401      	movs	r4, #1
 80182d6:	f107 0314 	add.w	r3, r7, #20
 80182da:	4619      	mov	r1, r3
 80182dc:	68f8      	ldr	r0, [r7, #12]
 80182de:	f002 fc9b 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 80182e2:	2c00      	cmp	r4, #0
 80182e4:	d004      	beq.n	80182f0 <_ZN23MockCheckedExpectedCall17getInputParameterERK12SimpleString+0x54>
 80182e6:	f107 0314 	add.w	r3, r7, #20
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7f2 fb27 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 80182f0:	68f8      	ldr	r0, [r7, #12]
 80182f2:	3724      	adds	r7, #36	; 0x24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd90      	pop	{r4, r7, pc}
 80182f8:	08022eec 	.word	0x08022eec

080182fc <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString>:

MockNamedValue MockCheckedExpectedCall::getOutputParameter(const SimpleString& name)
{
 80182fc:	b590      	push	{r4, r7, lr}
 80182fe:	b089      	sub	sp, #36	; 0x24
 8018300:	af00      	add	r7, sp, #0
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	60b9      	str	r1, [r7, #8]
 8018306:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = outputParameters_->getValueByName(name);
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	6a1b      	ldr	r3, [r3, #32]
 801830c:	6879      	ldr	r1, [r7, #4]
 801830e:	4618      	mov	r0, r3
 8018310:	f004 fbfe 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018314:	61f8      	str	r0, [r7, #28]
    return (p) ? *p : MockNamedValue("");
 8018316:	2400      	movs	r4, #0
 8018318:	69fb      	ldr	r3, [r7, #28]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d004      	beq.n	8018328 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x2c>
 801831e:	69f9      	ldr	r1, [r7, #28]
 8018320:	68f8      	ldr	r0, [r7, #12]
 8018322:	f7ef fff9 	bl	8008318 <_ZN14MockNamedValueC1ERKS_>
 8018326:	e00c      	b.n	8018342 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x46>
 8018328:	f107 0314 	add.w	r3, r7, #20
 801832c:	490a      	ldr	r1, [pc, #40]	; (8018358 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x5c>)
 801832e:	4618      	mov	r0, r3
 8018330:	f7f1 ff4d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8018334:	2401      	movs	r4, #1
 8018336:	f107 0314 	add.w	r3, r7, #20
 801833a:	4619      	mov	r1, r3
 801833c:	68f8      	ldr	r0, [r7, #12]
 801833e:	f002 fc6b 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018342:	2c00      	cmp	r4, #0
 8018344:	d004      	beq.n	8018350 <_ZN23MockCheckedExpectedCall18getOutputParameterERK12SimpleString+0x54>
 8018346:	f107 0314 	add.w	r3, r7, #20
 801834a:	4618      	mov	r0, r3
 801834c:	f7f2 faf7 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 8018350:	68f8      	ldr	r0, [r7, #12]
 8018352:	3724      	adds	r7, #36	; 0x24
 8018354:	46bd      	mov	sp, r7
 8018356:	bd90      	pop	{r4, r7, pc}
 8018358:	08022eec 	.word	0x08022eec

0801835c <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv>:

bool MockCheckedExpectedCall::areParametersMatchingActualCall()
{
 801835c:	b580      	push	{r7, lr}
 801835e:	b084      	sub	sp, #16
 8018360:	af00      	add	r7, sp, #0
 8018362:	6078      	str	r0, [r7, #4]
    MockNamedValueListNode* p;
    for (p = inputParameters_->begin(); p; p = p->next())
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	69db      	ldr	r3, [r3, #28]
 8018368:	4618      	mov	r0, r3
 801836a:	f004 fc00 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d014      	beq.n	80183a0 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x44>
        if (! item(p)->isMatchingActualCall())
 8018376:	68f9      	ldr	r1, [r7, #12]
 8018378:	6878      	ldr	r0, [r7, #4]
 801837a:	f000 fced 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801837e:	4603      	mov	r3, r0
 8018380:	4618      	mov	r0, r3
 8018382:	f000 fd1f 	bl	8018dc4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018386:	4603      	mov	r3, r0
 8018388:	f083 0301 	eor.w	r3, r3, #1
 801838c:	b2db      	uxtb	r3, r3
 801838e:	2b00      	cmp	r3, #0
 8018390:	d001      	beq.n	8018396 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x3a>
            return false;
 8018392:	2300      	movs	r3, #0
 8018394:	e023      	b.n	80183de <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018396:	68f8      	ldr	r0, [r7, #12]
 8018398:	f004 faf2 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801839c:	60f8      	str	r0, [r7, #12]
 801839e:	e7e7      	b.n	8018370 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x14>
    for (p = outputParameters_->begin(); p; p = p->next())
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6a1b      	ldr	r3, [r3, #32]
 80183a4:	4618      	mov	r0, r3
 80183a6:	f004 fbe2 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80183aa:	60f8      	str	r0, [r7, #12]
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	d014      	beq.n	80183dc <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x80>
        if (! item(p)->isMatchingActualCall())
 80183b2:	68f9      	ldr	r1, [r7, #12]
 80183b4:	6878      	ldr	r0, [r7, #4]
 80183b6:	f000 fccf 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80183ba:	4603      	mov	r3, r0
 80183bc:	4618      	mov	r0, r3
 80183be:	f000 fd01 	bl	8018dc4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 80183c2:	4603      	mov	r3, r0
 80183c4:	f083 0301 	eor.w	r3, r3, #1
 80183c8:	b2db      	uxtb	r3, r3
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d001      	beq.n	80183d2 <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x76>
            return false;
 80183ce:	2300      	movs	r3, #0
 80183d0:	e005      	b.n	80183de <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x82>
    for (p = outputParameters_->begin(); p; p = p->next())
 80183d2:	68f8      	ldr	r0, [r7, #12]
 80183d4:	f004 fad4 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 80183d8:	60f8      	str	r0, [r7, #12]
 80183da:	e7e7      	b.n	80183ac <_ZN23MockCheckedExpectedCall31areParametersMatchingActualCallEv+0x50>
    return true;
 80183dc:	2301      	movs	r3, #1
}
 80183de:	4618      	mov	r0, r3
 80183e0:	3710      	adds	r7, #16
 80183e2:	46bd      	mov	sp, r7
 80183e4:	bd80      	pop	{r7, pc}

080183e6 <_ZN23MockCheckedExpectedCall21ignoreOtherParametersEv>:

MockExpectedCall& MockCheckedExpectedCall::ignoreOtherParameters()
{
 80183e6:	b480      	push	{r7}
 80183e8:	b083      	sub	sp, #12
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	6078      	str	r0, [r7, #4]
    ignoreOtherParameters_ = true;
 80183ee:	687b      	ldr	r3, [r7, #4]
 80183f0:	2201      	movs	r2, #1
 80183f2:	731a      	strb	r2, [r3, #12]
    return *this;
 80183f4:	687b      	ldr	r3, [r7, #4]
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	370c      	adds	r7, #12
 80183fa:	46bd      	mov	sp, r7
 80183fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018400:	4770      	bx	lr

08018402 <_ZN23MockCheckedExpectedCall11isFulfilledEv>:

bool MockCheckedExpectedCall::isFulfilled()
{
 8018402:	b480      	push	{r7}
 8018404:	b083      	sub	sp, #12
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
    return (actualCalls_ == expectedCalls_);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018412:	429a      	cmp	r2, r3
 8018414:	bf0c      	ite	eq
 8018416:	2301      	moveq	r3, #1
 8018418:	2300      	movne	r3, #0
 801841a:	b2db      	uxtb	r3, r3
}
 801841c:	4618      	mov	r0, r3
 801841e:	370c      	adds	r7, #12
 8018420:	46bd      	mov	sp, r7
 8018422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018426:	4770      	bx	lr

08018428 <_ZN23MockCheckedExpectedCall19canMatchActualCallsEv>:

bool MockCheckedExpectedCall::canMatchActualCalls()
{
 8018428:	b480      	push	{r7}
 801842a:	b083      	sub	sp, #12
 801842c:	af00      	add	r7, sp, #0
 801842e:	6078      	str	r0, [r7, #4]
    return (actualCalls_ < expectedCalls_);
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018438:	429a      	cmp	r2, r3
 801843a:	bf34      	ite	cc
 801843c:	2301      	movcc	r3, #1
 801843e:	2300      	movcs	r3, #0
 8018440:	b2db      	uxtb	r3, r3
}
 8018442:	4618      	mov	r0, r3
 8018444:	370c      	adds	r7, #12
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr

0801844e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv>:

bool MockCheckedExpectedCall::isMatchingActualCallAndFinalized()
{
 801844e:	b580      	push	{r7, lr}
 8018450:	b082      	sub	sp, #8
 8018452:	af00      	add	r7, sp, #0
 8018454:	6078      	str	r0, [r7, #4]
    return isMatchingActualCall() && (!ignoreOtherParameters_ || isActualCallMatchFinalized_);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	33cc      	adds	r3, #204	; 0xcc
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	6878      	ldr	r0, [r7, #4]
 8018460:	4798      	blx	r3
 8018462:	4603      	mov	r3, r0
 8018464:	2b00      	cmp	r3, #0
 8018466:	d00c      	beq.n	8018482 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	7b1b      	ldrb	r3, [r3, #12]
 801846c:	f083 0301 	eor.w	r3, r3, #1
 8018470:	b2db      	uxtb	r3, r3
 8018472:	2b00      	cmp	r3, #0
 8018474:	d103      	bne.n	801847e <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x30>
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	7b5b      	ldrb	r3, [r3, #13]
 801847a:	2b00      	cmp	r3, #0
 801847c:	d001      	beq.n	8018482 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x34>
 801847e:	2301      	movs	r3, #1
 8018480:	e000      	b.n	8018484 <_ZN23MockCheckedExpectedCall32isMatchingActualCallAndFinalizedEv+0x36>
 8018482:	2300      	movs	r3, #0
}
 8018484:	4618      	mov	r0, r3
 8018486:	3708      	adds	r7, #8
 8018488:	46bd      	mov	sp, r7
 801848a:	bd80      	pop	{r7, pc}

0801848c <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::isMatchingActualCall()
{
 801848c:	b580      	push	{r7, lr}
 801848e:	b082      	sub	sp, #8
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
    return areParametersMatchingActualCall() && wasPassedToObject_;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	33d0      	adds	r3, #208	; 0xd0
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	4798      	blx	r3
 80184a0:	4603      	mov	r3, r0
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d006      	beq.n	80184b4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d001      	beq.n	80184b4 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x28>
 80184b0:	2301      	movs	r3, #1
 80184b2:	e000      	b.n	80184b6 <_ZN23MockCheckedExpectedCall20isMatchingActualCallEv+0x2a>
 80184b4:	2300      	movs	r3, #0
}
 80184b6:	4618      	mov	r0, r3
 80184b8:	3708      	adds	r7, #8
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}

080184be <_ZN23MockCheckedExpectedCall11callWasMadeEj>:

void MockCheckedExpectedCall::callWasMade(unsigned int callOrder)
{
 80184be:	b580      	push	{r7, lr}
 80184c0:	b082      	sub	sp, #8
 80184c2:	af00      	add	r7, sp, #0
 80184c4:	6078      	str	r0, [r7, #4]
 80184c6:	6039      	str	r1, [r7, #0]
    actualCalls_++;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80184cc:	1c5a      	adds	r2, r3, #1
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	669a      	str	r2, [r3, #104]	; 0x68

    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	691b      	ldr	r3, [r3, #16]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d00c      	beq.n	80184f4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80184da:	687b      	ldr	r3, [r7, #4]
 80184dc:	691b      	ldr	r3, [r3, #16]
    if ( (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) &&
 80184de:	683a      	ldr	r2, [r7, #0]
 80184e0:	429a      	cmp	r2, r3
 80184e2:	d304      	bcc.n	80184ee <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x30>
         ((callOrder < initialExpectedCallOrder_) || (callOrder > finalExpectedCallOrder_)) ) {
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	695b      	ldr	r3, [r3, #20]
 80184e8:	683a      	ldr	r2, [r7, #0]
 80184ea:	429a      	cmp	r2, r3
 80184ec:	d902      	bls.n	80184f4 <_ZN23MockCheckedExpectedCall11callWasMadeEj+0x36>
        outOfOrder_ = true;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2201      	movs	r2, #1
 80184f2:	761a      	strb	r2, [r3, #24]
    }

    resetActualCallMatchingState();
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	33ec      	adds	r3, #236	; 0xec
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	4798      	blx	r3
}
 8018500:	bf00      	nop
 8018502:	3708      	adds	r7, #8
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}

08018508 <_ZN23MockCheckedExpectedCall23finalizeActualCallMatchEv>:

void MockCheckedExpectedCall::finalizeActualCallMatch()
{
 8018508:	b480      	push	{r7}
 801850a:	b083      	sub	sp, #12
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
    isActualCallMatchFinalized_ = true;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2201      	movs	r2, #1
 8018514:	735a      	strb	r2, [r3, #13]
}
 8018516:	bf00      	nop
 8018518:	370c      	adds	r7, #12
 801851a:	46bd      	mov	sp, r7
 801851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018520:	4770      	bx	lr

08018522 <_ZN23MockCheckedExpectedCall17wasPassedToObjectEv>:


void MockCheckedExpectedCall::wasPassedToObject()
{
 8018522:	b480      	push	{r7}
 8018524:	b083      	sub	sp, #12
 8018526:	af00      	add	r7, sp, #0
 8018528:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = true;
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	2201      	movs	r2, #1
 801852e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8018532:	bf00      	nop
 8018534:	370c      	adds	r7, #12
 8018536:	46bd      	mov	sp, r7
 8018538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801853c:	4770      	bx	lr

0801853e <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv>:

void MockCheckedExpectedCall::resetActualCallMatchingState()
{
 801853e:	b580      	push	{r7, lr}
 8018540:	b084      	sub	sp, #16
 8018542:	af00      	add	r7, sp, #0
 8018544:	6078      	str	r0, [r7, #4]
    wasPassedToObject_ = !isSpecificObjectExpected_;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 801854c:	f083 0301 	eor.w	r3, r3, #1
 8018550:	b2da      	uxtb	r2, r3
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    isActualCallMatchFinalized_ = false;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	2200      	movs	r2, #0
 801855c:	735a      	strb	r2, [r3, #13]

    MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next())
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	69db      	ldr	r3, [r3, #28]
 8018562:	4618      	mov	r0, r3
 8018564:	f004 fb03 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018568:	60f8      	str	r0, [r7, #12]
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d00d      	beq.n	801858c <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x4e>
        item(p)->setMatchesActualCall(false);
 8018570:	68f9      	ldr	r1, [r7, #12]
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f000 fbf0 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018578:	4603      	mov	r3, r0
 801857a:	2100      	movs	r1, #0
 801857c:	4618      	mov	r0, r3
 801857e:	f000 fc11 	bl	8018da4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = inputParameters_->begin(); p; p = p->next())
 8018582:	68f8      	ldr	r0, [r7, #12]
 8018584:	f004 f9fc 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018588:	60f8      	str	r0, [r7, #12]
 801858a:	e7ee      	b.n	801856a <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x2c>
    for (p = outputParameters_->begin(); p; p = p->next())
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6a1b      	ldr	r3, [r3, #32]
 8018590:	4618      	mov	r0, r3
 8018592:	f004 faec 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018596:	60f8      	str	r0, [r7, #12]
 8018598:	68fb      	ldr	r3, [r7, #12]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00d      	beq.n	80185ba <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x7c>
        item(p)->setMatchesActualCall(false);
 801859e:	68f9      	ldr	r1, [r7, #12]
 80185a0:	6878      	ldr	r0, [r7, #4]
 80185a2:	f000 fbd9 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 80185a6:	4603      	mov	r3, r0
 80185a8:	2100      	movs	r1, #0
 80185aa:	4618      	mov	r0, r3
 80185ac:	f000 fbfa 	bl	8018da4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (p = outputParameters_->begin(); p; p = p->next())
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f004 f9e5 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	e7ee      	b.n	8018598 <_ZN23MockCheckedExpectedCall28resetActualCallMatchingStateEv+0x5a>
}
 80185ba:	bf00      	nop
 80185bc:	3710      	adds	r7, #16
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}

080185c2 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::inputParameterWasPassed(const SimpleString& name)
{
 80185c2:	b590      	push	{r4, r7, lr}
 80185c4:	b087      	sub	sp, #28
 80185c6:	af00      	add	r7, sp, #0
 80185c8:	6078      	str	r0, [r7, #4]
 80185ca:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	69db      	ldr	r3, [r3, #28]
 80185d0:	4618      	mov	r0, r3
 80185d2:	f004 facc 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80185d6:	6178      	str	r0, [r7, #20]
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d022      	beq.n	8018624 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 80185de:	f107 030c 	add.w	r3, r7, #12
 80185e2:	6979      	ldr	r1, [r7, #20]
 80185e4:	4618      	mov	r0, r3
 80185e6:	f004 fa06 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 80185ea:	f107 030c 	add.w	r3, r7, #12
 80185ee:	6839      	ldr	r1, [r7, #0]
 80185f0:	4618      	mov	r0, r3
 80185f2:	f7f2 f9b0 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 80185f6:	4603      	mov	r3, r0
 80185f8:	461c      	mov	r4, r3
 80185fa:	f107 030c 	add.w	r3, r7, #12
 80185fe:	4618      	mov	r0, r3
 8018600:	f7f2 f99d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018604:	2c00      	cmp	r4, #0
 8018606:	d008      	beq.n	801861a <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018608:	6979      	ldr	r1, [r7, #20]
 801860a:	6878      	ldr	r0, [r7, #4]
 801860c:	f000 fba4 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018610:	4603      	mov	r3, r0
 8018612:	2101      	movs	r1, #1
 8018614:	4618      	mov	r0, r3
 8018616:	f000 fbc5 	bl	8018da4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = inputParameters_->begin(); p; p = p->next()) {
 801861a:	6978      	ldr	r0, [r7, #20]
 801861c:	f004 f9b0 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018620:	6178      	str	r0, [r7, #20]
 8018622:	e7d9      	b.n	80185d8 <_ZN23MockCheckedExpectedCall23inputParameterWasPassedERK12SimpleString+0x16>
    }
}
 8018624:	bf00      	nop
 8018626:	371c      	adds	r7, #28
 8018628:	46bd      	mov	sp, r7
 801862a:	bd90      	pop	{r4, r7, pc}

0801862c <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString>:

void MockCheckedExpectedCall::outputParameterWasPassed(const SimpleString& name)
{
 801862c:	b590      	push	{r4, r7, lr}
 801862e:	b087      	sub	sp, #28
 8018630:	af00      	add	r7, sp, #0
 8018632:	6078      	str	r0, [r7, #4]
 8018634:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	6a1b      	ldr	r3, [r3, #32]
 801863a:	4618      	mov	r0, r3
 801863c:	f004 fa97 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018640:	6178      	str	r0, [r7, #20]
 8018642:	697b      	ldr	r3, [r7, #20]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d022      	beq.n	801868e <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x62>
        if (p->getName() == name)
 8018648:	f107 030c 	add.w	r3, r7, #12
 801864c:	6979      	ldr	r1, [r7, #20]
 801864e:	4618      	mov	r0, r3
 8018650:	f004 f9d1 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018654:	f107 030c 	add.w	r3, r7, #12
 8018658:	6839      	ldr	r1, [r7, #0]
 801865a:	4618      	mov	r0, r3
 801865c:	f7f2 f97b 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8018660:	4603      	mov	r3, r0
 8018662:	461c      	mov	r4, r3
 8018664:	f107 030c 	add.w	r3, r7, #12
 8018668:	4618      	mov	r0, r3
 801866a:	f7f2 f968 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801866e:	2c00      	cmp	r4, #0
 8018670:	d008      	beq.n	8018684 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x58>
            item(p)->setMatchesActualCall(true);
 8018672:	6979      	ldr	r1, [r7, #20]
 8018674:	6878      	ldr	r0, [r7, #4]
 8018676:	f000 fb6f 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 801867a:	4603      	mov	r3, r0
 801867c:	2101      	movs	r1, #1
 801867e:	4618      	mov	r0, r3
 8018680:	f000 fb90 	bl	8018da4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>
    for (MockNamedValueListNode* p = outputParameters_->begin(); p; p = p->next()) {
 8018684:	6978      	ldr	r0, [r7, #20]
 8018686:	f004 f97b 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801868a:	6178      	str	r0, [r7, #20]
 801868c:	e7d9      	b.n	8018642 <_ZN23MockCheckedExpectedCall24outputParameterWasPassedERK12SimpleString+0x16>
    }
}
 801868e:	bf00      	nop
 8018690:	371c      	adds	r7, #28
 8018692:	46bd      	mov	sp, r7
 8018694:	bd90      	pop	{r4, r7, pc}
	...

08018698 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString>:

SimpleString MockCheckedExpectedCall::getInputParameterValueString(const SimpleString& name)
{
 8018698:	b580      	push	{r7, lr}
 801869a:	b086      	sub	sp, #24
 801869c:	af00      	add	r7, sp, #0
 801869e:	60f8      	str	r0, [r7, #12]
 80186a0:	60b9      	str	r1, [r7, #8]
 80186a2:	607a      	str	r2, [r7, #4]
    MockNamedValue * p = inputParameters_->getValueByName(name);
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	69db      	ldr	r3, [r3, #28]
 80186a8:	6879      	ldr	r1, [r7, #4]
 80186aa:	4618      	mov	r0, r3
 80186ac:	f004 fa30 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 80186b0:	6178      	str	r0, [r7, #20]
    return (p) ? StringFrom(*p) : "failed";
 80186b2:	697b      	ldr	r3, [r7, #20]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d005      	beq.n	80186c4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x2c>
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	6979      	ldr	r1, [r7, #20]
 80186bc:	4618      	mov	r0, r3
 80186be:	f7ff fa0b 	bl	8017ad8 <_Z10StringFromRK14MockNamedValue>
 80186c2:	e003      	b.n	80186cc <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x34>
 80186c4:	4903      	ldr	r1, [pc, #12]	; (80186d4 <_ZN23MockCheckedExpectedCall28getInputParameterValueStringERK12SimpleString+0x3c>)
 80186c6:	68f8      	ldr	r0, [r7, #12]
 80186c8:	f7f1 fd81 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
}
 80186cc:	68f8      	ldr	r0, [r7, #12]
 80186ce:	3718      	adds	r7, #24
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	08022f58 	.word	0x08022f58

080186d8 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasInputParameter(const MockNamedValue& parameter)
{
 80186d8:	b590      	push	{r4, r7, lr}
 80186da:	b087      	sub	sp, #28
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
 80186e0:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = inputParameters_->getValueByName(parameter.getName());
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	69dc      	ldr	r4, [r3, #28]
 80186e6:	683b      	ldr	r3, [r7, #0]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	335c      	adds	r3, #92	; 0x5c
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	f107 020c 	add.w	r2, r7, #12
 80186f2:	6839      	ldr	r1, [r7, #0]
 80186f4:	4610      	mov	r0, r2
 80186f6:	4798      	blx	r3
 80186f8:	f107 030c 	add.w	r3, r7, #12
 80186fc:	4619      	mov	r1, r3
 80186fe:	4620      	mov	r0, r4
 8018700:	f004 fa06 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018704:	6178      	str	r0, [r7, #20]
 8018706:	f107 030c 	add.w	r3, r7, #12
 801870a:	4618      	mov	r0, r3
 801870c:	f7f2 f917 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return (p) ? p->equals(parameter) : ignoreOtherParameters_;
 8018710:	697b      	ldr	r3, [r7, #20]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d00d      	beq.n	8018732 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x5a>
 8018716:	697b      	ldr	r3, [r7, #20]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	3350      	adds	r3, #80	; 0x50
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	6839      	ldr	r1, [r7, #0]
 8018720:	6978      	ldr	r0, [r7, #20]
 8018722:	4798      	blx	r3
 8018724:	4603      	mov	r3, r0
 8018726:	2b00      	cmp	r3, #0
 8018728:	bf14      	ite	ne
 801872a:	2301      	movne	r3, #1
 801872c:	2300      	moveq	r3, #0
 801872e:	b2db      	uxtb	r3, r3
 8018730:	e006      	b.n	8018740 <_ZN23MockCheckedExpectedCall17hasInputParameterERK14MockNamedValue+0x68>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	7b1b      	ldrb	r3, [r3, #12]
 8018736:	2b00      	cmp	r3, #0
 8018738:	bf14      	ite	ne
 801873a:	2301      	movne	r3, #1
 801873c:	2300      	moveq	r3, #0
 801873e:	b2db      	uxtb	r3, r3
}
 8018740:	4618      	mov	r0, r3
 8018742:	371c      	adds	r7, #28
 8018744:	46bd      	mov	sp, r7
 8018746:	bd90      	pop	{r4, r7, pc}

08018748 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue>:

bool MockCheckedExpectedCall::hasOutputParameter(const MockNamedValue& parameter)
{
 8018748:	b590      	push	{r4, r7, lr}
 801874a:	b087      	sub	sp, #28
 801874c:	af00      	add	r7, sp, #0
 801874e:	6078      	str	r0, [r7, #4]
 8018750:	6039      	str	r1, [r7, #0]
    MockNamedValue * p = outputParameters_->getValueByName(parameter.getName());
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a1c      	ldr	r4, [r3, #32]
 8018756:	683b      	ldr	r3, [r7, #0]
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	335c      	adds	r3, #92	; 0x5c
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	f107 020c 	add.w	r2, r7, #12
 8018762:	6839      	ldr	r1, [r7, #0]
 8018764:	4610      	mov	r0, r2
 8018766:	4798      	blx	r3
 8018768:	f107 030c 	add.w	r3, r7, #12
 801876c:	4619      	mov	r1, r3
 801876e:	4620      	mov	r0, r4
 8018770:	f004 f9ce 	bl	801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>
 8018774:	6178      	str	r0, [r7, #20]
 8018776:	f107 030c 	add.w	r3, r7, #12
 801877a:	4618      	mov	r0, r3
 801877c:	f7f2 f8df 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return (p) ? p->compatibleForCopying(parameter) : ignoreOtherParameters_;
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d00d      	beq.n	80187a2 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x5a>
 8018786:	697b      	ldr	r3, [r7, #20]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	3354      	adds	r3, #84	; 0x54
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	6839      	ldr	r1, [r7, #0]
 8018790:	6978      	ldr	r0, [r7, #20]
 8018792:	4798      	blx	r3
 8018794:	4603      	mov	r3, r0
 8018796:	2b00      	cmp	r3, #0
 8018798:	bf14      	ite	ne
 801879a:	2301      	movne	r3, #1
 801879c:	2300      	moveq	r3, #0
 801879e:	b2db      	uxtb	r3, r3
 80187a0:	e006      	b.n	80187b0 <_ZN23MockCheckedExpectedCall18hasOutputParameterERK14MockNamedValue+0x68>
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	7b1b      	ldrb	r3, [r3, #12]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	bf14      	ite	ne
 80187aa:	2301      	movne	r3, #1
 80187ac:	2300      	moveq	r3, #0
 80187ae:	b2db      	uxtb	r3, r3
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	371c      	adds	r7, #28
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd90      	pop	{r4, r7, pc}

080187b8 <_ZN23MockCheckedExpectedCall12callToStringEv>:

SimpleString MockCheckedExpectedCall::callToString()
{
 80187b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ba:	b0a1      	sub	sp, #132	; 0x84
 80187bc:	af02      	add	r7, sp, #8
 80187be:	6078      	str	r0, [r7, #4]
 80187c0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 80187c2:	49bc      	ldr	r1, [pc, #752]	; (8018ab4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 80187c4:	6878      	ldr	r0, [r7, #4]
 80187c6:	f7f1 fd02 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    if (isSpecificObjectExpected_)
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d012      	beq.n	80187fa <_ZN23MockCheckedExpectedCall12callToStringEv+0x42>
        str = StringFromFormat("(object address: %p)::", objectPtr_);
 80187d4:	683b      	ldr	r3, [r7, #0]
 80187d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80187d8:	f107 030c 	add.w	r3, r7, #12
 80187dc:	49b6      	ldr	r1, [pc, #728]	; (8018ab8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x300>)
 80187de:	4618      	mov	r0, r3
 80187e0:	f7f2 fdb4 	bl	800b34c <_Z16StringFromFormatPKcz>
 80187e4:	f107 030c 	add.w	r3, r7, #12
 80187e8:	4619      	mov	r1, r3
 80187ea:	6878      	ldr	r0, [r7, #4]
 80187ec:	f7f1 fd5b 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 80187f0:	f107 030c 	add.w	r3, r7, #12
 80187f4:	4618      	mov	r0, r3
 80187f6:	f7f2 f8a2 	bl	800a93e <_ZN12SimpleStringD1Ev>

    str += getName();
 80187fa:	f107 0314 	add.w	r3, r7, #20
 80187fe:	6839      	ldr	r1, [r7, #0]
 8018800:	4618      	mov	r0, r3
 8018802:	f7ff f989 	bl	8017b18 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8018806:	f107 0314 	add.w	r3, r7, #20
 801880a:	4619      	mov	r1, r3
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f7f2 f913 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018812:	f107 0314 	add.w	r3, r7, #20
 8018816:	4618      	mov	r0, r3
 8018818:	f7f2 f891 	bl	800a93e <_ZN12SimpleStringD1Ev>
    str += " -> ";
 801881c:	49a7      	ldr	r1, [pc, #668]	; (8018abc <_ZN23MockCheckedExpectedCall12callToStringEv+0x304>)
 801881e:	6878      	ldr	r0, [r7, #4]
 8018820:	f7f2 f91c 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    if (initialExpectedCallOrder_ != NO_EXPECTED_CALL_ORDER) {
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	691b      	ldr	r3, [r3, #16]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d02d      	beq.n	8018888 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        if (initialExpectedCallOrder_ == finalExpectedCallOrder_) {
 801882c:	683b      	ldr	r3, [r7, #0]
 801882e:	691a      	ldr	r2, [r3, #16]
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	695b      	ldr	r3, [r3, #20]
 8018834:	429a      	cmp	r2, r3
 8018836:	d113      	bne.n	8018860 <_ZN23MockCheckedExpectedCall12callToStringEv+0xa8>
            str += StringFromFormat("expected call order: <%u> -> ", initialExpectedCallOrder_);
 8018838:	683b      	ldr	r3, [r7, #0]
 801883a:	691a      	ldr	r2, [r3, #16]
 801883c:	f107 031c 	add.w	r3, r7, #28
 8018840:	499f      	ldr	r1, [pc, #636]	; (8018ac0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x308>)
 8018842:	4618      	mov	r0, r3
 8018844:	f7f2 fd82 	bl	800b34c <_Z16StringFromFormatPKcz>
 8018848:	f107 031c 	add.w	r3, r7, #28
 801884c:	4619      	mov	r1, r3
 801884e:	6878      	ldr	r0, [r7, #4]
 8018850:	f7f2 f8f2 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018854:	f107 031c 	add.w	r3, r7, #28
 8018858:	4618      	mov	r0, r3
 801885a:	f7f2 f870 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801885e:	e013      	b.n	8018888 <_ZN23MockCheckedExpectedCall12callToStringEv+0xd0>
        } else {
            str += StringFromFormat("expected calls order: <%u..%u> -> ", initialExpectedCallOrder_, finalExpectedCallOrder_);
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	691a      	ldr	r2, [r3, #16]
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	695b      	ldr	r3, [r3, #20]
 8018868:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801886c:	4995      	ldr	r1, [pc, #596]	; (8018ac4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x30c>)
 801886e:	f7f2 fd6d 	bl	800b34c <_Z16StringFromFormatPKcz>
 8018872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018876:	4619      	mov	r1, r3
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f7f2 f8dd 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801887e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018882:	4618      	mov	r0, r3
 8018884:	f7f2 f85b 	bl	800a93e <_ZN12SimpleStringD1Ev>
        }
    }

    if (inputParameters_->begin() == NULLPTR && outputParameters_->begin() == NULLPTR) {
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	69db      	ldr	r3, [r3, #28]
 801888c:	4618      	mov	r0, r3
 801888e:	f004 f96e 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018892:	4603      	mov	r3, r0
 8018894:	2b00      	cmp	r3, #0
 8018896:	d109      	bne.n	80188ac <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 8018898:	683b      	ldr	r3, [r7, #0]
 801889a:	6a1b      	ldr	r3, [r3, #32]
 801889c:	4618      	mov	r0, r3
 801889e:	f004 f966 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80188a2:	4603      	mov	r3, r0
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d101      	bne.n	80188ac <_ZN23MockCheckedExpectedCall12callToStringEv+0xf4>
 80188a8:	2301      	movs	r3, #1
 80188aa:	e000      	b.n	80188ae <_ZN23MockCheckedExpectedCall12callToStringEv+0xf6>
 80188ac:	2300      	movs	r3, #0
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d00b      	beq.n	80188ca <_ZN23MockCheckedExpectedCall12callToStringEv+0x112>
        str += (ignoreOtherParameters_) ? "all parameters ignored" : "no parameters";
 80188b2:	683b      	ldr	r3, [r7, #0]
 80188b4:	7b1b      	ldrb	r3, [r3, #12]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d001      	beq.n	80188be <_ZN23MockCheckedExpectedCall12callToStringEv+0x106>
 80188ba:	4b83      	ldr	r3, [pc, #524]	; (8018ac8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x310>)
 80188bc:	e000      	b.n	80188c0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x108>
 80188be:	4b83      	ldr	r3, [pc, #524]	; (8018acc <_ZN23MockCheckedExpectedCall12callToStringEv+0x314>)
 80188c0:	4619      	mov	r1, r3
 80188c2:	6878      	ldr	r0, [r7, #4]
 80188c4:	f7f2 f8ca 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
 80188c8:	e0e3      	b.n	8018a92 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
    } else {
        MockNamedValueListNode* p;

        for (p = inputParameters_->begin(); p; p = p->next()) {
 80188ca:	683b      	ldr	r3, [r7, #0]
 80188cc:	69db      	ldr	r3, [r3, #28]
 80188ce:	4618      	mov	r0, r3
 80188d0:	f004 f94d 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80188d4:	6778      	str	r0, [r7, #116]	; 0x74
 80188d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d069      	beq.n	80189b0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1f8>
            str += StringFromFormat("%s %s: <%s>", p->getType().asCharString(), p->getName().asCharString(), getInputParameterValueString(p->getName()).asCharString());
 80188dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80188e0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80188e2:	4618      	mov	r0, r3
 80188e4:	f004 f89a 	bl	801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>
 80188e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7f1 fff9 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 80188f2:	4605      	mov	r5, r0
 80188f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80188f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80188fa:	4618      	mov	r0, r3
 80188fc:	f004 f87b 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018900:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018904:	4618      	mov	r0, r3
 8018906:	f7f1 ffed 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801890a:	4606      	mov	r6, r0
 801890c:	683b      	ldr	r3, [r7, #0]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	33a4      	adds	r3, #164	; 0xa4
 8018912:	681c      	ldr	r4, [r3, #0]
 8018914:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8018918:	6f79      	ldr	r1, [r7, #116]	; 0x74
 801891a:	4618      	mov	r0, r3
 801891c:	f004 f86b 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018920:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018924:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018928:	6839      	ldr	r1, [r7, #0]
 801892a:	4618      	mov	r0, r3
 801892c:	47a0      	blx	r4
 801892e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018932:	4618      	mov	r0, r3
 8018934:	f7f1 ffd6 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018938:	4603      	mov	r3, r0
 801893a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 801893e:	9300      	str	r3, [sp, #0]
 8018940:	4633      	mov	r3, r6
 8018942:	462a      	mov	r2, r5
 8018944:	4962      	ldr	r1, [pc, #392]	; (8018ad0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x318>)
 8018946:	f7f2 fd01 	bl	800b34c <_Z16StringFromFormatPKcz>
 801894a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801894e:	4619      	mov	r1, r3
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f7f2 f871 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801895a:	4618      	mov	r0, r3
 801895c:	f7f1 ffef 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018960:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018964:	4618      	mov	r0, r3
 8018966:	f7f1 ffea 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801896a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801896e:	4618      	mov	r0, r3
 8018970:	f7f1 ffe5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018974:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018978:	4618      	mov	r0, r3
 801897a:	f7f1 ffe0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801897e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018982:	4618      	mov	r0, r3
 8018984:	f7f1 ffdb 	bl	800a93e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018988:	6f78      	ldr	r0, [r7, #116]	; 0x74
 801898a:	f003 fff9 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801898e:	4603      	mov	r3, r0
 8018990:	2b00      	cmp	r3, #0
 8018992:	bf14      	ite	ne
 8018994:	2301      	movne	r3, #1
 8018996:	2300      	moveq	r3, #0
 8018998:	b2db      	uxtb	r3, r3
 801899a:	2b00      	cmp	r3, #0
 801899c:	d003      	beq.n	80189a6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x1ee>
 801899e:	494d      	ldr	r1, [pc, #308]	; (8018ad4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80189a0:	6878      	ldr	r0, [r7, #4]
 80189a2:	f7f2 f85b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        for (p = inputParameters_->begin(); p; p = p->next()) {
 80189a6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80189a8:	f003 ffea 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 80189ac:	6778      	str	r0, [r7, #116]	; 0x74
 80189ae:	e792      	b.n	80188d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x11e>
        }

        if (inputParameters_->begin() && outputParameters_->begin())
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	69db      	ldr	r3, [r3, #28]
 80189b4:	4618      	mov	r0, r3
 80189b6:	f004 f8da 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d009      	beq.n	80189d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80189c0:	683b      	ldr	r3, [r7, #0]
 80189c2:	6a1b      	ldr	r3, [r3, #32]
 80189c4:	4618      	mov	r0, r3
 80189c6:	f004 f8d2 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d001      	beq.n	80189d4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21c>
 80189d0:	2301      	movs	r3, #1
 80189d2:	e000      	b.n	80189d6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x21e>
 80189d4:	2300      	movs	r3, #0
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d003      	beq.n	80189e2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x22a>
        {
            str += ", ";
 80189da:	493e      	ldr	r1, [pc, #248]	; (8018ad4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f7f2 f83d 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        }

        for (p = outputParameters_->begin(); p; p = p->next()) {
 80189e2:	683b      	ldr	r3, [r7, #0]
 80189e4:	6a1b      	ldr	r3, [r3, #32]
 80189e6:	4618      	mov	r0, r3
 80189e8:	f004 f8c1 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 80189ec:	6778      	str	r0, [r7, #116]	; 0x74
 80189ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d046      	beq.n	8018a82 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ca>
            str += StringFromFormat("%s %s: <output>", p->getType().asCharString(), p->getName().asCharString());
 80189f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80189f8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80189fa:	4618      	mov	r0, r3
 80189fc:	f004 f80e 	bl	801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>
 8018a00:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018a04:	4618      	mov	r0, r3
 8018a06:	f7f1 ff6d 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018a0a:	4604      	mov	r4, r0
 8018a0c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018a10:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8018a12:	4618      	mov	r0, r3
 8018a14:	f003 ffef 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018a1c:	4618      	mov	r0, r3
 8018a1e:	f7f1 ff61 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018a22:	4603      	mov	r3, r0
 8018a24:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8018a28:	4622      	mov	r2, r4
 8018a2a:	492b      	ldr	r1, [pc, #172]	; (8018ad8 <_ZN23MockCheckedExpectedCall12callToStringEv+0x320>)
 8018a2c:	f7f2 fc8e 	bl	800b34c <_Z16StringFromFormatPKcz>
 8018a30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018a34:	4619      	mov	r1, r3
 8018a36:	6878      	ldr	r0, [r7, #4]
 8018a38:	f7f1 fffe 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018a3c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7f1 ff7c 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018a46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018a4a:	4618      	mov	r0, r3
 8018a4c:	f7f1 ff77 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018a50:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7f1 ff72 	bl	800a93e <_ZN12SimpleStringD1Ev>
            if (p->next()) str += ", ";
 8018a5a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018a5c:	f003 ff90 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	bf14      	ite	ne
 8018a66:	2301      	movne	r3, #1
 8018a68:	2300      	moveq	r3, #0
 8018a6a:	b2db      	uxtb	r3, r3
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d003      	beq.n	8018a78 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2c0>
 8018a70:	4918      	ldr	r1, [pc, #96]	; (8018ad4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x31c>)
 8018a72:	6878      	ldr	r0, [r7, #4]
 8018a74:	f7f1 fff2 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        for (p = outputParameters_->begin(); p; p = p->next()) {
 8018a78:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8018a7a:	f003 ff81 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018a7e:	6778      	str	r0, [r7, #116]	; 0x74
 8018a80:	e7b5      	b.n	80189ee <_ZN23MockCheckedExpectedCall12callToStringEv+0x236>
        }

        if (ignoreOtherParameters_)
 8018a82:	683b      	ldr	r3, [r7, #0]
 8018a84:	7b1b      	ldrb	r3, [r3, #12]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d003      	beq.n	8018a92 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2da>
            str += ", other parameters are ignored";
 8018a8a:	4914      	ldr	r1, [pc, #80]	; (8018adc <_ZN23MockCheckedExpectedCall12callToStringEv+0x324>)
 8018a8c:	6878      	ldr	r0, [r7, #4]
 8018a8e:	f7f1 ffe5 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }

    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018a92:	683b      	ldr	r3, [r7, #0]
 8018a94:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018a96:	683b      	ldr	r3, [r7, #0]
 8018a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018a9a:	2b01      	cmp	r3, #1
 8018a9c:	d101      	bne.n	8018aa2 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ea>
 8018a9e:	4c05      	ldr	r4, [pc, #20]	; (8018ab4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018aa0:	e000      	b.n	8018aa4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2ec>
 8018aa2:	4c0f      	ldr	r4, [pc, #60]	; (8018ae0 <_ZN23MockCheckedExpectedCall12callToStringEv+0x328>)
 8018aa4:	683b      	ldr	r3, [r7, #0]
 8018aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018aa8:	683a      	ldr	r2, [r7, #0]
 8018aaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
    str += StringFromFormat(" (expected %d call%s, called %d time%s)",
 8018aac:	2a01      	cmp	r2, #1
 8018aae:	d119      	bne.n	8018ae4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32c>
 8018ab0:	4a00      	ldr	r2, [pc, #0]	; (8018ab4 <_ZN23MockCheckedExpectedCall12callToStringEv+0x2fc>)
 8018ab2:	e018      	b.n	8018ae6 <_ZN23MockCheckedExpectedCall12callToStringEv+0x32e>
 8018ab4:	08022eec 	.word	0x08022eec
 8018ab8:	08022f60 	.word	0x08022f60
 8018abc:	08022f78 	.word	0x08022f78
 8018ac0:	08022f80 	.word	0x08022f80
 8018ac4:	08022fa0 	.word	0x08022fa0
 8018ac8:	08022fc4 	.word	0x08022fc4
 8018acc:	08022fdc 	.word	0x08022fdc
 8018ad0:	08022fec 	.word	0x08022fec
 8018ad4:	08022ff8 	.word	0x08022ff8
 8018ad8:	08022ffc 	.word	0x08022ffc
 8018adc:	0802300c 	.word	0x0802300c
 8018ae0:	0802302c 	.word	0x0802302c
 8018ae4:	4a0c      	ldr	r2, [pc, #48]	; (8018b18 <_ZN23MockCheckedExpectedCall12callToStringEv+0x360>)
 8018ae6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8018aea:	9201      	str	r2, [sp, #4]
 8018aec:	9300      	str	r3, [sp, #0]
 8018aee:	4623      	mov	r3, r4
 8018af0:	460a      	mov	r2, r1
 8018af2:	490a      	ldr	r1, [pc, #40]	; (8018b1c <_ZN23MockCheckedExpectedCall12callToStringEv+0x364>)
 8018af4:	f7f2 fc2a 	bl	800b34c <_Z16StringFromFormatPKcz>
                            expectedCalls_, (expectedCalls_ == 1) ? "" : "s", actualCalls_, (actualCalls_ == 1) ? "" : "s" );
 8018af8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018afc:	4619      	mov	r1, r3
 8018afe:	6878      	ldr	r0, [r7, #4]
 8018b00:	f7f1 ff9a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018b04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8018b08:	4618      	mov	r0, r3
 8018b0a:	f7f1 ff18 	bl	800a93e <_ZN12SimpleStringD1Ev>

    return str;
 8018b0e:	bf00      	nop
}
 8018b10:	6878      	ldr	r0, [r7, #4]
 8018b12:	377c      	adds	r7, #124	; 0x7c
 8018b14:	46bd      	mov	sp, r7
 8018b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b18:	0802302c 	.word	0x0802302c
 8018b1c:	08023030 	.word	0x08023030

08018b20 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv>:

SimpleString MockCheckedExpectedCall::missingParametersToString()
{
 8018b20:	b590      	push	{r4, r7, lr}
 8018b22:	b095      	sub	sp, #84	; 0x54
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
 8018b28:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8018b2a:	496c      	ldr	r1, [pc, #432]	; (8018cdc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018b2c:	6878      	ldr	r0, [r7, #4]
 8018b2e:	f7f1 fb4e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
	MockNamedValueListNode* p;

    for (p = inputParameters_->begin(); p; p = p->next()) {
 8018b32:	683b      	ldr	r3, [r7, #0]
 8018b34:	69db      	ldr	r3, [r3, #28]
 8018b36:	4618      	mov	r0, r3
 8018b38:	f004 f819 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018b3c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d05e      	beq.n	8018c02 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xe2>
        if (! item(p)->isMatchingActualCall()) {
 8018b44:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018b46:	6838      	ldr	r0, [r7, #0]
 8018b48:	f000 f906 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	4618      	mov	r0, r3
 8018b50:	f000 f938 	bl	8018dc4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018b54:	4603      	mov	r3, r0
 8018b56:	f083 0301 	eor.w	r3, r3, #1
 8018b5a:	b2db      	uxtb	r3, r3
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d04b      	beq.n	8018bf8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xd8>
            if (str != "") str += ", ";
 8018b60:	f107 030c 	add.w	r3, r7, #12
 8018b64:	495d      	ldr	r1, [pc, #372]	; (8018cdc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7f1 fb31 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8018b6c:	f107 030c 	add.w	r3, r7, #12
 8018b70:	4619      	mov	r1, r3
 8018b72:	6878      	ldr	r0, [r7, #4]
 8018b74:	f7f1 ff34 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 8018b78:	4603      	mov	r3, r0
 8018b7a:	461c      	mov	r4, r3
 8018b7c:	f107 030c 	add.w	r3, r7, #12
 8018b80:	4618      	mov	r0, r3
 8018b82:	f7f1 fedc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018b86:	2c00      	cmp	r4, #0
 8018b88:	d003      	beq.n	8018b92 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x72>
 8018b8a:	4955      	ldr	r1, [pc, #340]	; (8018ce0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018b8c:	6878      	ldr	r0, [r7, #4]
 8018b8e:	f7f1 ff65 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8018b92:	f107 031c 	add.w	r3, r7, #28
 8018b96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018b98:	4618      	mov	r0, r3
 8018b9a:	f003 ff3f 	bl	801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>
 8018b9e:	f107 031c 	add.w	r3, r7, #28
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	f7f1 fe9e 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018ba8:	4604      	mov	r4, r0
 8018baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f003 ff20 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bba:	4618      	mov	r0, r3
 8018bbc:	f7f1 fe92 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018bc0:	4603      	mov	r3, r0
 8018bc2:	f107 0014 	add.w	r0, r7, #20
 8018bc6:	4622      	mov	r2, r4
 8018bc8:	4946      	ldr	r1, [pc, #280]	; (8018ce4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018bca:	f7f2 fbbf 	bl	800b34c <_Z16StringFromFormatPKcz>
 8018bce:	f107 0314 	add.w	r3, r7, #20
 8018bd2:	4619      	mov	r1, r3
 8018bd4:	6878      	ldr	r0, [r7, #4]
 8018bd6:	f7f1 ff2f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018bda:	f107 0314 	add.w	r3, r7, #20
 8018bde:	4618      	mov	r0, r3
 8018be0:	f7f1 fead 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7f1 fea8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018bee:	f107 031c 	add.w	r3, r7, #28
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7f1 fea3 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (p = inputParameters_->begin(); p; p = p->next()) {
 8018bf8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018bfa:	f003 fec1 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018bfe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018c00:	e79d      	b.n	8018b3e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1e>
        }
    }
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8018c02:	683b      	ldr	r3, [r7, #0]
 8018c04:	6a1b      	ldr	r3, [r3, #32]
 8018c06:	4618      	mov	r0, r3
 8018c08:	f003 ffb1 	bl	801cb6e <_ZN18MockNamedValueList5beginEv>
 8018c0c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018c0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d05e      	beq.n	8018cd2 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1b2>
        if (! item(p)->isMatchingActualCall()) {
 8018c14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018c16:	6838      	ldr	r0, [r7, #0]
 8018c18:	f000 f89e 	bl	8018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>
 8018c1c:	4603      	mov	r3, r0
 8018c1e:	4618      	mov	r0, r3
 8018c20:	f000 f8d0 	bl	8018dc4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>
 8018c24:	4603      	mov	r3, r0
 8018c26:	f083 0301 	eor.w	r3, r3, #1
 8018c2a:	b2db      	uxtb	r3, r3
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d04b      	beq.n	8018cc8 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1a8>
            if (str != "") str += ", ";
 8018c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018c34:	4929      	ldr	r1, [pc, #164]	; (8018cdc <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1bc>)
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7f1 fac9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8018c3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018c40:	4619      	mov	r1, r3
 8018c42:	6878      	ldr	r0, [r7, #4]
 8018c44:	f7f1 fecc 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	461c      	mov	r4, r3
 8018c4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018c50:	4618      	mov	r0, r3
 8018c52:	f7f1 fe74 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018c56:	2c00      	cmp	r4, #0
 8018c58:	d003      	beq.n	8018c62 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x142>
 8018c5a:	4921      	ldr	r1, [pc, #132]	; (8018ce0 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c0>)
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f7f1 fefd 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
            str += StringFromFormat("%s %s", p->getType().asCharString(), p->getName().asCharString());
 8018c62:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018c66:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f003 fed7 	bl	801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>
 8018c6e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7f1 fe36 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018c78:	4604      	mov	r4, r0
 8018c7a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018c7e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018c80:	4618      	mov	r0, r3
 8018c82:	f003 feb8 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 8018c86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018c8a:	4618      	mov	r0, r3
 8018c8c:	f7f1 fe2a 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 8018c90:	4603      	mov	r3, r0
 8018c92:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8018c96:	4622      	mov	r2, r4
 8018c98:	4912      	ldr	r1, [pc, #72]	; (8018ce4 <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0x1c4>)
 8018c9a:	f7f2 fb57 	bl	800b34c <_Z16StringFromFormatPKcz>
 8018c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018ca2:	4619      	mov	r1, r3
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f7f1 fec7 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 8018caa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7f1 fe45 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018cb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018cb8:	4618      	mov	r0, r3
 8018cba:	f7f1 fe40 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018cbe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8018cc2:	4618      	mov	r0, r3
 8018cc4:	f7f1 fe3b 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (p = outputParameters_->begin(); p; p = p->next()) {
 8018cc8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8018cca:	f003 fe59 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 8018cce:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018cd0:	e79d      	b.n	8018c0e <_ZN23MockCheckedExpectedCall25missingParametersToStringEv+0xee>
        }
    }
    return str;
 8018cd2:	bf00      	nop
}
 8018cd4:	6878      	ldr	r0, [r7, #4]
 8018cd6:	3754      	adds	r7, #84	; 0x54
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	bd90      	pop	{r4, r7, pc}
 8018cdc:	08022eec 	.word	0x08022eec
 8018ce0:	08022ff8 	.word	0x08022ff8
 8018ce4:	08023058 	.word	0x08023058

08018ce8 <_ZN23MockCheckedExpectedCall9relatesToERK12SimpleString>:

bool MockCheckedExpectedCall::relatesTo(const SimpleString& functionName)
{
 8018ce8:	b590      	push	{r4, r7, lr}
 8018cea:	b085      	sub	sp, #20
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
 8018cf0:	6039      	str	r1, [r7, #0]
    return functionName == getName();
 8018cf2:	f107 0308 	add.w	r3, r7, #8
 8018cf6:	6879      	ldr	r1, [r7, #4]
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	f7fe ff0d 	bl	8017b18 <_ZNK23MockCheckedExpectedCall7getNameEv>
 8018cfe:	f107 0308 	add.w	r3, r7, #8
 8018d02:	4619      	mov	r1, r3
 8018d04:	6838      	ldr	r0, [r7, #0]
 8018d06:	f7f1 fe26 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8018d0a:	4603      	mov	r3, r0
 8018d0c:	461c      	mov	r4, r3
 8018d0e:	f107 0308 	add.w	r3, r7, #8
 8018d12:	4618      	mov	r0, r3
 8018d14:	f7f1 fe13 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8018d18:	4623      	mov	r3, r4
}
 8018d1a:	4618      	mov	r0, r3
 8018d1c:	3714      	adds	r7, #20
 8018d1e:	46bd      	mov	sp, r7
 8018d20:	bd90      	pop	{r4, r7, pc}

08018d22 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv>:

bool MockCheckedExpectedCall::relatesToObject(const void* objectPtr) const
{
 8018d22:	b480      	push	{r7}
 8018d24:	b083      	sub	sp, #12
 8018d26:	af00      	add	r7, sp, #0
 8018d28:	6078      	str	r0, [r7, #4]
 8018d2a:	6039      	str	r1, [r7, #0]
    return (!isSpecificObjectExpected_) || (objectPtr_ == objectPtr);
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8018d32:	f083 0301 	eor.w	r3, r3, #1
 8018d36:	b2db      	uxtb	r3, r3
 8018d38:	2b00      	cmp	r3, #0
 8018d3a:	d104      	bne.n	8018d46 <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x24>
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018d40:	683a      	ldr	r2, [r7, #0]
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d101      	bne.n	8018d4a <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x28>
 8018d46:	2301      	movs	r3, #1
 8018d48:	e000      	b.n	8018d4c <_ZNK23MockCheckedExpectedCall15relatesToObjectEPKv+0x2a>
 8018d4a:	2300      	movs	r3, #0
}
 8018d4c:	4618      	mov	r0, r3
 8018d4e:	370c      	adds	r7, #12
 8018d50:	46bd      	mov	sp, r7
 8018d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d56:	4770      	bx	lr

08018d58 <_ZN23MockCheckedExpectedCall4itemEP22MockNamedValueListNode>:

MockCheckedExpectedCall::MockExpectedFunctionParameter* MockCheckedExpectedCall::item(MockNamedValueListNode* node)
{
 8018d58:	b580      	push	{r7, lr}
 8018d5a:	b082      	sub	sp, #8
 8018d5c:	af00      	add	r7, sp, #0
 8018d5e:	6078      	str	r0, [r7, #4]
 8018d60:	6039      	str	r1, [r7, #0]
    return (MockExpectedFunctionParameter*) node->item();
 8018d62:	6838      	ldr	r0, [r7, #0]
 8018d64:	f003 fe18 	bl	801c998 <_ZN22MockNamedValueListNode4itemEv>
 8018d68:	4603      	mov	r3, r0
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	3708      	adds	r7, #8
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
	...

08018d74 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString>:

MockCheckedExpectedCall::MockExpectedFunctionParameter::MockExpectedFunctionParameter(const SimpleString& name)
 8018d74:	b580      	push	{r7, lr}
 8018d76:	b082      	sub	sp, #8
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
 8018d7c:	6039      	str	r1, [r7, #0]
            : MockNamedValue(name), matchesActualCall_(false)
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6839      	ldr	r1, [r7, #0]
 8018d82:	4618      	mov	r0, r3
 8018d84:	f001 ff48 	bl	801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>
 8018d88:	4a05      	ldr	r2, [pc, #20]	; (8018da0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterC1ERK12SimpleString+0x2c>)
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	601a      	str	r2, [r3, #0]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	2200      	movs	r2, #0
 8018d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
{
}
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3708      	adds	r7, #8
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	08025424 	.word	0x08025424

08018da4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameter20setMatchesActualCallEb>:

void MockCheckedExpectedCall::MockExpectedFunctionParameter::setMatchesActualCall(bool b)
{
 8018da4:	b480      	push	{r7}
 8018da6:	b083      	sub	sp, #12
 8018da8:	af00      	add	r7, sp, #0
 8018daa:	6078      	str	r0, [r7, #4]
 8018dac:	460b      	mov	r3, r1
 8018dae:	70fb      	strb	r3, [r7, #3]
    matchesActualCall_ = b;
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	78fa      	ldrb	r2, [r7, #3]
 8018db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8018db8:	bf00      	nop
 8018dba:	370c      	adds	r7, #12
 8018dbc:	46bd      	mov	sp, r7
 8018dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dc2:	4770      	bx	lr

08018dc4 <_ZNK23MockCheckedExpectedCall29MockExpectedFunctionParameter20isMatchingActualCallEv>:

bool MockCheckedExpectedCall::MockExpectedFunctionParameter::isMatchingActualCall() const
{
 8018dc4:	b480      	push	{r7}
 8018dc6:	b083      	sub	sp, #12
 8018dc8:	af00      	add	r7, sp, #0
 8018dca:	6078      	str	r0, [r7, #4]
    return matchesActualCall_;
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	370c      	adds	r7, #12
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ddc:	4770      	bx	lr
	...

08018de0 <_ZN23MockCheckedExpectedCall14andReturnValueEb>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(bool value)
{
 8018de0:	b580      	push	{r7, lr}
 8018de2:	b082      	sub	sp, #8
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	6078      	str	r0, [r7, #4]
 8018de8:	460b      	mov	r3, r1
 8018dea:	70fb      	strb	r3, [r7, #3]
    returnValue_.setName("returnValue");
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	3328      	adds	r3, #40	; 0x28
 8018df0:	4907      	ldr	r1, [pc, #28]	; (8018e10 <_ZN23MockCheckedExpectedCall14andReturnValueEb+0x30>)
 8018df2:	4618      	mov	r0, r3
 8018df4:	f002 f9b4 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	3328      	adds	r3, #40	; 0x28
 8018dfc:	78fa      	ldrb	r2, [r7, #3]
 8018dfe:	4611      	mov	r1, r2
 8018e00:	4618      	mov	r0, r3
 8018e02:	f001 ff5b 	bl	801acbc <_ZN14MockNamedValue8setValueEb>
    return *this;
 8018e06:	687b      	ldr	r3, [r7, #4]
}
 8018e08:	4618      	mov	r0, r3
 8018e0a:	3708      	adds	r7, #8
 8018e0c:	46bd      	mov	sp, r7
 8018e0e:	bd80      	pop	{r7, pc}
 8018e10:	08023060 	.word	0x08023060

08018e14 <_ZN23MockCheckedExpectedCall14andReturnValueEj>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned int value)
{
 8018e14:	b580      	push	{r7, lr}
 8018e16:	b082      	sub	sp, #8
 8018e18:	af00      	add	r7, sp, #0
 8018e1a:	6078      	str	r0, [r7, #4]
 8018e1c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	3328      	adds	r3, #40	; 0x28
 8018e22:	4907      	ldr	r1, [pc, #28]	; (8018e40 <_ZN23MockCheckedExpectedCall14andReturnValueEj+0x2c>)
 8018e24:	4618      	mov	r0, r3
 8018e26:	f002 f99b 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	3328      	adds	r3, #40	; 0x28
 8018e2e:	6839      	ldr	r1, [r7, #0]
 8018e30:	4618      	mov	r0, r3
 8018e32:	f001 ff67 	bl	801ad04 <_ZN14MockNamedValue8setValueEj>
    return *this;
 8018e36:	687b      	ldr	r3, [r7, #4]
}
 8018e38:	4618      	mov	r0, r3
 8018e3a:	3708      	adds	r7, #8
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	bd80      	pop	{r7, pc}
 8018e40:	08023060 	.word	0x08023060

08018e44 <_ZN23MockCheckedExpectedCall14andReturnValueEi>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(int value)
{
 8018e44:	b580      	push	{r7, lr}
 8018e46:	b082      	sub	sp, #8
 8018e48:	af00      	add	r7, sp, #0
 8018e4a:	6078      	str	r0, [r7, #4]
 8018e4c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	3328      	adds	r3, #40	; 0x28
 8018e52:	4907      	ldr	r1, [pc, #28]	; (8018e70 <_ZN23MockCheckedExpectedCall14andReturnValueEi+0x2c>)
 8018e54:	4618      	mov	r0, r3
 8018e56:	f002 f983 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	3328      	adds	r3, #40	; 0x28
 8018e5e:	6839      	ldr	r1, [r7, #0]
 8018e60:	4618      	mov	r0, r3
 8018e62:	f001 ff71 	bl	801ad48 <_ZN14MockNamedValue8setValueEi>
    return *this;
 8018e66:	687b      	ldr	r3, [r7, #4]
}
 8018e68:	4618      	mov	r0, r3
 8018e6a:	3708      	adds	r7, #8
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}
 8018e70:	08023060 	.word	0x08023060

08018e74 <_ZN23MockCheckedExpectedCall14andReturnValueEl>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(long int value)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b082      	sub	sp, #8
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
 8018e7c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	3328      	adds	r3, #40	; 0x28
 8018e82:	4907      	ldr	r1, [pc, #28]	; (8018ea0 <_ZN23MockCheckedExpectedCall14andReturnValueEl+0x2c>)
 8018e84:	4618      	mov	r0, r3
 8018e86:	f002 f96b 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	3328      	adds	r3, #40	; 0x28
 8018e8e:	6839      	ldr	r1, [r7, #0]
 8018e90:	4618      	mov	r0, r3
 8018e92:	f001 ff7b 	bl	801ad8c <_ZN14MockNamedValue8setValueEl>
    return *this;
 8018e96:	687b      	ldr	r3, [r7, #4]
}
 8018e98:	4618      	mov	r0, r3
 8018e9a:	3708      	adds	r7, #8
 8018e9c:	46bd      	mov	sp, r7
 8018e9e:	bd80      	pop	{r7, pc}
 8018ea0:	08023060 	.word	0x08023060

08018ea4 <_ZN23MockCheckedExpectedCall14andReturnValueEm>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(unsigned long int value)
{
 8018ea4:	b580      	push	{r7, lr}
 8018ea6:	b082      	sub	sp, #8
 8018ea8:	af00      	add	r7, sp, #0
 8018eaa:	6078      	str	r0, [r7, #4]
 8018eac:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	3328      	adds	r3, #40	; 0x28
 8018eb2:	4907      	ldr	r1, [pc, #28]	; (8018ed0 <_ZN23MockCheckedExpectedCall14andReturnValueEm+0x2c>)
 8018eb4:	4618      	mov	r0, r3
 8018eb6:	f002 f953 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	3328      	adds	r3, #40	; 0x28
 8018ebe:	6839      	ldr	r1, [r7, #0]
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f001 ff85 	bl	801add0 <_ZN14MockNamedValue8setValueEm>
    return *this;
 8018ec6:	687b      	ldr	r3, [r7, #4]
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3708      	adds	r7, #8
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	08023060 	.word	0x08023060

08018ed4 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong>:
}

#else

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_longlong)
{
 8018ed4:	b5b0      	push	{r4, r5, r7, lr}
 8018ed6:	b086      	sub	sp, #24
 8018ed8:	af02      	add	r7, sp, #8
 8018eda:	60f8      	str	r0, [r7, #12]
 8018edc:	1d3b      	adds	r3, r7, #4
 8018ede:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 8018ee2:	f7f8 fd57 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	6823      	ldr	r3, [r4, #0]
 8018eea:	3368      	adds	r3, #104	; 0x68
 8018eec:	681d      	ldr	r5, [r3, #0]
 8018eee:	f7f8 fd61 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018ef2:	4603      	mov	r3, r0
 8018ef4:	9300      	str	r3, [sp, #0]
 8018ef6:	f240 2319 	movw	r3, #537	; 0x219
 8018efa:	4a04      	ldr	r2, [pc, #16]	; (8018f0c <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x38>)
 8018efc:	4904      	ldr	r1, [pc, #16]	; (8018f10 <_ZN23MockCheckedExpectedCall14andReturnValueE17cpputest_longlong+0x3c>)
 8018efe:	4620      	mov	r0, r4
 8018f00:	47a8      	blx	r5
    return *this;
 8018f02:	68fb      	ldr	r3, [r7, #12]
}
 8018f04:	4618      	mov	r0, r3
 8018f06:	3710      	adds	r7, #16
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8018f0c:	08022ef0 	.word	0x08022ef0
 8018f10:	08022f0c 	.word	0x08022f0c

08018f14 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(cpputest_ulonglong)
{
 8018f14:	b5b0      	push	{r4, r5, r7, lr}
 8018f16:	b086      	sub	sp, #24
 8018f18:	af02      	add	r7, sp, #8
 8018f1a:	60f8      	str	r0, [r7, #12]
 8018f1c:	1d3b      	adds	r3, r7, #4
 8018f1e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 8018f22:	f7f8 fd37 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 8018f26:	4604      	mov	r4, r0
 8018f28:	6823      	ldr	r3, [r4, #0]
 8018f2a:	3368      	adds	r3, #104	; 0x68
 8018f2c:	681d      	ldr	r5, [r3, #0]
 8018f2e:	f7f8 fd41 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8018f32:	4603      	mov	r3, r0
 8018f34:	9300      	str	r3, [sp, #0]
 8018f36:	f240 231f 	movw	r3, #543	; 0x21f
 8018f3a:	4a04      	ldr	r2, [pc, #16]	; (8018f4c <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x38>)
 8018f3c:	4904      	ldr	r1, [pc, #16]	; (8018f50 <_ZN23MockCheckedExpectedCall14andReturnValueE18cpputest_ulonglong+0x3c>)
 8018f3e:	4620      	mov	r0, r4
 8018f40:	47a8      	blx	r5
    return *this;
 8018f42:	68fb      	ldr	r3, [r7, #12]
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	3710      	adds	r7, #16
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8018f4c:	08022ef0 	.word	0x08022ef0
 8018f50:	08022f2c 	.word	0x08022f2c

08018f54 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc>:

#endif

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const char* value)
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b082      	sub	sp, #8
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	3328      	adds	r3, #40	; 0x28
 8018f62:	4907      	ldr	r1, [pc, #28]	; (8018f80 <_ZN23MockCheckedExpectedCall14andReturnValueEPKc+0x2c>)
 8018f64:	4618      	mov	r0, r3
 8018f66:	f002 f8fb 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	3328      	adds	r3, #40	; 0x28
 8018f6e:	6839      	ldr	r1, [r7, #0]
 8018f70:	4618      	mov	r0, r3
 8018f72:	f002 f837 	bl	801afe4 <_ZN14MockNamedValue8setValueEPKc>
    return *this;
 8018f76:	687b      	ldr	r3, [r7, #4]
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	3708      	adds	r7, #8
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}
 8018f80:	08023060 	.word	0x08023060

08018f84 <_ZN23MockCheckedExpectedCall14andReturnValueEd>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(double value)
{
 8018f84:	b580      	push	{r7, lr}
 8018f86:	b084      	sub	sp, #16
 8018f88:	af00      	add	r7, sp, #0
 8018f8a:	60f8      	str	r0, [r7, #12]
 8018f8c:	ed87 0b00 	vstr	d0, [r7]
    returnValue_.setName("returnValue");
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	3328      	adds	r3, #40	; 0x28
 8018f94:	4907      	ldr	r1, [pc, #28]	; (8018fb4 <_ZN23MockCheckedExpectedCall14andReturnValueEd+0x30>)
 8018f96:	4618      	mov	r0, r3
 8018f98:	f002 f8e2 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018f9c:	68fb      	ldr	r3, [r7, #12]
 8018f9e:	3328      	adds	r3, #40	; 0x28
 8018fa0:	ed97 0b00 	vldr	d0, [r7]
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	f001 ff73 	bl	801ae90 <_ZN14MockNamedValue8setValueEd>
    return *this;
 8018faa:	68fb      	ldr	r3, [r7, #12]
}
 8018fac:	4618      	mov	r0, r3
 8018fae:	3710      	adds	r7, #16
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	bd80      	pop	{r7, pc}
 8018fb4:	08023060 	.word	0x08023060

08018fb8 <_ZN23MockCheckedExpectedCall14andReturnValueEPv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void* value)
{
 8018fb8:	b580      	push	{r7, lr}
 8018fba:	b082      	sub	sp, #8
 8018fbc:	af00      	add	r7, sp, #0
 8018fbe:	6078      	str	r0, [r7, #4]
 8018fc0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	3328      	adds	r3, #40	; 0x28
 8018fc6:	4907      	ldr	r1, [pc, #28]	; (8018fe4 <_ZN23MockCheckedExpectedCall14andReturnValueEPv+0x2c>)
 8018fc8:	4618      	mov	r0, r3
 8018fca:	f002 f8c9 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018fce:	687b      	ldr	r3, [r7, #4]
 8018fd0:	3328      	adds	r3, #40	; 0x28
 8018fd2:	6839      	ldr	r1, [r7, #0]
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f001 ff9f 	bl	801af18 <_ZN14MockNamedValue8setValueEPv>
    return *this;
 8018fda:	687b      	ldr	r3, [r7, #4]
}
 8018fdc:	4618      	mov	r0, r3
 8018fde:	3708      	adds	r7, #8
 8018fe0:	46bd      	mov	sp, r7
 8018fe2:	bd80      	pop	{r7, pc}
 8018fe4:	08023060 	.word	0x08023060

08018fe8 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(const void* value)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
 8018ff0:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	3328      	adds	r3, #40	; 0x28
 8018ff6:	4907      	ldr	r1, [pc, #28]	; (8019014 <_ZN23MockCheckedExpectedCall14andReturnValueEPKv+0x2c>)
 8018ff8:	4618      	mov	r0, r3
 8018ffa:	f002 f8b1 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	3328      	adds	r3, #40	; 0x28
 8019002:	6839      	ldr	r1, [r7, #0]
 8019004:	4618      	mov	r0, r3
 8019006:	f001 ffa9 	bl	801af5c <_ZN14MockNamedValue8setValueEPKv>
    return *this;
 801900a:	687b      	ldr	r3, [r7, #4]
}
 801900c:	4618      	mov	r0, r3
 801900e:	3708      	adds	r7, #8
 8019010:	46bd      	mov	sp, r7
 8019012:	bd80      	pop	{r7, pc}
 8019014:	08023060 	.word	0x08023060

08019018 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE>:

MockExpectedCall& MockCheckedExpectedCall::andReturnValue(void (*value)())
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b082      	sub	sp, #8
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
 8019020:	6039      	str	r1, [r7, #0]
    returnValue_.setName("returnValue");
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	3328      	adds	r3, #40	; 0x28
 8019026:	4907      	ldr	r1, [pc, #28]	; (8019044 <_ZN23MockCheckedExpectedCall14andReturnValueEPFvvE+0x2c>)
 8019028:	4618      	mov	r0, r3
 801902a:	f002 f899 	bl	801b160 <_ZN14MockNamedValue7setNameEPKc>
    returnValue_.setValue(value);
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	3328      	adds	r3, #40	; 0x28
 8019032:	6839      	ldr	r1, [r7, #0]
 8019034:	4618      	mov	r0, r3
 8019036:	f001 ffb3 	bl	801afa0 <_ZN14MockNamedValue8setValueEPFvvE>
    return *this;
 801903a:	687b      	ldr	r3, [r7, #4]
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	08023060 	.word	0x08023060

08019048 <_ZN23MockCheckedExpectedCall8onObjectEPv>:

MockExpectedCall& MockCheckedExpectedCall::onObject(void* objectPtr)
{
 8019048:	b480      	push	{r7}
 801904a:	b083      	sub	sp, #12
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
 8019050:	6039      	str	r1, [r7, #0]
    isSpecificObjectExpected_ = true;
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	2201      	movs	r2, #1
 8019056:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    wasPassedToObject_ = false;
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2200      	movs	r2, #0
 801905e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    objectPtr_ = objectPtr;
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	683a      	ldr	r2, [r7, #0]
 8019066:	661a      	str	r2, [r3, #96]	; 0x60
    return *this;
 8019068:	687b      	ldr	r3, [r7, #4]
}
 801906a:	4618      	mov	r0, r3
 801906c:	370c      	adds	r7, #12
 801906e:	46bd      	mov	sp, r7
 8019070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019074:	4770      	bx	lr

08019076 <_ZN23MockCheckedExpectedCall11returnValueEv>:

MockNamedValue MockCheckedExpectedCall::returnValue()
{
 8019076:	b580      	push	{r7, lr}
 8019078:	b082      	sub	sp, #8
 801907a:	af00      	add	r7, sp, #0
 801907c:	6078      	str	r0, [r7, #4]
 801907e:	6039      	str	r1, [r7, #0]
    return returnValue_;
 8019080:	683b      	ldr	r3, [r7, #0]
 8019082:	3328      	adds	r3, #40	; 0x28
 8019084:	4619      	mov	r1, r3
 8019086:	6878      	ldr	r0, [r7, #4]
 8019088:	f7ef f946 	bl	8008318 <_ZN14MockNamedValueC1ERKS_>
}
 801908c:	6878      	ldr	r0, [r7, #4]
 801908e:	3708      	adds	r7, #8
 8019090:	46bd      	mov	sp, r7
 8019092:	bd80      	pop	{r7, pc}

08019094 <_ZN23MockCheckedExpectedCall13withCallOrderEjj>:

MockExpectedCall& MockCheckedExpectedCall::withCallOrder(unsigned int initialCallOrder, unsigned int finalCallOrder)
{
 8019094:	b480      	push	{r7}
 8019096:	b085      	sub	sp, #20
 8019098:	af00      	add	r7, sp, #0
 801909a:	60f8      	str	r0, [r7, #12]
 801909c:	60b9      	str	r1, [r7, #8]
 801909e:	607a      	str	r2, [r7, #4]
    initialExpectedCallOrder_ = initialCallOrder;
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	68ba      	ldr	r2, [r7, #8]
 80190a4:	611a      	str	r2, [r3, #16]
    finalExpectedCallOrder_ = finalCallOrder;
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	615a      	str	r2, [r3, #20]
    return *this;
 80190ac:	68fb      	ldr	r3, [r7, #12]
}
 80190ae:	4618      	mov	r0, r3
 80190b0:	3714      	adds	r7, #20
 80190b2:	46bd      	mov	sp, r7
 80190b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b8:	4770      	bx	lr

080190ba <_ZNK23MockCheckedExpectedCall12isOutOfOrderEv>:

bool MockCheckedExpectedCall::isOutOfOrder() const
{
 80190ba:	b480      	push	{r7}
 80190bc:	b083      	sub	sp, #12
 80190be:	af00      	add	r7, sp, #0
 80190c0:	6078      	str	r0, [r7, #4]
    return outOfOrder_;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	7e1b      	ldrb	r3, [r3, #24]
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	370c      	adds	r7, #12
 80190ca:	46bd      	mov	sp, r7
 80190cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d0:	4770      	bx	lr

080190d2 <_ZNK23MockCheckedExpectedCall23getActualCallsFulfilledEv>:

unsigned int MockCheckedExpectedCall::getActualCallsFulfilled() const
{
 80190d2:	b480      	push	{r7}
 80190d4:	b083      	sub	sp, #12
 80190d6:	af00      	add	r7, sp, #0
 80190d8:	6078      	str	r0, [r7, #4]
    return actualCalls_;
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
}
 80190de:	4618      	mov	r0, r3
 80190e0:	370c      	adds	r7, #12
 80190e2:	46bd      	mov	sp, r7
 80190e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e8:	4770      	bx	lr
	...

080190ec <_ZN23MockIgnoredExpectedCallC1Ev>:
class MockIgnoredExpectedCall: public MockExpectedCall
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b082      	sub	sp, #8
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	4618      	mov	r0, r3
 80190f8:	f7fe fcce 	bl	8017a98 <_ZN16MockExpectedCallC1Ev>
 80190fc:	4a03      	ldr	r2, [pc, #12]	; (801910c <_ZN23MockIgnoredExpectedCallC1Ev+0x20>)
 80190fe:	687b      	ldr	r3, [r7, #4]
 8019100:	601a      	str	r2, [r3, #0]
 8019102:	687b      	ldr	r3, [r7, #4]
 8019104:	4618      	mov	r0, r3
 8019106:	3708      	adds	r7, #8
 8019108:	46bd      	mov	sp, r7
 801910a:	bd80      	pop	{r7, pc}
 801910c:	08025284 	.word	0x08025284

08019110 <__tcf_0>:

MockExpectedCall& MockIgnoredExpectedCall::instance()
{
    static MockIgnoredExpectedCall call;
 8019110:	b580      	push	{r7, lr}
 8019112:	af00      	add	r7, sp, #0
 8019114:	4801      	ldr	r0, [pc, #4]	; (801911c <__tcf_0+0xc>)
 8019116:	f000 f831 	bl	801917c <_ZN23MockIgnoredExpectedCallD1Ev>
 801911a:	bd80      	pop	{r7, pc}
 801911c:	20000ccc 	.word	0x20000ccc

08019120 <_ZN23MockIgnoredExpectedCall8instanceEv>:
{
 8019120:	b580      	push	{r7, lr}
 8019122:	af00      	add	r7, sp, #0
    static MockIgnoredExpectedCall call;
 8019124:	4b12      	ldr	r3, [pc, #72]	; (8019170 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019126:	781b      	ldrb	r3, [r3, #0]
 8019128:	f3bf 8f5b 	dmb	ish
 801912c:	b2db      	uxtb	r3, r3
 801912e:	f003 0301 	and.w	r3, r3, #1
 8019132:	2b00      	cmp	r3, #0
 8019134:	bf0c      	ite	eq
 8019136:	2301      	moveq	r3, #1
 8019138:	2300      	movne	r3, #0
 801913a:	b2db      	uxtb	r3, r3
 801913c:	2b00      	cmp	r3, #0
 801913e:	d013      	beq.n	8019168 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019140:	480b      	ldr	r0, [pc, #44]	; (8019170 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 8019142:	f003 ff05 	bl	801cf50 <__cxa_guard_acquire>
 8019146:	4603      	mov	r3, r0
 8019148:	2b00      	cmp	r3, #0
 801914a:	bf14      	ite	ne
 801914c:	2301      	movne	r3, #1
 801914e:	2300      	moveq	r3, #0
 8019150:	b2db      	uxtb	r3, r3
 8019152:	2b00      	cmp	r3, #0
 8019154:	d008      	beq.n	8019168 <_ZN23MockIgnoredExpectedCall8instanceEv+0x48>
 8019156:	4807      	ldr	r0, [pc, #28]	; (8019174 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
 8019158:	f7ff ffc8 	bl	80190ec <_ZN23MockIgnoredExpectedCallC1Ev>
 801915c:	4804      	ldr	r0, [pc, #16]	; (8019170 <_ZN23MockIgnoredExpectedCall8instanceEv+0x50>)
 801915e:	f003 ff03 	bl	801cf68 <__cxa_guard_release>
 8019162:	4805      	ldr	r0, [pc, #20]	; (8019178 <_ZN23MockIgnoredExpectedCall8instanceEv+0x58>)
 8019164:	f003 ff27 	bl	801cfb6 <atexit>
    return call;
 8019168:	4b02      	ldr	r3, [pc, #8]	; (8019174 <_ZN23MockIgnoredExpectedCall8instanceEv+0x54>)
}
 801916a:	4618      	mov	r0, r3
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	20000cd0 	.word	0x20000cd0
 8019174:	20000ccc 	.word	0x20000ccc
 8019178:	08019111 	.word	0x08019111

0801917c <_ZN23MockIgnoredExpectedCallD1Ev>:
 801917c:	b580      	push	{r7, lr}
 801917e:	b082      	sub	sp, #8
 8019180:	af00      	add	r7, sp, #0
 8019182:	6078      	str	r0, [r7, #4]
 8019184:	4a05      	ldr	r2, [pc, #20]	; (801919c <_ZN23MockIgnoredExpectedCallD1Ev+0x20>)
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	601a      	str	r2, [r3, #0]
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	4618      	mov	r0, r3
 801918e:	f7fe fc93 	bl	8017ab8 <_ZN16MockExpectedCallD1Ev>
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	4618      	mov	r0, r3
 8019196:	3708      	adds	r7, #8
 8019198:	46bd      	mov	sp, r7
 801919a:	bd80      	pop	{r7, pc}
 801919c:	08025284 	.word	0x08025284

080191a0 <_ZN23MockIgnoredExpectedCallD0Ev>:
 80191a0:	b580      	push	{r7, lr}
 80191a2:	b082      	sub	sp, #8
 80191a4:	af00      	add	r7, sp, #0
 80191a6:	6078      	str	r0, [r7, #4]
 80191a8:	6878      	ldr	r0, [r7, #4]
 80191aa:	f7ff ffe7 	bl	801917c <_ZN23MockIgnoredExpectedCallD1Ev>
 80191ae:	2104      	movs	r1, #4
 80191b0:	6878      	ldr	r0, [r7, #4]
 80191b2:	f7ee fc5d 	bl	8007a70 <_ZdlPvj>
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	4618      	mov	r0, r3
 80191ba:	3708      	adds	r7, #8
 80191bc:	46bd      	mov	sp, r7
 80191be:	bd80      	pop	{r7, pc}

080191c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>:
    class MockExpectedFunctionParameter : public MockNamedValue
 80191c0:	b580      	push	{r7, lr}
 80191c2:	b082      	sub	sp, #8
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
 80191c8:	4a05      	ldr	r2, [pc, #20]	; (80191e0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev+0x20>)
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	601a      	str	r2, [r3, #0]
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	4618      	mov	r0, r3
 80191d2:	f001 fd4b 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	4618      	mov	r0, r3
 80191da:	3708      	adds	r7, #8
 80191dc:	46bd      	mov	sp, r7
 80191de:	bd80      	pop	{r7, pc}
 80191e0:	08025424 	.word	0x08025424

080191e4 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD0Ev>:
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b082      	sub	sp, #8
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
 80191ec:	6878      	ldr	r0, [r7, #4]
 80191ee:	f7ff ffe7 	bl	80191c0 <_ZN23MockCheckedExpectedCall29MockExpectedFunctionParameterD1Ev>
 80191f2:	2138      	movs	r1, #56	; 0x38
 80191f4:	6878      	ldr	r0, [r7, #4]
 80191f6:	f7ee fc3b 	bl	8007a70 <_ZdlPvj>
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	4618      	mov	r0, r3
 80191fe:	3708      	adds	r7, #8
 8019200:	46bd      	mov	sp, r7
 8019202:	bd80      	pop	{r7, pc}

08019204 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>:
    {
    public:
        MockCheckedExpectedCall* expectedCall_;

        MockExpectedCallsListNode* next_;
        MockExpectedCallsListNode(MockCheckedExpectedCall* expectedCall)
 8019204:	b480      	push	{r7}
 8019206:	b083      	sub	sp, #12
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
 801920c:	6039      	str	r1, [r7, #0]
            : expectedCall_(expectedCall), next_(NULLPTR) {}
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	683a      	ldr	r2, [r7, #0]
 8019212:	601a      	str	r2, [r3, #0]
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2200      	movs	r2, #0
 8019218:	605a      	str	r2, [r3, #4]
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	4618      	mov	r0, r3
 801921e:	370c      	adds	r7, #12
 8019220:	46bd      	mov	sp, r7
 8019222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019226:	4770      	bx	lr

08019228 <_ZN21MockExpectedCallsListC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTestExt/MockExpectedCallsList.h"
#include "CppUTestExt/MockCheckedExpectedCall.h"

MockExpectedCallsList::MockExpectedCallsList() : head_(NULLPTR)
 8019228:	b480      	push	{r7}
 801922a:	b083      	sub	sp, #12
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
 8019230:	4a06      	ldr	r2, [pc, #24]	; (801924c <_ZN21MockExpectedCallsListC1Ev+0x24>)
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	601a      	str	r2, [r3, #0]
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	2200      	movs	r2, #0
 801923a:	605a      	str	r2, [r3, #4]
{
}
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	4618      	mov	r0, r3
 8019240:	370c      	adds	r7, #12
 8019242:	46bd      	mov	sp, r7
 8019244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019248:	4770      	bx	lr
 801924a:	bf00      	nop
 801924c:	08025578 	.word	0x08025578

08019250 <_ZN21MockExpectedCallsListD1Ev>:

MockExpectedCallsList::~MockExpectedCallsList()
 8019250:	b580      	push	{r7, lr}
 8019252:	b084      	sub	sp, #16
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
 8019258:	4a0d      	ldr	r2, [pc, #52]	; (8019290 <_ZN21MockExpectedCallsListD1Ev+0x40>)
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	601a      	str	r2, [r3, #0]
{
    while (head_) {
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	685b      	ldr	r3, [r3, #4]
 8019262:	2b00      	cmp	r3, #0
 8019264:	d00f      	beq.n	8019286 <_ZN21MockExpectedCallsListD1Ev+0x36>
        MockExpectedCallsListNode* next = head_->next_;
 8019266:	687b      	ldr	r3, [r7, #4]
 8019268:	685b      	ldr	r3, [r3, #4]
 801926a:	685b      	ldr	r3, [r3, #4]
 801926c:	60fb      	str	r3, [r7, #12]
        delete head_;
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	685b      	ldr	r3, [r3, #4]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d003      	beq.n	801927e <_ZN21MockExpectedCallsListD1Ev+0x2e>
 8019276:	2108      	movs	r1, #8
 8019278:	4618      	mov	r0, r3
 801927a:	f7ee fbf9 	bl	8007a70 <_ZdlPvj>
        head_ = next;
 801927e:	687b      	ldr	r3, [r7, #4]
 8019280:	68fa      	ldr	r2, [r7, #12]
 8019282:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019284:	e7eb      	b.n	801925e <_ZN21MockExpectedCallsListD1Ev+0xe>
    }
}
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	4618      	mov	r0, r3
 801928a:	3710      	adds	r7, #16
 801928c:	46bd      	mov	sp, r7
 801928e:	bd80      	pop	{r7, pc}
 8019290:	08025578 	.word	0x08025578

08019294 <_ZN21MockExpectedCallsListD0Ev>:
MockExpectedCallsList::~MockExpectedCallsList()
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
}
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7ff ffd7 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
 80192a2:	2108      	movs	r1, #8
 80192a4:	6878      	ldr	r0, [r7, #4]
 80192a6:	f7ee fbe3 	bl	8007a70 <_ZdlPvj>
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	4618      	mov	r0, r3
 80192ae:	3708      	adds	r7, #8
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}

080192b4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv>:

bool MockExpectedCallsList::hasCallsOutOfOrder() const
{
 80192b4:	b580      	push	{r7, lr}
 80192b6:	b084      	sub	sp, #16
 80192b8:	af00      	add	r7, sp, #0
 80192ba:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	685b      	ldr	r3, [r3, #4]
 80192c0:	60fb      	str	r3, [r7, #12]
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d011      	beq.n	80192ec <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x38>
        if (p->expectedCall_->isOutOfOrder())
 80192c8:	68fb      	ldr	r3, [r7, #12]
 80192ca:	681a      	ldr	r2, [r3, #0]
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	681b      	ldr	r3, [r3, #0]
 80192d2:	33d4      	adds	r3, #212	; 0xd4
 80192d4:	681b      	ldr	r3, [r3, #0]
 80192d6:	4610      	mov	r0, r2
 80192d8:	4798      	blx	r3
 80192da:	4603      	mov	r3, r0
 80192dc:	2b00      	cmp	r3, #0
 80192de:	d001      	beq.n	80192e4 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x30>
            return true;
 80192e0:	2301      	movs	r3, #1
 80192e2:	e004      	b.n	80192ee <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	685b      	ldr	r3, [r3, #4]
 80192e8:	60fb      	str	r3, [r7, #12]
 80192ea:	e7ea      	b.n	80192c2 <_ZNK21MockExpectedCallsList18hasCallsOutOfOrderEv+0xe>
    return false;
 80192ec:	2300      	movs	r3, #0
}
 80192ee:	4618      	mov	r0, r3
 80192f0:	3710      	adds	r7, #16
 80192f2:	46bd      	mov	sp, r7
 80192f4:	bd80      	pop	{r7, pc}

080192f6 <_ZNK21MockExpectedCallsList4sizeEv>:

unsigned int MockExpectedCallsList::size() const
{
 80192f6:	b480      	push	{r7}
 80192f8:	b085      	sub	sp, #20
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 80192fe:	2300      	movs	r3, #0
 8019300:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	60bb      	str	r3, [r7, #8]
 8019308:	68bb      	ldr	r3, [r7, #8]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d006      	beq.n	801931c <_ZNK21MockExpectedCallsList4sizeEv+0x26>
        count++;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	3301      	adds	r3, #1
 8019312:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	685b      	ldr	r3, [r3, #4]
 8019318:	60bb      	str	r3, [r7, #8]
 801931a:	e7f5      	b.n	8019308 <_ZNK21MockExpectedCallsList4sizeEv+0x12>
    return count;
 801931c:	68fb      	ldr	r3, [r7, #12]
}
 801931e:	4618      	mov	r0, r3
 8019320:	3714      	adds	r7, #20
 8019322:	46bd      	mov	sp, r7
 8019324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019328:	4770      	bx	lr

0801932a <_ZNK21MockExpectedCallsList7isEmptyEv>:

bool MockExpectedCallsList::isEmpty() const
{
 801932a:	b480      	push	{r7}
 801932c:	b083      	sub	sp, #12
 801932e:	af00      	add	r7, sp, #0
 8019330:	6078      	str	r0, [r7, #4]
    return head_ == NULLPTR;
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	685b      	ldr	r3, [r3, #4]
 8019336:	2b00      	cmp	r3, #0
 8019338:	bf0c      	ite	eq
 801933a:	2301      	moveq	r3, #1
 801933c:	2300      	movne	r3, #0
 801933e:	b2db      	uxtb	r3, r3
}
 8019340:	4618      	mov	r0, r3
 8019342:	370c      	adds	r7, #12
 8019344:	46bd      	mov	sp, r7
 8019346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801934a:	4770      	bx	lr

0801934c <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString>:

unsigned int MockExpectedCallsList::amountOfActualCallsFulfilledFor(const SimpleString& name) const
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b084      	sub	sp, #16
 8019350:	af00      	add	r7, sp, #0
 8019352:	6078      	str	r0, [r7, #4]
 8019354:	6039      	str	r1, [r7, #0]
    unsigned int count = 0;
 8019356:	2300      	movs	r3, #0
 8019358:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	685b      	ldr	r3, [r3, #4]
 801935e:	60bb      	str	r3, [r7, #8]
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d01d      	beq.n	80193a2 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x56>
        if (p->expectedCall_->relatesTo(name)) {
 8019366:	68bb      	ldr	r3, [r7, #8]
 8019368:	681a      	ldr	r2, [r3, #0]
 801936a:	68bb      	ldr	r3, [r7, #8]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	33b8      	adds	r3, #184	; 0xb8
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	6839      	ldr	r1, [r7, #0]
 8019376:	4610      	mov	r0, r2
 8019378:	4798      	blx	r3
 801937a:	4603      	mov	r3, r0
 801937c:	2b00      	cmp	r3, #0
 801937e:	d00c      	beq.n	801939a <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x4e>
            count += p->expectedCall_->getActualCallsFulfilled();
 8019380:	68bb      	ldr	r3, [r7, #8]
 8019382:	681a      	ldr	r2, [r3, #0]
 8019384:	68bb      	ldr	r3, [r7, #8]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	33f8      	adds	r3, #248	; 0xf8
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	4610      	mov	r0, r2
 8019390:	4798      	blx	r3
 8019392:	4602      	mov	r2, r0
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	4413      	add	r3, r2
 8019398:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	60bb      	str	r3, [r7, #8]
 80193a0:	e7de      	b.n	8019360 <_ZNK21MockExpectedCallsList31amountOfActualCallsFulfilledForERK12SimpleString+0x14>
        }
    }
    return count;
 80193a2:	68fb      	ldr	r3, [r7, #12]
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3710      	adds	r7, #16
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bd80      	pop	{r7, pc}

080193ac <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv>:

unsigned int MockExpectedCallsList::amountOfUnfulfilledExpectations() const
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b084      	sub	sp, #16
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
    unsigned int count = 0;
 80193b4:	2300      	movs	r3, #0
 80193b6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	685b      	ldr	r3, [r3, #4]
 80193bc:	60bb      	str	r3, [r7, #8]
 80193be:	68bb      	ldr	r3, [r7, #8]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d015      	beq.n	80193f0 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x44>
        if (! p->expectedCall_->isFulfilled()) count++;
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	681a      	ldr	r2, [r3, #0]
 80193c8:	68bb      	ldr	r3, [r7, #8]
 80193ca:	681b      	ldr	r3, [r3, #0]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	33c0      	adds	r3, #192	; 0xc0
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	4610      	mov	r0, r2
 80193d4:	4798      	blx	r3
 80193d6:	4603      	mov	r3, r0
 80193d8:	f083 0301 	eor.w	r3, r3, #1
 80193dc:	b2db      	uxtb	r3, r3
 80193de:	2b00      	cmp	r3, #0
 80193e0:	d002      	beq.n	80193e8 <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x3c>
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	3301      	adds	r3, #1
 80193e6:	60fb      	str	r3, [r7, #12]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80193e8:	68bb      	ldr	r3, [r7, #8]
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	60bb      	str	r3, [r7, #8]
 80193ee:	e7e6      	b.n	80193be <_ZNK21MockExpectedCallsList31amountOfUnfulfilledExpectationsEv+0x12>
    return count;
 80193f0:	68fb      	ldr	r3, [r7, #12]
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	3710      	adds	r7, #16
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}

080193fa <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv>:

bool MockExpectedCallsList::hasFinalizedMatchingExpectations() const
{
 80193fa:	b580      	push	{r7, lr}
 80193fc:	b084      	sub	sp, #16
 80193fe:	af00      	add	r7, sp, #0
 8019400:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	685b      	ldr	r3, [r3, #4]
 8019406:	60fb      	str	r3, [r7, #12]
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d011      	beq.n	8019432 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x38>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	681a      	ldr	r2, [r3, #0]
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	33c8      	adds	r3, #200	; 0xc8
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	4610      	mov	r0, r2
 801941e:	4798      	blx	r3
 8019420:	4603      	mov	r3, r0
 8019422:	2b00      	cmp	r3, #0
 8019424:	d001      	beq.n	801942a <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x30>
            return true;
 8019426:	2301      	movs	r3, #1
 8019428:	e004      	b.n	8019434 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0x3a>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	685b      	ldr	r3, [r3, #4]
 801942e:	60fb      	str	r3, [r7, #12]
 8019430:	e7ea      	b.n	8019408 <_ZNK21MockExpectedCallsList32hasFinalizedMatchingExpectationsEv+0xe>
        }
    }
    return false;
 8019432:	2300      	movs	r3, #0
}
 8019434:	4618      	mov	r0, r3
 8019436:	3710      	adds	r7, #16
 8019438:	46bd      	mov	sp, r7
 801943a:	bd80      	pop	{r7, pc}

0801943c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv>:

bool MockExpectedCallsList::hasUnfulfilledExpectations() const
{
 801943c:	b580      	push	{r7, lr}
 801943e:	b084      	sub	sp, #16
 8019440:	af00      	add	r7, sp, #0
 8019442:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	685b      	ldr	r3, [r3, #4]
 8019448:	60fb      	str	r3, [r7, #12]
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	2b00      	cmp	r3, #0
 801944e:	d014      	beq.n	801947a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x3e>
        if (!p->expectedCall_->isFulfilled()) {
 8019450:	68fb      	ldr	r3, [r7, #12]
 8019452:	681a      	ldr	r2, [r3, #0]
 8019454:	68fb      	ldr	r3, [r7, #12]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	33c0      	adds	r3, #192	; 0xc0
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	4610      	mov	r0, r2
 8019460:	4798      	blx	r3
 8019462:	4603      	mov	r3, r0
 8019464:	f083 0301 	eor.w	r3, r3, #1
 8019468:	b2db      	uxtb	r3, r3
 801946a:	2b00      	cmp	r3, #0
 801946c:	d001      	beq.n	8019472 <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x36>
            return true;
 801946e:	2301      	movs	r3, #1
 8019470:	e004      	b.n	801947c <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	60fb      	str	r3, [r7, #12]
 8019478:	e7e7      	b.n	801944a <_ZNK21MockExpectedCallsList26hasUnfulfilledExpectationsEv+0xe>
        }
    }
    return false;
 801947a:	2300      	movs	r3, #0
}
 801947c:	4618      	mov	r0, r3
 801947e:	3710      	adds	r7, #16
 8019480:	46bd      	mov	sp, r7
 8019482:	bd80      	pop	{r7, pc}

08019484 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString>:

bool MockExpectedCallsList::hasExpectationWithName(const SimpleString& name) const
{
 8019484:	b580      	push	{r7, lr}
 8019486:	b084      	sub	sp, #16
 8019488:	af00      	add	r7, sp, #0
 801948a:	6078      	str	r0, [r7, #4]
 801948c:	6039      	str	r1, [r7, #0]
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	685b      	ldr	r3, [r3, #4]
 8019492:	60fb      	str	r3, [r7, #12]
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d012      	beq.n	80194c0 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3c>
            if (p->expectedCall_->relatesTo(name))
 801949a:	68fb      	ldr	r3, [r7, #12]
 801949c:	681a      	ldr	r2, [r3, #0]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	681b      	ldr	r3, [r3, #0]
 80194a4:	33b8      	adds	r3, #184	; 0xb8
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	6839      	ldr	r1, [r7, #0]
 80194aa:	4610      	mov	r0, r2
 80194ac:	4798      	blx	r3
 80194ae:	4603      	mov	r3, r0
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d001      	beq.n	80194b8 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x34>
                return true;
 80194b4:	2301      	movs	r3, #1
 80194b6:	e004      	b.n	80194c2 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x3e>
        for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80194b8:	68fb      	ldr	r3, [r7, #12]
 80194ba:	685b      	ldr	r3, [r3, #4]
 80194bc:	60fb      	str	r3, [r7, #12]
 80194be:	e7e9      	b.n	8019494 <_ZNK21MockExpectedCallsList22hasExpectationWithNameERK12SimpleString+0x10>
    return false;
 80194c0:	2300      	movs	r3, #0
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	3710      	adds	r7, #16
 80194c6:	46bd      	mov	sp, r7
 80194c8:	bd80      	pop	{r7, pc}
	...

080194cc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall>:

void MockExpectedCallsList::addExpectedCall(MockCheckedExpectedCall* call)
{
 80194cc:	b590      	push	{r4, r7, lr}
 80194ce:	b085      	sub	sp, #20
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
 80194d4:	6039      	str	r1, [r7, #0]
    MockExpectedCallsListNode* newCall = new MockExpectedCallsListNode(call);
 80194d6:	2273      	movs	r2, #115	; 0x73
 80194d8:	4911      	ldr	r1, [pc, #68]	; (8019520 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x54>)
 80194da:	2008      	movs	r0, #8
 80194dc:	f7ee fab4 	bl	8007a48 <_ZnwjPKci>
 80194e0:	4604      	mov	r4, r0
 80194e2:	6839      	ldr	r1, [r7, #0]
 80194e4:	4620      	mov	r0, r4
 80194e6:	f7ff fe8d 	bl	8019204 <_ZN21MockExpectedCallsList25MockExpectedCallsListNodeC1EP23MockCheckedExpectedCall>
 80194ea:	60bc      	str	r4, [r7, #8]

    if (head_ == NULLPTR)
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	685b      	ldr	r3, [r3, #4]
 80194f0:	2b00      	cmp	r3, #0
 80194f2:	d103      	bne.n	80194fc <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x30>
        head_ = newCall;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	68ba      	ldr	r2, [r7, #8]
 80194f8:	605a      	str	r2, [r3, #4]
    else {
        MockExpectedCallsListNode* lastCall = head_;
        while (lastCall->next_) lastCall = lastCall->next_;
        lastCall->next_ = newCall;
    }
}
 80194fa:	e00d      	b.n	8019518 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x4c>
        MockExpectedCallsListNode* lastCall = head_;
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	685b      	ldr	r3, [r3, #4]
 8019500:	60fb      	str	r3, [r7, #12]
        while (lastCall->next_) lastCall = lastCall->next_;
 8019502:	68fb      	ldr	r3, [r7, #12]
 8019504:	685b      	ldr	r3, [r3, #4]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d003      	beq.n	8019512 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x46>
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	60fb      	str	r3, [r7, #12]
 8019510:	e7f7      	b.n	8019502 <_ZN21MockExpectedCallsList15addExpectedCallEP23MockCheckedExpectedCall+0x36>
        lastCall->next_ = newCall;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	68ba      	ldr	r2, [r7, #8]
 8019516:	605a      	str	r2, [r3, #4]
}
 8019518:	bf00      	nop
 801951a:	3714      	adds	r7, #20
 801951c:	46bd      	mov	sp, r7
 801951e:	bd90      	pop	{r4, r7, pc}
 8019520:	0802306c 	.word	0x0802306c

08019524 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_>:

void MockExpectedCallsList::addPotentiallyMatchingExpectations(const MockExpectedCallsList& list)
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b084      	sub	sp, #16
 8019528:	af00      	add	r7, sp, #0
 801952a:	6078      	str	r0, [r7, #4]
 801952c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 801952e:	683b      	ldr	r3, [r7, #0]
 8019530:	685b      	ldr	r3, [r3, #4]
 8019532:	60fb      	str	r3, [r7, #12]
 8019534:	68fb      	ldr	r3, [r7, #12]
 8019536:	2b00      	cmp	r3, #0
 8019538:	d018      	beq.n	801956c <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x48>
        if (p->expectedCall_->canMatchActualCalls())
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	681a      	ldr	r2, [r3, #0]
 801953e:	68fb      	ldr	r3, [r7, #12]
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	33c4      	adds	r3, #196	; 0xc4
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	4610      	mov	r0, r2
 801954a:	4798      	blx	r3
 801954c:	4603      	mov	r3, r0
 801954e:	2b00      	cmp	r3, #0
 8019550:	d008      	beq.n	8019564 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x40>
            addExpectedCall(p->expectedCall_);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	3330      	adds	r3, #48	; 0x30
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	68fa      	ldr	r2, [r7, #12]
 801955c:	6812      	ldr	r2, [r2, #0]
 801955e:	4611      	mov	r1, r2
 8019560:	6878      	ldr	r0, [r7, #4]
 8019562:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019564:	68fb      	ldr	r3, [r7, #12]
 8019566:	685b      	ldr	r3, [r3, #4]
 8019568:	60fb      	str	r3, [r7, #12]
 801956a:	e7e3      	b.n	8019534 <_ZN21MockExpectedCallsList34addPotentiallyMatchingExpectationsERKS_+0x10>
}
 801956c:	bf00      	nop
 801956e:	3710      	adds	r7, #16
 8019570:	46bd      	mov	sp, r7
 8019572:	bd80      	pop	{r7, pc}

08019574 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>:

void MockExpectedCallsList::addExpectationsRelatedTo(const SimpleString& name, const MockExpectedCallsList& list)
{
 8019574:	b580      	push	{r7, lr}
 8019576:	b086      	sub	sp, #24
 8019578:	af00      	add	r7, sp, #0
 801957a:	60f8      	str	r0, [r7, #12]
 801957c:	60b9      	str	r1, [r7, #8]
 801957e:	607a      	str	r2, [r7, #4]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	685b      	ldr	r3, [r3, #4]
 8019584:	617b      	str	r3, [r7, #20]
 8019586:	697b      	ldr	r3, [r7, #20]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d019      	beq.n	80195c0 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x4c>
        if (p->expectedCall_->relatesTo(name))
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	681a      	ldr	r2, [r3, #0]
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	33b8      	adds	r3, #184	; 0xb8
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	68b9      	ldr	r1, [r7, #8]
 801959c:	4610      	mov	r0, r2
 801959e:	4798      	blx	r3
 80195a0:	4603      	mov	r3, r0
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d008      	beq.n	80195b8 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x44>
            addExpectedCall(p->expectedCall_);
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	3330      	adds	r3, #48	; 0x30
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	697a      	ldr	r2, [r7, #20]
 80195b0:	6812      	ldr	r2, [r2, #0]
 80195b2:	4611      	mov	r1, r2
 80195b4:	68f8      	ldr	r0, [r7, #12]
 80195b6:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	617b      	str	r3, [r7, #20]
 80195be:	e7e2      	b.n	8019586 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_+0x12>
}
 80195c0:	bf00      	nop
 80195c2:	3718      	adds	r7, #24
 80195c4:	46bd      	mov	sp, r7
 80195c6:	bd80      	pop	{r7, pc}

080195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>:

void MockExpectedCallsList::addExpectations(const MockExpectedCallsList& list)
{
 80195c8:	b580      	push	{r7, lr}
 80195ca:	b084      	sub	sp, #16
 80195cc:	af00      	add	r7, sp, #0
 80195ce:	6078      	str	r0, [r7, #4]
 80195d0:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80195d2:	683b      	ldr	r3, [r7, #0]
 80195d4:	685b      	ldr	r3, [r3, #4]
 80195d6:	60fb      	str	r3, [r7, #12]
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d00c      	beq.n	80195f8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x30>
        addExpectedCall(p->expectedCall_);
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	3330      	adds	r3, #48	; 0x30
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	68fa      	ldr	r2, [r7, #12]
 80195e8:	6812      	ldr	r2, [r2, #0]
 80195ea:	4611      	mov	r1, r2
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = list.head_; p; p = p->next_)
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	685b      	ldr	r3, [r3, #4]
 80195f4:	60fb      	str	r3, [r7, #12]
 80195f6:	e7ef      	b.n	80195d8 <_ZN21MockExpectedCallsList15addExpectationsERKS_+0x10>
}
 80195f8:	bf00      	nop
 80195fa:	3710      	adds	r7, #16
 80195fc:	46bd      	mov	sp, r7
 80195fe:	bd80      	pop	{r7, pc}

08019600 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsRelatedTo(const SimpleString& name)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b084      	sub	sp, #16
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
 8019608:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801960a:	687b      	ldr	r3, [r7, #4]
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	60fb      	str	r3, [r7, #12]
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d016      	beq.n	8019644 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x44>
        if (! p->expectedCall_->relatesTo(name))
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	681a      	ldr	r2, [r3, #0]
 801961a:	68fb      	ldr	r3, [r7, #12]
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	33b8      	adds	r3, #184	; 0xb8
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	6839      	ldr	r1, [r7, #0]
 8019626:	4610      	mov	r0, r2
 8019628:	4798      	blx	r3
 801962a:	4603      	mov	r3, r0
 801962c:	f083 0301 	eor.w	r3, r3, #1
 8019630:	b2db      	uxtb	r3, r3
 8019632:	2b00      	cmp	r3, #0
 8019634:	d002      	beq.n	801963c <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019636:	68fb      	ldr	r3, [r7, #12]
 8019638:	2200      	movs	r2, #0
 801963a:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801963c:	68fb      	ldr	r3, [r7, #12]
 801963e:	685b      	ldr	r3, [r3, #4]
 8019640:	60fb      	str	r3, [r7, #12]
 8019642:	e7e5      	b.n	8019610 <_ZN21MockExpectedCallsList29onlyKeepExpectationsRelatedToERK12SimpleString+0x10>

    pruneEmptyNodeFromList();
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	3388      	adds	r3, #136	; 0x88
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	6878      	ldr	r0, [r7, #4]
 801964e:	4798      	blx	r3
}
 8019650:	bf00      	nop
 8019652:	3710      	adds	r7, #16
 8019654:	46bd      	mov	sp, r7
 8019656:	bd80      	pop	{r7, pc}

08019658 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>:

void MockExpectedCallsList::onlyKeepOutOfOrderExpectations()
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	685b      	ldr	r3, [r3, #4]
 8019664:	60fb      	str	r3, [r7, #12]
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	2b00      	cmp	r3, #0
 801966a:	d015      	beq.n	8019698 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x40>
        if (!p->expectedCall_->isOutOfOrder())
 801966c:	68fb      	ldr	r3, [r7, #12]
 801966e:	681a      	ldr	r2, [r3, #0]
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	681b      	ldr	r3, [r3, #0]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	33d4      	adds	r3, #212	; 0xd4
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	4610      	mov	r0, r2
 801967c:	4798      	blx	r3
 801967e:	4603      	mov	r3, r0
 8019680:	f083 0301 	eor.w	r3, r3, #1
 8019684:	b2db      	uxtb	r3, r3
 8019686:	2b00      	cmp	r3, #0
 8019688:	d002      	beq.n	8019690 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0x38>
            p->expectedCall_ = NULLPTR;
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	2200      	movs	r2, #0
 801968e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	685b      	ldr	r3, [r3, #4]
 8019694:	60fb      	str	r3, [r7, #12]
 8019696:	e7e6      	b.n	8019666 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv+0xe>
    pruneEmptyNodeFromList();
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	681b      	ldr	r3, [r3, #0]
 801969c:	3388      	adds	r3, #136	; 0x88
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	6878      	ldr	r0, [r7, #4]
 80196a2:	4798      	blx	r3
}
 80196a4:	bf00      	nop
 80196a6:	3710      	adds	r7, #16
 80196a8:	46bd      	mov	sp, r7
 80196aa:	bd80      	pop	{r7, pc}

080196ac <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv>:

void MockExpectedCallsList::onlyKeepUnmatchingExpectations()
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b084      	sub	sp, #16
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	60fb      	str	r3, [r7, #12]
 80196ba:	68fb      	ldr	r3, [r7, #12]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d01b      	beq.n	80196f8 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x4c>
        if (p->expectedCall_->isMatchingActualCallAndFinalized())
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	681a      	ldr	r2, [r3, #0]
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	33c8      	adds	r3, #200	; 0xc8
 80196cc:	681b      	ldr	r3, [r3, #0]
 80196ce:	4610      	mov	r0, r2
 80196d0:	4798      	blx	r3
 80196d2:	4603      	mov	r3, r0
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d00b      	beq.n	80196f0 <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0x44>
        {
            p->expectedCall_->resetActualCallMatchingState();
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	681a      	ldr	r2, [r3, #0]
 80196dc:	68fb      	ldr	r3, [r7, #12]
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	33ec      	adds	r3, #236	; 0xec
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	4610      	mov	r0, r2
 80196e8:	4798      	blx	r3
            p->expectedCall_ = NULLPTR;
 80196ea:	68fb      	ldr	r3, [r7, #12]
 80196ec:	2200      	movs	r2, #0
 80196ee:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	685b      	ldr	r3, [r3, #4]
 80196f4:	60fb      	str	r3, [r7, #12]
 80196f6:	e7e0      	b.n	80196ba <_ZN21MockExpectedCallsList30onlyKeepUnmatchingExpectationsEv+0xe>
        }

    pruneEmptyNodeFromList();
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	681b      	ldr	r3, [r3, #0]
 80196fc:	3388      	adds	r3, #136	; 0x88
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	6878      	ldr	r0, [r7, #4]
 8019702:	4798      	blx	r3
}
 8019704:	bf00      	nop
 8019706:	3710      	adds	r7, #16
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}

0801970c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameterName(const SimpleString& name)
{
 801970c:	b580      	push	{r7, lr}
 801970e:	b084      	sub	sp, #16
 8019710:	af00      	add	r7, sp, #0
 8019712:	6078      	str	r0, [r7, #4]
 8019714:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	685b      	ldr	r3, [r3, #4]
 801971a:	60fb      	str	r3, [r7, #12]
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d016      	beq.n	8019750 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasInputParameterWithName(name))
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	681a      	ldr	r2, [r3, #0]
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	33a8      	adds	r3, #168	; 0xa8
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	6839      	ldr	r1, [r7, #0]
 8019732:	4610      	mov	r0, r2
 8019734:	4798      	blx	r3
 8019736:	4603      	mov	r3, r0
 8019738:	f083 0301 	eor.w	r3, r3, #1
 801973c:	b2db      	uxtb	r3, r3
 801973e:	2b00      	cmp	r3, #0
 8019740:	d002      	beq.n	8019748 <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	2200      	movs	r2, #0
 8019746:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019748:	68fb      	ldr	r3, [r7, #12]
 801974a:	685b      	ldr	r3, [r3, #4]
 801974c:	60fb      	str	r3, [r7, #12]
 801974e:	e7e5      	b.n	801971c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	3388      	adds	r3, #136	; 0x88
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	6878      	ldr	r0, [r7, #4]
 801975a:	4798      	blx	r3
}
 801975c:	bf00      	nop
 801975e:	3710      	adds	r7, #16
 8019760:	46bd      	mov	sp, r7
 8019762:	bd80      	pop	{r7, pc}

08019764 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameterName(const SimpleString& name)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b084      	sub	sp, #16
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	685b      	ldr	r3, [r3, #4]
 8019772:	60fb      	str	r3, [r7, #12]
 8019774:	68fb      	ldr	r3, [r7, #12]
 8019776:	2b00      	cmp	r3, #0
 8019778:	d016      	beq.n	80197a8 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x44>
        if (! p->expectedCall_->hasOutputParameterWithName(name))
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	681a      	ldr	r2, [r3, #0]
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	33b0      	adds	r3, #176	; 0xb0
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	6839      	ldr	r1, [r7, #0]
 801978a:	4610      	mov	r0, r2
 801978c:	4798      	blx	r3
 801978e:	4603      	mov	r3, r0
 8019790:	f083 0301 	eor.w	r3, r3, #1
 8019794:	b2db      	uxtb	r3, r3
 8019796:	2b00      	cmp	r3, #0
 8019798:	d002      	beq.n	80197a0 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x3c>
            p->expectedCall_ = NULLPTR;
 801979a:	68fb      	ldr	r3, [r7, #12]
 801979c:	2200      	movs	r2, #0
 801979e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	685b      	ldr	r3, [r3, #4]
 80197a4:	60fb      	str	r3, [r7, #12]
 80197a6:	e7e5      	b.n	8019774 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString+0x10>
    pruneEmptyNodeFromList();
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	3388      	adds	r3, #136	; 0x88
 80197ae:	681b      	ldr	r3, [r3, #0]
 80197b0:	6878      	ldr	r0, [r7, #4]
 80197b2:	4798      	blx	r3
}
 80197b4:	bf00      	nop
 80197b6:	3710      	adds	r7, #16
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd80      	pop	{r7, pc}

080197bc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithInputParameter(const MockNamedValue& parameter)
{
 80197bc:	b580      	push	{r7, lr}
 80197be:	b084      	sub	sp, #16
 80197c0:	af00      	add	r7, sp, #0
 80197c2:	6078      	str	r0, [r7, #4]
 80197c4:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	685b      	ldr	r3, [r3, #4]
 80197ca:	60fb      	str	r3, [r7, #12]
 80197cc:	68fb      	ldr	r3, [r7, #12]
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d016      	beq.n	8019800 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasInputParameter(parameter))
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	681a      	ldr	r2, [r3, #0]
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	33ac      	adds	r3, #172	; 0xac
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	6839      	ldr	r1, [r7, #0]
 80197e2:	4610      	mov	r0, r2
 80197e4:	4798      	blx	r3
 80197e6:	4603      	mov	r3, r0
 80197e8:	f083 0301 	eor.w	r3, r3, #1
 80197ec:	b2db      	uxtb	r3, r3
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d002      	beq.n	80197f8 <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 80197f2:	68fb      	ldr	r3, [r7, #12]
 80197f4:	2200      	movs	r2, #0
 80197f6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	685b      	ldr	r3, [r3, #4]
 80197fc:	60fb      	str	r3, [r7, #12]
 80197fe:	e7e5      	b.n	80197cc <_ZN21MockExpectedCallsList38onlyKeepExpectationsWithInputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019800:	687b      	ldr	r3, [r7, #4]
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	3388      	adds	r3, #136	; 0x88
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	6878      	ldr	r0, [r7, #4]
 801980a:	4798      	blx	r3
}
 801980c:	bf00      	nop
 801980e:	3710      	adds	r7, #16
 8019810:	46bd      	mov	sp, r7
 8019812:	bd80      	pop	{r7, pc}

08019814 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue>:

void MockExpectedCallsList::onlyKeepExpectationsWithOutputParameter(const MockNamedValue& parameter)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	b084      	sub	sp, #16
 8019818:	af00      	add	r7, sp, #0
 801981a:	6078      	str	r0, [r7, #4]
 801981c:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	685b      	ldr	r3, [r3, #4]
 8019822:	60fb      	str	r3, [r7, #12]
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d016      	beq.n	8019858 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x44>
        if (! p->expectedCall_->hasOutputParameter(parameter))
 801982a:	68fb      	ldr	r3, [r7, #12]
 801982c:	681a      	ldr	r2, [r3, #0]
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	681b      	ldr	r3, [r3, #0]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	33b4      	adds	r3, #180	; 0xb4
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	6839      	ldr	r1, [r7, #0]
 801983a:	4610      	mov	r0, r2
 801983c:	4798      	blx	r3
 801983e:	4603      	mov	r3, r0
 8019840:	f083 0301 	eor.w	r3, r3, #1
 8019844:	b2db      	uxtb	r3, r3
 8019846:	2b00      	cmp	r3, #0
 8019848:	d002      	beq.n	8019850 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x3c>
            p->expectedCall_ = NULLPTR;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	2200      	movs	r2, #0
 801984e:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	685b      	ldr	r3, [r3, #4]
 8019854:	60fb      	str	r3, [r7, #12]
 8019856:	e7e5      	b.n	8019824 <_ZN21MockExpectedCallsList39onlyKeepExpectationsWithOutputParameterERK14MockNamedValue+0x10>
    pruneEmptyNodeFromList();
 8019858:	687b      	ldr	r3, [r7, #4]
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	3388      	adds	r3, #136	; 0x88
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	6878      	ldr	r0, [r7, #4]
 8019862:	4798      	blx	r3
}
 8019864:	bf00      	nop
 8019866:	3710      	adds	r7, #16
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}

0801986c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv>:

void MockExpectedCallsList::onlyKeepExpectationsOnObject(const void* objectPtr)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b084      	sub	sp, #16
 8019870:	af00      	add	r7, sp, #0
 8019872:	6078      	str	r0, [r7, #4]
 8019874:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	685b      	ldr	r3, [r3, #4]
 801987a:	60fb      	str	r3, [r7, #12]
 801987c:	68fb      	ldr	r3, [r7, #12]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d016      	beq.n	80198b0 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x44>
        if (! p->expectedCall_->relatesToObject(objectPtr))
 8019882:	68fb      	ldr	r3, [r7, #12]
 8019884:	681a      	ldr	r2, [r3, #0]
 8019886:	68fb      	ldr	r3, [r7, #12]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	33bc      	adds	r3, #188	; 0xbc
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	6839      	ldr	r1, [r7, #0]
 8019892:	4610      	mov	r0, r2
 8019894:	4798      	blx	r3
 8019896:	4603      	mov	r3, r0
 8019898:	f083 0301 	eor.w	r3, r3, #1
 801989c:	b2db      	uxtb	r3, r3
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d002      	beq.n	80198a8 <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x3c>
            p->expectedCall_ = NULLPTR;
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	2200      	movs	r2, #0
 80198a6:	601a      	str	r2, [r3, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	60fb      	str	r3, [r7, #12]
 80198ae:	e7e5      	b.n	801987c <_ZN21MockExpectedCallsList28onlyKeepExpectationsOnObjectEPKv+0x10>
    pruneEmptyNodeFromList();
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	3388      	adds	r3, #136	; 0x88
 80198b6:	681b      	ldr	r3, [r3, #0]
 80198b8:	6878      	ldr	r0, [r7, #4]
 80198ba:	4798      	blx	r3
}
 80198bc:	bf00      	nop
 80198be:	3710      	adds	r7, #16
 80198c0:	46bd      	mov	sp, r7
 80198c2:	bd80      	pop	{r7, pc}

080198c4 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstFinalizedMatchingExpectation()
{
 80198c4:	b580      	push	{r7, lr}
 80198c6:	b084      	sub	sp, #16
 80198c8:	af00      	add	r7, sp, #0
 80198ca:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	685b      	ldr	r3, [r3, #4]
 80198d0:	60fb      	str	r3, [r7, #12]
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	d01d      	beq.n	8019914 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCallAndFinalized()) {
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	681a      	ldr	r2, [r3, #0]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	33c8      	adds	r3, #200	; 0xc8
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	4610      	mov	r0, r2
 80198e8:	4798      	blx	r3
 80198ea:	4603      	mov	r3, r0
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d00d      	beq.n	801990c <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2200      	movs	r2, #0
 80198fa:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	3388      	adds	r3, #136	; 0x88
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	4798      	blx	r3
            return matchingCall;
 8019908:	68bb      	ldr	r3, [r7, #8]
 801990a:	e004      	b.n	8019916 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	685b      	ldr	r3, [r3, #4]
 8019910:	60fb      	str	r3, [r7, #12]
 8019912:	e7de      	b.n	80198d2 <_ZN21MockExpectedCallsList39removeFirstFinalizedMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019914:	2300      	movs	r3, #0
}
 8019916:	4618      	mov	r0, r3
 8019918:	3710      	adds	r7, #16
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}

0801991e <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::getFirstMatchingExpectation()
{
 801991e:	b580      	push	{r7, lr}
 8019920:	b084      	sub	sp, #16
 8019922:	af00      	add	r7, sp, #0
 8019924:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	685b      	ldr	r3, [r3, #4]
 801992a:	60fb      	str	r3, [r7, #12]
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	2b00      	cmp	r3, #0
 8019930:	d012      	beq.n	8019958 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3a>
        if (p->expectedCall_->isMatchingActualCall()) {
 8019932:	68fb      	ldr	r3, [r7, #12]
 8019934:	681a      	ldr	r2, [r3, #0]
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	681b      	ldr	r3, [r3, #0]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	33cc      	adds	r3, #204	; 0xcc
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	4610      	mov	r0, r2
 8019942:	4798      	blx	r3
 8019944:	4603      	mov	r3, r0
 8019946:	2b00      	cmp	r3, #0
 8019948:	d002      	beq.n	8019950 <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x32>
            return p->expectedCall_;
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	e004      	b.n	801995a <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0x3c>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	685b      	ldr	r3, [r3, #4]
 8019954:	60fb      	str	r3, [r7, #12]
 8019956:	e7e9      	b.n	801992c <_ZN21MockExpectedCallsList27getFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 8019958:	2300      	movs	r3, #0
}
 801995a:	4618      	mov	r0, r3
 801995c:	3710      	adds	r7, #16
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}

08019962 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv>:

MockCheckedExpectedCall* MockExpectedCallsList::removeFirstMatchingExpectation()
{
 8019962:	b580      	push	{r7, lr}
 8019964:	b084      	sub	sp, #16
 8019966:	af00      	add	r7, sp, #0
 8019968:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	685b      	ldr	r3, [r3, #4]
 801996e:	60fb      	str	r3, [r7, #12]
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d01d      	beq.n	80199b2 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x50>
        if (p->expectedCall_->isMatchingActualCall()) {
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	681a      	ldr	r2, [r3, #0]
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	33cc      	adds	r3, #204	; 0xcc
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4610      	mov	r0, r2
 8019986:	4798      	blx	r3
 8019988:	4603      	mov	r3, r0
 801998a:	2b00      	cmp	r3, #0
 801998c:	d00d      	beq.n	80199aa <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x48>
            MockCheckedExpectedCall* matchingCall = p->expectedCall_;
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	60bb      	str	r3, [r7, #8]
            p->expectedCall_ = NULLPTR;
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	2200      	movs	r2, #0
 8019998:	601a      	str	r2, [r3, #0]
            pruneEmptyNodeFromList();
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	3388      	adds	r3, #136	; 0x88
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	6878      	ldr	r0, [r7, #4]
 80199a4:	4798      	blx	r3
            return matchingCall;
 80199a6:	68bb      	ldr	r3, [r7, #8]
 80199a8:	e004      	b.n	80199b4 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0x52>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_) {
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	685b      	ldr	r3, [r3, #4]
 80199ae:	60fb      	str	r3, [r7, #12]
 80199b0:	e7de      	b.n	8019970 <_ZN21MockExpectedCallsList30removeFirstMatchingExpectationEv+0xe>
        }
    }
    return NULLPTR;
 80199b2:	2300      	movs	r3, #0
}
 80199b4:	4618      	mov	r0, r3
 80199b6:	3710      	adds	r7, #16
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}

080199bc <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv>:

void MockExpectedCallsList::pruneEmptyNodeFromList()
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b086      	sub	sp, #24
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
    MockExpectedCallsListNode* current = head_;
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	685b      	ldr	r3, [r3, #4]
 80199c8:	617b      	str	r3, [r7, #20]
    MockExpectedCallsListNode* previous = NULLPTR;
 80199ca:	2300      	movs	r3, #0
 80199cc:	613b      	str	r3, [r7, #16]
    MockExpectedCallsListNode* toBeDeleted = NULLPTR;
 80199ce:	2300      	movs	r3, #0
 80199d0:	60fb      	str	r3, [r7, #12]

    while (current) {
 80199d2:	697b      	ldr	r3, [r7, #20]
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	d024      	beq.n	8019a22 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x66>
        if (current->expectedCall_ == NULLPTR) {
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d11a      	bne.n	8019a16 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x5a>
            toBeDeleted = current;
 80199e0:	697b      	ldr	r3, [r7, #20]
 80199e2:	60fb      	str	r3, [r7, #12]
            if (previous == NULLPTR)
 80199e4:	693b      	ldr	r3, [r7, #16]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d106      	bne.n	80199f8 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x3c>
                head_ = current = current->next_;
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	685b      	ldr	r3, [r3, #4]
 80199ee:	617b      	str	r3, [r7, #20]
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	697a      	ldr	r2, [r7, #20]
 80199f4:	605a      	str	r2, [r3, #4]
 80199f6:	e006      	b.n	8019a06 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x4a>
            else
                current = previous->next_ = current->next_;
 80199f8:	697b      	ldr	r3, [r7, #20]
 80199fa:	685a      	ldr	r2, [r3, #4]
 80199fc:	693b      	ldr	r3, [r7, #16]
 80199fe:	605a      	str	r2, [r3, #4]
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	685b      	ldr	r3, [r3, #4]
 8019a04:	617b      	str	r3, [r7, #20]
            delete toBeDeleted;
 8019a06:	68fb      	ldr	r3, [r7, #12]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d0e2      	beq.n	80199d2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
 8019a0c:	2108      	movs	r1, #8
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7ee f82e 	bl	8007a70 <_ZdlPvj>
 8019a14:	e7dd      	b.n	80199d2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
        else {
            previous = current;
 8019a16:	697b      	ldr	r3, [r7, #20]
 8019a18:	613b      	str	r3, [r7, #16]
            current = current->next_;
 8019a1a:	697b      	ldr	r3, [r7, #20]
 8019a1c:	685b      	ldr	r3, [r3, #4]
 8019a1e:	617b      	str	r3, [r7, #20]
    while (current) {
 8019a20:	e7d7      	b.n	80199d2 <_ZN21MockExpectedCallsList22pruneEmptyNodeFromListEv+0x16>
        }
    }
}
 8019a22:	bf00      	nop
 8019a24:	3718      	adds	r7, #24
 8019a26:	46bd      	mov	sp, r7
 8019a28:	bd80      	pop	{r7, pc}

08019a2a <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv>:

void MockExpectedCallsList::deleteAllExpectationsAndClearList()
{
 8019a2a:	b580      	push	{r7, lr}
 8019a2c:	b084      	sub	sp, #16
 8019a2e:	af00      	add	r7, sp, #0
 8019a30:	6078      	str	r0, [r7, #4]
    while (head_) {
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	685b      	ldr	r3, [r3, #4]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d019      	beq.n	8019a6e <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x44>
        MockExpectedCallsListNode* next = head_->next_;
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	685b      	ldr	r3, [r3, #4]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	60fb      	str	r3, [r7, #12]
        delete head_->expectedCall_;
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	685b      	ldr	r3, [r3, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d004      	beq.n	8019a56 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x2c>
 8019a4c:	681a      	ldr	r2, [r3, #0]
 8019a4e:	3204      	adds	r2, #4
 8019a50:	6812      	ldr	r2, [r2, #0]
 8019a52:	4618      	mov	r0, r3
 8019a54:	4790      	blx	r2
        delete head_;
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d003      	beq.n	8019a66 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x3c>
 8019a5e:	2108      	movs	r1, #8
 8019a60:	4618      	mov	r0, r3
 8019a62:	f7ee f805 	bl	8007a70 <_ZdlPvj>
        head_ = next;
 8019a66:	687b      	ldr	r3, [r7, #4]
 8019a68:	68fa      	ldr	r2, [r7, #12]
 8019a6a:	605a      	str	r2, [r3, #4]
    while (head_) {
 8019a6c:	e7e1      	b.n	8019a32 <_ZN21MockExpectedCallsList33deleteAllExpectationsAndClearListEv+0x8>
    }
}
 8019a6e:	bf00      	nop
 8019a70:	3710      	adds	r7, #16
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}

08019a76 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv>:

void MockExpectedCallsList::resetActualCallMatchingState()
{
 8019a76:	b580      	push	{r7, lr}
 8019a78:	b084      	sub	sp, #16
 8019a7a:	af00      	add	r7, sp, #0
 8019a7c:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a7e:	687b      	ldr	r3, [r7, #4]
 8019a80:	685b      	ldr	r3, [r3, #4]
 8019a82:	60fb      	str	r3, [r7, #12]
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	2b00      	cmp	r3, #0
 8019a88:	d00c      	beq.n	8019aa4 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0x2e>
        p->expectedCall_->resetActualCallMatchingState();
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	681a      	ldr	r2, [r3, #0]
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	33ec      	adds	r3, #236	; 0xec
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	4610      	mov	r0, r2
 8019a9a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	685b      	ldr	r3, [r3, #4]
 8019aa0:	60fb      	str	r3, [r7, #12]
 8019aa2:	e7ef      	b.n	8019a84 <_ZN21MockExpectedCallsList28resetActualCallMatchingStateEv+0xe>
}
 8019aa4:	bf00      	nop
 8019aa6:	3710      	adds	r7, #16
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <_ZN21MockExpectedCallsList17wasPassedToObjectEv>:

void MockExpectedCallsList::wasPassedToObject()
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b084      	sub	sp, #16
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	685b      	ldr	r3, [r3, #4]
 8019ab8:	60fb      	str	r3, [r7, #12]
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d00c      	beq.n	8019ada <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0x2e>
        p->expectedCall_->wasPassedToObject();
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	681a      	ldr	r2, [r3, #0]
 8019ac4:	68fb      	ldr	r3, [r7, #12]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	33e8      	adds	r3, #232	; 0xe8
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	4610      	mov	r0, r2
 8019ad0:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	685b      	ldr	r3, [r3, #4]
 8019ad6:	60fb      	str	r3, [r7, #12]
 8019ad8:	e7ef      	b.n	8019aba <_ZN21MockExpectedCallsList17wasPassedToObjectEv+0xe>
}
 8019ada:	bf00      	nop
 8019adc:	3710      	adds	r7, #16
 8019ade:	46bd      	mov	sp, r7
 8019ae0:	bd80      	pop	{r7, pc}

08019ae2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString>:


void MockExpectedCallsList::parameterWasPassed(const SimpleString& parameterName)
{
 8019ae2:	b580      	push	{r7, lr}
 8019ae4:	b084      	sub	sp, #16
 8019ae6:	af00      	add	r7, sp, #0
 8019ae8:	6078      	str	r0, [r7, #4]
 8019aea:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	60fb      	str	r3, [r7, #12]
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d00d      	beq.n	8019b14 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->inputParameterWasPassed(parameterName);
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	681a      	ldr	r2, [r3, #0]
 8019afc:	68fb      	ldr	r3, [r7, #12]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	33dc      	adds	r3, #220	; 0xdc
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	6839      	ldr	r1, [r7, #0]
 8019b08:	4610      	mov	r0, r2
 8019b0a:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	685b      	ldr	r3, [r3, #4]
 8019b10:	60fb      	str	r3, [r7, #12]
 8019b12:	e7ee      	b.n	8019af2 <_ZN21MockExpectedCallsList18parameterWasPassedERK12SimpleString+0x10>
}
 8019b14:	bf00      	nop
 8019b16:	3710      	adds	r7, #16
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}

08019b1c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString>:

void MockExpectedCallsList::outputParameterWasPassed(const SimpleString& parameterName)
{
 8019b1c:	b580      	push	{r7, lr}
 8019b1e:	b084      	sub	sp, #16
 8019b20:	af00      	add	r7, sp, #0
 8019b22:	6078      	str	r0, [r7, #4]
 8019b24:	6039      	str	r1, [r7, #0]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	60fb      	str	r3, [r7, #12]
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d00d      	beq.n	8019b4e <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x32>
        p->expectedCall_->outputParameterWasPassed(parameterName);
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	681a      	ldr	r2, [r3, #0]
 8019b36:	68fb      	ldr	r3, [r7, #12]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	681b      	ldr	r3, [r3, #0]
 8019b3c:	33e0      	adds	r3, #224	; 0xe0
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	6839      	ldr	r1, [r7, #0]
 8019b42:	4610      	mov	r0, r2
 8019b44:	4798      	blx	r3
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019b46:	68fb      	ldr	r3, [r7, #12]
 8019b48:	685b      	ldr	r3, [r3, #4]
 8019b4a:	60fb      	str	r3, [r7, #12]
 8019b4c:	e7ee      	b.n	8019b2c <_ZN21MockExpectedCallsList24outputParameterWasPassedERK12SimpleString+0x10>
}
 8019b4e:	bf00      	nop
 8019b50:	3710      	adds	r7, #16
 8019b52:	46bd      	mov	sp, r7
 8019b54:	bd80      	pop	{r7, pc}
	...

08019b58 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>:

static SimpleString stringOrNoneTextWhenEmpty(const SimpleString& inputString, const SimpleString& linePrefix)
{
 8019b58:	b590      	push	{r4, r7, lr}
 8019b5a:	b087      	sub	sp, #28
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	60f8      	str	r0, [r7, #12]
 8019b60:	60b9      	str	r1, [r7, #8]
 8019b62:	607a      	str	r2, [r7, #4]
    SimpleString str = inputString;
 8019b64:	68b9      	ldr	r1, [r7, #8]
 8019b66:	68f8      	ldr	r0, [r7, #12]
 8019b68:	f7f0 fb85 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
    if (str == "") {
 8019b6c:	f107 0310 	add.w	r3, r7, #16
 8019b70:	490f      	ldr	r1, [pc, #60]	; (8019bb0 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x58>)
 8019b72:	4618      	mov	r0, r3
 8019b74:	f7f0 fb2b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8019b78:	f107 0310 	add.w	r3, r7, #16
 8019b7c:	4619      	mov	r1, r3
 8019b7e:	68f8      	ldr	r0, [r7, #12]
 8019b80:	f7f0 fee9 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 8019b84:	4603      	mov	r3, r0
 8019b86:	461c      	mov	r4, r3
 8019b88:	f107 0310 	add.w	r3, r7, #16
 8019b8c:	4618      	mov	r0, r3
 8019b8e:	f7f0 fed6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019b92:	2c00      	cmp	r4, #0
 8019b94:	d007      	beq.n	8019ba6 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x4e>
        str += linePrefix;
 8019b96:	6879      	ldr	r1, [r7, #4]
 8019b98:	68f8      	ldr	r0, [r7, #12]
 8019b9a:	f7f0 ff4d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        str += "<none>";
 8019b9e:	4905      	ldr	r1, [pc, #20]	; (8019bb4 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_+0x5c>)
 8019ba0:	68f8      	ldr	r0, [r7, #12]
 8019ba2:	f7f0 ff5b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }
    return str;
 8019ba6:	bf00      	nop
}
 8019ba8:	68f8      	ldr	r0, [r7, #12]
 8019baa:	371c      	adds	r7, #28
 8019bac:	46bd      	mov	sp, r7
 8019bae:	bd90      	pop	{r4, r7, pc}
 8019bb0:	08023090 	.word	0x08023090
 8019bb4:	08023094 	.word	0x08023094

08019bb8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>:

static SimpleString appendStringOnANewLine(const SimpleString& inputString, const SimpleString& linePrefix, const SimpleString& stringToAppend)
{
 8019bb8:	b590      	push	{r4, r7, lr}
 8019bba:	b087      	sub	sp, #28
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	60f8      	str	r0, [r7, #12]
 8019bc0:	60b9      	str	r1, [r7, #8]
 8019bc2:	607a      	str	r2, [r7, #4]
 8019bc4:	603b      	str	r3, [r7, #0]
    SimpleString str = inputString;
 8019bc6:	68b9      	ldr	r1, [r7, #8]
 8019bc8:	68f8      	ldr	r0, [r7, #12]
 8019bca:	f7f0 fb54 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
    if (str != "") str += "\n";
 8019bce:	f107 0310 	add.w	r3, r7, #16
 8019bd2:	4912      	ldr	r1, [pc, #72]	; (8019c1c <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x64>)
 8019bd4:	4618      	mov	r0, r3
 8019bd6:	f7f0 fafa 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8019bda:	f107 0310 	add.w	r3, r7, #16
 8019bde:	4619      	mov	r1, r3
 8019be0:	68f8      	ldr	r0, [r7, #12]
 8019be2:	f7f0 fefd 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 8019be6:	4603      	mov	r3, r0
 8019be8:	461c      	mov	r4, r3
 8019bea:	f107 0310 	add.w	r3, r7, #16
 8019bee:	4618      	mov	r0, r3
 8019bf0:	f7f0 fea5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019bf4:	2c00      	cmp	r4, #0
 8019bf6:	d003      	beq.n	8019c00 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x48>
 8019bf8:	4909      	ldr	r1, [pc, #36]	; (8019c20 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_+0x68>)
 8019bfa:	68f8      	ldr	r0, [r7, #12]
 8019bfc:	f7f0 ff2e 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    str += linePrefix;
 8019c00:	6879      	ldr	r1, [r7, #4]
 8019c02:	68f8      	ldr	r0, [r7, #12]
 8019c04:	f7f0 ff18 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    str += stringToAppend;
 8019c08:	6839      	ldr	r1, [r7, #0]
 8019c0a:	68f8      	ldr	r0, [r7, #12]
 8019c0c:	f7f0 ff14 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    return str;
 8019c10:	bf00      	nop
}
 8019c12:	68f8      	ldr	r0, [r7, #12]
 8019c14:	371c      	adds	r7, #28
 8019c16:	46bd      	mov	sp, r7
 8019c18:	bd90      	pop	{r4, r7, pc}
 8019c1a:	bf00      	nop
 8019c1c:	08023090 	.word	0x08023090
 8019c20:	0802309c 	.word	0x0802309c

08019c24 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::unfulfilledCallsToString(const SimpleString& linePrefix) const
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b08c      	sub	sp, #48	; 0x30
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	60f8      	str	r0, [r7, #12]
 8019c2c:	60b9      	str	r1, [r7, #8]
 8019c2e:	607a      	str	r2, [r7, #4]
    SimpleString str;
 8019c30:	f107 0314 	add.w	r3, r7, #20
 8019c34:	4929      	ldr	r1, [pc, #164]	; (8019cdc <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0xb8>)
 8019c36:	4618      	mov	r0, r3
 8019c38:	f7f0 fac9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	685b      	ldr	r3, [r3, #4]
 8019c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d038      	beq.n	8019cba <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x96>
        if (!p->expectedCall_->isFulfilled())
 8019c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4a:	681a      	ldr	r2, [r3, #0]
 8019c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	33c0      	adds	r3, #192	; 0xc0
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4610      	mov	r0, r2
 8019c58:	4798      	blx	r3
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	f083 0301 	eor.w	r3, r3, #1
 8019c60:	b2db      	uxtb	r3, r3
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d025      	beq.n	8019cb2 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x8e>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c68:	6819      	ldr	r1, [r3, #0]
 8019c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	33f0      	adds	r3, #240	; 0xf0
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019c78:	4610      	mov	r0, r2
 8019c7a:	4798      	blx	r3
 8019c7c:	f107 001c 	add.w	r0, r7, #28
 8019c80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019c84:	f107 0114 	add.w	r1, r7, #20
 8019c88:	687a      	ldr	r2, [r7, #4]
 8019c8a:	f7ff ff95 	bl	8019bb8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019c8e:	f107 021c 	add.w	r2, r7, #28
 8019c92:	f107 0314 	add.w	r3, r7, #20
 8019c96:	4611      	mov	r1, r2
 8019c98:	4618      	mov	r0, r3
 8019c9a:	f7f0 fb04 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8019c9e:	f107 031c 	add.w	r3, r7, #28
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7f0 fe4b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019cac:	4618      	mov	r0, r3
 8019cae:	f7f0 fe46 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb4:	685b      	ldr	r3, [r3, #4]
 8019cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019cb8:	e7c3      	b.n	8019c42 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString+0x1e>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	f107 0114 	add.w	r1, r7, #20
 8019cc0:	687a      	ldr	r2, [r7, #4]
 8019cc2:	4618      	mov	r0, r3
 8019cc4:	f7ff ff48 	bl	8019b58 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 8019cc8:	f107 0314 	add.w	r3, r7, #20
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7f0 fe36 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019cd2:	bf00      	nop
}
 8019cd4:	68f8      	ldr	r0, [r7, #12]
 8019cd6:	3730      	adds	r7, #48	; 0x30
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}
 8019cdc:	08023090 	.word	0x08023090

08019ce0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>:

SimpleString MockExpectedCallsList::fulfilledCallsToString(const SimpleString& linePrefix) const
{
 8019ce0:	b580      	push	{r7, lr}
 8019ce2:	b08c      	sub	sp, #48	; 0x30
 8019ce4:	af00      	add	r7, sp, #0
 8019ce6:	60f8      	str	r0, [r7, #12]
 8019ce8:	60b9      	str	r1, [r7, #8]
 8019cea:	607a      	str	r2, [r7, #4]
    SimpleString str;
 8019cec:	f107 0314 	add.w	r3, r7, #20
 8019cf0:	4928      	ldr	r1, [pc, #160]	; (8019d94 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0xb4>)
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f0 fa6b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>

    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019cf8:	68bb      	ldr	r3, [r7, #8]
 8019cfa:	685b      	ldr	r3, [r3, #4]
 8019cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d035      	beq.n	8019d70 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x90>
        if (p->expectedCall_->isFulfilled())
 8019d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d06:	681a      	ldr	r2, [r3, #0]
 8019d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	681b      	ldr	r3, [r3, #0]
 8019d0e:	33c0      	adds	r3, #192	; 0xc0
 8019d10:	681b      	ldr	r3, [r3, #0]
 8019d12:	4610      	mov	r0, r2
 8019d14:	4798      	blx	r3
 8019d16:	4603      	mov	r3, r0
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d025      	beq.n	8019d68 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x88>
            str = appendStringOnANewLine(str, linePrefix, p->expectedCall_->callToString());
 8019d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d1e:	6819      	ldr	r1, [r3, #0]
 8019d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	33f0      	adds	r3, #240	; 0xf0
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019d2e:	4610      	mov	r0, r2
 8019d30:	4798      	blx	r3
 8019d32:	f107 001c 	add.w	r0, r7, #28
 8019d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d3a:	f107 0114 	add.w	r1, r7, #20
 8019d3e:	687a      	ldr	r2, [r7, #4]
 8019d40:	f7ff ff3a 	bl	8019bb8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019d44:	f107 021c 	add.w	r2, r7, #28
 8019d48:	f107 0314 	add.w	r3, r7, #20
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	4618      	mov	r0, r3
 8019d50:	f7f0 faa9 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8019d54:	f107 031c 	add.w	r3, r7, #28
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f7f0 fdf0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019d5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019d62:	4618      	mov	r0, r3
 8019d64:	f7f0 fdeb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6a:	685b      	ldr	r3, [r3, #4]
 8019d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019d6e:	e7c6      	b.n	8019cfe <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString+0x1e>

    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019d70:	68fb      	ldr	r3, [r7, #12]
 8019d72:	f107 0114 	add.w	r1, r7, #20
 8019d76:	687a      	ldr	r2, [r7, #4]
 8019d78:	4618      	mov	r0, r3
 8019d7a:	f7ff feed 	bl	8019b58 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
    SimpleString str;
 8019d7e:	f107 0314 	add.w	r3, r7, #20
 8019d82:	4618      	mov	r0, r3
 8019d84:	f7f0 fddb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, linePrefix);
 8019d88:	bf00      	nop
}
 8019d8a:	68f8      	ldr	r0, [r7, #12]
 8019d8c:	3730      	adds	r7, #48	; 0x30
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
 8019d92:	bf00      	nop
 8019d94:	08023090 	.word	0x08023090

08019d98 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>:

SimpleString MockExpectedCallsList::missingParametersToString() const
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b08e      	sub	sp, #56	; 0x38
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	6039      	str	r1, [r7, #0]
    SimpleString str;
 8019da2:	f107 030c 	add.w	r3, r7, #12
 8019da6:	4936      	ldr	r1, [pc, #216]	; (8019e80 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019da8:	4618      	mov	r0, r3
 8019daa:	f7f0 fa10 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	685b      	ldr	r3, [r3, #4]
 8019db2:	637b      	str	r3, [r7, #52]	; 0x34
 8019db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d044      	beq.n	8019e44 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xac>
        if (! p->expectedCall_->isMatchingActualCall())
 8019dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dbc:	681a      	ldr	r2, [r3, #0]
 8019dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dc0:	681b      	ldr	r3, [r3, #0]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	33cc      	adds	r3, #204	; 0xcc
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	4610      	mov	r0, r2
 8019dca:	4798      	blx	r3
 8019dcc:	4603      	mov	r3, r0
 8019dce:	f083 0301 	eor.w	r3, r3, #1
 8019dd2:	b2db      	uxtb	r3, r3
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d031      	beq.n	8019e3c <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xa4>
            str = appendStringOnANewLine(str, "", p->expectedCall_->missingParametersToString());
 8019dd8:	f107 031c 	add.w	r3, r7, #28
 8019ddc:	4928      	ldr	r1, [pc, #160]	; (8019e80 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7f0 f9f5 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8019de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019de6:	6819      	ldr	r1, [r3, #0]
 8019de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	33f4      	adds	r3, #244	; 0xf4
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8019df6:	4610      	mov	r0, r2
 8019df8:	4798      	blx	r3
 8019dfa:	f107 0014 	add.w	r0, r7, #20
 8019dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019e02:	f107 021c 	add.w	r2, r7, #28
 8019e06:	f107 010c 	add.w	r1, r7, #12
 8019e0a:	f7ff fed5 	bl	8019bb8 <_ZL22appendStringOnANewLineRK12SimpleStringS1_S1_>
 8019e0e:	f107 0214 	add.w	r2, r7, #20
 8019e12:	f107 030c 	add.w	r3, r7, #12
 8019e16:	4611      	mov	r1, r2
 8019e18:	4618      	mov	r0, r3
 8019e1a:	f7f0 fa44 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 8019e1e:	f107 0314 	add.w	r3, r7, #20
 8019e22:	4618      	mov	r0, r3
 8019e24:	f7f0 fd8b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7f0 fd86 	bl	800a93e <_ZN12SimpleStringD1Ev>
 8019e32:	f107 031c 	add.w	r3, r7, #28
 8019e36:	4618      	mov	r0, r3
 8019e38:	f7f0 fd81 	bl	800a93e <_ZN12SimpleStringD1Ev>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019e3e:	685b      	ldr	r3, [r3, #4]
 8019e40:	637b      	str	r3, [r7, #52]	; 0x34
 8019e42:	e7b7      	b.n	8019db4 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0x1c>

    return stringOrNoneTextWhenEmpty(str, "");
 8019e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019e48:	490d      	ldr	r1, [pc, #52]	; (8019e80 <_ZNK21MockExpectedCallsList25missingParametersToStringEv+0xe8>)
 8019e4a:	4618      	mov	r0, r3
 8019e4c:	f7f0 f9bf 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8019e56:	f107 010c 	add.w	r1, r7, #12
 8019e5a:	4618      	mov	r0, r3
 8019e5c:	f7ff fe7c 	bl	8019b58 <_ZL25stringOrNoneTextWhenEmptyRK12SimpleStringS1_>
 8019e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8019e64:	4618      	mov	r0, r3
 8019e66:	f7f0 fd6a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    SimpleString str;
 8019e6a:	f107 030c 	add.w	r3, r7, #12
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f7f0 fd65 	bl	800a93e <_ZN12SimpleStringD1Ev>
    return stringOrNoneTextWhenEmpty(str, "");
 8019e74:	bf00      	nop
}
 8019e76:	6878      	ldr	r0, [r7, #4]
 8019e78:	3738      	adds	r7, #56	; 0x38
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	bd80      	pop	{r7, pc}
 8019e7e:	bf00      	nop
 8019e80:	08023090 	.word	0x08023090

08019e84 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv>:

bool MockExpectedCallsList::hasUnmatchingExpectationsBecauseOfMissingParameters() const
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
 8019e8a:	6078      	str	r0, [r7, #4]
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	685b      	ldr	r3, [r3, #4]
 8019e90:	60fb      	str	r3, [r7, #12]
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d014      	beq.n	8019ec2 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x3e>
        if (! p->expectedCall_->areParametersMatchingActualCall())
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	681a      	ldr	r2, [r3, #0]
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	33d0      	adds	r3, #208	; 0xd0
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	4610      	mov	r0, r2
 8019ea8:	4798      	blx	r3
 8019eaa:	4603      	mov	r3, r0
 8019eac:	f083 0301 	eor.w	r3, r3, #1
 8019eb0:	b2db      	uxtb	r3, r3
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d001      	beq.n	8019eba <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x36>
            return true;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	e004      	b.n	8019ec4 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0x40>
    for (MockExpectedCallsListNode* p = head_; p; p = p->next_)
 8019eba:	68fb      	ldr	r3, [r7, #12]
 8019ebc:	685b      	ldr	r3, [r3, #4]
 8019ebe:	60fb      	str	r3, [r7, #12]
 8019ec0:	e7e7      	b.n	8019e92 <_ZNK21MockExpectedCallsList51hasUnmatchingExpectationsBecauseOfMissingParametersEv+0xe>
    return false;
 8019ec2:	2300      	movs	r3, #0
}
 8019ec4:	4618      	mov	r0, r3
 8019ec6:	3710      	adds	r7, #16
 8019ec8:	46bd      	mov	sp, r7
 8019eca:	bd80      	pop	{r7, pc}

08019ecc <_ZN19MockFailureReporter14crashOnFailureEb>:
    virtual void crashOnFailure(bool shouldCrash) { crashOnFailure_ = shouldCrash; }
 8019ecc:	b480      	push	{r7}
 8019ece:	b083      	sub	sp, #12
 8019ed0:	af00      	add	r7, sp, #0
 8019ed2:	6078      	str	r0, [r7, #4]
 8019ed4:	460b      	mov	r3, r1
 8019ed6:	70fb      	strb	r3, [r7, #3]
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	78fa      	ldrb	r2, [r7, #3]
 8019edc:	711a      	strb	r2, [r3, #4]
 8019ede:	bf00      	nop
 8019ee0:	370c      	adds	r7, #12
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee8:	4770      	bx	lr
	...

08019eec <_ZN33MockFailureReporterTestTerminatorC1Eb>:
#include "CppUTestExt/MockNamedValue.h"

class MockFailureReporterTestTerminator : public TestTerminator
{
public:
    MockFailureReporterTestTerminator(bool crashOnFailure) : crashOnFailure_(crashOnFailure)
 8019eec:	b580      	push	{r7, lr}
 8019eee:	b082      	sub	sp, #8
 8019ef0:	af00      	add	r7, sp, #0
 8019ef2:	6078      	str	r0, [r7, #4]
 8019ef4:	460b      	mov	r3, r1
 8019ef6:	70fb      	strb	r3, [r7, #3]
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f7ed ff6a 	bl	8007dd4 <_ZN14TestTerminatorC1Ev>
 8019f00:	4a05      	ldr	r2, [pc, #20]	; (8019f18 <_ZN33MockFailureReporterTestTerminatorC1Eb+0x2c>)
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	601a      	str	r2, [r3, #0]
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	78fa      	ldrb	r2, [r7, #3]
 8019f0a:	711a      	strb	r2, [r3, #4]
    {
    }
 8019f0c:	687b      	ldr	r3, [r7, #4]
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3708      	adds	r7, #8
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	0802560c 	.word	0x0802560c

08019f1c <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv>:

    virtual void exitCurrentTest() const _override
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b082      	sub	sp, #8
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
    {
        if (crashOnFailure_)
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	791b      	ldrb	r3, [r3, #4]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d001      	beq.n	8019f30 <_ZNK33MockFailureReporterTestTerminator15exitCurrentTestEv+0x14>
            UT_CRASH();
 8019f2c:	f7f6 f9fe 	bl	801032c <_ZN10UtestShell5crashEv>

        UtestShell::getCurrentTestTerminator().exitCurrentTest();
 8019f30:	f7f7 fd40 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 8019f34:	4603      	mov	r3, r0
 8019f36:	681a      	ldr	r2, [r3, #0]
 8019f38:	6812      	ldr	r2, [r2, #0]
 8019f3a:	4618      	mov	r0, r3
 8019f3c:	4790      	blx	r2
    } // LCOV_EXCL_LINE
 8019f3e:	bf00      	nop
 8019f40:	3708      	adds	r7, #8
 8019f42:	46bd      	mov	sp, r7
 8019f44:	bd80      	pop	{r7, pc}
	...

08019f48 <_ZN33MockFailureReporterTestTerminatorD1Ev>:

    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019f48:	b580      	push	{r7, lr}
 8019f4a:	b082      	sub	sp, #8
 8019f4c:	af00      	add	r7, sp, #0
 8019f4e:	6078      	str	r0, [r7, #4]
    {
 8019f50:	4a05      	ldr	r2, [pc, #20]	; (8019f68 <_ZN33MockFailureReporterTestTerminatorD1Ev+0x20>)
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	601a      	str	r2, [r3, #0]
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	4618      	mov	r0, r3
 8019f5a:	f7f7 fdbb 	bl	8011ad4 <_ZN14TestTerminatorD1Ev>
    }
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	4618      	mov	r0, r3
 8019f62:	3708      	adds	r7, #8
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}
 8019f68:	0802560c 	.word	0x0802560c

08019f6c <_ZN33MockFailureReporterTestTerminatorD0Ev>:
    virtual ~MockFailureReporterTestTerminator() _destructor_override
 8019f6c:	b580      	push	{r7, lr}
 8019f6e:	b082      	sub	sp, #8
 8019f70:	af00      	add	r7, sp, #0
 8019f72:	6078      	str	r0, [r7, #4]
    }
 8019f74:	6878      	ldr	r0, [r7, #4]
 8019f76:	f7ff ffe7 	bl	8019f48 <_ZN33MockFailureReporterTestTerminatorD1Ev>
 8019f7a:	2108      	movs	r1, #8
 8019f7c:	6878      	ldr	r0, [r7, #4]
 8019f7e:	f7ed fd77 	bl	8007a70 <_ZdlPvj>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	4618      	mov	r0, r3
 8019f86:	3708      	adds	r7, #8
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <_ZN19MockFailureReporter8failTestERK11MockFailure>:
    bool crashOnFailure_;

};

void MockFailureReporter::failTest(const MockFailure& failure)
{
 8019f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f8e:	b085      	sub	sp, #20
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	6078      	str	r0, [r7, #4]
 8019f94:	6039      	str	r1, [r7, #0]
    if (!getTestToFail()->hasFailed())
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	681b      	ldr	r3, [r3, #0]
 8019f9a:	330c      	adds	r3, #12
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	6878      	ldr	r0, [r7, #4]
 8019fa0:	4798      	blx	r3
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	681a      	ldr	r2, [r3, #0]
 8019fa6:	321c      	adds	r2, #28
 8019fa8:	6812      	ldr	r2, [r2, #0]
 8019faa:	4618      	mov	r0, r3
 8019fac:	4790      	blx	r2
 8019fae:	4603      	mov	r3, r0
 8019fb0:	f083 0301 	eor.w	r3, r3, #1
 8019fb4:	b2db      	uxtb	r3, r3
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d01d      	beq.n	8019ff6 <_ZN19MockFailureReporter8failTestERK11MockFailure+0x6a>
        getTestToFail()->failWith(failure, MockFailureReporterTestTerminator(crashOnFailure_));
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	330c      	adds	r3, #12
 8019fc0:	681b      	ldr	r3, [r3, #0]
 8019fc2:	6878      	ldr	r0, [r7, #4]
 8019fc4:	4798      	blx	r3
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	6823      	ldr	r3, [r4, #0]
 8019fca:	339c      	adds	r3, #156	; 0x9c
 8019fcc:	681d      	ldr	r5, [r3, #0]
 8019fce:	683e      	ldr	r6, [r7, #0]
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	791a      	ldrb	r2, [r3, #4]
 8019fd4:	f107 0308 	add.w	r3, r7, #8
 8019fd8:	4611      	mov	r1, r2
 8019fda:	4618      	mov	r0, r3
 8019fdc:	f7ff ff86 	bl	8019eec <_ZN33MockFailureReporterTestTerminatorC1Eb>
 8019fe0:	f107 0308 	add.w	r3, r7, #8
 8019fe4:	461a      	mov	r2, r3
 8019fe6:	4631      	mov	r1, r6
 8019fe8:	4620      	mov	r0, r4
 8019fea:	47a8      	blx	r5
 8019fec:	f107 0308 	add.w	r3, r7, #8
 8019ff0:	4618      	mov	r0, r3
 8019ff2:	f7ff ffa9 	bl	8019f48 <_ZN33MockFailureReporterTestTerminatorD1Ev>
} // LCOV_EXCL_LINE
 8019ff6:	bf00      	nop
 8019ff8:	3714      	adds	r7, #20
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ffe <_ZN19MockFailureReporter13getTestToFailEv>:

UtestShell* MockFailureReporter::getTestToFail()
{
 8019ffe:	b580      	push	{r7, lr}
 801a000:	b082      	sub	sp, #8
 801a002:	af00      	add	r7, sp, #0
 801a004:	6078      	str	r0, [r7, #4]
    return UtestShell::getCurrent();
 801a006:	f7f7 fcc5 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801a00a:	4603      	mov	r3, r0
}
 801a00c:	4618      	mov	r0, r3
 801a00e:	3708      	adds	r7, #8
 801a010:	46bd      	mov	sp, r7
 801a012:	bd80      	pop	{r7, pc}

0801a014 <_ZN11MockFailureC1EP10UtestShell>:

MockFailure::MockFailure(UtestShell* test) : TestFailure(test, "Test failed with MockFailure without an error! Something went seriously wrong.")
 801a014:	b590      	push	{r4, r7, lr}
 801a016:	b085      	sub	sp, #20
 801a018:	af00      	add	r7, sp, #0
 801a01a:	6078      	str	r0, [r7, #4]
 801a01c:	6039      	str	r1, [r7, #0]
 801a01e:	687c      	ldr	r4, [r7, #4]
 801a020:	f107 0308 	add.w	r3, r7, #8
 801a024:	490b      	ldr	r1, [pc, #44]	; (801a054 <_ZN11MockFailureC1EP10UtestShell+0x40>)
 801a026:	4618      	mov	r0, r3
 801a028:	f7f0 f8d1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a02c:	f107 0308 	add.w	r3, r7, #8
 801a030:	461a      	mov	r2, r3
 801a032:	6839      	ldr	r1, [r7, #0]
 801a034:	4620      	mov	r0, r4
 801a036:	f7f1 ff29 	bl	800be8c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 801a03a:	f107 0308 	add.w	r3, r7, #8
 801a03e:	4618      	mov	r0, r3
 801a040:	f7f0 fc7d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a044:	4a04      	ldr	r2, [pc, #16]	; (801a058 <_ZN11MockFailureC1EP10UtestShell+0x44>)
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	601a      	str	r2, [r3, #0]
{
}
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	4618      	mov	r0, r3
 801a04e:	3714      	adds	r7, #20
 801a050:	46bd      	mov	sp, r7
 801a052:	bd90      	pop	{r4, r7, pc}
 801a054:	080230a0 	.word	0x080230a0
 801a058:	08024598 	.word	0x08024598

0801a05c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistory(const MockExpectedCallsList& expectations)
{
 801a05c:	b5b0      	push	{r4, r5, r7, lr}
 801a05e:	b08a      	sub	sp, #40	; 0x28
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
 801a064:	6039      	str	r1, [r7, #0]
    message_ += "\tEXPECTED calls that WERE NOT fulfilled:\n";
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	332c      	adds	r3, #44	; 0x2c
 801a06a:	492b      	ldr	r1, [pc, #172]	; (801a118 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xbc>)
 801a06c:	4618      	mov	r0, r3
 801a06e:	f7f0 fcf5 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.unfulfilledCallsToString("\t\t");
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a078:	683b      	ldr	r3, [r7, #0]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	337c      	adds	r3, #124	; 0x7c
 801a07e:	681c      	ldr	r4, [r3, #0]
 801a080:	f107 0310 	add.w	r3, r7, #16
 801a084:	4925      	ldr	r1, [pc, #148]	; (801a11c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a086:	4618      	mov	r0, r3
 801a088:	f7f0 f8a1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a08c:	f107 0308 	add.w	r3, r7, #8
 801a090:	f107 0210 	add.w	r2, r7, #16
 801a094:	6839      	ldr	r1, [r7, #0]
 801a096:	4618      	mov	r0, r3
 801a098:	47a0      	blx	r4
 801a09a:	f107 0308 	add.w	r3, r7, #8
 801a09e:	4619      	mov	r1, r3
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	f7f0 fcc9 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a0a6:	f107 0308 	add.w	r3, r7, #8
 801a0aa:	4618      	mov	r0, r3
 801a0ac:	f7f0 fc47 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a0b0:	f107 0310 	add.w	r3, r7, #16
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7f0 fc42 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += "\n\tEXPECTED calls that WERE fulfilled:\n";
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	332c      	adds	r3, #44	; 0x2c
 801a0be:	4918      	ldr	r1, [pc, #96]	; (801a120 <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc4>)
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	f7f0 fccb 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += expectations.fulfilledCallsToString("\t\t");
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	3380      	adds	r3, #128	; 0x80
 801a0d2:	681c      	ldr	r4, [r3, #0]
 801a0d4:	f107 0320 	add.w	r3, r7, #32
 801a0d8:	4910      	ldr	r1, [pc, #64]	; (801a11c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList+0xc0>)
 801a0da:	4618      	mov	r0, r3
 801a0dc:	f7f0 f877 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a0e0:	f107 0318 	add.w	r3, r7, #24
 801a0e4:	f107 0220 	add.w	r2, r7, #32
 801a0e8:	6839      	ldr	r1, [r7, #0]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	47a0      	blx	r4
 801a0ee:	f107 0318 	add.w	r3, r7, #24
 801a0f2:	4619      	mov	r1, r3
 801a0f4:	4628      	mov	r0, r5
 801a0f6:	f7f0 fc9f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a0fa:	f107 0318 	add.w	r3, r7, #24
 801a0fe:	4618      	mov	r0, r3
 801a100:	f7f0 fc1d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a104:	f107 0320 	add.w	r3, r7, #32
 801a108:	4618      	mov	r0, r3
 801a10a:	f7f0 fc18 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801a10e:	bf00      	nop
 801a110:	3728      	adds	r7, #40	; 0x28
 801a112:	46bd      	mov	sp, r7
 801a114:	bdb0      	pop	{r4, r5, r7, pc}
 801a116:	bf00      	nop
 801a118:	080230f0 	.word	0x080230f0
 801a11c:	0802311c 	.word	0x0802311c
 801a120:	08023120 	.word	0x08023120

0801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>:

void MockFailure::addExpectationsAndCallHistoryRelatedTo(const SimpleString& name, const MockExpectedCallsList& expectations)
{
 801a124:	b590      	push	{r4, r7, lr}
 801a126:	b08f      	sub	sp, #60	; 0x3c
 801a128:	af00      	add	r7, sp, #0
 801a12a:	60f8      	str	r0, [r7, #12]
 801a12c:	60b9      	str	r1, [r7, #8]
 801a12e:	607a      	str	r2, [r7, #4]
    MockExpectedCallsList expectationsForFunction;
 801a130:	f107 0310 	add.w	r3, r7, #16
 801a134:	4618      	mov	r0, r3
 801a136:	f7ff f877 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(name, expectations);
 801a13a:	f107 0310 	add.w	r3, r7, #16
 801a13e:	687a      	ldr	r2, [r7, #4]
 801a140:	68b9      	ldr	r1, [r7, #8]
 801a142:	4618      	mov	r0, r3
 801a144:	f7ff fa16 	bl	8019574 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ += "\tEXPECTED calls that WERE NOT fulfilled related to function: ";
 801a148:	68fb      	ldr	r3, [r7, #12]
 801a14a:	332c      	adds	r3, #44	; 0x2c
 801a14c:	4937      	ldr	r1, [pc, #220]	; (801a22c <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x108>)
 801a14e:	4618      	mov	r0, r3
 801a150:	f7f0 fc84 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	332c      	adds	r3, #44	; 0x2c
 801a158:	68b9      	ldr	r1, [r7, #8]
 801a15a:	4618      	mov	r0, r3
 801a15c:	f7f0 fc6c 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	332c      	adds	r3, #44	; 0x2c
 801a164:	4932      	ldr	r1, [pc, #200]	; (801a230 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a166:	4618      	mov	r0, r3
 801a168:	f7f0 fc78 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.unfulfilledCallsToString("\t\t");
 801a16c:	68fb      	ldr	r3, [r7, #12]
 801a16e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a172:	f107 0320 	add.w	r3, r7, #32
 801a176:	492f      	ldr	r1, [pc, #188]	; (801a234 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a178:	4618      	mov	r0, r3
 801a17a:	f7f0 f828 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a17e:	f107 0318 	add.w	r3, r7, #24
 801a182:	f107 0220 	add.w	r2, r7, #32
 801a186:	f107 0110 	add.w	r1, r7, #16
 801a18a:	4618      	mov	r0, r3
 801a18c:	f7ff fd4a 	bl	8019c24 <_ZNK21MockExpectedCallsList24unfulfilledCallsToStringERK12SimpleString>
 801a190:	f107 0318 	add.w	r3, r7, #24
 801a194:	4619      	mov	r1, r3
 801a196:	4620      	mov	r0, r4
 801a198:	f7f0 fc4e 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a19c:	f107 0318 	add.w	r3, r7, #24
 801a1a0:	4618      	mov	r0, r3
 801a1a2:	f7f0 fbcc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a1a6:	f107 0320 	add.w	r3, r7, #32
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f7f0 fbc7 	bl	800a93e <_ZN12SimpleStringD1Ev>

    message_ += "\n\tEXPECTED calls that WERE fulfilled related to function: ";
 801a1b0:	68fb      	ldr	r3, [r7, #12]
 801a1b2:	332c      	adds	r3, #44	; 0x2c
 801a1b4:	4920      	ldr	r1, [pc, #128]	; (801a238 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x114>)
 801a1b6:	4618      	mov	r0, r3
 801a1b8:	f7f0 fc50 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += name;
 801a1bc:	68fb      	ldr	r3, [r7, #12]
 801a1be:	332c      	adds	r3, #44	; 0x2c
 801a1c0:	68b9      	ldr	r1, [r7, #8]
 801a1c2:	4618      	mov	r0, r3
 801a1c4:	f7f0 fc38 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	332c      	adds	r3, #44	; 0x2c
 801a1cc:	4918      	ldr	r1, [pc, #96]	; (801a230 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x10c>)
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f7f0 fc44 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    message_ += expectationsForFunction.fulfilledCallsToString("\t\t");
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a1da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a1de:	4915      	ldr	r1, [pc, #84]	; (801a234 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList+0x110>)
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7ef fff4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a1e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a1ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801a1ee:	f107 0110 	add.w	r1, r7, #16
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7ff fd74 	bl	8019ce0 <_ZNK21MockExpectedCallsList22fulfilledCallsToStringERK12SimpleString>
 801a1f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	4620      	mov	r0, r4
 801a200:	f7f0 fc1a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a204:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a208:	4618      	mov	r0, r3
 801a20a:	f7f0 fb98 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a20e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a212:	4618      	mov	r0, r3
 801a214:	f7f0 fb93 	bl	800a93e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801a218:	f107 0310 	add.w	r3, r7, #16
 801a21c:	4618      	mov	r0, r3
 801a21e:	f7ff f817 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 801a222:	bf00      	nop
 801a224:	373c      	adds	r7, #60	; 0x3c
 801a226:	46bd      	mov	sp, r7
 801a228:	bd90      	pop	{r4, r7, pc}
 801a22a:	bf00      	nop
 801a22c:	08023148 	.word	0x08023148
 801a230:	08023188 	.word	0x08023188
 801a234:	0802311c 	.word	0x0802311c
 801a238:	0802318c 	.word	0x0802318c

0801a23c <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockExpectedCallsDidntHappenFailure::MockExpectedCallsDidntHappenFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a23c:	b590      	push	{r4, r7, lr}
 801a23e:	b087      	sub	sp, #28
 801a240:	af00      	add	r7, sp, #0
 801a242:	60f8      	str	r0, [r7, #12]
 801a244:	60b9      	str	r1, [r7, #8]
 801a246:	607a      	str	r2, [r7, #4]
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	68b9      	ldr	r1, [r7, #8]
 801a24c:	4618      	mov	r0, r3
 801a24e:	f7ff fee1 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a252:	4a10      	ldr	r2, [pc, #64]	; (801a294 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x58>)
 801a254:	68fb      	ldr	r3, [r7, #12]
 801a256:	601a      	str	r2, [r3, #0]
{
    message_ = "Mock Failure: Expected call WAS NOT fulfilled.\n";
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a25e:	f107 0310 	add.w	r3, r7, #16
 801a262:	490d      	ldr	r1, [pc, #52]	; (801a298 <_ZN35MockExpectedCallsDidntHappenFailureC1EP10UtestShellRK21MockExpectedCallsList+0x5c>)
 801a264:	4618      	mov	r0, r3
 801a266:	f7ef ffb2 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a26a:	f107 0310 	add.w	r3, r7, #16
 801a26e:	4619      	mov	r1, r3
 801a270:	4620      	mov	r0, r4
 801a272:	f7f0 f818 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a276:	f107 0310 	add.w	r3, r7, #16
 801a27a:	4618      	mov	r0, r3
 801a27c:	f7f0 fb5f 	bl	800a93e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistory(expectations);
 801a280:	68fb      	ldr	r3, [r7, #12]
 801a282:	6879      	ldr	r1, [r7, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	f7ff fee9 	bl	801a05c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	4618      	mov	r0, r3
 801a28e:	371c      	adds	r7, #28
 801a290:	46bd      	mov	sp, r7
 801a292:	bd90      	pop	{r4, r7, pc}
 801a294:	0802456c 	.word	0x0802456c
 801a298:	080231c8 	.word	0x080231c8

0801a29c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockUnexpectedCallHappenedFailure::MockUnexpectedCallHappenedFailure(UtestShell* test, const SimpleString& name, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a29c:	b590      	push	{r4, r7, lr}
 801a29e:	b08d      	sub	sp, #52	; 0x34
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	60f8      	str	r0, [r7, #12]
 801a2a4:	60b9      	str	r1, [r7, #8]
 801a2a6:	607a      	str	r2, [r7, #4]
 801a2a8:	603b      	str	r3, [r7, #0]
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	68b9      	ldr	r1, [r7, #8]
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	f7ff feb0 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a2b4:	4a2f      	ldr	r2, [pc, #188]	; (801a374 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xd8>)
 801a2b6:	68fb      	ldr	r3, [r7, #12]
 801a2b8:	601a      	str	r2, [r3, #0]
{
    unsigned int amountOfActualCalls = expectations.amountOfActualCallsFulfilledFor(name);
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	3310      	adds	r3, #16
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	6879      	ldr	r1, [r7, #4]
 801a2c4:	6838      	ldr	r0, [r7, #0]
 801a2c6:	4798      	blx	r3
 801a2c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (amountOfActualCalls > 0) {
 801a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d027      	beq.n	801a320 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x84>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801a2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d2:	1c5a      	adds	r2, r3, #1
 801a2d4:	f107 0314 	add.w	r3, r7, #20
 801a2d8:	4611      	mov	r1, r2
 801a2da:	4618      	mov	r0, r3
 801a2dc:	f7f1 fa00 	bl	800b6e0 <_Z23StringFromOrdinalNumberj>
        message_ = StringFromFormat("Mock Failure: Unexpected additional (%s) call to function: ", ordinalNumber.asCharString());
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a2e6:	f107 0314 	add.w	r3, r7, #20
 801a2ea:	4618      	mov	r0, r3
 801a2ec:	f7f0 fafa 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	f107 031c 	add.w	r3, r7, #28
 801a2f6:	4920      	ldr	r1, [pc, #128]	; (801a378 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a2f8:	4618      	mov	r0, r3
 801a2fa:	f7f1 f827 	bl	800b34c <_Z16StringFromFormatPKcz>
 801a2fe:	f107 031c 	add.w	r3, r7, #28
 801a302:	4619      	mov	r1, r3
 801a304:	4620      	mov	r0, r4
 801a306:	f7ef ffce 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a30a:	f107 031c 	add.w	r3, r7, #28
 801a30e:	4618      	mov	r0, r3
 801a310:	f7f0 fb15 	bl	800a93e <_ZN12SimpleStringD1Ev>
        SimpleString ordinalNumber = StringFromOrdinalNumber(amountOfActualCalls + 1);
 801a314:	f107 0314 	add.w	r3, r7, #20
 801a318:	4618      	mov	r0, r3
 801a31a:	f7f0 fb10 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a31e:	e013      	b.n	801a348 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xac>
    } else {
        message_ = "Mock Failure: Unexpected call to function: ";
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a32a:	4914      	ldr	r1, [pc, #80]	; (801a37c <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a32c:	4618      	mov	r0, r3
 801a32e:	f7ef ff4e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a336:	4619      	mov	r1, r3
 801a338:	4620      	mov	r0, r4
 801a33a:	f7ef ffb4 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a33e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801a342:	4618      	mov	r0, r3
 801a344:	f7f0 fafb 	bl	800a93e <_ZN12SimpleStringD1Ev>
    }
    message_ += name;
 801a348:	68fb      	ldr	r3, [r7, #12]
 801a34a:	332c      	adds	r3, #44	; 0x2c
 801a34c:	6879      	ldr	r1, [r7, #4]
 801a34e:	4618      	mov	r0, r3
 801a350:	f7f0 fb72 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	332c      	adds	r3, #44	; 0x2c
 801a358:	4909      	ldr	r1, [pc, #36]	; (801a380 <_ZN33MockUnexpectedCallHappenedFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a35a:	4618      	mov	r0, r3
 801a35c:	f7f0 fb7e 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectations);
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	6839      	ldr	r1, [r7, #0]
 801a364:	4618      	mov	r0, r3
 801a366:	f7ff fe79 	bl	801a05c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
}
 801a36a:	68fb      	ldr	r3, [r7, #12]
 801a36c:	4618      	mov	r0, r3
 801a36e:	3734      	adds	r7, #52	; 0x34
 801a370:	46bd      	mov	sp, r7
 801a372:	bd90      	pop	{r4, r7, pc}
 801a374:	08024f0c 	.word	0x08024f0c
 801a378:	080231f8 	.word	0x080231f8
 801a37c:	08023234 	.word	0x08023234
 801a380:	08023188 	.word	0x08023188

0801a384 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList>:

MockCallOrderFailure::MockCallOrderFailure(UtestShell* test, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a384:	b590      	push	{r4, r7, lr}
 801a386:	b089      	sub	sp, #36	; 0x24
 801a388:	af00      	add	r7, sp, #0
 801a38a:	60f8      	str	r0, [r7, #12]
 801a38c:	60b9      	str	r1, [r7, #8]
 801a38e:	607a      	str	r2, [r7, #4]
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	68b9      	ldr	r1, [r7, #8]
 801a394:	4618      	mov	r0, r3
 801a396:	f7ff fe3d 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a39a:	4a1f      	ldr	r2, [pc, #124]	; (801a418 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x94>)
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForOutOfOrder;
 801a3a0:	f107 0310 	add.w	r3, r7, #16
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	f7fe ff3f 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForOutOfOrder.addExpectations(expectations);
 801a3aa:	f107 0310 	add.w	r3, r7, #16
 801a3ae:	6879      	ldr	r1, [r7, #4]
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	f7ff f909 	bl	80195c8 <_ZN21MockExpectedCallsList15addExpectationsERKS_>
    expectationsForOutOfOrder.onlyKeepOutOfOrderExpectations();
 801a3b6:	f107 0310 	add.w	r3, r7, #16
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f7ff f94c 	bl	8019658 <_ZN21MockExpectedCallsList30onlyKeepOutOfOrderExpectationsEv>

    message_ = "Mock Failure: Out of order calls";
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a3c6:	f107 0318 	add.w	r3, r7, #24
 801a3ca:	4914      	ldr	r1, [pc, #80]	; (801a41c <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x98>)
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f7ef fefe 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a3d2:	f107 0318 	add.w	r3, r7, #24
 801a3d6:	4619      	mov	r1, r3
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f7ef ff64 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a3de:	f107 0318 	add.w	r3, r7, #24
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7f0 faab 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += "\n";
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	332c      	adds	r3, #44	; 0x2c
 801a3ec:	490c      	ldr	r1, [pc, #48]	; (801a420 <_ZN20MockCallOrderFailureC1EP10UtestShellRK21MockExpectedCallsList+0x9c>)
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	f7f0 fb34 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistory(expectationsForOutOfOrder);
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	f107 0210 	add.w	r2, r7, #16
 801a3fa:	4611      	mov	r1, r2
 801a3fc:	4618      	mov	r0, r3
 801a3fe:	f7ff fe2d 	bl	801a05c <_ZN11MockFailure29addExpectationsAndCallHistoryERK21MockExpectedCallsList>
    MockExpectedCallsList expectationsForOutOfOrder;
 801a402:	f107 0310 	add.w	r3, r7, #16
 801a406:	4618      	mov	r0, r3
 801a408:	f7fe ff22 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	4618      	mov	r0, r3
 801a410:	3724      	adds	r7, #36	; 0x24
 801a412:	46bd      	mov	sp, r7
 801a414:	bd90      	pop	{r4, r7, pc}
 801a416:	bf00      	nop
 801a418:	08024540 	.word	0x08024540
 801a41c:	08023260 	.word	0x08023260
 801a420:	08023188 	.word	0x08023188

0801a424 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedInputParameterFailure::MockUnexpectedInputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a424:	b590      	push	{r4, r7, lr}
 801a426:	b099      	sub	sp, #100	; 0x64
 801a428:	af00      	add	r7, sp, #0
 801a42a:	60f8      	str	r0, [r7, #12]
 801a42c:	60b9      	str	r1, [r7, #8]
 801a42e:	607a      	str	r2, [r7, #4]
 801a430:	603b      	str	r3, [r7, #0]
 801a432:	68fb      	ldr	r3, [r7, #12]
 801a434:	68b9      	ldr	r1, [r7, #8]
 801a436:	4618      	mov	r0, r3
 801a438:	f7ff fdec 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a43c:	4a9e      	ldr	r2, [pc, #632]	; (801a6b8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x294>)
 801a43e:	68fb      	ldr	r3, [r7, #12]
 801a440:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a442:	f107 0310 	add.w	r3, r7, #16
 801a446:	4618      	mov	r0, r3
 801a448:	f7fe feee 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a44c:	f107 0310 	add.w	r3, r7, #16
 801a450:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a452:	6879      	ldr	r1, [r7, #4]
 801a454:	4618      	mov	r0, r3
 801a456:	f7ff f88d 	bl	8019574 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithInputParameterName(parameter.getName());
 801a45a:	683b      	ldr	r3, [r7, #0]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	335c      	adds	r3, #92	; 0x5c
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	f107 0218 	add.w	r2, r7, #24
 801a466:	6839      	ldr	r1, [r7, #0]
 801a468:	4610      	mov	r0, r2
 801a46a:	4798      	blx	r3
 801a46c:	f107 0218 	add.w	r2, r7, #24
 801a470:	f107 0310 	add.w	r3, r7, #16
 801a474:	4611      	mov	r1, r2
 801a476:	4618      	mov	r0, r3
 801a478:	f7ff f948 	bl	801970c <_ZN21MockExpectedCallsList42onlyKeepExpectationsWithInputParameterNameERK12SimpleString>
 801a47c:	f107 0318 	add.w	r3, r7, #24
 801a480:	4618      	mov	r0, r3
 801a482:	f7f0 fa5c 	bl	800a93e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a486:	f107 0310 	add.w	r3, r7, #16
 801a48a:	4618      	mov	r0, r3
 801a48c:	f7fe ff4d 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a490:	4603      	mov	r3, r0
 801a492:	2b00      	cmp	r3, #0
 801a494:	d037      	beq.n	801a506 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected parameter name to function \"";
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a49c:	f107 0320 	add.w	r3, r7, #32
 801a4a0:	4986      	ldr	r1, [pc, #536]	; (801a6bc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x298>)
 801a4a2:	4618      	mov	r0, r3
 801a4a4:	f7ef fe93 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a4a8:	f107 0320 	add.w	r3, r7, #32
 801a4ac:	4619      	mov	r1, r3
 801a4ae:	4620      	mov	r0, r4
 801a4b0:	f7ef fef9 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a4b4:	f107 0320 	add.w	r3, r7, #32
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	f7f0 fa40 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	332c      	adds	r3, #44	; 0x2c
 801a4c2:	6879      	ldr	r1, [r7, #4]
 801a4c4:	4618      	mov	r0, r3
 801a4c6:	f7f0 fab7 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	332c      	adds	r3, #44	; 0x2c
 801a4ce:	497c      	ldr	r1, [pc, #496]	; (801a6c0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x29c>)
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	f7f0 fac3 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a4dc:	683b      	ldr	r3, [r7, #0]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	335c      	adds	r3, #92	; 0x5c
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a4e8:	6839      	ldr	r1, [r7, #0]
 801a4ea:	4610      	mov	r0, r2
 801a4ec:	4798      	blx	r3
 801a4ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a4f2:	4619      	mov	r1, r3
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	f7f0 fa9f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a4fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a4fe:	4618      	mov	r0, r3
 801a500:	f7f0 fa1d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a504:	e056      	b.n	801a5b4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x190>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter value to parameter \"";
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a50c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a510:	496c      	ldr	r1, [pc, #432]	; (801a6c4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a0>)
 801a512:	4618      	mov	r0, r3
 801a514:	f7ef fe5b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a518:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a51c:	4619      	mov	r1, r3
 801a51e:	4620      	mov	r0, r4
 801a520:	f7ef fec1 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a528:	4618      	mov	r0, r3
 801a52a:	f7f0 fa08 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getName();
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a534:	683b      	ldr	r3, [r7, #0]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	335c      	adds	r3, #92	; 0x5c
 801a53a:	681b      	ldr	r3, [r3, #0]
 801a53c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a540:	6839      	ldr	r1, [r7, #0]
 801a542:	4610      	mov	r0, r2
 801a544:	4798      	blx	r3
 801a546:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a54a:	4619      	mov	r1, r3
 801a54c:	4620      	mov	r0, r4
 801a54e:	f7f0 fa73 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a552:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a556:	4618      	mov	r0, r3
 801a558:	f7f0 f9f1 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	332c      	adds	r3, #44	; 0x2c
 801a560:	4959      	ldr	r1, [pc, #356]	; (801a6c8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a4>)
 801a562:	4618      	mov	r0, r3
 801a564:	f7f0 fa7a 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	332c      	adds	r3, #44	; 0x2c
 801a56c:	6879      	ldr	r1, [r7, #4]
 801a56e:	4618      	mov	r0, r3
 801a570:	f7f0 fa62 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        message_ += "\": <";
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	332c      	adds	r3, #44	; 0x2c
 801a578:	4954      	ldr	r1, [pc, #336]	; (801a6cc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2a8>)
 801a57a:	4618      	mov	r0, r3
 801a57c:	f7f0 fa6e 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += StringFrom(parameter);
 801a580:	68fb      	ldr	r3, [r7, #12]
 801a582:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a586:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a58a:	6839      	ldr	r1, [r7, #0]
 801a58c:	4618      	mov	r0, r3
 801a58e:	f7fd faa3 	bl	8017ad8 <_Z10StringFromRK14MockNamedValue>
 801a592:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a596:	4619      	mov	r1, r3
 801a598:	4620      	mov	r0, r4
 801a59a:	f7f0 fa4d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a59e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	f7f0 f9cb 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += ">";
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	332c      	adds	r3, #44	; 0x2c
 801a5ac:	4948      	ldr	r1, [pc, #288]	; (801a6d0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	f7f0 fa54 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a5b4:	68fb      	ldr	r3, [r7, #12]
 801a5b6:	332c      	adds	r3, #44	; 0x2c
 801a5b8:	4946      	ldr	r1, [pc, #280]	; (801a6d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a5ba:	4618      	mov	r0, r3
 801a5bc:	f7f0 fa4e 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a5c0:	68fb      	ldr	r3, [r7, #12]
 801a5c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801a5c4:	6879      	ldr	r1, [r7, #4]
 801a5c6:	4618      	mov	r0, r3
 801a5c8:	f7ff fdac 	bl	801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected parameter passed to function: ";
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	332c      	adds	r3, #44	; 0x2c
 801a5d0:	4941      	ldr	r1, [pc, #260]	; (801a6d8 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b4>)
 801a5d2:	4618      	mov	r0, r3
 801a5d4:	f7f0 fa42 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	332c      	adds	r3, #44	; 0x2c
 801a5dc:	6879      	ldr	r1, [r7, #4]
 801a5de:	4618      	mov	r0, r3
 801a5e0:	f7f0 fa2a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	332c      	adds	r3, #44	; 0x2c
 801a5e8:	493a      	ldr	r1, [pc, #232]	; (801a6d4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b0>)
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	f7f0 fa36 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	332c      	adds	r3, #44	; 0x2c
 801a5f4:	4939      	ldr	r1, [pc, #228]	; (801a6dc <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2b8>)
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	f7f0 fa30 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a602:	683b      	ldr	r3, [r7, #0]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	3360      	adds	r3, #96	; 0x60
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a60e:	6839      	ldr	r1, [r7, #0]
 801a610:	4610      	mov	r0, r2
 801a612:	4798      	blx	r3
 801a614:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a618:	4619      	mov	r1, r3
 801a61a:	4620      	mov	r0, r4
 801a61c:	f7f0 fa0c 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a620:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a624:	4618      	mov	r0, r3
 801a626:	f7f0 f98a 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a62a:	68fb      	ldr	r3, [r7, #12]
 801a62c:	332c      	adds	r3, #44	; 0x2c
 801a62e:	492c      	ldr	r1, [pc, #176]	; (801a6e0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2bc>)
 801a630:	4618      	mov	r0, r3
 801a632:	f7f0 fa13 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a63c:	683b      	ldr	r3, [r7, #0]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	335c      	adds	r3, #92	; 0x5c
 801a642:	681b      	ldr	r3, [r3, #0]
 801a644:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a648:	6839      	ldr	r1, [r7, #0]
 801a64a:	4610      	mov	r0, r2
 801a64c:	4798      	blx	r3
 801a64e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a652:	4619      	mov	r1, r3
 801a654:	4620      	mov	r0, r4
 801a656:	f7f0 f9ef 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a65a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a65e:	4618      	mov	r0, r3
 801a660:	f7f0 f96d 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += ": <";
 801a664:	68fb      	ldr	r3, [r7, #12]
 801a666:	332c      	adds	r3, #44	; 0x2c
 801a668:	491e      	ldr	r1, [pc, #120]	; (801a6e4 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2c0>)
 801a66a:	4618      	mov	r0, r3
 801a66c:	f7f0 f9f6 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(parameter);
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a67a:	6839      	ldr	r1, [r7, #0]
 801a67c:	4618      	mov	r0, r3
 801a67e:	f7fd fa2b 	bl	8017ad8 <_Z10StringFromRK14MockNamedValue>
 801a682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a686:	4619      	mov	r1, r3
 801a688:	4620      	mov	r0, r4
 801a68a:	f7f0 f9d5 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a68e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801a692:	4618      	mov	r0, r3
 801a694:	f7f0 f953 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += ">";
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	332c      	adds	r3, #44	; 0x2c
 801a69c:	490c      	ldr	r1, [pc, #48]	; (801a6d0 <_ZN35MockUnexpectedInputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x2ac>)
 801a69e:	4618      	mov	r0, r3
 801a6a0:	f7f0 f9dc 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a6a4:	f107 0310 	add.w	r3, r7, #16
 801a6a8:	4618      	mov	r0, r3
 801a6aa:	f7fe fdd1 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 801a6ae:	68fb      	ldr	r3, [r7, #12]
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	3764      	adds	r7, #100	; 0x64
 801a6b4:	46bd      	mov	sp, r7
 801a6b6:	bd90      	pop	{r4, r7, pc}
 801a6b8:	08024ee0 	.word	0x08024ee0
 801a6bc:	08023284 	.word	0x08023284
 801a6c0:	080232bc 	.word	0x080232bc
 801a6c4:	080232c0 	.word	0x080232c0
 801a6c8:	080232f8 	.word	0x080232f8
 801a6cc:	08023308 	.word	0x08023308
 801a6d0:	08023310 	.word	0x08023310
 801a6d4:	08023188 	.word	0x08023188
 801a6d8:	08023314 	.word	0x08023314
 801a6dc:	0802311c 	.word	0x0802311c
 801a6e0:	08023348 	.word	0x08023348
 801a6e4:	0802334c 	.word	0x0802334c

0801a6e8 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList>:

MockUnexpectedOutputParameterFailure::MockUnexpectedOutputParameterFailure(UtestShell* test, const SimpleString& functionName, const MockNamedValue& parameter, const MockExpectedCallsList& expectations)  : MockFailure(test)
 801a6e8:	b590      	push	{r4, r7, lr}
 801a6ea:	b097      	sub	sp, #92	; 0x5c
 801a6ec:	af00      	add	r7, sp, #0
 801a6ee:	60f8      	str	r0, [r7, #12]
 801a6f0:	60b9      	str	r1, [r7, #8]
 801a6f2:	607a      	str	r2, [r7, #4]
 801a6f4:	603b      	str	r3, [r7, #0]
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	68b9      	ldr	r1, [r7, #8]
 801a6fa:	4618      	mov	r0, r3
 801a6fc:	f7ff fc8a 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a700:	4a90      	ldr	r2, [pc, #576]	; (801a944 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x25c>)
 801a702:	68fb      	ldr	r3, [r7, #12]
 801a704:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a706:	f107 0310 	add.w	r3, r7, #16
 801a70a:	4618      	mov	r0, r3
 801a70c:	f7fe fd8c 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunctionWithParameterName.addExpectationsRelatedTo(functionName, expectations);
 801a710:	f107 0310 	add.w	r3, r7, #16
 801a714:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a716:	6879      	ldr	r1, [r7, #4]
 801a718:	4618      	mov	r0, r3
 801a71a:	f7fe ff2b 	bl	8019574 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>
    expectationsForFunctionWithParameterName.onlyKeepExpectationsWithOutputParameterName(parameter.getName());
 801a71e:	683b      	ldr	r3, [r7, #0]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	335c      	adds	r3, #92	; 0x5c
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	f107 0218 	add.w	r2, r7, #24
 801a72a:	6839      	ldr	r1, [r7, #0]
 801a72c:	4610      	mov	r0, r2
 801a72e:	4798      	blx	r3
 801a730:	f107 0218 	add.w	r2, r7, #24
 801a734:	f107 0310 	add.w	r3, r7, #16
 801a738:	4611      	mov	r1, r2
 801a73a:	4618      	mov	r0, r3
 801a73c:	f7ff f812 	bl	8019764 <_ZN21MockExpectedCallsList43onlyKeepExpectationsWithOutputParameterNameERK12SimpleString>
 801a740:	f107 0318 	add.w	r3, r7, #24
 801a744:	4618      	mov	r0, r3
 801a746:	f7f0 f8fa 	bl	800a93e <_ZN12SimpleStringD1Ev>

    if (expectationsForFunctionWithParameterName.isEmpty()) {
 801a74a:	f107 0310 	add.w	r3, r7, #16
 801a74e:	4618      	mov	r0, r3
 801a750:	f7fe fdeb 	bl	801932a <_ZNK21MockExpectedCallsList7isEmptyEv>
 801a754:	4603      	mov	r3, r0
 801a756:	2b00      	cmp	r3, #0
 801a758:	d037      	beq.n	801a7ca <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0xe2>
        message_ = "Mock Failure: Unexpected output parameter name to function \"";
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a760:	f107 0320 	add.w	r3, r7, #32
 801a764:	4978      	ldr	r1, [pc, #480]	; (801a948 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x260>)
 801a766:	4618      	mov	r0, r3
 801a768:	f7ef fd31 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a76c:	f107 0320 	add.w	r3, r7, #32
 801a770:	4619      	mov	r1, r3
 801a772:	4620      	mov	r0, r4
 801a774:	f7ef fd97 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a778:	f107 0320 	add.w	r3, r7, #32
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7f0 f8de 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += functionName;
 801a782:	68fb      	ldr	r3, [r7, #12]
 801a784:	332c      	adds	r3, #44	; 0x2c
 801a786:	6879      	ldr	r1, [r7, #4]
 801a788:	4618      	mov	r0, r3
 801a78a:	f7f0 f955 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        message_ += "\": ";
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	332c      	adds	r3, #44	; 0x2c
 801a792:	496e      	ldr	r1, [pc, #440]	; (801a94c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x264>)
 801a794:	4618      	mov	r0, r3
 801a796:	f7f0 f961 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a7a0:	683b      	ldr	r3, [r7, #0]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	335c      	adds	r3, #92	; 0x5c
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801a7ac:	6839      	ldr	r1, [r7, #0]
 801a7ae:	4610      	mov	r0, r2
 801a7b0:	4798      	blx	r3
 801a7b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7b6:	4619      	mov	r1, r3
 801a7b8:	4620      	mov	r0, r4
 801a7ba:	f7f0 f93d 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a7be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	f7f0 f8bb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801a7c8:	e059      	b.n	801a87e <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x196>
    }
    else {
        message_ = "Mock Failure: Unexpected parameter type \"";
 801a7ca:	68fb      	ldr	r3, [r7, #12]
 801a7cc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a7d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7d4:	495e      	ldr	r1, [pc, #376]	; (801a950 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x268>)
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f7ef fcf9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a7dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7e0:	4619      	mov	r1, r3
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f7ef fd5f 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a7e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a7ec:	4618      	mov	r0, r3
 801a7ee:	f7f0 f8a6 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += parameter.getType();
 801a7f2:	68fb      	ldr	r3, [r7, #12]
 801a7f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a7f8:	683b      	ldr	r3, [r7, #0]
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	3360      	adds	r3, #96	; 0x60
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801a804:	6839      	ldr	r1, [r7, #0]
 801a806:	4610      	mov	r0, r2
 801a808:	4798      	blx	r3
 801a80a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a80e:	4619      	mov	r1, r3
 801a810:	4620      	mov	r0, r4
 801a812:	f7f0 f911 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801a81a:	4618      	mov	r0, r3
 801a81c:	f7f0 f88f 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += "\" to output parameter \"";
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	332c      	adds	r3, #44	; 0x2c
 801a824:	494b      	ldr	r1, [pc, #300]	; (801a954 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x26c>)
 801a826:	4618      	mov	r0, r3
 801a828:	f7f0 f918 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += parameter.getName();
 801a82c:	68fb      	ldr	r3, [r7, #12]
 801a82e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a832:	683b      	ldr	r3, [r7, #0]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	335c      	adds	r3, #92	; 0x5c
 801a838:	681b      	ldr	r3, [r3, #0]
 801a83a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801a83e:	6839      	ldr	r1, [r7, #0]
 801a840:	4610      	mov	r0, r2
 801a842:	4798      	blx	r3
 801a844:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a848:	4619      	mov	r1, r3
 801a84a:	4620      	mov	r0, r4
 801a84c:	f7f0 f8f4 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a850:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801a854:	4618      	mov	r0, r3
 801a856:	f7f0 f872 	bl	800a93e <_ZN12SimpleStringD1Ev>
        message_ += "\" to function \"";
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	332c      	adds	r3, #44	; 0x2c
 801a85e:	493e      	ldr	r1, [pc, #248]	; (801a958 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x270>)
 801a860:	4618      	mov	r0, r3
 801a862:	f7f0 f8fb 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
        message_ += functionName;
 801a866:	68fb      	ldr	r3, [r7, #12]
 801a868:	332c      	adds	r3, #44	; 0x2c
 801a86a:	6879      	ldr	r1, [r7, #4]
 801a86c:	4618      	mov	r0, r3
 801a86e:	f7f0 f8e3 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
        message_ += "\"";
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	332c      	adds	r3, #44	; 0x2c
 801a876:	4939      	ldr	r1, [pc, #228]	; (801a95c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x274>)
 801a878:	4618      	mov	r0, r3
 801a87a:	f7f0 f8ef 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    }

    message_ += "\n";
 801a87e:	68fb      	ldr	r3, [r7, #12]
 801a880:	332c      	adds	r3, #44	; 0x2c
 801a882:	4937      	ldr	r1, [pc, #220]	; (801a960 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a884:	4618      	mov	r0, r3
 801a886:	f7f0 f8e9 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801a88e:	6879      	ldr	r1, [r7, #4]
 801a890:	4618      	mov	r0, r3
 801a892:	f7ff fc47 	bl	801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tACTUAL unexpected output parameter passed to function: ";
 801a896:	68fb      	ldr	r3, [r7, #12]
 801a898:	332c      	adds	r3, #44	; 0x2c
 801a89a:	4932      	ldr	r1, [pc, #200]	; (801a964 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x27c>)
 801a89c:	4618      	mov	r0, r3
 801a89e:	f7f0 f8dd 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += functionName;
 801a8a2:	68fb      	ldr	r3, [r7, #12]
 801a8a4:	332c      	adds	r3, #44	; 0x2c
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7f0 f8c5 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\n";
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	332c      	adds	r3, #44	; 0x2c
 801a8b2:	492b      	ldr	r1, [pc, #172]	; (801a960 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x278>)
 801a8b4:	4618      	mov	r0, r3
 801a8b6:	f7f0 f8d1 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    message_ += "\t\t";
 801a8ba:	68fb      	ldr	r3, [r7, #12]
 801a8bc:	332c      	adds	r3, #44	; 0x2c
 801a8be:	492a      	ldr	r1, [pc, #168]	; (801a968 <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x280>)
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7f0 f8cb 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getType();
 801a8c6:	68fb      	ldr	r3, [r7, #12]
 801a8c8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a8cc:	683b      	ldr	r3, [r7, #0]
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	3360      	adds	r3, #96	; 0x60
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 801a8d8:	6839      	ldr	r1, [r7, #0]
 801a8da:	4610      	mov	r0, r2
 801a8dc:	4798      	blx	r3
 801a8de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a8e2:	4619      	mov	r1, r3
 801a8e4:	4620      	mov	r0, r4
 801a8e6:	f7f0 f8a7 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a8ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801a8ee:	4618      	mov	r0, r3
 801a8f0:	f7f0 f825 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += " ";
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	332c      	adds	r3, #44	; 0x2c
 801a8f8:	491c      	ldr	r1, [pc, #112]	; (801a96c <_ZN36MockUnexpectedOutputParameterFailureC1EP10UtestShellRK12SimpleStringRK14MockNamedValueRK21MockExpectedCallsList+0x284>)
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f7f0 f8ae 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += parameter.getName();
 801a900:	68fb      	ldr	r3, [r7, #12]
 801a902:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	335c      	adds	r3, #92	; 0x5c
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801a912:	6839      	ldr	r1, [r7, #0]
 801a914:	4610      	mov	r0, r2
 801a916:	4798      	blx	r3
 801a918:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a91c:	4619      	mov	r1, r3
 801a91e:	4620      	mov	r0, r4
 801a920:	f7f0 f88a 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801a924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801a928:	4618      	mov	r0, r3
 801a92a:	f7f0 f808 	bl	800a93e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunctionWithParameterName;
 801a92e:	f107 0310 	add.w	r3, r7, #16
 801a932:	4618      	mov	r0, r3
 801a934:	f7fe fc8c 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	4618      	mov	r0, r3
 801a93c:	375c      	adds	r7, #92	; 0x5c
 801a93e:	46bd      	mov	sp, r7
 801a940:	bd90      	pop	{r4, r7, pc}
 801a942:	bf00      	nop
 801a944:	08024eb4 	.word	0x08024eb4
 801a948:	08023350 	.word	0x08023350
 801a94c:	080232bc 	.word	0x080232bc
 801a950:	08023390 	.word	0x08023390
 801a954:	080233bc 	.word	0x080233bc
 801a958:	080232f8 	.word	0x080232f8
 801a95c:	080233d4 	.word	0x080233d4
 801a960:	08023188 	.word	0x08023188
 801a964:	080233d8 	.word	0x080233d8
 801a968:	0802311c 	.word	0x0802311c
 801a96c:	08023348 	.word	0x08023348

0801a970 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedParameterDidntHappenFailure::MockExpectedParameterDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801a970:	b590      	push	{r4, r7, lr}
 801a972:	b08b      	sub	sp, #44	; 0x2c
 801a974:	af00      	add	r7, sp, #0
 801a976:	60f8      	str	r0, [r7, #12]
 801a978:	60b9      	str	r1, [r7, #8]
 801a97a:	607a      	str	r2, [r7, #4]
 801a97c:	603b      	str	r3, [r7, #0]
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	68b9      	ldr	r1, [r7, #8]
 801a982:	4618      	mov	r0, r3
 801a984:	f7ff fb46 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801a988:	4a30      	ldr	r2, [pc, #192]	; (801aa4c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xdc>)
 801a98a:	68fb      	ldr	r3, [r7, #12]
 801a98c:	601a      	str	r2, [r3, #0]
{
    MockExpectedCallsList expectationsForFunction;
 801a98e:	f107 0310 	add.w	r3, r7, #16
 801a992:	4618      	mov	r0, r3
 801a994:	f7fe fc48 	bl	8019228 <_ZN21MockExpectedCallsListC1Ev>
    expectationsForFunction.addExpectationsRelatedTo(functionName, expectations);
 801a998:	f107 0310 	add.w	r3, r7, #16
 801a99c:	683a      	ldr	r2, [r7, #0]
 801a99e:	6879      	ldr	r1, [r7, #4]
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7fe fde7 	bl	8019574 <_ZN21MockExpectedCallsList24addExpectationsRelatedToERK12SimpleStringRKS_>

    message_ = "Mock Failure: Expected parameter for function \"";
 801a9a6:	68fb      	ldr	r3, [r7, #12]
 801a9a8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801a9ac:	f107 0318 	add.w	r3, r7, #24
 801a9b0:	4927      	ldr	r1, [pc, #156]	; (801aa50 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe0>)
 801a9b2:	4618      	mov	r0, r3
 801a9b4:	f7ef fc0b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801a9b8:	f107 0318 	add.w	r3, r7, #24
 801a9bc:	4619      	mov	r1, r3
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f7ef fc71 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801a9c4:	f107 0318 	add.w	r3, r7, #24
 801a9c8:	4618      	mov	r0, r3
 801a9ca:	f7ef ffb8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    message_ += functionName;
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	332c      	adds	r3, #44	; 0x2c
 801a9d2:	6879      	ldr	r1, [r7, #4]
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7f0 f82f 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
    message_ += "\" did not happen.\n";
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	332c      	adds	r3, #44	; 0x2c
 801a9de:	491d      	ldr	r1, [pc, #116]	; (801aa54 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe4>)
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7f0 f83b 	bl	800aa5c <_ZN12SimpleStringpLEPKc>

    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	683a      	ldr	r2, [r7, #0]
 801a9ea:	6879      	ldr	r1, [r7, #4]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f7ff fb99 	bl	801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>

    message_ += "\n\tMISSING parameters that didn't happen:\n";
 801a9f2:	68fb      	ldr	r3, [r7, #12]
 801a9f4:	332c      	adds	r3, #44	; 0x2c
 801a9f6:	4918      	ldr	r1, [pc, #96]	; (801aa58 <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xe8>)
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	f7f0 f82f 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += "\t\t";
 801a9fe:	68fb      	ldr	r3, [r7, #12]
 801aa00:	332c      	adds	r3, #44	; 0x2c
 801aa02:	4916      	ldr	r1, [pc, #88]	; (801aa5c <_ZN39MockExpectedParameterDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0xec>)
 801aa04:	4618      	mov	r0, r3
 801aa06:	f7f0 f829 	bl	800aa5c <_ZN12SimpleStringpLEPKc>
    message_ += expectationsForFunction.missingParametersToString();
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aa10:	f107 0320 	add.w	r3, r7, #32
 801aa14:	f107 0210 	add.w	r2, r7, #16
 801aa18:	4611      	mov	r1, r2
 801aa1a:	4618      	mov	r0, r3
 801aa1c:	f7ff f9bc 	bl	8019d98 <_ZNK21MockExpectedCallsList25missingParametersToStringEv>
 801aa20:	f107 0320 	add.w	r3, r7, #32
 801aa24:	4619      	mov	r1, r3
 801aa26:	4620      	mov	r0, r4
 801aa28:	f7f0 f806 	bl	800aa38 <_ZN12SimpleStringpLERKS_>
 801aa2c:	f107 0320 	add.w	r3, r7, #32
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7ef ff84 	bl	800a93e <_ZN12SimpleStringD1Ev>
    MockExpectedCallsList expectationsForFunction;
 801aa36:	f107 0310 	add.w	r3, r7, #16
 801aa3a:	4618      	mov	r0, r3
 801aa3c:	f7fe fc08 	bl	8019250 <_ZN21MockExpectedCallsListD1Ev>
}
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	4618      	mov	r0, r3
 801aa44:	372c      	adds	r7, #44	; 0x2c
 801aa46:	46bd      	mov	sp, r7
 801aa48:	bd90      	pop	{r4, r7, pc}
 801aa4a:	bf00      	nop
 801aa4c:	08024e88 	.word	0x08024e88
 801aa50:	08023414 	.word	0x08023414
 801aa54:	08023444 	.word	0x08023444
 801aa58:	08023458 	.word	0x08023458
 801aa5c:	0802311c 	.word	0x0802311c

0801aa60 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCompareCustomTypeFailure::MockNoWayToCompareCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801aa60:	b590      	push	{r4, r7, lr}
 801aa62:	b087      	sub	sp, #28
 801aa64:	af00      	add	r7, sp, #0
 801aa66:	60f8      	str	r0, [r7, #12]
 801aa68:	60b9      	str	r1, [r7, #8]
 801aa6a:	607a      	str	r2, [r7, #4]
 801aa6c:	68fb      	ldr	r3, [r7, #12]
 801aa6e:	68b9      	ldr	r1, [r7, #8]
 801aa70:	4618      	mov	r0, r3
 801aa72:	f7ff facf 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801aa76:	4a10      	ldr	r2, [pc, #64]	; (801aab8 <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801aa78:	68fb      	ldr	r3, [r7, #12]
 801aa7a:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to compare type <%s>. Please install a MockNamedValueComparator.", typeName.asCharString());
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aa82:	6878      	ldr	r0, [r7, #4]
 801aa84:	f7ef ff2e 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801aa88:	4602      	mov	r2, r0
 801aa8a:	f107 0310 	add.w	r3, r7, #16
 801aa8e:	490b      	ldr	r1, [pc, #44]	; (801aabc <_ZN35MockNoWayToCompareCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801aa90:	4618      	mov	r0, r3
 801aa92:	f7f0 fc5b 	bl	800b34c <_Z16StringFromFormatPKcz>
 801aa96:	f107 0310 	add.w	r3, r7, #16
 801aa9a:	4619      	mov	r1, r3
 801aa9c:	4620      	mov	r0, r4
 801aa9e:	f7ef fc02 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801aaa2:	f107 0310 	add.w	r3, r7, #16
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7ef ff49 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801aaac:	68fb      	ldr	r3, [r7, #12]
 801aaae:	4618      	mov	r0, r3
 801aab0:	371c      	adds	r7, #28
 801aab2:	46bd      	mov	sp, r7
 801aab4:	bd90      	pop	{r4, r7, pc}
 801aab6:	bf00      	nop
 801aab8:	08024e5c 	.word	0x08024e5c
 801aabc:	08023484 	.word	0x08023484

0801aac0 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString>:

MockNoWayToCopyCustomTypeFailure::MockNoWayToCopyCustomTypeFailure(UtestShell* test, const SimpleString& typeName) : MockFailure(test)
 801aac0:	b590      	push	{r4, r7, lr}
 801aac2:	b087      	sub	sp, #28
 801aac4:	af00      	add	r7, sp, #0
 801aac6:	60f8      	str	r0, [r7, #12]
 801aac8:	60b9      	str	r1, [r7, #8]
 801aaca:	607a      	str	r2, [r7, #4]
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	68b9      	ldr	r1, [r7, #8]
 801aad0:	4618      	mov	r0, r3
 801aad2:	f7ff fa9f 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801aad6:	4a10      	ldr	r2, [pc, #64]	; (801ab18 <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x58>)
 801aad8:	68fb      	ldr	r3, [r7, #12]
 801aada:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("MockFailure: No way to copy type <%s>. Please install a MockNamedValueCopier.", typeName.asCharString());
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f7ef fefe 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801aae8:	4602      	mov	r2, r0
 801aaea:	f107 0310 	add.w	r3, r7, #16
 801aaee:	490b      	ldr	r1, [pc, #44]	; (801ab1c <_ZN32MockNoWayToCopyCustomTypeFailureC1EP10UtestShellRK12SimpleString+0x5c>)
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f7f0 fc2b 	bl	800b34c <_Z16StringFromFormatPKcz>
 801aaf6:	f107 0310 	add.w	r3, r7, #16
 801aafa:	4619      	mov	r1, r3
 801aafc:	4620      	mov	r0, r4
 801aafe:	f7ef fbd2 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801ab02:	f107 0310 	add.w	r3, r7, #16
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7ef ff19 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801ab0c:	68fb      	ldr	r3, [r7, #12]
 801ab0e:	4618      	mov	r0, r3
 801ab10:	371c      	adds	r7, #28
 801ab12:	46bd      	mov	sp, r7
 801ab14:	bd90      	pop	{r4, r7, pc}
 801ab16:	bf00      	nop
 801ab18:	08024e30 	.word	0x08024e30
 801ab1c:	080234dc 	.word	0x080234dc

0801ab20 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList>:

MockUnexpectedObjectFailure::MockUnexpectedObjectFailure(UtestShell* test, const SimpleString& functionName, const void* actual, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ab20:	b590      	push	{r4, r7, lr}
 801ab22:	b087      	sub	sp, #28
 801ab24:	af00      	add	r7, sp, #0
 801ab26:	60f8      	str	r0, [r7, #12]
 801ab28:	60b9      	str	r1, [r7, #8]
 801ab2a:	607a      	str	r2, [r7, #4]
 801ab2c:	603b      	str	r3, [r7, #0]
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	68b9      	ldr	r1, [r7, #8]
 801ab32:	4618      	mov	r0, r3
 801ab34:	f7ff fa6e 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801ab38:	4a12      	ldr	r2, [pc, #72]	; (801ab84 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x64>)
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	f103 042c 	add.w	r4, r3, #44	; 0x2c
    message_ = StringFromFormat ("MockFailure: Function called on an unexpected object: %s\n"
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	f7ef fecd 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801ab4a:	4602      	mov	r2, r0
 801ab4c:	f107 0010 	add.w	r0, r7, #16
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	490d      	ldr	r1, [pc, #52]	; (801ab88 <_ZN27MockUnexpectedObjectFailureC1EP10UtestShellRK12SimpleStringPKvRK21MockExpectedCallsList+0x68>)
 801ab54:	f7f0 fbfa 	bl	800b34c <_Z16StringFromFormatPKcz>
                                 "\tActual object for call has address: <%p>\n", functionName.asCharString(),actual);
 801ab58:	f107 0310 	add.w	r3, r7, #16
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	4620      	mov	r0, r4
 801ab60:	f7ef fba1 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801ab64:	f107 0310 	add.w	r3, r7, #16
 801ab68:	4618      	mov	r0, r3
 801ab6a:	f7ef fee8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ab72:	6879      	ldr	r1, [r7, #4]
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7ff fad5 	bl	801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	371c      	adds	r7, #28
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd90      	pop	{r4, r7, pc}
 801ab84:	08024e04 	.word	0x08024e04
 801ab88:	0802352c 	.word	0x0802352c

0801ab8c <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList>:

MockExpectedObjectDidntHappenFailure::MockExpectedObjectDidntHappenFailure(UtestShell* test, const SimpleString& functionName, const MockExpectedCallsList& expectations) : MockFailure(test)
 801ab8c:	b590      	push	{r4, r7, lr}
 801ab8e:	b087      	sub	sp, #28
 801ab90:	af00      	add	r7, sp, #0
 801ab92:	60f8      	str	r0, [r7, #12]
 801ab94:	60b9      	str	r1, [r7, #8]
 801ab96:	607a      	str	r2, [r7, #4]
 801ab98:	603b      	str	r3, [r7, #0]
 801ab9a:	68fb      	ldr	r3, [r7, #12]
 801ab9c:	68b9      	ldr	r1, [r7, #8]
 801ab9e:	4618      	mov	r0, r3
 801aba0:	f7ff fa38 	bl	801a014 <_ZN11MockFailureC1EP10UtestShell>
 801aba4:	4a12      	ldr	r2, [pc, #72]	; (801abf0 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x64>)
 801aba6:	68fb      	ldr	r3, [r7, #12]
 801aba8:	601a      	str	r2, [r3, #0]
{
    message_ = StringFromFormat("Mock Failure: Expected call on object for function \"%s\" but it did not happen.\n", functionName.asCharString());
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 801abb0:	6878      	ldr	r0, [r7, #4]
 801abb2:	f7ef fe97 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801abb6:	4602      	mov	r2, r0
 801abb8:	f107 0310 	add.w	r3, r7, #16
 801abbc:	490d      	ldr	r1, [pc, #52]	; (801abf4 <_ZN36MockExpectedObjectDidntHappenFailureC1EP10UtestShellRK12SimpleStringRK21MockExpectedCallsList+0x68>)
 801abbe:	4618      	mov	r0, r3
 801abc0:	f7f0 fbc4 	bl	800b34c <_Z16StringFromFormatPKcz>
 801abc4:	f107 0310 	add.w	r3, r7, #16
 801abc8:	4619      	mov	r1, r3
 801abca:	4620      	mov	r0, r4
 801abcc:	f7ef fb6b 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801abd0:	f107 0310 	add.w	r3, r7, #16
 801abd4:	4618      	mov	r0, r3
 801abd6:	f7ef feb2 	bl	800a93e <_ZN12SimpleStringD1Ev>
    addExpectationsAndCallHistoryRelatedTo(functionName, expectations);
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	683a      	ldr	r2, [r7, #0]
 801abde:	6879      	ldr	r1, [r7, #4]
 801abe0:	4618      	mov	r0, r3
 801abe2:	f7ff fa9f 	bl	801a124 <_ZN11MockFailure38addExpectationsAndCallHistoryRelatedToERK12SimpleStringRK21MockExpectedCallsList>
}
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	4618      	mov	r0, r3
 801abea:	371c      	adds	r7, #28
 801abec:	46bd      	mov	sp, r7
 801abee:	bd90      	pop	{r4, r7, pc}
 801abf0:	08024dd8 	.word	0x08024dd8
 801abf4:	08023590 	.word	0x08023590

0801abf8 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository>:

MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::defaultRepository_ = NULLPTR;
const double MockNamedValue::defaultDoubleTolerance = 0.005;

void MockNamedValue::setDefaultComparatorsAndCopiersRepository(MockNamedValueComparatorsAndCopiersRepository* repository)
{
 801abf8:	b480      	push	{r7}
 801abfa:	b083      	sub	sp, #12
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
    defaultRepository_ = repository;
 801ac00:	4a04      	ldr	r2, [pc, #16]	; (801ac14 <_ZN14MockNamedValue41setDefaultComparatorsAndCopiersRepositoryEP45MockNamedValueComparatorsAndCopiersRepository+0x1c>)
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6013      	str	r3, [r2, #0]
}
 801ac06:	bf00      	nop
 801ac08:	370c      	adds	r7, #12
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac10:	4770      	bx	lr
 801ac12:	bf00      	nop
 801ac14:	20000cd4 	.word	0x20000cd4

0801ac18 <_ZN14MockNamedValueC1ERK12SimpleString>:
MockNamedValueComparatorsAndCopiersRepository* MockNamedValue::getDefaultComparatorsAndCopiersRepository()
{
    return defaultRepository_;
}

MockNamedValue::MockNamedValue(const SimpleString& name) : name_(name), type_("int"), size_(0), comparator_(NULLPTR), copier_(NULLPTR)
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b082      	sub	sp, #8
 801ac1c:	af00      	add	r7, sp, #0
 801ac1e:	6078      	str	r0, [r7, #4]
 801ac20:	6039      	str	r1, [r7, #0]
 801ac22:	4a10      	ldr	r2, [pc, #64]	; (801ac64 <_ZN14MockNamedValueC1ERK12SimpleString+0x4c>)
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	601a      	str	r2, [r3, #0]
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	3304      	adds	r3, #4
 801ac2c:	6839      	ldr	r1, [r7, #0]
 801ac2e:	4618      	mov	r0, r3
 801ac30:	f7ef fb21 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	330c      	adds	r3, #12
 801ac38:	490b      	ldr	r1, [pc, #44]	; (801ac68 <_ZN14MockNamedValueC1ERK12SimpleString+0x50>)
 801ac3a:	4618      	mov	r0, r3
 801ac3c:	f7ef fac7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2200      	movs	r2, #0
 801ac44:	629a      	str	r2, [r3, #40]	; 0x28
 801ac46:	687b      	ldr	r3, [r7, #4]
 801ac48:	2200      	movs	r2, #0
 801ac4a:	62da      	str	r2, [r3, #44]	; 0x2c
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2200      	movs	r2, #0
 801ac50:	631a      	str	r2, [r3, #48]	; 0x30
{
    value_.intValue_ = 0;
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	2200      	movs	r2, #0
 801ac56:	619a      	str	r2, [r3, #24]
}
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	4618      	mov	r0, r3
 801ac5c:	3708      	adds	r7, #8
 801ac5e:	46bd      	mov	sp, r7
 801ac60:	bd80      	pop	{r7, pc}
 801ac62:	bf00      	nop
 801ac64:	08025660 	.word	0x08025660
 801ac68:	080235e0 	.word	0x080235e0

0801ac6c <_ZN14MockNamedValueD1Ev>:

MockNamedValue::~MockNamedValue()
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
 801ac74:	4a08      	ldr	r2, [pc, #32]	; (801ac98 <_ZN14MockNamedValueD1Ev+0x2c>)
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	601a      	str	r2, [r3, #0]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	330c      	adds	r3, #12
 801ac7e:	4618      	mov	r0, r3
 801ac80:	f7ef fe5d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	3304      	adds	r3, #4
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f7ef fe58 	bl	800a93e <_ZN12SimpleStringD1Ev>
{
}
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	4618      	mov	r0, r3
 801ac92:	3708      	adds	r7, #8
 801ac94:	46bd      	mov	sp, r7
 801ac96:	bd80      	pop	{r7, pc}
 801ac98:	08025660 	.word	0x08025660

0801ac9c <_ZN14MockNamedValueD0Ev>:
MockNamedValue::~MockNamedValue()
 801ac9c:	b580      	push	{r7, lr}
 801ac9e:	b082      	sub	sp, #8
 801aca0:	af00      	add	r7, sp, #0
 801aca2:	6078      	str	r0, [r7, #4]
}
 801aca4:	6878      	ldr	r0, [r7, #4]
 801aca6:	f7ff ffe1 	bl	801ac6c <_ZN14MockNamedValueD1Ev>
 801acaa:	2138      	movs	r1, #56	; 0x38
 801acac:	6878      	ldr	r0, [r7, #4]
 801acae:	f7ec fedf 	bl	8007a70 <_ZdlPvj>
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	4618      	mov	r0, r3
 801acb6:	3708      	adds	r7, #8
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <_ZN14MockNamedValue8setValueEb>:

void MockNamedValue::setValue(bool value)
{
 801acbc:	b590      	push	{r4, r7, lr}
 801acbe:	b085      	sub	sp, #20
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	460b      	mov	r3, r1
 801acc6:	70fb      	strb	r3, [r7, #3]
    type_ = "bool";
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	f103 040c 	add.w	r4, r3, #12
 801acce:	f107 0308 	add.w	r3, r7, #8
 801acd2:	490b      	ldr	r1, [pc, #44]	; (801ad00 <_ZN14MockNamedValue8setValueEb+0x44>)
 801acd4:	4618      	mov	r0, r3
 801acd6:	f7ef fa7a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801acda:	f107 0308 	add.w	r3, r7, #8
 801acde:	4619      	mov	r1, r3
 801ace0:	4620      	mov	r0, r4
 801ace2:	f7ef fae0 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801ace6:	f107 0308 	add.w	r3, r7, #8
 801acea:	4618      	mov	r0, r3
 801acec:	f7ef fe27 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.boolValue_ = value;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	78fa      	ldrb	r2, [r7, #3]
 801acf4:	761a      	strb	r2, [r3, #24]
}
 801acf6:	bf00      	nop
 801acf8:	3714      	adds	r7, #20
 801acfa:	46bd      	mov	sp, r7
 801acfc:	bd90      	pop	{r4, r7, pc}
 801acfe:	bf00      	nop
 801ad00:	080235e4 	.word	0x080235e4

0801ad04 <_ZN14MockNamedValue8setValueEj>:

void MockNamedValue::setValue(unsigned int value)
{
 801ad04:	b590      	push	{r4, r7, lr}
 801ad06:	b085      	sub	sp, #20
 801ad08:	af00      	add	r7, sp, #0
 801ad0a:	6078      	str	r0, [r7, #4]
 801ad0c:	6039      	str	r1, [r7, #0]
    type_ = "unsigned int";
 801ad0e:	687b      	ldr	r3, [r7, #4]
 801ad10:	f103 040c 	add.w	r4, r3, #12
 801ad14:	f107 0308 	add.w	r3, r7, #8
 801ad18:	490a      	ldr	r1, [pc, #40]	; (801ad44 <_ZN14MockNamedValue8setValueEj+0x40>)
 801ad1a:	4618      	mov	r0, r3
 801ad1c:	f7ef fa57 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ad20:	f107 0308 	add.w	r3, r7, #8
 801ad24:	4619      	mov	r1, r3
 801ad26:	4620      	mov	r0, r4
 801ad28:	f7ef fabd 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801ad2c:	f107 0308 	add.w	r3, r7, #8
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7ef fe04 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.unsignedIntValue_ = value;
 801ad36:	687b      	ldr	r3, [r7, #4]
 801ad38:	683a      	ldr	r2, [r7, #0]
 801ad3a:	619a      	str	r2, [r3, #24]
}
 801ad3c:	bf00      	nop
 801ad3e:	3714      	adds	r7, #20
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd90      	pop	{r4, r7, pc}
 801ad44:	080235ec 	.word	0x080235ec

0801ad48 <_ZN14MockNamedValue8setValueEi>:

void MockNamedValue::setValue(int value)
{
 801ad48:	b590      	push	{r4, r7, lr}
 801ad4a:	b085      	sub	sp, #20
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6039      	str	r1, [r7, #0]
    type_ = "int";
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	f103 040c 	add.w	r4, r3, #12
 801ad58:	f107 0308 	add.w	r3, r7, #8
 801ad5c:	490a      	ldr	r1, [pc, #40]	; (801ad88 <_ZN14MockNamedValue8setValueEi+0x40>)
 801ad5e:	4618      	mov	r0, r3
 801ad60:	f7ef fa35 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ad64:	f107 0308 	add.w	r3, r7, #8
 801ad68:	4619      	mov	r1, r3
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	f7ef fa9b 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801ad70:	f107 0308 	add.w	r3, r7, #8
 801ad74:	4618      	mov	r0, r3
 801ad76:	f7ef fde2 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.intValue_ = value;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	683a      	ldr	r2, [r7, #0]
 801ad7e:	619a      	str	r2, [r3, #24]
}
 801ad80:	bf00      	nop
 801ad82:	3714      	adds	r7, #20
 801ad84:	46bd      	mov	sp, r7
 801ad86:	bd90      	pop	{r4, r7, pc}
 801ad88:	080235e0 	.word	0x080235e0

0801ad8c <_ZN14MockNamedValue8setValueEl>:

void MockNamedValue::setValue(long int value)
{
 801ad8c:	b590      	push	{r4, r7, lr}
 801ad8e:	b085      	sub	sp, #20
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	6039      	str	r1, [r7, #0]
    type_ = "long int";
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f103 040c 	add.w	r4, r3, #12
 801ad9c:	f107 0308 	add.w	r3, r7, #8
 801ada0:	490a      	ldr	r1, [pc, #40]	; (801adcc <_ZN14MockNamedValue8setValueEl+0x40>)
 801ada2:	4618      	mov	r0, r3
 801ada4:	f7ef fa13 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ada8:	f107 0308 	add.w	r3, r7, #8
 801adac:	4619      	mov	r1, r3
 801adae:	4620      	mov	r0, r4
 801adb0:	f7ef fa79 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801adb4:	f107 0308 	add.w	r3, r7, #8
 801adb8:	4618      	mov	r0, r3
 801adba:	f7ef fdc0 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.longIntValue_ = value;
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	683a      	ldr	r2, [r7, #0]
 801adc2:	619a      	str	r2, [r3, #24]
}
 801adc4:	bf00      	nop
 801adc6:	3714      	adds	r7, #20
 801adc8:	46bd      	mov	sp, r7
 801adca:	bd90      	pop	{r4, r7, pc}
 801adcc:	080235fc 	.word	0x080235fc

0801add0 <_ZN14MockNamedValue8setValueEm>:

void MockNamedValue::setValue(unsigned long int value)
{
 801add0:	b590      	push	{r4, r7, lr}
 801add2:	b085      	sub	sp, #20
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	6039      	str	r1, [r7, #0]
    type_ = "unsigned long int";
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	f103 040c 	add.w	r4, r3, #12
 801ade0:	f107 0308 	add.w	r3, r7, #8
 801ade4:	490a      	ldr	r1, [pc, #40]	; (801ae10 <_ZN14MockNamedValue8setValueEm+0x40>)
 801ade6:	4618      	mov	r0, r3
 801ade8:	f7ef f9f1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801adec:	f107 0308 	add.w	r3, r7, #8
 801adf0:	4619      	mov	r1, r3
 801adf2:	4620      	mov	r0, r4
 801adf4:	f7ef fa57 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801adf8:	f107 0308 	add.w	r3, r7, #8
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7ef fd9e 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.unsignedLongIntValue_ = value;
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	683a      	ldr	r2, [r7, #0]
 801ae06:	619a      	str	r2, [r3, #24]
}
 801ae08:	bf00      	nop
 801ae0a:	3714      	adds	r7, #20
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd90      	pop	{r4, r7, pc}
 801ae10:	08023608 	.word	0x08023608

0801ae14 <_ZN14MockNamedValue8setValueE17cpputest_longlong>:
}

#else

void MockNamedValue::setValue(cpputest_longlong)
{
 801ae14:	b5b0      	push	{r4, r5, r7, lr}
 801ae16:	b086      	sub	sp, #24
 801ae18:	af02      	add	r7, sp, #8
 801ae1a:	60f8      	str	r0, [r7, #12]
 801ae1c:	1d3b      	adds	r3, r7, #4
 801ae1e:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Long Long type is not supported");
 801ae22:	f7f6 fdb7 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801ae26:	4604      	mov	r4, r0
 801ae28:	6823      	ldr	r3, [r4, #0]
 801ae2a:	3368      	adds	r3, #104	; 0x68
 801ae2c:	681d      	ldr	r5, [r3, #0]
 801ae2e:	f7f6 fdc1 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae32:	4603      	mov	r3, r0
 801ae34:	9300      	str	r3, [sp, #0]
 801ae36:	2367      	movs	r3, #103	; 0x67
 801ae38:	4a03      	ldr	r2, [pc, #12]	; (801ae48 <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x34>)
 801ae3a:	4904      	ldr	r1, [pc, #16]	; (801ae4c <_ZN14MockNamedValue8setValueE17cpputest_longlong+0x38>)
 801ae3c:	4620      	mov	r0, r4
 801ae3e:	47a8      	blx	r5
}
 801ae40:	bf00      	nop
 801ae42:	3710      	adds	r7, #16
 801ae44:	46bd      	mov	sp, r7
 801ae46:	bdb0      	pop	{r4, r5, r7, pc}
 801ae48:	0802361c 	.word	0x0802361c
 801ae4c:	08023638 	.word	0x08023638

0801ae50 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong>:

void MockNamedValue::setValue(cpputest_ulonglong)
{
 801ae50:	b5b0      	push	{r4, r5, r7, lr}
 801ae52:	b086      	sub	sp, #24
 801ae54:	af02      	add	r7, sp, #8
 801ae56:	60f8      	str	r0, [r7, #12]
 801ae58:	1d3b      	adds	r3, r7, #4
 801ae5a:	e883 0006 	stmia.w	r3, {r1, r2}
    FAIL("Unsigned Long Long type is not supported");
 801ae5e:	f7f6 fd99 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801ae62:	4604      	mov	r4, r0
 801ae64:	6823      	ldr	r3, [r4, #0]
 801ae66:	3368      	adds	r3, #104	; 0x68
 801ae68:	681d      	ldr	r5, [r3, #0]
 801ae6a:	f7f6 fda3 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801ae6e:	4603      	mov	r3, r0
 801ae70:	9300      	str	r3, [sp, #0]
 801ae72:	236c      	movs	r3, #108	; 0x6c
 801ae74:	4a03      	ldr	r2, [pc, #12]	; (801ae84 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x34>)
 801ae76:	4904      	ldr	r1, [pc, #16]	; (801ae88 <_ZN14MockNamedValue8setValueE18cpputest_ulonglong+0x38>)
 801ae78:	4620      	mov	r0, r4
 801ae7a:	47a8      	blx	r5
}
 801ae7c:	bf00      	nop
 801ae7e:	3710      	adds	r7, #16
 801ae80:	46bd      	mov	sp, r7
 801ae82:	bdb0      	pop	{r4, r5, r7, pc}
 801ae84:	0802361c 	.word	0x0802361c
 801ae88:	08023658 	.word	0x08023658
 801ae8c:	00000000 	.word	0x00000000

0801ae90 <_ZN14MockNamedValue8setValueEd>:

#endif

void MockNamedValue::setValue(double value)
{
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b084      	sub	sp, #16
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	60f8      	str	r0, [r7, #12]
 801ae98:	ed87 0b00 	vstr	d0, [r7]
    setValue(value, defaultDoubleTolerance);
 801ae9c:	68fb      	ldr	r3, [r7, #12]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	3328      	adds	r3, #40	; 0x28
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 801aeb8 <_ZN14MockNamedValue8setValueEd+0x28>
 801aea8:	ed97 0b00 	vldr	d0, [r7]
 801aeac:	68f8      	ldr	r0, [r7, #12]
 801aeae:	4798      	blx	r3
}
 801aeb0:	bf00      	nop
 801aeb2:	3710      	adds	r7, #16
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	47ae147b 	.word	0x47ae147b
 801aebc:	3f747ae1 	.word	0x3f747ae1

0801aec0 <_ZN14MockNamedValue8setValueEdd>:

void MockNamedValue::setValue(double value, double tolerance)
{
 801aec0:	b590      	push	{r4, r7, lr}
 801aec2:	b089      	sub	sp, #36	; 0x24
 801aec4:	af00      	add	r7, sp, #0
 801aec6:	6178      	str	r0, [r7, #20]
 801aec8:	ed87 0b02 	vstr	d0, [r7, #8]
 801aecc:	ed87 1b00 	vstr	d1, [r7]
    type_ = "double";
 801aed0:	697b      	ldr	r3, [r7, #20]
 801aed2:	f103 040c 	add.w	r4, r3, #12
 801aed6:	f107 0318 	add.w	r3, r7, #24
 801aeda:	490e      	ldr	r1, [pc, #56]	; (801af14 <_ZN14MockNamedValue8setValueEdd+0x54>)
 801aedc:	4618      	mov	r0, r3
 801aede:	f7ef f976 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801aee2:	f107 0318 	add.w	r3, r7, #24
 801aee6:	4619      	mov	r1, r3
 801aee8:	4620      	mov	r0, r4
 801aeea:	f7ef f9dc 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801aeee:	f107 0318 	add.w	r3, r7, #24
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7ef fd23 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.doubleValue_.value = value;
 801aef8:	6979      	ldr	r1, [r7, #20]
 801aefa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801aefe:	e9c1 2306 	strd	r2, r3, [r1, #24]
    value_.doubleValue_.tolerance = tolerance;
 801af02:	6979      	ldr	r1, [r7, #20]
 801af04:	e9d7 2300 	ldrd	r2, r3, [r7]
 801af08:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 801af0c:	bf00      	nop
 801af0e:	3724      	adds	r7, #36	; 0x24
 801af10:	46bd      	mov	sp, r7
 801af12:	bd90      	pop	{r4, r7, pc}
 801af14:	08023684 	.word	0x08023684

0801af18 <_ZN14MockNamedValue8setValueEPv>:

void MockNamedValue::setValue(void* value)
{
 801af18:	b590      	push	{r4, r7, lr}
 801af1a:	b085      	sub	sp, #20
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
 801af20:	6039      	str	r1, [r7, #0]
    type_ = "void*";
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	f103 040c 	add.w	r4, r3, #12
 801af28:	f107 0308 	add.w	r3, r7, #8
 801af2c:	490a      	ldr	r1, [pc, #40]	; (801af58 <_ZN14MockNamedValue8setValueEPv+0x40>)
 801af2e:	4618      	mov	r0, r3
 801af30:	f7ef f94d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801af34:	f107 0308 	add.w	r3, r7, #8
 801af38:	4619      	mov	r1, r3
 801af3a:	4620      	mov	r0, r4
 801af3c:	f7ef f9b3 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801af40:	f107 0308 	add.w	r3, r7, #8
 801af44:	4618      	mov	r0, r3
 801af46:	f7ef fcfa 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.pointerValue_ = value;
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	683a      	ldr	r2, [r7, #0]
 801af4e:	619a      	str	r2, [r3, #24]
}
 801af50:	bf00      	nop
 801af52:	3714      	adds	r7, #20
 801af54:	46bd      	mov	sp, r7
 801af56:	bd90      	pop	{r4, r7, pc}
 801af58:	0802368c 	.word	0x0802368c

0801af5c <_ZN14MockNamedValue8setValueEPKv>:

void MockNamedValue::setValue(const void* value)
{
 801af5c:	b590      	push	{r4, r7, lr}
 801af5e:	b085      	sub	sp, #20
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]
 801af64:	6039      	str	r1, [r7, #0]
    type_ = "const void*";
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	f103 040c 	add.w	r4, r3, #12
 801af6c:	f107 0308 	add.w	r3, r7, #8
 801af70:	490a      	ldr	r1, [pc, #40]	; (801af9c <_ZN14MockNamedValue8setValueEPKv+0x40>)
 801af72:	4618      	mov	r0, r3
 801af74:	f7ef f92b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801af78:	f107 0308 	add.w	r3, r7, #8
 801af7c:	4619      	mov	r1, r3
 801af7e:	4620      	mov	r0, r4
 801af80:	f7ef f991 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801af84:	f107 0308 	add.w	r3, r7, #8
 801af88:	4618      	mov	r0, r3
 801af8a:	f7ef fcd8 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.constPointerValue_ = value;
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	683a      	ldr	r2, [r7, #0]
 801af92:	619a      	str	r2, [r3, #24]
}
 801af94:	bf00      	nop
 801af96:	3714      	adds	r7, #20
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd90      	pop	{r4, r7, pc}
 801af9c:	08023694 	.word	0x08023694

0801afa0 <_ZN14MockNamedValue8setValueEPFvvE>:

void MockNamedValue::setValue(void (*value)())
{
 801afa0:	b590      	push	{r4, r7, lr}
 801afa2:	b085      	sub	sp, #20
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
 801afa8:	6039      	str	r1, [r7, #0]
    type_ = "void (*)()";
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	f103 040c 	add.w	r4, r3, #12
 801afb0:	f107 0308 	add.w	r3, r7, #8
 801afb4:	490a      	ldr	r1, [pc, #40]	; (801afe0 <_ZN14MockNamedValue8setValueEPFvvE+0x40>)
 801afb6:	4618      	mov	r0, r3
 801afb8:	f7ef f909 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801afbc:	f107 0308 	add.w	r3, r7, #8
 801afc0:	4619      	mov	r1, r3
 801afc2:	4620      	mov	r0, r4
 801afc4:	f7ef f96f 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801afc8:	f107 0308 	add.w	r3, r7, #8
 801afcc:	4618      	mov	r0, r3
 801afce:	f7ef fcb6 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.functionPointerValue_ = value;
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	683a      	ldr	r2, [r7, #0]
 801afd6:	619a      	str	r2, [r3, #24]
}
 801afd8:	bf00      	nop
 801afda:	3714      	adds	r7, #20
 801afdc:	46bd      	mov	sp, r7
 801afde:	bd90      	pop	{r4, r7, pc}
 801afe0:	080236a0 	.word	0x080236a0

0801afe4 <_ZN14MockNamedValue8setValueEPKc>:

void MockNamedValue::setValue(const char* value)
{
 801afe4:	b590      	push	{r4, r7, lr}
 801afe6:	b085      	sub	sp, #20
 801afe8:	af00      	add	r7, sp, #0
 801afea:	6078      	str	r0, [r7, #4]
 801afec:	6039      	str	r1, [r7, #0]
    type_ = "const char*";
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	f103 040c 	add.w	r4, r3, #12
 801aff4:	f107 0308 	add.w	r3, r7, #8
 801aff8:	490a      	ldr	r1, [pc, #40]	; (801b024 <_ZN14MockNamedValue8setValueEPKc+0x40>)
 801affa:	4618      	mov	r0, r3
 801affc:	f7ef f8e7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b000:	f107 0308 	add.w	r3, r7, #8
 801b004:	4619      	mov	r1, r3
 801b006:	4620      	mov	r0, r4
 801b008:	f7ef f94d 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801b00c:	f107 0308 	add.w	r3, r7, #8
 801b010:	4618      	mov	r0, r3
 801b012:	f7ef fc94 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.stringValue_ = value;
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	683a      	ldr	r2, [r7, #0]
 801b01a:	619a      	str	r2, [r3, #24]
}
 801b01c:	bf00      	nop
 801b01e:	3714      	adds	r7, #20
 801b020:	46bd      	mov	sp, r7
 801b022:	bd90      	pop	{r4, r7, pc}
 801b024:	080236ac 	.word	0x080236ac

0801b028 <_ZN14MockNamedValue15setMemoryBufferEPKhj>:

void MockNamedValue::setMemoryBuffer(const unsigned char* value, size_t size)
{
 801b028:	b590      	push	{r4, r7, lr}
 801b02a:	b087      	sub	sp, #28
 801b02c:	af00      	add	r7, sp, #0
 801b02e:	60f8      	str	r0, [r7, #12]
 801b030:	60b9      	str	r1, [r7, #8]
 801b032:	607a      	str	r2, [r7, #4]
    type_ = "const unsigned char*";
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	f103 040c 	add.w	r4, r3, #12
 801b03a:	f107 0310 	add.w	r3, r7, #16
 801b03e:	490c      	ldr	r1, [pc, #48]	; (801b070 <_ZN14MockNamedValue15setMemoryBufferEPKhj+0x48>)
 801b040:	4618      	mov	r0, r3
 801b042:	f7ef f8c4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b046:	f107 0310 	add.w	r3, r7, #16
 801b04a:	4619      	mov	r1, r3
 801b04c:	4620      	mov	r0, r4
 801b04e:	f7ef f92a 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801b052:	f107 0310 	add.w	r3, r7, #16
 801b056:	4618      	mov	r0, r3
 801b058:	f7ef fc71 	bl	800a93e <_ZN12SimpleStringD1Ev>
    value_.memoryBufferValue_ = value;
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	68ba      	ldr	r2, [r7, #8]
 801b060:	619a      	str	r2, [r3, #24]
    size_ = size;
 801b062:	68fb      	ldr	r3, [r7, #12]
 801b064:	687a      	ldr	r2, [r7, #4]
 801b066:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b068:	bf00      	nop
 801b06a:	371c      	adds	r7, #28
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd90      	pop	{r4, r7, pc}
 801b070:	080236b8 	.word	0x080236b8

0801b074 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv>:

void MockNamedValue::setConstObjectPointer(const SimpleString& type, const void* objectPtr)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b084      	sub	sp, #16
 801b078:	af00      	add	r7, sp, #0
 801b07a:	60f8      	str	r0, [r7, #12]
 801b07c:	60b9      	str	r1, [r7, #8]
 801b07e:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b080:	68fb      	ldr	r3, [r7, #12]
 801b082:	330c      	adds	r3, #12
 801b084:	68b9      	ldr	r1, [r7, #8]
 801b086:	4618      	mov	r0, r3
 801b088:	f7ef f90d 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
    value_.constObjectPointerValue_ = objectPtr;
 801b08c:	68fb      	ldr	r3, [r7, #12]
 801b08e:	687a      	ldr	r2, [r7, #4]
 801b090:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b092:	4b11      	ldr	r3, [pc, #68]	; (801b0d8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d019      	beq.n	801b0ce <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b09a:	4b0f      	ldr	r3, [pc, #60]	; (801b0d8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b09c:	681a      	ldr	r2, [r3, #0]
 801b09e:	4b0e      	ldr	r3, [pc, #56]	; (801b0d8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b0a0:	681b      	ldr	r3, [r3, #0]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	3314      	adds	r3, #20
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	68b9      	ldr	r1, [r7, #8]
 801b0aa:	4610      	mov	r0, r2
 801b0ac:	4798      	blx	r3
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	68fb      	ldr	r3, [r7, #12]
 801b0b2:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b0b4:	4b08      	ldr	r3, [pc, #32]	; (801b0d8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b0b6:	681a      	ldr	r2, [r3, #0]
 801b0b8:	4b07      	ldr	r3, [pc, #28]	; (801b0d8 <_ZN14MockNamedValue21setConstObjectPointerERK12SimpleStringPKv+0x64>)
 801b0ba:	681b      	ldr	r3, [r3, #0]
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	3318      	adds	r3, #24
 801b0c0:	681b      	ldr	r3, [r3, #0]
 801b0c2:	68b9      	ldr	r1, [r7, #8]
 801b0c4:	4610      	mov	r0, r2
 801b0c6:	4798      	blx	r3
 801b0c8:	4602      	mov	r2, r0
 801b0ca:	68fb      	ldr	r3, [r7, #12]
 801b0cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b0ce:	bf00      	nop
 801b0d0:	3710      	adds	r7, #16
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	bd80      	pop	{r7, pc}
 801b0d6:	bf00      	nop
 801b0d8:	20000cd4 	.word	0x20000cd4

0801b0dc <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv>:

void MockNamedValue::setObjectPointer(const SimpleString& type, void* objectPtr)
{
 801b0dc:	b580      	push	{r7, lr}
 801b0de:	b084      	sub	sp, #16
 801b0e0:	af00      	add	r7, sp, #0
 801b0e2:	60f8      	str	r0, [r7, #12]
 801b0e4:	60b9      	str	r1, [r7, #8]
 801b0e6:	607a      	str	r2, [r7, #4]
    type_ = type;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	330c      	adds	r3, #12
 801b0ec:	68b9      	ldr	r1, [r7, #8]
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	f7ef f8d9 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
    value_.objectPointerValue_ = objectPtr;
 801b0f4:	68fb      	ldr	r3, [r7, #12]
 801b0f6:	687a      	ldr	r2, [r7, #4]
 801b0f8:	619a      	str	r2, [r3, #24]
    if (defaultRepository_)
 801b0fa:	4b11      	ldr	r3, [pc, #68]	; (801b140 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	2b00      	cmp	r3, #0
 801b100:	d019      	beq.n	801b136 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x5a>
    {
        comparator_ = defaultRepository_->getComparatorForType(type);
 801b102:	4b0f      	ldr	r3, [pc, #60]	; (801b140 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b104:	681a      	ldr	r2, [r3, #0]
 801b106:	4b0e      	ldr	r3, [pc, #56]	; (801b140 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	3314      	adds	r3, #20
 801b10e:	681b      	ldr	r3, [r3, #0]
 801b110:	68b9      	ldr	r1, [r7, #8]
 801b112:	4610      	mov	r0, r2
 801b114:	4798      	blx	r3
 801b116:	4602      	mov	r2, r0
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	62da      	str	r2, [r3, #44]	; 0x2c
        copier_ = defaultRepository_->getCopierForType(type);
 801b11c:	4b08      	ldr	r3, [pc, #32]	; (801b140 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b11e:	681a      	ldr	r2, [r3, #0]
 801b120:	4b07      	ldr	r3, [pc, #28]	; (801b140 <_ZN14MockNamedValue16setObjectPointerERK12SimpleStringPv+0x64>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	3318      	adds	r3, #24
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	68b9      	ldr	r1, [r7, #8]
 801b12c:	4610      	mov	r0, r2
 801b12e:	4798      	blx	r3
 801b130:	4602      	mov	r2, r0
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	631a      	str	r2, [r3, #48]	; 0x30
    }
}
 801b136:	bf00      	nop
 801b138:	3710      	adds	r7, #16
 801b13a:	46bd      	mov	sp, r7
 801b13c:	bd80      	pop	{r7, pc}
 801b13e:	bf00      	nop
 801b140:	20000cd4 	.word	0x20000cd4

0801b144 <_ZN14MockNamedValue7setSizeEj>:

void MockNamedValue::setSize(size_t size)
{
 801b144:	b480      	push	{r7}
 801b146:	b083      	sub	sp, #12
 801b148:	af00      	add	r7, sp, #0
 801b14a:	6078      	str	r0, [r7, #4]
 801b14c:	6039      	str	r1, [r7, #0]
    size_ = size;
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	683a      	ldr	r2, [r7, #0]
 801b152:	629a      	str	r2, [r3, #40]	; 0x28
}
 801b154:	bf00      	nop
 801b156:	370c      	adds	r7, #12
 801b158:	46bd      	mov	sp, r7
 801b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b15e:	4770      	bx	lr

0801b160 <_ZN14MockNamedValue7setNameEPKc>:

void MockNamedValue::setName(const char* name)
{
 801b160:	b590      	push	{r4, r7, lr}
 801b162:	b085      	sub	sp, #20
 801b164:	af00      	add	r7, sp, #0
 801b166:	6078      	str	r0, [r7, #4]
 801b168:	6039      	str	r1, [r7, #0]
    name_ = name;
 801b16a:	687b      	ldr	r3, [r7, #4]
 801b16c:	1d1c      	adds	r4, r3, #4
 801b16e:	f107 0308 	add.w	r3, r7, #8
 801b172:	6839      	ldr	r1, [r7, #0]
 801b174:	4618      	mov	r0, r3
 801b176:	f7ef f82a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b17a:	f107 0308 	add.w	r3, r7, #8
 801b17e:	4619      	mov	r1, r3
 801b180:	4620      	mov	r0, r4
 801b182:	f7ef f890 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
 801b186:	f107 0308 	add.w	r3, r7, #8
 801b18a:	4618      	mov	r0, r3
 801b18c:	f7ef fbd7 	bl	800a93e <_ZN12SimpleStringD1Ev>
}
 801b190:	bf00      	nop
 801b192:	3714      	adds	r7, #20
 801b194:	46bd      	mov	sp, r7
 801b196:	bd90      	pop	{r4, r7, pc}

0801b198 <_ZNK14MockNamedValue7getNameEv>:

SimpleString MockNamedValue::getName() const
{
 801b198:	b580      	push	{r7, lr}
 801b19a:	b082      	sub	sp, #8
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
 801b1a0:	6039      	str	r1, [r7, #0]
    return name_;
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	3304      	adds	r3, #4
 801b1a6:	4619      	mov	r1, r3
 801b1a8:	6878      	ldr	r0, [r7, #4]
 801b1aa:	f7ef f864 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	3708      	adds	r7, #8
 801b1b2:	46bd      	mov	sp, r7
 801b1b4:	bd80      	pop	{r7, pc}

0801b1b6 <_ZNK14MockNamedValue7getTypeEv>:

SimpleString MockNamedValue::getType() const
{
 801b1b6:	b580      	push	{r7, lr}
 801b1b8:	b082      	sub	sp, #8
 801b1ba:	af00      	add	r7, sp, #0
 801b1bc:	6078      	str	r0, [r7, #4]
 801b1be:	6039      	str	r1, [r7, #0]
    return type_;
 801b1c0:	683b      	ldr	r3, [r7, #0]
 801b1c2:	330c      	adds	r3, #12
 801b1c4:	4619      	mov	r1, r3
 801b1c6:	6878      	ldr	r0, [r7, #4]
 801b1c8:	f7ef f855 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
}
 801b1cc:	6878      	ldr	r0, [r7, #4]
 801b1ce:	3708      	adds	r7, #8
 801b1d0:	46bd      	mov	sp, r7
 801b1d2:	bd80      	pop	{r7, pc}

0801b1d4 <_ZNK14MockNamedValue12getBoolValueEv>:

bool MockNamedValue::getBoolValue() const
{
 801b1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b1d6:	b087      	sub	sp, #28
 801b1d8:	af04      	add	r7, sp, #16
 801b1da:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("bool", type_.asCharString());
 801b1dc:	f7f6 fbda 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b1e0:	4604      	mov	r4, r0
 801b1e2:	6823      	ldr	r3, [r4, #0]
 801b1e4:	3324      	adds	r3, #36	; 0x24
 801b1e6:	681d      	ldr	r5, [r3, #0]
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	330c      	adds	r3, #12
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	f7ef fb79 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b1f2:	4606      	mov	r6, r0
 801b1f4:	f7f6 fbde 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	9302      	str	r3, [sp, #8]
 801b1fc:	23c8      	movs	r3, #200	; 0xc8
 801b1fe:	9301      	str	r3, [sp, #4]
 801b200:	4b06      	ldr	r3, [pc, #24]	; (801b21c <_ZNK14MockNamedValue12getBoolValueEv+0x48>)
 801b202:	9300      	str	r3, [sp, #0]
 801b204:	2300      	movs	r3, #0
 801b206:	4632      	mov	r2, r6
 801b208:	4905      	ldr	r1, [pc, #20]	; (801b220 <_ZNK14MockNamedValue12getBoolValueEv+0x4c>)
 801b20a:	4620      	mov	r0, r4
 801b20c:	47a8      	blx	r5
    return value_.boolValue_;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	7e1b      	ldrb	r3, [r3, #24]
}
 801b212:	4618      	mov	r0, r3
 801b214:	370c      	adds	r7, #12
 801b216:	46bd      	mov	sp, r7
 801b218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b21a:	bf00      	nop
 801b21c:	0802361c 	.word	0x0802361c
 801b220:	080235e4 	.word	0x080235e4

0801b224 <_ZNK14MockNamedValue19getUnsignedIntValueEv>:

unsigned int MockNamedValue::getUnsignedIntValue() const
{
 801b224:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b226:	b089      	sub	sp, #36	; 0x24
 801b228:	af04      	add	r7, sp, #16
 801b22a:	6078      	str	r0, [r7, #4]
    if(type_ == "int" && value_.intValue_ >= 0)
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	f103 040c 	add.w	r4, r3, #12
 801b232:	f107 0308 	add.w	r3, r7, #8
 801b236:	4920      	ldr	r1, [pc, #128]	; (801b2b8 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x94>)
 801b238:	4618      	mov	r0, r3
 801b23a:	f7ee ffc8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b23e:	2501      	movs	r5, #1
 801b240:	f107 0308 	add.w	r3, r7, #8
 801b244:	4619      	mov	r1, r3
 801b246:	4620      	mov	r0, r4
 801b248:	f7ef fb85 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b24c:	4603      	mov	r3, r0
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d005      	beq.n	801b25e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	699b      	ldr	r3, [r3, #24]
 801b256:	2b00      	cmp	r3, #0
 801b258:	db01      	blt.n	801b25e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3a>
 801b25a:	2401      	movs	r4, #1
 801b25c:	e000      	b.n	801b260 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x3c>
 801b25e:	2400      	movs	r4, #0
 801b260:	2d00      	cmp	r5, #0
 801b262:	d004      	beq.n	801b26e <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x4a>
 801b264:	f107 0308 	add.w	r3, r7, #8
 801b268:	4618      	mov	r0, r3
 801b26a:	f7ef fb68 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b26e:	2c00      	cmp	r4, #0
 801b270:	d002      	beq.n	801b278 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x54>
        return (unsigned int)value_.intValue_;
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	699b      	ldr	r3, [r3, #24]
 801b276:	e01a      	b.n	801b2ae <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x8a>
    else
    {
        STRCMP_EQUAL("unsigned int", type_.asCharString());
 801b278:	f7f6 fb8c 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b27c:	4604      	mov	r4, r0
 801b27e:	6823      	ldr	r3, [r4, #0]
 801b280:	3324      	adds	r3, #36	; 0x24
 801b282:	681d      	ldr	r5, [r3, #0]
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	330c      	adds	r3, #12
 801b288:	4618      	mov	r0, r3
 801b28a:	f7ef fb2b 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b28e:	4606      	mov	r6, r0
 801b290:	f7f6 fb90 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b294:	4603      	mov	r3, r0
 801b296:	9302      	str	r3, [sp, #8]
 801b298:	23d2      	movs	r3, #210	; 0xd2
 801b29a:	9301      	str	r3, [sp, #4]
 801b29c:	4b07      	ldr	r3, [pc, #28]	; (801b2bc <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x98>)
 801b29e:	9300      	str	r3, [sp, #0]
 801b2a0:	2300      	movs	r3, #0
 801b2a2:	4632      	mov	r2, r6
 801b2a4:	4906      	ldr	r1, [pc, #24]	; (801b2c0 <_ZNK14MockNamedValue19getUnsignedIntValueEv+0x9c>)
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	47a8      	blx	r5
        return value_.unsignedIntValue_;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	699b      	ldr	r3, [r3, #24]
    }
}
 801b2ae:	4618      	mov	r0, r3
 801b2b0:	3714      	adds	r7, #20
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b2b6:	bf00      	nop
 801b2b8:	080235e0 	.word	0x080235e0
 801b2bc:	0802361c 	.word	0x0802361c
 801b2c0:	080235ec 	.word	0x080235ec

0801b2c4 <_ZNK14MockNamedValue11getIntValueEv>:

int MockNamedValue::getIntValue() const
{
 801b2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b2c6:	b087      	sub	sp, #28
 801b2c8:	af04      	add	r7, sp, #16
 801b2ca:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("int", type_.asCharString());
 801b2cc:	f7f6 fb62 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b2d0:	4604      	mov	r4, r0
 801b2d2:	6823      	ldr	r3, [r4, #0]
 801b2d4:	3324      	adds	r3, #36	; 0x24
 801b2d6:	681d      	ldr	r5, [r3, #0]
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	330c      	adds	r3, #12
 801b2dc:	4618      	mov	r0, r3
 801b2de:	f7ef fb01 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b2e2:	4606      	mov	r6, r0
 801b2e4:	f7f6 fb66 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b2e8:	4603      	mov	r3, r0
 801b2ea:	9302      	str	r3, [sp, #8]
 801b2ec:	23d9      	movs	r3, #217	; 0xd9
 801b2ee:	9301      	str	r3, [sp, #4]
 801b2f0:	4b06      	ldr	r3, [pc, #24]	; (801b30c <_ZNK14MockNamedValue11getIntValueEv+0x48>)
 801b2f2:	9300      	str	r3, [sp, #0]
 801b2f4:	2300      	movs	r3, #0
 801b2f6:	4632      	mov	r2, r6
 801b2f8:	4905      	ldr	r1, [pc, #20]	; (801b310 <_ZNK14MockNamedValue11getIntValueEv+0x4c>)
 801b2fa:	4620      	mov	r0, r4
 801b2fc:	47a8      	blx	r5
    return value_.intValue_;
 801b2fe:	687b      	ldr	r3, [r7, #4]
 801b300:	699b      	ldr	r3, [r3, #24]
}
 801b302:	4618      	mov	r0, r3
 801b304:	370c      	adds	r7, #12
 801b306:	46bd      	mov	sp, r7
 801b308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b30a:	bf00      	nop
 801b30c:	0802361c 	.word	0x0802361c
 801b310:	080235e0 	.word	0x080235e0

0801b314 <_ZNK14MockNamedValue15getLongIntValueEv>:

long int MockNamedValue::getLongIntValue() const
{
 801b314:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b316:	b08b      	sub	sp, #44	; 0x2c
 801b318:	af04      	add	r7, sp, #16
 801b31a:	6078      	str	r0, [r7, #4]
    if(type_ == "int")
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	f103 040c 	add.w	r4, r3, #12
 801b322:	f107 0308 	add.w	r3, r7, #8
 801b326:	4928      	ldr	r1, [pc, #160]	; (801b3c8 <_ZNK14MockNamedValue15getLongIntValueEv+0xb4>)
 801b328:	4618      	mov	r0, r3
 801b32a:	f7ee ff50 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b32e:	f107 0308 	add.w	r3, r7, #8
 801b332:	4619      	mov	r1, r3
 801b334:	4620      	mov	r0, r4
 801b336:	f7ef fb0e 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b33a:	4603      	mov	r3, r0
 801b33c:	461c      	mov	r4, r3
 801b33e:	f107 0308 	add.w	r3, r7, #8
 801b342:	4618      	mov	r0, r3
 801b344:	f7ef fafb 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b348:	2c00      	cmp	r4, #0
 801b34a:	d002      	beq.n	801b352 <_ZNK14MockNamedValue15getLongIntValueEv+0x3e>
        return value_.intValue_;
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	699b      	ldr	r3, [r3, #24]
 801b350:	e035      	b.n	801b3be <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else if(type_ == "unsigned int")
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	f103 040c 	add.w	r4, r3, #12
 801b358:	f107 0310 	add.w	r3, r7, #16
 801b35c:	491b      	ldr	r1, [pc, #108]	; (801b3cc <_ZNK14MockNamedValue15getLongIntValueEv+0xb8>)
 801b35e:	4618      	mov	r0, r3
 801b360:	f7ee ff35 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b364:	f107 0310 	add.w	r3, r7, #16
 801b368:	4619      	mov	r1, r3
 801b36a:	4620      	mov	r0, r4
 801b36c:	f7ef faf3 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b370:	4603      	mov	r3, r0
 801b372:	461c      	mov	r4, r3
 801b374:	f107 0310 	add.w	r3, r7, #16
 801b378:	4618      	mov	r0, r3
 801b37a:	f7ef fae0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b37e:	2c00      	cmp	r4, #0
 801b380:	d002      	beq.n	801b388 <_ZNK14MockNamedValue15getLongIntValueEv+0x74>
        return (long int)value_.unsignedIntValue_;
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	699b      	ldr	r3, [r3, #24]
 801b386:	e01a      	b.n	801b3be <_ZNK14MockNamedValue15getLongIntValueEv+0xaa>
    else
    {
        STRCMP_EQUAL("long int", type_.asCharString());
 801b388:	f7f6 fb04 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b38c:	4604      	mov	r4, r0
 801b38e:	6823      	ldr	r3, [r4, #0]
 801b390:	3324      	adds	r3, #36	; 0x24
 801b392:	681d      	ldr	r5, [r3, #0]
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	330c      	adds	r3, #12
 801b398:	4618      	mov	r0, r3
 801b39a:	f7ef faa3 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b39e:	4606      	mov	r6, r0
 801b3a0:	f7f6 fb08 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	9302      	str	r3, [sp, #8]
 801b3a8:	23e5      	movs	r3, #229	; 0xe5
 801b3aa:	9301      	str	r3, [sp, #4]
 801b3ac:	4b08      	ldr	r3, [pc, #32]	; (801b3d0 <_ZNK14MockNamedValue15getLongIntValueEv+0xbc>)
 801b3ae:	9300      	str	r3, [sp, #0]
 801b3b0:	2300      	movs	r3, #0
 801b3b2:	4632      	mov	r2, r6
 801b3b4:	4907      	ldr	r1, [pc, #28]	; (801b3d4 <_ZNK14MockNamedValue15getLongIntValueEv+0xc0>)
 801b3b6:	4620      	mov	r0, r4
 801b3b8:	47a8      	blx	r5
        return value_.longIntValue_;
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	699b      	ldr	r3, [r3, #24]
    }
}
 801b3be:	4618      	mov	r0, r3
 801b3c0:	371c      	adds	r7, #28
 801b3c2:	46bd      	mov	sp, r7
 801b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b3c6:	bf00      	nop
 801b3c8:	080235e0 	.word	0x080235e0
 801b3cc:	080235ec 	.word	0x080235ec
 801b3d0:	0802361c 	.word	0x0802361c
 801b3d4:	080235fc 	.word	0x080235fc

0801b3d8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv>:

unsigned long int MockNamedValue::getUnsignedLongIntValue() const
{
 801b3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b3da:	b08d      	sub	sp, #52	; 0x34
 801b3dc:	af04      	add	r7, sp, #16
 801b3de:	6078      	str	r0, [r7, #4]
    if(type_ == "unsigned int")
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	f103 040c 	add.w	r4, r3, #12
 801b3e6:	f107 0308 	add.w	r3, r7, #8
 801b3ea:	4940      	ldr	r1, [pc, #256]	; (801b4ec <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x114>)
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	f7ee feee 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b3f2:	f107 0308 	add.w	r3, r7, #8
 801b3f6:	4619      	mov	r1, r3
 801b3f8:	4620      	mov	r0, r4
 801b3fa:	f7ef faac 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b3fe:	4603      	mov	r3, r0
 801b400:	461c      	mov	r4, r3
 801b402:	f107 0308 	add.w	r3, r7, #8
 801b406:	4618      	mov	r0, r3
 801b408:	f7ef fa99 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b40c:	2c00      	cmp	r4, #0
 801b40e:	d002      	beq.n	801b416 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x3e>
        return value_.unsignedIntValue_;
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	699b      	ldr	r3, [r3, #24]
 801b414:	e066      	b.n	801b4e4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "int" && value_.intValue_ >= 0)
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	f103 040c 	add.w	r4, r3, #12
 801b41c:	f107 0310 	add.w	r3, r7, #16
 801b420:	4933      	ldr	r1, [pc, #204]	; (801b4f0 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x118>)
 801b422:	4618      	mov	r0, r3
 801b424:	f7ee fed3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b428:	2501      	movs	r5, #1
 801b42a:	f107 0310 	add.w	r3, r7, #16
 801b42e:	4619      	mov	r1, r3
 801b430:	4620      	mov	r0, r4
 801b432:	f7ef fa90 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b436:	4603      	mov	r3, r0
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d005      	beq.n	801b448 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	699b      	ldr	r3, [r3, #24]
 801b440:	2b00      	cmp	r3, #0
 801b442:	db01      	blt.n	801b448 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x70>
 801b444:	2401      	movs	r4, #1
 801b446:	e000      	b.n	801b44a <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x72>
 801b448:	2400      	movs	r4, #0
 801b44a:	2d00      	cmp	r5, #0
 801b44c:	d004      	beq.n	801b458 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x80>
 801b44e:	f107 0310 	add.w	r3, r7, #16
 801b452:	4618      	mov	r0, r3
 801b454:	f7ef fa73 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b458:	2c00      	cmp	r4, #0
 801b45a:	d002      	beq.n	801b462 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x8a>
        return (unsigned long int)value_.intValue_;
 801b45c:	687b      	ldr	r3, [r7, #4]
 801b45e:	699b      	ldr	r3, [r3, #24]
 801b460:	e040      	b.n	801b4e4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else if(type_ == "long int" && value_.longIntValue_ >= 0)
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	f103 040c 	add.w	r4, r3, #12
 801b468:	f107 0318 	add.w	r3, r7, #24
 801b46c:	4921      	ldr	r1, [pc, #132]	; (801b4f4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x11c>)
 801b46e:	4618      	mov	r0, r3
 801b470:	f7ee fead 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b474:	2501      	movs	r5, #1
 801b476:	f107 0318 	add.w	r3, r7, #24
 801b47a:	4619      	mov	r1, r3
 801b47c:	4620      	mov	r0, r4
 801b47e:	f7ef fa6a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b482:	4603      	mov	r3, r0
 801b484:	2b00      	cmp	r3, #0
 801b486:	d005      	beq.n	801b494 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	699b      	ldr	r3, [r3, #24]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	db01      	blt.n	801b494 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbc>
 801b490:	2401      	movs	r4, #1
 801b492:	e000      	b.n	801b496 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xbe>
 801b494:	2400      	movs	r4, #0
 801b496:	2d00      	cmp	r5, #0
 801b498:	d004      	beq.n	801b4a4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xcc>
 801b49a:	f107 0318 	add.w	r3, r7, #24
 801b49e:	4618      	mov	r0, r3
 801b4a0:	f7ef fa4d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b4a4:	2c00      	cmp	r4, #0
 801b4a6:	d002      	beq.n	801b4ae <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0xd6>
        return (unsigned long int)value_.longIntValue_;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	699b      	ldr	r3, [r3, #24]
 801b4ac:	e01a      	b.n	801b4e4 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x10c>
    else
    {
        STRCMP_EQUAL("unsigned long int", type_.asCharString());
 801b4ae:	f7f6 fa71 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b4b2:	4604      	mov	r4, r0
 801b4b4:	6823      	ldr	r3, [r4, #0]
 801b4b6:	3324      	adds	r3, #36	; 0x24
 801b4b8:	681d      	ldr	r5, [r3, #0]
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	330c      	adds	r3, #12
 801b4be:	4618      	mov	r0, r3
 801b4c0:	f7ef fa10 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	f7f6 fa75 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	9302      	str	r3, [sp, #8]
 801b4ce:	23f4      	movs	r3, #244	; 0xf4
 801b4d0:	9301      	str	r3, [sp, #4]
 801b4d2:	4b09      	ldr	r3, [pc, #36]	; (801b4f8 <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x120>)
 801b4d4:	9300      	str	r3, [sp, #0]
 801b4d6:	2300      	movs	r3, #0
 801b4d8:	4632      	mov	r2, r6
 801b4da:	4908      	ldr	r1, [pc, #32]	; (801b4fc <_ZNK14MockNamedValue23getUnsignedLongIntValueEv+0x124>)
 801b4dc:	4620      	mov	r0, r4
 801b4de:	47a8      	blx	r5
        return value_.unsignedLongIntValue_;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	699b      	ldr	r3, [r3, #24]
    }
}
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	3724      	adds	r7, #36	; 0x24
 801b4e8:	46bd      	mov	sp, r7
 801b4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4ec:	080235ec 	.word	0x080235ec
 801b4f0:	080235e0 	.word	0x080235e0
 801b4f4:	080235fc 	.word	0x080235fc
 801b4f8:	0802361c 	.word	0x0802361c
 801b4fc:	08023608 	.word	0x08023608

0801b500 <_ZNK14MockNamedValue19getLongLongIntValueEv>:
}

#else

cpputest_longlong MockNamedValue::getLongLongIntValue() const
{
 801b500:	b5b0      	push	{r4, r5, r7, lr}
 801b502:	b084      	sub	sp, #16
 801b504:	af02      	add	r7, sp, #8
 801b506:	6078      	str	r0, [r7, #4]
 801b508:	6039      	str	r1, [r7, #0]
    FAIL("Long Long type is not supported");
 801b50a:	f7f6 fa43 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b50e:	4604      	mov	r4, r0
 801b510:	6823      	ldr	r3, [r4, #0]
 801b512:	3368      	adds	r3, #104	; 0x68
 801b514:	681d      	ldr	r5, [r3, #0]
 801b516:	f7f6 fa4d 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b51a:	4603      	mov	r3, r0
 801b51c:	9300      	str	r3, [sp, #0]
 801b51e:	f240 1323 	movw	r3, #291	; 0x123
 801b522:	4a06      	ldr	r2, [pc, #24]	; (801b53c <_ZNK14MockNamedValue19getLongLongIntValueEv+0x3c>)
 801b524:	4906      	ldr	r1, [pc, #24]	; (801b540 <_ZNK14MockNamedValue19getLongLongIntValueEv+0x40>)
 801b526:	4620      	mov	r0, r4
 801b528:	47a8      	blx	r5
    return cpputest_longlong(0);
 801b52a:	2100      	movs	r1, #0
 801b52c:	6878      	ldr	r0, [r7, #4]
 801b52e:	f7ec fe85 	bl	800823c <_ZN17cpputest_longlongC1Ei>
}
 801b532:	6878      	ldr	r0, [r7, #4]
 801b534:	3708      	adds	r7, #8
 801b536:	46bd      	mov	sp, r7
 801b538:	bdb0      	pop	{r4, r5, r7, pc}
 801b53a:	bf00      	nop
 801b53c:	0802361c 	.word	0x0802361c
 801b540:	08023638 	.word	0x08023638

0801b544 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv>:

cpputest_ulonglong MockNamedValue::getUnsignedLongLongIntValue() const
{
 801b544:	b5b0      	push	{r4, r5, r7, lr}
 801b546:	b084      	sub	sp, #16
 801b548:	af02      	add	r7, sp, #8
 801b54a:	6078      	str	r0, [r7, #4]
 801b54c:	6039      	str	r1, [r7, #0]
    FAIL("Unsigned Long Long type is not supported");
 801b54e:	f7f6 fa21 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b552:	4604      	mov	r4, r0
 801b554:	6823      	ldr	r3, [r4, #0]
 801b556:	3368      	adds	r3, #104	; 0x68
 801b558:	681d      	ldr	r5, [r3, #0]
 801b55a:	f7f6 fa2b 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b55e:	4603      	mov	r3, r0
 801b560:	9300      	str	r3, [sp, #0]
 801b562:	f240 1329 	movw	r3, #297	; 0x129
 801b566:	4a06      	ldr	r2, [pc, #24]	; (801b580 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x3c>)
 801b568:	4906      	ldr	r1, [pc, #24]	; (801b584 <_ZNK14MockNamedValue27getUnsignedLongLongIntValueEv+0x40>)
 801b56a:	4620      	mov	r0, r4
 801b56c:	47a8      	blx	r5
    return cpputest_ulonglong(0);
 801b56e:	2100      	movs	r1, #0
 801b570:	6878      	ldr	r0, [r7, #4]
 801b572:	f7ec fe6f 	bl	8008254 <_ZN18cpputest_ulonglongC1Ei>
}
 801b576:	6878      	ldr	r0, [r7, #4]
 801b578:	3708      	adds	r7, #8
 801b57a:	46bd      	mov	sp, r7
 801b57c:	bdb0      	pop	{r4, r5, r7, pc}
 801b57e:	bf00      	nop
 801b580:	0802361c 	.word	0x0802361c
 801b584:	08023658 	.word	0x08023658

0801b588 <_ZNK14MockNamedValue14getDoubleValueEv>:

#endif

double MockNamedValue::getDoubleValue() const
{
 801b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b58a:	b087      	sub	sp, #28
 801b58c:	af04      	add	r7, sp, #16
 801b58e:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b590:	f7f6 fa00 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b594:	4604      	mov	r4, r0
 801b596:	6823      	ldr	r3, [r4, #0]
 801b598:	3324      	adds	r3, #36	; 0x24
 801b59a:	681d      	ldr	r5, [r3, #0]
 801b59c:	687b      	ldr	r3, [r7, #4]
 801b59e:	330c      	adds	r3, #12
 801b5a0:	4618      	mov	r0, r3
 801b5a2:	f7ef f99f 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b5a6:	4606      	mov	r6, r0
 801b5a8:	f7f6 fa04 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	9302      	str	r3, [sp, #8]
 801b5b0:	f240 1331 	movw	r3, #305	; 0x131
 801b5b4:	9301      	str	r3, [sp, #4]
 801b5b6:	4b09      	ldr	r3, [pc, #36]	; (801b5dc <_ZNK14MockNamedValue14getDoubleValueEv+0x54>)
 801b5b8:	9300      	str	r3, [sp, #0]
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	4632      	mov	r2, r6
 801b5be:	4908      	ldr	r1, [pc, #32]	; (801b5e0 <_ZNK14MockNamedValue14getDoubleValueEv+0x58>)
 801b5c0:	4620      	mov	r0, r4
 801b5c2:	47a8      	blx	r5
    return value_.doubleValue_.value;
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 801b5ca:	ec43 2b17 	vmov	d7, r2, r3
}
 801b5ce:	eeb0 0a47 	vmov.f32	s0, s14
 801b5d2:	eef0 0a67 	vmov.f32	s1, s15
 801b5d6:	370c      	adds	r7, #12
 801b5d8:	46bd      	mov	sp, r7
 801b5da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5dc:	0802361c 	.word	0x0802361c
 801b5e0:	08023684 	.word	0x08023684

0801b5e4 <_ZNK14MockNamedValue18getDoubleToleranceEv>:

double MockNamedValue::getDoubleTolerance() const
{
 801b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5e6:	b087      	sub	sp, #28
 801b5e8:	af04      	add	r7, sp, #16
 801b5ea:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("double", type_.asCharString());
 801b5ec:	f7f6 f9d2 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b5f0:	4604      	mov	r4, r0
 801b5f2:	6823      	ldr	r3, [r4, #0]
 801b5f4:	3324      	adds	r3, #36	; 0x24
 801b5f6:	681d      	ldr	r5, [r3, #0]
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	330c      	adds	r3, #12
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	f7ef f971 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b602:	4606      	mov	r6, r0
 801b604:	f7f6 f9d6 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b608:	4603      	mov	r3, r0
 801b60a:	9302      	str	r3, [sp, #8]
 801b60c:	f240 1337 	movw	r3, #311	; 0x137
 801b610:	9301      	str	r3, [sp, #4]
 801b612:	4b09      	ldr	r3, [pc, #36]	; (801b638 <_ZNK14MockNamedValue18getDoubleToleranceEv+0x54>)
 801b614:	9300      	str	r3, [sp, #0]
 801b616:	2300      	movs	r3, #0
 801b618:	4632      	mov	r2, r6
 801b61a:	4908      	ldr	r1, [pc, #32]	; (801b63c <_ZNK14MockNamedValue18getDoubleToleranceEv+0x58>)
 801b61c:	4620      	mov	r0, r4
 801b61e:	47a8      	blx	r5
    return value_.doubleValue_.tolerance;
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b626:	ec43 2b17 	vmov	d7, r2, r3
}
 801b62a:	eeb0 0a47 	vmov.f32	s0, s14
 801b62e:	eef0 0a67 	vmov.f32	s1, s15
 801b632:	370c      	adds	r7, #12
 801b634:	46bd      	mov	sp, r7
 801b636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b638:	0802361c 	.word	0x0802361c
 801b63c:	08023684 	.word	0x08023684

0801b640 <_ZNK14MockNamedValue14getStringValueEv>:

const char* MockNamedValue::getStringValue() const
{
 801b640:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b642:	b087      	sub	sp, #28
 801b644:	af04      	add	r7, sp, #16
 801b646:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const char*", type_.asCharString());
 801b648:	f7f6 f9a4 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b64c:	4604      	mov	r4, r0
 801b64e:	6823      	ldr	r3, [r4, #0]
 801b650:	3324      	adds	r3, #36	; 0x24
 801b652:	681d      	ldr	r5, [r3, #0]
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	330c      	adds	r3, #12
 801b658:	4618      	mov	r0, r3
 801b65a:	f7ef f943 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b65e:	4606      	mov	r6, r0
 801b660:	f7f6 f9a8 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b664:	4603      	mov	r3, r0
 801b666:	9302      	str	r3, [sp, #8]
 801b668:	f240 133d 	movw	r3, #317	; 0x13d
 801b66c:	9301      	str	r3, [sp, #4]
 801b66e:	4b06      	ldr	r3, [pc, #24]	; (801b688 <_ZNK14MockNamedValue14getStringValueEv+0x48>)
 801b670:	9300      	str	r3, [sp, #0]
 801b672:	2300      	movs	r3, #0
 801b674:	4632      	mov	r2, r6
 801b676:	4905      	ldr	r1, [pc, #20]	; (801b68c <_ZNK14MockNamedValue14getStringValueEv+0x4c>)
 801b678:	4620      	mov	r0, r4
 801b67a:	47a8      	blx	r5
    return value_.stringValue_;
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	699b      	ldr	r3, [r3, #24]
}
 801b680:	4618      	mov	r0, r3
 801b682:	370c      	adds	r7, #12
 801b684:	46bd      	mov	sp, r7
 801b686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b688:	0802361c 	.word	0x0802361c
 801b68c:	080236ac 	.word	0x080236ac

0801b690 <_ZNK14MockNamedValue15getPointerValueEv>:

void* MockNamedValue::getPointerValue() const
{
 801b690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b692:	b087      	sub	sp, #28
 801b694:	af04      	add	r7, sp, #16
 801b696:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void*", type_.asCharString());
 801b698:	f7f6 f97c 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b69c:	4604      	mov	r4, r0
 801b69e:	6823      	ldr	r3, [r4, #0]
 801b6a0:	3324      	adds	r3, #36	; 0x24
 801b6a2:	681d      	ldr	r5, [r3, #0]
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	330c      	adds	r3, #12
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	f7ef f91b 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b6ae:	4606      	mov	r6, r0
 801b6b0:	f7f6 f980 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b6b4:	4603      	mov	r3, r0
 801b6b6:	9302      	str	r3, [sp, #8]
 801b6b8:	f240 1343 	movw	r3, #323	; 0x143
 801b6bc:	9301      	str	r3, [sp, #4]
 801b6be:	4b06      	ldr	r3, [pc, #24]	; (801b6d8 <_ZNK14MockNamedValue15getPointerValueEv+0x48>)
 801b6c0:	9300      	str	r3, [sp, #0]
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	4632      	mov	r2, r6
 801b6c6:	4905      	ldr	r1, [pc, #20]	; (801b6dc <_ZNK14MockNamedValue15getPointerValueEv+0x4c>)
 801b6c8:	4620      	mov	r0, r4
 801b6ca:	47a8      	blx	r5
    return value_.pointerValue_;
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	699b      	ldr	r3, [r3, #24]
}
 801b6d0:	4618      	mov	r0, r3
 801b6d2:	370c      	adds	r7, #12
 801b6d4:	46bd      	mov	sp, r7
 801b6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b6d8:	0802361c 	.word	0x0802361c
 801b6dc:	0802368c 	.word	0x0802368c

0801b6e0 <_ZNK14MockNamedValue20getConstPointerValueEv>:

const void* MockNamedValue::getConstPointerValue() const
{
 801b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b6e2:	b087      	sub	sp, #28
 801b6e4:	af04      	add	r7, sp, #16
 801b6e6:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const void*", type_.asCharString());
 801b6e8:	f7f6 f954 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b6ec:	4604      	mov	r4, r0
 801b6ee:	6823      	ldr	r3, [r4, #0]
 801b6f0:	3324      	adds	r3, #36	; 0x24
 801b6f2:	681d      	ldr	r5, [r3, #0]
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	330c      	adds	r3, #12
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7ef f8f3 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b6fe:	4606      	mov	r6, r0
 801b700:	f7f6 f958 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b704:	4603      	mov	r3, r0
 801b706:	9302      	str	r3, [sp, #8]
 801b708:	f240 1349 	movw	r3, #329	; 0x149
 801b70c:	9301      	str	r3, [sp, #4]
 801b70e:	4b06      	ldr	r3, [pc, #24]	; (801b728 <_ZNK14MockNamedValue20getConstPointerValueEv+0x48>)
 801b710:	9300      	str	r3, [sp, #0]
 801b712:	2300      	movs	r3, #0
 801b714:	4632      	mov	r2, r6
 801b716:	4905      	ldr	r1, [pc, #20]	; (801b72c <_ZNK14MockNamedValue20getConstPointerValueEv+0x4c>)
 801b718:	4620      	mov	r0, r4
 801b71a:	47a8      	blx	r5
    return value_.pointerValue_;
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	699b      	ldr	r3, [r3, #24]
}
 801b720:	4618      	mov	r0, r3
 801b722:	370c      	adds	r7, #12
 801b724:	46bd      	mov	sp, r7
 801b726:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b728:	0802361c 	.word	0x0802361c
 801b72c:	08023694 	.word	0x08023694

0801b730 <_ZNK14MockNamedValue23getFunctionPointerValueEv>:

void (*MockNamedValue::getFunctionPointerValue() const)()
{
 801b730:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b732:	b087      	sub	sp, #28
 801b734:	af04      	add	r7, sp, #16
 801b736:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("void (*)()", type_.asCharString());
 801b738:	f7f6 f92c 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b73c:	4604      	mov	r4, r0
 801b73e:	6823      	ldr	r3, [r4, #0]
 801b740:	3324      	adds	r3, #36	; 0x24
 801b742:	681d      	ldr	r5, [r3, #0]
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	330c      	adds	r3, #12
 801b748:	4618      	mov	r0, r3
 801b74a:	f7ef f8cb 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b74e:	4606      	mov	r6, r0
 801b750:	f7f6 f930 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b754:	4603      	mov	r3, r0
 801b756:	9302      	str	r3, [sp, #8]
 801b758:	f240 134f 	movw	r3, #335	; 0x14f
 801b75c:	9301      	str	r3, [sp, #4]
 801b75e:	4b06      	ldr	r3, [pc, #24]	; (801b778 <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x48>)
 801b760:	9300      	str	r3, [sp, #0]
 801b762:	2300      	movs	r3, #0
 801b764:	4632      	mov	r2, r6
 801b766:	4905      	ldr	r1, [pc, #20]	; (801b77c <_ZNK14MockNamedValue23getFunctionPointerValueEv+0x4c>)
 801b768:	4620      	mov	r0, r4
 801b76a:	47a8      	blx	r5
    return value_.functionPointerValue_;
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	699b      	ldr	r3, [r3, #24]
}
 801b770:	4618      	mov	r0, r3
 801b772:	370c      	adds	r7, #12
 801b774:	46bd      	mov	sp, r7
 801b776:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b778:	0802361c 	.word	0x0802361c
 801b77c:	080236a0 	.word	0x080236a0

0801b780 <_ZNK14MockNamedValue15getMemoryBufferEv>:

const unsigned char* MockNamedValue::getMemoryBuffer() const
{
 801b780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b782:	b087      	sub	sp, #28
 801b784:	af04      	add	r7, sp, #16
 801b786:	6078      	str	r0, [r7, #4]
    STRCMP_EQUAL("const unsigned char*", type_.asCharString());
 801b788:	f7f6 f904 	bl	8011994 <_ZN10UtestShell10getCurrentEv>
 801b78c:	4604      	mov	r4, r0
 801b78e:	6823      	ldr	r3, [r4, #0]
 801b790:	3324      	adds	r3, #36	; 0x24
 801b792:	681d      	ldr	r5, [r3, #0]
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	330c      	adds	r3, #12
 801b798:	4618      	mov	r0, r3
 801b79a:	f7ef f8a3 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801b79e:	4606      	mov	r6, r0
 801b7a0:	f7f6 f908 	bl	80119b4 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	9302      	str	r3, [sp, #8]
 801b7a8:	f240 1355 	movw	r3, #341	; 0x155
 801b7ac:	9301      	str	r3, [sp, #4]
 801b7ae:	4b06      	ldr	r3, [pc, #24]	; (801b7c8 <_ZNK14MockNamedValue15getMemoryBufferEv+0x48>)
 801b7b0:	9300      	str	r3, [sp, #0]
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	4632      	mov	r2, r6
 801b7b6:	4905      	ldr	r1, [pc, #20]	; (801b7cc <_ZNK14MockNamedValue15getMemoryBufferEv+0x4c>)
 801b7b8:	4620      	mov	r0, r4
 801b7ba:	47a8      	blx	r5
    return value_.memoryBufferValue_;
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	699b      	ldr	r3, [r3, #24]
}
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	370c      	adds	r7, #12
 801b7c4:	46bd      	mov	sp, r7
 801b7c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7c8:	0802361c 	.word	0x0802361c
 801b7cc:	080236b8 	.word	0x080236b8

0801b7d0 <_ZNK14MockNamedValue21getConstObjectPointerEv>:

const void* MockNamedValue::getConstObjectPointer() const
{
 801b7d0:	b480      	push	{r7}
 801b7d2:	b083      	sub	sp, #12
 801b7d4:	af00      	add	r7, sp, #0
 801b7d6:	6078      	str	r0, [r7, #4]
    return value_.constObjectPointerValue_;
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	699b      	ldr	r3, [r3, #24]
}
 801b7dc:	4618      	mov	r0, r3
 801b7de:	370c      	adds	r7, #12
 801b7e0:	46bd      	mov	sp, r7
 801b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e6:	4770      	bx	lr

0801b7e8 <_ZNK14MockNamedValue16getObjectPointerEv>:

void* MockNamedValue::getObjectPointer() const
{
 801b7e8:	b480      	push	{r7}
 801b7ea:	b083      	sub	sp, #12
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
    return value_.objectPointerValue_;
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	699b      	ldr	r3, [r3, #24]
}
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	370c      	adds	r7, #12
 801b7f8:	46bd      	mov	sp, r7
 801b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7fe:	4770      	bx	lr

0801b800 <_ZNK14MockNamedValue7getSizeEv>:

size_t MockNamedValue::getSize() const
{
 801b800:	b480      	push	{r7}
 801b802:	b083      	sub	sp, #12
 801b804:	af00      	add	r7, sp, #0
 801b806:	6078      	str	r0, [r7, #4]
    return size_;
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801b80c:	4618      	mov	r0, r3
 801b80e:	370c      	adds	r7, #12
 801b810:	46bd      	mov	sp, r7
 801b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b816:	4770      	bx	lr

0801b818 <_ZNK14MockNamedValue13getComparatorEv>:

MockNamedValueComparator* MockNamedValue::getComparator() const
{
 801b818:	b480      	push	{r7}
 801b81a:	b083      	sub	sp, #12
 801b81c:	af00      	add	r7, sp, #0
 801b81e:	6078      	str	r0, [r7, #4]
    return comparator_;
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 801b824:	4618      	mov	r0, r3
 801b826:	370c      	adds	r7, #12
 801b828:	46bd      	mov	sp, r7
 801b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b82e:	4770      	bx	lr

0801b830 <_ZNK14MockNamedValue9getCopierEv>:

MockNamedValueCopier* MockNamedValue::getCopier() const
{
 801b830:	b480      	push	{r7}
 801b832:	b083      	sub	sp, #12
 801b834:	af00      	add	r7, sp, #0
 801b836:	6078      	str	r0, [r7, #4]
    return copier_;
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 801b83c:	4618      	mov	r0, r3
 801b83e:	370c      	adds	r7, #12
 801b840:	46bd      	mov	sp, r7
 801b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b846:	4770      	bx	lr

0801b848 <_ZNK14MockNamedValue6equalsERKS_>:

bool MockNamedValue::equals(const MockNamedValue& p) const
{
 801b848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b84a:	b0cd      	sub	sp, #308	; 0x134
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	1d3b      	adds	r3, r7, #4
 801b850:	6018      	str	r0, [r3, #0]
 801b852:	463b      	mov	r3, r7
 801b854:	6019      	str	r1, [r3, #0]
    if((type_ == "long int") && (p.type_ == "int"))
 801b856:	2500      	movs	r5, #0
 801b858:	1d3b      	adds	r3, r7, #4
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	f103 040c 	add.w	r4, r3, #12
 801b860:	f107 0308 	add.w	r3, r7, #8
 801b864:	49bb      	ldr	r1, [pc, #748]	; (801bb54 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b866:	4618      	mov	r0, r3
 801b868:	f7ee fcb1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b86c:	2601      	movs	r6, #1
 801b86e:	f107 0308 	add.w	r3, r7, #8
 801b872:	4619      	mov	r1, r3
 801b874:	4620      	mov	r0, r4
 801b876:	f7ef f86e 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b87a:	4603      	mov	r3, r0
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d015      	beq.n	801b8ac <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b880:	463b      	mov	r3, r7
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	f103 040c 	add.w	r4, r3, #12
 801b888:	f107 0310 	add.w	r3, r7, #16
 801b88c:	49b2      	ldr	r1, [pc, #712]	; (801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b88e:	4618      	mov	r0, r3
 801b890:	f7ee fc9d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b894:	2501      	movs	r5, #1
 801b896:	f107 0310 	add.w	r3, r7, #16
 801b89a:	4619      	mov	r1, r3
 801b89c:	4620      	mov	r0, r4
 801b89e:	f7ef f85a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b8a2:	4603      	mov	r3, r0
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d001      	beq.n	801b8ac <_ZNK14MockNamedValue6equalsERKS_+0x64>
 801b8a8:	2401      	movs	r4, #1
 801b8aa:	e000      	b.n	801b8ae <_ZNK14MockNamedValue6equalsERKS_+0x66>
 801b8ac:	2400      	movs	r4, #0
 801b8ae:	2d00      	cmp	r5, #0
 801b8b0:	d004      	beq.n	801b8bc <_ZNK14MockNamedValue6equalsERKS_+0x74>
 801b8b2:	f107 0310 	add.w	r3, r7, #16
 801b8b6:	4618      	mov	r0, r3
 801b8b8:	f7ef f841 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b8bc:	2e00      	cmp	r6, #0
 801b8be:	d004      	beq.n	801b8ca <_ZNK14MockNamedValue6equalsERKS_+0x82>
 801b8c0:	f107 0308 	add.w	r3, r7, #8
 801b8c4:	4618      	mov	r0, r3
 801b8c6:	f7ef f83a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b8ca:	2c00      	cmp	r4, #0
 801b8cc:	d00c      	beq.n	801b8e8 <_ZNK14MockNamedValue6equalsERKS_+0xa0>
        return value_.longIntValue_ == p.value_.intValue_;
 801b8ce:	1d3b      	adds	r3, r7, #4
 801b8d0:	681b      	ldr	r3, [r3, #0]
 801b8d2:	699a      	ldr	r2, [r3, #24]
 801b8d4:	463b      	mov	r3, r7
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	699b      	ldr	r3, [r3, #24]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	bf0c      	ite	eq
 801b8de:	2301      	moveq	r3, #1
 801b8e0:	2300      	movne	r3, #0
 801b8e2:	b2dc      	uxtb	r4, r3
 801b8e4:	f000 bd60 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "long int"))
 801b8e8:	2500      	movs	r5, #0
 801b8ea:	1d3b      	adds	r3, r7, #4
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f103 040c 	add.w	r4, r3, #12
 801b8f2:	f107 0318 	add.w	r3, r7, #24
 801b8f6:	4998      	ldr	r1, [pc, #608]	; (801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	f7ee fc68 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b8fe:	2601      	movs	r6, #1
 801b900:	f107 0318 	add.w	r3, r7, #24
 801b904:	4619      	mov	r1, r3
 801b906:	4620      	mov	r0, r4
 801b908:	f7ef f825 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b90c:	4603      	mov	r3, r0
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d015      	beq.n	801b93e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b912:	463b      	mov	r3, r7
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	f103 040c 	add.w	r4, r3, #12
 801b91a:	f107 0320 	add.w	r3, r7, #32
 801b91e:	498d      	ldr	r1, [pc, #564]	; (801bb54 <_ZNK14MockNamedValue6equalsERKS_+0x30c>)
 801b920:	4618      	mov	r0, r3
 801b922:	f7ee fc54 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b926:	2501      	movs	r5, #1
 801b928:	f107 0320 	add.w	r3, r7, #32
 801b92c:	4619      	mov	r1, r3
 801b92e:	4620      	mov	r0, r4
 801b930:	f7ef f811 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b934:	4603      	mov	r3, r0
 801b936:	2b00      	cmp	r3, #0
 801b938:	d001      	beq.n	801b93e <_ZNK14MockNamedValue6equalsERKS_+0xf6>
 801b93a:	2401      	movs	r4, #1
 801b93c:	e000      	b.n	801b940 <_ZNK14MockNamedValue6equalsERKS_+0xf8>
 801b93e:	2400      	movs	r4, #0
 801b940:	2d00      	cmp	r5, #0
 801b942:	d004      	beq.n	801b94e <_ZNK14MockNamedValue6equalsERKS_+0x106>
 801b944:	f107 0320 	add.w	r3, r7, #32
 801b948:	4618      	mov	r0, r3
 801b94a:	f7ee fff8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b94e:	2e00      	cmp	r6, #0
 801b950:	d004      	beq.n	801b95c <_ZNK14MockNamedValue6equalsERKS_+0x114>
 801b952:	f107 0318 	add.w	r3, r7, #24
 801b956:	4618      	mov	r0, r3
 801b958:	f7ee fff1 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b95c:	2c00      	cmp	r4, #0
 801b95e:	d00c      	beq.n	801b97a <_ZNK14MockNamedValue6equalsERKS_+0x132>
        return value_.intValue_ == p.value_.longIntValue_;
 801b960:	1d3b      	adds	r3, r7, #4
 801b962:	681b      	ldr	r3, [r3, #0]
 801b964:	699a      	ldr	r2, [r3, #24]
 801b966:	463b      	mov	r3, r7
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	699b      	ldr	r3, [r3, #24]
 801b96c:	429a      	cmp	r2, r3
 801b96e:	bf0c      	ite	eq
 801b970:	2301      	moveq	r3, #1
 801b972:	2300      	movne	r3, #0
 801b974:	b2dc      	uxtb	r4, r3
 801b976:	f000 bd17 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "int"))
 801b97a:	2500      	movs	r5, #0
 801b97c:	1d3b      	adds	r3, r7, #4
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	f103 040c 	add.w	r4, r3, #12
 801b984:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b988:	4974      	ldr	r1, [pc, #464]	; (801bb5c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801b98a:	4618      	mov	r0, r3
 801b98c:	f7ee fc1f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b990:	2601      	movs	r6, #1
 801b992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b996:	4619      	mov	r1, r3
 801b998:	4620      	mov	r0, r4
 801b99a:	f7ee ffdc 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b99e:	4603      	mov	r3, r0
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d015      	beq.n	801b9d0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b9a4:	463b      	mov	r3, r7
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	f103 040c 	add.w	r4, r3, #12
 801b9ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b9b0:	4969      	ldr	r1, [pc, #420]	; (801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801b9b2:	4618      	mov	r0, r3
 801b9b4:	f7ee fc0b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801b9b8:	2501      	movs	r5, #1
 801b9ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b9be:	4619      	mov	r1, r3
 801b9c0:	4620      	mov	r0, r4
 801b9c2:	f7ee ffc8 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801b9c6:	4603      	mov	r3, r0
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	d001      	beq.n	801b9d0 <_ZNK14MockNamedValue6equalsERKS_+0x188>
 801b9cc:	2401      	movs	r4, #1
 801b9ce:	e000      	b.n	801b9d2 <_ZNK14MockNamedValue6equalsERKS_+0x18a>
 801b9d0:	2400      	movs	r4, #0
 801b9d2:	2d00      	cmp	r5, #0
 801b9d4:	d004      	beq.n	801b9e0 <_ZNK14MockNamedValue6equalsERKS_+0x198>
 801b9d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b9da:	4618      	mov	r0, r3
 801b9dc:	f7ee ffaf 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b9e0:	2e00      	cmp	r6, #0
 801b9e2:	d004      	beq.n	801b9ee <_ZNK14MockNamedValue6equalsERKS_+0x1a6>
 801b9e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b9e8:	4618      	mov	r0, r3
 801b9ea:	f7ee ffa8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801b9ee:	2c00      	cmp	r4, #0
 801b9f0:	d012      	beq.n	801ba18 <_ZNK14MockNamedValue6equalsERKS_+0x1d0>
        return (p.value_.intValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned int)p.value_.intValue_);
 801b9f2:	463b      	mov	r3, r7
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	699b      	ldr	r3, [r3, #24]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	db0a      	blt.n	801ba12 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801b9fc:	1d3b      	adds	r3, r7, #4
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	699b      	ldr	r3, [r3, #24]
 801ba02:	463a      	mov	r2, r7
 801ba04:	6812      	ldr	r2, [r2, #0]
 801ba06:	6992      	ldr	r2, [r2, #24]
 801ba08:	4293      	cmp	r3, r2
 801ba0a:	d102      	bne.n	801ba12 <_ZNK14MockNamedValue6equalsERKS_+0x1ca>
 801ba0c:	2401      	movs	r4, #1
 801ba0e:	f000 bccb 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801ba12:	2400      	movs	r4, #0
 801ba14:	f000 bcc8 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "int") && (p.type_ == "unsigned int"))
 801ba18:	2500      	movs	r5, #0
 801ba1a:	1d3b      	adds	r3, r7, #4
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	f103 040c 	add.w	r4, r3, #12
 801ba22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba26:	494c      	ldr	r1, [pc, #304]	; (801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801ba28:	4618      	mov	r0, r3
 801ba2a:	f7ee fbd0 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ba2e:	2601      	movs	r6, #1
 801ba30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba34:	4619      	mov	r1, r3
 801ba36:	4620      	mov	r0, r4
 801ba38:	f7ee ff8d 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801ba3c:	4603      	mov	r3, r0
 801ba3e:	2b00      	cmp	r3, #0
 801ba40:	d015      	beq.n	801ba6e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801ba42:	463b      	mov	r3, r7
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	f103 040c 	add.w	r4, r3, #12
 801ba4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ba4e:	4943      	ldr	r1, [pc, #268]	; (801bb5c <_ZNK14MockNamedValue6equalsERKS_+0x314>)
 801ba50:	4618      	mov	r0, r3
 801ba52:	f7ee fbbc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ba56:	2501      	movs	r5, #1
 801ba58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ba5c:	4619      	mov	r1, r3
 801ba5e:	4620      	mov	r0, r4
 801ba60:	f7ee ff79 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801ba64:	4603      	mov	r3, r0
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d001      	beq.n	801ba6e <_ZNK14MockNamedValue6equalsERKS_+0x226>
 801ba6a:	2401      	movs	r4, #1
 801ba6c:	e000      	b.n	801ba70 <_ZNK14MockNamedValue6equalsERKS_+0x228>
 801ba6e:	2400      	movs	r4, #0
 801ba70:	2d00      	cmp	r5, #0
 801ba72:	d004      	beq.n	801ba7e <_ZNK14MockNamedValue6equalsERKS_+0x236>
 801ba74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801ba78:	4618      	mov	r0, r3
 801ba7a:	f7ee ff60 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801ba7e:	2e00      	cmp	r6, #0
 801ba80:	d004      	beq.n	801ba8c <_ZNK14MockNamedValue6equalsERKS_+0x244>
 801ba82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801ba86:	4618      	mov	r0, r3
 801ba88:	f7ee ff59 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801ba8c:	2c00      	cmp	r4, #0
 801ba8e:	d012      	beq.n	801bab6 <_ZNK14MockNamedValue6equalsERKS_+0x26e>
        return (value_.intValue_ >= 0) && ((unsigned int)value_.intValue_ == p.value_.unsignedIntValue_);
 801ba90:	1d3b      	adds	r3, r7, #4
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	699b      	ldr	r3, [r3, #24]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	db0a      	blt.n	801bab0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801ba9a:	1d3b      	adds	r3, r7, #4
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	699b      	ldr	r3, [r3, #24]
 801baa0:	463a      	mov	r2, r7
 801baa2:	6812      	ldr	r2, [r2, #0]
 801baa4:	6992      	ldr	r2, [r2, #24]
 801baa6:	4293      	cmp	r3, r2
 801baa8:	d102      	bne.n	801bab0 <_ZNK14MockNamedValue6equalsERKS_+0x268>
 801baaa:	2401      	movs	r4, #1
 801baac:	f000 bc7c 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bab0:	2400      	movs	r4, #0
 801bab2:	f000 bc79 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "int"))
 801bab6:	2500      	movs	r5, #0
 801bab8:	1d3b      	adds	r3, r7, #4
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	f103 040c 	add.w	r4, r3, #12
 801bac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bac4:	4926      	ldr	r1, [pc, #152]	; (801bb60 <_ZNK14MockNamedValue6equalsERKS_+0x318>)
 801bac6:	4618      	mov	r0, r3
 801bac8:	f7ee fb81 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bacc:	2601      	movs	r6, #1
 801bace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bad2:	4619      	mov	r1, r3
 801bad4:	4620      	mov	r0, r4
 801bad6:	f7ee ff3e 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bada:	4603      	mov	r3, r0
 801badc:	2b00      	cmp	r3, #0
 801bade:	d015      	beq.n	801bb0c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801bae0:	463b      	mov	r3, r7
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	f103 040c 	add.w	r4, r3, #12
 801bae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801baec:	491a      	ldr	r1, [pc, #104]	; (801bb58 <_ZNK14MockNamedValue6equalsERKS_+0x310>)
 801baee:	4618      	mov	r0, r3
 801baf0:	f7ee fb6d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801baf4:	2501      	movs	r5, #1
 801baf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bafa:	4619      	mov	r1, r3
 801bafc:	4620      	mov	r0, r4
 801bafe:	f7ee ff2a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bb02:	4603      	mov	r3, r0
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d001      	beq.n	801bb0c <_ZNK14MockNamedValue6equalsERKS_+0x2c4>
 801bb08:	2401      	movs	r4, #1
 801bb0a:	e000      	b.n	801bb0e <_ZNK14MockNamedValue6equalsERKS_+0x2c6>
 801bb0c:	2400      	movs	r4, #0
 801bb0e:	2d00      	cmp	r5, #0
 801bb10:	d004      	beq.n	801bb1c <_ZNK14MockNamedValue6equalsERKS_+0x2d4>
 801bb12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801bb16:	4618      	mov	r0, r3
 801bb18:	f7ee ff11 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bb1c:	2e00      	cmp	r6, #0
 801bb1e:	d004      	beq.n	801bb2a <_ZNK14MockNamedValue6equalsERKS_+0x2e2>
 801bb20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801bb24:	4618      	mov	r0, r3
 801bb26:	f7ee ff0a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bb2a:	2c00      	cmp	r4, #0
 801bb2c:	d01a      	beq.n	801bb64 <_ZNK14MockNamedValue6equalsERKS_+0x31c>
        return (p.value_.intValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long)p.value_.intValue_);
 801bb2e:	463b      	mov	r3, r7
 801bb30:	681b      	ldr	r3, [r3, #0]
 801bb32:	699b      	ldr	r3, [r3, #24]
 801bb34:	2b00      	cmp	r3, #0
 801bb36:	db0a      	blt.n	801bb4e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801bb38:	1d3b      	adds	r3, r7, #4
 801bb3a:	681b      	ldr	r3, [r3, #0]
 801bb3c:	699b      	ldr	r3, [r3, #24]
 801bb3e:	463a      	mov	r2, r7
 801bb40:	6812      	ldr	r2, [r2, #0]
 801bb42:	6992      	ldr	r2, [r2, #24]
 801bb44:	4293      	cmp	r3, r2
 801bb46:	d102      	bne.n	801bb4e <_ZNK14MockNamedValue6equalsERKS_+0x306>
 801bb48:	2401      	movs	r4, #1
 801bb4a:	f000 bc2d 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bb4e:	2400      	movs	r4, #0
 801bb50:	f000 bc2a 	b.w	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bb54:	080235fc 	.word	0x080235fc
 801bb58:	080235e0 	.word	0x080235e0
 801bb5c:	080235ec 	.word	0x080235ec
 801bb60:	08023608 	.word	0x08023608
    else if((type_ == "int") && (p.type_ == "unsigned long int"))
 801bb64:	2500      	movs	r5, #0
 801bb66:	1d3b      	adds	r3, r7, #4
 801bb68:	681b      	ldr	r3, [r3, #0]
 801bb6a:	f103 040c 	add.w	r4, r3, #12
 801bb6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bb72:	49b8      	ldr	r1, [pc, #736]	; (801be54 <_ZNK14MockNamedValue6equalsERKS_+0x60c>)
 801bb74:	4618      	mov	r0, r3
 801bb76:	f7ee fb2a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bb7a:	2601      	movs	r6, #1
 801bb7c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bb80:	4619      	mov	r1, r3
 801bb82:	4620      	mov	r0, r4
 801bb84:	f7ee fee7 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bb88:	4603      	mov	r3, r0
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d015      	beq.n	801bbba <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801bb8e:	463b      	mov	r3, r7
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f103 040c 	add.w	r4, r3, #12
 801bb96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bb9a:	49af      	ldr	r1, [pc, #700]	; (801be58 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	f7ee fb16 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bba2:	2501      	movs	r5, #1
 801bba4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bba8:	4619      	mov	r1, r3
 801bbaa:	4620      	mov	r0, r4
 801bbac:	f7ee fed3 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bbb0:	4603      	mov	r3, r0
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d001      	beq.n	801bbba <_ZNK14MockNamedValue6equalsERKS_+0x372>
 801bbb6:	2401      	movs	r4, #1
 801bbb8:	e000      	b.n	801bbbc <_ZNK14MockNamedValue6equalsERKS_+0x374>
 801bbba:	2400      	movs	r4, #0
 801bbbc:	2d00      	cmp	r5, #0
 801bbbe:	d004      	beq.n	801bbca <_ZNK14MockNamedValue6equalsERKS_+0x382>
 801bbc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801bbc4:	4618      	mov	r0, r3
 801bbc6:	f7ee feba 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bbca:	2e00      	cmp	r6, #0
 801bbcc:	d004      	beq.n	801bbd8 <_ZNK14MockNamedValue6equalsERKS_+0x390>
 801bbce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f7ee feb3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bbd8:	2c00      	cmp	r4, #0
 801bbda:	d010      	beq.n	801bbfe <_ZNK14MockNamedValue6equalsERKS_+0x3b6>
        return (value_.intValue_ >= 0) && ((unsigned long)value_.intValue_ == p.value_.unsignedLongIntValue_);
 801bbdc:	1d3b      	adds	r3, r7, #4
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	699b      	ldr	r3, [r3, #24]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	db09      	blt.n	801bbfa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801bbe6:	1d3b      	adds	r3, r7, #4
 801bbe8:	681b      	ldr	r3, [r3, #0]
 801bbea:	699b      	ldr	r3, [r3, #24]
 801bbec:	463a      	mov	r2, r7
 801bbee:	6812      	ldr	r2, [r2, #0]
 801bbf0:	6992      	ldr	r2, [r2, #24]
 801bbf2:	4293      	cmp	r3, r2
 801bbf4:	d101      	bne.n	801bbfa <_ZNK14MockNamedValue6equalsERKS_+0x3b2>
 801bbf6:	2401      	movs	r4, #1
 801bbf8:	e3d6      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bbfa:	2400      	movs	r4, #0
 801bbfc:	e3d4      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "long int"))
 801bbfe:	2500      	movs	r5, #0
 801bc00:	1d3b      	adds	r3, r7, #4
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	f103 040c 	add.w	r4, r3, #12
 801bc08:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc0c:	4993      	ldr	r1, [pc, #588]	; (801be5c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bc0e:	4618      	mov	r0, r3
 801bc10:	f7ee fadd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bc14:	2601      	movs	r6, #1
 801bc16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc1a:	4619      	mov	r1, r3
 801bc1c:	4620      	mov	r0, r4
 801bc1e:	f7ee fe9a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bc22:	4603      	mov	r3, r0
 801bc24:	2b00      	cmp	r3, #0
 801bc26:	d015      	beq.n	801bc54 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801bc28:	463b      	mov	r3, r7
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	f103 040c 	add.w	r4, r3, #12
 801bc30:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bc34:	498a      	ldr	r1, [pc, #552]	; (801be60 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801bc36:	4618      	mov	r0, r3
 801bc38:	f7ee fac9 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bc3c:	2501      	movs	r5, #1
 801bc3e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bc42:	4619      	mov	r1, r3
 801bc44:	4620      	mov	r0, r4
 801bc46:	f7ee fe86 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bc4a:	4603      	mov	r3, r0
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d001      	beq.n	801bc54 <_ZNK14MockNamedValue6equalsERKS_+0x40c>
 801bc50:	2401      	movs	r4, #1
 801bc52:	e000      	b.n	801bc56 <_ZNK14MockNamedValue6equalsERKS_+0x40e>
 801bc54:	2400      	movs	r4, #0
 801bc56:	2d00      	cmp	r5, #0
 801bc58:	d004      	beq.n	801bc64 <_ZNK14MockNamedValue6equalsERKS_+0x41c>
 801bc5a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801bc5e:	4618      	mov	r0, r3
 801bc60:	f7ee fe6d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bc64:	2e00      	cmp	r6, #0
 801bc66:	d004      	beq.n	801bc72 <_ZNK14MockNamedValue6equalsERKS_+0x42a>
 801bc68:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801bc6c:	4618      	mov	r0, r3
 801bc6e:	f7ee fe66 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bc72:	2c00      	cmp	r4, #0
 801bc74:	d010      	beq.n	801bc98 <_ZNK14MockNamedValue6equalsERKS_+0x450>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedIntValue_ == (unsigned long)p.value_.longIntValue_);
 801bc76:	463b      	mov	r3, r7
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	699b      	ldr	r3, [r3, #24]
 801bc7c:	2b00      	cmp	r3, #0
 801bc7e:	db09      	blt.n	801bc94 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801bc80:	1d3b      	adds	r3, r7, #4
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	699b      	ldr	r3, [r3, #24]
 801bc86:	463a      	mov	r2, r7
 801bc88:	6812      	ldr	r2, [r2, #0]
 801bc8a:	6992      	ldr	r2, [r2, #24]
 801bc8c:	4293      	cmp	r3, r2
 801bc8e:	d101      	bne.n	801bc94 <_ZNK14MockNamedValue6equalsERKS_+0x44c>
 801bc90:	2401      	movs	r4, #1
 801bc92:	e389      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bc94:	2400      	movs	r4, #0
 801bc96:	e387      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "long int") && (p.type_ == "unsigned int"))
 801bc98:	2500      	movs	r5, #0
 801bc9a:	1d3b      	adds	r3, r7, #4
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	f103 040c 	add.w	r4, r3, #12
 801bca2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bca6:	496e      	ldr	r1, [pc, #440]	; (801be60 <_ZNK14MockNamedValue6equalsERKS_+0x618>)
 801bca8:	4618      	mov	r0, r3
 801bcaa:	f7ee fa90 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bcae:	2601      	movs	r6, #1
 801bcb0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bcb4:	4619      	mov	r1, r3
 801bcb6:	4620      	mov	r0, r4
 801bcb8:	f7ee fe4d 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bcbc:	4603      	mov	r3, r0
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d015      	beq.n	801bcee <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801bcc2:	463b      	mov	r3, r7
 801bcc4:	681b      	ldr	r3, [r3, #0]
 801bcc6:	f103 040c 	add.w	r4, r3, #12
 801bcca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bcce:	4963      	ldr	r1, [pc, #396]	; (801be5c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	f7ee fa7c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bcd6:	2501      	movs	r5, #1
 801bcd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bcdc:	4619      	mov	r1, r3
 801bcde:	4620      	mov	r0, r4
 801bce0:	f7ee fe39 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bce4:	4603      	mov	r3, r0
 801bce6:	2b00      	cmp	r3, #0
 801bce8:	d001      	beq.n	801bcee <_ZNK14MockNamedValue6equalsERKS_+0x4a6>
 801bcea:	2401      	movs	r4, #1
 801bcec:	e000      	b.n	801bcf0 <_ZNK14MockNamedValue6equalsERKS_+0x4a8>
 801bcee:	2400      	movs	r4, #0
 801bcf0:	2d00      	cmp	r5, #0
 801bcf2:	d004      	beq.n	801bcfe <_ZNK14MockNamedValue6equalsERKS_+0x4b6>
 801bcf4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801bcf8:	4618      	mov	r0, r3
 801bcfa:	f7ee fe20 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bcfe:	2e00      	cmp	r6, #0
 801bd00:	d004      	beq.n	801bd0c <_ZNK14MockNamedValue6equalsERKS_+0x4c4>
 801bd02:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801bd06:	4618      	mov	r0, r3
 801bd08:	f7ee fe19 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bd0c:	2c00      	cmp	r4, #0
 801bd0e:	d010      	beq.n	801bd32 <_ZNK14MockNamedValue6equalsERKS_+0x4ea>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedIntValue_);
 801bd10:	1d3b      	adds	r3, r7, #4
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	699b      	ldr	r3, [r3, #24]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	db09      	blt.n	801bd2e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801bd1a:	1d3b      	adds	r3, r7, #4
 801bd1c:	681b      	ldr	r3, [r3, #0]
 801bd1e:	699b      	ldr	r3, [r3, #24]
 801bd20:	463a      	mov	r2, r7
 801bd22:	6812      	ldr	r2, [r2, #0]
 801bd24:	6992      	ldr	r2, [r2, #24]
 801bd26:	4293      	cmp	r3, r2
 801bd28:	d101      	bne.n	801bd2e <_ZNK14MockNamedValue6equalsERKS_+0x4e6>
 801bd2a:	2401      	movs	r4, #1
 801bd2c:	e33c      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bd2e:	2400      	movs	r4, #0
 801bd30:	e33a      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned int") && (p.type_ == "unsigned long int"))
 801bd32:	2500      	movs	r5, #0
 801bd34:	1d3b      	adds	r3, r7, #4
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f103 040c 	add.w	r4, r3, #12
 801bd3c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bd40:	4946      	ldr	r1, [pc, #280]	; (801be5c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bd42:	4618      	mov	r0, r3
 801bd44:	f7ee fa43 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bd48:	2601      	movs	r6, #1
 801bd4a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bd4e:	4619      	mov	r1, r3
 801bd50:	4620      	mov	r0, r4
 801bd52:	f7ee fe00 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bd56:	4603      	mov	r3, r0
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d015      	beq.n	801bd88 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801bd5c:	463b      	mov	r3, r7
 801bd5e:	681b      	ldr	r3, [r3, #0]
 801bd60:	f103 040c 	add.w	r4, r3, #12
 801bd64:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bd68:	493b      	ldr	r1, [pc, #236]	; (801be58 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801bd6a:	4618      	mov	r0, r3
 801bd6c:	f7ee fa2f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bd70:	2501      	movs	r5, #1
 801bd72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bd76:	4619      	mov	r1, r3
 801bd78:	4620      	mov	r0, r4
 801bd7a:	f7ee fdec 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bd7e:	4603      	mov	r3, r0
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d001      	beq.n	801bd88 <_ZNK14MockNamedValue6equalsERKS_+0x540>
 801bd84:	2401      	movs	r4, #1
 801bd86:	e000      	b.n	801bd8a <_ZNK14MockNamedValue6equalsERKS_+0x542>
 801bd88:	2400      	movs	r4, #0
 801bd8a:	2d00      	cmp	r5, #0
 801bd8c:	d004      	beq.n	801bd98 <_ZNK14MockNamedValue6equalsERKS_+0x550>
 801bd8e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801bd92:	4618      	mov	r0, r3
 801bd94:	f7ee fdd3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bd98:	2e00      	cmp	r6, #0
 801bd9a:	d004      	beq.n	801bda6 <_ZNK14MockNamedValue6equalsERKS_+0x55e>
 801bd9c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7ee fdcc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bda6:	2c00      	cmp	r4, #0
 801bda8:	d00b      	beq.n	801bdc2 <_ZNK14MockNamedValue6equalsERKS_+0x57a>
        return value_.unsignedIntValue_ == p.value_.unsignedLongIntValue_;
 801bdaa:	1d3b      	adds	r3, r7, #4
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	699a      	ldr	r2, [r3, #24]
 801bdb0:	463b      	mov	r3, r7
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	699b      	ldr	r3, [r3, #24]
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	bf0c      	ite	eq
 801bdba:	2301      	moveq	r3, #1
 801bdbc:	2300      	movne	r3, #0
 801bdbe:	b2dc      	uxtb	r4, r3
 801bdc0:	e2f2      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "unsigned int"))
 801bdc2:	2500      	movs	r5, #0
 801bdc4:	1d3b      	adds	r3, r7, #4
 801bdc6:	681b      	ldr	r3, [r3, #0]
 801bdc8:	f103 040c 	add.w	r4, r3, #12
 801bdcc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bdd0:	4921      	ldr	r1, [pc, #132]	; (801be58 <_ZNK14MockNamedValue6equalsERKS_+0x610>)
 801bdd2:	4618      	mov	r0, r3
 801bdd4:	f7ee f9fb 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bdd8:	2601      	movs	r6, #1
 801bdda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801bdde:	4619      	mov	r1, r3
 801bde0:	4620      	mov	r0, r4
 801bde2:	f7ee fdb8 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bde6:	4603      	mov	r3, r0
 801bde8:	2b00      	cmp	r3, #0
 801bdea:	d015      	beq.n	801be18 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801bdec:	463b      	mov	r3, r7
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	f103 040c 	add.w	r4, r3, #12
 801bdf4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801bdf8:	4918      	ldr	r1, [pc, #96]	; (801be5c <_ZNK14MockNamedValue6equalsERKS_+0x614>)
 801bdfa:	4618      	mov	r0, r3
 801bdfc:	f7ee f9e7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801be00:	2501      	movs	r5, #1
 801be02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801be06:	4619      	mov	r1, r3
 801be08:	4620      	mov	r0, r4
 801be0a:	f7ee fda4 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801be0e:	4603      	mov	r3, r0
 801be10:	2b00      	cmp	r3, #0
 801be12:	d001      	beq.n	801be18 <_ZNK14MockNamedValue6equalsERKS_+0x5d0>
 801be14:	2401      	movs	r4, #1
 801be16:	e000      	b.n	801be1a <_ZNK14MockNamedValue6equalsERKS_+0x5d2>
 801be18:	2400      	movs	r4, #0
 801be1a:	2d00      	cmp	r5, #0
 801be1c:	d004      	beq.n	801be28 <_ZNK14MockNamedValue6equalsERKS_+0x5e0>
 801be1e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801be22:	4618      	mov	r0, r3
 801be24:	f7ee fd8b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801be28:	2e00      	cmp	r6, #0
 801be2a:	d004      	beq.n	801be36 <_ZNK14MockNamedValue6equalsERKS_+0x5ee>
 801be2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801be30:	4618      	mov	r0, r3
 801be32:	f7ee fd84 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801be36:	2c00      	cmp	r4, #0
 801be38:	d014      	beq.n	801be64 <_ZNK14MockNamedValue6equalsERKS_+0x61c>
        return value_.unsignedLongIntValue_ == p.value_.unsignedIntValue_;
 801be3a:	1d3b      	adds	r3, r7, #4
 801be3c:	681b      	ldr	r3, [r3, #0]
 801be3e:	699a      	ldr	r2, [r3, #24]
 801be40:	463b      	mov	r3, r7
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	699b      	ldr	r3, [r3, #24]
 801be46:	429a      	cmp	r2, r3
 801be48:	bf0c      	ite	eq
 801be4a:	2301      	moveq	r3, #1
 801be4c:	2300      	movne	r3, #0
 801be4e:	b2dc      	uxtb	r4, r3
 801be50:	e2aa      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801be52:	bf00      	nop
 801be54:	080235e0 	.word	0x080235e0
 801be58:	08023608 	.word	0x08023608
 801be5c:	080235ec 	.word	0x080235ec
 801be60:	080235fc 	.word	0x080235fc
    else if((type_ == "long int") && (p.type_ == "unsigned long int"))
 801be64:	2500      	movs	r5, #0
 801be66:	1d3b      	adds	r3, r7, #4
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f103 040c 	add.w	r4, r3, #12
 801be6e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801be72:	49ae      	ldr	r1, [pc, #696]	; (801c12c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801be74:	4618      	mov	r0, r3
 801be76:	f7ee f9aa 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801be7a:	2601      	movs	r6, #1
 801be7c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801be80:	4619      	mov	r1, r3
 801be82:	4620      	mov	r0, r4
 801be84:	f7ee fd67 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801be88:	4603      	mov	r3, r0
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d015      	beq.n	801beba <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801be8e:	463b      	mov	r3, r7
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	f103 040c 	add.w	r4, r3, #12
 801be96:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801be9a:	49a5      	ldr	r1, [pc, #660]	; (801c130 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801be9c:	4618      	mov	r0, r3
 801be9e:	f7ee f996 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bea2:	2501      	movs	r5, #1
 801bea4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bea8:	4619      	mov	r1, r3
 801beaa:	4620      	mov	r0, r4
 801beac:	f7ee fd53 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801beb0:	4603      	mov	r3, r0
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d001      	beq.n	801beba <_ZNK14MockNamedValue6equalsERKS_+0x672>
 801beb6:	2401      	movs	r4, #1
 801beb8:	e000      	b.n	801bebc <_ZNK14MockNamedValue6equalsERKS_+0x674>
 801beba:	2400      	movs	r4, #0
 801bebc:	2d00      	cmp	r5, #0
 801bebe:	d004      	beq.n	801beca <_ZNK14MockNamedValue6equalsERKS_+0x682>
 801bec0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801bec4:	4618      	mov	r0, r3
 801bec6:	f7ee fd3a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801beca:	2e00      	cmp	r6, #0
 801becc:	d004      	beq.n	801bed8 <_ZNK14MockNamedValue6equalsERKS_+0x690>
 801bece:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801bed2:	4618      	mov	r0, r3
 801bed4:	f7ee fd33 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bed8:	2c00      	cmp	r4, #0
 801beda:	d010      	beq.n	801befe <_ZNK14MockNamedValue6equalsERKS_+0x6b6>
        return (value_.longIntValue_ >= 0) && ((unsigned long)value_.longIntValue_ == p.value_.unsignedLongIntValue_);
 801bedc:	1d3b      	adds	r3, r7, #4
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	699b      	ldr	r3, [r3, #24]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	db09      	blt.n	801befa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801bee6:	1d3b      	adds	r3, r7, #4
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	699b      	ldr	r3, [r3, #24]
 801beec:	463a      	mov	r2, r7
 801beee:	6812      	ldr	r2, [r2, #0]
 801bef0:	6992      	ldr	r2, [r2, #24]
 801bef2:	4293      	cmp	r3, r2
 801bef4:	d101      	bne.n	801befa <_ZNK14MockNamedValue6equalsERKS_+0x6b2>
 801bef6:	2401      	movs	r4, #1
 801bef8:	e256      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801befa:	2400      	movs	r4, #0
 801befc:	e254      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if((type_ == "unsigned long int") && (p.type_ == "long int"))
 801befe:	2500      	movs	r5, #0
 801bf00:	1d3b      	adds	r3, r7, #4
 801bf02:	681b      	ldr	r3, [r3, #0]
 801bf04:	f103 040c 	add.w	r4, r3, #12
 801bf08:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bf0c:	4988      	ldr	r1, [pc, #544]	; (801c130 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801bf0e:	4618      	mov	r0, r3
 801bf10:	f7ee f95d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bf14:	2601      	movs	r6, #1
 801bf16:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bf1a:	4619      	mov	r1, r3
 801bf1c:	4620      	mov	r0, r4
 801bf1e:	f7ee fd1a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bf22:	4603      	mov	r3, r0
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d015      	beq.n	801bf54 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801bf28:	463b      	mov	r3, r7
 801bf2a:	681b      	ldr	r3, [r3, #0]
 801bf2c:	f103 040c 	add.w	r4, r3, #12
 801bf30:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bf34:	497d      	ldr	r1, [pc, #500]	; (801c12c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801bf36:	4618      	mov	r0, r3
 801bf38:	f7ee f949 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bf3c:	2501      	movs	r5, #1
 801bf3e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bf42:	4619      	mov	r1, r3
 801bf44:	4620      	mov	r0, r4
 801bf46:	f7ee fd06 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bf4a:	4603      	mov	r3, r0
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d001      	beq.n	801bf54 <_ZNK14MockNamedValue6equalsERKS_+0x70c>
 801bf50:	2401      	movs	r4, #1
 801bf52:	e000      	b.n	801bf56 <_ZNK14MockNamedValue6equalsERKS_+0x70e>
 801bf54:	2400      	movs	r4, #0
 801bf56:	2d00      	cmp	r5, #0
 801bf58:	d004      	beq.n	801bf64 <_ZNK14MockNamedValue6equalsERKS_+0x71c>
 801bf5a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f7ee fced 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bf64:	2e00      	cmp	r6, #0
 801bf66:	d004      	beq.n	801bf72 <_ZNK14MockNamedValue6equalsERKS_+0x72a>
 801bf68:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	f7ee fce6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bf72:	2c00      	cmp	r4, #0
 801bf74:	d010      	beq.n	801bf98 <_ZNK14MockNamedValue6equalsERKS_+0x750>
        return (p.value_.longIntValue_ >= 0) && (value_.unsignedLongIntValue_ == (unsigned long) p.value_.longIntValue_);
 801bf76:	463b      	mov	r3, r7
 801bf78:	681b      	ldr	r3, [r3, #0]
 801bf7a:	699b      	ldr	r3, [r3, #24]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	db09      	blt.n	801bf94 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801bf80:	1d3b      	adds	r3, r7, #4
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	699b      	ldr	r3, [r3, #24]
 801bf86:	463a      	mov	r2, r7
 801bf88:	6812      	ldr	r2, [r2, #0]
 801bf8a:	6992      	ldr	r2, [r2, #24]
 801bf8c:	4293      	cmp	r3, r2
 801bf8e:	d101      	bne.n	801bf94 <_ZNK14MockNamedValue6equalsERKS_+0x74c>
 801bf90:	2401      	movs	r4, #1
 801bf92:	e209      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801bf94:	2400      	movs	r4, #0
 801bf96:	e207      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongIntValue_;
    else if ((type_ == "unsigned long int") && (p.type_ == "unsigned long long int"))
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif

    if (type_ != p.type_) return false;
 801bf98:	1d3b      	adds	r3, r7, #4
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	f103 020c 	add.w	r2, r3, #12
 801bfa0:	463b      	mov	r3, r7
 801bfa2:	681b      	ldr	r3, [r3, #0]
 801bfa4:	330c      	adds	r3, #12
 801bfa6:	4619      	mov	r1, r3
 801bfa8:	4610      	mov	r0, r2
 801bfaa:	f7ee fd19 	bl	800a9e0 <_ZneRK12SimpleStringS1_>
 801bfae:	4603      	mov	r3, r0
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d001      	beq.n	801bfb8 <_ZNK14MockNamedValue6equalsERKS_+0x770>
 801bfb4:	2400      	movs	r4, #0
 801bfb6:	e1f7      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    if (type_ == "bool")
 801bfb8:	1d3b      	adds	r3, r7, #4
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	f103 040c 	add.w	r4, r3, #12
 801bfc0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bfc4:	495b      	ldr	r1, [pc, #364]	; (801c134 <_ZNK14MockNamedValue6equalsERKS_+0x8ec>)
 801bfc6:	4618      	mov	r0, r3
 801bfc8:	f7ee f901 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801bfcc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bfd0:	4619      	mov	r1, r3
 801bfd2:	4620      	mov	r0, r4
 801bfd4:	f7ee fcbf 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801bfd8:	4603      	mov	r3, r0
 801bfda:	461c      	mov	r4, r3
 801bfdc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f7ee fcac 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801bfe6:	2c00      	cmp	r4, #0
 801bfe8:	d00b      	beq.n	801c002 <_ZNK14MockNamedValue6equalsERKS_+0x7ba>
        return value_.boolValue_ == p.value_.boolValue_;
 801bfea:	1d3b      	adds	r3, r7, #4
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	7e1a      	ldrb	r2, [r3, #24]
 801bff0:	463b      	mov	r3, r7
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	7e1b      	ldrb	r3, [r3, #24]
 801bff6:	429a      	cmp	r2, r3
 801bff8:	bf0c      	ite	eq
 801bffa:	2301      	moveq	r3, #1
 801bffc:	2300      	movne	r3, #0
 801bffe:	b2dc      	uxtb	r4, r3
 801c000:	e1d2      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "int")
 801c002:	1d3b      	adds	r3, r7, #4
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	f103 040c 	add.w	r4, r3, #12
 801c00a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c00e:	494a      	ldr	r1, [pc, #296]	; (801c138 <_ZNK14MockNamedValue6equalsERKS_+0x8f0>)
 801c010:	4618      	mov	r0, r3
 801c012:	f7ee f8dc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c016:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c01a:	4619      	mov	r1, r3
 801c01c:	4620      	mov	r0, r4
 801c01e:	f7ee fc9a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c022:	4603      	mov	r3, r0
 801c024:	461c      	mov	r4, r3
 801c026:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c02a:	4618      	mov	r0, r3
 801c02c:	f7ee fc87 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c030:	2c00      	cmp	r4, #0
 801c032:	d00b      	beq.n	801c04c <_ZNK14MockNamedValue6equalsERKS_+0x804>
        return value_.intValue_ == p.value_.intValue_;
 801c034:	1d3b      	adds	r3, r7, #4
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	699a      	ldr	r2, [r3, #24]
 801c03a:	463b      	mov	r3, r7
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	699b      	ldr	r3, [r3, #24]
 801c040:	429a      	cmp	r2, r3
 801c042:	bf0c      	ite	eq
 801c044:	2301      	moveq	r3, #1
 801c046:	2300      	movne	r3, #0
 801c048:	b2dc      	uxtb	r4, r3
 801c04a:	e1ad      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned int")
 801c04c:	1d3b      	adds	r3, r7, #4
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	f103 040c 	add.w	r4, r3, #12
 801c054:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c058:	4938      	ldr	r1, [pc, #224]	; (801c13c <_ZNK14MockNamedValue6equalsERKS_+0x8f4>)
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7ee f8b7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c060:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c064:	4619      	mov	r1, r3
 801c066:	4620      	mov	r0, r4
 801c068:	f7ee fc75 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c06c:	4603      	mov	r3, r0
 801c06e:	461c      	mov	r4, r3
 801c070:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c074:	4618      	mov	r0, r3
 801c076:	f7ee fc62 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c07a:	2c00      	cmp	r4, #0
 801c07c:	d00b      	beq.n	801c096 <_ZNK14MockNamedValue6equalsERKS_+0x84e>
        return value_.unsignedIntValue_ == p.value_.unsignedIntValue_;
 801c07e:	1d3b      	adds	r3, r7, #4
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	699a      	ldr	r2, [r3, #24]
 801c084:	463b      	mov	r3, r7
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	699b      	ldr	r3, [r3, #24]
 801c08a:	429a      	cmp	r2, r3
 801c08c:	bf0c      	ite	eq
 801c08e:	2301      	moveq	r3, #1
 801c090:	2300      	movne	r3, #0
 801c092:	b2dc      	uxtb	r4, r3
 801c094:	e188      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "long int")
 801c096:	1d3b      	adds	r3, r7, #4
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	f103 040c 	add.w	r4, r3, #12
 801c09e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c0a2:	4922      	ldr	r1, [pc, #136]	; (801c12c <_ZNK14MockNamedValue6equalsERKS_+0x8e4>)
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f7ee f892 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c0aa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c0ae:	4619      	mov	r1, r3
 801c0b0:	4620      	mov	r0, r4
 801c0b2:	f7ee fc50 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c0b6:	4603      	mov	r3, r0
 801c0b8:	461c      	mov	r4, r3
 801c0ba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801c0be:	4618      	mov	r0, r3
 801c0c0:	f7ee fc3d 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c0c4:	2c00      	cmp	r4, #0
 801c0c6:	d00b      	beq.n	801c0e0 <_ZNK14MockNamedValue6equalsERKS_+0x898>
        return value_.longIntValue_ == p.value_.longIntValue_;
 801c0c8:	1d3b      	adds	r3, r7, #4
 801c0ca:	681b      	ldr	r3, [r3, #0]
 801c0cc:	699a      	ldr	r2, [r3, #24]
 801c0ce:	463b      	mov	r3, r7
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	699b      	ldr	r3, [r3, #24]
 801c0d4:	429a      	cmp	r2, r3
 801c0d6:	bf0c      	ite	eq
 801c0d8:	2301      	moveq	r3, #1
 801c0da:	2300      	movne	r3, #0
 801c0dc:	b2dc      	uxtb	r4, r3
 801c0de:	e163      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "unsigned long int")
 801c0e0:	1d3b      	adds	r3, r7, #4
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	f103 040c 	add.w	r4, r3, #12
 801c0e8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c0ec:	4910      	ldr	r1, [pc, #64]	; (801c130 <_ZNK14MockNamedValue6equalsERKS_+0x8e8>)
 801c0ee:	4618      	mov	r0, r3
 801c0f0:	f7ee f86d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c0f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c0f8:	4619      	mov	r1, r3
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	f7ee fc2b 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c100:	4603      	mov	r3, r0
 801c102:	461c      	mov	r4, r3
 801c104:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 801c108:	4618      	mov	r0, r3
 801c10a:	f7ee fc18 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c10e:	2c00      	cmp	r4, #0
 801c110:	d016      	beq.n	801c140 <_ZNK14MockNamedValue6equalsERKS_+0x8f8>
        return value_.unsignedLongIntValue_ == p.value_.unsignedLongIntValue_;
 801c112:	1d3b      	adds	r3, r7, #4
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	699a      	ldr	r2, [r3, #24]
 801c118:	463b      	mov	r3, r7
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	699b      	ldr	r3, [r3, #24]
 801c11e:	429a      	cmp	r2, r3
 801c120:	bf0c      	ite	eq
 801c122:	2301      	moveq	r3, #1
 801c124:	2300      	movne	r3, #0
 801c126:	b2dc      	uxtb	r4, r3
 801c128:	e13e      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
 801c12a:	bf00      	nop
 801c12c:	080235fc 	.word	0x080235fc
 801c130:	08023608 	.word	0x08023608
 801c134:	080235e4 	.word	0x080235e4
 801c138:	080235e0 	.word	0x080235e0
 801c13c:	080235ec 	.word	0x080235ec
    else if (type_ == "long long int")
        return value_.longLongIntValue_ == p.value_.longLongIntValue_;
    else if (type_ == "unsigned long long int")
        return value_.unsignedLongLongIntValue_ == p.value_.unsignedLongLongIntValue_;
#endif
    else if (type_ == "const char*")
 801c140:	1d3b      	adds	r3, r7, #4
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	f103 040c 	add.w	r4, r3, #12
 801c148:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c14c:	4999      	ldr	r1, [pc, #612]	; (801c3b4 <_ZNK14MockNamedValue6equalsERKS_+0xb6c>)
 801c14e:	4618      	mov	r0, r3
 801c150:	f7ee f83d 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c154:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c158:	4619      	mov	r1, r3
 801c15a:	4620      	mov	r0, r4
 801c15c:	f7ee fbfb 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c160:	4603      	mov	r3, r0
 801c162:	461c      	mov	r4, r3
 801c164:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801c168:	4618      	mov	r0, r3
 801c16a:	f7ee fbe8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c16e:	2c00      	cmp	r4, #0
 801c170:	d026      	beq.n	801c1c0 <_ZNK14MockNamedValue6equalsERKS_+0x978>
        return SimpleString(value_.stringValue_) == SimpleString(p.value_.stringValue_);
 801c172:	1d3b      	adds	r3, r7, #4
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	699a      	ldr	r2, [r3, #24]
 801c178:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c17c:	4611      	mov	r1, r2
 801c17e:	4618      	mov	r0, r3
 801c180:	f7ee f825 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c184:	463b      	mov	r3, r7
 801c186:	681b      	ldr	r3, [r3, #0]
 801c188:	699a      	ldr	r2, [r3, #24]
 801c18a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c18e:	4611      	mov	r1, r2
 801c190:	4618      	mov	r0, r3
 801c192:	f7ee f81c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c196:	f507 7280 	add.w	r2, r7, #256	; 0x100
 801c19a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c19e:	4611      	mov	r1, r2
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f7ee fbd8 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	461c      	mov	r4, r3
 801c1aa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	f7ee fbc5 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c1b4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7ee fbc0 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c1be:	e0f3      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void*")
 801c1c0:	1d3b      	adds	r3, r7, #4
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	f103 040c 	add.w	r4, r3, #12
 801c1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c1cc:	497a      	ldr	r1, [pc, #488]	; (801c3b8 <_ZNK14MockNamedValue6equalsERKS_+0xb70>)
 801c1ce:	4618      	mov	r0, r3
 801c1d0:	f7ed fffd 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c1d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c1d8:	4619      	mov	r1, r3
 801c1da:	4620      	mov	r0, r4
 801c1dc:	f7ee fbbb 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	461c      	mov	r4, r3
 801c1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	f7ee fba8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c1ee:	2c00      	cmp	r4, #0
 801c1f0:	d00b      	beq.n	801c20a <_ZNK14MockNamedValue6equalsERKS_+0x9c2>
        return value_.pointerValue_ == p.value_.pointerValue_;
 801c1f2:	1d3b      	adds	r3, r7, #4
 801c1f4:	681b      	ldr	r3, [r3, #0]
 801c1f6:	699a      	ldr	r2, [r3, #24]
 801c1f8:	463b      	mov	r3, r7
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	699b      	ldr	r3, [r3, #24]
 801c1fe:	429a      	cmp	r2, r3
 801c200:	bf0c      	ite	eq
 801c202:	2301      	moveq	r3, #1
 801c204:	2300      	movne	r3, #0
 801c206:	b2dc      	uxtb	r4, r3
 801c208:	e0ce      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const void*")
 801c20a:	1d3b      	adds	r3, r7, #4
 801c20c:	681b      	ldr	r3, [r3, #0]
 801c20e:	f103 040c 	add.w	r4, r3, #12
 801c212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c216:	4969      	ldr	r1, [pc, #420]	; (801c3bc <_ZNK14MockNamedValue6equalsERKS_+0xb74>)
 801c218:	4618      	mov	r0, r3
 801c21a:	f7ed ffd8 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c21e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c222:	4619      	mov	r1, r3
 801c224:	4620      	mov	r0, r4
 801c226:	f7ee fb96 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c22a:	4603      	mov	r3, r0
 801c22c:	461c      	mov	r4, r3
 801c22e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801c232:	4618      	mov	r0, r3
 801c234:	f7ee fb83 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c238:	2c00      	cmp	r4, #0
 801c23a:	d00b      	beq.n	801c254 <_ZNK14MockNamedValue6equalsERKS_+0xa0c>
        return value_.constPointerValue_ == p.value_.constPointerValue_;
 801c23c:	1d3b      	adds	r3, r7, #4
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	699a      	ldr	r2, [r3, #24]
 801c242:	463b      	mov	r3, r7
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	699b      	ldr	r3, [r3, #24]
 801c248:	429a      	cmp	r2, r3
 801c24a:	bf0c      	ite	eq
 801c24c:	2301      	moveq	r3, #1
 801c24e:	2300      	movne	r3, #0
 801c250:	b2dc      	uxtb	r4, r3
 801c252:	e0a9      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "void (*)()")
 801c254:	1d3b      	adds	r3, r7, #4
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	f103 040c 	add.w	r4, r3, #12
 801c25c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c260:	4957      	ldr	r1, [pc, #348]	; (801c3c0 <_ZNK14MockNamedValue6equalsERKS_+0xb78>)
 801c262:	4618      	mov	r0, r3
 801c264:	f7ed ffb3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c268:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c26c:	4619      	mov	r1, r3
 801c26e:	4620      	mov	r0, r4
 801c270:	f7ee fb71 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c274:	4603      	mov	r3, r0
 801c276:	461c      	mov	r4, r3
 801c278:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801c27c:	4618      	mov	r0, r3
 801c27e:	f7ee fb5e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c282:	2c00      	cmp	r4, #0
 801c284:	d00b      	beq.n	801c29e <_ZNK14MockNamedValue6equalsERKS_+0xa56>
        return value_.functionPointerValue_ == p.value_.functionPointerValue_;
 801c286:	1d3b      	adds	r3, r7, #4
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	699a      	ldr	r2, [r3, #24]
 801c28c:	463b      	mov	r3, r7
 801c28e:	681b      	ldr	r3, [r3, #0]
 801c290:	699b      	ldr	r3, [r3, #24]
 801c292:	429a      	cmp	r2, r3
 801c294:	bf0c      	ite	eq
 801c296:	2301      	moveq	r3, #1
 801c298:	2300      	movne	r3, #0
 801c29a:	b2dc      	uxtb	r4, r3
 801c29c:	e084      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "double")
 801c29e:	1d3b      	adds	r3, r7, #4
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	f103 040c 	add.w	r4, r3, #12
 801c2a6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c2aa:	4946      	ldr	r1, [pc, #280]	; (801c3c4 <_ZNK14MockNamedValue6equalsERKS_+0xb7c>)
 801c2ac:	4618      	mov	r0, r3
 801c2ae:	f7ed ff8e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c2b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c2b6:	4619      	mov	r1, r3
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	f7ee fb4c 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c2be:	4603      	mov	r3, r0
 801c2c0:	461c      	mov	r4, r3
 801c2c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f7ee fb39 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c2cc:	2c00      	cmp	r4, #0
 801c2ce:	d01c      	beq.n	801c30a <_ZNK14MockNamedValue6equalsERKS_+0xac2>
        return (doubles_equal(value_.doubleValue_.value, p.value_.doubleValue_.value, value_.doubleValue_.tolerance));
 801c2d0:	1d3b      	adds	r3, r7, #4
 801c2d2:	681b      	ldr	r3, [r3, #0]
 801c2d4:	ed93 7b06 	vldr	d7, [r3, #24]
 801c2d8:	463b      	mov	r3, r7
 801c2da:	681b      	ldr	r3, [r3, #0]
 801c2dc:	ed93 6b06 	vldr	d6, [r3, #24]
 801c2e0:	1d3b      	adds	r3, r7, #4
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	ed93 5b08 	vldr	d5, [r3, #32]
 801c2e8:	eeb0 2a45 	vmov.f32	s4, s10
 801c2ec:	eef0 2a65 	vmov.f32	s5, s11
 801c2f0:	eeb0 1a46 	vmov.f32	s2, s12
 801c2f4:	eef0 1a66 	vmov.f32	s3, s13
 801c2f8:	eeb0 0a47 	vmov.f32	s0, s14
 801c2fc:	eef0 0a67 	vmov.f32	s1, s15
 801c300:	f7f3 fe18 	bl	800ff34 <_Z13doubles_equalddd>
 801c304:	4603      	mov	r3, r0
 801c306:	461c      	mov	r4, r3
 801c308:	e04e      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    else if (type_ == "const unsigned char*")
 801c30a:	1d3b      	adds	r3, r7, #4
 801c30c:	681b      	ldr	r3, [r3, #0]
 801c30e:	f103 040c 	add.w	r4, r3, #12
 801c312:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c316:	492c      	ldr	r1, [pc, #176]	; (801c3c8 <_ZNK14MockNamedValue6equalsERKS_+0xb80>)
 801c318:	4618      	mov	r0, r3
 801c31a:	f7ed ff58 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c31e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c322:	4619      	mov	r1, r3
 801c324:	4620      	mov	r0, r4
 801c326:	f7ee fb16 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c32a:	4603      	mov	r3, r0
 801c32c:	461c      	mov	r4, r3
 801c32e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 801c332:	4618      	mov	r0, r3
 801c334:	f7ee fb03 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c338:	2c00      	cmp	r4, #0
 801c33a:	d01c      	beq.n	801c376 <_ZNK14MockNamedValue6equalsERKS_+0xb2e>
    {
        if (size_ != p.size_) {
 801c33c:	1d3b      	adds	r3, r7, #4
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c342:	463b      	mov	r3, r7
 801c344:	681b      	ldr	r3, [r3, #0]
 801c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c348:	429a      	cmp	r2, r3
 801c34a:	d001      	beq.n	801c350 <_ZNK14MockNamedValue6equalsERKS_+0xb08>
            return false;
 801c34c:	2400      	movs	r4, #0
 801c34e:	e02b      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
        }
        return SimpleString::MemCmp(value_.memoryBufferValue_, p.value_.memoryBufferValue_, size_) == 0;
 801c350:	1d3b      	adds	r3, r7, #4
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	6998      	ldr	r0, [r3, #24]
 801c356:	463b      	mov	r3, r7
 801c358:	681b      	ldr	r3, [r3, #0]
 801c35a:	6999      	ldr	r1, [r3, #24]
 801c35c:	1d3b      	adds	r3, r7, #4
 801c35e:	681b      	ldr	r3, [r3, #0]
 801c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c362:	461a      	mov	r2, r3
 801c364:	f7ed fe52 	bl	800a00c <_ZN12SimpleString6MemCmpEPKvS1_j>
 801c368:	4603      	mov	r3, r0
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	bf0c      	ite	eq
 801c36e:	2301      	moveq	r3, #1
 801c370:	2300      	movne	r3, #0
 801c372:	b2dc      	uxtb	r4, r3
 801c374:	e018      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>
    }

    if (comparator_)
 801c376:	1d3b      	adds	r3, r7, #4
 801c378:	681b      	ldr	r3, [r3, #0]
 801c37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c37c:	2b00      	cmp	r3, #0
 801c37e:	d012      	beq.n	801c3a6 <_ZNK14MockNamedValue6equalsERKS_+0xb5e>
        return comparator_->isEqual(value_.constObjectPointerValue_, p.value_.constObjectPointerValue_);
 801c380:	1d3b      	adds	r3, r7, #4
 801c382:	681b      	ldr	r3, [r3, #0]
 801c384:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 801c386:	1d3b      	adds	r3, r7, #4
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	3308      	adds	r3, #8
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	1d3a      	adds	r2, r7, #4
 801c394:	6812      	ldr	r2, [r2, #0]
 801c396:	6991      	ldr	r1, [r2, #24]
 801c398:	463a      	mov	r2, r7
 801c39a:	6812      	ldr	r2, [r2, #0]
 801c39c:	6992      	ldr	r2, [r2, #24]
 801c39e:	4798      	blx	r3
 801c3a0:	4603      	mov	r3, r0
 801c3a2:	461c      	mov	r4, r3
 801c3a4:	e000      	b.n	801c3a8 <_ZNK14MockNamedValue6equalsERKS_+0xb60>

    return false;
 801c3a6:	2400      	movs	r4, #0
 801c3a8:	4623      	mov	r3, r4
}
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 801c3b0:	46bd      	mov	sp, r7
 801c3b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3b4:	080236ac 	.word	0x080236ac
 801c3b8:	0802368c 	.word	0x0802368c
 801c3bc:	08023694 	.word	0x08023694
 801c3c0:	080236a0 	.word	0x080236a0
 801c3c4:	08023684 	.word	0x08023684
 801c3c8:	080236b8 	.word	0x080236b8

0801c3cc <_ZNK14MockNamedValue20compatibleForCopyingERKS_>:

bool MockNamedValue::compatibleForCopying(const MockNamedValue& p) const
{
 801c3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c3ce:	b087      	sub	sp, #28
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
 801c3d4:	6039      	str	r1, [r7, #0]
    if (type_ == p.type_) return true;
 801c3d6:	687b      	ldr	r3, [r7, #4]
 801c3d8:	f103 020c 	add.w	r2, r3, #12
 801c3dc:	683b      	ldr	r3, [r7, #0]
 801c3de:	330c      	adds	r3, #12
 801c3e0:	4619      	mov	r1, r3
 801c3e2:	4610      	mov	r0, r2
 801c3e4:	f7ee fab7 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c3e8:	4603      	mov	r3, r0
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d001      	beq.n	801c3f2 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x26>
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	e03c      	b.n	801c46c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    if ((type_ == "const void*") && (p.type_ == "void*"))
 801c3f2:	2500      	movs	r5, #0
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	f103 040c 	add.w	r4, r3, #12
 801c3fa:	f107 0308 	add.w	r3, r7, #8
 801c3fe:	491d      	ldr	r1, [pc, #116]	; (801c474 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa8>)
 801c400:	4618      	mov	r0, r3
 801c402:	f7ed fee4 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c406:	2601      	movs	r6, #1
 801c408:	f107 0308 	add.w	r3, r7, #8
 801c40c:	4619      	mov	r1, r3
 801c40e:	4620      	mov	r0, r4
 801c410:	f7ee faa1 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c414:	4603      	mov	r3, r0
 801c416:	2b00      	cmp	r3, #0
 801c418:	d014      	beq.n	801c444 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c41a:	683b      	ldr	r3, [r7, #0]
 801c41c:	f103 040c 	add.w	r4, r3, #12
 801c420:	f107 0310 	add.w	r3, r7, #16
 801c424:	4914      	ldr	r1, [pc, #80]	; (801c478 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xac>)
 801c426:	4618      	mov	r0, r3
 801c428:	f7ed fed1 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c42c:	2501      	movs	r5, #1
 801c42e:	f107 0310 	add.w	r3, r7, #16
 801c432:	4619      	mov	r1, r3
 801c434:	4620      	mov	r0, r4
 801c436:	f7ee fa8e 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c43a:	4603      	mov	r3, r0
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d001      	beq.n	801c444 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x78>
 801c440:	2401      	movs	r4, #1
 801c442:	e000      	b.n	801c446 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x7a>
 801c444:	2400      	movs	r4, #0
 801c446:	2d00      	cmp	r5, #0
 801c448:	d004      	beq.n	801c454 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x88>
 801c44a:	f107 0310 	add.w	r3, r7, #16
 801c44e:	4618      	mov	r0, r3
 801c450:	f7ee fa75 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c454:	2e00      	cmp	r6, #0
 801c456:	d004      	beq.n	801c462 <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x96>
 801c458:	f107 0308 	add.w	r3, r7, #8
 801c45c:	4618      	mov	r0, r3
 801c45e:	f7ee fa6e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c462:	2c00      	cmp	r4, #0
 801c464:	d001      	beq.n	801c46a <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0x9e>
        return true;
 801c466:	2301      	movs	r3, #1
 801c468:	e000      	b.n	801c46c <_ZNK14MockNamedValue20compatibleForCopyingERKS_+0xa0>

    return false;
 801c46a:	2300      	movs	r3, #0
}
 801c46c:	4618      	mov	r0, r3
 801c46e:	371c      	adds	r7, #28
 801c470:	46bd      	mov	sp, r7
 801c472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c474:	08023694 	.word	0x08023694
 801c478:	0802368c 	.word	0x0802368c

0801c47c <_ZNK14MockNamedValue8toStringEv>:

SimpleString MockNamedValue::toString() const
{
 801c47c:	b590      	push	{r4, r7, lr}
 801c47e:	b0b9      	sub	sp, #228	; 0xe4
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
 801c484:	6039      	str	r1, [r7, #0]
    if (type_ == "bool")
 801c486:	683b      	ldr	r3, [r7, #0]
 801c488:	f103 040c 	add.w	r4, r3, #12
 801c48c:	f107 0308 	add.w	r3, r7, #8
 801c490:	49d4      	ldr	r1, [pc, #848]	; (801c7e4 <_ZNK14MockNamedValue8toStringEv+0x368>)
 801c492:	4618      	mov	r0, r3
 801c494:	f7ed fe9b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c498:	f107 0308 	add.w	r3, r7, #8
 801c49c:	4619      	mov	r1, r3
 801c49e:	4620      	mov	r0, r4
 801c4a0:	f7ee fa59 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	461c      	mov	r4, r3
 801c4a8:	f107 0308 	add.w	r3, r7, #8
 801c4ac:	4618      	mov	r0, r3
 801c4ae:	f7ee fa46 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c4b2:	2c00      	cmp	r4, #0
 801c4b4:	d007      	beq.n	801c4c6 <_ZNK14MockNamedValue8toStringEv+0x4a>
        return StringFrom(value_.boolValue_);
 801c4b6:	683b      	ldr	r3, [r7, #0]
 801c4b8:	7e1a      	ldrb	r2, [r3, #24]
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	4611      	mov	r1, r2
 801c4be:	4618      	mov	r0, r3
 801c4c0:	f7ee fcae 	bl	800ae20 <_Z10StringFromb>
 801c4c4:	e23f      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "int")
 801c4c6:	683b      	ldr	r3, [r7, #0]
 801c4c8:	f103 040c 	add.w	r4, r3, #12
 801c4cc:	f107 0310 	add.w	r3, r7, #16
 801c4d0:	49c5      	ldr	r1, [pc, #788]	; (801c7e8 <_ZNK14MockNamedValue8toStringEv+0x36c>)
 801c4d2:	4618      	mov	r0, r3
 801c4d4:	f7ed fe7b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c4d8:	f107 0310 	add.w	r3, r7, #16
 801c4dc:	4619      	mov	r1, r3
 801c4de:	4620      	mov	r0, r4
 801c4e0:	f7ee fa39 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	461c      	mov	r4, r3
 801c4e8:	f107 0310 	add.w	r3, r7, #16
 801c4ec:	4618      	mov	r0, r3
 801c4ee:	f7ee fa26 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c4f2:	2c00      	cmp	r4, #0
 801c4f4:	d03b      	beq.n	801c56e <_ZNK14MockNamedValue8toStringEv+0xf2>
        return StringFrom(value_.intValue_) + " " + BracketsFormattedHexStringFrom(value_.intValue_);
 801c4f6:	683b      	ldr	r3, [r7, #0]
 801c4f8:	699a      	ldr	r2, [r3, #24]
 801c4fa:	f107 0320 	add.w	r3, r7, #32
 801c4fe:	4611      	mov	r1, r2
 801c500:	4618      	mov	r0, r3
 801c502:	f7ee fce3 	bl	800aecc <_Z10StringFromi>
 801c506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c50a:	49b8      	ldr	r1, [pc, #736]	; (801c7ec <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c50c:	4618      	mov	r0, r3
 801c50e:	f7ed fe5e 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c512:	f107 0318 	add.w	r3, r7, #24
 801c516:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801c51a:	f107 0120 	add.w	r1, r7, #32
 801c51e:	4618      	mov	r0, r3
 801c520:	f7ee fa6f 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c524:	683b      	ldr	r3, [r7, #0]
 801c526:	699a      	ldr	r2, [r3, #24]
 801c528:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c52c:	4611      	mov	r1, r2
 801c52e:	4618      	mov	r0, r3
 801c530:	f7ee fdbc 	bl	800b0ac <_Z30BracketsFormattedHexStringFromi>
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801c53a:	f107 0118 	add.w	r1, r7, #24
 801c53e:	4618      	mov	r0, r3
 801c540:	f7ee fa5f 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c544:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c548:	4618      	mov	r0, r3
 801c54a:	f7ee f9f8 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c54e:	f107 0318 	add.w	r3, r7, #24
 801c552:	4618      	mov	r0, r3
 801c554:	f7ee f9f3 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c558:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c55c:	4618      	mov	r0, r3
 801c55e:	f7ee f9ee 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c562:	f107 0320 	add.w	r3, r7, #32
 801c566:	4618      	mov	r0, r3
 801c568:	f7ee f9e9 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c56c:	e1eb      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned int")
 801c56e:	683b      	ldr	r3, [r7, #0]
 801c570:	f103 040c 	add.w	r4, r3, #12
 801c574:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c578:	499d      	ldr	r1, [pc, #628]	; (801c7f0 <_ZNK14MockNamedValue8toStringEv+0x374>)
 801c57a:	4618      	mov	r0, r3
 801c57c:	f7ed fe27 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c580:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c584:	4619      	mov	r1, r3
 801c586:	4620      	mov	r0, r4
 801c588:	f7ee f9e5 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c58c:	4603      	mov	r3, r0
 801c58e:	461c      	mov	r4, r3
 801c590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c594:	4618      	mov	r0, r3
 801c596:	f7ee f9d2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c59a:	2c00      	cmp	r4, #0
 801c59c:	d03b      	beq.n	801c616 <_ZNK14MockNamedValue8toStringEv+0x19a>
        return StringFrom(value_.unsignedIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedIntValue_);
 801c59e:	683b      	ldr	r3, [r7, #0]
 801c5a0:	699a      	ldr	r2, [r3, #24]
 801c5a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c5a6:	4611      	mov	r1, r2
 801c5a8:	4618      	mov	r0, r3
 801c5aa:	f7ee fef7 	bl	800b39c <_Z10StringFromj>
 801c5ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c5b2:	498e      	ldr	r1, [pc, #568]	; (801c7ec <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c5b4:	4618      	mov	r0, r3
 801c5b6:	f7ed fe0a 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c5ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c5be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801c5c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	f7ee fa1b 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	699a      	ldr	r2, [r3, #24]
 801c5d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5d4:	4611      	mov	r1, r2
 801c5d6:	4618      	mov	r0, r3
 801c5d8:	f7ee fd84 	bl	800b0e4 <_Z30BracketsFormattedHexStringFromj>
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801c5e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801c5e6:	4618      	mov	r0, r3
 801c5e8:	f7ee fa0b 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c5ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801c5f0:	4618      	mov	r0, r3
 801c5f2:	f7ee f9a4 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c5f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801c5fa:	4618      	mov	r0, r3
 801c5fc:	f7ee f99f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c600:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801c604:	4618      	mov	r0, r3
 801c606:	f7ee f99a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c60a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801c60e:	4618      	mov	r0, r3
 801c610:	f7ee f995 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c614:	e197      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long int")
 801c616:	683b      	ldr	r3, [r7, #0]
 801c618:	f103 040c 	add.w	r4, r3, #12
 801c61c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c620:	4974      	ldr	r1, [pc, #464]	; (801c7f4 <_ZNK14MockNamedValue8toStringEv+0x378>)
 801c622:	4618      	mov	r0, r3
 801c624:	f7ed fdd3 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c628:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c62c:	4619      	mov	r1, r3
 801c62e:	4620      	mov	r0, r4
 801c630:	f7ee f991 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c634:	4603      	mov	r3, r0
 801c636:	461c      	mov	r4, r3
 801c638:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801c63c:	4618      	mov	r0, r3
 801c63e:	f7ee f97e 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c642:	2c00      	cmp	r4, #0
 801c644:	d03b      	beq.n	801c6be <_ZNK14MockNamedValue8toStringEv+0x242>
        return StringFrom(value_.longIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longIntValue_);
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	699a      	ldr	r2, [r3, #24]
 801c64a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c64e:	4611      	mov	r1, r2
 801c650:	4618      	mov	r0, r3
 801c652:	f7ee fc4d 	bl	800aef0 <_Z10StringFroml>
 801c656:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c65a:	4964      	ldr	r1, [pc, #400]	; (801c7ec <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c65c:	4618      	mov	r0, r3
 801c65e:	f7ed fdb6 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c662:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c666:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801c66a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801c66e:	4618      	mov	r0, r3
 801c670:	f7ee f9c7 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c674:	683b      	ldr	r3, [r7, #0]
 801c676:	699a      	ldr	r2, [r3, #24]
 801c678:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c67c:	4611      	mov	r1, r2
 801c67e:	4618      	mov	r0, r3
 801c680:	f7ee fd4c 	bl	800b11c <_Z30BracketsFormattedHexStringFroml>
 801c684:	687b      	ldr	r3, [r7, #4]
 801c686:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801c68a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801c68e:	4618      	mov	r0, r3
 801c690:	f7ee f9b7 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c694:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801c698:	4618      	mov	r0, r3
 801c69a:	f7ee f950 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c69e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	f7ee f94b 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c6a8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f7ee f946 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c6b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	f7ee f941 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c6bc:	e143      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "unsigned long int")
 801c6be:	683b      	ldr	r3, [r7, #0]
 801c6c0:	f103 040c 	add.w	r4, r3, #12
 801c6c4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c6c8:	494b      	ldr	r1, [pc, #300]	; (801c7f8 <_ZNK14MockNamedValue8toStringEv+0x37c>)
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	f7ed fd7f 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c6d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c6d4:	4619      	mov	r1, r3
 801c6d6:	4620      	mov	r0, r4
 801c6d8:	f7ee f93d 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	461c      	mov	r4, r3
 801c6e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801c6e4:	4618      	mov	r0, r3
 801c6e6:	f7ee f92a 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c6ea:	2c00      	cmp	r4, #0
 801c6ec:	d03b      	beq.n	801c766 <_ZNK14MockNamedValue8toStringEv+0x2ea>
        return StringFrom(value_.unsignedLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongIntValue_);
 801c6ee:	683b      	ldr	r3, [r7, #0]
 801c6f0:	699a      	ldr	r2, [r3, #24]
 801c6f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c6f6:	4611      	mov	r1, r2
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7ee fe61 	bl	800b3c0 <_Z10StringFromm>
 801c6fe:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c702:	493a      	ldr	r1, [pc, #232]	; (801c7ec <_ZNK14MockNamedValue8toStringEv+0x370>)
 801c704:	4618      	mov	r0, r3
 801c706:	f7ed fd62 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c70a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c70e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 801c712:	f107 0198 	add.w	r1, r7, #152	; 0x98
 801c716:	4618      	mov	r0, r3
 801c718:	f7ee f973 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c71c:	683b      	ldr	r3, [r7, #0]
 801c71e:	699a      	ldr	r2, [r3, #24]
 801c720:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c724:	4611      	mov	r1, r2
 801c726:	4618      	mov	r0, r3
 801c728:	f7ee fd14 	bl	800b154 <_Z30BracketsFormattedHexStringFromm>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 801c732:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801c736:	4618      	mov	r0, r3
 801c738:	f7ee f963 	bl	800aa02 <_ZNK12SimpleStringplERKS_>
 801c73c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801c740:	4618      	mov	r0, r3
 801c742:	f7ee f8fc 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c746:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801c74a:	4618      	mov	r0, r3
 801c74c:	f7ee f8f7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c750:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801c754:	4618      	mov	r0, r3
 801c756:	f7ee f8f2 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c75a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801c75e:	4618      	mov	r0, r3
 801c760:	f7ee f8ed 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c764:	e0ef      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "long long int")
        return StringFrom(value_.longLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.longLongIntValue_);
    else if (type_ == "unsigned long long int")
        return StringFrom(value_.unsignedLongLongIntValue_) + " " + BracketsFormattedHexStringFrom(value_.unsignedLongLongIntValue_);
#endif
    else if (type_ == "const char*")
 801c766:	683b      	ldr	r3, [r7, #0]
 801c768:	f103 040c 	add.w	r4, r3, #12
 801c76c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c770:	4922      	ldr	r1, [pc, #136]	; (801c7fc <_ZNK14MockNamedValue8toStringEv+0x380>)
 801c772:	4618      	mov	r0, r3
 801c774:	f7ed fd2b 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c778:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c77c:	4619      	mov	r1, r3
 801c77e:	4620      	mov	r0, r4
 801c780:	f7ee f8e9 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c784:	4603      	mov	r3, r0
 801c786:	461c      	mov	r4, r3
 801c788:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801c78c:	4618      	mov	r0, r3
 801c78e:	f7ee f8d6 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c792:	2c00      	cmp	r4, #0
 801c794:	d006      	beq.n	801c7a4 <_ZNK14MockNamedValue8toStringEv+0x328>
        return value_.stringValue_;
 801c796:	683b      	ldr	r3, [r7, #0]
 801c798:	699b      	ldr	r3, [r3, #24]
 801c79a:	4619      	mov	r1, r3
 801c79c:	6878      	ldr	r0, [r7, #4]
 801c79e:	f7ed fd16 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c7a2:	e0d0      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "void*")
 801c7a4:	683b      	ldr	r3, [r7, #0]
 801c7a6:	f103 040c 	add.w	r4, r3, #12
 801c7aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c7ae:	4914      	ldr	r1, [pc, #80]	; (801c800 <_ZNK14MockNamedValue8toStringEv+0x384>)
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	f7ed fd0c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c7b6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c7ba:	4619      	mov	r1, r3
 801c7bc:	4620      	mov	r0, r4
 801c7be:	f7ee f8ca 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	461c      	mov	r4, r3
 801c7c6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 801c7ca:	4618      	mov	r0, r3
 801c7cc:	f7ee f8b7 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c7d0:	2c00      	cmp	r4, #0
 801c7d2:	d017      	beq.n	801c804 <_ZNK14MockNamedValue8toStringEv+0x388>
        return StringFrom(value_.pointerValue_);
 801c7d4:	683b      	ldr	r3, [r7, #0]
 801c7d6:	699a      	ldr	r2, [r3, #24]
 801c7d8:	687b      	ldr	r3, [r7, #4]
 801c7da:	4611      	mov	r1, r2
 801c7dc:	4618      	mov	r0, r3
 801c7de:	f7ee fb99 	bl	800af14 <_Z10StringFromPKv>
 801c7e2:	e0b0      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
 801c7e4:	080235e4 	.word	0x080235e4
 801c7e8:	080235e0 	.word	0x080235e0
 801c7ec:	080236d0 	.word	0x080236d0
 801c7f0:	080235ec 	.word	0x080235ec
 801c7f4:	080235fc 	.word	0x080235fc
 801c7f8:	08023608 	.word	0x08023608
 801c7fc:	080236ac 	.word	0x080236ac
 801c800:	0802368c 	.word	0x0802368c
    else if (type_ == "void (*)()")
 801c804:	683b      	ldr	r3, [r7, #0]
 801c806:	f103 040c 	add.w	r4, r3, #12
 801c80a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c80e:	4950      	ldr	r1, [pc, #320]	; (801c950 <_ZNK14MockNamedValue8toStringEv+0x4d4>)
 801c810:	4618      	mov	r0, r3
 801c812:	f7ed fcdc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c816:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c81a:	4619      	mov	r1, r3
 801c81c:	4620      	mov	r0, r4
 801c81e:	f7ee f89a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c822:	4603      	mov	r3, r0
 801c824:	461c      	mov	r4, r3
 801c826:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801c82a:	4618      	mov	r0, r3
 801c82c:	f7ee f887 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c830:	2c00      	cmp	r4, #0
 801c832:	d007      	beq.n	801c844 <_ZNK14MockNamedValue8toStringEv+0x3c8>
        return StringFrom(value_.functionPointerValue_);
 801c834:	683b      	ldr	r3, [r7, #0]
 801c836:	699a      	ldr	r2, [r3, #24]
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	4611      	mov	r1, r2
 801c83c:	4618      	mov	r0, r3
 801c83e:	f7ee fb93 	bl	800af68 <_Z10StringFromPFvvE>
 801c842:	e080      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const void*")
 801c844:	683b      	ldr	r3, [r7, #0]
 801c846:	f103 040c 	add.w	r4, r3, #12
 801c84a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c84e:	4941      	ldr	r1, [pc, #260]	; (801c954 <_ZNK14MockNamedValue8toStringEv+0x4d8>)
 801c850:	4618      	mov	r0, r3
 801c852:	f7ed fcbc 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c856:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c85a:	4619      	mov	r1, r3
 801c85c:	4620      	mov	r0, r4
 801c85e:	f7ee f87a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c862:	4603      	mov	r3, r0
 801c864:	461c      	mov	r4, r3
 801c866:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801c86a:	4618      	mov	r0, r3
 801c86c:	f7ee f867 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c870:	2c00      	cmp	r4, #0
 801c872:	d007      	beq.n	801c884 <_ZNK14MockNamedValue8toStringEv+0x408>
        return StringFrom(value_.constPointerValue_);
 801c874:	683b      	ldr	r3, [r7, #0]
 801c876:	699a      	ldr	r2, [r3, #24]
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	4611      	mov	r1, r2
 801c87c:	4618      	mov	r0, r3
 801c87e:	f7ee fb49 	bl	800af14 <_Z10StringFromPKv>
 801c882:	e060      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "double")
 801c884:	683b      	ldr	r3, [r7, #0]
 801c886:	f103 040c 	add.w	r4, r3, #12
 801c88a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c88e:	4932      	ldr	r1, [pc, #200]	; (801c958 <_ZNK14MockNamedValue8toStringEv+0x4dc>)
 801c890:	4618      	mov	r0, r3
 801c892:	f7ed fc9c 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c896:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c89a:	4619      	mov	r1, r3
 801c89c:	4620      	mov	r0, r4
 801c89e:	f7ee f85a 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c8a2:	4603      	mov	r3, r0
 801c8a4:	461c      	mov	r4, r3
 801c8a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7ee f847 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c8b0:	2c00      	cmp	r4, #0
 801c8b2:	d00c      	beq.n	801c8ce <_ZNK14MockNamedValue8toStringEv+0x452>
        return StringFrom(value_.doubleValue_.value);
 801c8b4:	683b      	ldr	r3, [r7, #0]
 801c8b6:	ed93 7b06 	vldr	d7, [r3, #24]
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	2106      	movs	r1, #6
 801c8be:	eeb0 0a47 	vmov.f32	s0, s14
 801c8c2:	eef0 0a67 	vmov.f32	s1, s15
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7ee fcfe 	bl	800b2c8 <_Z10StringFromdi>
 801c8cc:	e03b      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>
    else if (type_ == "const unsigned char*")
 801c8ce:	683b      	ldr	r3, [r7, #0]
 801c8d0:	f103 040c 	add.w	r4, r3, #12
 801c8d4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c8d8:	4920      	ldr	r1, [pc, #128]	; (801c95c <_ZNK14MockNamedValue8toStringEv+0x4e0>)
 801c8da:	4618      	mov	r0, r3
 801c8dc:	f7ed fc77 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801c8e0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c8e4:	4619      	mov	r1, r3
 801c8e6:	4620      	mov	r0, r4
 801c8e8:	f7ee f835 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	461c      	mov	r4, r3
 801c8f0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	f7ee f822 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801c8fa:	2c00      	cmp	r4, #0
 801c8fc:	d008      	beq.n	801c910 <_ZNK14MockNamedValue8toStringEv+0x494>
        return StringFromBinaryWithSizeOrNull(value_.memoryBufferValue_, size_);
 801c8fe:	683b      	ldr	r3, [r7, #0]
 801c900:	6999      	ldr	r1, [r3, #24]
 801c902:	683b      	ldr	r3, [r7, #0]
 801c904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	4618      	mov	r0, r3
 801c90a:	f7ee fe71 	bl	800b5f0 <_Z30StringFromBinaryWithSizeOrNullPKhj>
 801c90e:	e01a      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    if (comparator_)
 801c910:	683b      	ldr	r3, [r7, #0]
 801c912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c914:	2b00      	cmp	r3, #0
 801c916:	d00b      	beq.n	801c930 <_ZNK14MockNamedValue8toStringEv+0x4b4>
        return comparator_->valueToString(value_.constObjectPointerValue_);
 801c918:	683b      	ldr	r3, [r7, #0]
 801c91a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c920:	681b      	ldr	r3, [r3, #0]
 801c922:	330c      	adds	r3, #12
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	683a      	ldr	r2, [r7, #0]
 801c928:	6992      	ldr	r2, [r2, #24]
 801c92a:	6878      	ldr	r0, [r7, #4]
 801c92c:	4798      	blx	r3
 801c92e:	e00a      	b.n	801c946 <_ZNK14MockNamedValue8toStringEv+0x4ca>

    return StringFromFormat("No comparator found for type: \"%s\"", type_.asCharString());
 801c930:	683b      	ldr	r3, [r7, #0]
 801c932:	330c      	adds	r3, #12
 801c934:	4618      	mov	r0, r3
 801c936:	f7ed ffd5 	bl	800a8e4 <_ZNK12SimpleString12asCharStringEv>
 801c93a:	4602      	mov	r2, r0
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	4908      	ldr	r1, [pc, #32]	; (801c960 <_ZNK14MockNamedValue8toStringEv+0x4e4>)
 801c940:	4618      	mov	r0, r3
 801c942:	f7ee fd03 	bl	800b34c <_Z16StringFromFormatPKcz>

}
 801c946:	6878      	ldr	r0, [r7, #4]
 801c948:	37e4      	adds	r7, #228	; 0xe4
 801c94a:	46bd      	mov	sp, r7
 801c94c:	bd90      	pop	{r4, r7, pc}
 801c94e:	bf00      	nop
 801c950:	080236a0 	.word	0x080236a0
 801c954:	08023694 	.word	0x08023694
 801c958:	08023684 	.word	0x08023684
 801c95c:	080236b8 	.word	0x080236b8
 801c960:	080236d4 	.word	0x080236d4

0801c964 <_ZN22MockNamedValueListNode7setNextEPS_>:

void MockNamedValueListNode::setNext(MockNamedValueListNode* node)
{
 801c964:	b480      	push	{r7}
 801c966:	b083      	sub	sp, #12
 801c968:	af00      	add	r7, sp, #0
 801c96a:	6078      	str	r0, [r7, #4]
 801c96c:	6039      	str	r1, [r7, #0]
    next_ = node;
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	683a      	ldr	r2, [r7, #0]
 801c972:	605a      	str	r2, [r3, #4]
}
 801c974:	bf00      	nop
 801c976:	370c      	adds	r7, #12
 801c978:	46bd      	mov	sp, r7
 801c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c97e:	4770      	bx	lr

0801c980 <_ZN22MockNamedValueListNode4nextEv>:

MockNamedValueListNode* MockNamedValueListNode::next()
{
 801c980:	b480      	push	{r7}
 801c982:	b083      	sub	sp, #12
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
    return next_;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	685b      	ldr	r3, [r3, #4]
}
 801c98c:	4618      	mov	r0, r3
 801c98e:	370c      	adds	r7, #12
 801c990:	46bd      	mov	sp, r7
 801c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c996:	4770      	bx	lr

0801c998 <_ZN22MockNamedValueListNode4itemEv>:

MockNamedValue* MockNamedValueListNode::item()
{
 801c998:	b480      	push	{r7}
 801c99a:	b083      	sub	sp, #12
 801c99c:	af00      	add	r7, sp, #0
 801c99e:	6078      	str	r0, [r7, #4]
    return data_;
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	681b      	ldr	r3, [r3, #0]
}
 801c9a4:	4618      	mov	r0, r3
 801c9a6:	370c      	adds	r7, #12
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9ae:	4770      	bx	lr

0801c9b0 <_ZN22MockNamedValueListNode7destroyEv>:

void MockNamedValueListNode::destroy()
{
 801c9b0:	b580      	push	{r7, lr}
 801c9b2:	b082      	sub	sp, #8
 801c9b4:	af00      	add	r7, sp, #0
 801c9b6:	6078      	str	r0, [r7, #4]
    delete data_;
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d004      	beq.n	801c9ca <_ZN22MockNamedValueListNode7destroyEv+0x1a>
 801c9c0:	681a      	ldr	r2, [r3, #0]
 801c9c2:	3204      	adds	r2, #4
 801c9c4:	6812      	ldr	r2, [r2, #0]
 801c9c6:	4618      	mov	r0, r3
 801c9c8:	4790      	blx	r2
}
 801c9ca:	bf00      	nop
 801c9cc:	3708      	adds	r7, #8
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	bd80      	pop	{r7, pc}

0801c9d2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>:

MockNamedValueListNode::MockNamedValueListNode(MockNamedValue* newValue)
 801c9d2:	b480      	push	{r7}
 801c9d4:	b083      	sub	sp, #12
 801c9d6:	af00      	add	r7, sp, #0
 801c9d8:	6078      	str	r0, [r7, #4]
 801c9da:	6039      	str	r1, [r7, #0]
    : data_(newValue), next_(NULLPTR)
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	683a      	ldr	r2, [r7, #0]
 801c9e0:	601a      	str	r2, [r3, #0]
 801c9e2:	687b      	ldr	r3, [r7, #4]
 801c9e4:	2200      	movs	r2, #0
 801c9e6:	605a      	str	r2, [r3, #4]
{
}
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	4618      	mov	r0, r3
 801c9ec:	370c      	adds	r7, #12
 801c9ee:	46bd      	mov	sp, r7
 801c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f4:	4770      	bx	lr

0801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>:

SimpleString MockNamedValueListNode::getName() const
{
 801c9f6:	b580      	push	{r7, lr}
 801c9f8:	b082      	sub	sp, #8
 801c9fa:	af00      	add	r7, sp, #0
 801c9fc:	6078      	str	r0, [r7, #4]
 801c9fe:	6039      	str	r1, [r7, #0]
    return data_->getName();
 801ca00:	683b      	ldr	r3, [r7, #0]
 801ca02:	6819      	ldr	r1, [r3, #0]
 801ca04:	683b      	ldr	r3, [r7, #0]
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	335c      	adds	r3, #92	; 0x5c
 801ca0c:	681b      	ldr	r3, [r3, #0]
 801ca0e:	687a      	ldr	r2, [r7, #4]
 801ca10:	4610      	mov	r0, r2
 801ca12:	4798      	blx	r3
}
 801ca14:	6878      	ldr	r0, [r7, #4]
 801ca16:	3708      	adds	r7, #8
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	bd80      	pop	{r7, pc}

0801ca1c <_ZNK22MockNamedValueListNode7getTypeEv>:

SimpleString MockNamedValueListNode::getType() const
{
 801ca1c:	b580      	push	{r7, lr}
 801ca1e:	b082      	sub	sp, #8
 801ca20:	af00      	add	r7, sp, #0
 801ca22:	6078      	str	r0, [r7, #4]
 801ca24:	6039      	str	r1, [r7, #0]
    return data_->getType();
 801ca26:	683b      	ldr	r3, [r7, #0]
 801ca28:	6819      	ldr	r1, [r3, #0]
 801ca2a:	683b      	ldr	r3, [r7, #0]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	681b      	ldr	r3, [r3, #0]
 801ca30:	3360      	adds	r3, #96	; 0x60
 801ca32:	681b      	ldr	r3, [r3, #0]
 801ca34:	687a      	ldr	r2, [r7, #4]
 801ca36:	4610      	mov	r0, r2
 801ca38:	4798      	blx	r3
}
 801ca3a:	6878      	ldr	r0, [r7, #4]
 801ca3c:	3708      	adds	r7, #8
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	bd80      	pop	{r7, pc}

0801ca42 <_ZN18MockNamedValueListC1Ev>:

MockNamedValueList::MockNamedValueList() : head_(NULLPTR)
 801ca42:	b480      	push	{r7}
 801ca44:	b083      	sub	sp, #12
 801ca46:	af00      	add	r7, sp, #0
 801ca48:	6078      	str	r0, [r7, #4]
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	2200      	movs	r2, #0
 801ca4e:	601a      	str	r2, [r3, #0]
{
}
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	4618      	mov	r0, r3
 801ca54:	370c      	adds	r7, #12
 801ca56:	46bd      	mov	sp, r7
 801ca58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca5c:	4770      	bx	lr

0801ca5e <_ZN18MockNamedValueList5clearEv>:

void MockNamedValueList::clear()
{
 801ca5e:	b580      	push	{r7, lr}
 801ca60:	b084      	sub	sp, #16
 801ca62:	af00      	add	r7, sp, #0
 801ca64:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d016      	beq.n	801ca9c <_ZN18MockNamedValueList5clearEv+0x3e>
        MockNamedValueListNode* n = head_->next();
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	681b      	ldr	r3, [r3, #0]
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7ff ff84 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801ca78:	60f8      	str	r0, [r7, #12]
        head_->destroy();
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	681b      	ldr	r3, [r3, #0]
 801ca7e:	4618      	mov	r0, r3
 801ca80:	f7ff ff96 	bl	801c9b0 <_ZN22MockNamedValueListNode7destroyEv>
        delete head_;
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	2b00      	cmp	r3, #0
 801ca8a:	d003      	beq.n	801ca94 <_ZN18MockNamedValueList5clearEv+0x36>
 801ca8c:	2108      	movs	r1, #8
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7ea ffee 	bl	8007a70 <_ZdlPvj>
        head_ = n;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	68fa      	ldr	r2, [r7, #12]
 801ca98:	601a      	str	r2, [r3, #0]
    while (head_) {
 801ca9a:	e7e4      	b.n	801ca66 <_ZN18MockNamedValueList5clearEv+0x8>
    }
}
 801ca9c:	bf00      	nop
 801ca9e:	3710      	adds	r7, #16
 801caa0:	46bd      	mov	sp, r7
 801caa2:	bd80      	pop	{r7, pc}

0801caa4 <_ZN18MockNamedValueList3addEP14MockNamedValue>:

void MockNamedValueList::add(MockNamedValue* newValue)
{
 801caa4:	b590      	push	{r4, r7, lr}
 801caa6:	b085      	sub	sp, #20
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	6078      	str	r0, [r7, #4]
 801caac:	6039      	str	r1, [r7, #0]
    MockNamedValueListNode* newNode = new MockNamedValueListNode(newValue);
 801caae:	f44f 7210 	mov.w	r2, #576	; 0x240
 801cab2:	4916      	ldr	r1, [pc, #88]	; (801cb0c <_ZN18MockNamedValueList3addEP14MockNamedValue+0x68>)
 801cab4:	2008      	movs	r0, #8
 801cab6:	f7ea ffc7 	bl	8007a48 <_ZnwjPKci>
 801caba:	4604      	mov	r4, r0
 801cabc:	6839      	ldr	r1, [r7, #0]
 801cabe:	4620      	mov	r0, r4
 801cac0:	f7ff ff87 	bl	801c9d2 <_ZN22MockNamedValueListNodeC1EP14MockNamedValue>
 801cac4:	60bc      	str	r4, [r7, #8]
    if (head_ == NULLPTR)
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	681b      	ldr	r3, [r3, #0]
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d103      	bne.n	801cad6 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x32>
        head_ = newNode;
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	68ba      	ldr	r2, [r7, #8]
 801cad2:	601a      	str	r2, [r3, #0]
    else {
        MockNamedValueListNode* lastNode = head_;
        while (lastNode->next()) lastNode = lastNode->next();
        lastNode->setNext(newNode);
    }
}
 801cad4:	e016      	b.n	801cb04 <_ZN18MockNamedValueList3addEP14MockNamedValue+0x60>
        MockNamedValueListNode* lastNode = head_;
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	681b      	ldr	r3, [r3, #0]
 801cada:	60fb      	str	r3, [r7, #12]
        while (lastNode->next()) lastNode = lastNode->next();
 801cadc:	68f8      	ldr	r0, [r7, #12]
 801cade:	f7ff ff4f 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801cae2:	4603      	mov	r3, r0
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	bf14      	ite	ne
 801cae8:	2301      	movne	r3, #1
 801caea:	2300      	moveq	r3, #0
 801caec:	b2db      	uxtb	r3, r3
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d004      	beq.n	801cafc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x58>
 801caf2:	68f8      	ldr	r0, [r7, #12]
 801caf4:	f7ff ff44 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801caf8:	60f8      	str	r0, [r7, #12]
 801cafa:	e7ef      	b.n	801cadc <_ZN18MockNamedValueList3addEP14MockNamedValue+0x38>
        lastNode->setNext(newNode);
 801cafc:	68b9      	ldr	r1, [r7, #8]
 801cafe:	68f8      	ldr	r0, [r7, #12]
 801cb00:	f7ff ff30 	bl	801c964 <_ZN22MockNamedValueListNode7setNextEPS_>
}
 801cb04:	bf00      	nop
 801cb06:	3714      	adds	r7, #20
 801cb08:	46bd      	mov	sp, r7
 801cb0a:	bd90      	pop	{r4, r7, pc}
 801cb0c:	0802361c 	.word	0x0802361c

0801cb10 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString>:

MockNamedValue* MockNamedValueList::getValueByName(const SimpleString& name)
{
 801cb10:	b590      	push	{r4, r7, lr}
 801cb12:	b087      	sub	sp, #28
 801cb14:	af00      	add	r7, sp, #0
 801cb16:	6078      	str	r0, [r7, #4]
 801cb18:	6039      	str	r1, [r7, #0]
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	617b      	str	r3, [r7, #20]
 801cb20:	697b      	ldr	r3, [r7, #20]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d01e      	beq.n	801cb64 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x54>
        if (p->getName() == name)
 801cb26:	f107 030c 	add.w	r3, r7, #12
 801cb2a:	6979      	ldr	r1, [r7, #20]
 801cb2c:	4618      	mov	r0, r3
 801cb2e:	f7ff ff62 	bl	801c9f6 <_ZNK22MockNamedValueListNode7getNameEv>
 801cb32:	f107 030c 	add.w	r3, r7, #12
 801cb36:	6839      	ldr	r1, [r7, #0]
 801cb38:	4618      	mov	r0, r3
 801cb3a:	f7ed ff0c 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801cb3e:	4603      	mov	r3, r0
 801cb40:	461c      	mov	r4, r3
 801cb42:	f107 030c 	add.w	r3, r7, #12
 801cb46:	4618      	mov	r0, r3
 801cb48:	f7ed fef9 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801cb4c:	2c00      	cmp	r4, #0
 801cb4e:	d004      	beq.n	801cb5a <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x4a>
            return p->item();
 801cb50:	6978      	ldr	r0, [r7, #20]
 801cb52:	f7ff ff21 	bl	801c998 <_ZN22MockNamedValueListNode4itemEv>
 801cb56:	4603      	mov	r3, r0
 801cb58:	e005      	b.n	801cb66 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x56>
    for (MockNamedValueListNode * p = head_; p; p = p->next())
 801cb5a:	6978      	ldr	r0, [r7, #20]
 801cb5c:	f7ff ff10 	bl	801c980 <_ZN22MockNamedValueListNode4nextEv>
 801cb60:	6178      	str	r0, [r7, #20]
 801cb62:	e7dd      	b.n	801cb20 <_ZN18MockNamedValueList14getValueByNameERK12SimpleString+0x10>
    return NULLPTR;
 801cb64:	2300      	movs	r3, #0
}
 801cb66:	4618      	mov	r0, r3
 801cb68:	371c      	adds	r7, #28
 801cb6a:	46bd      	mov	sp, r7
 801cb6c:	bd90      	pop	{r4, r7, pc}

0801cb6e <_ZN18MockNamedValueList5beginEv>:

MockNamedValueListNode* MockNamedValueList::begin()
{
 801cb6e:	b480      	push	{r7}
 801cb70:	b083      	sub	sp, #12
 801cb72:	af00      	add	r7, sp, #0
 801cb74:	6078      	str	r0, [r7, #4]
    return head_;
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	681b      	ldr	r3, [r3, #0]
}
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	370c      	adds	r7, #12
 801cb7e:	46bd      	mov	sp, r7
 801cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb84:	4770      	bx	lr

0801cb86 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>:

struct MockNamedValueComparatorsAndCopiersRepositoryNode
{
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cb86:	b580      	push	{r7, lr}
 801cb88:	b084      	sub	sp, #16
 801cb8a:	af00      	add	r7, sp, #0
 801cb8c:	60f8      	str	r0, [r7, #12]
 801cb8e:	60b9      	str	r1, [r7, #8]
 801cb90:	607a      	str	r2, [r7, #4]
 801cb92:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(NULLPTR), next_(next) {}
 801cb94:	68fb      	ldr	r3, [r7, #12]
 801cb96:	68b9      	ldr	r1, [r7, #8]
 801cb98:	4618      	mov	r0, r3
 801cb9a:	f7ed fb6c 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 801cb9e:	68fb      	ldr	r3, [r7, #12]
 801cba0:	687a      	ldr	r2, [r7, #4]
 801cba2:	609a      	str	r2, [r3, #8]
 801cba4:	68fb      	ldr	r3, [r7, #12]
 801cba6:	2200      	movs	r2, #0
 801cba8:	60da      	str	r2, [r3, #12]
 801cbaa:	68fb      	ldr	r3, [r7, #12]
 801cbac:	683a      	ldr	r2, [r7, #0]
 801cbae:	611a      	str	r2, [r3, #16]
 801cbb0:	68fb      	ldr	r3, [r7, #12]
 801cbb2:	4618      	mov	r0, r3
 801cbb4:	3710      	adds	r7, #16
 801cbb6:	46bd      	mov	sp, r7
 801cbb8:	bd80      	pop	{r7, pc}

0801cbba <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cbba:	b580      	push	{r7, lr}
 801cbbc:	b084      	sub	sp, #16
 801cbbe:	af00      	add	r7, sp, #0
 801cbc0:	60f8      	str	r0, [r7, #12]
 801cbc2:	60b9      	str	r1, [r7, #8]
 801cbc4:	607a      	str	r2, [r7, #4]
 801cbc6:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(NULLPTR), copier_(copier), next_(next) {}
 801cbc8:	68fb      	ldr	r3, [r7, #12]
 801cbca:	68b9      	ldr	r1, [r7, #8]
 801cbcc:	4618      	mov	r0, r3
 801cbce:	f7ed fb52 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 801cbd2:	68fb      	ldr	r3, [r7, #12]
 801cbd4:	2200      	movs	r2, #0
 801cbd6:	609a      	str	r2, [r3, #8]
 801cbd8:	68fb      	ldr	r3, [r7, #12]
 801cbda:	687a      	ldr	r2, [r7, #4]
 801cbdc:	60da      	str	r2, [r3, #12]
 801cbde:	68fb      	ldr	r3, [r7, #12]
 801cbe0:	683a      	ldr	r2, [r7, #0]
 801cbe2:	611a      	str	r2, [r3, #16]
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3710      	adds	r7, #16
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}

0801cbee <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>:
    MockNamedValueComparatorsAndCopiersRepositoryNode(const SimpleString& name, MockNamedValueComparator* comparator, MockNamedValueCopier* copier, MockNamedValueComparatorsAndCopiersRepositoryNode* next)
 801cbee:	b580      	push	{r7, lr}
 801cbf0:	b084      	sub	sp, #16
 801cbf2:	af00      	add	r7, sp, #0
 801cbf4:	60f8      	str	r0, [r7, #12]
 801cbf6:	60b9      	str	r1, [r7, #8]
 801cbf8:	607a      	str	r2, [r7, #4]
 801cbfa:	603b      	str	r3, [r7, #0]
        : name_(name), comparator_(comparator), copier_(copier), next_(next) {}
 801cbfc:	68fb      	ldr	r3, [r7, #12]
 801cbfe:	68b9      	ldr	r1, [r7, #8]
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7ed fb38 	bl	800a276 <_ZN12SimpleStringC1ERKS_>
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	687a      	ldr	r2, [r7, #4]
 801cc0a:	609a      	str	r2, [r3, #8]
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	683a      	ldr	r2, [r7, #0]
 801cc10:	60da      	str	r2, [r3, #12]
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	69ba      	ldr	r2, [r7, #24]
 801cc16:	611a      	str	r2, [r3, #16]
 801cc18:	68fb      	ldr	r3, [r7, #12]
 801cc1a:	4618      	mov	r0, r3
 801cc1c:	3710      	adds	r7, #16
 801cc1e:	46bd      	mov	sp, r7
 801cc20:	bd80      	pop	{r7, pc}
	...

0801cc24 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev>:
    MockNamedValueComparator* comparator_;
    MockNamedValueCopier* copier_;
    MockNamedValueComparatorsAndCopiersRepositoryNode* next_;
};

MockNamedValueComparatorsAndCopiersRepository::MockNamedValueComparatorsAndCopiersRepository() : head_(NULLPTR)
 801cc24:	b480      	push	{r7}
 801cc26:	b083      	sub	sp, #12
 801cc28:	af00      	add	r7, sp, #0
 801cc2a:	6078      	str	r0, [r7, #4]
 801cc2c:	4a06      	ldr	r2, [pc, #24]	; (801cc48 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryC1Ev+0x24>)
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	601a      	str	r2, [r3, #0]
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	2200      	movs	r2, #0
 801cc36:	605a      	str	r2, [r3, #4]
{

}
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	4618      	mov	r0, r3
 801cc3c:	370c      	adds	r7, #12
 801cc3e:	46bd      	mov	sp, r7
 801cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc44:	4770      	bx	lr
 801cc46:	bf00      	nop
 801cc48:	0802563c 	.word	0x0802563c

0801cc4c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>:

MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
 801cc52:	6078      	str	r0, [r7, #4]
 801cc54:	4a05      	ldr	r2, [pc, #20]	; (801cc6c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev+0x20>)
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	601a      	str	r2, [r3, #0]
{
    clear();
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	f000 f825 	bl	801ccaa <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>
}
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	4618      	mov	r0, r3
 801cc64:	3708      	adds	r7, #8
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	bf00      	nop
 801cc6c:	0802563c 	.word	0x0802563c

0801cc70 <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD0Ev>:
MockNamedValueComparatorsAndCopiersRepository::~MockNamedValueComparatorsAndCopiersRepository()
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b082      	sub	sp, #8
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
}
 801cc78:	6878      	ldr	r0, [r7, #4]
 801cc7a:	f7ff ffe7 	bl	801cc4c <_ZN45MockNamedValueComparatorsAndCopiersRepositoryD1Ev>
 801cc7e:	2108      	movs	r1, #8
 801cc80:	6878      	ldr	r0, [r7, #4]
 801cc82:	f7ea fef5 	bl	8007a70 <_ZdlPvj>
 801cc86:	687b      	ldr	r3, [r7, #4]
 801cc88:	4618      	mov	r0, r3
 801cc8a:	3708      	adds	r7, #8
 801cc8c:	46bd      	mov	sp, r7
 801cc8e:	bd80      	pop	{r7, pc}

0801cc90 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>:
struct MockNamedValueComparatorsAndCopiersRepositoryNode
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b082      	sub	sp, #8
 801cc94:	af00      	add	r7, sp, #0
 801cc96:	6078      	str	r0, [r7, #4]
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f7ed fe4f 	bl	800a93e <_ZN12SimpleStringD1Ev>
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	4618      	mov	r0, r3
 801cca4:	3708      	adds	r7, #8
 801cca6:	46bd      	mov	sp, r7
 801cca8:	bd80      	pop	{r7, pc}

0801ccaa <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv>:

void MockNamedValueComparatorsAndCopiersRepository::clear()
{
 801ccaa:	b590      	push	{r4, r7, lr}
 801ccac:	b085      	sub	sp, #20
 801ccae:	af00      	add	r7, sp, #0
 801ccb0:	6078      	str	r0, [r7, #4]
    while (head_) {
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	685b      	ldr	r3, [r3, #4]
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d012      	beq.n	801cce0 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x36>
        MockNamedValueComparatorsAndCopiersRepositoryNode* next = head_->next_;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	685b      	ldr	r3, [r3, #4]
 801ccbe:	691b      	ldr	r3, [r3, #16]
 801ccc0:	60fb      	str	r3, [r7, #12]
        delete head_;
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	685c      	ldr	r4, [r3, #4]
 801ccc6:	2c00      	cmp	r4, #0
 801ccc8:	d006      	beq.n	801ccd8 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x2e>
 801ccca:	4620      	mov	r0, r4
 801cccc:	f7ff ffe0 	bl	801cc90 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeD1Ev>
 801ccd0:	2114      	movs	r1, #20
 801ccd2:	4620      	mov	r0, r4
 801ccd4:	f7ea fecc 	bl	8007a70 <_ZdlPvj>
        head_ = next;
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	68fa      	ldr	r2, [r7, #12]
 801ccdc:	605a      	str	r2, [r3, #4]
    while (head_) {
 801ccde:	e7e8      	b.n	801ccb2 <_ZN45MockNamedValueComparatorsAndCopiersRepository5clearEv+0x8>
    }
}
 801cce0:	bf00      	nop
 801cce2:	3714      	adds	r7, #20
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bd90      	pop	{r4, r7, pc}

0801cce8 <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator>:

void MockNamedValueComparatorsAndCopiersRepository::installComparator(const SimpleString& name, MockNamedValueComparator& comparator)
{
 801cce8:	b590      	push	{r4, r7, lr}
 801ccea:	b085      	sub	sp, #20
 801ccec:	af00      	add	r7, sp, #0
 801ccee:	60f8      	str	r0, [r7, #12]
 801ccf0:	60b9      	str	r1, [r7, #8]
 801ccf2:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &comparator, head_);
 801ccf4:	f240 227a 	movw	r2, #634	; 0x27a
 801ccf8:	4908      	ldr	r1, [pc, #32]	; (801cd1c <_ZN45MockNamedValueComparatorsAndCopiersRepository17installComparatorERK12SimpleStringR24MockNamedValueComparator+0x34>)
 801ccfa:	2014      	movs	r0, #20
 801ccfc:	f7ea fea4 	bl	8007a48 <_ZnwjPKci>
 801cd00:	4604      	mov	r4, r0
 801cd02:	68fb      	ldr	r3, [r7, #12]
 801cd04:	685b      	ldr	r3, [r3, #4]
 801cd06:	687a      	ldr	r2, [r7, #4]
 801cd08:	68b9      	ldr	r1, [r7, #8]
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f7ff ff3b 	bl	801cb86 <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorPS_>
 801cd10:	68fb      	ldr	r3, [r7, #12]
 801cd12:	605c      	str	r4, [r3, #4]
}
 801cd14:	bf00      	nop
 801cd16:	3714      	adds	r7, #20
 801cd18:	46bd      	mov	sp, r7
 801cd1a:	bd90      	pop	{r4, r7, pc}
 801cd1c:	0802361c 	.word	0x0802361c

0801cd20 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier>:

void MockNamedValueComparatorsAndCopiersRepository::installCopier(const SimpleString& name, MockNamedValueCopier& copier)
{
 801cd20:	b590      	push	{r4, r7, lr}
 801cd22:	b085      	sub	sp, #20
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	60f8      	str	r0, [r7, #12]
 801cd28:	60b9      	str	r1, [r7, #8]
 801cd2a:	607a      	str	r2, [r7, #4]
    head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(name, &copier, head_);
 801cd2c:	f240 227f 	movw	r2, #639	; 0x27f
 801cd30:	4908      	ldr	r1, [pc, #32]	; (801cd54 <_ZN45MockNamedValueComparatorsAndCopiersRepository13installCopierERK12SimpleStringR20MockNamedValueCopier+0x34>)
 801cd32:	2014      	movs	r0, #20
 801cd34:	f7ea fe88 	bl	8007a48 <_ZnwjPKci>
 801cd38:	4604      	mov	r4, r0
 801cd3a:	68fb      	ldr	r3, [r7, #12]
 801cd3c:	685b      	ldr	r3, [r3, #4]
 801cd3e:	687a      	ldr	r2, [r7, #4]
 801cd40:	68b9      	ldr	r1, [r7, #8]
 801cd42:	4620      	mov	r0, r4
 801cd44:	f7ff ff39 	bl	801cbba <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP20MockNamedValueCopierPS_>
 801cd48:	68fb      	ldr	r3, [r7, #12]
 801cd4a:	605c      	str	r4, [r3, #4]
}
 801cd4c:	bf00      	nop
 801cd4e:	3714      	adds	r7, #20
 801cd50:	46bd      	mov	sp, r7
 801cd52:	bd90      	pop	{r4, r7, pc}
 801cd54:	0802361c 	.word	0x0802361c

0801cd58 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString>:

MockNamedValueComparator* MockNamedValueComparatorsAndCopiersRepository::getComparatorForType(const SimpleString& name)
{
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b084      	sub	sp, #16
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]
 801cd60:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	685b      	ldr	r3, [r3, #4]
 801cd66:	60fb      	str	r3, [r7, #12]
 801cd68:	68fb      	ldr	r3, [r7, #12]
 801cd6a:	2b00      	cmp	r3, #0
 801cd6c:	d017      	beq.n	801cd9e <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->comparator_) return p->comparator_;
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	6839      	ldr	r1, [r7, #0]
 801cd72:	4618      	mov	r0, r3
 801cd74:	f7ed fdef 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801cd78:	4603      	mov	r3, r0
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d005      	beq.n	801cd8a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801cd7e:	68fb      	ldr	r3, [r7, #12]
 801cd80:	689b      	ldr	r3, [r3, #8]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	d001      	beq.n	801cd8a <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x32>
 801cd86:	2301      	movs	r3, #1
 801cd88:	e000      	b.n	801cd8c <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x34>
 801cd8a:	2300      	movs	r3, #0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d002      	beq.n	801cd96 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x3e>
 801cd90:	68fb      	ldr	r3, [r7, #12]
 801cd92:	689b      	ldr	r3, [r3, #8]
 801cd94:	e004      	b.n	801cda0 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	691b      	ldr	r3, [r3, #16]
 801cd9a:	60fb      	str	r3, [r7, #12]
 801cd9c:	e7e4      	b.n	801cd68 <_ZN45MockNamedValueComparatorsAndCopiersRepository20getComparatorForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801cd9e:	2300      	movs	r3, #0
}
 801cda0:	4618      	mov	r0, r3
 801cda2:	3710      	adds	r7, #16
 801cda4:	46bd      	mov	sp, r7
 801cda6:	bd80      	pop	{r7, pc}

0801cda8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString>:

MockNamedValueCopier* MockNamedValueComparatorsAndCopiersRepository::getCopierForType(const SimpleString& name)
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b084      	sub	sp, #16
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	6078      	str	r0, [r7, #4]
 801cdb0:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	685b      	ldr	r3, [r3, #4]
 801cdb6:	60fb      	str	r3, [r7, #12]
 801cdb8:	68fb      	ldr	r3, [r7, #12]
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d017      	beq.n	801cdee <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x46>
            if (p->name_ == name && p->copier_) return p->copier_;
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	6839      	ldr	r1, [r7, #0]
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7ed fdc7 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d005      	beq.n	801cdda <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801cdce:	68fb      	ldr	r3, [r7, #12]
 801cdd0:	68db      	ldr	r3, [r3, #12]
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d001      	beq.n	801cdda <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x32>
 801cdd6:	2301      	movs	r3, #1
 801cdd8:	e000      	b.n	801cddc <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x34>
 801cdda:	2300      	movs	r3, #0
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d002      	beq.n	801cde6 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x3e>
 801cde0:	68fb      	ldr	r3, [r7, #12]
 801cde2:	68db      	ldr	r3, [r3, #12]
 801cde4:	e004      	b.n	801cdf0 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x48>
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = head_; p; p = p->next_)
 801cde6:	68fb      	ldr	r3, [r7, #12]
 801cde8:	691b      	ldr	r3, [r3, #16]
 801cdea:	60fb      	str	r3, [r7, #12]
 801cdec:	e7e4      	b.n	801cdb8 <_ZN45MockNamedValueComparatorsAndCopiersRepository16getCopierForTypeERK12SimpleString+0x10>
    return NULLPTR;
 801cdee:	2300      	movs	r3, #0
}
 801cdf0:	4618      	mov	r0, r3
 801cdf2:	3710      	adds	r7, #16
 801cdf4:	46bd      	mov	sp, r7
 801cdf6:	bd80      	pop	{r7, pc}

0801cdf8 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_>:

void MockNamedValueComparatorsAndCopiersRepository::installComparatorsAndCopiers(const MockNamedValueComparatorsAndCopiersRepository& repository)
{
 801cdf8:	b590      	push	{r4, r7, lr}
 801cdfa:	b087      	sub	sp, #28
 801cdfc:	af02      	add	r7, sp, #8
 801cdfe:	6078      	str	r0, [r7, #4]
 801ce00:	6039      	str	r1, [r7, #0]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801ce02:	683b      	ldr	r3, [r7, #0]
 801ce04:	685b      	ldr	r3, [r3, #4]
 801ce06:	60fb      	str	r3, [r7, #12]
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d018      	beq.n	801ce40 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x48>
      head_ = new MockNamedValueComparatorsAndCopiersRepositoryNode(p->name_, p->comparator_, p->copier_, head_);
 801ce0e:	f240 2293 	movw	r2, #659	; 0x293
 801ce12:	490d      	ldr	r1, [pc, #52]	; (801ce48 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x50>)
 801ce14:	2014      	movs	r0, #20
 801ce16:	f7ea fe17 	bl	8007a48 <_ZnwjPKci>
 801ce1a:	4604      	mov	r4, r0
 801ce1c:	68f9      	ldr	r1, [r7, #12]
 801ce1e:	68fb      	ldr	r3, [r7, #12]
 801ce20:	689a      	ldr	r2, [r3, #8]
 801ce22:	68fb      	ldr	r3, [r7, #12]
 801ce24:	68d8      	ldr	r0, [r3, #12]
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	685b      	ldr	r3, [r3, #4]
 801ce2a:	9300      	str	r3, [sp, #0]
 801ce2c:	4603      	mov	r3, r0
 801ce2e:	4620      	mov	r0, r4
 801ce30:	f7ff fedd 	bl	801cbee <_ZN49MockNamedValueComparatorsAndCopiersRepositoryNodeC1ERK12SimpleStringP24MockNamedValueComparatorP20MockNamedValueCopierPS_>
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	605c      	str	r4, [r3, #4]
    for (MockNamedValueComparatorsAndCopiersRepositoryNode* p = repository.head_; p; p = p->next_)
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	691b      	ldr	r3, [r3, #16]
 801ce3c:	60fb      	str	r3, [r7, #12]
 801ce3e:	e7e3      	b.n	801ce08 <_ZN45MockNamedValueComparatorsAndCopiersRepository28installComparatorsAndCopiersERKS_+0x10>
}
 801ce40:	bf00      	nop
 801ce42:	3714      	adds	r7, #20
 801ce44:	46bd      	mov	sp, r7
 801ce46:	bd90      	pop	{r4, r7, pc}
 801ce48:	0802361c 	.word	0x0802361c

0801ce4c <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b082      	sub	sp, #8
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
 801ce54:	6039      	str	r1, [r7, #0]
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	490b      	ldr	r1, [pc, #44]	; (801ce88 <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 801ce5a:	4618      	mov	r0, r3
 801ce5c:	f7ed f9b7 	bl	800a1ce <_ZN12SimpleStringC1EPKc>
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2200      	movs	r2, #0
 801ce64:	721a      	strb	r2, [r3, #8]
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	2200      	movs	r2, #0
 801ce6a:	725a      	strb	r2, [r3, #9]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	2200      	movs	r2, #0
 801ce70:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	6839      	ldr	r1, [r7, #0]
 801ce76:	4618      	mov	r0, r3
 801ce78:	f7ed fa15 	bl	800a2a6 <_ZN12SimpleStringaSERKS_>
}
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	4618      	mov	r0, r3
 801ce80:	3708      	adds	r7, #8
 801ce82:	46bd      	mov	sp, r7
 801ce84:	bd80      	pop	{r7, pc}
 801ce86:	bf00      	nop
 801ce88:	080236f8 	.word	0x080236f8

0801ce8c <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 801ce8c:	b480      	push	{r7}
 801ce8e:	b083      	sub	sp, #12
 801ce90:	af00      	add	r7, sp, #0
 801ce92:	6078      	str	r0, [r7, #4]
 801ce94:	6039      	str	r1, [r7, #0]
    next_ = filter;
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	683a      	ldr	r2, [r7, #0]
 801ce9a:	60da      	str	r2, [r3, #12]
    return this;
 801ce9c:	687b      	ldr	r3, [r7, #4]
}
 801ce9e:	4618      	mov	r0, r3
 801cea0:	370c      	adds	r7, #12
 801cea2:	46bd      	mov	sp, r7
 801cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cea8:	4770      	bx	lr

0801ceaa <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 801ceaa:	b480      	push	{r7}
 801ceac:	b083      	sub	sp, #12
 801ceae:	af00      	add	r7, sp, #0
 801ceb0:	6078      	str	r0, [r7, #4]
    return next_;
 801ceb2:	687b      	ldr	r3, [r7, #4]
 801ceb4:	68db      	ldr	r3, [r3, #12]
}
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	370c      	adds	r7, #12
 801ceba:	46bd      	mov	sp, r7
 801cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cec0:	4770      	bx	lr

0801cec2 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 801cec2:	b480      	push	{r7}
 801cec4:	b083      	sub	sp, #12
 801cec6:	af00      	add	r7, sp, #0
 801cec8:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	2201      	movs	r2, #1
 801cece:	721a      	strb	r2, [r3, #8]
}
 801ced0:	bf00      	nop
 801ced2:	370c      	adds	r7, #12
 801ced4:	46bd      	mov	sp, r7
 801ced6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceda:	4770      	bx	lr

0801cedc <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 801cedc:	b480      	push	{r7}
 801cede:	b083      	sub	sp, #12
 801cee0:	af00      	add	r7, sp, #0
 801cee2:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	2201      	movs	r2, #1
 801cee8:	725a      	strb	r2, [r3, #9]
}
 801ceea:	bf00      	nop
 801ceec:	370c      	adds	r7, #12
 801ceee:	46bd      	mov	sp, r7
 801cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef4:	4770      	bx	lr

0801cef6 <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 801cef6:	b580      	push	{r7, lr}
 801cef8:	b084      	sub	sp, #16
 801cefa:	af00      	add	r7, sp, #0
 801cefc:	6078      	str	r0, [r7, #4]
 801cefe:	6039      	str	r1, [r7, #0]
    bool matches = false;
 801cf00:	2300      	movs	r3, #0
 801cf02:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	7a1b      	ldrb	r3, [r3, #8]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d007      	beq.n	801cf1c <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	4619      	mov	r1, r3
 801cf10:	6838      	ldr	r0, [r7, #0]
 801cf12:	f7ed fd20 	bl	800a956 <_ZeqRK12SimpleStringS1_>
 801cf16:	4603      	mov	r3, r0
 801cf18:	73fb      	strb	r3, [r7, #15]
 801cf1a:	e006      	b.n	801cf2a <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	4619      	mov	r1, r3
 801cf20:	6838      	ldr	r0, [r7, #0]
 801cf22:	f7ed f9d2 	bl	800a2ca <_ZNK12SimpleString8containsERKS_>
 801cf26:	4603      	mov	r3, r0
 801cf28:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	7a5b      	ldrb	r3, [r3, #9]
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d004      	beq.n	801cf3c <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 801cf32:	7bfb      	ldrb	r3, [r7, #15]
 801cf34:	f083 0301 	eor.w	r3, r3, #1
 801cf38:	b2db      	uxtb	r3, r3
 801cf3a:	e005      	b.n	801cf48 <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 801cf3c:	7bfb      	ldrb	r3, [r7, #15]
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	bf14      	ite	ne
 801cf42:	2301      	movne	r3, #1
 801cf44:	2300      	moveq	r3, #0
 801cf46:	b2db      	uxtb	r3, r3
}
 801cf48:	4618      	mov	r0, r3
 801cf4a:	3710      	adds	r7, #16
 801cf4c:	46bd      	mov	sp, r7
 801cf4e:	bd80      	pop	{r7, pc}

0801cf50 <__cxa_guard_acquire>:
 801cf50:	6803      	ldr	r3, [r0, #0]
 801cf52:	07db      	lsls	r3, r3, #31
 801cf54:	d406      	bmi.n	801cf64 <__cxa_guard_acquire+0x14>
 801cf56:	7843      	ldrb	r3, [r0, #1]
 801cf58:	b103      	cbz	r3, 801cf5c <__cxa_guard_acquire+0xc>
 801cf5a:	deff      	udf	#255	; 0xff
 801cf5c:	2301      	movs	r3, #1
 801cf5e:	7043      	strb	r3, [r0, #1]
 801cf60:	4618      	mov	r0, r3
 801cf62:	4770      	bx	lr
 801cf64:	2000      	movs	r0, #0
 801cf66:	4770      	bx	lr

0801cf68 <__cxa_guard_release>:
 801cf68:	2301      	movs	r3, #1
 801cf6a:	6003      	str	r3, [r0, #0]
 801cf6c:	4770      	bx	lr

0801cf6e <__cxa_pure_virtual>:
 801cf6e:	b508      	push	{r3, lr}
 801cf70:	f000 f80c 	bl	801cf8c <_ZSt9terminatev>

0801cf74 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801cf74:	b508      	push	{r3, lr}
 801cf76:	4780      	blx	r0
 801cf78:	f000 f816 	bl	801cfa8 <abort>

0801cf7c <_ZSt13get_terminatev>:
 801cf7c:	4b02      	ldr	r3, [pc, #8]	; (801cf88 <_ZSt13get_terminatev+0xc>)
 801cf7e:	6818      	ldr	r0, [r3, #0]
 801cf80:	f3bf 8f5b 	dmb	ish
 801cf84:	4770      	bx	lr
 801cf86:	bf00      	nop
 801cf88:	20000100 	.word	0x20000100

0801cf8c <_ZSt9terminatev>:
 801cf8c:	b508      	push	{r3, lr}
 801cf8e:	f7ff fff5 	bl	801cf7c <_ZSt13get_terminatev>
 801cf92:	f7ff ffef 	bl	801cf74 <_ZN10__cxxabiv111__terminateEPFvvE>

0801cf96 <fabs>:
 801cf96:	ec51 0b10 	vmov	r0, r1, d0
 801cf9a:	ee10 2a10 	vmov	r2, s0
 801cf9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801cfa2:	ec43 2b10 	vmov	d0, r2, r3
 801cfa6:	4770      	bx	lr

0801cfa8 <abort>:
 801cfa8:	b508      	push	{r3, lr}
 801cfaa:	2006      	movs	r0, #6
 801cfac:	f000 ff88 	bl	801dec0 <raise>
 801cfb0:	2001      	movs	r0, #1
 801cfb2:	f7e3 fee6 	bl	8000d82 <_exit>

0801cfb6 <atexit>:
 801cfb6:	2300      	movs	r3, #0
 801cfb8:	4601      	mov	r1, r0
 801cfba:	461a      	mov	r2, r3
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f002 b91f 	b.w	801f200 <__register_exitproc>
	...

0801cfc4 <calloc>:
 801cfc4:	4b02      	ldr	r3, [pc, #8]	; (801cfd0 <calloc+0xc>)
 801cfc6:	460a      	mov	r2, r1
 801cfc8:	4601      	mov	r1, r0
 801cfca:	6818      	ldr	r0, [r3, #0]
 801cfcc:	f000 bde8 	b.w	801dba0 <_calloc_r>
 801cfd0:	20000104 	.word	0x20000104

0801cfd4 <__errno>:
 801cfd4:	4b01      	ldr	r3, [pc, #4]	; (801cfdc <__errno+0x8>)
 801cfd6:	6818      	ldr	r0, [r3, #0]
 801cfd8:	4770      	bx	lr
 801cfda:	bf00      	nop
 801cfdc:	20000104 	.word	0x20000104

0801cfe0 <_fclose_r>:
 801cfe0:	b570      	push	{r4, r5, r6, lr}
 801cfe2:	4605      	mov	r5, r0
 801cfe4:	460c      	mov	r4, r1
 801cfe6:	b911      	cbnz	r1, 801cfee <_fclose_r+0xe>
 801cfe8:	2600      	movs	r6, #0
 801cfea:	4630      	mov	r0, r6
 801cfec:	bd70      	pop	{r4, r5, r6, pc}
 801cfee:	b118      	cbz	r0, 801cff8 <_fclose_r+0x18>
 801cff0:	6983      	ldr	r3, [r0, #24]
 801cff2:	b90b      	cbnz	r3, 801cff8 <_fclose_r+0x18>
 801cff4:	f000 f994 	bl	801d320 <__sinit>
 801cff8:	4b2c      	ldr	r3, [pc, #176]	; (801d0ac <_fclose_r+0xcc>)
 801cffa:	429c      	cmp	r4, r3
 801cffc:	d114      	bne.n	801d028 <_fclose_r+0x48>
 801cffe:	686c      	ldr	r4, [r5, #4]
 801d000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d002:	07d8      	lsls	r0, r3, #31
 801d004:	d405      	bmi.n	801d012 <_fclose_r+0x32>
 801d006:	89a3      	ldrh	r3, [r4, #12]
 801d008:	0599      	lsls	r1, r3, #22
 801d00a:	d402      	bmi.n	801d012 <_fclose_r+0x32>
 801d00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d00e:	f000 fd3a 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d016:	b98b      	cbnz	r3, 801d03c <_fclose_r+0x5c>
 801d018:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d01a:	f016 0601 	ands.w	r6, r6, #1
 801d01e:	d1e3      	bne.n	801cfe8 <_fclose_r+0x8>
 801d020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d022:	f000 fd32 	bl	801da8a <__retarget_lock_release_recursive>
 801d026:	e7e0      	b.n	801cfea <_fclose_r+0xa>
 801d028:	4b21      	ldr	r3, [pc, #132]	; (801d0b0 <_fclose_r+0xd0>)
 801d02a:	429c      	cmp	r4, r3
 801d02c:	d101      	bne.n	801d032 <_fclose_r+0x52>
 801d02e:	68ac      	ldr	r4, [r5, #8]
 801d030:	e7e6      	b.n	801d000 <_fclose_r+0x20>
 801d032:	4b20      	ldr	r3, [pc, #128]	; (801d0b4 <_fclose_r+0xd4>)
 801d034:	429c      	cmp	r4, r3
 801d036:	bf08      	it	eq
 801d038:	68ec      	ldreq	r4, [r5, #12]
 801d03a:	e7e1      	b.n	801d000 <_fclose_r+0x20>
 801d03c:	4621      	mov	r1, r4
 801d03e:	4628      	mov	r0, r5
 801d040:	f000 f842 	bl	801d0c8 <__sflush_r>
 801d044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d046:	4606      	mov	r6, r0
 801d048:	b133      	cbz	r3, 801d058 <_fclose_r+0x78>
 801d04a:	6a21      	ldr	r1, [r4, #32]
 801d04c:	4628      	mov	r0, r5
 801d04e:	4798      	blx	r3
 801d050:	2800      	cmp	r0, #0
 801d052:	bfb8      	it	lt
 801d054:	f04f 36ff 	movlt.w	r6, #4294967295
 801d058:	89a3      	ldrh	r3, [r4, #12]
 801d05a:	061a      	lsls	r2, r3, #24
 801d05c:	d503      	bpl.n	801d066 <_fclose_r+0x86>
 801d05e:	6921      	ldr	r1, [r4, #16]
 801d060:	4628      	mov	r0, r5
 801d062:	f000 fdad 	bl	801dbc0 <_free_r>
 801d066:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d068:	b141      	cbz	r1, 801d07c <_fclose_r+0x9c>
 801d06a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d06e:	4299      	cmp	r1, r3
 801d070:	d002      	beq.n	801d078 <_fclose_r+0x98>
 801d072:	4628      	mov	r0, r5
 801d074:	f000 fda4 	bl	801dbc0 <_free_r>
 801d078:	2300      	movs	r3, #0
 801d07a:	6363      	str	r3, [r4, #52]	; 0x34
 801d07c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d07e:	b121      	cbz	r1, 801d08a <_fclose_r+0xaa>
 801d080:	4628      	mov	r0, r5
 801d082:	f000 fd9d 	bl	801dbc0 <_free_r>
 801d086:	2300      	movs	r3, #0
 801d088:	64a3      	str	r3, [r4, #72]	; 0x48
 801d08a:	f000 f931 	bl	801d2f0 <__sfp_lock_acquire>
 801d08e:	2300      	movs	r3, #0
 801d090:	81a3      	strh	r3, [r4, #12]
 801d092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d094:	07db      	lsls	r3, r3, #31
 801d096:	d402      	bmi.n	801d09e <_fclose_r+0xbe>
 801d098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d09a:	f000 fcf6 	bl	801da8a <__retarget_lock_release_recursive>
 801d09e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d0a0:	f000 fcef 	bl	801da82 <__retarget_lock_close_recursive>
 801d0a4:	f000 f92a 	bl	801d2fc <__sfp_lock_release>
 801d0a8:	e79f      	b.n	801cfea <_fclose_r+0xa>
 801d0aa:	bf00      	nop
 801d0ac:	08025730 	.word	0x08025730
 801d0b0:	08025750 	.word	0x08025750
 801d0b4:	08025710 	.word	0x08025710

0801d0b8 <fclose>:
 801d0b8:	4b02      	ldr	r3, [pc, #8]	; (801d0c4 <fclose+0xc>)
 801d0ba:	4601      	mov	r1, r0
 801d0bc:	6818      	ldr	r0, [r3, #0]
 801d0be:	f7ff bf8f 	b.w	801cfe0 <_fclose_r>
 801d0c2:	bf00      	nop
 801d0c4:	20000104 	.word	0x20000104

0801d0c8 <__sflush_r>:
 801d0c8:	898a      	ldrh	r2, [r1, #12]
 801d0ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d0ce:	4605      	mov	r5, r0
 801d0d0:	0710      	lsls	r0, r2, #28
 801d0d2:	460c      	mov	r4, r1
 801d0d4:	d458      	bmi.n	801d188 <__sflush_r+0xc0>
 801d0d6:	684b      	ldr	r3, [r1, #4]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	dc05      	bgt.n	801d0e8 <__sflush_r+0x20>
 801d0dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	dc02      	bgt.n	801d0e8 <__sflush_r+0x20>
 801d0e2:	2000      	movs	r0, #0
 801d0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0ea:	2e00      	cmp	r6, #0
 801d0ec:	d0f9      	beq.n	801d0e2 <__sflush_r+0x1a>
 801d0ee:	2300      	movs	r3, #0
 801d0f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d0f4:	682f      	ldr	r7, [r5, #0]
 801d0f6:	602b      	str	r3, [r5, #0]
 801d0f8:	d032      	beq.n	801d160 <__sflush_r+0x98>
 801d0fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d0fc:	89a3      	ldrh	r3, [r4, #12]
 801d0fe:	075a      	lsls	r2, r3, #29
 801d100:	d505      	bpl.n	801d10e <__sflush_r+0x46>
 801d102:	6863      	ldr	r3, [r4, #4]
 801d104:	1ac0      	subs	r0, r0, r3
 801d106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d108:	b10b      	cbz	r3, 801d10e <__sflush_r+0x46>
 801d10a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d10c:	1ac0      	subs	r0, r0, r3
 801d10e:	2300      	movs	r3, #0
 801d110:	4602      	mov	r2, r0
 801d112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d114:	6a21      	ldr	r1, [r4, #32]
 801d116:	4628      	mov	r0, r5
 801d118:	47b0      	blx	r6
 801d11a:	1c43      	adds	r3, r0, #1
 801d11c:	89a3      	ldrh	r3, [r4, #12]
 801d11e:	d106      	bne.n	801d12e <__sflush_r+0x66>
 801d120:	6829      	ldr	r1, [r5, #0]
 801d122:	291d      	cmp	r1, #29
 801d124:	d82c      	bhi.n	801d180 <__sflush_r+0xb8>
 801d126:	4a2a      	ldr	r2, [pc, #168]	; (801d1d0 <__sflush_r+0x108>)
 801d128:	40ca      	lsrs	r2, r1
 801d12a:	07d6      	lsls	r6, r2, #31
 801d12c:	d528      	bpl.n	801d180 <__sflush_r+0xb8>
 801d12e:	2200      	movs	r2, #0
 801d130:	6062      	str	r2, [r4, #4]
 801d132:	04d9      	lsls	r1, r3, #19
 801d134:	6922      	ldr	r2, [r4, #16]
 801d136:	6022      	str	r2, [r4, #0]
 801d138:	d504      	bpl.n	801d144 <__sflush_r+0x7c>
 801d13a:	1c42      	adds	r2, r0, #1
 801d13c:	d101      	bne.n	801d142 <__sflush_r+0x7a>
 801d13e:	682b      	ldr	r3, [r5, #0]
 801d140:	b903      	cbnz	r3, 801d144 <__sflush_r+0x7c>
 801d142:	6560      	str	r0, [r4, #84]	; 0x54
 801d144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d146:	602f      	str	r7, [r5, #0]
 801d148:	2900      	cmp	r1, #0
 801d14a:	d0ca      	beq.n	801d0e2 <__sflush_r+0x1a>
 801d14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d150:	4299      	cmp	r1, r3
 801d152:	d002      	beq.n	801d15a <__sflush_r+0x92>
 801d154:	4628      	mov	r0, r5
 801d156:	f000 fd33 	bl	801dbc0 <_free_r>
 801d15a:	2000      	movs	r0, #0
 801d15c:	6360      	str	r0, [r4, #52]	; 0x34
 801d15e:	e7c1      	b.n	801d0e4 <__sflush_r+0x1c>
 801d160:	6a21      	ldr	r1, [r4, #32]
 801d162:	2301      	movs	r3, #1
 801d164:	4628      	mov	r0, r5
 801d166:	47b0      	blx	r6
 801d168:	1c41      	adds	r1, r0, #1
 801d16a:	d1c7      	bne.n	801d0fc <__sflush_r+0x34>
 801d16c:	682b      	ldr	r3, [r5, #0]
 801d16e:	2b00      	cmp	r3, #0
 801d170:	d0c4      	beq.n	801d0fc <__sflush_r+0x34>
 801d172:	2b1d      	cmp	r3, #29
 801d174:	d001      	beq.n	801d17a <__sflush_r+0xb2>
 801d176:	2b16      	cmp	r3, #22
 801d178:	d101      	bne.n	801d17e <__sflush_r+0xb6>
 801d17a:	602f      	str	r7, [r5, #0]
 801d17c:	e7b1      	b.n	801d0e2 <__sflush_r+0x1a>
 801d17e:	89a3      	ldrh	r3, [r4, #12]
 801d180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d184:	81a3      	strh	r3, [r4, #12]
 801d186:	e7ad      	b.n	801d0e4 <__sflush_r+0x1c>
 801d188:	690f      	ldr	r7, [r1, #16]
 801d18a:	2f00      	cmp	r7, #0
 801d18c:	d0a9      	beq.n	801d0e2 <__sflush_r+0x1a>
 801d18e:	0793      	lsls	r3, r2, #30
 801d190:	680e      	ldr	r6, [r1, #0]
 801d192:	bf08      	it	eq
 801d194:	694b      	ldreq	r3, [r1, #20]
 801d196:	600f      	str	r7, [r1, #0]
 801d198:	bf18      	it	ne
 801d19a:	2300      	movne	r3, #0
 801d19c:	eba6 0807 	sub.w	r8, r6, r7
 801d1a0:	608b      	str	r3, [r1, #8]
 801d1a2:	f1b8 0f00 	cmp.w	r8, #0
 801d1a6:	dd9c      	ble.n	801d0e2 <__sflush_r+0x1a>
 801d1a8:	6a21      	ldr	r1, [r4, #32]
 801d1aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d1ac:	4643      	mov	r3, r8
 801d1ae:	463a      	mov	r2, r7
 801d1b0:	4628      	mov	r0, r5
 801d1b2:	47b0      	blx	r6
 801d1b4:	2800      	cmp	r0, #0
 801d1b6:	dc06      	bgt.n	801d1c6 <__sflush_r+0xfe>
 801d1b8:	89a3      	ldrh	r3, [r4, #12]
 801d1ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d1be:	81a3      	strh	r3, [r4, #12]
 801d1c0:	f04f 30ff 	mov.w	r0, #4294967295
 801d1c4:	e78e      	b.n	801d0e4 <__sflush_r+0x1c>
 801d1c6:	4407      	add	r7, r0
 801d1c8:	eba8 0800 	sub.w	r8, r8, r0
 801d1cc:	e7e9      	b.n	801d1a2 <__sflush_r+0xda>
 801d1ce:	bf00      	nop
 801d1d0:	20400001 	.word	0x20400001

0801d1d4 <_fflush_r>:
 801d1d4:	b538      	push	{r3, r4, r5, lr}
 801d1d6:	690b      	ldr	r3, [r1, #16]
 801d1d8:	4605      	mov	r5, r0
 801d1da:	460c      	mov	r4, r1
 801d1dc:	b913      	cbnz	r3, 801d1e4 <_fflush_r+0x10>
 801d1de:	2500      	movs	r5, #0
 801d1e0:	4628      	mov	r0, r5
 801d1e2:	bd38      	pop	{r3, r4, r5, pc}
 801d1e4:	b118      	cbz	r0, 801d1ee <_fflush_r+0x1a>
 801d1e6:	6983      	ldr	r3, [r0, #24]
 801d1e8:	b90b      	cbnz	r3, 801d1ee <_fflush_r+0x1a>
 801d1ea:	f000 f899 	bl	801d320 <__sinit>
 801d1ee:	4b14      	ldr	r3, [pc, #80]	; (801d240 <_fflush_r+0x6c>)
 801d1f0:	429c      	cmp	r4, r3
 801d1f2:	d11b      	bne.n	801d22c <_fflush_r+0x58>
 801d1f4:	686c      	ldr	r4, [r5, #4]
 801d1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1fa:	2b00      	cmp	r3, #0
 801d1fc:	d0ef      	beq.n	801d1de <_fflush_r+0xa>
 801d1fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d200:	07d0      	lsls	r0, r2, #31
 801d202:	d404      	bmi.n	801d20e <_fflush_r+0x3a>
 801d204:	0599      	lsls	r1, r3, #22
 801d206:	d402      	bmi.n	801d20e <_fflush_r+0x3a>
 801d208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d20a:	f000 fc3c 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d20e:	4628      	mov	r0, r5
 801d210:	4621      	mov	r1, r4
 801d212:	f7ff ff59 	bl	801d0c8 <__sflush_r>
 801d216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d218:	07da      	lsls	r2, r3, #31
 801d21a:	4605      	mov	r5, r0
 801d21c:	d4e0      	bmi.n	801d1e0 <_fflush_r+0xc>
 801d21e:	89a3      	ldrh	r3, [r4, #12]
 801d220:	059b      	lsls	r3, r3, #22
 801d222:	d4dd      	bmi.n	801d1e0 <_fflush_r+0xc>
 801d224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d226:	f000 fc30 	bl	801da8a <__retarget_lock_release_recursive>
 801d22a:	e7d9      	b.n	801d1e0 <_fflush_r+0xc>
 801d22c:	4b05      	ldr	r3, [pc, #20]	; (801d244 <_fflush_r+0x70>)
 801d22e:	429c      	cmp	r4, r3
 801d230:	d101      	bne.n	801d236 <_fflush_r+0x62>
 801d232:	68ac      	ldr	r4, [r5, #8]
 801d234:	e7df      	b.n	801d1f6 <_fflush_r+0x22>
 801d236:	4b04      	ldr	r3, [pc, #16]	; (801d248 <_fflush_r+0x74>)
 801d238:	429c      	cmp	r4, r3
 801d23a:	bf08      	it	eq
 801d23c:	68ec      	ldreq	r4, [r5, #12]
 801d23e:	e7da      	b.n	801d1f6 <_fflush_r+0x22>
 801d240:	08025730 	.word	0x08025730
 801d244:	08025750 	.word	0x08025750
 801d248:	08025710 	.word	0x08025710

0801d24c <fflush>:
 801d24c:	4601      	mov	r1, r0
 801d24e:	b920      	cbnz	r0, 801d25a <fflush+0xe>
 801d250:	4b04      	ldr	r3, [pc, #16]	; (801d264 <fflush+0x18>)
 801d252:	4905      	ldr	r1, [pc, #20]	; (801d268 <fflush+0x1c>)
 801d254:	6818      	ldr	r0, [r3, #0]
 801d256:	f000 babb 	b.w	801d7d0 <_fwalk_reent>
 801d25a:	4b04      	ldr	r3, [pc, #16]	; (801d26c <fflush+0x20>)
 801d25c:	6818      	ldr	r0, [r3, #0]
 801d25e:	f7ff bfb9 	b.w	801d1d4 <_fflush_r>
 801d262:	bf00      	nop
 801d264:	08025770 	.word	0x08025770
 801d268:	0801d1d5 	.word	0x0801d1d5
 801d26c:	20000104 	.word	0x20000104

0801d270 <std>:
 801d270:	2300      	movs	r3, #0
 801d272:	b510      	push	{r4, lr}
 801d274:	4604      	mov	r4, r0
 801d276:	e9c0 3300 	strd	r3, r3, [r0]
 801d27a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d27e:	6083      	str	r3, [r0, #8]
 801d280:	8181      	strh	r1, [r0, #12]
 801d282:	6643      	str	r3, [r0, #100]	; 0x64
 801d284:	81c2      	strh	r2, [r0, #14]
 801d286:	6183      	str	r3, [r0, #24]
 801d288:	4619      	mov	r1, r3
 801d28a:	2208      	movs	r2, #8
 801d28c:	305c      	adds	r0, #92	; 0x5c
 801d28e:	f000 fc7f 	bl	801db90 <memset>
 801d292:	4b05      	ldr	r3, [pc, #20]	; (801d2a8 <std+0x38>)
 801d294:	6263      	str	r3, [r4, #36]	; 0x24
 801d296:	4b05      	ldr	r3, [pc, #20]	; (801d2ac <std+0x3c>)
 801d298:	62a3      	str	r3, [r4, #40]	; 0x28
 801d29a:	4b05      	ldr	r3, [pc, #20]	; (801d2b0 <std+0x40>)
 801d29c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d29e:	4b05      	ldr	r3, [pc, #20]	; (801d2b4 <std+0x44>)
 801d2a0:	6224      	str	r4, [r4, #32]
 801d2a2:	6323      	str	r3, [r4, #48]	; 0x30
 801d2a4:	bd10      	pop	{r4, pc}
 801d2a6:	bf00      	nop
 801d2a8:	0801def9 	.word	0x0801def9
 801d2ac:	0801df1f 	.word	0x0801df1f
 801d2b0:	0801df57 	.word	0x0801df57
 801d2b4:	0801df7b 	.word	0x0801df7b

0801d2b8 <_cleanup_r>:
 801d2b8:	4901      	ldr	r1, [pc, #4]	; (801d2c0 <_cleanup_r+0x8>)
 801d2ba:	f000 ba89 	b.w	801d7d0 <_fwalk_reent>
 801d2be:	bf00      	nop
 801d2c0:	0801d1d5 	.word	0x0801d1d5

0801d2c4 <__sfmoreglue>:
 801d2c4:	b570      	push	{r4, r5, r6, lr}
 801d2c6:	1e4a      	subs	r2, r1, #1
 801d2c8:	2568      	movs	r5, #104	; 0x68
 801d2ca:	4355      	muls	r5, r2
 801d2cc:	460e      	mov	r6, r1
 801d2ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d2d2:	f000 fcc5 	bl	801dc60 <_malloc_r>
 801d2d6:	4604      	mov	r4, r0
 801d2d8:	b140      	cbz	r0, 801d2ec <__sfmoreglue+0x28>
 801d2da:	2100      	movs	r1, #0
 801d2dc:	e9c0 1600 	strd	r1, r6, [r0]
 801d2e0:	300c      	adds	r0, #12
 801d2e2:	60a0      	str	r0, [r4, #8]
 801d2e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d2e8:	f000 fc52 	bl	801db90 <memset>
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	bd70      	pop	{r4, r5, r6, pc}

0801d2f0 <__sfp_lock_acquire>:
 801d2f0:	4801      	ldr	r0, [pc, #4]	; (801d2f8 <__sfp_lock_acquire+0x8>)
 801d2f2:	f000 bbc8 	b.w	801da86 <__retarget_lock_acquire_recursive>
 801d2f6:	bf00      	nop
 801d2f8:	20000da0 	.word	0x20000da0

0801d2fc <__sfp_lock_release>:
 801d2fc:	4801      	ldr	r0, [pc, #4]	; (801d304 <__sfp_lock_release+0x8>)
 801d2fe:	f000 bbc4 	b.w	801da8a <__retarget_lock_release_recursive>
 801d302:	bf00      	nop
 801d304:	20000da0 	.word	0x20000da0

0801d308 <__sinit_lock_acquire>:
 801d308:	4801      	ldr	r0, [pc, #4]	; (801d310 <__sinit_lock_acquire+0x8>)
 801d30a:	f000 bbbc 	b.w	801da86 <__retarget_lock_acquire_recursive>
 801d30e:	bf00      	nop
 801d310:	20000d9b 	.word	0x20000d9b

0801d314 <__sinit_lock_release>:
 801d314:	4801      	ldr	r0, [pc, #4]	; (801d31c <__sinit_lock_release+0x8>)
 801d316:	f000 bbb8 	b.w	801da8a <__retarget_lock_release_recursive>
 801d31a:	bf00      	nop
 801d31c:	20000d9b 	.word	0x20000d9b

0801d320 <__sinit>:
 801d320:	b510      	push	{r4, lr}
 801d322:	4604      	mov	r4, r0
 801d324:	f7ff fff0 	bl	801d308 <__sinit_lock_acquire>
 801d328:	69a3      	ldr	r3, [r4, #24]
 801d32a:	b11b      	cbz	r3, 801d334 <__sinit+0x14>
 801d32c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d330:	f7ff bff0 	b.w	801d314 <__sinit_lock_release>
 801d334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d338:	6523      	str	r3, [r4, #80]	; 0x50
 801d33a:	4b13      	ldr	r3, [pc, #76]	; (801d388 <__sinit+0x68>)
 801d33c:	4a13      	ldr	r2, [pc, #76]	; (801d38c <__sinit+0x6c>)
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	62a2      	str	r2, [r4, #40]	; 0x28
 801d342:	42a3      	cmp	r3, r4
 801d344:	bf04      	itt	eq
 801d346:	2301      	moveq	r3, #1
 801d348:	61a3      	streq	r3, [r4, #24]
 801d34a:	4620      	mov	r0, r4
 801d34c:	f000 f820 	bl	801d390 <__sfp>
 801d350:	6060      	str	r0, [r4, #4]
 801d352:	4620      	mov	r0, r4
 801d354:	f000 f81c 	bl	801d390 <__sfp>
 801d358:	60a0      	str	r0, [r4, #8]
 801d35a:	4620      	mov	r0, r4
 801d35c:	f000 f818 	bl	801d390 <__sfp>
 801d360:	2200      	movs	r2, #0
 801d362:	60e0      	str	r0, [r4, #12]
 801d364:	2104      	movs	r1, #4
 801d366:	6860      	ldr	r0, [r4, #4]
 801d368:	f7ff ff82 	bl	801d270 <std>
 801d36c:	68a0      	ldr	r0, [r4, #8]
 801d36e:	2201      	movs	r2, #1
 801d370:	2109      	movs	r1, #9
 801d372:	f7ff ff7d 	bl	801d270 <std>
 801d376:	68e0      	ldr	r0, [r4, #12]
 801d378:	2202      	movs	r2, #2
 801d37a:	2112      	movs	r1, #18
 801d37c:	f7ff ff78 	bl	801d270 <std>
 801d380:	2301      	movs	r3, #1
 801d382:	61a3      	str	r3, [r4, #24]
 801d384:	e7d2      	b.n	801d32c <__sinit+0xc>
 801d386:	bf00      	nop
 801d388:	08025770 	.word	0x08025770
 801d38c:	0801d2b9 	.word	0x0801d2b9

0801d390 <__sfp>:
 801d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d392:	4607      	mov	r7, r0
 801d394:	f7ff ffac 	bl	801d2f0 <__sfp_lock_acquire>
 801d398:	4b1e      	ldr	r3, [pc, #120]	; (801d414 <__sfp+0x84>)
 801d39a:	681e      	ldr	r6, [r3, #0]
 801d39c:	69b3      	ldr	r3, [r6, #24]
 801d39e:	b913      	cbnz	r3, 801d3a6 <__sfp+0x16>
 801d3a0:	4630      	mov	r0, r6
 801d3a2:	f7ff ffbd 	bl	801d320 <__sinit>
 801d3a6:	3648      	adds	r6, #72	; 0x48
 801d3a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d3ac:	3b01      	subs	r3, #1
 801d3ae:	d503      	bpl.n	801d3b8 <__sfp+0x28>
 801d3b0:	6833      	ldr	r3, [r6, #0]
 801d3b2:	b30b      	cbz	r3, 801d3f8 <__sfp+0x68>
 801d3b4:	6836      	ldr	r6, [r6, #0]
 801d3b6:	e7f7      	b.n	801d3a8 <__sfp+0x18>
 801d3b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d3bc:	b9d5      	cbnz	r5, 801d3f4 <__sfp+0x64>
 801d3be:	4b16      	ldr	r3, [pc, #88]	; (801d418 <__sfp+0x88>)
 801d3c0:	60e3      	str	r3, [r4, #12]
 801d3c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d3c6:	6665      	str	r5, [r4, #100]	; 0x64
 801d3c8:	f000 fb5a 	bl	801da80 <__retarget_lock_init_recursive>
 801d3cc:	f7ff ff96 	bl	801d2fc <__sfp_lock_release>
 801d3d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d3d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d3d8:	6025      	str	r5, [r4, #0]
 801d3da:	61a5      	str	r5, [r4, #24]
 801d3dc:	2208      	movs	r2, #8
 801d3de:	4629      	mov	r1, r5
 801d3e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d3e4:	f000 fbd4 	bl	801db90 <memset>
 801d3e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d3ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d3f0:	4620      	mov	r0, r4
 801d3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d3f4:	3468      	adds	r4, #104	; 0x68
 801d3f6:	e7d9      	b.n	801d3ac <__sfp+0x1c>
 801d3f8:	2104      	movs	r1, #4
 801d3fa:	4638      	mov	r0, r7
 801d3fc:	f7ff ff62 	bl	801d2c4 <__sfmoreglue>
 801d400:	4604      	mov	r4, r0
 801d402:	6030      	str	r0, [r6, #0]
 801d404:	2800      	cmp	r0, #0
 801d406:	d1d5      	bne.n	801d3b4 <__sfp+0x24>
 801d408:	f7ff ff78 	bl	801d2fc <__sfp_lock_release>
 801d40c:	230c      	movs	r3, #12
 801d40e:	603b      	str	r3, [r7, #0]
 801d410:	e7ee      	b.n	801d3f0 <__sfp+0x60>
 801d412:	bf00      	nop
 801d414:	08025770 	.word	0x08025770
 801d418:	ffff0001 	.word	0xffff0001

0801d41c <_fopen_r>:
 801d41c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d41e:	460f      	mov	r7, r1
 801d420:	4611      	mov	r1, r2
 801d422:	aa01      	add	r2, sp, #4
 801d424:	4605      	mov	r5, r0
 801d426:	f001 ff7f 	bl	801f328 <__sflags>
 801d42a:	4606      	mov	r6, r0
 801d42c:	b918      	cbnz	r0, 801d436 <_fopen_r+0x1a>
 801d42e:	2400      	movs	r4, #0
 801d430:	4620      	mov	r0, r4
 801d432:	b003      	add	sp, #12
 801d434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d436:	4628      	mov	r0, r5
 801d438:	f7ff ffaa 	bl	801d390 <__sfp>
 801d43c:	4604      	mov	r4, r0
 801d43e:	2800      	cmp	r0, #0
 801d440:	d0f5      	beq.n	801d42e <_fopen_r+0x12>
 801d442:	4639      	mov	r1, r7
 801d444:	9a01      	ldr	r2, [sp, #4]
 801d446:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801d44a:	4628      	mov	r0, r5
 801d44c:	f000 fc62 	bl	801dd14 <_open_r>
 801d450:	1e07      	subs	r7, r0, #0
 801d452:	da09      	bge.n	801d468 <_fopen_r+0x4c>
 801d454:	2500      	movs	r5, #0
 801d456:	f7ff ff4b 	bl	801d2f0 <__sfp_lock_acquire>
 801d45a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d45c:	81a5      	strh	r5, [r4, #12]
 801d45e:	f000 fb10 	bl	801da82 <__retarget_lock_close_recursive>
 801d462:	f7ff ff4b 	bl	801d2fc <__sfp_lock_release>
 801d466:	e7e2      	b.n	801d42e <_fopen_r+0x12>
 801d468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d46a:	07db      	lsls	r3, r3, #31
 801d46c:	d405      	bmi.n	801d47a <_fopen_r+0x5e>
 801d46e:	89a3      	ldrh	r3, [r4, #12]
 801d470:	0598      	lsls	r0, r3, #22
 801d472:	d402      	bmi.n	801d47a <_fopen_r+0x5e>
 801d474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d476:	f000 fb06 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d47a:	4b0e      	ldr	r3, [pc, #56]	; (801d4b4 <_fopen_r+0x98>)
 801d47c:	6263      	str	r3, [r4, #36]	; 0x24
 801d47e:	4b0e      	ldr	r3, [pc, #56]	; (801d4b8 <_fopen_r+0x9c>)
 801d480:	62a3      	str	r3, [r4, #40]	; 0x28
 801d482:	4b0e      	ldr	r3, [pc, #56]	; (801d4bc <_fopen_r+0xa0>)
 801d484:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d486:	05f1      	lsls	r1, r6, #23
 801d488:	4b0d      	ldr	r3, [pc, #52]	; (801d4c0 <_fopen_r+0xa4>)
 801d48a:	81e7      	strh	r7, [r4, #14]
 801d48c:	81a6      	strh	r6, [r4, #12]
 801d48e:	6224      	str	r4, [r4, #32]
 801d490:	6323      	str	r3, [r4, #48]	; 0x30
 801d492:	d505      	bpl.n	801d4a0 <_fopen_r+0x84>
 801d494:	2302      	movs	r3, #2
 801d496:	2200      	movs	r2, #0
 801d498:	4621      	mov	r1, r4
 801d49a:	4628      	mov	r0, r5
 801d49c:	f000 f888 	bl	801d5b0 <_fseek_r>
 801d4a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d4a2:	07da      	lsls	r2, r3, #31
 801d4a4:	d4c4      	bmi.n	801d430 <_fopen_r+0x14>
 801d4a6:	89a3      	ldrh	r3, [r4, #12]
 801d4a8:	059b      	lsls	r3, r3, #22
 801d4aa:	d4c1      	bmi.n	801d430 <_fopen_r+0x14>
 801d4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d4ae:	f000 faec 	bl	801da8a <__retarget_lock_release_recursive>
 801d4b2:	e7bd      	b.n	801d430 <_fopen_r+0x14>
 801d4b4:	0801def9 	.word	0x0801def9
 801d4b8:	0801df1f 	.word	0x0801df1f
 801d4bc:	0801df57 	.word	0x0801df57
 801d4c0:	0801df7b 	.word	0x0801df7b

0801d4c4 <fopen>:
 801d4c4:	4b02      	ldr	r3, [pc, #8]	; (801d4d0 <fopen+0xc>)
 801d4c6:	460a      	mov	r2, r1
 801d4c8:	4601      	mov	r1, r0
 801d4ca:	6818      	ldr	r0, [r3, #0]
 801d4cc:	f7ff bfa6 	b.w	801d41c <_fopen_r>
 801d4d0:	20000104 	.word	0x20000104

0801d4d4 <_fputs_r>:
 801d4d4:	b570      	push	{r4, r5, r6, lr}
 801d4d6:	460e      	mov	r6, r1
 801d4d8:	4614      	mov	r4, r2
 801d4da:	4605      	mov	r5, r0
 801d4dc:	b118      	cbz	r0, 801d4e6 <_fputs_r+0x12>
 801d4de:	6983      	ldr	r3, [r0, #24]
 801d4e0:	b90b      	cbnz	r3, 801d4e6 <_fputs_r+0x12>
 801d4e2:	f7ff ff1d 	bl	801d320 <__sinit>
 801d4e6:	4b2b      	ldr	r3, [pc, #172]	; (801d594 <_fputs_r+0xc0>)
 801d4e8:	429c      	cmp	r4, r3
 801d4ea:	d11e      	bne.n	801d52a <_fputs_r+0x56>
 801d4ec:	686c      	ldr	r4, [r5, #4]
 801d4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d4f0:	07da      	lsls	r2, r3, #31
 801d4f2:	d405      	bmi.n	801d500 <_fputs_r+0x2c>
 801d4f4:	89a3      	ldrh	r3, [r4, #12]
 801d4f6:	059b      	lsls	r3, r3, #22
 801d4f8:	d402      	bmi.n	801d500 <_fputs_r+0x2c>
 801d4fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d4fc:	f000 fac3 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d500:	89a3      	ldrh	r3, [r4, #12]
 801d502:	0718      	lsls	r0, r3, #28
 801d504:	d51b      	bpl.n	801d53e <_fputs_r+0x6a>
 801d506:	6923      	ldr	r3, [r4, #16]
 801d508:	b1cb      	cbz	r3, 801d53e <_fputs_r+0x6a>
 801d50a:	3e01      	subs	r6, #1
 801d50c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801d510:	bb39      	cbnz	r1, 801d562 <_fputs_r+0x8e>
 801d512:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801d514:	f015 0501 	ands.w	r5, r5, #1
 801d518:	d139      	bne.n	801d58e <_fputs_r+0xba>
 801d51a:	89a3      	ldrh	r3, [r4, #12]
 801d51c:	0599      	lsls	r1, r3, #22
 801d51e:	d402      	bmi.n	801d526 <_fputs_r+0x52>
 801d520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d522:	f000 fab2 	bl	801da8a <__retarget_lock_release_recursive>
 801d526:	4628      	mov	r0, r5
 801d528:	bd70      	pop	{r4, r5, r6, pc}
 801d52a:	4b1b      	ldr	r3, [pc, #108]	; (801d598 <_fputs_r+0xc4>)
 801d52c:	429c      	cmp	r4, r3
 801d52e:	d101      	bne.n	801d534 <_fputs_r+0x60>
 801d530:	68ac      	ldr	r4, [r5, #8]
 801d532:	e7dc      	b.n	801d4ee <_fputs_r+0x1a>
 801d534:	4b19      	ldr	r3, [pc, #100]	; (801d59c <_fputs_r+0xc8>)
 801d536:	429c      	cmp	r4, r3
 801d538:	bf08      	it	eq
 801d53a:	68ec      	ldreq	r4, [r5, #12]
 801d53c:	e7d7      	b.n	801d4ee <_fputs_r+0x1a>
 801d53e:	4621      	mov	r1, r4
 801d540:	4628      	mov	r0, r5
 801d542:	f001 fdef 	bl	801f124 <__swsetup_r>
 801d546:	2800      	cmp	r0, #0
 801d548:	d0df      	beq.n	801d50a <_fputs_r+0x36>
 801d54a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d54c:	07da      	lsls	r2, r3, #31
 801d54e:	d405      	bmi.n	801d55c <_fputs_r+0x88>
 801d550:	89a3      	ldrh	r3, [r4, #12]
 801d552:	059b      	lsls	r3, r3, #22
 801d554:	d402      	bmi.n	801d55c <_fputs_r+0x88>
 801d556:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d558:	f000 fa97 	bl	801da8a <__retarget_lock_release_recursive>
 801d55c:	f04f 35ff 	mov.w	r5, #4294967295
 801d560:	e7e1      	b.n	801d526 <_fputs_r+0x52>
 801d562:	68a3      	ldr	r3, [r4, #8]
 801d564:	3b01      	subs	r3, #1
 801d566:	2b00      	cmp	r3, #0
 801d568:	60a3      	str	r3, [r4, #8]
 801d56a:	da04      	bge.n	801d576 <_fputs_r+0xa2>
 801d56c:	69a2      	ldr	r2, [r4, #24]
 801d56e:	4293      	cmp	r3, r2
 801d570:	db06      	blt.n	801d580 <_fputs_r+0xac>
 801d572:	290a      	cmp	r1, #10
 801d574:	d004      	beq.n	801d580 <_fputs_r+0xac>
 801d576:	6823      	ldr	r3, [r4, #0]
 801d578:	1c5a      	adds	r2, r3, #1
 801d57a:	6022      	str	r2, [r4, #0]
 801d57c:	7019      	strb	r1, [r3, #0]
 801d57e:	e7c5      	b.n	801d50c <_fputs_r+0x38>
 801d580:	4622      	mov	r2, r4
 801d582:	4628      	mov	r0, r5
 801d584:	f001 fd6a 	bl	801f05c <__swbuf_r>
 801d588:	3001      	adds	r0, #1
 801d58a:	d1bf      	bne.n	801d50c <_fputs_r+0x38>
 801d58c:	e7dd      	b.n	801d54a <_fputs_r+0x76>
 801d58e:	460d      	mov	r5, r1
 801d590:	e7c9      	b.n	801d526 <_fputs_r+0x52>
 801d592:	bf00      	nop
 801d594:	08025730 	.word	0x08025730
 801d598:	08025750 	.word	0x08025750
 801d59c:	08025710 	.word	0x08025710

0801d5a0 <fputs>:
 801d5a0:	4b02      	ldr	r3, [pc, #8]	; (801d5ac <fputs+0xc>)
 801d5a2:	460a      	mov	r2, r1
 801d5a4:	4601      	mov	r1, r0
 801d5a6:	6818      	ldr	r0, [r3, #0]
 801d5a8:	f7ff bf94 	b.w	801d4d4 <_fputs_r>
 801d5ac:	20000104 	.word	0x20000104

0801d5b0 <_fseek_r>:
 801d5b0:	f000 b800 	b.w	801d5b4 <_fseeko_r>

0801d5b4 <_fseeko_r>:
 801d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5b8:	460c      	mov	r4, r1
 801d5ba:	4617      	mov	r7, r2
 801d5bc:	461e      	mov	r6, r3
 801d5be:	4605      	mov	r5, r0
 801d5c0:	b118      	cbz	r0, 801d5ca <_fseeko_r+0x16>
 801d5c2:	6983      	ldr	r3, [r0, #24]
 801d5c4:	b90b      	cbnz	r3, 801d5ca <_fseeko_r+0x16>
 801d5c6:	f7ff feab 	bl	801d320 <__sinit>
 801d5ca:	4b44      	ldr	r3, [pc, #272]	; (801d6dc <_fseeko_r+0x128>)
 801d5cc:	429c      	cmp	r4, r3
 801d5ce:	d122      	bne.n	801d616 <_fseeko_r+0x62>
 801d5d0:	686c      	ldr	r4, [r5, #4]
 801d5d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d5d4:	07d9      	lsls	r1, r3, #31
 801d5d6:	d405      	bmi.n	801d5e4 <_fseeko_r+0x30>
 801d5d8:	89a3      	ldrh	r3, [r4, #12]
 801d5da:	059a      	lsls	r2, r3, #22
 801d5dc:	d402      	bmi.n	801d5e4 <_fseeko_r+0x30>
 801d5de:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5e0:	f000 fa51 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d5e4:	89a3      	ldrh	r3, [r4, #12]
 801d5e6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 801d5ea:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 801d5ee:	d103      	bne.n	801d5f8 <_fseeko_r+0x44>
 801d5f0:	4621      	mov	r1, r4
 801d5f2:	4628      	mov	r0, r5
 801d5f4:	f7ff fdee 	bl	801d1d4 <_fflush_r>
 801d5f8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801d5fc:	f1b8 0f00 	cmp.w	r8, #0
 801d600:	d113      	bne.n	801d62a <_fseeko_r+0x76>
 801d602:	231d      	movs	r3, #29
 801d604:	602b      	str	r3, [r5, #0]
 801d606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d608:	07d9      	lsls	r1, r3, #31
 801d60a:	d55d      	bpl.n	801d6c8 <_fseeko_r+0x114>
 801d60c:	f04f 36ff 	mov.w	r6, #4294967295
 801d610:	4630      	mov	r0, r6
 801d612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d616:	4b32      	ldr	r3, [pc, #200]	; (801d6e0 <_fseeko_r+0x12c>)
 801d618:	429c      	cmp	r4, r3
 801d61a:	d101      	bne.n	801d620 <_fseeko_r+0x6c>
 801d61c:	68ac      	ldr	r4, [r5, #8]
 801d61e:	e7d8      	b.n	801d5d2 <_fseeko_r+0x1e>
 801d620:	4b30      	ldr	r3, [pc, #192]	; (801d6e4 <_fseeko_r+0x130>)
 801d622:	429c      	cmp	r4, r3
 801d624:	bf08      	it	eq
 801d626:	68ec      	ldreq	r4, [r5, #12]
 801d628:	e7d3      	b.n	801d5d2 <_fseeko_r+0x1e>
 801d62a:	2e01      	cmp	r6, #1
 801d62c:	d036      	beq.n	801d69c <_fseeko_r+0xe8>
 801d62e:	f036 0302 	bics.w	r3, r6, #2
 801d632:	d147      	bne.n	801d6c4 <_fseeko_r+0x110>
 801d634:	6923      	ldr	r3, [r4, #16]
 801d636:	b91b      	cbnz	r3, 801d640 <_fseeko_r+0x8c>
 801d638:	4621      	mov	r1, r4
 801d63a:	4628      	mov	r0, r5
 801d63c:	f000 fa4a 	bl	801dad4 <__smakebuf_r>
 801d640:	4621      	mov	r1, r4
 801d642:	4628      	mov	r0, r5
 801d644:	f7ff fdc6 	bl	801d1d4 <_fflush_r>
 801d648:	2800      	cmp	r0, #0
 801d64a:	d1dc      	bne.n	801d606 <_fseeko_r+0x52>
 801d64c:	6a21      	ldr	r1, [r4, #32]
 801d64e:	4633      	mov	r3, r6
 801d650:	463a      	mov	r2, r7
 801d652:	4628      	mov	r0, r5
 801d654:	47c0      	blx	r8
 801d656:	3001      	adds	r0, #1
 801d658:	d0d5      	beq.n	801d606 <_fseeko_r+0x52>
 801d65a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d65c:	b141      	cbz	r1, 801d670 <_fseeko_r+0xbc>
 801d65e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d662:	4299      	cmp	r1, r3
 801d664:	d002      	beq.n	801d66c <_fseeko_r+0xb8>
 801d666:	4628      	mov	r0, r5
 801d668:	f000 faaa 	bl	801dbc0 <_free_r>
 801d66c:	2300      	movs	r3, #0
 801d66e:	6363      	str	r3, [r4, #52]	; 0x34
 801d670:	6923      	ldr	r3, [r4, #16]
 801d672:	6023      	str	r3, [r4, #0]
 801d674:	89a3      	ldrh	r3, [r4, #12]
 801d676:	2500      	movs	r5, #0
 801d678:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 801d67c:	6065      	str	r5, [r4, #4]
 801d67e:	81a3      	strh	r3, [r4, #12]
 801d680:	2208      	movs	r2, #8
 801d682:	4629      	mov	r1, r5
 801d684:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d688:	f000 fa82 	bl	801db90 <memset>
 801d68c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801d68e:	f016 0601 	ands.w	r6, r6, #1
 801d692:	d120      	bne.n	801d6d6 <_fseeko_r+0x122>
 801d694:	89a3      	ldrh	r3, [r4, #12]
 801d696:	059b      	lsls	r3, r3, #22
 801d698:	d4ba      	bmi.n	801d610 <_fseeko_r+0x5c>
 801d69a:	e00c      	b.n	801d6b6 <_fseeko_r+0x102>
 801d69c:	4621      	mov	r1, r4
 801d69e:	4628      	mov	r0, r5
 801d6a0:	f000 f822 	bl	801d6e8 <_ftello_r>
 801d6a4:	1c43      	adds	r3, r0, #1
 801d6a6:	4606      	mov	r6, r0
 801d6a8:	d109      	bne.n	801d6be <_fseeko_r+0x10a>
 801d6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d6ac:	07dd      	lsls	r5, r3, #31
 801d6ae:	d4ad      	bmi.n	801d60c <_fseeko_r+0x58>
 801d6b0:	89a3      	ldrh	r3, [r4, #12]
 801d6b2:	0598      	lsls	r0, r3, #22
 801d6b4:	d4aa      	bmi.n	801d60c <_fseeko_r+0x58>
 801d6b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6b8:	f000 f9e7 	bl	801da8a <__retarget_lock_release_recursive>
 801d6bc:	e7a8      	b.n	801d610 <_fseeko_r+0x5c>
 801d6be:	4407      	add	r7, r0
 801d6c0:	2600      	movs	r6, #0
 801d6c2:	e7b7      	b.n	801d634 <_fseeko_r+0x80>
 801d6c4:	2316      	movs	r3, #22
 801d6c6:	e79d      	b.n	801d604 <_fseeko_r+0x50>
 801d6c8:	89a3      	ldrh	r3, [r4, #12]
 801d6ca:	059a      	lsls	r2, r3, #22
 801d6cc:	d49e      	bmi.n	801d60c <_fseeko_r+0x58>
 801d6ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d6d0:	f000 f9db 	bl	801da8a <__retarget_lock_release_recursive>
 801d6d4:	e79a      	b.n	801d60c <_fseeko_r+0x58>
 801d6d6:	462e      	mov	r6, r5
 801d6d8:	e79a      	b.n	801d610 <_fseeko_r+0x5c>
 801d6da:	bf00      	nop
 801d6dc:	08025730 	.word	0x08025730
 801d6e0:	08025750 	.word	0x08025750
 801d6e4:	08025710 	.word	0x08025710

0801d6e8 <_ftello_r>:
 801d6e8:	b570      	push	{r4, r5, r6, lr}
 801d6ea:	460c      	mov	r4, r1
 801d6ec:	4605      	mov	r5, r0
 801d6ee:	b118      	cbz	r0, 801d6f8 <_ftello_r+0x10>
 801d6f0:	6983      	ldr	r3, [r0, #24]
 801d6f2:	b90b      	cbnz	r3, 801d6f8 <_ftello_r+0x10>
 801d6f4:	f7ff fe14 	bl	801d320 <__sinit>
 801d6f8:	4b32      	ldr	r3, [pc, #200]	; (801d7c4 <_ftello_r+0xdc>)
 801d6fa:	429c      	cmp	r4, r3
 801d6fc:	d114      	bne.n	801d728 <_ftello_r+0x40>
 801d6fe:	686c      	ldr	r4, [r5, #4]
 801d700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d702:	07da      	lsls	r2, r3, #31
 801d704:	d405      	bmi.n	801d712 <_ftello_r+0x2a>
 801d706:	89a3      	ldrh	r3, [r4, #12]
 801d708:	059b      	lsls	r3, r3, #22
 801d70a:	d402      	bmi.n	801d712 <_ftello_r+0x2a>
 801d70c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d70e:	f000 f9ba 	bl	801da86 <__retarget_lock_acquire_recursive>
 801d712:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d714:	b9ce      	cbnz	r6, 801d74a <_ftello_r+0x62>
 801d716:	231d      	movs	r3, #29
 801d718:	602b      	str	r3, [r5, #0]
 801d71a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d71c:	07de      	lsls	r6, r3, #31
 801d71e:	d50d      	bpl.n	801d73c <_ftello_r+0x54>
 801d720:	f04f 35ff 	mov.w	r5, #4294967295
 801d724:	4628      	mov	r0, r5
 801d726:	bd70      	pop	{r4, r5, r6, pc}
 801d728:	4b27      	ldr	r3, [pc, #156]	; (801d7c8 <_ftello_r+0xe0>)
 801d72a:	429c      	cmp	r4, r3
 801d72c:	d101      	bne.n	801d732 <_ftello_r+0x4a>
 801d72e:	68ac      	ldr	r4, [r5, #8]
 801d730:	e7e6      	b.n	801d700 <_ftello_r+0x18>
 801d732:	4b26      	ldr	r3, [pc, #152]	; (801d7cc <_ftello_r+0xe4>)
 801d734:	429c      	cmp	r4, r3
 801d736:	bf08      	it	eq
 801d738:	68ec      	ldreq	r4, [r5, #12]
 801d73a:	e7e1      	b.n	801d700 <_ftello_r+0x18>
 801d73c:	89a3      	ldrh	r3, [r4, #12]
 801d73e:	059d      	lsls	r5, r3, #22
 801d740:	d4ee      	bmi.n	801d720 <_ftello_r+0x38>
 801d742:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d744:	f000 f9a1 	bl	801da8a <__retarget_lock_release_recursive>
 801d748:	e7ea      	b.n	801d720 <_ftello_r+0x38>
 801d74a:	89a2      	ldrh	r2, [r4, #12]
 801d74c:	f002 030c 	and.w	r3, r2, #12
 801d750:	2b08      	cmp	r3, #8
 801d752:	d119      	bne.n	801d788 <_ftello_r+0xa0>
 801d754:	6823      	ldr	r3, [r4, #0]
 801d756:	b1bb      	cbz	r3, 801d788 <_ftello_r+0xa0>
 801d758:	6921      	ldr	r1, [r4, #16]
 801d75a:	1a5b      	subs	r3, r3, r1
 801d75c:	2b00      	cmp	r3, #0
 801d75e:	dd13      	ble.n	801d788 <_ftello_r+0xa0>
 801d760:	05d0      	lsls	r0, r2, #23
 801d762:	d511      	bpl.n	801d788 <_ftello_r+0xa0>
 801d764:	2302      	movs	r3, #2
 801d766:	2200      	movs	r2, #0
 801d768:	6a21      	ldr	r1, [r4, #32]
 801d76a:	4628      	mov	r0, r5
 801d76c:	47b0      	blx	r6
 801d76e:	1c41      	adds	r1, r0, #1
 801d770:	4605      	mov	r5, r0
 801d772:	d10d      	bne.n	801d790 <_ftello_r+0xa8>
 801d774:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d776:	07da      	lsls	r2, r3, #31
 801d778:	d4d2      	bmi.n	801d720 <_ftello_r+0x38>
 801d77a:	89a3      	ldrh	r3, [r4, #12]
 801d77c:	059b      	lsls	r3, r3, #22
 801d77e:	d4cf      	bmi.n	801d720 <_ftello_r+0x38>
 801d780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d782:	f000 f982 	bl	801da8a <__retarget_lock_release_recursive>
 801d786:	e7cd      	b.n	801d724 <_ftello_r+0x3c>
 801d788:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d78c:	d00f      	beq.n	801d7ae <_ftello_r+0xc6>
 801d78e:	6d65      	ldr	r5, [r4, #84]	; 0x54
 801d790:	89a2      	ldrh	r2, [r4, #12]
 801d792:	0756      	lsls	r6, r2, #29
 801d794:	d50d      	bpl.n	801d7b2 <_ftello_r+0xca>
 801d796:	6863      	ldr	r3, [r4, #4]
 801d798:	1aed      	subs	r5, r5, r3
 801d79a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d79c:	b10b      	cbz	r3, 801d7a2 <_ftello_r+0xba>
 801d79e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d7a0:	1aed      	subs	r5, r5, r3
 801d7a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d7a4:	07d9      	lsls	r1, r3, #31
 801d7a6:	d4bd      	bmi.n	801d724 <_ftello_r+0x3c>
 801d7a8:	0593      	lsls	r3, r2, #22
 801d7aa:	d4bb      	bmi.n	801d724 <_ftello_r+0x3c>
 801d7ac:	e7e8      	b.n	801d780 <_ftello_r+0x98>
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	e7da      	b.n	801d768 <_ftello_r+0x80>
 801d7b2:	0710      	lsls	r0, r2, #28
 801d7b4:	d5f5      	bpl.n	801d7a2 <_ftello_r+0xba>
 801d7b6:	6823      	ldr	r3, [r4, #0]
 801d7b8:	2b00      	cmp	r3, #0
 801d7ba:	d0f2      	beq.n	801d7a2 <_ftello_r+0xba>
 801d7bc:	6921      	ldr	r1, [r4, #16]
 801d7be:	1a5b      	subs	r3, r3, r1
 801d7c0:	441d      	add	r5, r3
 801d7c2:	e7ee      	b.n	801d7a2 <_ftello_r+0xba>
 801d7c4:	08025730 	.word	0x08025730
 801d7c8:	08025750 	.word	0x08025750
 801d7cc:	08025710 	.word	0x08025710

0801d7d0 <_fwalk_reent>:
 801d7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7d4:	4606      	mov	r6, r0
 801d7d6:	4688      	mov	r8, r1
 801d7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d7dc:	2700      	movs	r7, #0
 801d7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d7e2:	f1b9 0901 	subs.w	r9, r9, #1
 801d7e6:	d505      	bpl.n	801d7f4 <_fwalk_reent+0x24>
 801d7e8:	6824      	ldr	r4, [r4, #0]
 801d7ea:	2c00      	cmp	r4, #0
 801d7ec:	d1f7      	bne.n	801d7de <_fwalk_reent+0xe>
 801d7ee:	4638      	mov	r0, r7
 801d7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7f4:	89ab      	ldrh	r3, [r5, #12]
 801d7f6:	2b01      	cmp	r3, #1
 801d7f8:	d907      	bls.n	801d80a <_fwalk_reent+0x3a>
 801d7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d7fe:	3301      	adds	r3, #1
 801d800:	d003      	beq.n	801d80a <_fwalk_reent+0x3a>
 801d802:	4629      	mov	r1, r5
 801d804:	4630      	mov	r0, r6
 801d806:	47c0      	blx	r8
 801d808:	4307      	orrs	r7, r0
 801d80a:	3568      	adds	r5, #104	; 0x68
 801d80c:	e7e9      	b.n	801d7e2 <_fwalk_reent+0x12>
	...

0801d810 <__libc_init_array>:
 801d810:	b570      	push	{r4, r5, r6, lr}
 801d812:	4d0d      	ldr	r5, [pc, #52]	; (801d848 <__libc_init_array+0x38>)
 801d814:	4c0d      	ldr	r4, [pc, #52]	; (801d84c <__libc_init_array+0x3c>)
 801d816:	1b64      	subs	r4, r4, r5
 801d818:	10a4      	asrs	r4, r4, #2
 801d81a:	2600      	movs	r6, #0
 801d81c:	42a6      	cmp	r6, r4
 801d81e:	d109      	bne.n	801d834 <__libc_init_array+0x24>
 801d820:	4d0b      	ldr	r5, [pc, #44]	; (801d850 <__libc_init_array+0x40>)
 801d822:	4c0c      	ldr	r4, [pc, #48]	; (801d854 <__libc_init_array+0x44>)
 801d824:	f003 f8ac 	bl	8020980 <_init>
 801d828:	1b64      	subs	r4, r4, r5
 801d82a:	10a4      	asrs	r4, r4, #2
 801d82c:	2600      	movs	r6, #0
 801d82e:	42a6      	cmp	r6, r4
 801d830:	d105      	bne.n	801d83e <__libc_init_array+0x2e>
 801d832:	bd70      	pop	{r4, r5, r6, pc}
 801d834:	f855 3b04 	ldr.w	r3, [r5], #4
 801d838:	4798      	blx	r3
 801d83a:	3601      	adds	r6, #1
 801d83c:	e7ee      	b.n	801d81c <__libc_init_array+0xc>
 801d83e:	f855 3b04 	ldr.w	r3, [r5], #4
 801d842:	4798      	blx	r3
 801d844:	3601      	adds	r6, #1
 801d846:	e7f2      	b.n	801d82e <__libc_init_array+0x1e>
 801d848:	08025d08 	.word	0x08025d08
 801d84c:	08025d08 	.word	0x08025d08
 801d850:	08025d08 	.word	0x08025d08
 801d854:	08025d18 	.word	0x08025d18

0801d858 <localtime>:
 801d858:	b538      	push	{r3, r4, r5, lr}
 801d85a:	4b0b      	ldr	r3, [pc, #44]	; (801d888 <localtime+0x30>)
 801d85c:	681d      	ldr	r5, [r3, #0]
 801d85e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 801d860:	4604      	mov	r4, r0
 801d862:	b953      	cbnz	r3, 801d87a <localtime+0x22>
 801d864:	2024      	movs	r0, #36	; 0x24
 801d866:	f000 f975 	bl	801db54 <malloc>
 801d86a:	4602      	mov	r2, r0
 801d86c:	63e8      	str	r0, [r5, #60]	; 0x3c
 801d86e:	b920      	cbnz	r0, 801d87a <localtime+0x22>
 801d870:	4b06      	ldr	r3, [pc, #24]	; (801d88c <localtime+0x34>)
 801d872:	4807      	ldr	r0, [pc, #28]	; (801d890 <localtime+0x38>)
 801d874:	2132      	movs	r1, #50	; 0x32
 801d876:	f001 fd29 	bl	801f2cc <__assert_func>
 801d87a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 801d87c:	4620      	mov	r0, r4
 801d87e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d882:	f000 b807 	b.w	801d894 <localtime_r>
 801d886:	bf00      	nop
 801d888:	20000104 	.word	0x20000104
 801d88c:	08025774 	.word	0x08025774
 801d890:	0802578b 	.word	0x0802578b

0801d894 <localtime_r>:
 801d894:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d898:	4607      	mov	r7, r0
 801d89a:	9101      	str	r1, [sp, #4]
 801d89c:	f001 fde0 	bl	801f460 <__gettzinfo>
 801d8a0:	9901      	ldr	r1, [sp, #4]
 801d8a2:	4680      	mov	r8, r0
 801d8a4:	4638      	mov	r0, r7
 801d8a6:	f001 fddf 	bl	801f468 <gmtime_r>
 801d8aa:	6943      	ldr	r3, [r0, #20]
 801d8ac:	079a      	lsls	r2, r3, #30
 801d8ae:	4604      	mov	r4, r0
 801d8b0:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 801d8b4:	d105      	bne.n	801d8c2 <localtime_r+0x2e>
 801d8b6:	2264      	movs	r2, #100	; 0x64
 801d8b8:	fb96 f3f2 	sdiv	r3, r6, r2
 801d8bc:	fb02 6313 	mls	r3, r2, r3, r6
 801d8c0:	bb7b      	cbnz	r3, 801d922 <localtime_r+0x8e>
 801d8c2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801d8c6:	fb96 f5f3 	sdiv	r5, r6, r3
 801d8ca:	fb03 6515 	mls	r5, r3, r5, r6
 801d8ce:	fab5 f585 	clz	r5, r5
 801d8d2:	096d      	lsrs	r5, r5, #5
 801d8d4:	4b68      	ldr	r3, [pc, #416]	; (801da78 <localtime_r+0x1e4>)
 801d8d6:	2230      	movs	r2, #48	; 0x30
 801d8d8:	fb02 3505 	mla	r5, r2, r5, r3
 801d8dc:	f001 f9f6 	bl	801eccc <__tz_lock>
 801d8e0:	f001 fa00 	bl	801ece4 <_tzset_unlocked>
 801d8e4:	4b65      	ldr	r3, [pc, #404]	; (801da7c <localtime_r+0x1e8>)
 801d8e6:	681b      	ldr	r3, [r3, #0]
 801d8e8:	b353      	cbz	r3, 801d940 <localtime_r+0xac>
 801d8ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d8ee:	42b3      	cmp	r3, r6
 801d8f0:	d119      	bne.n	801d926 <localtime_r+0x92>
 801d8f2:	f8d8 1000 	ldr.w	r1, [r8]
 801d8f6:	e9d7 6700 	ldrd	r6, r7, [r7]
 801d8fa:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 801d8fe:	b9d1      	cbnz	r1, 801d936 <localtime_r+0xa2>
 801d900:	4296      	cmp	r6, r2
 801d902:	eb77 0303 	sbcs.w	r3, r7, r3
 801d906:	da23      	bge.n	801d950 <localtime_r+0xbc>
 801d908:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d90c:	4296      	cmp	r6, r2
 801d90e:	eb77 0303 	sbcs.w	r3, r7, r3
 801d912:	bfb4      	ite	lt
 801d914:	2301      	movlt	r3, #1
 801d916:	2300      	movge	r3, #0
 801d918:	6223      	str	r3, [r4, #32]
 801d91a:	db1b      	blt.n	801d954 <localtime_r+0xc0>
 801d91c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 801d920:	e01a      	b.n	801d958 <localtime_r+0xc4>
 801d922:	2501      	movs	r5, #1
 801d924:	e7d6      	b.n	801d8d4 <localtime_r+0x40>
 801d926:	4630      	mov	r0, r6
 801d928:	f001 f928 	bl	801eb7c <__tzcalc_limits>
 801d92c:	2800      	cmp	r0, #0
 801d92e:	d1e0      	bne.n	801d8f2 <localtime_r+0x5e>
 801d930:	f04f 33ff 	mov.w	r3, #4294967295
 801d934:	e004      	b.n	801d940 <localtime_r+0xac>
 801d936:	4296      	cmp	r6, r2
 801d938:	eb77 0303 	sbcs.w	r3, r7, r3
 801d93c:	da02      	bge.n	801d944 <localtime_r+0xb0>
 801d93e:	2300      	movs	r3, #0
 801d940:	6223      	str	r3, [r4, #32]
 801d942:	e7eb      	b.n	801d91c <localtime_r+0x88>
 801d944:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801d948:	4296      	cmp	r6, r2
 801d94a:	eb77 0303 	sbcs.w	r3, r7, r3
 801d94e:	daf6      	bge.n	801d93e <localtime_r+0xaa>
 801d950:	2301      	movs	r3, #1
 801d952:	6223      	str	r3, [r4, #32]
 801d954:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801d958:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801d95c:	203c      	movs	r0, #60	; 0x3c
 801d95e:	fb91 f6f3 	sdiv	r6, r1, r3
 801d962:	fb03 1316 	mls	r3, r3, r6, r1
 801d966:	6861      	ldr	r1, [r4, #4]
 801d968:	fb93 f2f0 	sdiv	r2, r3, r0
 801d96c:	fb00 3012 	mls	r0, r0, r2, r3
 801d970:	6823      	ldr	r3, [r4, #0]
 801d972:	1a89      	subs	r1, r1, r2
 801d974:	68a2      	ldr	r2, [r4, #8]
 801d976:	6061      	str	r1, [r4, #4]
 801d978:	1a1b      	subs	r3, r3, r0
 801d97a:	1b92      	subs	r2, r2, r6
 801d97c:	2b3b      	cmp	r3, #59	; 0x3b
 801d97e:	6023      	str	r3, [r4, #0]
 801d980:	60a2      	str	r2, [r4, #8]
 801d982:	dd35      	ble.n	801d9f0 <localtime_r+0x15c>
 801d984:	3101      	adds	r1, #1
 801d986:	6061      	str	r1, [r4, #4]
 801d988:	3b3c      	subs	r3, #60	; 0x3c
 801d98a:	6023      	str	r3, [r4, #0]
 801d98c:	6863      	ldr	r3, [r4, #4]
 801d98e:	2b3b      	cmp	r3, #59	; 0x3b
 801d990:	dd34      	ble.n	801d9fc <localtime_r+0x168>
 801d992:	3201      	adds	r2, #1
 801d994:	60a2      	str	r2, [r4, #8]
 801d996:	3b3c      	subs	r3, #60	; 0x3c
 801d998:	6063      	str	r3, [r4, #4]
 801d99a:	68a3      	ldr	r3, [r4, #8]
 801d99c:	2b17      	cmp	r3, #23
 801d99e:	dd33      	ble.n	801da08 <localtime_r+0x174>
 801d9a0:	69e2      	ldr	r2, [r4, #28]
 801d9a2:	3201      	adds	r2, #1
 801d9a4:	61e2      	str	r2, [r4, #28]
 801d9a6:	69a2      	ldr	r2, [r4, #24]
 801d9a8:	3201      	adds	r2, #1
 801d9aa:	2a06      	cmp	r2, #6
 801d9ac:	bfc8      	it	gt
 801d9ae:	2200      	movgt	r2, #0
 801d9b0:	61a2      	str	r2, [r4, #24]
 801d9b2:	68e2      	ldr	r2, [r4, #12]
 801d9b4:	3b18      	subs	r3, #24
 801d9b6:	3201      	adds	r2, #1
 801d9b8:	60a3      	str	r3, [r4, #8]
 801d9ba:	6923      	ldr	r3, [r4, #16]
 801d9bc:	60e2      	str	r2, [r4, #12]
 801d9be:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 801d9c2:	428a      	cmp	r2, r1
 801d9c4:	dd0e      	ble.n	801d9e4 <localtime_r+0x150>
 801d9c6:	2b0b      	cmp	r3, #11
 801d9c8:	eba2 0201 	sub.w	r2, r2, r1
 801d9cc:	60e2      	str	r2, [r4, #12]
 801d9ce:	f103 0201 	add.w	r2, r3, #1
 801d9d2:	bf09      	itett	eq
 801d9d4:	6963      	ldreq	r3, [r4, #20]
 801d9d6:	6122      	strne	r2, [r4, #16]
 801d9d8:	2200      	moveq	r2, #0
 801d9da:	3301      	addeq	r3, #1
 801d9dc:	bf02      	ittt	eq
 801d9de:	6122      	streq	r2, [r4, #16]
 801d9e0:	6163      	streq	r3, [r4, #20]
 801d9e2:	61e2      	streq	r2, [r4, #28]
 801d9e4:	f001 f978 	bl	801ecd8 <__tz_unlock>
 801d9e8:	4620      	mov	r0, r4
 801d9ea:	b002      	add	sp, #8
 801d9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	dacb      	bge.n	801d98c <localtime_r+0xf8>
 801d9f4:	3901      	subs	r1, #1
 801d9f6:	6061      	str	r1, [r4, #4]
 801d9f8:	333c      	adds	r3, #60	; 0x3c
 801d9fa:	e7c6      	b.n	801d98a <localtime_r+0xf6>
 801d9fc:	2b00      	cmp	r3, #0
 801d9fe:	dacc      	bge.n	801d99a <localtime_r+0x106>
 801da00:	3a01      	subs	r2, #1
 801da02:	60a2      	str	r2, [r4, #8]
 801da04:	333c      	adds	r3, #60	; 0x3c
 801da06:	e7c7      	b.n	801d998 <localtime_r+0x104>
 801da08:	2b00      	cmp	r3, #0
 801da0a:	daeb      	bge.n	801d9e4 <localtime_r+0x150>
 801da0c:	69e2      	ldr	r2, [r4, #28]
 801da0e:	3a01      	subs	r2, #1
 801da10:	61e2      	str	r2, [r4, #28]
 801da12:	69a2      	ldr	r2, [r4, #24]
 801da14:	3a01      	subs	r2, #1
 801da16:	bf48      	it	mi
 801da18:	2206      	movmi	r2, #6
 801da1a:	61a2      	str	r2, [r4, #24]
 801da1c:	68e2      	ldr	r2, [r4, #12]
 801da1e:	3318      	adds	r3, #24
 801da20:	3a01      	subs	r2, #1
 801da22:	60e2      	str	r2, [r4, #12]
 801da24:	60a3      	str	r3, [r4, #8]
 801da26:	2a00      	cmp	r2, #0
 801da28:	d1dc      	bne.n	801d9e4 <localtime_r+0x150>
 801da2a:	6923      	ldr	r3, [r4, #16]
 801da2c:	3b01      	subs	r3, #1
 801da2e:	d405      	bmi.n	801da3c <localtime_r+0x1a8>
 801da30:	6123      	str	r3, [r4, #16]
 801da32:	6923      	ldr	r3, [r4, #16]
 801da34:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801da38:	60e3      	str	r3, [r4, #12]
 801da3a:	e7d3      	b.n	801d9e4 <localtime_r+0x150>
 801da3c:	230b      	movs	r3, #11
 801da3e:	6123      	str	r3, [r4, #16]
 801da40:	6963      	ldr	r3, [r4, #20]
 801da42:	1e5a      	subs	r2, r3, #1
 801da44:	6162      	str	r2, [r4, #20]
 801da46:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801da4a:	0793      	lsls	r3, r2, #30
 801da4c:	d105      	bne.n	801da5a <localtime_r+0x1c6>
 801da4e:	2164      	movs	r1, #100	; 0x64
 801da50:	fb92 f3f1 	sdiv	r3, r2, r1
 801da54:	fb01 2313 	mls	r3, r1, r3, r2
 801da58:	b963      	cbnz	r3, 801da74 <localtime_r+0x1e0>
 801da5a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801da5e:	fb92 f3f1 	sdiv	r3, r2, r1
 801da62:	fb01 2313 	mls	r3, r1, r3, r2
 801da66:	fab3 f383 	clz	r3, r3
 801da6a:	095b      	lsrs	r3, r3, #5
 801da6c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801da70:	61e3      	str	r3, [r4, #28]
 801da72:	e7de      	b.n	801da32 <localtime_r+0x19e>
 801da74:	2301      	movs	r3, #1
 801da76:	e7f9      	b.n	801da6c <localtime_r+0x1d8>
 801da78:	080257ec 	.word	0x080257ec
 801da7c:	20000cfc 	.word	0x20000cfc

0801da80 <__retarget_lock_init_recursive>:
 801da80:	4770      	bx	lr

0801da82 <__retarget_lock_close_recursive>:
 801da82:	4770      	bx	lr

0801da84 <__retarget_lock_acquire>:
 801da84:	4770      	bx	lr

0801da86 <__retarget_lock_acquire_recursive>:
 801da86:	4770      	bx	lr

0801da88 <__retarget_lock_release>:
 801da88:	4770      	bx	lr

0801da8a <__retarget_lock_release_recursive>:
 801da8a:	4770      	bx	lr

0801da8c <__swhatbuf_r>:
 801da8c:	b570      	push	{r4, r5, r6, lr}
 801da8e:	460e      	mov	r6, r1
 801da90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da94:	2900      	cmp	r1, #0
 801da96:	b096      	sub	sp, #88	; 0x58
 801da98:	4614      	mov	r4, r2
 801da9a:	461d      	mov	r5, r3
 801da9c:	da07      	bge.n	801daae <__swhatbuf_r+0x22>
 801da9e:	2300      	movs	r3, #0
 801daa0:	602b      	str	r3, [r5, #0]
 801daa2:	89b3      	ldrh	r3, [r6, #12]
 801daa4:	061a      	lsls	r2, r3, #24
 801daa6:	d410      	bmi.n	801daca <__swhatbuf_r+0x3e>
 801daa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801daac:	e00e      	b.n	801dacc <__swhatbuf_r+0x40>
 801daae:	466a      	mov	r2, sp
 801dab0:	f001 fc82 	bl	801f3b8 <_fstat_r>
 801dab4:	2800      	cmp	r0, #0
 801dab6:	dbf2      	blt.n	801da9e <__swhatbuf_r+0x12>
 801dab8:	9a01      	ldr	r2, [sp, #4]
 801daba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dabe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dac2:	425a      	negs	r2, r3
 801dac4:	415a      	adcs	r2, r3
 801dac6:	602a      	str	r2, [r5, #0]
 801dac8:	e7ee      	b.n	801daa8 <__swhatbuf_r+0x1c>
 801daca:	2340      	movs	r3, #64	; 0x40
 801dacc:	2000      	movs	r0, #0
 801dace:	6023      	str	r3, [r4, #0]
 801dad0:	b016      	add	sp, #88	; 0x58
 801dad2:	bd70      	pop	{r4, r5, r6, pc}

0801dad4 <__smakebuf_r>:
 801dad4:	898b      	ldrh	r3, [r1, #12]
 801dad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dad8:	079d      	lsls	r5, r3, #30
 801dada:	4606      	mov	r6, r0
 801dadc:	460c      	mov	r4, r1
 801dade:	d507      	bpl.n	801daf0 <__smakebuf_r+0x1c>
 801dae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dae4:	6023      	str	r3, [r4, #0]
 801dae6:	6123      	str	r3, [r4, #16]
 801dae8:	2301      	movs	r3, #1
 801daea:	6163      	str	r3, [r4, #20]
 801daec:	b002      	add	sp, #8
 801daee:	bd70      	pop	{r4, r5, r6, pc}
 801daf0:	ab01      	add	r3, sp, #4
 801daf2:	466a      	mov	r2, sp
 801daf4:	f7ff ffca 	bl	801da8c <__swhatbuf_r>
 801daf8:	9900      	ldr	r1, [sp, #0]
 801dafa:	4605      	mov	r5, r0
 801dafc:	4630      	mov	r0, r6
 801dafe:	f000 f8af 	bl	801dc60 <_malloc_r>
 801db02:	b948      	cbnz	r0, 801db18 <__smakebuf_r+0x44>
 801db04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801db08:	059a      	lsls	r2, r3, #22
 801db0a:	d4ef      	bmi.n	801daec <__smakebuf_r+0x18>
 801db0c:	f023 0303 	bic.w	r3, r3, #3
 801db10:	f043 0302 	orr.w	r3, r3, #2
 801db14:	81a3      	strh	r3, [r4, #12]
 801db16:	e7e3      	b.n	801dae0 <__smakebuf_r+0xc>
 801db18:	4b0d      	ldr	r3, [pc, #52]	; (801db50 <__smakebuf_r+0x7c>)
 801db1a:	62b3      	str	r3, [r6, #40]	; 0x28
 801db1c:	89a3      	ldrh	r3, [r4, #12]
 801db1e:	6020      	str	r0, [r4, #0]
 801db20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db24:	81a3      	strh	r3, [r4, #12]
 801db26:	9b00      	ldr	r3, [sp, #0]
 801db28:	6163      	str	r3, [r4, #20]
 801db2a:	9b01      	ldr	r3, [sp, #4]
 801db2c:	6120      	str	r0, [r4, #16]
 801db2e:	b15b      	cbz	r3, 801db48 <__smakebuf_r+0x74>
 801db30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801db34:	4630      	mov	r0, r6
 801db36:	f001 fd47 	bl	801f5c8 <_isatty_r>
 801db3a:	b128      	cbz	r0, 801db48 <__smakebuf_r+0x74>
 801db3c:	89a3      	ldrh	r3, [r4, #12]
 801db3e:	f023 0303 	bic.w	r3, r3, #3
 801db42:	f043 0301 	orr.w	r3, r3, #1
 801db46:	81a3      	strh	r3, [r4, #12]
 801db48:	89a0      	ldrh	r0, [r4, #12]
 801db4a:	4305      	orrs	r5, r0
 801db4c:	81a5      	strh	r5, [r4, #12]
 801db4e:	e7cd      	b.n	801daec <__smakebuf_r+0x18>
 801db50:	0801d2b9 	.word	0x0801d2b9

0801db54 <malloc>:
 801db54:	4b02      	ldr	r3, [pc, #8]	; (801db60 <malloc+0xc>)
 801db56:	4601      	mov	r1, r0
 801db58:	6818      	ldr	r0, [r3, #0]
 801db5a:	f000 b881 	b.w	801dc60 <_malloc_r>
 801db5e:	bf00      	nop
 801db60:	20000104 	.word	0x20000104

0801db64 <free>:
 801db64:	4b02      	ldr	r3, [pc, #8]	; (801db70 <free+0xc>)
 801db66:	4601      	mov	r1, r0
 801db68:	6818      	ldr	r0, [r3, #0]
 801db6a:	f000 b829 	b.w	801dbc0 <_free_r>
 801db6e:	bf00      	nop
 801db70:	20000104 	.word	0x20000104

0801db74 <memcpy>:
 801db74:	440a      	add	r2, r1
 801db76:	4291      	cmp	r1, r2
 801db78:	f100 33ff 	add.w	r3, r0, #4294967295
 801db7c:	d100      	bne.n	801db80 <memcpy+0xc>
 801db7e:	4770      	bx	lr
 801db80:	b510      	push	{r4, lr}
 801db82:	f811 4b01 	ldrb.w	r4, [r1], #1
 801db86:	f803 4f01 	strb.w	r4, [r3, #1]!
 801db8a:	4291      	cmp	r1, r2
 801db8c:	d1f9      	bne.n	801db82 <memcpy+0xe>
 801db8e:	bd10      	pop	{r4, pc}

0801db90 <memset>:
 801db90:	4402      	add	r2, r0
 801db92:	4603      	mov	r3, r0
 801db94:	4293      	cmp	r3, r2
 801db96:	d100      	bne.n	801db9a <memset+0xa>
 801db98:	4770      	bx	lr
 801db9a:	f803 1b01 	strb.w	r1, [r3], #1
 801db9e:	e7f9      	b.n	801db94 <memset+0x4>

0801dba0 <_calloc_r>:
 801dba0:	b513      	push	{r0, r1, r4, lr}
 801dba2:	434a      	muls	r2, r1
 801dba4:	4611      	mov	r1, r2
 801dba6:	9201      	str	r2, [sp, #4]
 801dba8:	f000 f85a 	bl	801dc60 <_malloc_r>
 801dbac:	4604      	mov	r4, r0
 801dbae:	b118      	cbz	r0, 801dbb8 <_calloc_r+0x18>
 801dbb0:	9a01      	ldr	r2, [sp, #4]
 801dbb2:	2100      	movs	r1, #0
 801dbb4:	f7ff ffec 	bl	801db90 <memset>
 801dbb8:	4620      	mov	r0, r4
 801dbba:	b002      	add	sp, #8
 801dbbc:	bd10      	pop	{r4, pc}
	...

0801dbc0 <_free_r>:
 801dbc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dbc2:	2900      	cmp	r1, #0
 801dbc4:	d048      	beq.n	801dc58 <_free_r+0x98>
 801dbc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801dbca:	9001      	str	r0, [sp, #4]
 801dbcc:	2b00      	cmp	r3, #0
 801dbce:	f1a1 0404 	sub.w	r4, r1, #4
 801dbd2:	bfb8      	it	lt
 801dbd4:	18e4      	addlt	r4, r4, r3
 801dbd6:	f001 fd2f 	bl	801f638 <__malloc_lock>
 801dbda:	4a20      	ldr	r2, [pc, #128]	; (801dc5c <_free_r+0x9c>)
 801dbdc:	9801      	ldr	r0, [sp, #4]
 801dbde:	6813      	ldr	r3, [r2, #0]
 801dbe0:	4615      	mov	r5, r2
 801dbe2:	b933      	cbnz	r3, 801dbf2 <_free_r+0x32>
 801dbe4:	6063      	str	r3, [r4, #4]
 801dbe6:	6014      	str	r4, [r2, #0]
 801dbe8:	b003      	add	sp, #12
 801dbea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dbee:	f001 bd29 	b.w	801f644 <__malloc_unlock>
 801dbf2:	42a3      	cmp	r3, r4
 801dbf4:	d90b      	bls.n	801dc0e <_free_r+0x4e>
 801dbf6:	6821      	ldr	r1, [r4, #0]
 801dbf8:	1862      	adds	r2, r4, r1
 801dbfa:	4293      	cmp	r3, r2
 801dbfc:	bf04      	itt	eq
 801dbfe:	681a      	ldreq	r2, [r3, #0]
 801dc00:	685b      	ldreq	r3, [r3, #4]
 801dc02:	6063      	str	r3, [r4, #4]
 801dc04:	bf04      	itt	eq
 801dc06:	1852      	addeq	r2, r2, r1
 801dc08:	6022      	streq	r2, [r4, #0]
 801dc0a:	602c      	str	r4, [r5, #0]
 801dc0c:	e7ec      	b.n	801dbe8 <_free_r+0x28>
 801dc0e:	461a      	mov	r2, r3
 801dc10:	685b      	ldr	r3, [r3, #4]
 801dc12:	b10b      	cbz	r3, 801dc18 <_free_r+0x58>
 801dc14:	42a3      	cmp	r3, r4
 801dc16:	d9fa      	bls.n	801dc0e <_free_r+0x4e>
 801dc18:	6811      	ldr	r1, [r2, #0]
 801dc1a:	1855      	adds	r5, r2, r1
 801dc1c:	42a5      	cmp	r5, r4
 801dc1e:	d10b      	bne.n	801dc38 <_free_r+0x78>
 801dc20:	6824      	ldr	r4, [r4, #0]
 801dc22:	4421      	add	r1, r4
 801dc24:	1854      	adds	r4, r2, r1
 801dc26:	42a3      	cmp	r3, r4
 801dc28:	6011      	str	r1, [r2, #0]
 801dc2a:	d1dd      	bne.n	801dbe8 <_free_r+0x28>
 801dc2c:	681c      	ldr	r4, [r3, #0]
 801dc2e:	685b      	ldr	r3, [r3, #4]
 801dc30:	6053      	str	r3, [r2, #4]
 801dc32:	4421      	add	r1, r4
 801dc34:	6011      	str	r1, [r2, #0]
 801dc36:	e7d7      	b.n	801dbe8 <_free_r+0x28>
 801dc38:	d902      	bls.n	801dc40 <_free_r+0x80>
 801dc3a:	230c      	movs	r3, #12
 801dc3c:	6003      	str	r3, [r0, #0]
 801dc3e:	e7d3      	b.n	801dbe8 <_free_r+0x28>
 801dc40:	6825      	ldr	r5, [r4, #0]
 801dc42:	1961      	adds	r1, r4, r5
 801dc44:	428b      	cmp	r3, r1
 801dc46:	bf04      	itt	eq
 801dc48:	6819      	ldreq	r1, [r3, #0]
 801dc4a:	685b      	ldreq	r3, [r3, #4]
 801dc4c:	6063      	str	r3, [r4, #4]
 801dc4e:	bf04      	itt	eq
 801dc50:	1949      	addeq	r1, r1, r5
 801dc52:	6021      	streq	r1, [r4, #0]
 801dc54:	6054      	str	r4, [r2, #4]
 801dc56:	e7c7      	b.n	801dbe8 <_free_r+0x28>
 801dc58:	b003      	add	sp, #12
 801dc5a:	bd30      	pop	{r4, r5, pc}
 801dc5c:	20000cd8 	.word	0x20000cd8

0801dc60 <_malloc_r>:
 801dc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc62:	1ccd      	adds	r5, r1, #3
 801dc64:	f025 0503 	bic.w	r5, r5, #3
 801dc68:	3508      	adds	r5, #8
 801dc6a:	2d0c      	cmp	r5, #12
 801dc6c:	bf38      	it	cc
 801dc6e:	250c      	movcc	r5, #12
 801dc70:	2d00      	cmp	r5, #0
 801dc72:	4606      	mov	r6, r0
 801dc74:	db01      	blt.n	801dc7a <_malloc_r+0x1a>
 801dc76:	42a9      	cmp	r1, r5
 801dc78:	d903      	bls.n	801dc82 <_malloc_r+0x22>
 801dc7a:	230c      	movs	r3, #12
 801dc7c:	6033      	str	r3, [r6, #0]
 801dc7e:	2000      	movs	r0, #0
 801dc80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc82:	f001 fcd9 	bl	801f638 <__malloc_lock>
 801dc86:	4921      	ldr	r1, [pc, #132]	; (801dd0c <_malloc_r+0xac>)
 801dc88:	680a      	ldr	r2, [r1, #0]
 801dc8a:	4614      	mov	r4, r2
 801dc8c:	b99c      	cbnz	r4, 801dcb6 <_malloc_r+0x56>
 801dc8e:	4f20      	ldr	r7, [pc, #128]	; (801dd10 <_malloc_r+0xb0>)
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	b923      	cbnz	r3, 801dc9e <_malloc_r+0x3e>
 801dc94:	4621      	mov	r1, r4
 801dc96:	4630      	mov	r0, r6
 801dc98:	f000 f8da 	bl	801de50 <_sbrk_r>
 801dc9c:	6038      	str	r0, [r7, #0]
 801dc9e:	4629      	mov	r1, r5
 801dca0:	4630      	mov	r0, r6
 801dca2:	f000 f8d5 	bl	801de50 <_sbrk_r>
 801dca6:	1c43      	adds	r3, r0, #1
 801dca8:	d123      	bne.n	801dcf2 <_malloc_r+0x92>
 801dcaa:	230c      	movs	r3, #12
 801dcac:	6033      	str	r3, [r6, #0]
 801dcae:	4630      	mov	r0, r6
 801dcb0:	f001 fcc8 	bl	801f644 <__malloc_unlock>
 801dcb4:	e7e3      	b.n	801dc7e <_malloc_r+0x1e>
 801dcb6:	6823      	ldr	r3, [r4, #0]
 801dcb8:	1b5b      	subs	r3, r3, r5
 801dcba:	d417      	bmi.n	801dcec <_malloc_r+0x8c>
 801dcbc:	2b0b      	cmp	r3, #11
 801dcbe:	d903      	bls.n	801dcc8 <_malloc_r+0x68>
 801dcc0:	6023      	str	r3, [r4, #0]
 801dcc2:	441c      	add	r4, r3
 801dcc4:	6025      	str	r5, [r4, #0]
 801dcc6:	e004      	b.n	801dcd2 <_malloc_r+0x72>
 801dcc8:	6863      	ldr	r3, [r4, #4]
 801dcca:	42a2      	cmp	r2, r4
 801dccc:	bf0c      	ite	eq
 801dcce:	600b      	streq	r3, [r1, #0]
 801dcd0:	6053      	strne	r3, [r2, #4]
 801dcd2:	4630      	mov	r0, r6
 801dcd4:	f001 fcb6 	bl	801f644 <__malloc_unlock>
 801dcd8:	f104 000b 	add.w	r0, r4, #11
 801dcdc:	1d23      	adds	r3, r4, #4
 801dcde:	f020 0007 	bic.w	r0, r0, #7
 801dce2:	1ac2      	subs	r2, r0, r3
 801dce4:	d0cc      	beq.n	801dc80 <_malloc_r+0x20>
 801dce6:	1a1b      	subs	r3, r3, r0
 801dce8:	50a3      	str	r3, [r4, r2]
 801dcea:	e7c9      	b.n	801dc80 <_malloc_r+0x20>
 801dcec:	4622      	mov	r2, r4
 801dcee:	6864      	ldr	r4, [r4, #4]
 801dcf0:	e7cc      	b.n	801dc8c <_malloc_r+0x2c>
 801dcf2:	1cc4      	adds	r4, r0, #3
 801dcf4:	f024 0403 	bic.w	r4, r4, #3
 801dcf8:	42a0      	cmp	r0, r4
 801dcfa:	d0e3      	beq.n	801dcc4 <_malloc_r+0x64>
 801dcfc:	1a21      	subs	r1, r4, r0
 801dcfe:	4630      	mov	r0, r6
 801dd00:	f000 f8a6 	bl	801de50 <_sbrk_r>
 801dd04:	3001      	adds	r0, #1
 801dd06:	d1dd      	bne.n	801dcc4 <_malloc_r+0x64>
 801dd08:	e7cf      	b.n	801dcaa <_malloc_r+0x4a>
 801dd0a:	bf00      	nop
 801dd0c:	20000cd8 	.word	0x20000cd8
 801dd10:	20000cdc 	.word	0x20000cdc

0801dd14 <_open_r>:
 801dd14:	b538      	push	{r3, r4, r5, lr}
 801dd16:	4d07      	ldr	r5, [pc, #28]	; (801dd34 <_open_r+0x20>)
 801dd18:	4604      	mov	r4, r0
 801dd1a:	4608      	mov	r0, r1
 801dd1c:	4611      	mov	r1, r2
 801dd1e:	2200      	movs	r2, #0
 801dd20:	602a      	str	r2, [r5, #0]
 801dd22:	461a      	mov	r2, r3
 801dd24:	f7e3 f8a4 	bl	8000e70 <_open>
 801dd28:	1c43      	adds	r3, r0, #1
 801dd2a:	d102      	bne.n	801dd32 <_open_r+0x1e>
 801dd2c:	682b      	ldr	r3, [r5, #0]
 801dd2e:	b103      	cbz	r3, 801dd32 <_open_r+0x1e>
 801dd30:	6023      	str	r3, [r4, #0]
 801dd32:	bd38      	pop	{r3, r4, r5, pc}
 801dd34:	20000da4 	.word	0x20000da4

0801dd38 <putchar>:
 801dd38:	4b09      	ldr	r3, [pc, #36]	; (801dd60 <putchar+0x28>)
 801dd3a:	b513      	push	{r0, r1, r4, lr}
 801dd3c:	681c      	ldr	r4, [r3, #0]
 801dd3e:	4601      	mov	r1, r0
 801dd40:	b134      	cbz	r4, 801dd50 <putchar+0x18>
 801dd42:	69a3      	ldr	r3, [r4, #24]
 801dd44:	b923      	cbnz	r3, 801dd50 <putchar+0x18>
 801dd46:	9001      	str	r0, [sp, #4]
 801dd48:	4620      	mov	r0, r4
 801dd4a:	f7ff fae9 	bl	801d320 <__sinit>
 801dd4e:	9901      	ldr	r1, [sp, #4]
 801dd50:	68a2      	ldr	r2, [r4, #8]
 801dd52:	4620      	mov	r0, r4
 801dd54:	b002      	add	sp, #8
 801dd56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd5a:	f002 b8e9 	b.w	801ff30 <_putc_r>
 801dd5e:	bf00      	nop
 801dd60:	20000104 	.word	0x20000104

0801dd64 <srand>:
 801dd64:	b538      	push	{r3, r4, r5, lr}
 801dd66:	4b10      	ldr	r3, [pc, #64]	; (801dda8 <srand+0x44>)
 801dd68:	681d      	ldr	r5, [r3, #0]
 801dd6a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801dd6c:	4604      	mov	r4, r0
 801dd6e:	b9b3      	cbnz	r3, 801dd9e <srand+0x3a>
 801dd70:	2018      	movs	r0, #24
 801dd72:	f7ff feef 	bl	801db54 <malloc>
 801dd76:	4602      	mov	r2, r0
 801dd78:	63a8      	str	r0, [r5, #56]	; 0x38
 801dd7a:	b920      	cbnz	r0, 801dd86 <srand+0x22>
 801dd7c:	4b0b      	ldr	r3, [pc, #44]	; (801ddac <srand+0x48>)
 801dd7e:	480c      	ldr	r0, [pc, #48]	; (801ddb0 <srand+0x4c>)
 801dd80:	2142      	movs	r1, #66	; 0x42
 801dd82:	f001 faa3 	bl	801f2cc <__assert_func>
 801dd86:	490b      	ldr	r1, [pc, #44]	; (801ddb4 <srand+0x50>)
 801dd88:	4b0b      	ldr	r3, [pc, #44]	; (801ddb8 <srand+0x54>)
 801dd8a:	e9c0 1300 	strd	r1, r3, [r0]
 801dd8e:	4b0b      	ldr	r3, [pc, #44]	; (801ddbc <srand+0x58>)
 801dd90:	6083      	str	r3, [r0, #8]
 801dd92:	230b      	movs	r3, #11
 801dd94:	8183      	strh	r3, [r0, #12]
 801dd96:	2100      	movs	r1, #0
 801dd98:	2001      	movs	r0, #1
 801dd9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801dd9e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801dda0:	2200      	movs	r2, #0
 801dda2:	611c      	str	r4, [r3, #16]
 801dda4:	615a      	str	r2, [r3, #20]
 801dda6:	bd38      	pop	{r3, r4, r5, pc}
 801dda8:	20000104 	.word	0x20000104
 801ddac:	08025774 	.word	0x08025774
 801ddb0:	0802584c 	.word	0x0802584c
 801ddb4:	abcd330e 	.word	0xabcd330e
 801ddb8:	e66d1234 	.word	0xe66d1234
 801ddbc:	0005deec 	.word	0x0005deec

0801ddc0 <rand>:
 801ddc0:	4b17      	ldr	r3, [pc, #92]	; (801de20 <rand+0x60>)
 801ddc2:	b510      	push	{r4, lr}
 801ddc4:	681c      	ldr	r4, [r3, #0]
 801ddc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801ddc8:	b9b3      	cbnz	r3, 801ddf8 <rand+0x38>
 801ddca:	2018      	movs	r0, #24
 801ddcc:	f7ff fec2 	bl	801db54 <malloc>
 801ddd0:	63a0      	str	r0, [r4, #56]	; 0x38
 801ddd2:	b928      	cbnz	r0, 801dde0 <rand+0x20>
 801ddd4:	4602      	mov	r2, r0
 801ddd6:	4b13      	ldr	r3, [pc, #76]	; (801de24 <rand+0x64>)
 801ddd8:	4813      	ldr	r0, [pc, #76]	; (801de28 <rand+0x68>)
 801ddda:	214e      	movs	r1, #78	; 0x4e
 801dddc:	f001 fa76 	bl	801f2cc <__assert_func>
 801dde0:	4a12      	ldr	r2, [pc, #72]	; (801de2c <rand+0x6c>)
 801dde2:	4b13      	ldr	r3, [pc, #76]	; (801de30 <rand+0x70>)
 801dde4:	e9c0 2300 	strd	r2, r3, [r0]
 801dde8:	4b12      	ldr	r3, [pc, #72]	; (801de34 <rand+0x74>)
 801ddea:	6083      	str	r3, [r0, #8]
 801ddec:	230b      	movs	r3, #11
 801ddee:	8183      	strh	r3, [r0, #12]
 801ddf0:	2201      	movs	r2, #1
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ddf8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ddfa:	480f      	ldr	r0, [pc, #60]	; (801de38 <rand+0x78>)
 801ddfc:	690a      	ldr	r2, [r1, #16]
 801ddfe:	694b      	ldr	r3, [r1, #20]
 801de00:	4c0e      	ldr	r4, [pc, #56]	; (801de3c <rand+0x7c>)
 801de02:	4350      	muls	r0, r2
 801de04:	fb04 0003 	mla	r0, r4, r3, r0
 801de08:	fba2 3404 	umull	r3, r4, r2, r4
 801de0c:	1c5a      	adds	r2, r3, #1
 801de0e:	4404      	add	r4, r0
 801de10:	f144 0000 	adc.w	r0, r4, #0
 801de14:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801de18:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801de1c:	bd10      	pop	{r4, pc}
 801de1e:	bf00      	nop
 801de20:	20000104 	.word	0x20000104
 801de24:	08025774 	.word	0x08025774
 801de28:	0802584c 	.word	0x0802584c
 801de2c:	abcd330e 	.word	0xabcd330e
 801de30:	e66d1234 	.word	0xe66d1234
 801de34:	0005deec 	.word	0x0005deec
 801de38:	5851f42d 	.word	0x5851f42d
 801de3c:	4c957f2d 	.word	0x4c957f2d

0801de40 <realloc>:
 801de40:	4b02      	ldr	r3, [pc, #8]	; (801de4c <realloc+0xc>)
 801de42:	460a      	mov	r2, r1
 801de44:	4601      	mov	r1, r0
 801de46:	6818      	ldr	r0, [r3, #0]
 801de48:	f001 bc02 	b.w	801f650 <_realloc_r>
 801de4c:	20000104 	.word	0x20000104

0801de50 <_sbrk_r>:
 801de50:	b538      	push	{r3, r4, r5, lr}
 801de52:	4d06      	ldr	r5, [pc, #24]	; (801de6c <_sbrk_r+0x1c>)
 801de54:	2300      	movs	r3, #0
 801de56:	4604      	mov	r4, r0
 801de58:	4608      	mov	r0, r1
 801de5a:	602b      	str	r3, [r5, #0]
 801de5c:	f7e3 f816 	bl	8000e8c <_sbrk>
 801de60:	1c43      	adds	r3, r0, #1
 801de62:	d102      	bne.n	801de6a <_sbrk_r+0x1a>
 801de64:	682b      	ldr	r3, [r5, #0]
 801de66:	b103      	cbz	r3, 801de6a <_sbrk_r+0x1a>
 801de68:	6023      	str	r3, [r4, #0]
 801de6a:	bd38      	pop	{r3, r4, r5, pc}
 801de6c:	20000da4 	.word	0x20000da4

0801de70 <_raise_r>:
 801de70:	291f      	cmp	r1, #31
 801de72:	b538      	push	{r3, r4, r5, lr}
 801de74:	4604      	mov	r4, r0
 801de76:	460d      	mov	r5, r1
 801de78:	d904      	bls.n	801de84 <_raise_r+0x14>
 801de7a:	2316      	movs	r3, #22
 801de7c:	6003      	str	r3, [r0, #0]
 801de7e:	f04f 30ff 	mov.w	r0, #4294967295
 801de82:	bd38      	pop	{r3, r4, r5, pc}
 801de84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801de86:	b112      	cbz	r2, 801de8e <_raise_r+0x1e>
 801de88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801de8c:	b94b      	cbnz	r3, 801dea2 <_raise_r+0x32>
 801de8e:	4620      	mov	r0, r4
 801de90:	f000 f830 	bl	801def4 <_getpid_r>
 801de94:	462a      	mov	r2, r5
 801de96:	4601      	mov	r1, r0
 801de98:	4620      	mov	r0, r4
 801de9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de9e:	f000 b817 	b.w	801ded0 <_kill_r>
 801dea2:	2b01      	cmp	r3, #1
 801dea4:	d00a      	beq.n	801debc <_raise_r+0x4c>
 801dea6:	1c59      	adds	r1, r3, #1
 801dea8:	d103      	bne.n	801deb2 <_raise_r+0x42>
 801deaa:	2316      	movs	r3, #22
 801deac:	6003      	str	r3, [r0, #0]
 801deae:	2001      	movs	r0, #1
 801deb0:	e7e7      	b.n	801de82 <_raise_r+0x12>
 801deb2:	2400      	movs	r4, #0
 801deb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801deb8:	4628      	mov	r0, r5
 801deba:	4798      	blx	r3
 801debc:	2000      	movs	r0, #0
 801debe:	e7e0      	b.n	801de82 <_raise_r+0x12>

0801dec0 <raise>:
 801dec0:	4b02      	ldr	r3, [pc, #8]	; (801decc <raise+0xc>)
 801dec2:	4601      	mov	r1, r0
 801dec4:	6818      	ldr	r0, [r3, #0]
 801dec6:	f7ff bfd3 	b.w	801de70 <_raise_r>
 801deca:	bf00      	nop
 801decc:	20000104 	.word	0x20000104

0801ded0 <_kill_r>:
 801ded0:	b538      	push	{r3, r4, r5, lr}
 801ded2:	4d07      	ldr	r5, [pc, #28]	; (801def0 <_kill_r+0x20>)
 801ded4:	2300      	movs	r3, #0
 801ded6:	4604      	mov	r4, r0
 801ded8:	4608      	mov	r0, r1
 801deda:	4611      	mov	r1, r2
 801dedc:	602b      	str	r3, [r5, #0]
 801dede:	f7e2 ff40 	bl	8000d62 <_kill>
 801dee2:	1c43      	adds	r3, r0, #1
 801dee4:	d102      	bne.n	801deec <_kill_r+0x1c>
 801dee6:	682b      	ldr	r3, [r5, #0]
 801dee8:	b103      	cbz	r3, 801deec <_kill_r+0x1c>
 801deea:	6023      	str	r3, [r4, #0]
 801deec:	bd38      	pop	{r3, r4, r5, pc}
 801deee:	bf00      	nop
 801def0:	20000da4 	.word	0x20000da4

0801def4 <_getpid_r>:
 801def4:	f7e2 bf2d 	b.w	8000d52 <_getpid>

0801def8 <__sread>:
 801def8:	b510      	push	{r4, lr}
 801defa:	460c      	mov	r4, r1
 801defc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df00:	f002 f85e 	bl	801ffc0 <_read_r>
 801df04:	2800      	cmp	r0, #0
 801df06:	bfab      	itete	ge
 801df08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801df0a:	89a3      	ldrhlt	r3, [r4, #12]
 801df0c:	181b      	addge	r3, r3, r0
 801df0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801df12:	bfac      	ite	ge
 801df14:	6563      	strge	r3, [r4, #84]	; 0x54
 801df16:	81a3      	strhlt	r3, [r4, #12]
 801df18:	bd10      	pop	{r4, pc}

0801df1a <__seofread>:
 801df1a:	2000      	movs	r0, #0
 801df1c:	4770      	bx	lr

0801df1e <__swrite>:
 801df1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df22:	461f      	mov	r7, r3
 801df24:	898b      	ldrh	r3, [r1, #12]
 801df26:	05db      	lsls	r3, r3, #23
 801df28:	4605      	mov	r5, r0
 801df2a:	460c      	mov	r4, r1
 801df2c:	4616      	mov	r6, r2
 801df2e:	d505      	bpl.n	801df3c <__swrite+0x1e>
 801df30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df34:	2302      	movs	r3, #2
 801df36:	2200      	movs	r2, #0
 801df38:	f001 fb5a 	bl	801f5f0 <_lseek_r>
 801df3c:	89a3      	ldrh	r3, [r4, #12]
 801df3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801df42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801df46:	81a3      	strh	r3, [r4, #12]
 801df48:	4632      	mov	r2, r6
 801df4a:	463b      	mov	r3, r7
 801df4c:	4628      	mov	r0, r5
 801df4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801df52:	f001 b8d5 	b.w	801f100 <_write_r>

0801df56 <__sseek>:
 801df56:	b510      	push	{r4, lr}
 801df58:	460c      	mov	r4, r1
 801df5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df5e:	f001 fb47 	bl	801f5f0 <_lseek_r>
 801df62:	1c43      	adds	r3, r0, #1
 801df64:	89a3      	ldrh	r3, [r4, #12]
 801df66:	bf15      	itete	ne
 801df68:	6560      	strne	r0, [r4, #84]	; 0x54
 801df6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801df6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801df72:	81a3      	strheq	r3, [r4, #12]
 801df74:	bf18      	it	ne
 801df76:	81a3      	strhne	r3, [r4, #12]
 801df78:	bd10      	pop	{r4, pc}

0801df7a <__sclose>:
 801df7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801df7e:	f001 b9c3 	b.w	801f308 <_close_r>
	...

0801df84 <iso_year_adjust>:
 801df84:	6941      	ldr	r1, [r0, #20]
 801df86:	2900      	cmp	r1, #0
 801df88:	f240 736c 	movw	r3, #1900	; 0x76c
 801df8c:	bfa8      	it	ge
 801df8e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 801df92:	18ca      	adds	r2, r1, r3
 801df94:	078b      	lsls	r3, r1, #30
 801df96:	d105      	bne.n	801dfa4 <iso_year_adjust+0x20>
 801df98:	2164      	movs	r1, #100	; 0x64
 801df9a:	fb92 f3f1 	sdiv	r3, r2, r1
 801df9e:	fb01 2313 	mls	r3, r1, r3, r2
 801dfa2:	b9db      	cbnz	r3, 801dfdc <iso_year_adjust+0x58>
 801dfa4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801dfa8:	fb92 f3f1 	sdiv	r3, r2, r1
 801dfac:	fb01 2313 	mls	r3, r1, r3, r2
 801dfb0:	fab3 f383 	clz	r3, r3
 801dfb4:	095b      	lsrs	r3, r3, #5
 801dfb6:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 801dfba:	0040      	lsls	r0, r0, #1
 801dfbc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 801dfc0:	4418      	add	r0, r3
 801dfc2:	f241 63a2 	movw	r3, #5794	; 0x16a2
 801dfc6:	4298      	cmp	r0, r3
 801dfc8:	d03a      	beq.n	801e040 <iso_year_adjust+0xbc>
 801dfca:	dc21      	bgt.n	801e010 <iso_year_adjust+0x8c>
 801dfcc:	2801      	cmp	r0, #1
 801dfce:	dc1a      	bgt.n	801e006 <iso_year_adjust+0x82>
 801dfd0:	2800      	cmp	r0, #0
 801dfd2:	bfb4      	ite	lt
 801dfd4:	2000      	movlt	r0, #0
 801dfd6:	f04f 30ff 	movge.w	r0, #4294967295
 801dfda:	4770      	bx	lr
 801dfdc:	2301      	movs	r3, #1
 801dfde:	e7ea      	b.n	801dfb6 <iso_year_adjust+0x32>
 801dfe0:	2817      	cmp	r0, #23
 801dfe2:	d813      	bhi.n	801e00c <iso_year_adjust+0x88>
 801dfe4:	e8df f000 	tbb	[pc, r0]
 801dfe8:	0c0c0c0c 	.word	0x0c0c0c0c
 801dfec:	0c0c1212 	.word	0x0c0c1212
 801dff0:	12121212 	.word	0x12121212
 801dff4:	12121212 	.word	0x12121212
 801dff8:	0c0c1212 	.word	0x0c0c1212
 801dffc:	0c0c1212 	.word	0x0c0c1212
 801e000:	f04f 30ff 	mov.w	r0, #4294967295
 801e004:	4770      	bx	lr
 801e006:	380a      	subs	r0, #10
 801e008:	2817      	cmp	r0, #23
 801e00a:	d9e9      	bls.n	801dfe0 <iso_year_adjust+0x5c>
 801e00c:	2000      	movs	r0, #0
 801e00e:	4770      	bx	lr
 801e010:	f241 63b4 	movw	r3, #5812	; 0x16b4
 801e014:	4298      	cmp	r0, r3
 801e016:	dc06      	bgt.n	801e026 <iso_year_adjust+0xa2>
 801e018:	f241 63b1 	movw	r3, #5809	; 0x16b1
 801e01c:	4298      	cmp	r0, r3
 801e01e:	bfd4      	ite	le
 801e020:	2000      	movle	r0, #0
 801e022:	2001      	movgt	r0, #1
 801e024:	4770      	bx	lr
 801e026:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 801e02a:	3802      	subs	r0, #2
 801e02c:	2815      	cmp	r0, #21
 801e02e:	d8ed      	bhi.n	801e00c <iso_year_adjust+0x88>
 801e030:	2301      	movs	r3, #1
 801e032:	4083      	lsls	r3, r0
 801e034:	4803      	ldr	r0, [pc, #12]	; (801e044 <iso_year_adjust+0xc0>)
 801e036:	4018      	ands	r0, r3
 801e038:	3800      	subs	r0, #0
 801e03a:	bf18      	it	ne
 801e03c:	2001      	movne	r0, #1
 801e03e:	4770      	bx	lr
 801e040:	2001      	movs	r0, #1
 801e042:	4770      	bx	lr
 801e044:	002a001f 	.word	0x002a001f

0801e048 <__strftime>:
 801e048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e04c:	b091      	sub	sp, #68	; 0x44
 801e04e:	461d      	mov	r5, r3
 801e050:	2300      	movs	r3, #0
 801e052:	4681      	mov	r9, r0
 801e054:	4688      	mov	r8, r1
 801e056:	9304      	str	r3, [sp, #16]
 801e058:	461c      	mov	r4, r3
 801e05a:	7813      	ldrb	r3, [r2, #0]
 801e05c:	2b00      	cmp	r3, #0
 801e05e:	f000 84d1 	beq.w	801ea04 <__strftime+0x9bc>
 801e062:	2b25      	cmp	r3, #37	; 0x25
 801e064:	d11b      	bne.n	801e09e <__strftime+0x56>
 801e066:	7857      	ldrb	r7, [r2, #1]
 801e068:	2f30      	cmp	r7, #48	; 0x30
 801e06a:	d024      	beq.n	801e0b6 <__strftime+0x6e>
 801e06c:	2f2b      	cmp	r7, #43	; 0x2b
 801e06e:	d022      	beq.n	801e0b6 <__strftime+0x6e>
 801e070:	f102 0b01 	add.w	fp, r2, #1
 801e074:	2700      	movs	r7, #0
 801e076:	f89b 3000 	ldrb.w	r3, [fp]
 801e07a:	3b31      	subs	r3, #49	; 0x31
 801e07c:	2b08      	cmp	r3, #8
 801e07e:	d81d      	bhi.n	801e0bc <__strftime+0x74>
 801e080:	4658      	mov	r0, fp
 801e082:	220a      	movs	r2, #10
 801e084:	a908      	add	r1, sp, #32
 801e086:	f000 fd6f 	bl	801eb68 <strtoul>
 801e08a:	f8dd b020 	ldr.w	fp, [sp, #32]
 801e08e:	4606      	mov	r6, r0
 801e090:	f89b 3000 	ldrb.w	r3, [fp]
 801e094:	2b45      	cmp	r3, #69	; 0x45
 801e096:	d113      	bne.n	801e0c0 <__strftime+0x78>
 801e098:	f10b 0b01 	add.w	fp, fp, #1
 801e09c:	e012      	b.n	801e0c4 <__strftime+0x7c>
 801e09e:	f108 31ff 	add.w	r1, r8, #4294967295
 801e0a2:	42a1      	cmp	r1, r4
 801e0a4:	d802      	bhi.n	801e0ac <__strftime+0x64>
 801e0a6:	2400      	movs	r4, #0
 801e0a8:	f000 bcb2 	b.w	801ea10 <__strftime+0x9c8>
 801e0ac:	f809 3004 	strb.w	r3, [r9, r4]
 801e0b0:	3201      	adds	r2, #1
 801e0b2:	3401      	adds	r4, #1
 801e0b4:	e7d1      	b.n	801e05a <__strftime+0x12>
 801e0b6:	f102 0b02 	add.w	fp, r2, #2
 801e0ba:	e7dc      	b.n	801e076 <__strftime+0x2e>
 801e0bc:	2600      	movs	r6, #0
 801e0be:	e7e7      	b.n	801e090 <__strftime+0x48>
 801e0c0:	2b4f      	cmp	r3, #79	; 0x4f
 801e0c2:	d0e9      	beq.n	801e098 <__strftime+0x50>
 801e0c4:	f89b 0000 	ldrb.w	r0, [fp]
 801e0c8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 801e0cc:	2b55      	cmp	r3, #85	; 0x55
 801e0ce:	d8ea      	bhi.n	801e0a6 <__strftime+0x5e>
 801e0d0:	a201      	add	r2, pc, #4	; (adr r2, 801e0d8 <__strftime+0x90>)
 801e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e0d6:	bf00      	nop
 801e0d8:	0801e9f7 	.word	0x0801e9f7
 801e0dc:	0801e0a7 	.word	0x0801e0a7
 801e0e0:	0801e0a7 	.word	0x0801e0a7
 801e0e4:	0801e0a7 	.word	0x0801e0a7
 801e0e8:	0801e0a7 	.word	0x0801e0a7
 801e0ec:	0801e0a7 	.word	0x0801e0a7
 801e0f0:	0801e0a7 	.word	0x0801e0a7
 801e0f4:	0801e0a7 	.word	0x0801e0a7
 801e0f8:	0801e0a7 	.word	0x0801e0a7
 801e0fc:	0801e0a7 	.word	0x0801e0a7
 801e100:	0801e0a7 	.word	0x0801e0a7
 801e104:	0801e0a7 	.word	0x0801e0a7
 801e108:	0801e0a7 	.word	0x0801e0a7
 801e10c:	0801e0a7 	.word	0x0801e0a7
 801e110:	0801e0a7 	.word	0x0801e0a7
 801e114:	0801e0a7 	.word	0x0801e0a7
 801e118:	0801e0a7 	.word	0x0801e0a7
 801e11c:	0801e0a7 	.word	0x0801e0a7
 801e120:	0801e0a7 	.word	0x0801e0a7
 801e124:	0801e0a7 	.word	0x0801e0a7
 801e128:	0801e0a7 	.word	0x0801e0a7
 801e12c:	0801e0a7 	.word	0x0801e0a7
 801e130:	0801e0a7 	.word	0x0801e0a7
 801e134:	0801e0a7 	.word	0x0801e0a7
 801e138:	0801e0a7 	.word	0x0801e0a7
 801e13c:	0801e0a7 	.word	0x0801e0a7
 801e140:	0801e0a7 	.word	0x0801e0a7
 801e144:	0801e0a7 	.word	0x0801e0a7
 801e148:	0801e26f 	.word	0x0801e26f
 801e14c:	0801e2c9 	.word	0x0801e2c9
 801e150:	0801e33f 	.word	0x0801e33f
 801e154:	0801e3d9 	.word	0x0801e3d9
 801e158:	0801e0a7 	.word	0x0801e0a7
 801e15c:	0801e425 	.word	0x0801e425
 801e160:	0801e505 	.word	0x0801e505
 801e164:	0801e607 	.word	0x0801e607
 801e168:	0801e615 	.word	0x0801e615
 801e16c:	0801e0a7 	.word	0x0801e0a7
 801e170:	0801e0a7 	.word	0x0801e0a7
 801e174:	0801e0a7 	.word	0x0801e0a7
 801e178:	0801e645 	.word	0x0801e645
 801e17c:	0801e0a7 	.word	0x0801e0a7
 801e180:	0801e0a7 	.word	0x0801e0a7
 801e184:	0801e65d 	.word	0x0801e65d
 801e188:	0801e0a7 	.word	0x0801e0a7
 801e18c:	0801e6ab 	.word	0x0801e6ab
 801e190:	0801e7c1 	.word	0x0801e7c1
 801e194:	0801e7d3 	.word	0x0801e7d3
 801e198:	0801e82b 	.word	0x0801e82b
 801e19c:	0801e83b 	.word	0x0801e83b
 801e1a0:	0801e8b1 	.word	0x0801e8b1
 801e1a4:	0801e337 	.word	0x0801e337
 801e1a8:	0801e8e5 	.word	0x0801e8e5
 801e1ac:	0801e9a3 	.word	0x0801e9a3
 801e1b0:	0801e0a7 	.word	0x0801e0a7
 801e1b4:	0801e0a7 	.word	0x0801e0a7
 801e1b8:	0801e0a7 	.word	0x0801e0a7
 801e1bc:	0801e0a7 	.word	0x0801e0a7
 801e1c0:	0801e0a7 	.word	0x0801e0a7
 801e1c4:	0801e0a7 	.word	0x0801e0a7
 801e1c8:	0801e231 	.word	0x0801e231
 801e1cc:	0801e29d 	.word	0x0801e29d
 801e1d0:	0801e2f7 	.word	0x0801e2f7
 801e1d4:	0801e3b1 	.word	0x0801e3b1
 801e1d8:	0801e3b1 	.word	0x0801e3b1
 801e1dc:	0801e0a7 	.word	0x0801e0a7
 801e1e0:	0801e46d 	.word	0x0801e46d
 801e1e4:	0801e29d 	.word	0x0801e29d
 801e1e8:	0801e0a7 	.word	0x0801e0a7
 801e1ec:	0801e637 	.word	0x0801e637
 801e1f0:	0801e607 	.word	0x0801e607
 801e1f4:	0801e615 	.word	0x0801e615
 801e1f8:	0801e63f 	.word	0x0801e63f
 801e1fc:	0801e649 	.word	0x0801e649
 801e200:	0801e0a7 	.word	0x0801e0a7
 801e204:	0801e65d 	.word	0x0801e65d
 801e208:	0801e0a7 	.word	0x0801e0a7
 801e20c:	0801e327 	.word	0x0801e327
 801e210:	0801e6c1 	.word	0x0801e6c1
 801e214:	0801e7c5 	.word	0x0801e7c5
 801e218:	0801e80d 	.word	0x0801e80d
 801e21c:	0801e0a7 	.word	0x0801e0a7
 801e220:	0801e8a1 	.word	0x0801e8a1
 801e224:	0801e32f 	.word	0x0801e32f
 801e228:	0801e8c9 	.word	0x0801e8c9
 801e22c:	0801e935 	.word	0x0801e935
 801e230:	69ab      	ldr	r3, [r5, #24]
 801e232:	4aa7      	ldr	r2, [pc, #668]	; (801e4d0 <__strftime+0x488>)
 801e234:	3318      	adds	r3, #24
 801e236:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e23a:	4630      	mov	r0, r6
 801e23c:	f7e1 fffe 	bl	800023c <strlen>
 801e240:	3e01      	subs	r6, #1
 801e242:	4420      	add	r0, r4
 801e244:	f108 33ff 	add.w	r3, r8, #4294967295
 801e248:	42a0      	cmp	r0, r4
 801e24a:	d107      	bne.n	801e25c <__strftime+0x214>
 801e24c:	f89b 3000 	ldrb.w	r3, [fp]
 801e250:	2b00      	cmp	r3, #0
 801e252:	f000 83d7 	beq.w	801ea04 <__strftime+0x9bc>
 801e256:	f10b 0201 	add.w	r2, fp, #1
 801e25a:	e6fe      	b.n	801e05a <__strftime+0x12>
 801e25c:	42a3      	cmp	r3, r4
 801e25e:	f67f af22 	bls.w	801e0a6 <__strftime+0x5e>
 801e262:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e266:	f809 2004 	strb.w	r2, [r9, r4]
 801e26a:	3401      	adds	r4, #1
 801e26c:	e7ec      	b.n	801e248 <__strftime+0x200>
 801e26e:	69aa      	ldr	r2, [r5, #24]
 801e270:	4b97      	ldr	r3, [pc, #604]	; (801e4d0 <__strftime+0x488>)
 801e272:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801e276:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 801e278:	4630      	mov	r0, r6
 801e27a:	f7e1 ffdf 	bl	800023c <strlen>
 801e27e:	3e01      	subs	r6, #1
 801e280:	4420      	add	r0, r4
 801e282:	f108 33ff 	add.w	r3, r8, #4294967295
 801e286:	42a0      	cmp	r0, r4
 801e288:	d0e0      	beq.n	801e24c <__strftime+0x204>
 801e28a:	42a3      	cmp	r3, r4
 801e28c:	f67f af0b 	bls.w	801e0a6 <__strftime+0x5e>
 801e290:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e294:	f809 2004 	strb.w	r2, [r9, r4]
 801e298:	3401      	adds	r4, #1
 801e29a:	e7f4      	b.n	801e286 <__strftime+0x23e>
 801e29c:	4b8c      	ldr	r3, [pc, #560]	; (801e4d0 <__strftime+0x488>)
 801e29e:	692a      	ldr	r2, [r5, #16]
 801e2a0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e2a4:	4630      	mov	r0, r6
 801e2a6:	f7e1 ffc9 	bl	800023c <strlen>
 801e2aa:	3e01      	subs	r6, #1
 801e2ac:	4420      	add	r0, r4
 801e2ae:	f108 33ff 	add.w	r3, r8, #4294967295
 801e2b2:	42a0      	cmp	r0, r4
 801e2b4:	d0ca      	beq.n	801e24c <__strftime+0x204>
 801e2b6:	42a3      	cmp	r3, r4
 801e2b8:	f67f aef5 	bls.w	801e0a6 <__strftime+0x5e>
 801e2bc:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e2c0:	f809 2004 	strb.w	r2, [r9, r4]
 801e2c4:	3401      	adds	r4, #1
 801e2c6:	e7f4      	b.n	801e2b2 <__strftime+0x26a>
 801e2c8:	692b      	ldr	r3, [r5, #16]
 801e2ca:	4a81      	ldr	r2, [pc, #516]	; (801e4d0 <__strftime+0x488>)
 801e2cc:	330c      	adds	r3, #12
 801e2ce:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e2d2:	4630      	mov	r0, r6
 801e2d4:	f7e1 ffb2 	bl	800023c <strlen>
 801e2d8:	3e01      	subs	r6, #1
 801e2da:	4420      	add	r0, r4
 801e2dc:	f108 33ff 	add.w	r3, r8, #4294967295
 801e2e0:	42a0      	cmp	r0, r4
 801e2e2:	d0b3      	beq.n	801e24c <__strftime+0x204>
 801e2e4:	42a3      	cmp	r3, r4
 801e2e6:	f67f aede 	bls.w	801e0a6 <__strftime+0x5e>
 801e2ea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e2ee:	f809 2004 	strb.w	r2, [r9, r4]
 801e2f2:	3401      	adds	r4, #1
 801e2f4:	e7f4      	b.n	801e2e0 <__strftime+0x298>
 801e2f6:	4b76      	ldr	r3, [pc, #472]	; (801e4d0 <__strftime+0x488>)
 801e2f8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801e2fc:	4630      	mov	r0, r6
 801e2fe:	f7e1 ff9d 	bl	800023c <strlen>
 801e302:	7833      	ldrb	r3, [r6, #0]
 801e304:	2b00      	cmp	r3, #0
 801e306:	d0a1      	beq.n	801e24c <__strftime+0x204>
 801e308:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e30a:	9300      	str	r3, [sp, #0]
 801e30c:	4632      	mov	r2, r6
 801e30e:	462b      	mov	r3, r5
 801e310:	eba8 0104 	sub.w	r1, r8, r4
 801e314:	eb09 0004 	add.w	r0, r9, r4
 801e318:	f7ff fe96 	bl	801e048 <__strftime>
 801e31c:	2800      	cmp	r0, #0
 801e31e:	f77f aec2 	ble.w	801e0a6 <__strftime+0x5e>
 801e322:	4404      	add	r4, r0
 801e324:	e792      	b.n	801e24c <__strftime+0x204>
 801e326:	4b6a      	ldr	r3, [pc, #424]	; (801e4d0 <__strftime+0x488>)
 801e328:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 801e32c:	e7e6      	b.n	801e2fc <__strftime+0x2b4>
 801e32e:	4b68      	ldr	r3, [pc, #416]	; (801e4d0 <__strftime+0x488>)
 801e330:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 801e334:	e7e2      	b.n	801e2fc <__strftime+0x2b4>
 801e336:	4b66      	ldr	r3, [pc, #408]	; (801e4d0 <__strftime+0x488>)
 801e338:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801e33c:	e7de      	b.n	801e2fc <__strftime+0x2b4>
 801e33e:	4965      	ldr	r1, [pc, #404]	; (801e4d4 <__strftime+0x48c>)
 801e340:	f8d5 a014 	ldr.w	sl, [r5, #20]
 801e344:	458a      	cmp	sl, r1
 801e346:	bfac      	ite	ge
 801e348:	2100      	movge	r1, #0
 801e34a:	2101      	movlt	r1, #1
 801e34c:	f1ba 0f00 	cmp.w	sl, #0
 801e350:	db0e      	blt.n	801e370 <__strftime+0x328>
 801e352:	2064      	movs	r0, #100	; 0x64
 801e354:	fb9a f0f0 	sdiv	r0, sl, r0
 801e358:	3013      	adds	r0, #19
 801e35a:	b19f      	cbz	r7, 801e384 <__strftime+0x33c>
 801e35c:	2863      	cmp	r0, #99	; 0x63
 801e35e:	dd25      	ble.n	801e3ac <__strftime+0x364>
 801e360:	4a5d      	ldr	r2, [pc, #372]	; (801e4d8 <__strftime+0x490>)
 801e362:	4b5e      	ldr	r3, [pc, #376]	; (801e4dc <__strftime+0x494>)
 801e364:	2f2b      	cmp	r7, #43	; 0x2b
 801e366:	bf14      	ite	ne
 801e368:	4617      	movne	r7, r2
 801e36a:	461f      	moveq	r7, r3
 801e36c:	4a5c      	ldr	r2, [pc, #368]	; (801e4e0 <__strftime+0x498>)
 801e36e:	e00b      	b.n	801e388 <__strftime+0x340>
 801e370:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 801e374:	9105      	str	r1, [sp, #20]
 801e376:	f000 ffa5 	bl	801f2c4 <abs>
 801e37a:	2364      	movs	r3, #100	; 0x64
 801e37c:	9905      	ldr	r1, [sp, #20]
 801e37e:	fb90 f0f3 	sdiv	r0, r0, r3
 801e382:	e7ea      	b.n	801e35a <__strftime+0x312>
 801e384:	4f54      	ldr	r7, [pc, #336]	; (801e4d8 <__strftime+0x490>)
 801e386:	4a57      	ldr	r2, [pc, #348]	; (801e4e4 <__strftime+0x49c>)
 801e388:	4b57      	ldr	r3, [pc, #348]	; (801e4e8 <__strftime+0x4a0>)
 801e38a:	9001      	str	r0, [sp, #4]
 801e38c:	2e02      	cmp	r6, #2
 801e38e:	bf2c      	ite	cs
 801e390:	ebc1 0606 	rsbcs	r6, r1, r6
 801e394:	f1c1 0602 	rsbcc	r6, r1, #2
 801e398:	494e      	ldr	r1, [pc, #312]	; (801e4d4 <__strftime+0x48c>)
 801e39a:	9600      	str	r6, [sp, #0]
 801e39c:	458a      	cmp	sl, r1
 801e39e:	bfa8      	it	ge
 801e3a0:	463b      	movge	r3, r7
 801e3a2:	eba8 0104 	sub.w	r1, r8, r4
 801e3a6:	eb09 0004 	add.w	r0, r9, r4
 801e3aa:	e02a      	b.n	801e402 <__strftime+0x3ba>
 801e3ac:	4f4a      	ldr	r7, [pc, #296]	; (801e4d8 <__strftime+0x490>)
 801e3ae:	e7dd      	b.n	801e36c <__strftime+0x324>
 801e3b0:	494e      	ldr	r1, [pc, #312]	; (801e4ec <__strftime+0x4a4>)
 801e3b2:	4a4f      	ldr	r2, [pc, #316]	; (801e4f0 <__strftime+0x4a8>)
 801e3b4:	68eb      	ldr	r3, [r5, #12]
 801e3b6:	2864      	cmp	r0, #100	; 0x64
 801e3b8:	bf08      	it	eq
 801e3ba:	460a      	moveq	r2, r1
 801e3bc:	eba8 0104 	sub.w	r1, r8, r4
 801e3c0:	eb09 0004 	add.w	r0, r9, r4
 801e3c4:	f001 fe0e 	bl	801ffe4 <sniprintf>
 801e3c8:	2800      	cmp	r0, #0
 801e3ca:	f6ff ae6c 	blt.w	801e0a6 <__strftime+0x5e>
 801e3ce:	4404      	add	r4, r0
 801e3d0:	45a0      	cmp	r8, r4
 801e3d2:	f63f af3b 	bhi.w	801e24c <__strftime+0x204>
 801e3d6:	e666      	b.n	801e0a6 <__strftime+0x5e>
 801e3d8:	6968      	ldr	r0, [r5, #20]
 801e3da:	692b      	ldr	r3, [r5, #16]
 801e3dc:	68ef      	ldr	r7, [r5, #12]
 801e3de:	2800      	cmp	r0, #0
 801e3e0:	eb09 0604 	add.w	r6, r9, r4
 801e3e4:	eba8 0104 	sub.w	r1, r8, r4
 801e3e8:	f103 0301 	add.w	r3, r3, #1
 801e3ec:	db0c      	blt.n	801e408 <__strftime+0x3c0>
 801e3ee:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e3f2:	fb90 f2fc 	sdiv	r2, r0, ip
 801e3f6:	fb0c 0212 	mls	r2, ip, r2, r0
 801e3fa:	e9cd 7200 	strd	r7, r2, [sp]
 801e3fe:	4a3d      	ldr	r2, [pc, #244]	; (801e4f4 <__strftime+0x4ac>)
 801e400:	4630      	mov	r0, r6
 801e402:	f001 fdef 	bl	801ffe4 <sniprintf>
 801e406:	e7df      	b.n	801e3c8 <__strftime+0x380>
 801e408:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e40c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801e410:	f000 ff58 	bl	801f2c4 <abs>
 801e414:	2264      	movs	r2, #100	; 0x64
 801e416:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 801e41a:	fb90 fcf2 	sdiv	ip, r0, r2
 801e41e:	fb0c 0212 	mls	r2, ip, r2, r0
 801e422:	e7ea      	b.n	801e3fa <__strftime+0x3b2>
 801e424:	2325      	movs	r3, #37	; 0x25
 801e426:	f88d 3020 	strb.w	r3, [sp, #32]
 801e42a:	b187      	cbz	r7, 801e44e <__strftime+0x406>
 801e42c:	2e06      	cmp	r6, #6
 801e42e:	bf38      	it	cc
 801e430:	2606      	movcc	r6, #6
 801e432:	1fb3      	subs	r3, r6, #6
 801e434:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 801e438:	d10c      	bne.n	801e454 <__strftime+0x40c>
 801e43a:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e43e:	492e      	ldr	r1, [pc, #184]	; (801e4f8 <__strftime+0x4b0>)
 801e440:	f001 fe30 	bl	80200a4 <strcpy>
 801e444:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e446:	9300      	str	r3, [sp, #0]
 801e448:	aa08      	add	r2, sp, #32
 801e44a:	462b      	mov	r3, r5
 801e44c:	e760      	b.n	801e310 <__strftime+0x2c8>
 801e44e:	272b      	movs	r7, #43	; 0x2b
 801e450:	260a      	movs	r6, #10
 801e452:	e7ee      	b.n	801e432 <__strftime+0x3ea>
 801e454:	4a29      	ldr	r2, [pc, #164]	; (801e4fc <__strftime+0x4b4>)
 801e456:	211e      	movs	r1, #30
 801e458:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 801e45c:	f001 fdc2 	bl	801ffe4 <sniprintf>
 801e460:	2800      	cmp	r0, #0
 801e462:	ddea      	ble.n	801e43a <__strftime+0x3f2>
 801e464:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801e468:	4418      	add	r0, r3
 801e46a:	e7e8      	b.n	801e43e <__strftime+0x3f6>
 801e46c:	4628      	mov	r0, r5
 801e46e:	f7ff fd89 	bl	801df84 <iso_year_adjust>
 801e472:	4606      	mov	r6, r0
 801e474:	6968      	ldr	r0, [r5, #20]
 801e476:	2800      	cmp	r0, #0
 801e478:	db11      	blt.n	801e49e <__strftime+0x456>
 801e47a:	2264      	movs	r2, #100	; 0x64
 801e47c:	fb90 f3f2 	sdiv	r3, r0, r2
 801e480:	fb02 0313 	mls	r3, r2, r3, r0
 801e484:	441e      	add	r6, r3
 801e486:	2364      	movs	r3, #100	; 0x64
 801e488:	fb96 f0f3 	sdiv	r0, r6, r3
 801e48c:	fb03 6610 	mls	r6, r3, r0, r6
 801e490:	441e      	add	r6, r3
 801e492:	fbb6 f2f3 	udiv	r2, r6, r3
 801e496:	fb03 6312 	mls	r3, r3, r2, r6
 801e49a:	4a14      	ldr	r2, [pc, #80]	; (801e4ec <__strftime+0x4a4>)
 801e49c:	e78e      	b.n	801e3bc <__strftime+0x374>
 801e49e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e4a2:	f000 ff0f 	bl	801f2c4 <abs>
 801e4a6:	2364      	movs	r3, #100	; 0x64
 801e4a8:	2e00      	cmp	r6, #0
 801e4aa:	fb90 f2f3 	sdiv	r2, r0, r3
 801e4ae:	fb02 0313 	mls	r3, r2, r3, r0
 801e4b2:	da05      	bge.n	801e4c0 <__strftime+0x478>
 801e4b4:	6969      	ldr	r1, [r5, #20]
 801e4b6:	4a12      	ldr	r2, [pc, #72]	; (801e500 <__strftime+0x4b8>)
 801e4b8:	4291      	cmp	r1, r2
 801e4ba:	bfb8      	it	lt
 801e4bc:	2601      	movlt	r6, #1
 801e4be:	e7e1      	b.n	801e484 <__strftime+0x43c>
 801e4c0:	d0e0      	beq.n	801e484 <__strftime+0x43c>
 801e4c2:	6969      	ldr	r1, [r5, #20]
 801e4c4:	4a03      	ldr	r2, [pc, #12]	; (801e4d4 <__strftime+0x48c>)
 801e4c6:	4291      	cmp	r1, r2
 801e4c8:	bfb8      	it	lt
 801e4ca:	f04f 36ff 	movlt.w	r6, #4294967295
 801e4ce:	e7d9      	b.n	801e484 <__strftime+0x43c>
 801e4d0:	08025a30 	.word	0x08025a30
 801e4d4:	fffff894 	.word	0xfffff894
 801e4d8:	08025ba3 	.word	0x08025ba3
 801e4dc:	080258ba 	.word	0x080258ba
 801e4e0:	080258b2 	.word	0x080258b2
 801e4e4:	080258ab 	.word	0x080258ab
 801e4e8:	08025ce3 	.word	0x08025ce3
 801e4ec:	080258ca 	.word	0x080258ca
 801e4f0:	080258bc 	.word	0x080258bc
 801e4f4:	080258c0 	.word	0x080258c0
 801e4f8:	080258d3 	.word	0x080258d3
 801e4fc:	080258cf 	.word	0x080258cf
 801e500:	fffff895 	.word	0xfffff895
 801e504:	4bb6      	ldr	r3, [pc, #728]	; (801e7e0 <__strftime+0x798>)
 801e506:	6969      	ldr	r1, [r5, #20]
 801e508:	4299      	cmp	r1, r3
 801e50a:	bfac      	ite	ge
 801e50c:	2300      	movge	r3, #0
 801e50e:	2301      	movlt	r3, #1
 801e510:	4628      	mov	r0, r5
 801e512:	e9cd 3105 	strd	r3, r1, [sp, #20]
 801e516:	f7ff fd35 	bl	801df84 <iso_year_adjust>
 801e51a:	9906      	ldr	r1, [sp, #24]
 801e51c:	2900      	cmp	r1, #0
 801e51e:	4682      	mov	sl, r0
 801e520:	db27      	blt.n	801e572 <__strftime+0x52a>
 801e522:	2264      	movs	r2, #100	; 0x64
 801e524:	fb91 f2f2 	sdiv	r2, r1, r2
 801e528:	3213      	adds	r2, #19
 801e52a:	6968      	ldr	r0, [r5, #20]
 801e52c:	2800      	cmp	r0, #0
 801e52e:	db2b      	blt.n	801e588 <__strftime+0x540>
 801e530:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e534:	fb90 fefc 	sdiv	lr, r0, ip
 801e538:	fb0c 001e 	mls	r0, ip, lr, r0
 801e53c:	f1ba 0f00 	cmp.w	sl, #0
 801e540:	da31      	bge.n	801e5a6 <__strftime+0x55e>
 801e542:	6969      	ldr	r1, [r5, #20]
 801e544:	4ba7      	ldr	r3, [pc, #668]	; (801e7e4 <__strftime+0x79c>)
 801e546:	4299      	cmp	r1, r3
 801e548:	db38      	blt.n	801e5bc <__strftime+0x574>
 801e54a:	eb0a 0300 	add.w	r3, sl, r0
 801e54e:	1c59      	adds	r1, r3, #1
 801e550:	d139      	bne.n	801e5c6 <__strftime+0x57e>
 801e552:	3a01      	subs	r2, #1
 801e554:	2363      	movs	r3, #99	; 0x63
 801e556:	2064      	movs	r0, #100	; 0x64
 801e558:	fb00 3202 	mla	r2, r0, r2, r3
 801e55c:	9b05      	ldr	r3, [sp, #20]
 801e55e:	2b00      	cmp	r3, #0
 801e560:	d036      	beq.n	801e5d0 <__strftime+0x588>
 801e562:	232d      	movs	r3, #45	; 0x2d
 801e564:	f88d 3020 	strb.w	r3, [sp, #32]
 801e568:	b106      	cbz	r6, 801e56c <__strftime+0x524>
 801e56a:	3e01      	subs	r6, #1
 801e56c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e570:	e038      	b.n	801e5e4 <__strftime+0x59c>
 801e572:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801e576:	9106      	str	r1, [sp, #24]
 801e578:	f000 fea4 	bl	801f2c4 <abs>
 801e57c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e580:	9906      	ldr	r1, [sp, #24]
 801e582:	fb90 f2fc 	sdiv	r2, r0, ip
 801e586:	e7d0      	b.n	801e52a <__strftime+0x4e2>
 801e588:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e58c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801e590:	f000 fe98 	bl	801f2c4 <abs>
 801e594:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801e598:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801e59c:	fb90 fefc 	sdiv	lr, r0, ip
 801e5a0:	fb0e 001c 	mls	r0, lr, ip, r0
 801e5a4:	e7ca      	b.n	801e53c <__strftime+0x4f4>
 801e5a6:	d0d0      	beq.n	801e54a <__strftime+0x502>
 801e5a8:	4b8d      	ldr	r3, [pc, #564]	; (801e7e0 <__strftime+0x798>)
 801e5aa:	4299      	cmp	r1, r3
 801e5ac:	bfb4      	ite	lt
 801e5ae:	2301      	movlt	r3, #1
 801e5b0:	2300      	movge	r3, #0
 801e5b2:	9305      	str	r3, [sp, #20]
 801e5b4:	bfb8      	it	lt
 801e5b6:	f04f 3aff 	movlt.w	sl, #4294967295
 801e5ba:	e7c6      	b.n	801e54a <__strftime+0x502>
 801e5bc:	f04f 0a01 	mov.w	sl, #1
 801e5c0:	f8cd a014 	str.w	sl, [sp, #20]
 801e5c4:	e7c1      	b.n	801e54a <__strftime+0x502>
 801e5c6:	2b64      	cmp	r3, #100	; 0x64
 801e5c8:	bf04      	itt	eq
 801e5ca:	3201      	addeq	r2, #1
 801e5cc:	2300      	moveq	r3, #0
 801e5ce:	e7c2      	b.n	801e556 <__strftime+0x50e>
 801e5d0:	2f2b      	cmp	r7, #43	; 0x2b
 801e5d2:	d106      	bne.n	801e5e2 <__strftime+0x59a>
 801e5d4:	f242 730f 	movw	r3, #9999	; 0x270f
 801e5d8:	429a      	cmp	r2, r3
 801e5da:	d902      	bls.n	801e5e2 <__strftime+0x59a>
 801e5dc:	f88d 7020 	strb.w	r7, [sp, #32]
 801e5e0:	e7c2      	b.n	801e568 <__strftime+0x520>
 801e5e2:	ab08      	add	r3, sp, #32
 801e5e4:	2125      	movs	r1, #37	; 0x25
 801e5e6:	7019      	strb	r1, [r3, #0]
 801e5e8:	b94f      	cbnz	r7, 801e5fe <__strftime+0x5b6>
 801e5ea:	1c58      	adds	r0, r3, #1
 801e5ec:	497e      	ldr	r1, [pc, #504]	; (801e7e8 <__strftime+0x7a0>)
 801e5ee:	9205      	str	r2, [sp, #20]
 801e5f0:	f001 fd58 	bl	80200a4 <strcpy>
 801e5f4:	9a05      	ldr	r2, [sp, #20]
 801e5f6:	9200      	str	r2, [sp, #0]
 801e5f8:	4633      	mov	r3, r6
 801e5fa:	aa08      	add	r2, sp, #32
 801e5fc:	e059      	b.n	801e6b2 <__strftime+0x66a>
 801e5fe:	2130      	movs	r1, #48	; 0x30
 801e600:	1c98      	adds	r0, r3, #2
 801e602:	7059      	strb	r1, [r3, #1]
 801e604:	e7f2      	b.n	801e5ec <__strftime+0x5a4>
 801e606:	4979      	ldr	r1, [pc, #484]	; (801e7ec <__strftime+0x7a4>)
 801e608:	4a79      	ldr	r2, [pc, #484]	; (801e7f0 <__strftime+0x7a8>)
 801e60a:	68ab      	ldr	r3, [r5, #8]
 801e60c:	286b      	cmp	r0, #107	; 0x6b
 801e60e:	bf08      	it	eq
 801e610:	460a      	moveq	r2, r1
 801e612:	e6d3      	b.n	801e3bc <__strftime+0x374>
 801e614:	68ab      	ldr	r3, [r5, #8]
 801e616:	b163      	cbz	r3, 801e632 <__strftime+0x5ea>
 801e618:	2b0c      	cmp	r3, #12
 801e61a:	d004      	beq.n	801e626 <__strftime+0x5de>
 801e61c:	210c      	movs	r1, #12
 801e61e:	fb93 f2f1 	sdiv	r2, r3, r1
 801e622:	fb01 3312 	mls	r3, r1, r2, r3
 801e626:	4972      	ldr	r1, [pc, #456]	; (801e7f0 <__strftime+0x7a8>)
 801e628:	4a70      	ldr	r2, [pc, #448]	; (801e7ec <__strftime+0x7a4>)
 801e62a:	2849      	cmp	r0, #73	; 0x49
 801e62c:	bf08      	it	eq
 801e62e:	460a      	moveq	r2, r1
 801e630:	e6c4      	b.n	801e3bc <__strftime+0x374>
 801e632:	230c      	movs	r3, #12
 801e634:	e7f7      	b.n	801e626 <__strftime+0x5de>
 801e636:	69eb      	ldr	r3, [r5, #28]
 801e638:	4a6e      	ldr	r2, [pc, #440]	; (801e7f4 <__strftime+0x7ac>)
 801e63a:	3301      	adds	r3, #1
 801e63c:	e6be      	b.n	801e3bc <__strftime+0x374>
 801e63e:	692b      	ldr	r3, [r5, #16]
 801e640:	3301      	adds	r3, #1
 801e642:	e72a      	b.n	801e49a <__strftime+0x452>
 801e644:	686b      	ldr	r3, [r5, #4]
 801e646:	e728      	b.n	801e49a <__strftime+0x452>
 801e648:	f108 33ff 	add.w	r3, r8, #4294967295
 801e64c:	42a3      	cmp	r3, r4
 801e64e:	f67f ad2a 	bls.w	801e0a6 <__strftime+0x5e>
 801e652:	230a      	movs	r3, #10
 801e654:	f809 3004 	strb.w	r3, [r9, r4]
 801e658:	3401      	adds	r4, #1
 801e65a:	e5f7      	b.n	801e24c <__strftime+0x204>
 801e65c:	68ab      	ldr	r3, [r5, #8]
 801e65e:	2b0b      	cmp	r3, #11
 801e660:	bfcc      	ite	gt
 801e662:	22a4      	movgt	r2, #164	; 0xa4
 801e664:	22a0      	movle	r2, #160	; 0xa0
 801e666:	4b64      	ldr	r3, [pc, #400]	; (801e7f8 <__strftime+0x7b0>)
 801e668:	4413      	add	r3, r2
 801e66a:	685e      	ldr	r6, [r3, #4]
 801e66c:	4630      	mov	r0, r6
 801e66e:	f7e1 fde5 	bl	800023c <strlen>
 801e672:	1e72      	subs	r2, r6, #1
 801e674:	4420      	add	r0, r4
 801e676:	f108 36ff 	add.w	r6, r8, #4294967295
 801e67a:	42a0      	cmp	r0, r4
 801e67c:	f43f ade6 	beq.w	801e24c <__strftime+0x204>
 801e680:	42a6      	cmp	r6, r4
 801e682:	f67f ad10 	bls.w	801e0a6 <__strftime+0x5e>
 801e686:	f89b 1000 	ldrb.w	r1, [fp]
 801e68a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801e68e:	2950      	cmp	r1, #80	; 0x50
 801e690:	d107      	bne.n	801e6a2 <__strftime+0x65a>
 801e692:	495a      	ldr	r1, [pc, #360]	; (801e7fc <__strftime+0x7b4>)
 801e694:	5cc9      	ldrb	r1, [r1, r3]
 801e696:	f001 0103 	and.w	r1, r1, #3
 801e69a:	2901      	cmp	r1, #1
 801e69c:	bf08      	it	eq
 801e69e:	3320      	addeq	r3, #32
 801e6a0:	b2db      	uxtb	r3, r3
 801e6a2:	f809 3004 	strb.w	r3, [r9, r4]
 801e6a6:	3401      	adds	r4, #1
 801e6a8:	e7e7      	b.n	801e67a <__strftime+0x632>
 801e6aa:	686b      	ldr	r3, [r5, #4]
 801e6ac:	9300      	str	r3, [sp, #0]
 801e6ae:	4a54      	ldr	r2, [pc, #336]	; (801e800 <__strftime+0x7b8>)
 801e6b0:	68ab      	ldr	r3, [r5, #8]
 801e6b2:	eba8 0104 	sub.w	r1, r8, r4
 801e6b6:	eb09 0004 	add.w	r0, r9, r4
 801e6ba:	f001 fc93 	bl	801ffe4 <sniprintf>
 801e6be:	e683      	b.n	801e3c8 <__strftime+0x380>
 801e6c0:	6a2b      	ldr	r3, [r5, #32]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	db79      	blt.n	801e7ba <__strftime+0x772>
 801e6c6:	f000 fb01 	bl	801eccc <__tz_lock>
 801e6ca:	9b04      	ldr	r3, [sp, #16]
 801e6cc:	b90b      	cbnz	r3, 801e6d2 <__strftime+0x68a>
 801e6ce:	f000 fb09 	bl	801ece4 <_tzset_unlocked>
 801e6d2:	f000 fec5 	bl	801f460 <__gettzinfo>
 801e6d6:	6a2b      	ldr	r3, [r5, #32]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	bfcc      	ite	gt
 801e6dc:	2350      	movgt	r3, #80	; 0x50
 801e6de:	2328      	movle	r3, #40	; 0x28
 801e6e0:	58c3      	ldr	r3, [r0, r3]
 801e6e2:	f1c3 0a00 	rsb	sl, r3, #0
 801e6e6:	f000 faf7 	bl	801ecd8 <__tz_unlock>
 801e6ea:	2301      	movs	r3, #1
 801e6ec:	9304      	str	r3, [sp, #16]
 801e6ee:	f8d5 c014 	ldr.w	ip, [r5, #20]
 801e6f2:	4662      	mov	r2, ip
 801e6f4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 801e6f8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801e6fc:	9602      	str	r6, [sp, #8]
 801e6fe:	f143 36ff 	adc.w	r6, r3, #4294967295
 801e702:	9603      	str	r6, [sp, #12]
 801e704:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801e708:	2e00      	cmp	r6, #0
 801e70a:	f177 0600 	sbcs.w	r6, r7, #0
 801e70e:	eba8 0104 	sub.w	r1, r8, r4
 801e712:	eb09 0004 	add.w	r0, r9, r4
 801e716:	da05      	bge.n	801e724 <__strftime+0x6dc>
 801e718:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 801e71c:	f143 33ff 	adc.w	r3, r3, #4294967295
 801e720:	9602      	str	r6, [sp, #8]
 801e722:	9303      	str	r3, [sp, #12]
 801e724:	9b02      	ldr	r3, [sp, #8]
 801e726:	089e      	lsrs	r6, r3, #2
 801e728:	9b03      	ldr	r3, [sp, #12]
 801e72a:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 801e72e:	f10c 32ff 	add.w	r2, ip, #4294967295
 801e732:	109f      	asrs	r7, r3, #2
 801e734:	2364      	movs	r3, #100	; 0x64
 801e736:	fb92 f3f3 	sdiv	r3, r2, r3
 801e73a:	1af6      	subs	r6, r6, r3
 801e73c:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 801e740:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 801e744:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801e748:	fb92 f3f3 	sdiv	r3, r2, r3
 801e74c:	18f6      	adds	r6, r6, r3
 801e74e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e752:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801e756:	f240 136d 	movw	r3, #365	; 0x16d
 801e75a:	fb03 fc0c 	mul.w	ip, r3, ip
 801e75e:	69eb      	ldr	r3, [r5, #28]
 801e760:	eb16 060c 	adds.w	r6, r6, ip
 801e764:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801e768:	18f6      	adds	r6, r6, r3
 801e76a:	f04f 0c18 	mov.w	ip, #24
 801e76e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e772:	fba6 230c 	umull	r2, r3, r6, ip
 801e776:	68ae      	ldr	r6, [r5, #8]
 801e778:	fb0c 3307 	mla	r3, ip, r7, r3
 801e77c:	1992      	adds	r2, r2, r6
 801e77e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 801e782:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e786:	fba2 670c 	umull	r6, r7, r2, ip
 801e78a:	fb0c 7703 	mla	r7, ip, r3, r7
 801e78e:	686b      	ldr	r3, [r5, #4]
 801e790:	18f6      	adds	r6, r6, r3
 801e792:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801e796:	fba6 230c 	umull	r2, r3, r6, ip
 801e79a:	682e      	ldr	r6, [r5, #0]
 801e79c:	fb0c 3307 	mla	r3, ip, r7, r3
 801e7a0:	1992      	adds	r2, r2, r6
 801e7a2:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801e7a6:	ebb2 020a 	subs.w	r2, r2, sl
 801e7aa:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 801e7ae:	e9cd 2300 	strd	r2, r3, [sp]
 801e7b2:	4a14      	ldr	r2, [pc, #80]	; (801e804 <__strftime+0x7bc>)
 801e7b4:	f001 fc16 	bl	801ffe4 <sniprintf>
 801e7b8:	e606      	b.n	801e3c8 <__strftime+0x380>
 801e7ba:	f04f 0a00 	mov.w	sl, #0
 801e7be:	e796      	b.n	801e6ee <__strftime+0x6a6>
 801e7c0:	682b      	ldr	r3, [r5, #0]
 801e7c2:	e66a      	b.n	801e49a <__strftime+0x452>
 801e7c4:	f108 33ff 	add.w	r3, r8, #4294967295
 801e7c8:	42a3      	cmp	r3, r4
 801e7ca:	f67f ac6c 	bls.w	801e0a6 <__strftime+0x5e>
 801e7ce:	2309      	movs	r3, #9
 801e7d0:	e740      	b.n	801e654 <__strftime+0x60c>
 801e7d2:	682b      	ldr	r3, [r5, #0]
 801e7d4:	9301      	str	r3, [sp, #4]
 801e7d6:	686b      	ldr	r3, [r5, #4]
 801e7d8:	9300      	str	r3, [sp, #0]
 801e7da:	4a0b      	ldr	r2, [pc, #44]	; (801e808 <__strftime+0x7c0>)
 801e7dc:	68ab      	ldr	r3, [r5, #8]
 801e7de:	e5e0      	b.n	801e3a2 <__strftime+0x35a>
 801e7e0:	fffff894 	.word	0xfffff894
 801e7e4:	fffff895 	.word	0xfffff895
 801e7e8:	080258db 	.word	0x080258db
 801e7ec:	080258bc 	.word	0x080258bc
 801e7f0:	080258ca 	.word	0x080258ca
 801e7f4:	080258df 	.word	0x080258df
 801e7f8:	08025a30 	.word	0x08025a30
 801e7fc:	08025ba5 	.word	0x08025ba5
 801e800:	080258ee 	.word	0x080258ee
 801e804:	080258e4 	.word	0x080258e4
 801e808:	080258e9 	.word	0x080258e9
 801e80c:	f108 33ff 	add.w	r3, r8, #4294967295
 801e810:	42a3      	cmp	r3, r4
 801e812:	f67f ac48 	bls.w	801e0a6 <__strftime+0x5e>
 801e816:	69ab      	ldr	r3, [r5, #24]
 801e818:	eb09 0204 	add.w	r2, r9, r4
 801e81c:	3401      	adds	r4, #1
 801e81e:	b913      	cbnz	r3, 801e826 <__strftime+0x7de>
 801e820:	2337      	movs	r3, #55	; 0x37
 801e822:	7013      	strb	r3, [r2, #0]
 801e824:	e512      	b.n	801e24c <__strftime+0x204>
 801e826:	3330      	adds	r3, #48	; 0x30
 801e828:	e7fb      	b.n	801e822 <__strftime+0x7da>
 801e82a:	69eb      	ldr	r3, [r5, #28]
 801e82c:	69aa      	ldr	r2, [r5, #24]
 801e82e:	3307      	adds	r3, #7
 801e830:	1a9b      	subs	r3, r3, r2
 801e832:	2207      	movs	r2, #7
 801e834:	fb93 f3f2 	sdiv	r3, r3, r2
 801e838:	e62f      	b.n	801e49a <__strftime+0x452>
 801e83a:	4628      	mov	r0, r5
 801e83c:	f7ff fba2 	bl	801df84 <iso_year_adjust>
 801e840:	69aa      	ldr	r2, [r5, #24]
 801e842:	b132      	cbz	r2, 801e852 <__strftime+0x80a>
 801e844:	3a01      	subs	r2, #1
 801e846:	2800      	cmp	r0, #0
 801e848:	dc28      	bgt.n	801e89c <__strftime+0x854>
 801e84a:	69eb      	ldr	r3, [r5, #28]
 801e84c:	d103      	bne.n	801e856 <__strftime+0x80e>
 801e84e:	330a      	adds	r3, #10
 801e850:	e7ee      	b.n	801e830 <__strftime+0x7e8>
 801e852:	2206      	movs	r2, #6
 801e854:	e7f7      	b.n	801e846 <__strftime+0x7fe>
 801e856:	6968      	ldr	r0, [r5, #20]
 801e858:	2800      	cmp	r0, #0
 801e85a:	eba2 0303 	sub.w	r3, r2, r3
 801e85e:	f240 726b 	movw	r2, #1899	; 0x76b
 801e862:	bfa8      	it	ge
 801e864:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801e868:	4410      	add	r0, r2
 801e86a:	0782      	lsls	r2, r0, #30
 801e86c:	d105      	bne.n	801e87a <__strftime+0x832>
 801e86e:	2264      	movs	r2, #100	; 0x64
 801e870:	fb90 f1f2 	sdiv	r1, r0, r2
 801e874:	fb02 0111 	mls	r1, r2, r1, r0
 801e878:	b971      	cbnz	r1, 801e898 <__strftime+0x850>
 801e87a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801e87e:	fb90 f2f1 	sdiv	r2, r0, r1
 801e882:	fb01 0212 	mls	r2, r1, r2, r0
 801e886:	fab2 f282 	clz	r2, r2
 801e88a:	0952      	lsrs	r2, r2, #5
 801e88c:	1a9a      	subs	r2, r3, r2
 801e88e:	2a05      	cmp	r2, #5
 801e890:	bfb4      	ite	lt
 801e892:	2335      	movlt	r3, #53	; 0x35
 801e894:	2334      	movge	r3, #52	; 0x34
 801e896:	e600      	b.n	801e49a <__strftime+0x452>
 801e898:	2201      	movs	r2, #1
 801e89a:	e7f7      	b.n	801e88c <__strftime+0x844>
 801e89c:	2301      	movs	r3, #1
 801e89e:	e5fc      	b.n	801e49a <__strftime+0x452>
 801e8a0:	f108 33ff 	add.w	r3, r8, #4294967295
 801e8a4:	42a3      	cmp	r3, r4
 801e8a6:	f67f abfe 	bls.w	801e0a6 <__strftime+0x5e>
 801e8aa:	69ab      	ldr	r3, [r5, #24]
 801e8ac:	3330      	adds	r3, #48	; 0x30
 801e8ae:	e6d1      	b.n	801e654 <__strftime+0x60c>
 801e8b0:	69ab      	ldr	r3, [r5, #24]
 801e8b2:	b13b      	cbz	r3, 801e8c4 <__strftime+0x87c>
 801e8b4:	3b01      	subs	r3, #1
 801e8b6:	69ea      	ldr	r2, [r5, #28]
 801e8b8:	3207      	adds	r2, #7
 801e8ba:	1ad2      	subs	r2, r2, r3
 801e8bc:	2307      	movs	r3, #7
 801e8be:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8c2:	e5ea      	b.n	801e49a <__strftime+0x452>
 801e8c4:	2306      	movs	r3, #6
 801e8c6:	e7f6      	b.n	801e8b6 <__strftime+0x86e>
 801e8c8:	6968      	ldr	r0, [r5, #20]
 801e8ca:	2800      	cmp	r0, #0
 801e8cc:	db05      	blt.n	801e8da <__strftime+0x892>
 801e8ce:	2264      	movs	r2, #100	; 0x64
 801e8d0:	fb90 f3f2 	sdiv	r3, r0, r2
 801e8d4:	fb03 0312 	mls	r3, r3, r2, r0
 801e8d8:	e5df      	b.n	801e49a <__strftime+0x452>
 801e8da:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801e8de:	f000 fcf1 	bl	801f2c4 <abs>
 801e8e2:	e7f4      	b.n	801e8ce <__strftime+0x886>
 801e8e4:	696b      	ldr	r3, [r5, #20]
 801e8e6:	4a4c      	ldr	r2, [pc, #304]	; (801ea18 <__strftime+0x9d0>)
 801e8e8:	4293      	cmp	r3, r2
 801e8ea:	da09      	bge.n	801e900 <__strftime+0x8b8>
 801e8ec:	212d      	movs	r1, #45	; 0x2d
 801e8ee:	f88d 1020 	strb.w	r1, [sp, #32]
 801e8f2:	eba2 0a03 	sub.w	sl, r2, r3
 801e8f6:	b106      	cbz	r6, 801e8fa <__strftime+0x8b2>
 801e8f8:	3e01      	subs	r6, #1
 801e8fa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 801e8fe:	e00b      	b.n	801e918 <__strftime+0x8d0>
 801e900:	2f2b      	cmp	r7, #43	; 0x2b
 801e902:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 801e906:	d106      	bne.n	801e916 <__strftime+0x8ce>
 801e908:	f242 730f 	movw	r3, #9999	; 0x270f
 801e90c:	459a      	cmp	sl, r3
 801e90e:	d902      	bls.n	801e916 <__strftime+0x8ce>
 801e910:	f88d 7020 	strb.w	r7, [sp, #32]
 801e914:	e7ef      	b.n	801e8f6 <__strftime+0x8ae>
 801e916:	ab08      	add	r3, sp, #32
 801e918:	2225      	movs	r2, #37	; 0x25
 801e91a:	701a      	strb	r2, [r3, #0]
 801e91c:	b937      	cbnz	r7, 801e92c <__strftime+0x8e4>
 801e91e:	1c58      	adds	r0, r3, #1
 801e920:	493e      	ldr	r1, [pc, #248]	; (801ea1c <__strftime+0x9d4>)
 801e922:	f001 fbbf 	bl	80200a4 <strcpy>
 801e926:	f8cd a000 	str.w	sl, [sp]
 801e92a:	e665      	b.n	801e5f8 <__strftime+0x5b0>
 801e92c:	2230      	movs	r2, #48	; 0x30
 801e92e:	1c98      	adds	r0, r3, #2
 801e930:	705a      	strb	r2, [r3, #1]
 801e932:	e7f5      	b.n	801e920 <__strftime+0x8d8>
 801e934:	6a2b      	ldr	r3, [r5, #32]
 801e936:	2b00      	cmp	r3, #0
 801e938:	f6ff ac88 	blt.w	801e24c <__strftime+0x204>
 801e93c:	f000 f9c6 	bl	801eccc <__tz_lock>
 801e940:	9b04      	ldr	r3, [sp, #16]
 801e942:	b90b      	cbnz	r3, 801e948 <__strftime+0x900>
 801e944:	f000 f9ce 	bl	801ece4 <_tzset_unlocked>
 801e948:	f000 fd8a 	bl	801f460 <__gettzinfo>
 801e94c:	6a2b      	ldr	r3, [r5, #32]
 801e94e:	2b00      	cmp	r3, #0
 801e950:	bfcc      	ite	gt
 801e952:	2350      	movgt	r3, #80	; 0x50
 801e954:	2328      	movle	r3, #40	; 0x28
 801e956:	eb09 0704 	add.w	r7, r9, r4
 801e95a:	58c6      	ldr	r6, [r0, r3]
 801e95c:	f000 f9bc 	bl	801ecd8 <__tz_unlock>
 801e960:	4276      	negs	r6, r6
 801e962:	233c      	movs	r3, #60	; 0x3c
 801e964:	fb96 f0f3 	sdiv	r0, r6, r3
 801e968:	f000 fe3e 	bl	801f5e8 <labs>
 801e96c:	233c      	movs	r3, #60	; 0x3c
 801e96e:	eba8 0a04 	sub.w	sl, r8, r4
 801e972:	fb90 f2f3 	sdiv	r2, r0, r3
 801e976:	fb02 0013 	mls	r0, r2, r3, r0
 801e97a:	9000      	str	r0, [sp, #0]
 801e97c:	4a28      	ldr	r2, [pc, #160]	; (801ea20 <__strftime+0x9d8>)
 801e97e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801e982:	4651      	mov	r1, sl
 801e984:	4638      	mov	r0, r7
 801e986:	fb96 f3f3 	sdiv	r3, r6, r3
 801e98a:	f001 fb2b 	bl	801ffe4 <sniprintf>
 801e98e:	2800      	cmp	r0, #0
 801e990:	f6ff ab89 	blt.w	801e0a6 <__strftime+0x5e>
 801e994:	4404      	add	r4, r0
 801e996:	45a0      	cmp	r8, r4
 801e998:	f67f ab85 	bls.w	801e0a6 <__strftime+0x5e>
 801e99c:	2301      	movs	r3, #1
 801e99e:	9304      	str	r3, [sp, #16]
 801e9a0:	e454      	b.n	801e24c <__strftime+0x204>
 801e9a2:	6a2b      	ldr	r3, [r5, #32]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	f6ff ac51 	blt.w	801e24c <__strftime+0x204>
 801e9aa:	f000 f98f 	bl	801eccc <__tz_lock>
 801e9ae:	9b04      	ldr	r3, [sp, #16]
 801e9b0:	b90b      	cbnz	r3, 801e9b6 <__strftime+0x96e>
 801e9b2:	f000 f997 	bl	801ece4 <_tzset_unlocked>
 801e9b6:	6a2b      	ldr	r3, [r5, #32]
 801e9b8:	4a1a      	ldr	r2, [pc, #104]	; (801ea24 <__strftime+0x9dc>)
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	bfd4      	ite	le
 801e9be:	2300      	movle	r3, #0
 801e9c0:	2301      	movgt	r3, #1
 801e9c2:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801e9c6:	4630      	mov	r0, r6
 801e9c8:	f7e1 fc38 	bl	800023c <strlen>
 801e9cc:	3e01      	subs	r6, #1
 801e9ce:	4420      	add	r0, r4
 801e9d0:	f108 33ff 	add.w	r3, r8, #4294967295
 801e9d4:	42a0      	cmp	r0, r4
 801e9d6:	d102      	bne.n	801e9de <__strftime+0x996>
 801e9d8:	f000 f97e 	bl	801ecd8 <__tz_unlock>
 801e9dc:	e7de      	b.n	801e99c <__strftime+0x954>
 801e9de:	42a3      	cmp	r3, r4
 801e9e0:	d905      	bls.n	801e9ee <__strftime+0x9a6>
 801e9e2:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801e9e6:	f809 2004 	strb.w	r2, [r9, r4]
 801e9ea:	3401      	adds	r4, #1
 801e9ec:	e7f2      	b.n	801e9d4 <__strftime+0x98c>
 801e9ee:	f000 f973 	bl	801ecd8 <__tz_unlock>
 801e9f2:	f7ff bb58 	b.w	801e0a6 <__strftime+0x5e>
 801e9f6:	f108 33ff 	add.w	r3, r8, #4294967295
 801e9fa:	42a3      	cmp	r3, r4
 801e9fc:	f67f ab53 	bls.w	801e0a6 <__strftime+0x5e>
 801ea00:	2325      	movs	r3, #37	; 0x25
 801ea02:	e627      	b.n	801e654 <__strftime+0x60c>
 801ea04:	f1b8 0f00 	cmp.w	r8, #0
 801ea08:	d002      	beq.n	801ea10 <__strftime+0x9c8>
 801ea0a:	2300      	movs	r3, #0
 801ea0c:	f809 3004 	strb.w	r3, [r9, r4]
 801ea10:	4620      	mov	r0, r4
 801ea12:	b011      	add	sp, #68	; 0x44
 801ea14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea18:	fffff894 	.word	0xfffff894
 801ea1c:	080258db 	.word	0x080258db
 801ea20:	080258f8 	.word	0x080258f8
 801ea24:	20000168 	.word	0x20000168

0801ea28 <strftime>:
 801ea28:	b513      	push	{r0, r1, r4, lr}
 801ea2a:	4c03      	ldr	r4, [pc, #12]	; (801ea38 <strftime+0x10>)
 801ea2c:	9400      	str	r4, [sp, #0]
 801ea2e:	f7ff fb0b 	bl	801e048 <__strftime>
 801ea32:	b002      	add	sp, #8
 801ea34:	bd10      	pop	{r4, pc}
 801ea36:	bf00      	nop
 801ea38:	200001d0 	.word	0x200001d0

0801ea3c <strstr>:
 801ea3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ea3e:	780c      	ldrb	r4, [r1, #0]
 801ea40:	b164      	cbz	r4, 801ea5c <strstr+0x20>
 801ea42:	4603      	mov	r3, r0
 801ea44:	781a      	ldrb	r2, [r3, #0]
 801ea46:	4618      	mov	r0, r3
 801ea48:	1c5e      	adds	r6, r3, #1
 801ea4a:	b90a      	cbnz	r2, 801ea50 <strstr+0x14>
 801ea4c:	4610      	mov	r0, r2
 801ea4e:	e005      	b.n	801ea5c <strstr+0x20>
 801ea50:	4294      	cmp	r4, r2
 801ea52:	d108      	bne.n	801ea66 <strstr+0x2a>
 801ea54:	460d      	mov	r5, r1
 801ea56:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801ea5a:	b902      	cbnz	r2, 801ea5e <strstr+0x22>
 801ea5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ea5e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801ea62:	4297      	cmp	r7, r2
 801ea64:	d0f7      	beq.n	801ea56 <strstr+0x1a>
 801ea66:	4633      	mov	r3, r6
 801ea68:	e7ec      	b.n	801ea44 <strstr+0x8>
	...

0801ea6c <_strtoul_l.isra.0>:
 801ea6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea70:	4e3b      	ldr	r6, [pc, #236]	; (801eb60 <_strtoul_l.isra.0+0xf4>)
 801ea72:	4686      	mov	lr, r0
 801ea74:	468c      	mov	ip, r1
 801ea76:	4660      	mov	r0, ip
 801ea78:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801ea7c:	5da5      	ldrb	r5, [r4, r6]
 801ea7e:	f015 0508 	ands.w	r5, r5, #8
 801ea82:	d1f8      	bne.n	801ea76 <_strtoul_l.isra.0+0xa>
 801ea84:	2c2d      	cmp	r4, #45	; 0x2d
 801ea86:	d134      	bne.n	801eaf2 <_strtoul_l.isra.0+0x86>
 801ea88:	f89c 4000 	ldrb.w	r4, [ip]
 801ea8c:	f04f 0801 	mov.w	r8, #1
 801ea90:	f100 0c02 	add.w	ip, r0, #2
 801ea94:	2b00      	cmp	r3, #0
 801ea96:	d05e      	beq.n	801eb56 <_strtoul_l.isra.0+0xea>
 801ea98:	2b10      	cmp	r3, #16
 801ea9a:	d10c      	bne.n	801eab6 <_strtoul_l.isra.0+0x4a>
 801ea9c:	2c30      	cmp	r4, #48	; 0x30
 801ea9e:	d10a      	bne.n	801eab6 <_strtoul_l.isra.0+0x4a>
 801eaa0:	f89c 0000 	ldrb.w	r0, [ip]
 801eaa4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801eaa8:	2858      	cmp	r0, #88	; 0x58
 801eaaa:	d14f      	bne.n	801eb4c <_strtoul_l.isra.0+0xe0>
 801eaac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 801eab0:	2310      	movs	r3, #16
 801eab2:	f10c 0c02 	add.w	ip, ip, #2
 801eab6:	f04f 37ff 	mov.w	r7, #4294967295
 801eaba:	2500      	movs	r5, #0
 801eabc:	fbb7 f7f3 	udiv	r7, r7, r3
 801eac0:	fb03 f907 	mul.w	r9, r3, r7
 801eac4:	ea6f 0909 	mvn.w	r9, r9
 801eac8:	4628      	mov	r0, r5
 801eaca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801eace:	2e09      	cmp	r6, #9
 801ead0:	d818      	bhi.n	801eb04 <_strtoul_l.isra.0+0x98>
 801ead2:	4634      	mov	r4, r6
 801ead4:	42a3      	cmp	r3, r4
 801ead6:	dd24      	ble.n	801eb22 <_strtoul_l.isra.0+0xb6>
 801ead8:	2d00      	cmp	r5, #0
 801eada:	db1f      	blt.n	801eb1c <_strtoul_l.isra.0+0xb0>
 801eadc:	4287      	cmp	r7, r0
 801eade:	d31d      	bcc.n	801eb1c <_strtoul_l.isra.0+0xb0>
 801eae0:	d101      	bne.n	801eae6 <_strtoul_l.isra.0+0x7a>
 801eae2:	45a1      	cmp	r9, r4
 801eae4:	db1a      	blt.n	801eb1c <_strtoul_l.isra.0+0xb0>
 801eae6:	fb00 4003 	mla	r0, r0, r3, r4
 801eaea:	2501      	movs	r5, #1
 801eaec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801eaf0:	e7eb      	b.n	801eaca <_strtoul_l.isra.0+0x5e>
 801eaf2:	2c2b      	cmp	r4, #43	; 0x2b
 801eaf4:	bf08      	it	eq
 801eaf6:	f89c 4000 	ldrbeq.w	r4, [ip]
 801eafa:	46a8      	mov	r8, r5
 801eafc:	bf08      	it	eq
 801eafe:	f100 0c02 	addeq.w	ip, r0, #2
 801eb02:	e7c7      	b.n	801ea94 <_strtoul_l.isra.0+0x28>
 801eb04:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801eb08:	2e19      	cmp	r6, #25
 801eb0a:	d801      	bhi.n	801eb10 <_strtoul_l.isra.0+0xa4>
 801eb0c:	3c37      	subs	r4, #55	; 0x37
 801eb0e:	e7e1      	b.n	801ead4 <_strtoul_l.isra.0+0x68>
 801eb10:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 801eb14:	2e19      	cmp	r6, #25
 801eb16:	d804      	bhi.n	801eb22 <_strtoul_l.isra.0+0xb6>
 801eb18:	3c57      	subs	r4, #87	; 0x57
 801eb1a:	e7db      	b.n	801ead4 <_strtoul_l.isra.0+0x68>
 801eb1c:	f04f 35ff 	mov.w	r5, #4294967295
 801eb20:	e7e4      	b.n	801eaec <_strtoul_l.isra.0+0x80>
 801eb22:	2d00      	cmp	r5, #0
 801eb24:	da07      	bge.n	801eb36 <_strtoul_l.isra.0+0xca>
 801eb26:	2322      	movs	r3, #34	; 0x22
 801eb28:	f8ce 3000 	str.w	r3, [lr]
 801eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb30:	b942      	cbnz	r2, 801eb44 <_strtoul_l.isra.0+0xd8>
 801eb32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb36:	f1b8 0f00 	cmp.w	r8, #0
 801eb3a:	d000      	beq.n	801eb3e <_strtoul_l.isra.0+0xd2>
 801eb3c:	4240      	negs	r0, r0
 801eb3e:	2a00      	cmp	r2, #0
 801eb40:	d0f7      	beq.n	801eb32 <_strtoul_l.isra.0+0xc6>
 801eb42:	b10d      	cbz	r5, 801eb48 <_strtoul_l.isra.0+0xdc>
 801eb44:	f10c 31ff 	add.w	r1, ip, #4294967295
 801eb48:	6011      	str	r1, [r2, #0]
 801eb4a:	e7f2      	b.n	801eb32 <_strtoul_l.isra.0+0xc6>
 801eb4c:	2430      	movs	r4, #48	; 0x30
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d1b1      	bne.n	801eab6 <_strtoul_l.isra.0+0x4a>
 801eb52:	2308      	movs	r3, #8
 801eb54:	e7af      	b.n	801eab6 <_strtoul_l.isra.0+0x4a>
 801eb56:	2c30      	cmp	r4, #48	; 0x30
 801eb58:	d0a2      	beq.n	801eaa0 <_strtoul_l.isra.0+0x34>
 801eb5a:	230a      	movs	r3, #10
 801eb5c:	e7ab      	b.n	801eab6 <_strtoul_l.isra.0+0x4a>
 801eb5e:	bf00      	nop
 801eb60:	08025ba5 	.word	0x08025ba5

0801eb64 <_strtoul_r>:
 801eb64:	f7ff bf82 	b.w	801ea6c <_strtoul_l.isra.0>

0801eb68 <strtoul>:
 801eb68:	4613      	mov	r3, r2
 801eb6a:	460a      	mov	r2, r1
 801eb6c:	4601      	mov	r1, r0
 801eb6e:	4802      	ldr	r0, [pc, #8]	; (801eb78 <strtoul+0x10>)
 801eb70:	6800      	ldr	r0, [r0, #0]
 801eb72:	f7ff bf7b 	b.w	801ea6c <_strtoul_l.isra.0>
 801eb76:	bf00      	nop
 801eb78:	20000104 	.word	0x20000104

0801eb7c <__tzcalc_limits>:
 801eb7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb80:	4680      	mov	r8, r0
 801eb82:	f000 fc6d 	bl	801f460 <__gettzinfo>
 801eb86:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801eb8a:	4598      	cmp	r8, r3
 801eb8c:	f340 8098 	ble.w	801ecc0 <__tzcalc_limits+0x144>
 801eb90:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801eb94:	4443      	add	r3, r8
 801eb96:	109b      	asrs	r3, r3, #2
 801eb98:	f240 126d 	movw	r2, #365	; 0x16d
 801eb9c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 801eba0:	fb02 3505 	mla	r5, r2, r5, r3
 801eba4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801eba8:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 801ebac:	fb93 f3f2 	sdiv	r3, r3, r2
 801ebb0:	441d      	add	r5, r3
 801ebb2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801ebb6:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 801ebba:	fb98 f7f3 	sdiv	r7, r8, r3
 801ebbe:	fb03 8717 	mls	r7, r3, r7, r8
 801ebc2:	4442      	add	r2, r8
 801ebc4:	fab7 fc87 	clz	ip, r7
 801ebc8:	fbb2 f2f3 	udiv	r2, r2, r3
 801ebcc:	f008 0303 	and.w	r3, r8, #3
 801ebd0:	4415      	add	r5, r2
 801ebd2:	2264      	movs	r2, #100	; 0x64
 801ebd4:	f8c0 8004 	str.w	r8, [r0, #4]
 801ebd8:	fb98 f6f2 	sdiv	r6, r8, r2
 801ebdc:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801ebe0:	fb02 8616 	mls	r6, r2, r6, r8
 801ebe4:	4604      	mov	r4, r0
 801ebe6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801ebea:	9300      	str	r3, [sp, #0]
 801ebec:	f04f 0e07 	mov.w	lr, #7
 801ebf0:	7a22      	ldrb	r2, [r4, #8]
 801ebf2:	6963      	ldr	r3, [r4, #20]
 801ebf4:	2a4a      	cmp	r2, #74	; 0x4a
 801ebf6:	d128      	bne.n	801ec4a <__tzcalc_limits+0xce>
 801ebf8:	9900      	ldr	r1, [sp, #0]
 801ebfa:	18ea      	adds	r2, r5, r3
 801ebfc:	b901      	cbnz	r1, 801ec00 <__tzcalc_limits+0x84>
 801ebfe:	b906      	cbnz	r6, 801ec02 <__tzcalc_limits+0x86>
 801ec00:	bb0f      	cbnz	r7, 801ec46 <__tzcalc_limits+0xca>
 801ec02:	2b3b      	cmp	r3, #59	; 0x3b
 801ec04:	bfd4      	ite	le
 801ec06:	2300      	movle	r3, #0
 801ec08:	2301      	movgt	r3, #1
 801ec0a:	4413      	add	r3, r2
 801ec0c:	1e5a      	subs	r2, r3, #1
 801ec0e:	69a3      	ldr	r3, [r4, #24]
 801ec10:	492c      	ldr	r1, [pc, #176]	; (801ecc4 <__tzcalc_limits+0x148>)
 801ec12:	fb01 3202 	mla	r2, r1, r2, r3
 801ec16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ec18:	4413      	add	r3, r2
 801ec1a:	461a      	mov	r2, r3
 801ec1c:	17db      	asrs	r3, r3, #31
 801ec1e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 801ec22:	3428      	adds	r4, #40	; 0x28
 801ec24:	45a3      	cmp	fp, r4
 801ec26:	d1e3      	bne.n	801ebf0 <__tzcalc_limits+0x74>
 801ec28:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 801ec2c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 801ec30:	4294      	cmp	r4, r2
 801ec32:	eb75 0303 	sbcs.w	r3, r5, r3
 801ec36:	bfb4      	ite	lt
 801ec38:	2301      	movlt	r3, #1
 801ec3a:	2300      	movge	r3, #0
 801ec3c:	6003      	str	r3, [r0, #0]
 801ec3e:	2001      	movs	r0, #1
 801ec40:	b003      	add	sp, #12
 801ec42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ec46:	2300      	movs	r3, #0
 801ec48:	e7df      	b.n	801ec0a <__tzcalc_limits+0x8e>
 801ec4a:	2a44      	cmp	r2, #68	; 0x44
 801ec4c:	d101      	bne.n	801ec52 <__tzcalc_limits+0xd6>
 801ec4e:	18ea      	adds	r2, r5, r3
 801ec50:	e7dd      	b.n	801ec0e <__tzcalc_limits+0x92>
 801ec52:	9a00      	ldr	r2, [sp, #0]
 801ec54:	bb72      	cbnz	r2, 801ecb4 <__tzcalc_limits+0x138>
 801ec56:	2e00      	cmp	r6, #0
 801ec58:	bf0c      	ite	eq
 801ec5a:	46e0      	moveq	r8, ip
 801ec5c:	f04f 0801 	movne.w	r8, #1
 801ec60:	4919      	ldr	r1, [pc, #100]	; (801ecc8 <__tzcalc_limits+0x14c>)
 801ec62:	68e2      	ldr	r2, [r4, #12]
 801ec64:	9201      	str	r2, [sp, #4]
 801ec66:	f04f 0a30 	mov.w	sl, #48	; 0x30
 801ec6a:	fb0a 1808 	mla	r8, sl, r8, r1
 801ec6e:	462a      	mov	r2, r5
 801ec70:	f04f 0900 	mov.w	r9, #0
 801ec74:	f1a8 0804 	sub.w	r8, r8, #4
 801ec78:	9901      	ldr	r1, [sp, #4]
 801ec7a:	f109 0901 	add.w	r9, r9, #1
 801ec7e:	4549      	cmp	r1, r9
 801ec80:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801ec84:	dc18      	bgt.n	801ecb8 <__tzcalc_limits+0x13c>
 801ec86:	f102 0804 	add.w	r8, r2, #4
 801ec8a:	fb98 f9fe 	sdiv	r9, r8, lr
 801ec8e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801ec92:	eba8 0909 	sub.w	r9, r8, r9
 801ec96:	ebb3 0909 	subs.w	r9, r3, r9
 801ec9a:	6923      	ldr	r3, [r4, #16]
 801ec9c:	f103 33ff 	add.w	r3, r3, #4294967295
 801eca0:	bf48      	it	mi
 801eca2:	f109 0907 	addmi.w	r9, r9, #7
 801eca6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ecaa:	444b      	add	r3, r9
 801ecac:	4553      	cmp	r3, sl
 801ecae:	da05      	bge.n	801ecbc <__tzcalc_limits+0x140>
 801ecb0:	441a      	add	r2, r3
 801ecb2:	e7ac      	b.n	801ec0e <__tzcalc_limits+0x92>
 801ecb4:	46e0      	mov	r8, ip
 801ecb6:	e7d3      	b.n	801ec60 <__tzcalc_limits+0xe4>
 801ecb8:	4452      	add	r2, sl
 801ecba:	e7dd      	b.n	801ec78 <__tzcalc_limits+0xfc>
 801ecbc:	3b07      	subs	r3, #7
 801ecbe:	e7f5      	b.n	801ecac <__tzcalc_limits+0x130>
 801ecc0:	2000      	movs	r0, #0
 801ecc2:	e7bd      	b.n	801ec40 <__tzcalc_limits+0xc4>
 801ecc4:	00015180 	.word	0x00015180
 801ecc8:	080257ec 	.word	0x080257ec

0801eccc <__tz_lock>:
 801eccc:	4801      	ldr	r0, [pc, #4]	; (801ecd4 <__tz_lock+0x8>)
 801ecce:	f7fe bed9 	b.w	801da84 <__retarget_lock_acquire>
 801ecd2:	bf00      	nop
 801ecd4:	20000d9f 	.word	0x20000d9f

0801ecd8 <__tz_unlock>:
 801ecd8:	4801      	ldr	r0, [pc, #4]	; (801ece0 <__tz_unlock+0x8>)
 801ecda:	f7fe bed5 	b.w	801da88 <__retarget_lock_release>
 801ecde:	bf00      	nop
 801ece0:	20000d9f 	.word	0x20000d9f

0801ece4 <_tzset_unlocked>:
 801ece4:	4b01      	ldr	r3, [pc, #4]	; (801ecec <_tzset_unlocked+0x8>)
 801ece6:	6818      	ldr	r0, [r3, #0]
 801ece8:	f000 b802 	b.w	801ecf0 <_tzset_unlocked_r>
 801ecec:	20000104 	.word	0x20000104

0801ecf0 <_tzset_unlocked_r>:
 801ecf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ecf4:	b08d      	sub	sp, #52	; 0x34
 801ecf6:	4607      	mov	r7, r0
 801ecf8:	f000 fbb2 	bl	801f460 <__gettzinfo>
 801ecfc:	49ae      	ldr	r1, [pc, #696]	; (801efb8 <_tzset_unlocked_r+0x2c8>)
 801ecfe:	4eaf      	ldr	r6, [pc, #700]	; (801efbc <_tzset_unlocked_r+0x2cc>)
 801ed00:	4605      	mov	r5, r0
 801ed02:	4638      	mov	r0, r7
 801ed04:	f000 fba4 	bl	801f450 <_getenv_r>
 801ed08:	4604      	mov	r4, r0
 801ed0a:	b970      	cbnz	r0, 801ed2a <_tzset_unlocked_r+0x3a>
 801ed0c:	4bac      	ldr	r3, [pc, #688]	; (801efc0 <_tzset_unlocked_r+0x2d0>)
 801ed0e:	4aad      	ldr	r2, [pc, #692]	; (801efc4 <_tzset_unlocked_r+0x2d4>)
 801ed10:	6018      	str	r0, [r3, #0]
 801ed12:	4bad      	ldr	r3, [pc, #692]	; (801efc8 <_tzset_unlocked_r+0x2d8>)
 801ed14:	6018      	str	r0, [r3, #0]
 801ed16:	4bad      	ldr	r3, [pc, #692]	; (801efcc <_tzset_unlocked_r+0x2dc>)
 801ed18:	6830      	ldr	r0, [r6, #0]
 801ed1a:	e9c3 2200 	strd	r2, r2, [r3]
 801ed1e:	f7fe ff21 	bl	801db64 <free>
 801ed22:	6034      	str	r4, [r6, #0]
 801ed24:	b00d      	add	sp, #52	; 0x34
 801ed26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed2a:	6831      	ldr	r1, [r6, #0]
 801ed2c:	2900      	cmp	r1, #0
 801ed2e:	d15f      	bne.n	801edf0 <_tzset_unlocked_r+0x100>
 801ed30:	6830      	ldr	r0, [r6, #0]
 801ed32:	f7fe ff17 	bl	801db64 <free>
 801ed36:	4620      	mov	r0, r4
 801ed38:	f7e1 fa80 	bl	800023c <strlen>
 801ed3c:	1c41      	adds	r1, r0, #1
 801ed3e:	4638      	mov	r0, r7
 801ed40:	f7fe ff8e 	bl	801dc60 <_malloc_r>
 801ed44:	6030      	str	r0, [r6, #0]
 801ed46:	2800      	cmp	r0, #0
 801ed48:	d157      	bne.n	801edfa <_tzset_unlocked_r+0x10a>
 801ed4a:	7823      	ldrb	r3, [r4, #0]
 801ed4c:	4aa0      	ldr	r2, [pc, #640]	; (801efd0 <_tzset_unlocked_r+0x2e0>)
 801ed4e:	49a1      	ldr	r1, [pc, #644]	; (801efd4 <_tzset_unlocked_r+0x2e4>)
 801ed50:	2b3a      	cmp	r3, #58	; 0x3a
 801ed52:	bf08      	it	eq
 801ed54:	3401      	addeq	r4, #1
 801ed56:	ae0a      	add	r6, sp, #40	; 0x28
 801ed58:	4633      	mov	r3, r6
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	f001 f976 	bl	802004c <siscanf>
 801ed60:	2800      	cmp	r0, #0
 801ed62:	dddf      	ble.n	801ed24 <_tzset_unlocked_r+0x34>
 801ed64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ed66:	18e7      	adds	r7, r4, r3
 801ed68:	5ce3      	ldrb	r3, [r4, r3]
 801ed6a:	2b2d      	cmp	r3, #45	; 0x2d
 801ed6c:	d149      	bne.n	801ee02 <_tzset_unlocked_r+0x112>
 801ed6e:	3701      	adds	r7, #1
 801ed70:	f04f 34ff 	mov.w	r4, #4294967295
 801ed74:	f10d 0a20 	add.w	sl, sp, #32
 801ed78:	f10d 0b1e 	add.w	fp, sp, #30
 801ed7c:	f04f 0800 	mov.w	r8, #0
 801ed80:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801ed84:	4994      	ldr	r1, [pc, #592]	; (801efd8 <_tzset_unlocked_r+0x2e8>)
 801ed86:	9603      	str	r6, [sp, #12]
 801ed88:	f8cd b000 	str.w	fp, [sp]
 801ed8c:	4633      	mov	r3, r6
 801ed8e:	aa07      	add	r2, sp, #28
 801ed90:	4638      	mov	r0, r7
 801ed92:	f8ad 801e 	strh.w	r8, [sp, #30]
 801ed96:	f8ad 8020 	strh.w	r8, [sp, #32]
 801ed9a:	f001 f957 	bl	802004c <siscanf>
 801ed9e:	4540      	cmp	r0, r8
 801eda0:	ddc0      	ble.n	801ed24 <_tzset_unlocked_r+0x34>
 801eda2:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801eda6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801edaa:	f8df 9238 	ldr.w	r9, [pc, #568]	; 801efe4 <_tzset_unlocked_r+0x2f4>
 801edae:	213c      	movs	r1, #60	; 0x3c
 801edb0:	fb01 2203 	mla	r2, r1, r3, r2
 801edb4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801edb8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801edbc:	fb01 2303 	mla	r3, r1, r3, r2
 801edc0:	435c      	muls	r4, r3
 801edc2:	62ac      	str	r4, [r5, #40]	; 0x28
 801edc4:	4c81      	ldr	r4, [pc, #516]	; (801efcc <_tzset_unlocked_r+0x2dc>)
 801edc6:	4b82      	ldr	r3, [pc, #520]	; (801efd0 <_tzset_unlocked_r+0x2e0>)
 801edc8:	6023      	str	r3, [r4, #0]
 801edca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801edcc:	4981      	ldr	r1, [pc, #516]	; (801efd4 <_tzset_unlocked_r+0x2e4>)
 801edce:	441f      	add	r7, r3
 801edd0:	464a      	mov	r2, r9
 801edd2:	4633      	mov	r3, r6
 801edd4:	4638      	mov	r0, r7
 801edd6:	f001 f939 	bl	802004c <siscanf>
 801edda:	4540      	cmp	r0, r8
 801eddc:	dc16      	bgt.n	801ee0c <_tzset_unlocked_r+0x11c>
 801edde:	6823      	ldr	r3, [r4, #0]
 801ede0:	6063      	str	r3, [r4, #4]
 801ede2:	4b77      	ldr	r3, [pc, #476]	; (801efc0 <_tzset_unlocked_r+0x2d0>)
 801ede4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ede6:	601a      	str	r2, [r3, #0]
 801ede8:	4b77      	ldr	r3, [pc, #476]	; (801efc8 <_tzset_unlocked_r+0x2d8>)
 801edea:	f8c3 8000 	str.w	r8, [r3]
 801edee:	e799      	b.n	801ed24 <_tzset_unlocked_r+0x34>
 801edf0:	f7e1 fa2c 	bl	800024c <strcmp>
 801edf4:	2800      	cmp	r0, #0
 801edf6:	d19b      	bne.n	801ed30 <_tzset_unlocked_r+0x40>
 801edf8:	e794      	b.n	801ed24 <_tzset_unlocked_r+0x34>
 801edfa:	4621      	mov	r1, r4
 801edfc:	f001 f952 	bl	80200a4 <strcpy>
 801ee00:	e7a3      	b.n	801ed4a <_tzset_unlocked_r+0x5a>
 801ee02:	2b2b      	cmp	r3, #43	; 0x2b
 801ee04:	bf08      	it	eq
 801ee06:	3701      	addeq	r7, #1
 801ee08:	2401      	movs	r4, #1
 801ee0a:	e7b3      	b.n	801ed74 <_tzset_unlocked_r+0x84>
 801ee0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee0e:	f8c4 9004 	str.w	r9, [r4, #4]
 801ee12:	18fc      	adds	r4, r7, r3
 801ee14:	5cfb      	ldrb	r3, [r7, r3]
 801ee16:	2b2d      	cmp	r3, #45	; 0x2d
 801ee18:	f040 808b 	bne.w	801ef32 <_tzset_unlocked_r+0x242>
 801ee1c:	3401      	adds	r4, #1
 801ee1e:	f04f 37ff 	mov.w	r7, #4294967295
 801ee22:	2300      	movs	r3, #0
 801ee24:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ee28:	f8ad 301e 	strh.w	r3, [sp, #30]
 801ee2c:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ee30:	930a      	str	r3, [sp, #40]	; 0x28
 801ee32:	e9cd a602 	strd	sl, r6, [sp, #8]
 801ee36:	e9cd b600 	strd	fp, r6, [sp]
 801ee3a:	4967      	ldr	r1, [pc, #412]	; (801efd8 <_tzset_unlocked_r+0x2e8>)
 801ee3c:	4633      	mov	r3, r6
 801ee3e:	aa07      	add	r2, sp, #28
 801ee40:	4620      	mov	r0, r4
 801ee42:	f001 f903 	bl	802004c <siscanf>
 801ee46:	2800      	cmp	r0, #0
 801ee48:	dc78      	bgt.n	801ef3c <_tzset_unlocked_r+0x24c>
 801ee4a:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 801ee4c:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 801ee50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ee52:	652f      	str	r7, [r5, #80]	; 0x50
 801ee54:	441c      	add	r4, r3
 801ee56:	462f      	mov	r7, r5
 801ee58:	f04f 0900 	mov.w	r9, #0
 801ee5c:	7823      	ldrb	r3, [r4, #0]
 801ee5e:	2b2c      	cmp	r3, #44	; 0x2c
 801ee60:	bf08      	it	eq
 801ee62:	3401      	addeq	r4, #1
 801ee64:	f894 8000 	ldrb.w	r8, [r4]
 801ee68:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801ee6c:	d178      	bne.n	801ef60 <_tzset_unlocked_r+0x270>
 801ee6e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 801ee72:	e9cd 6301 	strd	r6, r3, [sp, #4]
 801ee76:	ab09      	add	r3, sp, #36	; 0x24
 801ee78:	9300      	str	r3, [sp, #0]
 801ee7a:	4958      	ldr	r1, [pc, #352]	; (801efdc <_tzset_unlocked_r+0x2ec>)
 801ee7c:	9603      	str	r6, [sp, #12]
 801ee7e:	4633      	mov	r3, r6
 801ee80:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 801ee84:	4620      	mov	r0, r4
 801ee86:	f001 f8e1 	bl	802004c <siscanf>
 801ee8a:	2803      	cmp	r0, #3
 801ee8c:	f47f af4a 	bne.w	801ed24 <_tzset_unlocked_r+0x34>
 801ee90:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801ee94:	1e4b      	subs	r3, r1, #1
 801ee96:	2b0b      	cmp	r3, #11
 801ee98:	f63f af44 	bhi.w	801ed24 <_tzset_unlocked_r+0x34>
 801ee9c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 801eea0:	1e53      	subs	r3, r2, #1
 801eea2:	2b04      	cmp	r3, #4
 801eea4:	f63f af3e 	bhi.w	801ed24 <_tzset_unlocked_r+0x34>
 801eea8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801eeac:	2b06      	cmp	r3, #6
 801eeae:	f63f af39 	bhi.w	801ed24 <_tzset_unlocked_r+0x34>
 801eeb2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 801eeb6:	f887 8008 	strb.w	r8, [r7, #8]
 801eeba:	617b      	str	r3, [r7, #20]
 801eebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eebe:	eb04 0803 	add.w	r8, r4, r3
 801eec2:	2302      	movs	r3, #2
 801eec4:	f8ad 301c 	strh.w	r3, [sp, #28]
 801eec8:	2300      	movs	r3, #0
 801eeca:	f8ad 301e 	strh.w	r3, [sp, #30]
 801eece:	f8ad 3020 	strh.w	r3, [sp, #32]
 801eed2:	930a      	str	r3, [sp, #40]	; 0x28
 801eed4:	f898 3000 	ldrb.w	r3, [r8]
 801eed8:	2b2f      	cmp	r3, #47	; 0x2f
 801eeda:	d109      	bne.n	801eef0 <_tzset_unlocked_r+0x200>
 801eedc:	e9cd a602 	strd	sl, r6, [sp, #8]
 801eee0:	e9cd b600 	strd	fp, r6, [sp]
 801eee4:	493e      	ldr	r1, [pc, #248]	; (801efe0 <_tzset_unlocked_r+0x2f0>)
 801eee6:	4633      	mov	r3, r6
 801eee8:	aa07      	add	r2, sp, #28
 801eeea:	4640      	mov	r0, r8
 801eeec:	f001 f8ae 	bl	802004c <siscanf>
 801eef0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801eef4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801eef8:	213c      	movs	r1, #60	; 0x3c
 801eefa:	fb01 2203 	mla	r2, r1, r3, r2
 801eefe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ef02:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ef06:	fb01 2303 	mla	r3, r1, r3, r2
 801ef0a:	61bb      	str	r3, [r7, #24]
 801ef0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ef0e:	3728      	adds	r7, #40	; 0x28
 801ef10:	4444      	add	r4, r8
 801ef12:	f1b9 0f00 	cmp.w	r9, #0
 801ef16:	d020      	beq.n	801ef5a <_tzset_unlocked_r+0x26a>
 801ef18:	6868      	ldr	r0, [r5, #4]
 801ef1a:	f7ff fe2f 	bl	801eb7c <__tzcalc_limits>
 801ef1e:	4b28      	ldr	r3, [pc, #160]	; (801efc0 <_tzset_unlocked_r+0x2d0>)
 801ef20:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801ef22:	601a      	str	r2, [r3, #0]
 801ef24:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801ef26:	1a9b      	subs	r3, r3, r2
 801ef28:	4a27      	ldr	r2, [pc, #156]	; (801efc8 <_tzset_unlocked_r+0x2d8>)
 801ef2a:	bf18      	it	ne
 801ef2c:	2301      	movne	r3, #1
 801ef2e:	6013      	str	r3, [r2, #0]
 801ef30:	e6f8      	b.n	801ed24 <_tzset_unlocked_r+0x34>
 801ef32:	2b2b      	cmp	r3, #43	; 0x2b
 801ef34:	bf08      	it	eq
 801ef36:	3401      	addeq	r4, #1
 801ef38:	2701      	movs	r7, #1
 801ef3a:	e772      	b.n	801ee22 <_tzset_unlocked_r+0x132>
 801ef3c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801ef40:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ef44:	213c      	movs	r1, #60	; 0x3c
 801ef46:	fb01 2203 	mla	r2, r1, r3, r2
 801ef4a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801ef4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801ef52:	fb01 2303 	mla	r3, r1, r3, r2
 801ef56:	435f      	muls	r7, r3
 801ef58:	e77a      	b.n	801ee50 <_tzset_unlocked_r+0x160>
 801ef5a:	f04f 0901 	mov.w	r9, #1
 801ef5e:	e77d      	b.n	801ee5c <_tzset_unlocked_r+0x16c>
 801ef60:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 801ef64:	bf06      	itte	eq
 801ef66:	3401      	addeq	r4, #1
 801ef68:	4643      	moveq	r3, r8
 801ef6a:	2344      	movne	r3, #68	; 0x44
 801ef6c:	220a      	movs	r2, #10
 801ef6e:	a90b      	add	r1, sp, #44	; 0x2c
 801ef70:	4620      	mov	r0, r4
 801ef72:	9305      	str	r3, [sp, #20]
 801ef74:	f7ff fdf8 	bl	801eb68 <strtoul>
 801ef78:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801ef7c:	9b05      	ldr	r3, [sp, #20]
 801ef7e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 801ef82:	45a0      	cmp	r8, r4
 801ef84:	d114      	bne.n	801efb0 <_tzset_unlocked_r+0x2c0>
 801ef86:	234d      	movs	r3, #77	; 0x4d
 801ef88:	f1b9 0f00 	cmp.w	r9, #0
 801ef8c:	d107      	bne.n	801ef9e <_tzset_unlocked_r+0x2ae>
 801ef8e:	722b      	strb	r3, [r5, #8]
 801ef90:	2103      	movs	r1, #3
 801ef92:	2302      	movs	r3, #2
 801ef94:	e9c5 1303 	strd	r1, r3, [r5, #12]
 801ef98:	f8c5 9014 	str.w	r9, [r5, #20]
 801ef9c:	e791      	b.n	801eec2 <_tzset_unlocked_r+0x1d2>
 801ef9e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 801efa2:	220b      	movs	r2, #11
 801efa4:	2301      	movs	r3, #1
 801efa6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801efaa:	2300      	movs	r3, #0
 801efac:	63eb      	str	r3, [r5, #60]	; 0x3c
 801efae:	e788      	b.n	801eec2 <_tzset_unlocked_r+0x1d2>
 801efb0:	b280      	uxth	r0, r0
 801efb2:	723b      	strb	r3, [r7, #8]
 801efb4:	6178      	str	r0, [r7, #20]
 801efb6:	e784      	b.n	801eec2 <_tzset_unlocked_r+0x1d2>
 801efb8:	08025b2c 	.word	0x08025b2c
 801efbc:	20000cf8 	.word	0x20000cf8
 801efc0:	20000d00 	.word	0x20000d00
 801efc4:	08025b2f 	.word	0x08025b2f
 801efc8:	20000cfc 	.word	0x20000cfc
 801efcc:	20000168 	.word	0x20000168
 801efd0:	20000ceb 	.word	0x20000ceb
 801efd4:	08025b33 	.word	0x08025b33
 801efd8:	08025b56 	.word	0x08025b56
 801efdc:	08025b42 	.word	0x08025b42
 801efe0:	08025b55 	.word	0x08025b55
 801efe4:	20000ce0 	.word	0x20000ce0

0801efe8 <_vsniprintf_r>:
 801efe8:	b530      	push	{r4, r5, lr}
 801efea:	1e14      	subs	r4, r2, #0
 801efec:	4605      	mov	r5, r0
 801efee:	b09b      	sub	sp, #108	; 0x6c
 801eff0:	4618      	mov	r0, r3
 801eff2:	da05      	bge.n	801f000 <_vsniprintf_r+0x18>
 801eff4:	238b      	movs	r3, #139	; 0x8b
 801eff6:	602b      	str	r3, [r5, #0]
 801eff8:	f04f 30ff 	mov.w	r0, #4294967295
 801effc:	b01b      	add	sp, #108	; 0x6c
 801effe:	bd30      	pop	{r4, r5, pc}
 801f000:	f44f 7302 	mov.w	r3, #520	; 0x208
 801f004:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f008:	bf14      	ite	ne
 801f00a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801f00e:	4623      	moveq	r3, r4
 801f010:	9302      	str	r3, [sp, #8]
 801f012:	9305      	str	r3, [sp, #20]
 801f014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f018:	9100      	str	r1, [sp, #0]
 801f01a:	9104      	str	r1, [sp, #16]
 801f01c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f020:	4602      	mov	r2, r0
 801f022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801f024:	4669      	mov	r1, sp
 801f026:	4628      	mov	r0, r5
 801f028:	f000 fb94 	bl	801f754 <_svfiprintf_r>
 801f02c:	1c43      	adds	r3, r0, #1
 801f02e:	bfbc      	itt	lt
 801f030:	238b      	movlt	r3, #139	; 0x8b
 801f032:	602b      	strlt	r3, [r5, #0]
 801f034:	2c00      	cmp	r4, #0
 801f036:	d0e1      	beq.n	801effc <_vsniprintf_r+0x14>
 801f038:	9b00      	ldr	r3, [sp, #0]
 801f03a:	2200      	movs	r2, #0
 801f03c:	701a      	strb	r2, [r3, #0]
 801f03e:	e7dd      	b.n	801effc <_vsniprintf_r+0x14>

0801f040 <vsniprintf>:
 801f040:	b507      	push	{r0, r1, r2, lr}
 801f042:	9300      	str	r3, [sp, #0]
 801f044:	4613      	mov	r3, r2
 801f046:	460a      	mov	r2, r1
 801f048:	4601      	mov	r1, r0
 801f04a:	4803      	ldr	r0, [pc, #12]	; (801f058 <vsniprintf+0x18>)
 801f04c:	6800      	ldr	r0, [r0, #0]
 801f04e:	f7ff ffcb 	bl	801efe8 <_vsniprintf_r>
 801f052:	b003      	add	sp, #12
 801f054:	f85d fb04 	ldr.w	pc, [sp], #4
 801f058:	20000104 	.word	0x20000104

0801f05c <__swbuf_r>:
 801f05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f05e:	460e      	mov	r6, r1
 801f060:	4614      	mov	r4, r2
 801f062:	4605      	mov	r5, r0
 801f064:	b118      	cbz	r0, 801f06e <__swbuf_r+0x12>
 801f066:	6983      	ldr	r3, [r0, #24]
 801f068:	b90b      	cbnz	r3, 801f06e <__swbuf_r+0x12>
 801f06a:	f7fe f959 	bl	801d320 <__sinit>
 801f06e:	4b21      	ldr	r3, [pc, #132]	; (801f0f4 <__swbuf_r+0x98>)
 801f070:	429c      	cmp	r4, r3
 801f072:	d12b      	bne.n	801f0cc <__swbuf_r+0x70>
 801f074:	686c      	ldr	r4, [r5, #4]
 801f076:	69a3      	ldr	r3, [r4, #24]
 801f078:	60a3      	str	r3, [r4, #8]
 801f07a:	89a3      	ldrh	r3, [r4, #12]
 801f07c:	071a      	lsls	r2, r3, #28
 801f07e:	d52f      	bpl.n	801f0e0 <__swbuf_r+0x84>
 801f080:	6923      	ldr	r3, [r4, #16]
 801f082:	b36b      	cbz	r3, 801f0e0 <__swbuf_r+0x84>
 801f084:	6923      	ldr	r3, [r4, #16]
 801f086:	6820      	ldr	r0, [r4, #0]
 801f088:	1ac0      	subs	r0, r0, r3
 801f08a:	6963      	ldr	r3, [r4, #20]
 801f08c:	b2f6      	uxtb	r6, r6
 801f08e:	4283      	cmp	r3, r0
 801f090:	4637      	mov	r7, r6
 801f092:	dc04      	bgt.n	801f09e <__swbuf_r+0x42>
 801f094:	4621      	mov	r1, r4
 801f096:	4628      	mov	r0, r5
 801f098:	f7fe f89c 	bl	801d1d4 <_fflush_r>
 801f09c:	bb30      	cbnz	r0, 801f0ec <__swbuf_r+0x90>
 801f09e:	68a3      	ldr	r3, [r4, #8]
 801f0a0:	3b01      	subs	r3, #1
 801f0a2:	60a3      	str	r3, [r4, #8]
 801f0a4:	6823      	ldr	r3, [r4, #0]
 801f0a6:	1c5a      	adds	r2, r3, #1
 801f0a8:	6022      	str	r2, [r4, #0]
 801f0aa:	701e      	strb	r6, [r3, #0]
 801f0ac:	6963      	ldr	r3, [r4, #20]
 801f0ae:	3001      	adds	r0, #1
 801f0b0:	4283      	cmp	r3, r0
 801f0b2:	d004      	beq.n	801f0be <__swbuf_r+0x62>
 801f0b4:	89a3      	ldrh	r3, [r4, #12]
 801f0b6:	07db      	lsls	r3, r3, #31
 801f0b8:	d506      	bpl.n	801f0c8 <__swbuf_r+0x6c>
 801f0ba:	2e0a      	cmp	r6, #10
 801f0bc:	d104      	bne.n	801f0c8 <__swbuf_r+0x6c>
 801f0be:	4621      	mov	r1, r4
 801f0c0:	4628      	mov	r0, r5
 801f0c2:	f7fe f887 	bl	801d1d4 <_fflush_r>
 801f0c6:	b988      	cbnz	r0, 801f0ec <__swbuf_r+0x90>
 801f0c8:	4638      	mov	r0, r7
 801f0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f0cc:	4b0a      	ldr	r3, [pc, #40]	; (801f0f8 <__swbuf_r+0x9c>)
 801f0ce:	429c      	cmp	r4, r3
 801f0d0:	d101      	bne.n	801f0d6 <__swbuf_r+0x7a>
 801f0d2:	68ac      	ldr	r4, [r5, #8]
 801f0d4:	e7cf      	b.n	801f076 <__swbuf_r+0x1a>
 801f0d6:	4b09      	ldr	r3, [pc, #36]	; (801f0fc <__swbuf_r+0xa0>)
 801f0d8:	429c      	cmp	r4, r3
 801f0da:	bf08      	it	eq
 801f0dc:	68ec      	ldreq	r4, [r5, #12]
 801f0de:	e7ca      	b.n	801f076 <__swbuf_r+0x1a>
 801f0e0:	4621      	mov	r1, r4
 801f0e2:	4628      	mov	r0, r5
 801f0e4:	f000 f81e 	bl	801f124 <__swsetup_r>
 801f0e8:	2800      	cmp	r0, #0
 801f0ea:	d0cb      	beq.n	801f084 <__swbuf_r+0x28>
 801f0ec:	f04f 37ff 	mov.w	r7, #4294967295
 801f0f0:	e7ea      	b.n	801f0c8 <__swbuf_r+0x6c>
 801f0f2:	bf00      	nop
 801f0f4:	08025730 	.word	0x08025730
 801f0f8:	08025750 	.word	0x08025750
 801f0fc:	08025710 	.word	0x08025710

0801f100 <_write_r>:
 801f100:	b538      	push	{r3, r4, r5, lr}
 801f102:	4d07      	ldr	r5, [pc, #28]	; (801f120 <_write_r+0x20>)
 801f104:	4604      	mov	r4, r0
 801f106:	4608      	mov	r0, r1
 801f108:	4611      	mov	r1, r2
 801f10a:	2200      	movs	r2, #0
 801f10c:	602a      	str	r2, [r5, #0]
 801f10e:	461a      	mov	r2, r3
 801f110:	f7e1 fe5e 	bl	8000dd0 <_write>
 801f114:	1c43      	adds	r3, r0, #1
 801f116:	d102      	bne.n	801f11e <_write_r+0x1e>
 801f118:	682b      	ldr	r3, [r5, #0]
 801f11a:	b103      	cbz	r3, 801f11e <_write_r+0x1e>
 801f11c:	6023      	str	r3, [r4, #0]
 801f11e:	bd38      	pop	{r3, r4, r5, pc}
 801f120:	20000da4 	.word	0x20000da4

0801f124 <__swsetup_r>:
 801f124:	4b32      	ldr	r3, [pc, #200]	; (801f1f0 <__swsetup_r+0xcc>)
 801f126:	b570      	push	{r4, r5, r6, lr}
 801f128:	681d      	ldr	r5, [r3, #0]
 801f12a:	4606      	mov	r6, r0
 801f12c:	460c      	mov	r4, r1
 801f12e:	b125      	cbz	r5, 801f13a <__swsetup_r+0x16>
 801f130:	69ab      	ldr	r3, [r5, #24]
 801f132:	b913      	cbnz	r3, 801f13a <__swsetup_r+0x16>
 801f134:	4628      	mov	r0, r5
 801f136:	f7fe f8f3 	bl	801d320 <__sinit>
 801f13a:	4b2e      	ldr	r3, [pc, #184]	; (801f1f4 <__swsetup_r+0xd0>)
 801f13c:	429c      	cmp	r4, r3
 801f13e:	d10f      	bne.n	801f160 <__swsetup_r+0x3c>
 801f140:	686c      	ldr	r4, [r5, #4]
 801f142:	89a3      	ldrh	r3, [r4, #12]
 801f144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f148:	0719      	lsls	r1, r3, #28
 801f14a:	d42c      	bmi.n	801f1a6 <__swsetup_r+0x82>
 801f14c:	06dd      	lsls	r5, r3, #27
 801f14e:	d411      	bmi.n	801f174 <__swsetup_r+0x50>
 801f150:	2309      	movs	r3, #9
 801f152:	6033      	str	r3, [r6, #0]
 801f154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f158:	81a3      	strh	r3, [r4, #12]
 801f15a:	f04f 30ff 	mov.w	r0, #4294967295
 801f15e:	e03e      	b.n	801f1de <__swsetup_r+0xba>
 801f160:	4b25      	ldr	r3, [pc, #148]	; (801f1f8 <__swsetup_r+0xd4>)
 801f162:	429c      	cmp	r4, r3
 801f164:	d101      	bne.n	801f16a <__swsetup_r+0x46>
 801f166:	68ac      	ldr	r4, [r5, #8]
 801f168:	e7eb      	b.n	801f142 <__swsetup_r+0x1e>
 801f16a:	4b24      	ldr	r3, [pc, #144]	; (801f1fc <__swsetup_r+0xd8>)
 801f16c:	429c      	cmp	r4, r3
 801f16e:	bf08      	it	eq
 801f170:	68ec      	ldreq	r4, [r5, #12]
 801f172:	e7e6      	b.n	801f142 <__swsetup_r+0x1e>
 801f174:	0758      	lsls	r0, r3, #29
 801f176:	d512      	bpl.n	801f19e <__swsetup_r+0x7a>
 801f178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f17a:	b141      	cbz	r1, 801f18e <__swsetup_r+0x6a>
 801f17c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f180:	4299      	cmp	r1, r3
 801f182:	d002      	beq.n	801f18a <__swsetup_r+0x66>
 801f184:	4630      	mov	r0, r6
 801f186:	f7fe fd1b 	bl	801dbc0 <_free_r>
 801f18a:	2300      	movs	r3, #0
 801f18c:	6363      	str	r3, [r4, #52]	; 0x34
 801f18e:	89a3      	ldrh	r3, [r4, #12]
 801f190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f194:	81a3      	strh	r3, [r4, #12]
 801f196:	2300      	movs	r3, #0
 801f198:	6063      	str	r3, [r4, #4]
 801f19a:	6923      	ldr	r3, [r4, #16]
 801f19c:	6023      	str	r3, [r4, #0]
 801f19e:	89a3      	ldrh	r3, [r4, #12]
 801f1a0:	f043 0308 	orr.w	r3, r3, #8
 801f1a4:	81a3      	strh	r3, [r4, #12]
 801f1a6:	6923      	ldr	r3, [r4, #16]
 801f1a8:	b94b      	cbnz	r3, 801f1be <__swsetup_r+0x9a>
 801f1aa:	89a3      	ldrh	r3, [r4, #12]
 801f1ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f1b4:	d003      	beq.n	801f1be <__swsetup_r+0x9a>
 801f1b6:	4621      	mov	r1, r4
 801f1b8:	4630      	mov	r0, r6
 801f1ba:	f7fe fc8b 	bl	801dad4 <__smakebuf_r>
 801f1be:	89a0      	ldrh	r0, [r4, #12]
 801f1c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f1c4:	f010 0301 	ands.w	r3, r0, #1
 801f1c8:	d00a      	beq.n	801f1e0 <__swsetup_r+0xbc>
 801f1ca:	2300      	movs	r3, #0
 801f1cc:	60a3      	str	r3, [r4, #8]
 801f1ce:	6963      	ldr	r3, [r4, #20]
 801f1d0:	425b      	negs	r3, r3
 801f1d2:	61a3      	str	r3, [r4, #24]
 801f1d4:	6923      	ldr	r3, [r4, #16]
 801f1d6:	b943      	cbnz	r3, 801f1ea <__swsetup_r+0xc6>
 801f1d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f1dc:	d1ba      	bne.n	801f154 <__swsetup_r+0x30>
 801f1de:	bd70      	pop	{r4, r5, r6, pc}
 801f1e0:	0781      	lsls	r1, r0, #30
 801f1e2:	bf58      	it	pl
 801f1e4:	6963      	ldrpl	r3, [r4, #20]
 801f1e6:	60a3      	str	r3, [r4, #8]
 801f1e8:	e7f4      	b.n	801f1d4 <__swsetup_r+0xb0>
 801f1ea:	2000      	movs	r0, #0
 801f1ec:	e7f7      	b.n	801f1de <__swsetup_r+0xba>
 801f1ee:	bf00      	nop
 801f1f0:	20000104 	.word	0x20000104
 801f1f4:	08025730 	.word	0x08025730
 801f1f8:	08025750 	.word	0x08025750
 801f1fc:	08025710 	.word	0x08025710

0801f200 <__register_exitproc>:
 801f200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f204:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801f2c0 <__register_exitproc+0xc0>
 801f208:	4606      	mov	r6, r0
 801f20a:	f8d8 0000 	ldr.w	r0, [r8]
 801f20e:	461f      	mov	r7, r3
 801f210:	460d      	mov	r5, r1
 801f212:	4691      	mov	r9, r2
 801f214:	f7fe fc37 	bl	801da86 <__retarget_lock_acquire_recursive>
 801f218:	4b25      	ldr	r3, [pc, #148]	; (801f2b0 <__register_exitproc+0xb0>)
 801f21a:	681c      	ldr	r4, [r3, #0]
 801f21c:	b934      	cbnz	r4, 801f22c <__register_exitproc+0x2c>
 801f21e:	4c25      	ldr	r4, [pc, #148]	; (801f2b4 <__register_exitproc+0xb4>)
 801f220:	601c      	str	r4, [r3, #0]
 801f222:	4b25      	ldr	r3, [pc, #148]	; (801f2b8 <__register_exitproc+0xb8>)
 801f224:	b113      	cbz	r3, 801f22c <__register_exitproc+0x2c>
 801f226:	681b      	ldr	r3, [r3, #0]
 801f228:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801f22c:	6863      	ldr	r3, [r4, #4]
 801f22e:	2b1f      	cmp	r3, #31
 801f230:	dd07      	ble.n	801f242 <__register_exitproc+0x42>
 801f232:	f8d8 0000 	ldr.w	r0, [r8]
 801f236:	f7fe fc28 	bl	801da8a <__retarget_lock_release_recursive>
 801f23a:	f04f 30ff 	mov.w	r0, #4294967295
 801f23e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f242:	b34e      	cbz	r6, 801f298 <__register_exitproc+0x98>
 801f244:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801f248:	b988      	cbnz	r0, 801f26e <__register_exitproc+0x6e>
 801f24a:	4b1c      	ldr	r3, [pc, #112]	; (801f2bc <__register_exitproc+0xbc>)
 801f24c:	b923      	cbnz	r3, 801f258 <__register_exitproc+0x58>
 801f24e:	f8d8 0000 	ldr.w	r0, [r8]
 801f252:	f7fe fc19 	bl	801da88 <__retarget_lock_release>
 801f256:	e7f0      	b.n	801f23a <__register_exitproc+0x3a>
 801f258:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f25c:	f7fe fc7a 	bl	801db54 <malloc>
 801f260:	2800      	cmp	r0, #0
 801f262:	d0f4      	beq.n	801f24e <__register_exitproc+0x4e>
 801f264:	2300      	movs	r3, #0
 801f266:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801f26a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801f26e:	6863      	ldr	r3, [r4, #4]
 801f270:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801f274:	2201      	movs	r2, #1
 801f276:	409a      	lsls	r2, r3
 801f278:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801f27c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801f280:	4313      	orrs	r3, r2
 801f282:	2e02      	cmp	r6, #2
 801f284:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801f288:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801f28c:	bf02      	ittt	eq
 801f28e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801f292:	431a      	orreq	r2, r3
 801f294:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801f298:	6863      	ldr	r3, [r4, #4]
 801f29a:	f8d8 0000 	ldr.w	r0, [r8]
 801f29e:	1c5a      	adds	r2, r3, #1
 801f2a0:	3302      	adds	r3, #2
 801f2a2:	6062      	str	r2, [r4, #4]
 801f2a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801f2a8:	f7fe fbef 	bl	801da8a <__retarget_lock_release_recursive>
 801f2ac:	2000      	movs	r0, #0
 801f2ae:	e7c6      	b.n	801f23e <__register_exitproc+0x3e>
 801f2b0:	20000d90 	.word	0x20000d90
 801f2b4:	20000d04 	.word	0x20000d04
 801f2b8:	00000000 	.word	0x00000000
 801f2bc:	0801db55 	.word	0x0801db55
 801f2c0:	20000170 	.word	0x20000170

0801f2c4 <abs>:
 801f2c4:	2800      	cmp	r0, #0
 801f2c6:	bfb8      	it	lt
 801f2c8:	4240      	neglt	r0, r0
 801f2ca:	4770      	bx	lr

0801f2cc <__assert_func>:
 801f2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801f2ce:	4614      	mov	r4, r2
 801f2d0:	461a      	mov	r2, r3
 801f2d2:	4b09      	ldr	r3, [pc, #36]	; (801f2f8 <__assert_func+0x2c>)
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	4605      	mov	r5, r0
 801f2d8:	68d8      	ldr	r0, [r3, #12]
 801f2da:	b14c      	cbz	r4, 801f2f0 <__assert_func+0x24>
 801f2dc:	4b07      	ldr	r3, [pc, #28]	; (801f2fc <__assert_func+0x30>)
 801f2de:	9100      	str	r1, [sp, #0]
 801f2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801f2e4:	4906      	ldr	r1, [pc, #24]	; (801f300 <__assert_func+0x34>)
 801f2e6:	462b      	mov	r3, r5
 801f2e8:	f000 f854 	bl	801f394 <fiprintf>
 801f2ec:	f7fd fe5c 	bl	801cfa8 <abort>
 801f2f0:	4b04      	ldr	r3, [pc, #16]	; (801f304 <__assert_func+0x38>)
 801f2f2:	461c      	mov	r4, r3
 801f2f4:	e7f3      	b.n	801f2de <__assert_func+0x12>
 801f2f6:	bf00      	nop
 801f2f8:	20000104 	.word	0x20000104
 801f2fc:	08025b68 	.word	0x08025b68
 801f300:	08025b75 	.word	0x08025b75
 801f304:	08025ba3 	.word	0x08025ba3

0801f308 <_close_r>:
 801f308:	b538      	push	{r3, r4, r5, lr}
 801f30a:	4d06      	ldr	r5, [pc, #24]	; (801f324 <_close_r+0x1c>)
 801f30c:	2300      	movs	r3, #0
 801f30e:	4604      	mov	r4, r0
 801f310:	4608      	mov	r0, r1
 801f312:	602b      	str	r3, [r5, #0]
 801f314:	f7e1 fd78 	bl	8000e08 <_close>
 801f318:	1c43      	adds	r3, r0, #1
 801f31a:	d102      	bne.n	801f322 <_close_r+0x1a>
 801f31c:	682b      	ldr	r3, [r5, #0]
 801f31e:	b103      	cbz	r3, 801f322 <_close_r+0x1a>
 801f320:	6023      	str	r3, [r4, #0]
 801f322:	bd38      	pop	{r3, r4, r5, pc}
 801f324:	20000da4 	.word	0x20000da4

0801f328 <__sflags>:
 801f328:	780b      	ldrb	r3, [r1, #0]
 801f32a:	2b72      	cmp	r3, #114	; 0x72
 801f32c:	b530      	push	{r4, r5, lr}
 801f32e:	d022      	beq.n	801f376 <__sflags+0x4e>
 801f330:	2b77      	cmp	r3, #119	; 0x77
 801f332:	d024      	beq.n	801f37e <__sflags+0x56>
 801f334:	2b61      	cmp	r3, #97	; 0x61
 801f336:	d027      	beq.n	801f388 <__sflags+0x60>
 801f338:	2316      	movs	r3, #22
 801f33a:	6003      	str	r3, [r0, #0]
 801f33c:	2000      	movs	r0, #0
 801f33e:	bd30      	pop	{r4, r5, pc}
 801f340:	2d62      	cmp	r5, #98	; 0x62
 801f342:	d012      	beq.n	801f36a <__sflags+0x42>
 801f344:	2d78      	cmp	r5, #120	; 0x78
 801f346:	d013      	beq.n	801f370 <__sflags+0x48>
 801f348:	2d2b      	cmp	r5, #43	; 0x2b
 801f34a:	d107      	bne.n	801f35c <__sflags+0x34>
 801f34c:	f020 001c 	bic.w	r0, r0, #28
 801f350:	f023 0303 	bic.w	r3, r3, #3
 801f354:	f040 0010 	orr.w	r0, r0, #16
 801f358:	f043 0302 	orr.w	r3, r3, #2
 801f35c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 801f360:	2d00      	cmp	r5, #0
 801f362:	d1ed      	bne.n	801f340 <__sflags+0x18>
 801f364:	4323      	orrs	r3, r4
 801f366:	6013      	str	r3, [r2, #0]
 801f368:	e7e9      	b.n	801f33e <__sflags+0x16>
 801f36a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801f36e:	e7f5      	b.n	801f35c <__sflags+0x34>
 801f370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801f374:	e7f2      	b.n	801f35c <__sflags+0x34>
 801f376:	2400      	movs	r4, #0
 801f378:	4623      	mov	r3, r4
 801f37a:	2004      	movs	r0, #4
 801f37c:	e7ee      	b.n	801f35c <__sflags+0x34>
 801f37e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801f382:	2301      	movs	r3, #1
 801f384:	2008      	movs	r0, #8
 801f386:	e7e9      	b.n	801f35c <__sflags+0x34>
 801f388:	f44f 7402 	mov.w	r4, #520	; 0x208
 801f38c:	2301      	movs	r3, #1
 801f38e:	f44f 7084 	mov.w	r0, #264	; 0x108
 801f392:	e7e3      	b.n	801f35c <__sflags+0x34>

0801f394 <fiprintf>:
 801f394:	b40e      	push	{r1, r2, r3}
 801f396:	b503      	push	{r0, r1, lr}
 801f398:	4601      	mov	r1, r0
 801f39a:	ab03      	add	r3, sp, #12
 801f39c:	4805      	ldr	r0, [pc, #20]	; (801f3b4 <fiprintf+0x20>)
 801f39e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f3a2:	6800      	ldr	r0, [r0, #0]
 801f3a4:	9301      	str	r3, [sp, #4]
 801f3a6:	f000 faff 	bl	801f9a8 <_vfiprintf_r>
 801f3aa:	b002      	add	sp, #8
 801f3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801f3b0:	b003      	add	sp, #12
 801f3b2:	4770      	bx	lr
 801f3b4:	20000104 	.word	0x20000104

0801f3b8 <_fstat_r>:
 801f3b8:	b538      	push	{r3, r4, r5, lr}
 801f3ba:	4d07      	ldr	r5, [pc, #28]	; (801f3d8 <_fstat_r+0x20>)
 801f3bc:	2300      	movs	r3, #0
 801f3be:	4604      	mov	r4, r0
 801f3c0:	4608      	mov	r0, r1
 801f3c2:	4611      	mov	r1, r2
 801f3c4:	602b      	str	r3, [r5, #0]
 801f3c6:	f7e1 fd2b 	bl	8000e20 <_fstat>
 801f3ca:	1c43      	adds	r3, r0, #1
 801f3cc:	d102      	bne.n	801f3d4 <_fstat_r+0x1c>
 801f3ce:	682b      	ldr	r3, [r5, #0]
 801f3d0:	b103      	cbz	r3, 801f3d4 <_fstat_r+0x1c>
 801f3d2:	6023      	str	r3, [r4, #0]
 801f3d4:	bd38      	pop	{r3, r4, r5, pc}
 801f3d6:	bf00      	nop
 801f3d8:	20000da4 	.word	0x20000da4

0801f3dc <_findenv_r>:
 801f3dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3e0:	4607      	mov	r7, r0
 801f3e2:	4689      	mov	r9, r1
 801f3e4:	4616      	mov	r6, r2
 801f3e6:	f000 fe85 	bl	80200f4 <__env_lock>
 801f3ea:	4b18      	ldr	r3, [pc, #96]	; (801f44c <_findenv_r+0x70>)
 801f3ec:	681c      	ldr	r4, [r3, #0]
 801f3ee:	469a      	mov	sl, r3
 801f3f0:	b134      	cbz	r4, 801f400 <_findenv_r+0x24>
 801f3f2:	464b      	mov	r3, r9
 801f3f4:	4698      	mov	r8, r3
 801f3f6:	f813 1b01 	ldrb.w	r1, [r3], #1
 801f3fa:	b139      	cbz	r1, 801f40c <_findenv_r+0x30>
 801f3fc:	293d      	cmp	r1, #61	; 0x3d
 801f3fe:	d1f9      	bne.n	801f3f4 <_findenv_r+0x18>
 801f400:	4638      	mov	r0, r7
 801f402:	f000 fe7d 	bl	8020100 <__env_unlock>
 801f406:	2000      	movs	r0, #0
 801f408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f40c:	eba8 0809 	sub.w	r8, r8, r9
 801f410:	46a3      	mov	fp, r4
 801f412:	f854 0b04 	ldr.w	r0, [r4], #4
 801f416:	2800      	cmp	r0, #0
 801f418:	d0f2      	beq.n	801f400 <_findenv_r+0x24>
 801f41a:	4642      	mov	r2, r8
 801f41c:	4649      	mov	r1, r9
 801f41e:	f000 fe49 	bl	80200b4 <strncmp>
 801f422:	2800      	cmp	r0, #0
 801f424:	d1f4      	bne.n	801f410 <_findenv_r+0x34>
 801f426:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f42a:	eb03 0508 	add.w	r5, r3, r8
 801f42e:	f813 3008 	ldrb.w	r3, [r3, r8]
 801f432:	2b3d      	cmp	r3, #61	; 0x3d
 801f434:	d1ec      	bne.n	801f410 <_findenv_r+0x34>
 801f436:	f8da 3000 	ldr.w	r3, [sl]
 801f43a:	ebab 0303 	sub.w	r3, fp, r3
 801f43e:	109b      	asrs	r3, r3, #2
 801f440:	4638      	mov	r0, r7
 801f442:	6033      	str	r3, [r6, #0]
 801f444:	f000 fe5c 	bl	8020100 <__env_unlock>
 801f448:	1c68      	adds	r0, r5, #1
 801f44a:	e7dd      	b.n	801f408 <_findenv_r+0x2c>
 801f44c:	20000000 	.word	0x20000000

0801f450 <_getenv_r>:
 801f450:	b507      	push	{r0, r1, r2, lr}
 801f452:	aa01      	add	r2, sp, #4
 801f454:	f7ff ffc2 	bl	801f3dc <_findenv_r>
 801f458:	b003      	add	sp, #12
 801f45a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801f460 <__gettzinfo>:
 801f460:	4800      	ldr	r0, [pc, #0]	; (801f464 <__gettzinfo+0x4>)
 801f462:	4770      	bx	lr
 801f464:	20000178 	.word	0x20000178

0801f468 <gmtime_r>:
 801f468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f46c:	e9d0 6700 	ldrd	r6, r7, [r0]
 801f470:	460c      	mov	r4, r1
 801f472:	4a51      	ldr	r2, [pc, #324]	; (801f5b8 <gmtime_r+0x150>)
 801f474:	2300      	movs	r3, #0
 801f476:	4630      	mov	r0, r6
 801f478:	4639      	mov	r1, r7
 801f47a:	f7e1 f99b 	bl	80007b4 <__aeabi_ldivmod>
 801f47e:	4639      	mov	r1, r7
 801f480:	4605      	mov	r5, r0
 801f482:	4a4d      	ldr	r2, [pc, #308]	; (801f5b8 <gmtime_r+0x150>)
 801f484:	4630      	mov	r0, r6
 801f486:	2300      	movs	r3, #0
 801f488:	f7e1 f994 	bl	80007b4 <__aeabi_ldivmod>
 801f48c:	2a00      	cmp	r2, #0
 801f48e:	bfbc      	itt	lt
 801f490:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 801f494:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 801f498:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 801f49c:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801f4a0:	fbb2 f3f1 	udiv	r3, r2, r1
 801f4a4:	fb01 2213 	mls	r2, r1, r3, r2
 801f4a8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 801f4ac:	bfac      	ite	ge
 801f4ae:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801f4b2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 801f4b6:	60a3      	str	r3, [r4, #8]
 801f4b8:	fbb2 f3f1 	udiv	r3, r2, r1
 801f4bc:	fb01 2213 	mls	r2, r1, r3, r2
 801f4c0:	6063      	str	r3, [r4, #4]
 801f4c2:	6022      	str	r2, [r4, #0]
 801f4c4:	1cc3      	adds	r3, r0, #3
 801f4c6:	2207      	movs	r2, #7
 801f4c8:	fb93 f2f2 	sdiv	r2, r3, r2
 801f4cc:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 801f4d0:	1a9b      	subs	r3, r3, r2
 801f4d2:	bf48      	it	mi
 801f4d4:	3307      	addmi	r3, #7
 801f4d6:	2800      	cmp	r0, #0
 801f4d8:	61a3      	str	r3, [r4, #24]
 801f4da:	bfb8      	it	lt
 801f4dc:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 801f4e0:	4936      	ldr	r1, [pc, #216]	; (801f5bc <gmtime_r+0x154>)
 801f4e2:	bfae      	itee	ge
 801f4e4:	fb90 f1f1 	sdivge	r1, r0, r1
 801f4e8:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 801f4ec:	fb93 f1f1 	sdivlt	r1, r3, r1
 801f4f0:	4b33      	ldr	r3, [pc, #204]	; (801f5c0 <gmtime_r+0x158>)
 801f4f2:	fb03 0001 	mla	r0, r3, r1, r0
 801f4f6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 801f4fa:	fbb0 f2f2 	udiv	r2, r0, r2
 801f4fe:	4402      	add	r2, r0
 801f500:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 801f504:	fbb0 f3fc 	udiv	r3, r0, ip
 801f508:	1ad2      	subs	r2, r2, r3
 801f50a:	f240 176d 	movw	r7, #365	; 0x16d
 801f50e:	4b2d      	ldr	r3, [pc, #180]	; (801f5c4 <gmtime_r+0x15c>)
 801f510:	fbb0 f3f3 	udiv	r3, r0, r3
 801f514:	2664      	movs	r6, #100	; 0x64
 801f516:	1ad3      	subs	r3, r2, r3
 801f518:	fbb3 f5f7 	udiv	r5, r3, r7
 801f51c:	fbb3 f3fc 	udiv	r3, r3, ip
 801f520:	fbb5 f2f6 	udiv	r2, r5, r6
 801f524:	1ad3      	subs	r3, r2, r3
 801f526:	4403      	add	r3, r0
 801f528:	fb07 3315 	mls	r3, r7, r5, r3
 801f52c:	2099      	movs	r0, #153	; 0x99
 801f52e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801f532:	f10c 0c02 	add.w	ip, ip, #2
 801f536:	f103 0e01 	add.w	lr, r3, #1
 801f53a:	fbbc f7f0 	udiv	r7, ip, r0
 801f53e:	4378      	muls	r0, r7
 801f540:	3002      	adds	r0, #2
 801f542:	f04f 0805 	mov.w	r8, #5
 801f546:	fbb0 f0f8 	udiv	r0, r0, r8
 801f54a:	ebae 0000 	sub.w	r0, lr, r0
 801f54e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801f552:	45f4      	cmp	ip, lr
 801f554:	bf94      	ite	ls
 801f556:	f04f 0c02 	movls.w	ip, #2
 801f55a:	f06f 0c09 	mvnhi.w	ip, #9
 801f55e:	4467      	add	r7, ip
 801f560:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 801f564:	fb0c 5101 	mla	r1, ip, r1, r5
 801f568:	2f01      	cmp	r7, #1
 801f56a:	bf98      	it	ls
 801f56c:	3101      	addls	r1, #1
 801f56e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801f572:	d30c      	bcc.n	801f58e <gmtime_r+0x126>
 801f574:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 801f578:	61e3      	str	r3, [r4, #28]
 801f57a:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801f57e:	2300      	movs	r3, #0
 801f580:	60e0      	str	r0, [r4, #12]
 801f582:	e9c4 7104 	strd	r7, r1, [r4, #16]
 801f586:	6223      	str	r3, [r4, #32]
 801f588:	4620      	mov	r0, r4
 801f58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f58e:	f015 0f03 	tst.w	r5, #3
 801f592:	d102      	bne.n	801f59a <gmtime_r+0x132>
 801f594:	fb06 5212 	mls	r2, r6, r2, r5
 801f598:	b95a      	cbnz	r2, 801f5b2 <gmtime_r+0x14a>
 801f59a:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801f59e:	fbb5 f2f6 	udiv	r2, r5, r6
 801f5a2:	fb06 5212 	mls	r2, r6, r2, r5
 801f5a6:	fab2 f282 	clz	r2, r2
 801f5aa:	0952      	lsrs	r2, r2, #5
 801f5ac:	333b      	adds	r3, #59	; 0x3b
 801f5ae:	4413      	add	r3, r2
 801f5b0:	e7e2      	b.n	801f578 <gmtime_r+0x110>
 801f5b2:	2201      	movs	r2, #1
 801f5b4:	e7fa      	b.n	801f5ac <gmtime_r+0x144>
 801f5b6:	bf00      	nop
 801f5b8:	00015180 	.word	0x00015180
 801f5bc:	00023ab1 	.word	0x00023ab1
 801f5c0:	fffdc54f 	.word	0xfffdc54f
 801f5c4:	00023ab0 	.word	0x00023ab0

0801f5c8 <_isatty_r>:
 801f5c8:	b538      	push	{r3, r4, r5, lr}
 801f5ca:	4d06      	ldr	r5, [pc, #24]	; (801f5e4 <_isatty_r+0x1c>)
 801f5cc:	2300      	movs	r3, #0
 801f5ce:	4604      	mov	r4, r0
 801f5d0:	4608      	mov	r0, r1
 801f5d2:	602b      	str	r3, [r5, #0]
 801f5d4:	f7e1 fc34 	bl	8000e40 <_isatty>
 801f5d8:	1c43      	adds	r3, r0, #1
 801f5da:	d102      	bne.n	801f5e2 <_isatty_r+0x1a>
 801f5dc:	682b      	ldr	r3, [r5, #0]
 801f5de:	b103      	cbz	r3, 801f5e2 <_isatty_r+0x1a>
 801f5e0:	6023      	str	r3, [r4, #0]
 801f5e2:	bd38      	pop	{r3, r4, r5, pc}
 801f5e4:	20000da4 	.word	0x20000da4

0801f5e8 <labs>:
 801f5e8:	2800      	cmp	r0, #0
 801f5ea:	bfb8      	it	lt
 801f5ec:	4240      	neglt	r0, r0
 801f5ee:	4770      	bx	lr

0801f5f0 <_lseek_r>:
 801f5f0:	b538      	push	{r3, r4, r5, lr}
 801f5f2:	4d07      	ldr	r5, [pc, #28]	; (801f610 <_lseek_r+0x20>)
 801f5f4:	4604      	mov	r4, r0
 801f5f6:	4608      	mov	r0, r1
 801f5f8:	4611      	mov	r1, r2
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	602a      	str	r2, [r5, #0]
 801f5fe:	461a      	mov	r2, r3
 801f600:	f7e1 fc29 	bl	8000e56 <_lseek>
 801f604:	1c43      	adds	r3, r0, #1
 801f606:	d102      	bne.n	801f60e <_lseek_r+0x1e>
 801f608:	682b      	ldr	r3, [r5, #0]
 801f60a:	b103      	cbz	r3, 801f60e <_lseek_r+0x1e>
 801f60c:	6023      	str	r3, [r4, #0]
 801f60e:	bd38      	pop	{r3, r4, r5, pc}
 801f610:	20000da4 	.word	0x20000da4

0801f614 <__ascii_mbtowc>:
 801f614:	b082      	sub	sp, #8
 801f616:	b901      	cbnz	r1, 801f61a <__ascii_mbtowc+0x6>
 801f618:	a901      	add	r1, sp, #4
 801f61a:	b142      	cbz	r2, 801f62e <__ascii_mbtowc+0x1a>
 801f61c:	b14b      	cbz	r3, 801f632 <__ascii_mbtowc+0x1e>
 801f61e:	7813      	ldrb	r3, [r2, #0]
 801f620:	600b      	str	r3, [r1, #0]
 801f622:	7812      	ldrb	r2, [r2, #0]
 801f624:	1e10      	subs	r0, r2, #0
 801f626:	bf18      	it	ne
 801f628:	2001      	movne	r0, #1
 801f62a:	b002      	add	sp, #8
 801f62c:	4770      	bx	lr
 801f62e:	4610      	mov	r0, r2
 801f630:	e7fb      	b.n	801f62a <__ascii_mbtowc+0x16>
 801f632:	f06f 0001 	mvn.w	r0, #1
 801f636:	e7f8      	b.n	801f62a <__ascii_mbtowc+0x16>

0801f638 <__malloc_lock>:
 801f638:	4801      	ldr	r0, [pc, #4]	; (801f640 <__malloc_lock+0x8>)
 801f63a:	f7fe ba24 	b.w	801da86 <__retarget_lock_acquire_recursive>
 801f63e:	bf00      	nop
 801f640:	20000d9c 	.word	0x20000d9c

0801f644 <__malloc_unlock>:
 801f644:	4801      	ldr	r0, [pc, #4]	; (801f64c <__malloc_unlock+0x8>)
 801f646:	f7fe ba20 	b.w	801da8a <__retarget_lock_release_recursive>
 801f64a:	bf00      	nop
 801f64c:	20000d9c 	.word	0x20000d9c

0801f650 <_realloc_r>:
 801f650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f652:	4607      	mov	r7, r0
 801f654:	4614      	mov	r4, r2
 801f656:	460e      	mov	r6, r1
 801f658:	b921      	cbnz	r1, 801f664 <_realloc_r+0x14>
 801f65a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801f65e:	4611      	mov	r1, r2
 801f660:	f7fe bafe 	b.w	801dc60 <_malloc_r>
 801f664:	b922      	cbnz	r2, 801f670 <_realloc_r+0x20>
 801f666:	f7fe faab 	bl	801dbc0 <_free_r>
 801f66a:	4625      	mov	r5, r4
 801f66c:	4628      	mov	r0, r5
 801f66e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f670:	f000 fd66 	bl	8020140 <_malloc_usable_size_r>
 801f674:	42a0      	cmp	r0, r4
 801f676:	d20f      	bcs.n	801f698 <_realloc_r+0x48>
 801f678:	4621      	mov	r1, r4
 801f67a:	4638      	mov	r0, r7
 801f67c:	f7fe faf0 	bl	801dc60 <_malloc_r>
 801f680:	4605      	mov	r5, r0
 801f682:	2800      	cmp	r0, #0
 801f684:	d0f2      	beq.n	801f66c <_realloc_r+0x1c>
 801f686:	4631      	mov	r1, r6
 801f688:	4622      	mov	r2, r4
 801f68a:	f7fe fa73 	bl	801db74 <memcpy>
 801f68e:	4631      	mov	r1, r6
 801f690:	4638      	mov	r0, r7
 801f692:	f7fe fa95 	bl	801dbc0 <_free_r>
 801f696:	e7e9      	b.n	801f66c <_realloc_r+0x1c>
 801f698:	4635      	mov	r5, r6
 801f69a:	e7e7      	b.n	801f66c <_realloc_r+0x1c>

0801f69c <__ssputs_r>:
 801f69c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f6a0:	688e      	ldr	r6, [r1, #8]
 801f6a2:	429e      	cmp	r6, r3
 801f6a4:	4682      	mov	sl, r0
 801f6a6:	460c      	mov	r4, r1
 801f6a8:	4690      	mov	r8, r2
 801f6aa:	461f      	mov	r7, r3
 801f6ac:	d838      	bhi.n	801f720 <__ssputs_r+0x84>
 801f6ae:	898a      	ldrh	r2, [r1, #12]
 801f6b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f6b4:	d032      	beq.n	801f71c <__ssputs_r+0x80>
 801f6b6:	6825      	ldr	r5, [r4, #0]
 801f6b8:	6909      	ldr	r1, [r1, #16]
 801f6ba:	eba5 0901 	sub.w	r9, r5, r1
 801f6be:	6965      	ldr	r5, [r4, #20]
 801f6c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f6c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f6c8:	3301      	adds	r3, #1
 801f6ca:	444b      	add	r3, r9
 801f6cc:	106d      	asrs	r5, r5, #1
 801f6ce:	429d      	cmp	r5, r3
 801f6d0:	bf38      	it	cc
 801f6d2:	461d      	movcc	r5, r3
 801f6d4:	0553      	lsls	r3, r2, #21
 801f6d6:	d531      	bpl.n	801f73c <__ssputs_r+0xa0>
 801f6d8:	4629      	mov	r1, r5
 801f6da:	f7fe fac1 	bl	801dc60 <_malloc_r>
 801f6de:	4606      	mov	r6, r0
 801f6e0:	b950      	cbnz	r0, 801f6f8 <__ssputs_r+0x5c>
 801f6e2:	230c      	movs	r3, #12
 801f6e4:	f8ca 3000 	str.w	r3, [sl]
 801f6e8:	89a3      	ldrh	r3, [r4, #12]
 801f6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f6ee:	81a3      	strh	r3, [r4, #12]
 801f6f0:	f04f 30ff 	mov.w	r0, #4294967295
 801f6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f6f8:	6921      	ldr	r1, [r4, #16]
 801f6fa:	464a      	mov	r2, r9
 801f6fc:	f7fe fa3a 	bl	801db74 <memcpy>
 801f700:	89a3      	ldrh	r3, [r4, #12]
 801f702:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f70a:	81a3      	strh	r3, [r4, #12]
 801f70c:	6126      	str	r6, [r4, #16]
 801f70e:	6165      	str	r5, [r4, #20]
 801f710:	444e      	add	r6, r9
 801f712:	eba5 0509 	sub.w	r5, r5, r9
 801f716:	6026      	str	r6, [r4, #0]
 801f718:	60a5      	str	r5, [r4, #8]
 801f71a:	463e      	mov	r6, r7
 801f71c:	42be      	cmp	r6, r7
 801f71e:	d900      	bls.n	801f722 <__ssputs_r+0x86>
 801f720:	463e      	mov	r6, r7
 801f722:	4632      	mov	r2, r6
 801f724:	6820      	ldr	r0, [r4, #0]
 801f726:	4641      	mov	r1, r8
 801f728:	f000 fcf0 	bl	802010c <memmove>
 801f72c:	68a3      	ldr	r3, [r4, #8]
 801f72e:	6822      	ldr	r2, [r4, #0]
 801f730:	1b9b      	subs	r3, r3, r6
 801f732:	4432      	add	r2, r6
 801f734:	60a3      	str	r3, [r4, #8]
 801f736:	6022      	str	r2, [r4, #0]
 801f738:	2000      	movs	r0, #0
 801f73a:	e7db      	b.n	801f6f4 <__ssputs_r+0x58>
 801f73c:	462a      	mov	r2, r5
 801f73e:	f7ff ff87 	bl	801f650 <_realloc_r>
 801f742:	4606      	mov	r6, r0
 801f744:	2800      	cmp	r0, #0
 801f746:	d1e1      	bne.n	801f70c <__ssputs_r+0x70>
 801f748:	6921      	ldr	r1, [r4, #16]
 801f74a:	4650      	mov	r0, sl
 801f74c:	f7fe fa38 	bl	801dbc0 <_free_r>
 801f750:	e7c7      	b.n	801f6e2 <__ssputs_r+0x46>
	...

0801f754 <_svfiprintf_r>:
 801f754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f758:	4698      	mov	r8, r3
 801f75a:	898b      	ldrh	r3, [r1, #12]
 801f75c:	061b      	lsls	r3, r3, #24
 801f75e:	b09d      	sub	sp, #116	; 0x74
 801f760:	4607      	mov	r7, r0
 801f762:	460d      	mov	r5, r1
 801f764:	4614      	mov	r4, r2
 801f766:	d50e      	bpl.n	801f786 <_svfiprintf_r+0x32>
 801f768:	690b      	ldr	r3, [r1, #16]
 801f76a:	b963      	cbnz	r3, 801f786 <_svfiprintf_r+0x32>
 801f76c:	2140      	movs	r1, #64	; 0x40
 801f76e:	f7fe fa77 	bl	801dc60 <_malloc_r>
 801f772:	6028      	str	r0, [r5, #0]
 801f774:	6128      	str	r0, [r5, #16]
 801f776:	b920      	cbnz	r0, 801f782 <_svfiprintf_r+0x2e>
 801f778:	230c      	movs	r3, #12
 801f77a:	603b      	str	r3, [r7, #0]
 801f77c:	f04f 30ff 	mov.w	r0, #4294967295
 801f780:	e0d1      	b.n	801f926 <_svfiprintf_r+0x1d2>
 801f782:	2340      	movs	r3, #64	; 0x40
 801f784:	616b      	str	r3, [r5, #20]
 801f786:	2300      	movs	r3, #0
 801f788:	9309      	str	r3, [sp, #36]	; 0x24
 801f78a:	2320      	movs	r3, #32
 801f78c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f790:	f8cd 800c 	str.w	r8, [sp, #12]
 801f794:	2330      	movs	r3, #48	; 0x30
 801f796:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f940 <_svfiprintf_r+0x1ec>
 801f79a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f79e:	f04f 0901 	mov.w	r9, #1
 801f7a2:	4623      	mov	r3, r4
 801f7a4:	469a      	mov	sl, r3
 801f7a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f7aa:	b10a      	cbz	r2, 801f7b0 <_svfiprintf_r+0x5c>
 801f7ac:	2a25      	cmp	r2, #37	; 0x25
 801f7ae:	d1f9      	bne.n	801f7a4 <_svfiprintf_r+0x50>
 801f7b0:	ebba 0b04 	subs.w	fp, sl, r4
 801f7b4:	d00b      	beq.n	801f7ce <_svfiprintf_r+0x7a>
 801f7b6:	465b      	mov	r3, fp
 801f7b8:	4622      	mov	r2, r4
 801f7ba:	4629      	mov	r1, r5
 801f7bc:	4638      	mov	r0, r7
 801f7be:	f7ff ff6d 	bl	801f69c <__ssputs_r>
 801f7c2:	3001      	adds	r0, #1
 801f7c4:	f000 80aa 	beq.w	801f91c <_svfiprintf_r+0x1c8>
 801f7c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f7ca:	445a      	add	r2, fp
 801f7cc:	9209      	str	r2, [sp, #36]	; 0x24
 801f7ce:	f89a 3000 	ldrb.w	r3, [sl]
 801f7d2:	2b00      	cmp	r3, #0
 801f7d4:	f000 80a2 	beq.w	801f91c <_svfiprintf_r+0x1c8>
 801f7d8:	2300      	movs	r3, #0
 801f7da:	f04f 32ff 	mov.w	r2, #4294967295
 801f7de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f7e2:	f10a 0a01 	add.w	sl, sl, #1
 801f7e6:	9304      	str	r3, [sp, #16]
 801f7e8:	9307      	str	r3, [sp, #28]
 801f7ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f7ee:	931a      	str	r3, [sp, #104]	; 0x68
 801f7f0:	4654      	mov	r4, sl
 801f7f2:	2205      	movs	r2, #5
 801f7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7f8:	4851      	ldr	r0, [pc, #324]	; (801f940 <_svfiprintf_r+0x1ec>)
 801f7fa:	f7e0 fd31 	bl	8000260 <memchr>
 801f7fe:	9a04      	ldr	r2, [sp, #16]
 801f800:	b9d8      	cbnz	r0, 801f83a <_svfiprintf_r+0xe6>
 801f802:	06d0      	lsls	r0, r2, #27
 801f804:	bf44      	itt	mi
 801f806:	2320      	movmi	r3, #32
 801f808:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f80c:	0711      	lsls	r1, r2, #28
 801f80e:	bf44      	itt	mi
 801f810:	232b      	movmi	r3, #43	; 0x2b
 801f812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f816:	f89a 3000 	ldrb.w	r3, [sl]
 801f81a:	2b2a      	cmp	r3, #42	; 0x2a
 801f81c:	d015      	beq.n	801f84a <_svfiprintf_r+0xf6>
 801f81e:	9a07      	ldr	r2, [sp, #28]
 801f820:	4654      	mov	r4, sl
 801f822:	2000      	movs	r0, #0
 801f824:	f04f 0c0a 	mov.w	ip, #10
 801f828:	4621      	mov	r1, r4
 801f82a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f82e:	3b30      	subs	r3, #48	; 0x30
 801f830:	2b09      	cmp	r3, #9
 801f832:	d94e      	bls.n	801f8d2 <_svfiprintf_r+0x17e>
 801f834:	b1b0      	cbz	r0, 801f864 <_svfiprintf_r+0x110>
 801f836:	9207      	str	r2, [sp, #28]
 801f838:	e014      	b.n	801f864 <_svfiprintf_r+0x110>
 801f83a:	eba0 0308 	sub.w	r3, r0, r8
 801f83e:	fa09 f303 	lsl.w	r3, r9, r3
 801f842:	4313      	orrs	r3, r2
 801f844:	9304      	str	r3, [sp, #16]
 801f846:	46a2      	mov	sl, r4
 801f848:	e7d2      	b.n	801f7f0 <_svfiprintf_r+0x9c>
 801f84a:	9b03      	ldr	r3, [sp, #12]
 801f84c:	1d19      	adds	r1, r3, #4
 801f84e:	681b      	ldr	r3, [r3, #0]
 801f850:	9103      	str	r1, [sp, #12]
 801f852:	2b00      	cmp	r3, #0
 801f854:	bfbb      	ittet	lt
 801f856:	425b      	neglt	r3, r3
 801f858:	f042 0202 	orrlt.w	r2, r2, #2
 801f85c:	9307      	strge	r3, [sp, #28]
 801f85e:	9307      	strlt	r3, [sp, #28]
 801f860:	bfb8      	it	lt
 801f862:	9204      	strlt	r2, [sp, #16]
 801f864:	7823      	ldrb	r3, [r4, #0]
 801f866:	2b2e      	cmp	r3, #46	; 0x2e
 801f868:	d10c      	bne.n	801f884 <_svfiprintf_r+0x130>
 801f86a:	7863      	ldrb	r3, [r4, #1]
 801f86c:	2b2a      	cmp	r3, #42	; 0x2a
 801f86e:	d135      	bne.n	801f8dc <_svfiprintf_r+0x188>
 801f870:	9b03      	ldr	r3, [sp, #12]
 801f872:	1d1a      	adds	r2, r3, #4
 801f874:	681b      	ldr	r3, [r3, #0]
 801f876:	9203      	str	r2, [sp, #12]
 801f878:	2b00      	cmp	r3, #0
 801f87a:	bfb8      	it	lt
 801f87c:	f04f 33ff 	movlt.w	r3, #4294967295
 801f880:	3402      	adds	r4, #2
 801f882:	9305      	str	r3, [sp, #20]
 801f884:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f950 <_svfiprintf_r+0x1fc>
 801f888:	7821      	ldrb	r1, [r4, #0]
 801f88a:	2203      	movs	r2, #3
 801f88c:	4650      	mov	r0, sl
 801f88e:	f7e0 fce7 	bl	8000260 <memchr>
 801f892:	b140      	cbz	r0, 801f8a6 <_svfiprintf_r+0x152>
 801f894:	2340      	movs	r3, #64	; 0x40
 801f896:	eba0 000a 	sub.w	r0, r0, sl
 801f89a:	fa03 f000 	lsl.w	r0, r3, r0
 801f89e:	9b04      	ldr	r3, [sp, #16]
 801f8a0:	4303      	orrs	r3, r0
 801f8a2:	3401      	adds	r4, #1
 801f8a4:	9304      	str	r3, [sp, #16]
 801f8a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f8aa:	4826      	ldr	r0, [pc, #152]	; (801f944 <_svfiprintf_r+0x1f0>)
 801f8ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f8b0:	2206      	movs	r2, #6
 801f8b2:	f7e0 fcd5 	bl	8000260 <memchr>
 801f8b6:	2800      	cmp	r0, #0
 801f8b8:	d038      	beq.n	801f92c <_svfiprintf_r+0x1d8>
 801f8ba:	4b23      	ldr	r3, [pc, #140]	; (801f948 <_svfiprintf_r+0x1f4>)
 801f8bc:	bb1b      	cbnz	r3, 801f906 <_svfiprintf_r+0x1b2>
 801f8be:	9b03      	ldr	r3, [sp, #12]
 801f8c0:	3307      	adds	r3, #7
 801f8c2:	f023 0307 	bic.w	r3, r3, #7
 801f8c6:	3308      	adds	r3, #8
 801f8c8:	9303      	str	r3, [sp, #12]
 801f8ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f8cc:	4433      	add	r3, r6
 801f8ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f8d0:	e767      	b.n	801f7a2 <_svfiprintf_r+0x4e>
 801f8d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801f8d6:	460c      	mov	r4, r1
 801f8d8:	2001      	movs	r0, #1
 801f8da:	e7a5      	b.n	801f828 <_svfiprintf_r+0xd4>
 801f8dc:	2300      	movs	r3, #0
 801f8de:	3401      	adds	r4, #1
 801f8e0:	9305      	str	r3, [sp, #20]
 801f8e2:	4619      	mov	r1, r3
 801f8e4:	f04f 0c0a 	mov.w	ip, #10
 801f8e8:	4620      	mov	r0, r4
 801f8ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f8ee:	3a30      	subs	r2, #48	; 0x30
 801f8f0:	2a09      	cmp	r2, #9
 801f8f2:	d903      	bls.n	801f8fc <_svfiprintf_r+0x1a8>
 801f8f4:	2b00      	cmp	r3, #0
 801f8f6:	d0c5      	beq.n	801f884 <_svfiprintf_r+0x130>
 801f8f8:	9105      	str	r1, [sp, #20]
 801f8fa:	e7c3      	b.n	801f884 <_svfiprintf_r+0x130>
 801f8fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801f900:	4604      	mov	r4, r0
 801f902:	2301      	movs	r3, #1
 801f904:	e7f0      	b.n	801f8e8 <_svfiprintf_r+0x194>
 801f906:	ab03      	add	r3, sp, #12
 801f908:	9300      	str	r3, [sp, #0]
 801f90a:	462a      	mov	r2, r5
 801f90c:	4b0f      	ldr	r3, [pc, #60]	; (801f94c <_svfiprintf_r+0x1f8>)
 801f90e:	a904      	add	r1, sp, #16
 801f910:	4638      	mov	r0, r7
 801f912:	f3af 8000 	nop.w
 801f916:	1c42      	adds	r2, r0, #1
 801f918:	4606      	mov	r6, r0
 801f91a:	d1d6      	bne.n	801f8ca <_svfiprintf_r+0x176>
 801f91c:	89ab      	ldrh	r3, [r5, #12]
 801f91e:	065b      	lsls	r3, r3, #25
 801f920:	f53f af2c 	bmi.w	801f77c <_svfiprintf_r+0x28>
 801f924:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f926:	b01d      	add	sp, #116	; 0x74
 801f928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f92c:	ab03      	add	r3, sp, #12
 801f92e:	9300      	str	r3, [sp, #0]
 801f930:	462a      	mov	r2, r5
 801f932:	4b06      	ldr	r3, [pc, #24]	; (801f94c <_svfiprintf_r+0x1f8>)
 801f934:	a904      	add	r1, sp, #16
 801f936:	4638      	mov	r0, r7
 801f938:	f000 f9d4 	bl	801fce4 <_printf_i>
 801f93c:	e7eb      	b.n	801f916 <_svfiprintf_r+0x1c2>
 801f93e:	bf00      	nop
 801f940:	08025caf 	.word	0x08025caf
 801f944:	08025cb9 	.word	0x08025cb9
 801f948:	00000000 	.word	0x00000000
 801f94c:	0801f69d 	.word	0x0801f69d
 801f950:	08025cb5 	.word	0x08025cb5

0801f954 <__sfputc_r>:
 801f954:	6893      	ldr	r3, [r2, #8]
 801f956:	3b01      	subs	r3, #1
 801f958:	2b00      	cmp	r3, #0
 801f95a:	b410      	push	{r4}
 801f95c:	6093      	str	r3, [r2, #8]
 801f95e:	da08      	bge.n	801f972 <__sfputc_r+0x1e>
 801f960:	6994      	ldr	r4, [r2, #24]
 801f962:	42a3      	cmp	r3, r4
 801f964:	db01      	blt.n	801f96a <__sfputc_r+0x16>
 801f966:	290a      	cmp	r1, #10
 801f968:	d103      	bne.n	801f972 <__sfputc_r+0x1e>
 801f96a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f96e:	f7ff bb75 	b.w	801f05c <__swbuf_r>
 801f972:	6813      	ldr	r3, [r2, #0]
 801f974:	1c58      	adds	r0, r3, #1
 801f976:	6010      	str	r0, [r2, #0]
 801f978:	7019      	strb	r1, [r3, #0]
 801f97a:	4608      	mov	r0, r1
 801f97c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f980:	4770      	bx	lr

0801f982 <__sfputs_r>:
 801f982:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f984:	4606      	mov	r6, r0
 801f986:	460f      	mov	r7, r1
 801f988:	4614      	mov	r4, r2
 801f98a:	18d5      	adds	r5, r2, r3
 801f98c:	42ac      	cmp	r4, r5
 801f98e:	d101      	bne.n	801f994 <__sfputs_r+0x12>
 801f990:	2000      	movs	r0, #0
 801f992:	e007      	b.n	801f9a4 <__sfputs_r+0x22>
 801f994:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f998:	463a      	mov	r2, r7
 801f99a:	4630      	mov	r0, r6
 801f99c:	f7ff ffda 	bl	801f954 <__sfputc_r>
 801f9a0:	1c43      	adds	r3, r0, #1
 801f9a2:	d1f3      	bne.n	801f98c <__sfputs_r+0xa>
 801f9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801f9a8 <_vfiprintf_r>:
 801f9a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9ac:	460d      	mov	r5, r1
 801f9ae:	b09d      	sub	sp, #116	; 0x74
 801f9b0:	4614      	mov	r4, r2
 801f9b2:	4698      	mov	r8, r3
 801f9b4:	4606      	mov	r6, r0
 801f9b6:	b118      	cbz	r0, 801f9c0 <_vfiprintf_r+0x18>
 801f9b8:	6983      	ldr	r3, [r0, #24]
 801f9ba:	b90b      	cbnz	r3, 801f9c0 <_vfiprintf_r+0x18>
 801f9bc:	f7fd fcb0 	bl	801d320 <__sinit>
 801f9c0:	4b89      	ldr	r3, [pc, #548]	; (801fbe8 <_vfiprintf_r+0x240>)
 801f9c2:	429d      	cmp	r5, r3
 801f9c4:	d11b      	bne.n	801f9fe <_vfiprintf_r+0x56>
 801f9c6:	6875      	ldr	r5, [r6, #4]
 801f9c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9ca:	07d9      	lsls	r1, r3, #31
 801f9cc:	d405      	bmi.n	801f9da <_vfiprintf_r+0x32>
 801f9ce:	89ab      	ldrh	r3, [r5, #12]
 801f9d0:	059a      	lsls	r2, r3, #22
 801f9d2:	d402      	bmi.n	801f9da <_vfiprintf_r+0x32>
 801f9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f9d6:	f7fe f856 	bl	801da86 <__retarget_lock_acquire_recursive>
 801f9da:	89ab      	ldrh	r3, [r5, #12]
 801f9dc:	071b      	lsls	r3, r3, #28
 801f9de:	d501      	bpl.n	801f9e4 <_vfiprintf_r+0x3c>
 801f9e0:	692b      	ldr	r3, [r5, #16]
 801f9e2:	b9eb      	cbnz	r3, 801fa20 <_vfiprintf_r+0x78>
 801f9e4:	4629      	mov	r1, r5
 801f9e6:	4630      	mov	r0, r6
 801f9e8:	f7ff fb9c 	bl	801f124 <__swsetup_r>
 801f9ec:	b1c0      	cbz	r0, 801fa20 <_vfiprintf_r+0x78>
 801f9ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f9f0:	07dc      	lsls	r4, r3, #31
 801f9f2:	d50e      	bpl.n	801fa12 <_vfiprintf_r+0x6a>
 801f9f4:	f04f 30ff 	mov.w	r0, #4294967295
 801f9f8:	b01d      	add	sp, #116	; 0x74
 801f9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9fe:	4b7b      	ldr	r3, [pc, #492]	; (801fbec <_vfiprintf_r+0x244>)
 801fa00:	429d      	cmp	r5, r3
 801fa02:	d101      	bne.n	801fa08 <_vfiprintf_r+0x60>
 801fa04:	68b5      	ldr	r5, [r6, #8]
 801fa06:	e7df      	b.n	801f9c8 <_vfiprintf_r+0x20>
 801fa08:	4b79      	ldr	r3, [pc, #484]	; (801fbf0 <_vfiprintf_r+0x248>)
 801fa0a:	429d      	cmp	r5, r3
 801fa0c:	bf08      	it	eq
 801fa0e:	68f5      	ldreq	r5, [r6, #12]
 801fa10:	e7da      	b.n	801f9c8 <_vfiprintf_r+0x20>
 801fa12:	89ab      	ldrh	r3, [r5, #12]
 801fa14:	0598      	lsls	r0, r3, #22
 801fa16:	d4ed      	bmi.n	801f9f4 <_vfiprintf_r+0x4c>
 801fa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fa1a:	f7fe f836 	bl	801da8a <__retarget_lock_release_recursive>
 801fa1e:	e7e9      	b.n	801f9f4 <_vfiprintf_r+0x4c>
 801fa20:	2300      	movs	r3, #0
 801fa22:	9309      	str	r3, [sp, #36]	; 0x24
 801fa24:	2320      	movs	r3, #32
 801fa26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801fa2a:	f8cd 800c 	str.w	r8, [sp, #12]
 801fa2e:	2330      	movs	r3, #48	; 0x30
 801fa30:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801fbf4 <_vfiprintf_r+0x24c>
 801fa34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801fa38:	f04f 0901 	mov.w	r9, #1
 801fa3c:	4623      	mov	r3, r4
 801fa3e:	469a      	mov	sl, r3
 801fa40:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fa44:	b10a      	cbz	r2, 801fa4a <_vfiprintf_r+0xa2>
 801fa46:	2a25      	cmp	r2, #37	; 0x25
 801fa48:	d1f9      	bne.n	801fa3e <_vfiprintf_r+0x96>
 801fa4a:	ebba 0b04 	subs.w	fp, sl, r4
 801fa4e:	d00b      	beq.n	801fa68 <_vfiprintf_r+0xc0>
 801fa50:	465b      	mov	r3, fp
 801fa52:	4622      	mov	r2, r4
 801fa54:	4629      	mov	r1, r5
 801fa56:	4630      	mov	r0, r6
 801fa58:	f7ff ff93 	bl	801f982 <__sfputs_r>
 801fa5c:	3001      	adds	r0, #1
 801fa5e:	f000 80aa 	beq.w	801fbb6 <_vfiprintf_r+0x20e>
 801fa62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fa64:	445a      	add	r2, fp
 801fa66:	9209      	str	r2, [sp, #36]	; 0x24
 801fa68:	f89a 3000 	ldrb.w	r3, [sl]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	f000 80a2 	beq.w	801fbb6 <_vfiprintf_r+0x20e>
 801fa72:	2300      	movs	r3, #0
 801fa74:	f04f 32ff 	mov.w	r2, #4294967295
 801fa78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fa7c:	f10a 0a01 	add.w	sl, sl, #1
 801fa80:	9304      	str	r3, [sp, #16]
 801fa82:	9307      	str	r3, [sp, #28]
 801fa84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801fa88:	931a      	str	r3, [sp, #104]	; 0x68
 801fa8a:	4654      	mov	r4, sl
 801fa8c:	2205      	movs	r2, #5
 801fa8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fa92:	4858      	ldr	r0, [pc, #352]	; (801fbf4 <_vfiprintf_r+0x24c>)
 801fa94:	f7e0 fbe4 	bl	8000260 <memchr>
 801fa98:	9a04      	ldr	r2, [sp, #16]
 801fa9a:	b9d8      	cbnz	r0, 801fad4 <_vfiprintf_r+0x12c>
 801fa9c:	06d1      	lsls	r1, r2, #27
 801fa9e:	bf44      	itt	mi
 801faa0:	2320      	movmi	r3, #32
 801faa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801faa6:	0713      	lsls	r3, r2, #28
 801faa8:	bf44      	itt	mi
 801faaa:	232b      	movmi	r3, #43	; 0x2b
 801faac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801fab0:	f89a 3000 	ldrb.w	r3, [sl]
 801fab4:	2b2a      	cmp	r3, #42	; 0x2a
 801fab6:	d015      	beq.n	801fae4 <_vfiprintf_r+0x13c>
 801fab8:	9a07      	ldr	r2, [sp, #28]
 801faba:	4654      	mov	r4, sl
 801fabc:	2000      	movs	r0, #0
 801fabe:	f04f 0c0a 	mov.w	ip, #10
 801fac2:	4621      	mov	r1, r4
 801fac4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fac8:	3b30      	subs	r3, #48	; 0x30
 801faca:	2b09      	cmp	r3, #9
 801facc:	d94e      	bls.n	801fb6c <_vfiprintf_r+0x1c4>
 801face:	b1b0      	cbz	r0, 801fafe <_vfiprintf_r+0x156>
 801fad0:	9207      	str	r2, [sp, #28]
 801fad2:	e014      	b.n	801fafe <_vfiprintf_r+0x156>
 801fad4:	eba0 0308 	sub.w	r3, r0, r8
 801fad8:	fa09 f303 	lsl.w	r3, r9, r3
 801fadc:	4313      	orrs	r3, r2
 801fade:	9304      	str	r3, [sp, #16]
 801fae0:	46a2      	mov	sl, r4
 801fae2:	e7d2      	b.n	801fa8a <_vfiprintf_r+0xe2>
 801fae4:	9b03      	ldr	r3, [sp, #12]
 801fae6:	1d19      	adds	r1, r3, #4
 801fae8:	681b      	ldr	r3, [r3, #0]
 801faea:	9103      	str	r1, [sp, #12]
 801faec:	2b00      	cmp	r3, #0
 801faee:	bfbb      	ittet	lt
 801faf0:	425b      	neglt	r3, r3
 801faf2:	f042 0202 	orrlt.w	r2, r2, #2
 801faf6:	9307      	strge	r3, [sp, #28]
 801faf8:	9307      	strlt	r3, [sp, #28]
 801fafa:	bfb8      	it	lt
 801fafc:	9204      	strlt	r2, [sp, #16]
 801fafe:	7823      	ldrb	r3, [r4, #0]
 801fb00:	2b2e      	cmp	r3, #46	; 0x2e
 801fb02:	d10c      	bne.n	801fb1e <_vfiprintf_r+0x176>
 801fb04:	7863      	ldrb	r3, [r4, #1]
 801fb06:	2b2a      	cmp	r3, #42	; 0x2a
 801fb08:	d135      	bne.n	801fb76 <_vfiprintf_r+0x1ce>
 801fb0a:	9b03      	ldr	r3, [sp, #12]
 801fb0c:	1d1a      	adds	r2, r3, #4
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	9203      	str	r2, [sp, #12]
 801fb12:	2b00      	cmp	r3, #0
 801fb14:	bfb8      	it	lt
 801fb16:	f04f 33ff 	movlt.w	r3, #4294967295
 801fb1a:	3402      	adds	r4, #2
 801fb1c:	9305      	str	r3, [sp, #20]
 801fb1e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801fc04 <_vfiprintf_r+0x25c>
 801fb22:	7821      	ldrb	r1, [r4, #0]
 801fb24:	2203      	movs	r2, #3
 801fb26:	4650      	mov	r0, sl
 801fb28:	f7e0 fb9a 	bl	8000260 <memchr>
 801fb2c:	b140      	cbz	r0, 801fb40 <_vfiprintf_r+0x198>
 801fb2e:	2340      	movs	r3, #64	; 0x40
 801fb30:	eba0 000a 	sub.w	r0, r0, sl
 801fb34:	fa03 f000 	lsl.w	r0, r3, r0
 801fb38:	9b04      	ldr	r3, [sp, #16]
 801fb3a:	4303      	orrs	r3, r0
 801fb3c:	3401      	adds	r4, #1
 801fb3e:	9304      	str	r3, [sp, #16]
 801fb40:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fb44:	482c      	ldr	r0, [pc, #176]	; (801fbf8 <_vfiprintf_r+0x250>)
 801fb46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801fb4a:	2206      	movs	r2, #6
 801fb4c:	f7e0 fb88 	bl	8000260 <memchr>
 801fb50:	2800      	cmp	r0, #0
 801fb52:	d03f      	beq.n	801fbd4 <_vfiprintf_r+0x22c>
 801fb54:	4b29      	ldr	r3, [pc, #164]	; (801fbfc <_vfiprintf_r+0x254>)
 801fb56:	bb1b      	cbnz	r3, 801fba0 <_vfiprintf_r+0x1f8>
 801fb58:	9b03      	ldr	r3, [sp, #12]
 801fb5a:	3307      	adds	r3, #7
 801fb5c:	f023 0307 	bic.w	r3, r3, #7
 801fb60:	3308      	adds	r3, #8
 801fb62:	9303      	str	r3, [sp, #12]
 801fb64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb66:	443b      	add	r3, r7
 801fb68:	9309      	str	r3, [sp, #36]	; 0x24
 801fb6a:	e767      	b.n	801fa3c <_vfiprintf_r+0x94>
 801fb6c:	fb0c 3202 	mla	r2, ip, r2, r3
 801fb70:	460c      	mov	r4, r1
 801fb72:	2001      	movs	r0, #1
 801fb74:	e7a5      	b.n	801fac2 <_vfiprintf_r+0x11a>
 801fb76:	2300      	movs	r3, #0
 801fb78:	3401      	adds	r4, #1
 801fb7a:	9305      	str	r3, [sp, #20]
 801fb7c:	4619      	mov	r1, r3
 801fb7e:	f04f 0c0a 	mov.w	ip, #10
 801fb82:	4620      	mov	r0, r4
 801fb84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fb88:	3a30      	subs	r2, #48	; 0x30
 801fb8a:	2a09      	cmp	r2, #9
 801fb8c:	d903      	bls.n	801fb96 <_vfiprintf_r+0x1ee>
 801fb8e:	2b00      	cmp	r3, #0
 801fb90:	d0c5      	beq.n	801fb1e <_vfiprintf_r+0x176>
 801fb92:	9105      	str	r1, [sp, #20]
 801fb94:	e7c3      	b.n	801fb1e <_vfiprintf_r+0x176>
 801fb96:	fb0c 2101 	mla	r1, ip, r1, r2
 801fb9a:	4604      	mov	r4, r0
 801fb9c:	2301      	movs	r3, #1
 801fb9e:	e7f0      	b.n	801fb82 <_vfiprintf_r+0x1da>
 801fba0:	ab03      	add	r3, sp, #12
 801fba2:	9300      	str	r3, [sp, #0]
 801fba4:	462a      	mov	r2, r5
 801fba6:	4b16      	ldr	r3, [pc, #88]	; (801fc00 <_vfiprintf_r+0x258>)
 801fba8:	a904      	add	r1, sp, #16
 801fbaa:	4630      	mov	r0, r6
 801fbac:	f3af 8000 	nop.w
 801fbb0:	4607      	mov	r7, r0
 801fbb2:	1c78      	adds	r0, r7, #1
 801fbb4:	d1d6      	bne.n	801fb64 <_vfiprintf_r+0x1bc>
 801fbb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801fbb8:	07d9      	lsls	r1, r3, #31
 801fbba:	d405      	bmi.n	801fbc8 <_vfiprintf_r+0x220>
 801fbbc:	89ab      	ldrh	r3, [r5, #12]
 801fbbe:	059a      	lsls	r2, r3, #22
 801fbc0:	d402      	bmi.n	801fbc8 <_vfiprintf_r+0x220>
 801fbc2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801fbc4:	f7fd ff61 	bl	801da8a <__retarget_lock_release_recursive>
 801fbc8:	89ab      	ldrh	r3, [r5, #12]
 801fbca:	065b      	lsls	r3, r3, #25
 801fbcc:	f53f af12 	bmi.w	801f9f4 <_vfiprintf_r+0x4c>
 801fbd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801fbd2:	e711      	b.n	801f9f8 <_vfiprintf_r+0x50>
 801fbd4:	ab03      	add	r3, sp, #12
 801fbd6:	9300      	str	r3, [sp, #0]
 801fbd8:	462a      	mov	r2, r5
 801fbda:	4b09      	ldr	r3, [pc, #36]	; (801fc00 <_vfiprintf_r+0x258>)
 801fbdc:	a904      	add	r1, sp, #16
 801fbde:	4630      	mov	r0, r6
 801fbe0:	f000 f880 	bl	801fce4 <_printf_i>
 801fbe4:	e7e4      	b.n	801fbb0 <_vfiprintf_r+0x208>
 801fbe6:	bf00      	nop
 801fbe8:	08025730 	.word	0x08025730
 801fbec:	08025750 	.word	0x08025750
 801fbf0:	08025710 	.word	0x08025710
 801fbf4:	08025caf 	.word	0x08025caf
 801fbf8:	08025cb9 	.word	0x08025cb9
 801fbfc:	00000000 	.word	0x00000000
 801fc00:	0801f983 	.word	0x0801f983
 801fc04:	08025cb5 	.word	0x08025cb5

0801fc08 <_printf_common>:
 801fc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fc0c:	4616      	mov	r6, r2
 801fc0e:	4699      	mov	r9, r3
 801fc10:	688a      	ldr	r2, [r1, #8]
 801fc12:	690b      	ldr	r3, [r1, #16]
 801fc14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801fc18:	4293      	cmp	r3, r2
 801fc1a:	bfb8      	it	lt
 801fc1c:	4613      	movlt	r3, r2
 801fc1e:	6033      	str	r3, [r6, #0]
 801fc20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801fc24:	4607      	mov	r7, r0
 801fc26:	460c      	mov	r4, r1
 801fc28:	b10a      	cbz	r2, 801fc2e <_printf_common+0x26>
 801fc2a:	3301      	adds	r3, #1
 801fc2c:	6033      	str	r3, [r6, #0]
 801fc2e:	6823      	ldr	r3, [r4, #0]
 801fc30:	0699      	lsls	r1, r3, #26
 801fc32:	bf42      	ittt	mi
 801fc34:	6833      	ldrmi	r3, [r6, #0]
 801fc36:	3302      	addmi	r3, #2
 801fc38:	6033      	strmi	r3, [r6, #0]
 801fc3a:	6825      	ldr	r5, [r4, #0]
 801fc3c:	f015 0506 	ands.w	r5, r5, #6
 801fc40:	d106      	bne.n	801fc50 <_printf_common+0x48>
 801fc42:	f104 0a19 	add.w	sl, r4, #25
 801fc46:	68e3      	ldr	r3, [r4, #12]
 801fc48:	6832      	ldr	r2, [r6, #0]
 801fc4a:	1a9b      	subs	r3, r3, r2
 801fc4c:	42ab      	cmp	r3, r5
 801fc4e:	dc26      	bgt.n	801fc9e <_printf_common+0x96>
 801fc50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801fc54:	1e13      	subs	r3, r2, #0
 801fc56:	6822      	ldr	r2, [r4, #0]
 801fc58:	bf18      	it	ne
 801fc5a:	2301      	movne	r3, #1
 801fc5c:	0692      	lsls	r2, r2, #26
 801fc5e:	d42b      	bmi.n	801fcb8 <_printf_common+0xb0>
 801fc60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fc64:	4649      	mov	r1, r9
 801fc66:	4638      	mov	r0, r7
 801fc68:	47c0      	blx	r8
 801fc6a:	3001      	adds	r0, #1
 801fc6c:	d01e      	beq.n	801fcac <_printf_common+0xa4>
 801fc6e:	6823      	ldr	r3, [r4, #0]
 801fc70:	68e5      	ldr	r5, [r4, #12]
 801fc72:	6832      	ldr	r2, [r6, #0]
 801fc74:	f003 0306 	and.w	r3, r3, #6
 801fc78:	2b04      	cmp	r3, #4
 801fc7a:	bf08      	it	eq
 801fc7c:	1aad      	subeq	r5, r5, r2
 801fc7e:	68a3      	ldr	r3, [r4, #8]
 801fc80:	6922      	ldr	r2, [r4, #16]
 801fc82:	bf0c      	ite	eq
 801fc84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fc88:	2500      	movne	r5, #0
 801fc8a:	4293      	cmp	r3, r2
 801fc8c:	bfc4      	itt	gt
 801fc8e:	1a9b      	subgt	r3, r3, r2
 801fc90:	18ed      	addgt	r5, r5, r3
 801fc92:	2600      	movs	r6, #0
 801fc94:	341a      	adds	r4, #26
 801fc96:	42b5      	cmp	r5, r6
 801fc98:	d11a      	bne.n	801fcd0 <_printf_common+0xc8>
 801fc9a:	2000      	movs	r0, #0
 801fc9c:	e008      	b.n	801fcb0 <_printf_common+0xa8>
 801fc9e:	2301      	movs	r3, #1
 801fca0:	4652      	mov	r2, sl
 801fca2:	4649      	mov	r1, r9
 801fca4:	4638      	mov	r0, r7
 801fca6:	47c0      	blx	r8
 801fca8:	3001      	adds	r0, #1
 801fcaa:	d103      	bne.n	801fcb4 <_printf_common+0xac>
 801fcac:	f04f 30ff 	mov.w	r0, #4294967295
 801fcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fcb4:	3501      	adds	r5, #1
 801fcb6:	e7c6      	b.n	801fc46 <_printf_common+0x3e>
 801fcb8:	18e1      	adds	r1, r4, r3
 801fcba:	1c5a      	adds	r2, r3, #1
 801fcbc:	2030      	movs	r0, #48	; 0x30
 801fcbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801fcc2:	4422      	add	r2, r4
 801fcc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801fcc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801fccc:	3302      	adds	r3, #2
 801fcce:	e7c7      	b.n	801fc60 <_printf_common+0x58>
 801fcd0:	2301      	movs	r3, #1
 801fcd2:	4622      	mov	r2, r4
 801fcd4:	4649      	mov	r1, r9
 801fcd6:	4638      	mov	r0, r7
 801fcd8:	47c0      	blx	r8
 801fcda:	3001      	adds	r0, #1
 801fcdc:	d0e6      	beq.n	801fcac <_printf_common+0xa4>
 801fcde:	3601      	adds	r6, #1
 801fce0:	e7d9      	b.n	801fc96 <_printf_common+0x8e>
	...

0801fce4 <_printf_i>:
 801fce4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fce8:	460c      	mov	r4, r1
 801fcea:	4691      	mov	r9, r2
 801fcec:	7e27      	ldrb	r7, [r4, #24]
 801fcee:	990c      	ldr	r1, [sp, #48]	; 0x30
 801fcf0:	2f78      	cmp	r7, #120	; 0x78
 801fcf2:	4680      	mov	r8, r0
 801fcf4:	469a      	mov	sl, r3
 801fcf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801fcfa:	d807      	bhi.n	801fd0c <_printf_i+0x28>
 801fcfc:	2f62      	cmp	r7, #98	; 0x62
 801fcfe:	d80a      	bhi.n	801fd16 <_printf_i+0x32>
 801fd00:	2f00      	cmp	r7, #0
 801fd02:	f000 80d8 	beq.w	801feb6 <_printf_i+0x1d2>
 801fd06:	2f58      	cmp	r7, #88	; 0x58
 801fd08:	f000 80a3 	beq.w	801fe52 <_printf_i+0x16e>
 801fd0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fd10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801fd14:	e03a      	b.n	801fd8c <_printf_i+0xa8>
 801fd16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801fd1a:	2b15      	cmp	r3, #21
 801fd1c:	d8f6      	bhi.n	801fd0c <_printf_i+0x28>
 801fd1e:	a001      	add	r0, pc, #4	; (adr r0, 801fd24 <_printf_i+0x40>)
 801fd20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801fd24:	0801fd7d 	.word	0x0801fd7d
 801fd28:	0801fd91 	.word	0x0801fd91
 801fd2c:	0801fd0d 	.word	0x0801fd0d
 801fd30:	0801fd0d 	.word	0x0801fd0d
 801fd34:	0801fd0d 	.word	0x0801fd0d
 801fd38:	0801fd0d 	.word	0x0801fd0d
 801fd3c:	0801fd91 	.word	0x0801fd91
 801fd40:	0801fd0d 	.word	0x0801fd0d
 801fd44:	0801fd0d 	.word	0x0801fd0d
 801fd48:	0801fd0d 	.word	0x0801fd0d
 801fd4c:	0801fd0d 	.word	0x0801fd0d
 801fd50:	0801fe9d 	.word	0x0801fe9d
 801fd54:	0801fdc1 	.word	0x0801fdc1
 801fd58:	0801fe7f 	.word	0x0801fe7f
 801fd5c:	0801fd0d 	.word	0x0801fd0d
 801fd60:	0801fd0d 	.word	0x0801fd0d
 801fd64:	0801febf 	.word	0x0801febf
 801fd68:	0801fd0d 	.word	0x0801fd0d
 801fd6c:	0801fdc1 	.word	0x0801fdc1
 801fd70:	0801fd0d 	.word	0x0801fd0d
 801fd74:	0801fd0d 	.word	0x0801fd0d
 801fd78:	0801fe87 	.word	0x0801fe87
 801fd7c:	680b      	ldr	r3, [r1, #0]
 801fd7e:	1d1a      	adds	r2, r3, #4
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	600a      	str	r2, [r1, #0]
 801fd84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801fd88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801fd8c:	2301      	movs	r3, #1
 801fd8e:	e0a3      	b.n	801fed8 <_printf_i+0x1f4>
 801fd90:	6825      	ldr	r5, [r4, #0]
 801fd92:	6808      	ldr	r0, [r1, #0]
 801fd94:	062e      	lsls	r6, r5, #24
 801fd96:	f100 0304 	add.w	r3, r0, #4
 801fd9a:	d50a      	bpl.n	801fdb2 <_printf_i+0xce>
 801fd9c:	6805      	ldr	r5, [r0, #0]
 801fd9e:	600b      	str	r3, [r1, #0]
 801fda0:	2d00      	cmp	r5, #0
 801fda2:	da03      	bge.n	801fdac <_printf_i+0xc8>
 801fda4:	232d      	movs	r3, #45	; 0x2d
 801fda6:	426d      	negs	r5, r5
 801fda8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fdac:	485e      	ldr	r0, [pc, #376]	; (801ff28 <_printf_i+0x244>)
 801fdae:	230a      	movs	r3, #10
 801fdb0:	e019      	b.n	801fde6 <_printf_i+0x102>
 801fdb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fdb6:	6805      	ldr	r5, [r0, #0]
 801fdb8:	600b      	str	r3, [r1, #0]
 801fdba:	bf18      	it	ne
 801fdbc:	b22d      	sxthne	r5, r5
 801fdbe:	e7ef      	b.n	801fda0 <_printf_i+0xbc>
 801fdc0:	680b      	ldr	r3, [r1, #0]
 801fdc2:	6825      	ldr	r5, [r4, #0]
 801fdc4:	1d18      	adds	r0, r3, #4
 801fdc6:	6008      	str	r0, [r1, #0]
 801fdc8:	0628      	lsls	r0, r5, #24
 801fdca:	d501      	bpl.n	801fdd0 <_printf_i+0xec>
 801fdcc:	681d      	ldr	r5, [r3, #0]
 801fdce:	e002      	b.n	801fdd6 <_printf_i+0xf2>
 801fdd0:	0669      	lsls	r1, r5, #25
 801fdd2:	d5fb      	bpl.n	801fdcc <_printf_i+0xe8>
 801fdd4:	881d      	ldrh	r5, [r3, #0]
 801fdd6:	4854      	ldr	r0, [pc, #336]	; (801ff28 <_printf_i+0x244>)
 801fdd8:	2f6f      	cmp	r7, #111	; 0x6f
 801fdda:	bf0c      	ite	eq
 801fddc:	2308      	moveq	r3, #8
 801fdde:	230a      	movne	r3, #10
 801fde0:	2100      	movs	r1, #0
 801fde2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fde6:	6866      	ldr	r6, [r4, #4]
 801fde8:	60a6      	str	r6, [r4, #8]
 801fdea:	2e00      	cmp	r6, #0
 801fdec:	bfa2      	ittt	ge
 801fdee:	6821      	ldrge	r1, [r4, #0]
 801fdf0:	f021 0104 	bicge.w	r1, r1, #4
 801fdf4:	6021      	strge	r1, [r4, #0]
 801fdf6:	b90d      	cbnz	r5, 801fdfc <_printf_i+0x118>
 801fdf8:	2e00      	cmp	r6, #0
 801fdfa:	d04d      	beq.n	801fe98 <_printf_i+0x1b4>
 801fdfc:	4616      	mov	r6, r2
 801fdfe:	fbb5 f1f3 	udiv	r1, r5, r3
 801fe02:	fb03 5711 	mls	r7, r3, r1, r5
 801fe06:	5dc7      	ldrb	r7, [r0, r7]
 801fe08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fe0c:	462f      	mov	r7, r5
 801fe0e:	42bb      	cmp	r3, r7
 801fe10:	460d      	mov	r5, r1
 801fe12:	d9f4      	bls.n	801fdfe <_printf_i+0x11a>
 801fe14:	2b08      	cmp	r3, #8
 801fe16:	d10b      	bne.n	801fe30 <_printf_i+0x14c>
 801fe18:	6823      	ldr	r3, [r4, #0]
 801fe1a:	07df      	lsls	r7, r3, #31
 801fe1c:	d508      	bpl.n	801fe30 <_printf_i+0x14c>
 801fe1e:	6923      	ldr	r3, [r4, #16]
 801fe20:	6861      	ldr	r1, [r4, #4]
 801fe22:	4299      	cmp	r1, r3
 801fe24:	bfde      	ittt	le
 801fe26:	2330      	movle	r3, #48	; 0x30
 801fe28:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fe2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fe30:	1b92      	subs	r2, r2, r6
 801fe32:	6122      	str	r2, [r4, #16]
 801fe34:	f8cd a000 	str.w	sl, [sp]
 801fe38:	464b      	mov	r3, r9
 801fe3a:	aa03      	add	r2, sp, #12
 801fe3c:	4621      	mov	r1, r4
 801fe3e:	4640      	mov	r0, r8
 801fe40:	f7ff fee2 	bl	801fc08 <_printf_common>
 801fe44:	3001      	adds	r0, #1
 801fe46:	d14c      	bne.n	801fee2 <_printf_i+0x1fe>
 801fe48:	f04f 30ff 	mov.w	r0, #4294967295
 801fe4c:	b004      	add	sp, #16
 801fe4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fe52:	4835      	ldr	r0, [pc, #212]	; (801ff28 <_printf_i+0x244>)
 801fe54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fe58:	6823      	ldr	r3, [r4, #0]
 801fe5a:	680e      	ldr	r6, [r1, #0]
 801fe5c:	061f      	lsls	r7, r3, #24
 801fe5e:	f856 5b04 	ldr.w	r5, [r6], #4
 801fe62:	600e      	str	r6, [r1, #0]
 801fe64:	d514      	bpl.n	801fe90 <_printf_i+0x1ac>
 801fe66:	07d9      	lsls	r1, r3, #31
 801fe68:	bf44      	itt	mi
 801fe6a:	f043 0320 	orrmi.w	r3, r3, #32
 801fe6e:	6023      	strmi	r3, [r4, #0]
 801fe70:	b91d      	cbnz	r5, 801fe7a <_printf_i+0x196>
 801fe72:	6823      	ldr	r3, [r4, #0]
 801fe74:	f023 0320 	bic.w	r3, r3, #32
 801fe78:	6023      	str	r3, [r4, #0]
 801fe7a:	2310      	movs	r3, #16
 801fe7c:	e7b0      	b.n	801fde0 <_printf_i+0xfc>
 801fe7e:	6823      	ldr	r3, [r4, #0]
 801fe80:	f043 0320 	orr.w	r3, r3, #32
 801fe84:	6023      	str	r3, [r4, #0]
 801fe86:	2378      	movs	r3, #120	; 0x78
 801fe88:	4828      	ldr	r0, [pc, #160]	; (801ff2c <_printf_i+0x248>)
 801fe8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801fe8e:	e7e3      	b.n	801fe58 <_printf_i+0x174>
 801fe90:	065e      	lsls	r6, r3, #25
 801fe92:	bf48      	it	mi
 801fe94:	b2ad      	uxthmi	r5, r5
 801fe96:	e7e6      	b.n	801fe66 <_printf_i+0x182>
 801fe98:	4616      	mov	r6, r2
 801fe9a:	e7bb      	b.n	801fe14 <_printf_i+0x130>
 801fe9c:	680b      	ldr	r3, [r1, #0]
 801fe9e:	6826      	ldr	r6, [r4, #0]
 801fea0:	6960      	ldr	r0, [r4, #20]
 801fea2:	1d1d      	adds	r5, r3, #4
 801fea4:	600d      	str	r5, [r1, #0]
 801fea6:	0635      	lsls	r5, r6, #24
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	d501      	bpl.n	801feb0 <_printf_i+0x1cc>
 801feac:	6018      	str	r0, [r3, #0]
 801feae:	e002      	b.n	801feb6 <_printf_i+0x1d2>
 801feb0:	0671      	lsls	r1, r6, #25
 801feb2:	d5fb      	bpl.n	801feac <_printf_i+0x1c8>
 801feb4:	8018      	strh	r0, [r3, #0]
 801feb6:	2300      	movs	r3, #0
 801feb8:	6123      	str	r3, [r4, #16]
 801feba:	4616      	mov	r6, r2
 801febc:	e7ba      	b.n	801fe34 <_printf_i+0x150>
 801febe:	680b      	ldr	r3, [r1, #0]
 801fec0:	1d1a      	adds	r2, r3, #4
 801fec2:	600a      	str	r2, [r1, #0]
 801fec4:	681e      	ldr	r6, [r3, #0]
 801fec6:	6862      	ldr	r2, [r4, #4]
 801fec8:	2100      	movs	r1, #0
 801feca:	4630      	mov	r0, r6
 801fecc:	f7e0 f9c8 	bl	8000260 <memchr>
 801fed0:	b108      	cbz	r0, 801fed6 <_printf_i+0x1f2>
 801fed2:	1b80      	subs	r0, r0, r6
 801fed4:	6060      	str	r0, [r4, #4]
 801fed6:	6863      	ldr	r3, [r4, #4]
 801fed8:	6123      	str	r3, [r4, #16]
 801feda:	2300      	movs	r3, #0
 801fedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fee0:	e7a8      	b.n	801fe34 <_printf_i+0x150>
 801fee2:	6923      	ldr	r3, [r4, #16]
 801fee4:	4632      	mov	r2, r6
 801fee6:	4649      	mov	r1, r9
 801fee8:	4640      	mov	r0, r8
 801feea:	47d0      	blx	sl
 801feec:	3001      	adds	r0, #1
 801feee:	d0ab      	beq.n	801fe48 <_printf_i+0x164>
 801fef0:	6823      	ldr	r3, [r4, #0]
 801fef2:	079b      	lsls	r3, r3, #30
 801fef4:	d413      	bmi.n	801ff1e <_printf_i+0x23a>
 801fef6:	68e0      	ldr	r0, [r4, #12]
 801fef8:	9b03      	ldr	r3, [sp, #12]
 801fefa:	4298      	cmp	r0, r3
 801fefc:	bfb8      	it	lt
 801fefe:	4618      	movlt	r0, r3
 801ff00:	e7a4      	b.n	801fe4c <_printf_i+0x168>
 801ff02:	2301      	movs	r3, #1
 801ff04:	4632      	mov	r2, r6
 801ff06:	4649      	mov	r1, r9
 801ff08:	4640      	mov	r0, r8
 801ff0a:	47d0      	blx	sl
 801ff0c:	3001      	adds	r0, #1
 801ff0e:	d09b      	beq.n	801fe48 <_printf_i+0x164>
 801ff10:	3501      	adds	r5, #1
 801ff12:	68e3      	ldr	r3, [r4, #12]
 801ff14:	9903      	ldr	r1, [sp, #12]
 801ff16:	1a5b      	subs	r3, r3, r1
 801ff18:	42ab      	cmp	r3, r5
 801ff1a:	dcf2      	bgt.n	801ff02 <_printf_i+0x21e>
 801ff1c:	e7eb      	b.n	801fef6 <_printf_i+0x212>
 801ff1e:	2500      	movs	r5, #0
 801ff20:	f104 0619 	add.w	r6, r4, #25
 801ff24:	e7f5      	b.n	801ff12 <_printf_i+0x22e>
 801ff26:	bf00      	nop
 801ff28:	08025cc0 	.word	0x08025cc0
 801ff2c:	08025cd1 	.word	0x08025cd1

0801ff30 <_putc_r>:
 801ff30:	b570      	push	{r4, r5, r6, lr}
 801ff32:	460d      	mov	r5, r1
 801ff34:	4614      	mov	r4, r2
 801ff36:	4606      	mov	r6, r0
 801ff38:	b118      	cbz	r0, 801ff42 <_putc_r+0x12>
 801ff3a:	6983      	ldr	r3, [r0, #24]
 801ff3c:	b90b      	cbnz	r3, 801ff42 <_putc_r+0x12>
 801ff3e:	f7fd f9ef 	bl	801d320 <__sinit>
 801ff42:	4b1c      	ldr	r3, [pc, #112]	; (801ffb4 <_putc_r+0x84>)
 801ff44:	429c      	cmp	r4, r3
 801ff46:	d124      	bne.n	801ff92 <_putc_r+0x62>
 801ff48:	6874      	ldr	r4, [r6, #4]
 801ff4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ff4c:	07d8      	lsls	r0, r3, #31
 801ff4e:	d405      	bmi.n	801ff5c <_putc_r+0x2c>
 801ff50:	89a3      	ldrh	r3, [r4, #12]
 801ff52:	0599      	lsls	r1, r3, #22
 801ff54:	d402      	bmi.n	801ff5c <_putc_r+0x2c>
 801ff56:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff58:	f7fd fd95 	bl	801da86 <__retarget_lock_acquire_recursive>
 801ff5c:	68a3      	ldr	r3, [r4, #8]
 801ff5e:	3b01      	subs	r3, #1
 801ff60:	2b00      	cmp	r3, #0
 801ff62:	60a3      	str	r3, [r4, #8]
 801ff64:	da05      	bge.n	801ff72 <_putc_r+0x42>
 801ff66:	69a2      	ldr	r2, [r4, #24]
 801ff68:	4293      	cmp	r3, r2
 801ff6a:	db1c      	blt.n	801ffa6 <_putc_r+0x76>
 801ff6c:	b2eb      	uxtb	r3, r5
 801ff6e:	2b0a      	cmp	r3, #10
 801ff70:	d019      	beq.n	801ffa6 <_putc_r+0x76>
 801ff72:	6823      	ldr	r3, [r4, #0]
 801ff74:	1c5a      	adds	r2, r3, #1
 801ff76:	6022      	str	r2, [r4, #0]
 801ff78:	701d      	strb	r5, [r3, #0]
 801ff7a:	b2ed      	uxtb	r5, r5
 801ff7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ff7e:	07da      	lsls	r2, r3, #31
 801ff80:	d405      	bmi.n	801ff8e <_putc_r+0x5e>
 801ff82:	89a3      	ldrh	r3, [r4, #12]
 801ff84:	059b      	lsls	r3, r3, #22
 801ff86:	d402      	bmi.n	801ff8e <_putc_r+0x5e>
 801ff88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ff8a:	f7fd fd7e 	bl	801da8a <__retarget_lock_release_recursive>
 801ff8e:	4628      	mov	r0, r5
 801ff90:	bd70      	pop	{r4, r5, r6, pc}
 801ff92:	4b09      	ldr	r3, [pc, #36]	; (801ffb8 <_putc_r+0x88>)
 801ff94:	429c      	cmp	r4, r3
 801ff96:	d101      	bne.n	801ff9c <_putc_r+0x6c>
 801ff98:	68b4      	ldr	r4, [r6, #8]
 801ff9a:	e7d6      	b.n	801ff4a <_putc_r+0x1a>
 801ff9c:	4b07      	ldr	r3, [pc, #28]	; (801ffbc <_putc_r+0x8c>)
 801ff9e:	429c      	cmp	r4, r3
 801ffa0:	bf08      	it	eq
 801ffa2:	68f4      	ldreq	r4, [r6, #12]
 801ffa4:	e7d1      	b.n	801ff4a <_putc_r+0x1a>
 801ffa6:	4629      	mov	r1, r5
 801ffa8:	4622      	mov	r2, r4
 801ffaa:	4630      	mov	r0, r6
 801ffac:	f7ff f856 	bl	801f05c <__swbuf_r>
 801ffb0:	4605      	mov	r5, r0
 801ffb2:	e7e3      	b.n	801ff7c <_putc_r+0x4c>
 801ffb4:	08025730 	.word	0x08025730
 801ffb8:	08025750 	.word	0x08025750
 801ffbc:	08025710 	.word	0x08025710

0801ffc0 <_read_r>:
 801ffc0:	b538      	push	{r3, r4, r5, lr}
 801ffc2:	4d07      	ldr	r5, [pc, #28]	; (801ffe0 <_read_r+0x20>)
 801ffc4:	4604      	mov	r4, r0
 801ffc6:	4608      	mov	r0, r1
 801ffc8:	4611      	mov	r1, r2
 801ffca:	2200      	movs	r2, #0
 801ffcc:	602a      	str	r2, [r5, #0]
 801ffce:	461a      	mov	r2, r3
 801ffd0:	f7e0 fee1 	bl	8000d96 <_read>
 801ffd4:	1c43      	adds	r3, r0, #1
 801ffd6:	d102      	bne.n	801ffde <_read_r+0x1e>
 801ffd8:	682b      	ldr	r3, [r5, #0]
 801ffda:	b103      	cbz	r3, 801ffde <_read_r+0x1e>
 801ffdc:	6023      	str	r3, [r4, #0]
 801ffde:	bd38      	pop	{r3, r4, r5, pc}
 801ffe0:	20000da4 	.word	0x20000da4

0801ffe4 <sniprintf>:
 801ffe4:	b40c      	push	{r2, r3}
 801ffe6:	b530      	push	{r4, r5, lr}
 801ffe8:	4b17      	ldr	r3, [pc, #92]	; (8020048 <sniprintf+0x64>)
 801ffea:	1e0c      	subs	r4, r1, #0
 801ffec:	681d      	ldr	r5, [r3, #0]
 801ffee:	b09d      	sub	sp, #116	; 0x74
 801fff0:	da08      	bge.n	8020004 <sniprintf+0x20>
 801fff2:	238b      	movs	r3, #139	; 0x8b
 801fff4:	602b      	str	r3, [r5, #0]
 801fff6:	f04f 30ff 	mov.w	r0, #4294967295
 801fffa:	b01d      	add	sp, #116	; 0x74
 801fffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020000:	b002      	add	sp, #8
 8020002:	4770      	bx	lr
 8020004:	f44f 7302 	mov.w	r3, #520	; 0x208
 8020008:	f8ad 3014 	strh.w	r3, [sp, #20]
 802000c:	bf14      	ite	ne
 802000e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8020012:	4623      	moveq	r3, r4
 8020014:	9304      	str	r3, [sp, #16]
 8020016:	9307      	str	r3, [sp, #28]
 8020018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802001c:	9002      	str	r0, [sp, #8]
 802001e:	9006      	str	r0, [sp, #24]
 8020020:	f8ad 3016 	strh.w	r3, [sp, #22]
 8020024:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020026:	ab21      	add	r3, sp, #132	; 0x84
 8020028:	a902      	add	r1, sp, #8
 802002a:	4628      	mov	r0, r5
 802002c:	9301      	str	r3, [sp, #4]
 802002e:	f7ff fb91 	bl	801f754 <_svfiprintf_r>
 8020032:	1c43      	adds	r3, r0, #1
 8020034:	bfbc      	itt	lt
 8020036:	238b      	movlt	r3, #139	; 0x8b
 8020038:	602b      	strlt	r3, [r5, #0]
 802003a:	2c00      	cmp	r4, #0
 802003c:	d0dd      	beq.n	801fffa <sniprintf+0x16>
 802003e:	9b02      	ldr	r3, [sp, #8]
 8020040:	2200      	movs	r2, #0
 8020042:	701a      	strb	r2, [r3, #0]
 8020044:	e7d9      	b.n	801fffa <sniprintf+0x16>
 8020046:	bf00      	nop
 8020048:	20000104 	.word	0x20000104

0802004c <siscanf>:
 802004c:	b40e      	push	{r1, r2, r3}
 802004e:	b510      	push	{r4, lr}
 8020050:	b09f      	sub	sp, #124	; 0x7c
 8020052:	ac21      	add	r4, sp, #132	; 0x84
 8020054:	f44f 7101 	mov.w	r1, #516	; 0x204
 8020058:	f854 2b04 	ldr.w	r2, [r4], #4
 802005c:	9201      	str	r2, [sp, #4]
 802005e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020062:	9004      	str	r0, [sp, #16]
 8020064:	9008      	str	r0, [sp, #32]
 8020066:	f7e0 f8e9 	bl	800023c <strlen>
 802006a:	4b0c      	ldr	r3, [pc, #48]	; (802009c <siscanf+0x50>)
 802006c:	9005      	str	r0, [sp, #20]
 802006e:	9009      	str	r0, [sp, #36]	; 0x24
 8020070:	930d      	str	r3, [sp, #52]	; 0x34
 8020072:	480b      	ldr	r0, [pc, #44]	; (80200a0 <siscanf+0x54>)
 8020074:	9a01      	ldr	r2, [sp, #4]
 8020076:	6800      	ldr	r0, [r0, #0]
 8020078:	9403      	str	r4, [sp, #12]
 802007a:	2300      	movs	r3, #0
 802007c:	9311      	str	r3, [sp, #68]	; 0x44
 802007e:	9316      	str	r3, [sp, #88]	; 0x58
 8020080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020084:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020088:	a904      	add	r1, sp, #16
 802008a:	4623      	mov	r3, r4
 802008c:	f000 f8ba 	bl	8020204 <__ssvfiscanf_r>
 8020090:	b01f      	add	sp, #124	; 0x7c
 8020092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020096:	b003      	add	sp, #12
 8020098:	4770      	bx	lr
 802009a:	bf00      	nop
 802009c:	0801df1b 	.word	0x0801df1b
 80200a0:	20000104 	.word	0x20000104

080200a4 <strcpy>:
 80200a4:	4603      	mov	r3, r0
 80200a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80200aa:	f803 2b01 	strb.w	r2, [r3], #1
 80200ae:	2a00      	cmp	r2, #0
 80200b0:	d1f9      	bne.n	80200a6 <strcpy+0x2>
 80200b2:	4770      	bx	lr

080200b4 <strncmp>:
 80200b4:	b510      	push	{r4, lr}
 80200b6:	b16a      	cbz	r2, 80200d4 <strncmp+0x20>
 80200b8:	3901      	subs	r1, #1
 80200ba:	1884      	adds	r4, r0, r2
 80200bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 80200c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80200c4:	4293      	cmp	r3, r2
 80200c6:	d103      	bne.n	80200d0 <strncmp+0x1c>
 80200c8:	42a0      	cmp	r0, r4
 80200ca:	d001      	beq.n	80200d0 <strncmp+0x1c>
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d1f5      	bne.n	80200bc <strncmp+0x8>
 80200d0:	1a98      	subs	r0, r3, r2
 80200d2:	bd10      	pop	{r4, pc}
 80200d4:	4610      	mov	r0, r2
 80200d6:	e7fc      	b.n	80200d2 <strncmp+0x1e>

080200d8 <__ascii_wctomb>:
 80200d8:	b149      	cbz	r1, 80200ee <__ascii_wctomb+0x16>
 80200da:	2aff      	cmp	r2, #255	; 0xff
 80200dc:	bf85      	ittet	hi
 80200de:	238a      	movhi	r3, #138	; 0x8a
 80200e0:	6003      	strhi	r3, [r0, #0]
 80200e2:	700a      	strbls	r2, [r1, #0]
 80200e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80200e8:	bf98      	it	ls
 80200ea:	2001      	movls	r0, #1
 80200ec:	4770      	bx	lr
 80200ee:	4608      	mov	r0, r1
 80200f0:	4770      	bx	lr
	...

080200f4 <__env_lock>:
 80200f4:	4801      	ldr	r0, [pc, #4]	; (80200fc <__env_lock+0x8>)
 80200f6:	f7fd bcc6 	b.w	801da86 <__retarget_lock_acquire_recursive>
 80200fa:	bf00      	nop
 80200fc:	20000d9a 	.word	0x20000d9a

08020100 <__env_unlock>:
 8020100:	4801      	ldr	r0, [pc, #4]	; (8020108 <__env_unlock+0x8>)
 8020102:	f7fd bcc2 	b.w	801da8a <__retarget_lock_release_recursive>
 8020106:	bf00      	nop
 8020108:	20000d9a 	.word	0x20000d9a

0802010c <memmove>:
 802010c:	4288      	cmp	r0, r1
 802010e:	b510      	push	{r4, lr}
 8020110:	eb01 0402 	add.w	r4, r1, r2
 8020114:	d902      	bls.n	802011c <memmove+0x10>
 8020116:	4284      	cmp	r4, r0
 8020118:	4623      	mov	r3, r4
 802011a:	d807      	bhi.n	802012c <memmove+0x20>
 802011c:	1e43      	subs	r3, r0, #1
 802011e:	42a1      	cmp	r1, r4
 8020120:	d008      	beq.n	8020134 <memmove+0x28>
 8020122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020126:	f803 2f01 	strb.w	r2, [r3, #1]!
 802012a:	e7f8      	b.n	802011e <memmove+0x12>
 802012c:	4402      	add	r2, r0
 802012e:	4601      	mov	r1, r0
 8020130:	428a      	cmp	r2, r1
 8020132:	d100      	bne.n	8020136 <memmove+0x2a>
 8020134:	bd10      	pop	{r4, pc}
 8020136:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802013a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802013e:	e7f7      	b.n	8020130 <memmove+0x24>

08020140 <_malloc_usable_size_r>:
 8020140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020144:	1f18      	subs	r0, r3, #4
 8020146:	2b00      	cmp	r3, #0
 8020148:	bfbc      	itt	lt
 802014a:	580b      	ldrlt	r3, [r1, r0]
 802014c:	18c0      	addlt	r0, r0, r3
 802014e:	4770      	bx	lr

08020150 <_sungetc_r>:
 8020150:	b538      	push	{r3, r4, r5, lr}
 8020152:	1c4b      	adds	r3, r1, #1
 8020154:	4614      	mov	r4, r2
 8020156:	d103      	bne.n	8020160 <_sungetc_r+0x10>
 8020158:	f04f 35ff 	mov.w	r5, #4294967295
 802015c:	4628      	mov	r0, r5
 802015e:	bd38      	pop	{r3, r4, r5, pc}
 8020160:	8993      	ldrh	r3, [r2, #12]
 8020162:	f023 0320 	bic.w	r3, r3, #32
 8020166:	8193      	strh	r3, [r2, #12]
 8020168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802016a:	6852      	ldr	r2, [r2, #4]
 802016c:	b2cd      	uxtb	r5, r1
 802016e:	b18b      	cbz	r3, 8020194 <_sungetc_r+0x44>
 8020170:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8020172:	4293      	cmp	r3, r2
 8020174:	dd08      	ble.n	8020188 <_sungetc_r+0x38>
 8020176:	6823      	ldr	r3, [r4, #0]
 8020178:	1e5a      	subs	r2, r3, #1
 802017a:	6022      	str	r2, [r4, #0]
 802017c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8020180:	6863      	ldr	r3, [r4, #4]
 8020182:	3301      	adds	r3, #1
 8020184:	6063      	str	r3, [r4, #4]
 8020186:	e7e9      	b.n	802015c <_sungetc_r+0xc>
 8020188:	4621      	mov	r1, r4
 802018a:	f000 fbbf 	bl	802090c <__submore>
 802018e:	2800      	cmp	r0, #0
 8020190:	d0f1      	beq.n	8020176 <_sungetc_r+0x26>
 8020192:	e7e1      	b.n	8020158 <_sungetc_r+0x8>
 8020194:	6921      	ldr	r1, [r4, #16]
 8020196:	6823      	ldr	r3, [r4, #0]
 8020198:	b151      	cbz	r1, 80201b0 <_sungetc_r+0x60>
 802019a:	4299      	cmp	r1, r3
 802019c:	d208      	bcs.n	80201b0 <_sungetc_r+0x60>
 802019e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80201a2:	42a9      	cmp	r1, r5
 80201a4:	d104      	bne.n	80201b0 <_sungetc_r+0x60>
 80201a6:	3b01      	subs	r3, #1
 80201a8:	3201      	adds	r2, #1
 80201aa:	6023      	str	r3, [r4, #0]
 80201ac:	6062      	str	r2, [r4, #4]
 80201ae:	e7d5      	b.n	802015c <_sungetc_r+0xc>
 80201b0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80201b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80201b8:	6363      	str	r3, [r4, #52]	; 0x34
 80201ba:	2303      	movs	r3, #3
 80201bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80201be:	4623      	mov	r3, r4
 80201c0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80201c4:	6023      	str	r3, [r4, #0]
 80201c6:	2301      	movs	r3, #1
 80201c8:	e7dc      	b.n	8020184 <_sungetc_r+0x34>

080201ca <__ssrefill_r>:
 80201ca:	b510      	push	{r4, lr}
 80201cc:	460c      	mov	r4, r1
 80201ce:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80201d0:	b169      	cbz	r1, 80201ee <__ssrefill_r+0x24>
 80201d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80201d6:	4299      	cmp	r1, r3
 80201d8:	d001      	beq.n	80201de <__ssrefill_r+0x14>
 80201da:	f7fd fcf1 	bl	801dbc0 <_free_r>
 80201de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80201e0:	6063      	str	r3, [r4, #4]
 80201e2:	2000      	movs	r0, #0
 80201e4:	6360      	str	r0, [r4, #52]	; 0x34
 80201e6:	b113      	cbz	r3, 80201ee <__ssrefill_r+0x24>
 80201e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80201ea:	6023      	str	r3, [r4, #0]
 80201ec:	bd10      	pop	{r4, pc}
 80201ee:	6923      	ldr	r3, [r4, #16]
 80201f0:	6023      	str	r3, [r4, #0]
 80201f2:	2300      	movs	r3, #0
 80201f4:	6063      	str	r3, [r4, #4]
 80201f6:	89a3      	ldrh	r3, [r4, #12]
 80201f8:	f043 0320 	orr.w	r3, r3, #32
 80201fc:	81a3      	strh	r3, [r4, #12]
 80201fe:	f04f 30ff 	mov.w	r0, #4294967295
 8020202:	e7f3      	b.n	80201ec <__ssrefill_r+0x22>

08020204 <__ssvfiscanf_r>:
 8020204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020208:	460c      	mov	r4, r1
 802020a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802020e:	2100      	movs	r1, #0
 8020210:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8020214:	49b2      	ldr	r1, [pc, #712]	; (80204e0 <__ssvfiscanf_r+0x2dc>)
 8020216:	91a0      	str	r1, [sp, #640]	; 0x280
 8020218:	f10d 0804 	add.w	r8, sp, #4
 802021c:	49b1      	ldr	r1, [pc, #708]	; (80204e4 <__ssvfiscanf_r+0x2e0>)
 802021e:	4fb2      	ldr	r7, [pc, #712]	; (80204e8 <__ssvfiscanf_r+0x2e4>)
 8020220:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80204ec <__ssvfiscanf_r+0x2e8>
 8020224:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8020228:	4606      	mov	r6, r0
 802022a:	91a1      	str	r1, [sp, #644]	; 0x284
 802022c:	9300      	str	r3, [sp, #0]
 802022e:	f892 a000 	ldrb.w	sl, [r2]
 8020232:	f1ba 0f00 	cmp.w	sl, #0
 8020236:	f000 8151 	beq.w	80204dc <__ssvfiscanf_r+0x2d8>
 802023a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802023e:	f013 0308 	ands.w	r3, r3, #8
 8020242:	f102 0501 	add.w	r5, r2, #1
 8020246:	d019      	beq.n	802027c <__ssvfiscanf_r+0x78>
 8020248:	6863      	ldr	r3, [r4, #4]
 802024a:	2b00      	cmp	r3, #0
 802024c:	dd0f      	ble.n	802026e <__ssvfiscanf_r+0x6a>
 802024e:	6823      	ldr	r3, [r4, #0]
 8020250:	781a      	ldrb	r2, [r3, #0]
 8020252:	5cba      	ldrb	r2, [r7, r2]
 8020254:	0712      	lsls	r2, r2, #28
 8020256:	d401      	bmi.n	802025c <__ssvfiscanf_r+0x58>
 8020258:	462a      	mov	r2, r5
 802025a:	e7e8      	b.n	802022e <__ssvfiscanf_r+0x2a>
 802025c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802025e:	3201      	adds	r2, #1
 8020260:	9245      	str	r2, [sp, #276]	; 0x114
 8020262:	6862      	ldr	r2, [r4, #4]
 8020264:	3301      	adds	r3, #1
 8020266:	3a01      	subs	r2, #1
 8020268:	6062      	str	r2, [r4, #4]
 802026a:	6023      	str	r3, [r4, #0]
 802026c:	e7ec      	b.n	8020248 <__ssvfiscanf_r+0x44>
 802026e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020270:	4621      	mov	r1, r4
 8020272:	4630      	mov	r0, r6
 8020274:	4798      	blx	r3
 8020276:	2800      	cmp	r0, #0
 8020278:	d0e9      	beq.n	802024e <__ssvfiscanf_r+0x4a>
 802027a:	e7ed      	b.n	8020258 <__ssvfiscanf_r+0x54>
 802027c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8020280:	f040 8083 	bne.w	802038a <__ssvfiscanf_r+0x186>
 8020284:	9341      	str	r3, [sp, #260]	; 0x104
 8020286:	9343      	str	r3, [sp, #268]	; 0x10c
 8020288:	7853      	ldrb	r3, [r2, #1]
 802028a:	2b2a      	cmp	r3, #42	; 0x2a
 802028c:	bf02      	ittt	eq
 802028e:	2310      	moveq	r3, #16
 8020290:	1c95      	addeq	r5, r2, #2
 8020292:	9341      	streq	r3, [sp, #260]	; 0x104
 8020294:	220a      	movs	r2, #10
 8020296:	46ab      	mov	fp, r5
 8020298:	f81b 1b01 	ldrb.w	r1, [fp], #1
 802029c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80202a0:	2b09      	cmp	r3, #9
 80202a2:	d91d      	bls.n	80202e0 <__ssvfiscanf_r+0xdc>
 80202a4:	4891      	ldr	r0, [pc, #580]	; (80204ec <__ssvfiscanf_r+0x2e8>)
 80202a6:	2203      	movs	r2, #3
 80202a8:	f7df ffda 	bl	8000260 <memchr>
 80202ac:	b140      	cbz	r0, 80202c0 <__ssvfiscanf_r+0xbc>
 80202ae:	2301      	movs	r3, #1
 80202b0:	eba0 0009 	sub.w	r0, r0, r9
 80202b4:	fa03 f000 	lsl.w	r0, r3, r0
 80202b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80202ba:	4318      	orrs	r0, r3
 80202bc:	9041      	str	r0, [sp, #260]	; 0x104
 80202be:	465d      	mov	r5, fp
 80202c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80202c4:	2b78      	cmp	r3, #120	; 0x78
 80202c6:	d806      	bhi.n	80202d6 <__ssvfiscanf_r+0xd2>
 80202c8:	2b57      	cmp	r3, #87	; 0x57
 80202ca:	d810      	bhi.n	80202ee <__ssvfiscanf_r+0xea>
 80202cc:	2b25      	cmp	r3, #37	; 0x25
 80202ce:	d05c      	beq.n	802038a <__ssvfiscanf_r+0x186>
 80202d0:	d856      	bhi.n	8020380 <__ssvfiscanf_r+0x17c>
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d074      	beq.n	80203c0 <__ssvfiscanf_r+0x1bc>
 80202d6:	2303      	movs	r3, #3
 80202d8:	9347      	str	r3, [sp, #284]	; 0x11c
 80202da:	230a      	movs	r3, #10
 80202dc:	9342      	str	r3, [sp, #264]	; 0x108
 80202de:	e081      	b.n	80203e4 <__ssvfiscanf_r+0x1e0>
 80202e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80202e2:	fb02 1303 	mla	r3, r2, r3, r1
 80202e6:	3b30      	subs	r3, #48	; 0x30
 80202e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80202ea:	465d      	mov	r5, fp
 80202ec:	e7d3      	b.n	8020296 <__ssvfiscanf_r+0x92>
 80202ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80202f2:	2a20      	cmp	r2, #32
 80202f4:	d8ef      	bhi.n	80202d6 <__ssvfiscanf_r+0xd2>
 80202f6:	a101      	add	r1, pc, #4	; (adr r1, 80202fc <__ssvfiscanf_r+0xf8>)
 80202f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80202fc:	080203cf 	.word	0x080203cf
 8020300:	080202d7 	.word	0x080202d7
 8020304:	080202d7 	.word	0x080202d7
 8020308:	0802042d 	.word	0x0802042d
 802030c:	080202d7 	.word	0x080202d7
 8020310:	080202d7 	.word	0x080202d7
 8020314:	080202d7 	.word	0x080202d7
 8020318:	080202d7 	.word	0x080202d7
 802031c:	080202d7 	.word	0x080202d7
 8020320:	080202d7 	.word	0x080202d7
 8020324:	080202d7 	.word	0x080202d7
 8020328:	08020443 	.word	0x08020443
 802032c:	08020419 	.word	0x08020419
 8020330:	08020387 	.word	0x08020387
 8020334:	08020387 	.word	0x08020387
 8020338:	08020387 	.word	0x08020387
 802033c:	080202d7 	.word	0x080202d7
 8020340:	0802041d 	.word	0x0802041d
 8020344:	080202d7 	.word	0x080202d7
 8020348:	080202d7 	.word	0x080202d7
 802034c:	080202d7 	.word	0x080202d7
 8020350:	080202d7 	.word	0x080202d7
 8020354:	08020453 	.word	0x08020453
 8020358:	08020425 	.word	0x08020425
 802035c:	080203c7 	.word	0x080203c7
 8020360:	080202d7 	.word	0x080202d7
 8020364:	080202d7 	.word	0x080202d7
 8020368:	0802044f 	.word	0x0802044f
 802036c:	080202d7 	.word	0x080202d7
 8020370:	08020419 	.word	0x08020419
 8020374:	080202d7 	.word	0x080202d7
 8020378:	080202d7 	.word	0x080202d7
 802037c:	080203cf 	.word	0x080203cf
 8020380:	3b45      	subs	r3, #69	; 0x45
 8020382:	2b02      	cmp	r3, #2
 8020384:	d8a7      	bhi.n	80202d6 <__ssvfiscanf_r+0xd2>
 8020386:	2305      	movs	r3, #5
 8020388:	e02b      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 802038a:	6863      	ldr	r3, [r4, #4]
 802038c:	2b00      	cmp	r3, #0
 802038e:	dd0d      	ble.n	80203ac <__ssvfiscanf_r+0x1a8>
 8020390:	6823      	ldr	r3, [r4, #0]
 8020392:	781a      	ldrb	r2, [r3, #0]
 8020394:	4552      	cmp	r2, sl
 8020396:	f040 80a1 	bne.w	80204dc <__ssvfiscanf_r+0x2d8>
 802039a:	3301      	adds	r3, #1
 802039c:	6862      	ldr	r2, [r4, #4]
 802039e:	6023      	str	r3, [r4, #0]
 80203a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80203a2:	3a01      	subs	r2, #1
 80203a4:	3301      	adds	r3, #1
 80203a6:	6062      	str	r2, [r4, #4]
 80203a8:	9345      	str	r3, [sp, #276]	; 0x114
 80203aa:	e755      	b.n	8020258 <__ssvfiscanf_r+0x54>
 80203ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80203ae:	4621      	mov	r1, r4
 80203b0:	4630      	mov	r0, r6
 80203b2:	4798      	blx	r3
 80203b4:	2800      	cmp	r0, #0
 80203b6:	d0eb      	beq.n	8020390 <__ssvfiscanf_r+0x18c>
 80203b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80203ba:	2800      	cmp	r0, #0
 80203bc:	f040 8084 	bne.w	80204c8 <__ssvfiscanf_r+0x2c4>
 80203c0:	f04f 30ff 	mov.w	r0, #4294967295
 80203c4:	e086      	b.n	80204d4 <__ssvfiscanf_r+0x2d0>
 80203c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80203c8:	f042 0220 	orr.w	r2, r2, #32
 80203cc:	9241      	str	r2, [sp, #260]	; 0x104
 80203ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80203d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80203d4:	9241      	str	r2, [sp, #260]	; 0x104
 80203d6:	2210      	movs	r2, #16
 80203d8:	2b6f      	cmp	r3, #111	; 0x6f
 80203da:	9242      	str	r2, [sp, #264]	; 0x108
 80203dc:	bf34      	ite	cc
 80203de:	2303      	movcc	r3, #3
 80203e0:	2304      	movcs	r3, #4
 80203e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80203e4:	6863      	ldr	r3, [r4, #4]
 80203e6:	2b00      	cmp	r3, #0
 80203e8:	dd41      	ble.n	802046e <__ssvfiscanf_r+0x26a>
 80203ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80203ec:	0659      	lsls	r1, r3, #25
 80203ee:	d404      	bmi.n	80203fa <__ssvfiscanf_r+0x1f6>
 80203f0:	6823      	ldr	r3, [r4, #0]
 80203f2:	781a      	ldrb	r2, [r3, #0]
 80203f4:	5cba      	ldrb	r2, [r7, r2]
 80203f6:	0712      	lsls	r2, r2, #28
 80203f8:	d440      	bmi.n	802047c <__ssvfiscanf_r+0x278>
 80203fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80203fc:	2b02      	cmp	r3, #2
 80203fe:	dc4f      	bgt.n	80204a0 <__ssvfiscanf_r+0x29c>
 8020400:	466b      	mov	r3, sp
 8020402:	4622      	mov	r2, r4
 8020404:	a941      	add	r1, sp, #260	; 0x104
 8020406:	4630      	mov	r0, r6
 8020408:	f000 f874 	bl	80204f4 <_scanf_chars>
 802040c:	2801      	cmp	r0, #1
 802040e:	d065      	beq.n	80204dc <__ssvfiscanf_r+0x2d8>
 8020410:	2802      	cmp	r0, #2
 8020412:	f47f af21 	bne.w	8020258 <__ssvfiscanf_r+0x54>
 8020416:	e7cf      	b.n	80203b8 <__ssvfiscanf_r+0x1b4>
 8020418:	220a      	movs	r2, #10
 802041a:	e7dd      	b.n	80203d8 <__ssvfiscanf_r+0x1d4>
 802041c:	2300      	movs	r3, #0
 802041e:	9342      	str	r3, [sp, #264]	; 0x108
 8020420:	2303      	movs	r3, #3
 8020422:	e7de      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 8020424:	2308      	movs	r3, #8
 8020426:	9342      	str	r3, [sp, #264]	; 0x108
 8020428:	2304      	movs	r3, #4
 802042a:	e7da      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 802042c:	4629      	mov	r1, r5
 802042e:	4640      	mov	r0, r8
 8020430:	f000 f9ac 	bl	802078c <__sccl>
 8020434:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802043a:	9341      	str	r3, [sp, #260]	; 0x104
 802043c:	4605      	mov	r5, r0
 802043e:	2301      	movs	r3, #1
 8020440:	e7cf      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 8020442:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8020444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020448:	9341      	str	r3, [sp, #260]	; 0x104
 802044a:	2300      	movs	r3, #0
 802044c:	e7c9      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 802044e:	2302      	movs	r3, #2
 8020450:	e7c7      	b.n	80203e2 <__ssvfiscanf_r+0x1de>
 8020452:	9841      	ldr	r0, [sp, #260]	; 0x104
 8020454:	06c3      	lsls	r3, r0, #27
 8020456:	f53f aeff 	bmi.w	8020258 <__ssvfiscanf_r+0x54>
 802045a:	9b00      	ldr	r3, [sp, #0]
 802045c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802045e:	1d19      	adds	r1, r3, #4
 8020460:	9100      	str	r1, [sp, #0]
 8020462:	681b      	ldr	r3, [r3, #0]
 8020464:	07c0      	lsls	r0, r0, #31
 8020466:	bf4c      	ite	mi
 8020468:	801a      	strhmi	r2, [r3, #0]
 802046a:	601a      	strpl	r2, [r3, #0]
 802046c:	e6f4      	b.n	8020258 <__ssvfiscanf_r+0x54>
 802046e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020470:	4621      	mov	r1, r4
 8020472:	4630      	mov	r0, r6
 8020474:	4798      	blx	r3
 8020476:	2800      	cmp	r0, #0
 8020478:	d0b7      	beq.n	80203ea <__ssvfiscanf_r+0x1e6>
 802047a:	e79d      	b.n	80203b8 <__ssvfiscanf_r+0x1b4>
 802047c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802047e:	3201      	adds	r2, #1
 8020480:	9245      	str	r2, [sp, #276]	; 0x114
 8020482:	6862      	ldr	r2, [r4, #4]
 8020484:	3a01      	subs	r2, #1
 8020486:	2a00      	cmp	r2, #0
 8020488:	6062      	str	r2, [r4, #4]
 802048a:	dd02      	ble.n	8020492 <__ssvfiscanf_r+0x28e>
 802048c:	3301      	adds	r3, #1
 802048e:	6023      	str	r3, [r4, #0]
 8020490:	e7ae      	b.n	80203f0 <__ssvfiscanf_r+0x1ec>
 8020492:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8020494:	4621      	mov	r1, r4
 8020496:	4630      	mov	r0, r6
 8020498:	4798      	blx	r3
 802049a:	2800      	cmp	r0, #0
 802049c:	d0a8      	beq.n	80203f0 <__ssvfiscanf_r+0x1ec>
 802049e:	e78b      	b.n	80203b8 <__ssvfiscanf_r+0x1b4>
 80204a0:	2b04      	cmp	r3, #4
 80204a2:	dc06      	bgt.n	80204b2 <__ssvfiscanf_r+0x2ae>
 80204a4:	466b      	mov	r3, sp
 80204a6:	4622      	mov	r2, r4
 80204a8:	a941      	add	r1, sp, #260	; 0x104
 80204aa:	4630      	mov	r0, r6
 80204ac:	f000 f87a 	bl	80205a4 <_scanf_i>
 80204b0:	e7ac      	b.n	802040c <__ssvfiscanf_r+0x208>
 80204b2:	4b0f      	ldr	r3, [pc, #60]	; (80204f0 <__ssvfiscanf_r+0x2ec>)
 80204b4:	2b00      	cmp	r3, #0
 80204b6:	f43f aecf 	beq.w	8020258 <__ssvfiscanf_r+0x54>
 80204ba:	466b      	mov	r3, sp
 80204bc:	4622      	mov	r2, r4
 80204be:	a941      	add	r1, sp, #260	; 0x104
 80204c0:	4630      	mov	r0, r6
 80204c2:	f3af 8000 	nop.w
 80204c6:	e7a1      	b.n	802040c <__ssvfiscanf_r+0x208>
 80204c8:	89a3      	ldrh	r3, [r4, #12]
 80204ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80204ce:	bf18      	it	ne
 80204d0:	f04f 30ff 	movne.w	r0, #4294967295
 80204d4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80204d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80204de:	e7f9      	b.n	80204d4 <__ssvfiscanf_r+0x2d0>
 80204e0:	08020151 	.word	0x08020151
 80204e4:	080201cb 	.word	0x080201cb
 80204e8:	08025ba5 	.word	0x08025ba5
 80204ec:	08025cb5 	.word	0x08025cb5
 80204f0:	00000000 	.word	0x00000000

080204f4 <_scanf_chars>:
 80204f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80204f8:	4615      	mov	r5, r2
 80204fa:	688a      	ldr	r2, [r1, #8]
 80204fc:	4680      	mov	r8, r0
 80204fe:	460c      	mov	r4, r1
 8020500:	b932      	cbnz	r2, 8020510 <_scanf_chars+0x1c>
 8020502:	698a      	ldr	r2, [r1, #24]
 8020504:	2a00      	cmp	r2, #0
 8020506:	bf0c      	ite	eq
 8020508:	2201      	moveq	r2, #1
 802050a:	f04f 32ff 	movne.w	r2, #4294967295
 802050e:	608a      	str	r2, [r1, #8]
 8020510:	6822      	ldr	r2, [r4, #0]
 8020512:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80205a0 <_scanf_chars+0xac>
 8020516:	06d1      	lsls	r1, r2, #27
 8020518:	bf5f      	itttt	pl
 802051a:	681a      	ldrpl	r2, [r3, #0]
 802051c:	1d11      	addpl	r1, r2, #4
 802051e:	6019      	strpl	r1, [r3, #0]
 8020520:	6816      	ldrpl	r6, [r2, #0]
 8020522:	2700      	movs	r7, #0
 8020524:	69a0      	ldr	r0, [r4, #24]
 8020526:	b188      	cbz	r0, 802054c <_scanf_chars+0x58>
 8020528:	2801      	cmp	r0, #1
 802052a:	d107      	bne.n	802053c <_scanf_chars+0x48>
 802052c:	682b      	ldr	r3, [r5, #0]
 802052e:	781a      	ldrb	r2, [r3, #0]
 8020530:	6963      	ldr	r3, [r4, #20]
 8020532:	5c9b      	ldrb	r3, [r3, r2]
 8020534:	b953      	cbnz	r3, 802054c <_scanf_chars+0x58>
 8020536:	bb27      	cbnz	r7, 8020582 <_scanf_chars+0x8e>
 8020538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802053c:	2802      	cmp	r0, #2
 802053e:	d120      	bne.n	8020582 <_scanf_chars+0x8e>
 8020540:	682b      	ldr	r3, [r5, #0]
 8020542:	781b      	ldrb	r3, [r3, #0]
 8020544:	f813 3009 	ldrb.w	r3, [r3, r9]
 8020548:	071b      	lsls	r3, r3, #28
 802054a:	d41a      	bmi.n	8020582 <_scanf_chars+0x8e>
 802054c:	6823      	ldr	r3, [r4, #0]
 802054e:	06da      	lsls	r2, r3, #27
 8020550:	bf5e      	ittt	pl
 8020552:	682b      	ldrpl	r3, [r5, #0]
 8020554:	781b      	ldrbpl	r3, [r3, #0]
 8020556:	f806 3b01 	strbpl.w	r3, [r6], #1
 802055a:	682a      	ldr	r2, [r5, #0]
 802055c:	686b      	ldr	r3, [r5, #4]
 802055e:	3201      	adds	r2, #1
 8020560:	602a      	str	r2, [r5, #0]
 8020562:	68a2      	ldr	r2, [r4, #8]
 8020564:	3b01      	subs	r3, #1
 8020566:	3a01      	subs	r2, #1
 8020568:	606b      	str	r3, [r5, #4]
 802056a:	3701      	adds	r7, #1
 802056c:	60a2      	str	r2, [r4, #8]
 802056e:	b142      	cbz	r2, 8020582 <_scanf_chars+0x8e>
 8020570:	2b00      	cmp	r3, #0
 8020572:	dcd7      	bgt.n	8020524 <_scanf_chars+0x30>
 8020574:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8020578:	4629      	mov	r1, r5
 802057a:	4640      	mov	r0, r8
 802057c:	4798      	blx	r3
 802057e:	2800      	cmp	r0, #0
 8020580:	d0d0      	beq.n	8020524 <_scanf_chars+0x30>
 8020582:	6823      	ldr	r3, [r4, #0]
 8020584:	f013 0310 	ands.w	r3, r3, #16
 8020588:	d105      	bne.n	8020596 <_scanf_chars+0xa2>
 802058a:	68e2      	ldr	r2, [r4, #12]
 802058c:	3201      	adds	r2, #1
 802058e:	60e2      	str	r2, [r4, #12]
 8020590:	69a2      	ldr	r2, [r4, #24]
 8020592:	b102      	cbz	r2, 8020596 <_scanf_chars+0xa2>
 8020594:	7033      	strb	r3, [r6, #0]
 8020596:	6923      	ldr	r3, [r4, #16]
 8020598:	441f      	add	r7, r3
 802059a:	6127      	str	r7, [r4, #16]
 802059c:	2000      	movs	r0, #0
 802059e:	e7cb      	b.n	8020538 <_scanf_chars+0x44>
 80205a0:	08025ba5 	.word	0x08025ba5

080205a4 <_scanf_i>:
 80205a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205a8:	4698      	mov	r8, r3
 80205aa:	4b74      	ldr	r3, [pc, #464]	; (802077c <_scanf_i+0x1d8>)
 80205ac:	460c      	mov	r4, r1
 80205ae:	4682      	mov	sl, r0
 80205b0:	4616      	mov	r6, r2
 80205b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80205b6:	b087      	sub	sp, #28
 80205b8:	ab03      	add	r3, sp, #12
 80205ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80205be:	4b70      	ldr	r3, [pc, #448]	; (8020780 <_scanf_i+0x1dc>)
 80205c0:	69a1      	ldr	r1, [r4, #24]
 80205c2:	4a70      	ldr	r2, [pc, #448]	; (8020784 <_scanf_i+0x1e0>)
 80205c4:	2903      	cmp	r1, #3
 80205c6:	bf18      	it	ne
 80205c8:	461a      	movne	r2, r3
 80205ca:	68a3      	ldr	r3, [r4, #8]
 80205cc:	9201      	str	r2, [sp, #4]
 80205ce:	1e5a      	subs	r2, r3, #1
 80205d0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80205d4:	bf88      	it	hi
 80205d6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80205da:	4627      	mov	r7, r4
 80205dc:	bf82      	ittt	hi
 80205de:	eb03 0905 	addhi.w	r9, r3, r5
 80205e2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80205e6:	60a3      	strhi	r3, [r4, #8]
 80205e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80205ec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80205f0:	bf98      	it	ls
 80205f2:	f04f 0900 	movls.w	r9, #0
 80205f6:	6023      	str	r3, [r4, #0]
 80205f8:	463d      	mov	r5, r7
 80205fa:	f04f 0b00 	mov.w	fp, #0
 80205fe:	6831      	ldr	r1, [r6, #0]
 8020600:	ab03      	add	r3, sp, #12
 8020602:	7809      	ldrb	r1, [r1, #0]
 8020604:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8020608:	2202      	movs	r2, #2
 802060a:	f7df fe29 	bl	8000260 <memchr>
 802060e:	b328      	cbz	r0, 802065c <_scanf_i+0xb8>
 8020610:	f1bb 0f01 	cmp.w	fp, #1
 8020614:	d159      	bne.n	80206ca <_scanf_i+0x126>
 8020616:	6862      	ldr	r2, [r4, #4]
 8020618:	b92a      	cbnz	r2, 8020626 <_scanf_i+0x82>
 802061a:	6822      	ldr	r2, [r4, #0]
 802061c:	2308      	movs	r3, #8
 802061e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8020622:	6063      	str	r3, [r4, #4]
 8020624:	6022      	str	r2, [r4, #0]
 8020626:	6822      	ldr	r2, [r4, #0]
 8020628:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802062c:	6022      	str	r2, [r4, #0]
 802062e:	68a2      	ldr	r2, [r4, #8]
 8020630:	1e51      	subs	r1, r2, #1
 8020632:	60a1      	str	r1, [r4, #8]
 8020634:	b192      	cbz	r2, 802065c <_scanf_i+0xb8>
 8020636:	6832      	ldr	r2, [r6, #0]
 8020638:	1c51      	adds	r1, r2, #1
 802063a:	6031      	str	r1, [r6, #0]
 802063c:	7812      	ldrb	r2, [r2, #0]
 802063e:	f805 2b01 	strb.w	r2, [r5], #1
 8020642:	6872      	ldr	r2, [r6, #4]
 8020644:	3a01      	subs	r2, #1
 8020646:	2a00      	cmp	r2, #0
 8020648:	6072      	str	r2, [r6, #4]
 802064a:	dc07      	bgt.n	802065c <_scanf_i+0xb8>
 802064c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8020650:	4631      	mov	r1, r6
 8020652:	4650      	mov	r0, sl
 8020654:	4790      	blx	r2
 8020656:	2800      	cmp	r0, #0
 8020658:	f040 8085 	bne.w	8020766 <_scanf_i+0x1c2>
 802065c:	f10b 0b01 	add.w	fp, fp, #1
 8020660:	f1bb 0f03 	cmp.w	fp, #3
 8020664:	d1cb      	bne.n	80205fe <_scanf_i+0x5a>
 8020666:	6863      	ldr	r3, [r4, #4]
 8020668:	b90b      	cbnz	r3, 802066e <_scanf_i+0xca>
 802066a:	230a      	movs	r3, #10
 802066c:	6063      	str	r3, [r4, #4]
 802066e:	6863      	ldr	r3, [r4, #4]
 8020670:	4945      	ldr	r1, [pc, #276]	; (8020788 <_scanf_i+0x1e4>)
 8020672:	6960      	ldr	r0, [r4, #20]
 8020674:	1ac9      	subs	r1, r1, r3
 8020676:	f000 f889 	bl	802078c <__sccl>
 802067a:	f04f 0b00 	mov.w	fp, #0
 802067e:	68a3      	ldr	r3, [r4, #8]
 8020680:	6822      	ldr	r2, [r4, #0]
 8020682:	2b00      	cmp	r3, #0
 8020684:	d03d      	beq.n	8020702 <_scanf_i+0x15e>
 8020686:	6831      	ldr	r1, [r6, #0]
 8020688:	6960      	ldr	r0, [r4, #20]
 802068a:	f891 c000 	ldrb.w	ip, [r1]
 802068e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8020692:	2800      	cmp	r0, #0
 8020694:	d035      	beq.n	8020702 <_scanf_i+0x15e>
 8020696:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802069a:	d124      	bne.n	80206e6 <_scanf_i+0x142>
 802069c:	0510      	lsls	r0, r2, #20
 802069e:	d522      	bpl.n	80206e6 <_scanf_i+0x142>
 80206a0:	f10b 0b01 	add.w	fp, fp, #1
 80206a4:	f1b9 0f00 	cmp.w	r9, #0
 80206a8:	d003      	beq.n	80206b2 <_scanf_i+0x10e>
 80206aa:	3301      	adds	r3, #1
 80206ac:	f109 39ff 	add.w	r9, r9, #4294967295
 80206b0:	60a3      	str	r3, [r4, #8]
 80206b2:	6873      	ldr	r3, [r6, #4]
 80206b4:	3b01      	subs	r3, #1
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	6073      	str	r3, [r6, #4]
 80206ba:	dd1b      	ble.n	80206f4 <_scanf_i+0x150>
 80206bc:	6833      	ldr	r3, [r6, #0]
 80206be:	3301      	adds	r3, #1
 80206c0:	6033      	str	r3, [r6, #0]
 80206c2:	68a3      	ldr	r3, [r4, #8]
 80206c4:	3b01      	subs	r3, #1
 80206c6:	60a3      	str	r3, [r4, #8]
 80206c8:	e7d9      	b.n	802067e <_scanf_i+0xda>
 80206ca:	f1bb 0f02 	cmp.w	fp, #2
 80206ce:	d1ae      	bne.n	802062e <_scanf_i+0x8a>
 80206d0:	6822      	ldr	r2, [r4, #0]
 80206d2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80206d6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80206da:	d1bf      	bne.n	802065c <_scanf_i+0xb8>
 80206dc:	2310      	movs	r3, #16
 80206de:	6063      	str	r3, [r4, #4]
 80206e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80206e4:	e7a2      	b.n	802062c <_scanf_i+0x88>
 80206e6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80206ea:	6022      	str	r2, [r4, #0]
 80206ec:	780b      	ldrb	r3, [r1, #0]
 80206ee:	f805 3b01 	strb.w	r3, [r5], #1
 80206f2:	e7de      	b.n	80206b2 <_scanf_i+0x10e>
 80206f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80206f8:	4631      	mov	r1, r6
 80206fa:	4650      	mov	r0, sl
 80206fc:	4798      	blx	r3
 80206fe:	2800      	cmp	r0, #0
 8020700:	d0df      	beq.n	80206c2 <_scanf_i+0x11e>
 8020702:	6823      	ldr	r3, [r4, #0]
 8020704:	05d9      	lsls	r1, r3, #23
 8020706:	d50d      	bpl.n	8020724 <_scanf_i+0x180>
 8020708:	42bd      	cmp	r5, r7
 802070a:	d909      	bls.n	8020720 <_scanf_i+0x17c>
 802070c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8020710:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8020714:	4632      	mov	r2, r6
 8020716:	4650      	mov	r0, sl
 8020718:	4798      	blx	r3
 802071a:	f105 39ff 	add.w	r9, r5, #4294967295
 802071e:	464d      	mov	r5, r9
 8020720:	42bd      	cmp	r5, r7
 8020722:	d028      	beq.n	8020776 <_scanf_i+0x1d2>
 8020724:	6822      	ldr	r2, [r4, #0]
 8020726:	f012 0210 	ands.w	r2, r2, #16
 802072a:	d113      	bne.n	8020754 <_scanf_i+0x1b0>
 802072c:	702a      	strb	r2, [r5, #0]
 802072e:	6863      	ldr	r3, [r4, #4]
 8020730:	9e01      	ldr	r6, [sp, #4]
 8020732:	4639      	mov	r1, r7
 8020734:	4650      	mov	r0, sl
 8020736:	47b0      	blx	r6
 8020738:	f8d8 3000 	ldr.w	r3, [r8]
 802073c:	6821      	ldr	r1, [r4, #0]
 802073e:	1d1a      	adds	r2, r3, #4
 8020740:	f8c8 2000 	str.w	r2, [r8]
 8020744:	f011 0f20 	tst.w	r1, #32
 8020748:	681b      	ldr	r3, [r3, #0]
 802074a:	d00f      	beq.n	802076c <_scanf_i+0x1c8>
 802074c:	6018      	str	r0, [r3, #0]
 802074e:	68e3      	ldr	r3, [r4, #12]
 8020750:	3301      	adds	r3, #1
 8020752:	60e3      	str	r3, [r4, #12]
 8020754:	1bed      	subs	r5, r5, r7
 8020756:	44ab      	add	fp, r5
 8020758:	6925      	ldr	r5, [r4, #16]
 802075a:	445d      	add	r5, fp
 802075c:	6125      	str	r5, [r4, #16]
 802075e:	2000      	movs	r0, #0
 8020760:	b007      	add	sp, #28
 8020762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020766:	f04f 0b00 	mov.w	fp, #0
 802076a:	e7ca      	b.n	8020702 <_scanf_i+0x15e>
 802076c:	07ca      	lsls	r2, r1, #31
 802076e:	bf4c      	ite	mi
 8020770:	8018      	strhmi	r0, [r3, #0]
 8020772:	6018      	strpl	r0, [r3, #0]
 8020774:	e7eb      	b.n	802074e <_scanf_i+0x1aa>
 8020776:	2001      	movs	r0, #1
 8020778:	e7f2      	b.n	8020760 <_scanf_i+0x1bc>
 802077a:	bf00      	nop
 802077c:	08023760 	.word	0x08023760
 8020780:	0801eb65 	.word	0x0801eb65
 8020784:	08020909 	.word	0x08020909
 8020788:	08025cfb 	.word	0x08025cfb

0802078c <__sccl>:
 802078c:	b570      	push	{r4, r5, r6, lr}
 802078e:	780b      	ldrb	r3, [r1, #0]
 8020790:	4604      	mov	r4, r0
 8020792:	2b5e      	cmp	r3, #94	; 0x5e
 8020794:	bf0b      	itete	eq
 8020796:	784b      	ldrbeq	r3, [r1, #1]
 8020798:	1c48      	addne	r0, r1, #1
 802079a:	1c88      	addeq	r0, r1, #2
 802079c:	2200      	movne	r2, #0
 802079e:	bf08      	it	eq
 80207a0:	2201      	moveq	r2, #1
 80207a2:	1e61      	subs	r1, r4, #1
 80207a4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80207a8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80207ac:	42a9      	cmp	r1, r5
 80207ae:	d1fb      	bne.n	80207a8 <__sccl+0x1c>
 80207b0:	b90b      	cbnz	r3, 80207b6 <__sccl+0x2a>
 80207b2:	3801      	subs	r0, #1
 80207b4:	bd70      	pop	{r4, r5, r6, pc}
 80207b6:	f082 0101 	eor.w	r1, r2, #1
 80207ba:	54e1      	strb	r1, [r4, r3]
 80207bc:	1c42      	adds	r2, r0, #1
 80207be:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80207c2:	2d2d      	cmp	r5, #45	; 0x2d
 80207c4:	f102 36ff 	add.w	r6, r2, #4294967295
 80207c8:	4610      	mov	r0, r2
 80207ca:	d006      	beq.n	80207da <__sccl+0x4e>
 80207cc:	2d5d      	cmp	r5, #93	; 0x5d
 80207ce:	d0f1      	beq.n	80207b4 <__sccl+0x28>
 80207d0:	b90d      	cbnz	r5, 80207d6 <__sccl+0x4a>
 80207d2:	4630      	mov	r0, r6
 80207d4:	e7ee      	b.n	80207b4 <__sccl+0x28>
 80207d6:	462b      	mov	r3, r5
 80207d8:	e7ef      	b.n	80207ba <__sccl+0x2e>
 80207da:	7816      	ldrb	r6, [r2, #0]
 80207dc:	2e5d      	cmp	r6, #93	; 0x5d
 80207de:	d0fa      	beq.n	80207d6 <__sccl+0x4a>
 80207e0:	42b3      	cmp	r3, r6
 80207e2:	dcf8      	bgt.n	80207d6 <__sccl+0x4a>
 80207e4:	4618      	mov	r0, r3
 80207e6:	3001      	adds	r0, #1
 80207e8:	4286      	cmp	r6, r0
 80207ea:	5421      	strb	r1, [r4, r0]
 80207ec:	dcfb      	bgt.n	80207e6 <__sccl+0x5a>
 80207ee:	43d8      	mvns	r0, r3
 80207f0:	4430      	add	r0, r6
 80207f2:	1c5d      	adds	r5, r3, #1
 80207f4:	42b3      	cmp	r3, r6
 80207f6:	bfa8      	it	ge
 80207f8:	2000      	movge	r0, #0
 80207fa:	182b      	adds	r3, r5, r0
 80207fc:	3202      	adds	r2, #2
 80207fe:	e7de      	b.n	80207be <__sccl+0x32>

08020800 <_strtol_l.isra.0>:
 8020800:	2b01      	cmp	r3, #1
 8020802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020806:	d001      	beq.n	802080c <_strtol_l.isra.0+0xc>
 8020808:	2b24      	cmp	r3, #36	; 0x24
 802080a:	d906      	bls.n	802081a <_strtol_l.isra.0+0x1a>
 802080c:	f7fc fbe2 	bl	801cfd4 <__errno>
 8020810:	2316      	movs	r3, #22
 8020812:	6003      	str	r3, [r0, #0]
 8020814:	2000      	movs	r0, #0
 8020816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802081a:	4f3a      	ldr	r7, [pc, #232]	; (8020904 <_strtol_l.isra.0+0x104>)
 802081c:	468e      	mov	lr, r1
 802081e:	4676      	mov	r6, lr
 8020820:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020824:	5de5      	ldrb	r5, [r4, r7]
 8020826:	f015 0508 	ands.w	r5, r5, #8
 802082a:	d1f8      	bne.n	802081e <_strtol_l.isra.0+0x1e>
 802082c:	2c2d      	cmp	r4, #45	; 0x2d
 802082e:	d134      	bne.n	802089a <_strtol_l.isra.0+0x9a>
 8020830:	f89e 4000 	ldrb.w	r4, [lr]
 8020834:	f04f 0801 	mov.w	r8, #1
 8020838:	f106 0e02 	add.w	lr, r6, #2
 802083c:	2b00      	cmp	r3, #0
 802083e:	d05c      	beq.n	80208fa <_strtol_l.isra.0+0xfa>
 8020840:	2b10      	cmp	r3, #16
 8020842:	d10c      	bne.n	802085e <_strtol_l.isra.0+0x5e>
 8020844:	2c30      	cmp	r4, #48	; 0x30
 8020846:	d10a      	bne.n	802085e <_strtol_l.isra.0+0x5e>
 8020848:	f89e 4000 	ldrb.w	r4, [lr]
 802084c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020850:	2c58      	cmp	r4, #88	; 0x58
 8020852:	d14d      	bne.n	80208f0 <_strtol_l.isra.0+0xf0>
 8020854:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020858:	2310      	movs	r3, #16
 802085a:	f10e 0e02 	add.w	lr, lr, #2
 802085e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8020862:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020866:	2600      	movs	r6, #0
 8020868:	fbbc f9f3 	udiv	r9, ip, r3
 802086c:	4635      	mov	r5, r6
 802086e:	fb03 ca19 	mls	sl, r3, r9, ip
 8020872:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8020876:	2f09      	cmp	r7, #9
 8020878:	d818      	bhi.n	80208ac <_strtol_l.isra.0+0xac>
 802087a:	463c      	mov	r4, r7
 802087c:	42a3      	cmp	r3, r4
 802087e:	dd24      	ble.n	80208ca <_strtol_l.isra.0+0xca>
 8020880:	2e00      	cmp	r6, #0
 8020882:	db1f      	blt.n	80208c4 <_strtol_l.isra.0+0xc4>
 8020884:	45a9      	cmp	r9, r5
 8020886:	d31d      	bcc.n	80208c4 <_strtol_l.isra.0+0xc4>
 8020888:	d101      	bne.n	802088e <_strtol_l.isra.0+0x8e>
 802088a:	45a2      	cmp	sl, r4
 802088c:	db1a      	blt.n	80208c4 <_strtol_l.isra.0+0xc4>
 802088e:	fb05 4503 	mla	r5, r5, r3, r4
 8020892:	2601      	movs	r6, #1
 8020894:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020898:	e7eb      	b.n	8020872 <_strtol_l.isra.0+0x72>
 802089a:	2c2b      	cmp	r4, #43	; 0x2b
 802089c:	bf08      	it	eq
 802089e:	f89e 4000 	ldrbeq.w	r4, [lr]
 80208a2:	46a8      	mov	r8, r5
 80208a4:	bf08      	it	eq
 80208a6:	f106 0e02 	addeq.w	lr, r6, #2
 80208aa:	e7c7      	b.n	802083c <_strtol_l.isra.0+0x3c>
 80208ac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80208b0:	2f19      	cmp	r7, #25
 80208b2:	d801      	bhi.n	80208b8 <_strtol_l.isra.0+0xb8>
 80208b4:	3c37      	subs	r4, #55	; 0x37
 80208b6:	e7e1      	b.n	802087c <_strtol_l.isra.0+0x7c>
 80208b8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80208bc:	2f19      	cmp	r7, #25
 80208be:	d804      	bhi.n	80208ca <_strtol_l.isra.0+0xca>
 80208c0:	3c57      	subs	r4, #87	; 0x57
 80208c2:	e7db      	b.n	802087c <_strtol_l.isra.0+0x7c>
 80208c4:	f04f 36ff 	mov.w	r6, #4294967295
 80208c8:	e7e4      	b.n	8020894 <_strtol_l.isra.0+0x94>
 80208ca:	2e00      	cmp	r6, #0
 80208cc:	da05      	bge.n	80208da <_strtol_l.isra.0+0xda>
 80208ce:	2322      	movs	r3, #34	; 0x22
 80208d0:	6003      	str	r3, [r0, #0]
 80208d2:	4665      	mov	r5, ip
 80208d4:	b942      	cbnz	r2, 80208e8 <_strtol_l.isra.0+0xe8>
 80208d6:	4628      	mov	r0, r5
 80208d8:	e79d      	b.n	8020816 <_strtol_l.isra.0+0x16>
 80208da:	f1b8 0f00 	cmp.w	r8, #0
 80208de:	d000      	beq.n	80208e2 <_strtol_l.isra.0+0xe2>
 80208e0:	426d      	negs	r5, r5
 80208e2:	2a00      	cmp	r2, #0
 80208e4:	d0f7      	beq.n	80208d6 <_strtol_l.isra.0+0xd6>
 80208e6:	b10e      	cbz	r6, 80208ec <_strtol_l.isra.0+0xec>
 80208e8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80208ec:	6011      	str	r1, [r2, #0]
 80208ee:	e7f2      	b.n	80208d6 <_strtol_l.isra.0+0xd6>
 80208f0:	2430      	movs	r4, #48	; 0x30
 80208f2:	2b00      	cmp	r3, #0
 80208f4:	d1b3      	bne.n	802085e <_strtol_l.isra.0+0x5e>
 80208f6:	2308      	movs	r3, #8
 80208f8:	e7b1      	b.n	802085e <_strtol_l.isra.0+0x5e>
 80208fa:	2c30      	cmp	r4, #48	; 0x30
 80208fc:	d0a4      	beq.n	8020848 <_strtol_l.isra.0+0x48>
 80208fe:	230a      	movs	r3, #10
 8020900:	e7ad      	b.n	802085e <_strtol_l.isra.0+0x5e>
 8020902:	bf00      	nop
 8020904:	08025ba5 	.word	0x08025ba5

08020908 <_strtol_r>:
 8020908:	f7ff bf7a 	b.w	8020800 <_strtol_l.isra.0>

0802090c <__submore>:
 802090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020910:	460c      	mov	r4, r1
 8020912:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8020914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020918:	4299      	cmp	r1, r3
 802091a:	d11d      	bne.n	8020958 <__submore+0x4c>
 802091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020920:	f7fd f99e 	bl	801dc60 <_malloc_r>
 8020924:	b918      	cbnz	r0, 802092e <__submore+0x22>
 8020926:	f04f 30ff 	mov.w	r0, #4294967295
 802092a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802092e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020932:	63a3      	str	r3, [r4, #56]	; 0x38
 8020934:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8020938:	6360      	str	r0, [r4, #52]	; 0x34
 802093a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802093e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8020942:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8020946:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802094a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802094e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8020952:	6020      	str	r0, [r4, #0]
 8020954:	2000      	movs	r0, #0
 8020956:	e7e8      	b.n	802092a <__submore+0x1e>
 8020958:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802095a:	0077      	lsls	r7, r6, #1
 802095c:	463a      	mov	r2, r7
 802095e:	f7fe fe77 	bl	801f650 <_realloc_r>
 8020962:	4605      	mov	r5, r0
 8020964:	2800      	cmp	r0, #0
 8020966:	d0de      	beq.n	8020926 <__submore+0x1a>
 8020968:	eb00 0806 	add.w	r8, r0, r6
 802096c:	4601      	mov	r1, r0
 802096e:	4632      	mov	r2, r6
 8020970:	4640      	mov	r0, r8
 8020972:	f7fd f8ff 	bl	801db74 <memcpy>
 8020976:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802097a:	f8c4 8000 	str.w	r8, [r4]
 802097e:	e7e9      	b.n	8020954 <__submore+0x48>

08020980 <_init>:
 8020980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020982:	bf00      	nop
 8020984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020986:	bc08      	pop	{r3}
 8020988:	469e      	mov	lr, r3
 802098a:	4770      	bx	lr

0802098c <_fini>:
 802098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802098e:	bf00      	nop
 8020990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020992:	bc08      	pop	{r3}
 8020994:	469e      	mov	lr, r3
 8020996:	4770      	bx	lr

08020998 <__time_veneer>:
 8020998:	e51ff004 	ldr	pc, [pc, #-4]	; 802099c <__time_veneer+0x4>
 802099c:	200005b0 	.word	0x200005b0
