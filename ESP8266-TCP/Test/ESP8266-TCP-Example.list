
ESP8266-TCP-Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e48  08014684  08014684  00024684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174cc  080174cc  00030334  2**0
                  CONTENTS
  4 .ARM          00000008  080174cc  080174cc  000274cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174d4  080174d4  00030334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080174d4  080174d4  000274d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080174dc  080174dc  000274dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000334  20000000  080174e4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000834  20000334  08017818  00030334  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b68  08017818  00030b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030334  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046335  00000000  00000000  00030364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008b29  00000000  00000000  00076699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a28  00000000  00000000  0007f1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002898  00000000  00000000  00081bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfc9  00000000  00000000  00084488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ffd5  00000000  00000000  000b0451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff087  00000000  00000000  000d0426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cf4ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d0dc  00000000  00000000  001cf500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  001dc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  001dc600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000334 	.word	0x20000334
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801466c 	.word	0x0801466c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000338 	.word	0x20000338
 800021c:	0801466c 	.word	0x0801466c

08000220 <setjmp>:
 8000220:	46ec      	mov	ip, sp
 8000222:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000226:	f04f 0000 	mov.w	r0, #0
 800022a:	4770      	bx	lr

0800022c <longjmp>:
 800022c:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000230:	46e5      	mov	sp, ip
 8000232:	0008      	movs	r0, r1
 8000234:	bf08      	it	eq
 8000236:	2001      	moveq	r0, #1
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <strcmp>:
 800024c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000250:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000254:	2a01      	cmp	r2, #1
 8000256:	bf28      	it	cs
 8000258:	429a      	cmpcs	r2, r3
 800025a:	d0f7      	beq.n	800024c <strcmp>
 800025c:	1ad0      	subs	r0, r2, r3
 800025e:	4770      	bx	lr

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__gedf2>:
 8000678:	f04f 3cff 	mov.w	ip, #4294967295
 800067c:	e006      	b.n	800068c <__cmpdf2+0x4>
 800067e:	bf00      	nop

08000680 <__ledf2>:
 8000680:	f04f 0c01 	mov.w	ip, #1
 8000684:	e002      	b.n	800068c <__cmpdf2+0x4>
 8000686:	bf00      	nop

08000688 <__cmpdf2>:
 8000688:	f04f 0c01 	mov.w	ip, #1
 800068c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000690:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000698:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800069c:	bf18      	it	ne
 800069e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80006a2:	d01b      	beq.n	80006dc <__cmpdf2+0x54>
 80006a4:	b001      	add	sp, #4
 80006a6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80006aa:	bf0c      	ite	eq
 80006ac:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80006b0:	ea91 0f03 	teqne	r1, r3
 80006b4:	bf02      	ittt	eq
 80006b6:	ea90 0f02 	teqeq	r0, r2
 80006ba:	2000      	moveq	r0, #0
 80006bc:	4770      	bxeq	lr
 80006be:	f110 0f00 	cmn.w	r0, #0
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf58      	it	pl
 80006c8:	4299      	cmppl	r1, r3
 80006ca:	bf08      	it	eq
 80006cc:	4290      	cmpeq	r0, r2
 80006ce:	bf2c      	ite	cs
 80006d0:	17d8      	asrcs	r0, r3, #31
 80006d2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80006d6:	f040 0001 	orr.w	r0, r0, #1
 80006da:	4770      	bx	lr
 80006dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006e4:	d102      	bne.n	80006ec <__cmpdf2+0x64>
 80006e6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006ea:	d107      	bne.n	80006fc <__cmpdf2+0x74>
 80006ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006f4:	d1d6      	bne.n	80006a4 <__cmpdf2+0x1c>
 80006f6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006fa:	d0d3      	beq.n	80006a4 <__cmpdf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cdrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4610      	mov	r0, r2
 8000708:	4662      	mov	r2, ip
 800070a:	468c      	mov	ip, r1
 800070c:	4619      	mov	r1, r3
 800070e:	4663      	mov	r3, ip
 8000710:	e000      	b.n	8000714 <__aeabi_cdcmpeq>
 8000712:	bf00      	nop

08000714 <__aeabi_cdcmpeq>:
 8000714:	b501      	push	{r0, lr}
 8000716:	f7ff ffb7 	bl	8000688 <__cmpdf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd01      	pop	{r0, pc}

08000724 <__aeabi_dcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cdcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_dcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cdcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_dcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cdcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_dcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffce 	bl	8000704 <__aeabi_cdrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_dcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc4 	bl	8000704 <__aeabi_cdrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_dcmpun>:
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	d102      	bne.n	8000798 <__aeabi_dcmpun+0x10>
 8000792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000796:	d10a      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 8000798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800079c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007a0:	d102      	bne.n	80007a8 <__aeabi_dcmpun+0x20>
 80007a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007a6:	d102      	bne.n	80007ae <__aeabi_dcmpun+0x26>
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	4770      	bx	lr
 80007ae:	f04f 0001 	mov.w	r0, #1
 80007b2:	4770      	bx	lr

080007b4 <__aeabi_ldivmod>:
 80007b4:	b97b      	cbnz	r3, 80007d6 <__aeabi_ldivmod+0x22>
 80007b6:	b972      	cbnz	r2, 80007d6 <__aeabi_ldivmod+0x22>
 80007b8:	2900      	cmp	r1, #0
 80007ba:	bfbe      	ittt	lt
 80007bc:	2000      	movlt	r0, #0
 80007be:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007c2:	e006      	blt.n	80007d2 <__aeabi_ldivmod+0x1e>
 80007c4:	bf08      	it	eq
 80007c6:	2800      	cmpeq	r0, #0
 80007c8:	bf1c      	itt	ne
 80007ca:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ce:	f04f 30ff 	movne.w	r0, #4294967295
 80007d2:	f000 b9b9 	b.w	8000b48 <__aeabi_idiv0>
 80007d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007de:	2900      	cmp	r1, #0
 80007e0:	db09      	blt.n	80007f6 <__aeabi_ldivmod+0x42>
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db1a      	blt.n	800081c <__aeabi_ldivmod+0x68>
 80007e6:	f000 f84d 	bl	8000884 <__udivmoddi4>
 80007ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f2:	b004      	add	sp, #16
 80007f4:	4770      	bx	lr
 80007f6:	4240      	negs	r0, r0
 80007f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db1b      	blt.n	8000838 <__aeabi_ldivmod+0x84>
 8000800:	f000 f840 	bl	8000884 <__udivmoddi4>
 8000804:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800080c:	b004      	add	sp, #16
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	4252      	negs	r2, r2
 8000816:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800081a:	4770      	bx	lr
 800081c:	4252      	negs	r2, r2
 800081e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000822:	f000 f82f 	bl	8000884 <__udivmoddi4>
 8000826:	f8dd e004 	ldr.w	lr, [sp, #4]
 800082a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082e:	b004      	add	sp, #16
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	4770      	bx	lr
 8000838:	4252      	negs	r2, r2
 800083a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083e:	f000 f821 	bl	8000884 <__udivmoddi4>
 8000842:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084a:	b004      	add	sp, #16
 800084c:	4252      	negs	r2, r2
 800084e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000852:	4770      	bx	lr

08000854 <__aeabi_uldivmod>:
 8000854:	b953      	cbnz	r3, 800086c <__aeabi_uldivmod+0x18>
 8000856:	b94a      	cbnz	r2, 800086c <__aeabi_uldivmod+0x18>
 8000858:	2900      	cmp	r1, #0
 800085a:	bf08      	it	eq
 800085c:	2800      	cmpeq	r0, #0
 800085e:	bf1c      	itt	ne
 8000860:	f04f 31ff 	movne.w	r1, #4294967295
 8000864:	f04f 30ff 	movne.w	r0, #4294967295
 8000868:	f000 b96e 	b.w	8000b48 <__aeabi_idiv0>
 800086c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000870:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000874:	f000 f806 	bl	8000884 <__udivmoddi4>
 8000878:	f8dd e004 	ldr.w	lr, [sp, #4]
 800087c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000880:	b004      	add	sp, #16
 8000882:	4770      	bx	lr

08000884 <__udivmoddi4>:
 8000884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000888:	9d08      	ldr	r5, [sp, #32]
 800088a:	4604      	mov	r4, r0
 800088c:	468c      	mov	ip, r1
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8083 	bne.w	800099a <__udivmoddi4+0x116>
 8000894:	428a      	cmp	r2, r1
 8000896:	4617      	mov	r7, r2
 8000898:	d947      	bls.n	800092a <__udivmoddi4+0xa6>
 800089a:	fab2 f282 	clz	r2, r2
 800089e:	b142      	cbz	r2, 80008b2 <__udivmoddi4+0x2e>
 80008a0:	f1c2 0020 	rsb	r0, r2, #32
 80008a4:	fa24 f000 	lsr.w	r0, r4, r0
 80008a8:	4091      	lsls	r1, r2
 80008aa:	4097      	lsls	r7, r2
 80008ac:	ea40 0c01 	orr.w	ip, r0, r1
 80008b0:	4094      	lsls	r4, r2
 80008b2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008b6:	0c23      	lsrs	r3, r4, #16
 80008b8:	fbbc f6f8 	udiv	r6, ip, r8
 80008bc:	fa1f fe87 	uxth.w	lr, r7
 80008c0:	fb08 c116 	mls	r1, r8, r6, ip
 80008c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008c8:	fb06 f10e 	mul.w	r1, r6, lr
 80008cc:	4299      	cmp	r1, r3
 80008ce:	d909      	bls.n	80008e4 <__udivmoddi4+0x60>
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	f106 30ff 	add.w	r0, r6, #4294967295
 80008d6:	f080 8119 	bcs.w	8000b0c <__udivmoddi4+0x288>
 80008da:	4299      	cmp	r1, r3
 80008dc:	f240 8116 	bls.w	8000b0c <__udivmoddi4+0x288>
 80008e0:	3e02      	subs	r6, #2
 80008e2:	443b      	add	r3, r7
 80008e4:	1a5b      	subs	r3, r3, r1
 80008e6:	b2a4      	uxth	r4, r4
 80008e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80008ec:	fb08 3310 	mls	r3, r8, r0, r3
 80008f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80008f8:	45a6      	cmp	lr, r4
 80008fa:	d909      	bls.n	8000910 <__udivmoddi4+0x8c>
 80008fc:	193c      	adds	r4, r7, r4
 80008fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000902:	f080 8105 	bcs.w	8000b10 <__udivmoddi4+0x28c>
 8000906:	45a6      	cmp	lr, r4
 8000908:	f240 8102 	bls.w	8000b10 <__udivmoddi4+0x28c>
 800090c:	3802      	subs	r0, #2
 800090e:	443c      	add	r4, r7
 8000910:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000914:	eba4 040e 	sub.w	r4, r4, lr
 8000918:	2600      	movs	r6, #0
 800091a:	b11d      	cbz	r5, 8000924 <__udivmoddi4+0xa0>
 800091c:	40d4      	lsrs	r4, r2
 800091e:	2300      	movs	r3, #0
 8000920:	e9c5 4300 	strd	r4, r3, [r5]
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	b902      	cbnz	r2, 800092e <__udivmoddi4+0xaa>
 800092c:	deff      	udf	#255	; 0xff
 800092e:	fab2 f282 	clz	r2, r2
 8000932:	2a00      	cmp	r2, #0
 8000934:	d150      	bne.n	80009d8 <__udivmoddi4+0x154>
 8000936:	1bcb      	subs	r3, r1, r7
 8000938:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800093c:	fa1f f887 	uxth.w	r8, r7
 8000940:	2601      	movs	r6, #1
 8000942:	fbb3 fcfe 	udiv	ip, r3, lr
 8000946:	0c21      	lsrs	r1, r4, #16
 8000948:	fb0e 331c 	mls	r3, lr, ip, r3
 800094c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000950:	fb08 f30c 	mul.w	r3, r8, ip
 8000954:	428b      	cmp	r3, r1
 8000956:	d907      	bls.n	8000968 <__udivmoddi4+0xe4>
 8000958:	1879      	adds	r1, r7, r1
 800095a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800095e:	d202      	bcs.n	8000966 <__udivmoddi4+0xe2>
 8000960:	428b      	cmp	r3, r1
 8000962:	f200 80e9 	bhi.w	8000b38 <__udivmoddi4+0x2b4>
 8000966:	4684      	mov	ip, r0
 8000968:	1ac9      	subs	r1, r1, r3
 800096a:	b2a3      	uxth	r3, r4
 800096c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000970:	fb0e 1110 	mls	r1, lr, r0, r1
 8000974:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000978:	fb08 f800 	mul.w	r8, r8, r0
 800097c:	45a0      	cmp	r8, r4
 800097e:	d907      	bls.n	8000990 <__udivmoddi4+0x10c>
 8000980:	193c      	adds	r4, r7, r4
 8000982:	f100 33ff 	add.w	r3, r0, #4294967295
 8000986:	d202      	bcs.n	800098e <__udivmoddi4+0x10a>
 8000988:	45a0      	cmp	r8, r4
 800098a:	f200 80d9 	bhi.w	8000b40 <__udivmoddi4+0x2bc>
 800098e:	4618      	mov	r0, r3
 8000990:	eba4 0408 	sub.w	r4, r4, r8
 8000994:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000998:	e7bf      	b.n	800091a <__udivmoddi4+0x96>
 800099a:	428b      	cmp	r3, r1
 800099c:	d909      	bls.n	80009b2 <__udivmoddi4+0x12e>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	f000 80b1 	beq.w	8000b06 <__udivmoddi4+0x282>
 80009a4:	2600      	movs	r6, #0
 80009a6:	e9c5 0100 	strd	r0, r1, [r5]
 80009aa:	4630      	mov	r0, r6
 80009ac:	4631      	mov	r1, r6
 80009ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b2:	fab3 f683 	clz	r6, r3
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d14a      	bne.n	8000a50 <__udivmoddi4+0x1cc>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d302      	bcc.n	80009c4 <__udivmoddi4+0x140>
 80009be:	4282      	cmp	r2, r0
 80009c0:	f200 80b8 	bhi.w	8000b34 <__udivmoddi4+0x2b0>
 80009c4:	1a84      	subs	r4, r0, r2
 80009c6:	eb61 0103 	sbc.w	r1, r1, r3
 80009ca:	2001      	movs	r0, #1
 80009cc:	468c      	mov	ip, r1
 80009ce:	2d00      	cmp	r5, #0
 80009d0:	d0a8      	beq.n	8000924 <__udivmoddi4+0xa0>
 80009d2:	e9c5 4c00 	strd	r4, ip, [r5]
 80009d6:	e7a5      	b.n	8000924 <__udivmoddi4+0xa0>
 80009d8:	f1c2 0320 	rsb	r3, r2, #32
 80009dc:	fa20 f603 	lsr.w	r6, r0, r3
 80009e0:	4097      	lsls	r7, r2
 80009e2:	fa01 f002 	lsl.w	r0, r1, r2
 80009e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ea:	40d9      	lsrs	r1, r3
 80009ec:	4330      	orrs	r0, r6
 80009ee:	0c03      	lsrs	r3, r0, #16
 80009f0:	fbb1 f6fe 	udiv	r6, r1, lr
 80009f4:	fa1f f887 	uxth.w	r8, r7
 80009f8:	fb0e 1116 	mls	r1, lr, r6, r1
 80009fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a00:	fb06 f108 	mul.w	r1, r6, r8
 8000a04:	4299      	cmp	r1, r3
 8000a06:	fa04 f402 	lsl.w	r4, r4, r2
 8000a0a:	d909      	bls.n	8000a20 <__udivmoddi4+0x19c>
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a12:	f080 808d 	bcs.w	8000b30 <__udivmoddi4+0x2ac>
 8000a16:	4299      	cmp	r1, r3
 8000a18:	f240 808a 	bls.w	8000b30 <__udivmoddi4+0x2ac>
 8000a1c:	3e02      	subs	r6, #2
 8000a1e:	443b      	add	r3, r7
 8000a20:	1a5b      	subs	r3, r3, r1
 8000a22:	b281      	uxth	r1, r0
 8000a24:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a28:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a30:	fb00 f308 	mul.w	r3, r0, r8
 8000a34:	428b      	cmp	r3, r1
 8000a36:	d907      	bls.n	8000a48 <__udivmoddi4+0x1c4>
 8000a38:	1879      	adds	r1, r7, r1
 8000a3a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a3e:	d273      	bcs.n	8000b28 <__udivmoddi4+0x2a4>
 8000a40:	428b      	cmp	r3, r1
 8000a42:	d971      	bls.n	8000b28 <__udivmoddi4+0x2a4>
 8000a44:	3802      	subs	r0, #2
 8000a46:	4439      	add	r1, r7
 8000a48:	1acb      	subs	r3, r1, r3
 8000a4a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a4e:	e778      	b.n	8000942 <__udivmoddi4+0xbe>
 8000a50:	f1c6 0c20 	rsb	ip, r6, #32
 8000a54:	fa03 f406 	lsl.w	r4, r3, r6
 8000a58:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a5c:	431c      	orrs	r4, r3
 8000a5e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a62:	fa01 f306 	lsl.w	r3, r1, r6
 8000a66:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a6a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a6e:	431f      	orrs	r7, r3
 8000a70:	0c3b      	lsrs	r3, r7, #16
 8000a72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a76:	fa1f f884 	uxth.w	r8, r4
 8000a7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a7e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a82:	fb09 fa08 	mul.w	sl, r9, r8
 8000a86:	458a      	cmp	sl, r1
 8000a88:	fa02 f206 	lsl.w	r2, r2, r6
 8000a8c:	fa00 f306 	lsl.w	r3, r0, r6
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x220>
 8000a92:	1861      	adds	r1, r4, r1
 8000a94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a98:	d248      	bcs.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9a:	458a      	cmp	sl, r1
 8000a9c:	d946      	bls.n	8000b2c <__udivmoddi4+0x2a8>
 8000a9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000aa2:	4421      	add	r1, r4
 8000aa4:	eba1 010a 	sub.w	r1, r1, sl
 8000aa8:	b2bf      	uxth	r7, r7
 8000aaa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000aae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ab2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000ab6:	fb00 f808 	mul.w	r8, r0, r8
 8000aba:	45b8      	cmp	r8, r7
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x24a>
 8000abe:	19e7      	adds	r7, r4, r7
 8000ac0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ac4:	d22e      	bcs.n	8000b24 <__udivmoddi4+0x2a0>
 8000ac6:	45b8      	cmp	r8, r7
 8000ac8:	d92c      	bls.n	8000b24 <__udivmoddi4+0x2a0>
 8000aca:	3802      	subs	r0, #2
 8000acc:	4427      	add	r7, r4
 8000ace:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ad2:	eba7 0708 	sub.w	r7, r7, r8
 8000ad6:	fba0 8902 	umull	r8, r9, r0, r2
 8000ada:	454f      	cmp	r7, r9
 8000adc:	46c6      	mov	lr, r8
 8000ade:	4649      	mov	r1, r9
 8000ae0:	d31a      	bcc.n	8000b18 <__udivmoddi4+0x294>
 8000ae2:	d017      	beq.n	8000b14 <__udivmoddi4+0x290>
 8000ae4:	b15d      	cbz	r5, 8000afe <__udivmoddi4+0x27a>
 8000ae6:	ebb3 020e 	subs.w	r2, r3, lr
 8000aea:	eb67 0701 	sbc.w	r7, r7, r1
 8000aee:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000af2:	40f2      	lsrs	r2, r6
 8000af4:	ea4c 0202 	orr.w	r2, ip, r2
 8000af8:	40f7      	lsrs	r7, r6
 8000afa:	e9c5 2700 	strd	r2, r7, [r5]
 8000afe:	2600      	movs	r6, #0
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	462e      	mov	r6, r5
 8000b08:	4628      	mov	r0, r5
 8000b0a:	e70b      	b.n	8000924 <__udivmoddi4+0xa0>
 8000b0c:	4606      	mov	r6, r0
 8000b0e:	e6e9      	b.n	80008e4 <__udivmoddi4+0x60>
 8000b10:	4618      	mov	r0, r3
 8000b12:	e6fd      	b.n	8000910 <__udivmoddi4+0x8c>
 8000b14:	4543      	cmp	r3, r8
 8000b16:	d2e5      	bcs.n	8000ae4 <__udivmoddi4+0x260>
 8000b18:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b1c:	eb69 0104 	sbc.w	r1, r9, r4
 8000b20:	3801      	subs	r0, #1
 8000b22:	e7df      	b.n	8000ae4 <__udivmoddi4+0x260>
 8000b24:	4608      	mov	r0, r1
 8000b26:	e7d2      	b.n	8000ace <__udivmoddi4+0x24a>
 8000b28:	4660      	mov	r0, ip
 8000b2a:	e78d      	b.n	8000a48 <__udivmoddi4+0x1c4>
 8000b2c:	4681      	mov	r9, r0
 8000b2e:	e7b9      	b.n	8000aa4 <__udivmoddi4+0x220>
 8000b30:	4666      	mov	r6, ip
 8000b32:	e775      	b.n	8000a20 <__udivmoddi4+0x19c>
 8000b34:	4630      	mov	r0, r6
 8000b36:	e74a      	b.n	80009ce <__udivmoddi4+0x14a>
 8000b38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b3c:	4439      	add	r1, r7
 8000b3e:	e713      	b.n	8000968 <__udivmoddi4+0xe4>
 8000b40:	3802      	subs	r0, #2
 8000b42:	443c      	add	r4, r7
 8000b44:	e724      	b.n	8000990 <__udivmoddi4+0x10c>
 8000b46:	bf00      	nop

08000b48 <__aeabi_idiv0>:
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b82:	f000 fe97 	bl	80018b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a32      	ldr	r2, [pc, #200]	; (8000c7c <HAL_UART_MspInit+0xe8>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d129      	bne.n	8000c0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bba:	4a31      	ldr	r2, [pc, #196]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bc2:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	4a2b      	ldr	r2, [pc, #172]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be6:	230c      	movs	r3, #12
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bea:	2302      	movs	r3, #2
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c04:	f000 fbf4 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c08:	e034      	b.n	8000c74 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <HAL_UART_MspInit+0xf0>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d12f      	bne.n	8000c74 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c14:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c18:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1e:	6613      	str	r3, [r2, #96]	; 0x60
 8000c20:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_UART_MspInit+0xec>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000c44:	2330      	movs	r3, #48	; 0x30
 8000c46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c54:	2307      	movs	r3, #7
 8000c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 031c 	add.w	r3, r7, #28
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	480a      	ldr	r0, [pc, #40]	; (8000c88 <HAL_UART_MspInit+0xf4>)
 8000c60:	f000 fbc6 	bl	80013f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	2025      	movs	r0, #37	; 0x25
 8000c6a:	f000 facc 	bl	8001206 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c6e:	2025      	movs	r0, #37	; 0x25
 8000c70:	f000 fae3 	bl	800123a <HAL_NVIC_EnableIRQ>
}
 8000c74:	bf00      	nop
 8000c76:	3730      	adds	r7, #48	; 0x30
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40008000 	.word	0x40008000
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40013800 	.word	0x40013800
 8000c88:	48000800 	.word	0x48000800

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <NMI_Handler+0x4>

08000c92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler+0x4>

08000c98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c9c:	e7fe      	b.n	8000c9c <MemManage_Handler+0x4>

08000c9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca2:	e7fe      	b.n	8000ca2 <BusFault_Handler+0x4>

08000ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <UsageFault_Handler+0x4>

08000caa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f99c 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f001 fdc5 	bl	8002874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	200003e8 	.word	0x200003e8

08000cf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cfc:	f000 fd12 	bl	8001724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d10:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000d14:	f003 0301 	and.w	r3, r3, #1
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d013      	beq.n	8000d44 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000d1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d20:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000d24:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d00b      	beq.n	8000d44 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d2c:	e000      	b.n	8000d30 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d2e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d0f9      	beq.n	8000d2e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d3a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
	return 1;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <_kill>:

int _kill(int pid, int sig)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d6c:	f00f ff9c 	bl	8010ca8 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2216      	movs	r2, #22
 8000d74:	601a      	str	r2, [r3, #0]
	return -1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_exit>:

void _exit (int status)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffe7 	bl	8000d62 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d94:	e7fe      	b.n	8000d94 <_exit+0x12>

08000d96 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e00a      	b.n	8000dbe <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000da8:	f3af 8000 	nop.w
 8000dac:	4601      	mov	r1, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1c5a      	adds	r2, r3, #1
 8000db2:	60ba      	str	r2, [r7, #8]
 8000db4:	b2ca      	uxtb	r2, r1
 8000db6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	dbf0      	blt.n	8000da8 <_read+0x12>
	}

return len;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	e009      	b.n	8000df6 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1c5a      	adds	r2, r3, #1
 8000de6:	60ba      	str	r2, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697a      	ldr	r2, [r7, #20]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	dbf1      	blt.n	8000de2 <_write+0x12>
	}
	return len;
 8000dfe:	687b      	ldr	r3, [r7, #4]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3718      	adds	r7, #24
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <_close>:

int _close(int file)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	return -1;
 8000e10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e30:	605a      	str	r2, [r3, #4]
	return 0;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <_isatty>:

int _isatty(int file)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	return 1;
 8000e48:	2301      	movs	r3, #1
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	60f8      	str	r0, [r7, #12]
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
	return 0;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_open>:

int _open(char *path, int flags, ...)
{
 8000e70:	b40e      	push	{r1, r2, r3}
 8000e72:	b480      	push	{r7}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
	/* Pretend like we always fail */
	return -1;
 8000e7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	b003      	add	sp, #12
 8000e8a:	4770      	bx	lr

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	; (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f00f fef4 	bl	8010ca8 <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000354 	.word	0x20000354
 8000ef4:	20000b68 	.word	0x20000b68

08000ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f1c:	480d      	ldr	r0, [pc, #52]	; (8000f54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f22:	490e      	ldr	r1, [pc, #56]	; (8000f5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <LoopForever+0xe>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000f28:	e002      	b.n	8000f30 <LoopCopyDataInit>

08000f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2e:	3304      	adds	r3, #4

08000f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f34:	d3f9      	bcc.n	8000f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f38:	4c0b      	ldr	r4, [pc, #44]	; (8000f68 <LoopForever+0x16>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f3c:	e001      	b.n	8000f42 <LoopFillZerobss>

08000f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f40:	3204      	adds	r2, #4

08000f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f44:	d3fb      	bcc.n	8000f3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f46:	f7ff ffd7 	bl	8000ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f010 facb 	bl	80114e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f4e:	f002 fc9f 	bl	8003890 <main>

08000f52 <LoopForever>:

LoopForever:
    b LoopForever
 8000f52:	e7fe      	b.n	8000f52 <LoopForever>
  ldr   r0, =_estack
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000334 	.word	0x20000334
  ldr r2, =_sidata
 8000f60:	080174e4 	.word	0x080174e4
  ldr r2, =_sbss
 8000f64:	20000334 	.word	0x20000334
  ldr r4, =_ebss
 8000f68:	20000b68 	.word	0x20000b68

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>

08000f6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f939 	bl	80011f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 f80e 	bl	8000fa0 <HAL_InitTick>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	71fb      	strb	r3, [r7, #7]
 8000f8e:	e001      	b.n	8000f94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f90:	f7ff fddc 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f94:	79fb      	ldrb	r3, [r7, #7]

}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <HAL_InitTick+0x68>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d022      	beq.n	8000ffa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_InitTick+0x6c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <HAL_InitTick+0x68>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f944 	bl	8001256 <HAL_SYSTICK_Config>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d10f      	bne.n	8000ff4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d809      	bhi.n	8000fee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe2:	f000 f910 	bl	8001206 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_InitTick+0x70>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	e007      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e004      	b.n	8000ffe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e001      	b.n	8000ffe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000000c 	.word	0x2000000c
 800100c:	20000004 	.word	0x20000004
 8001010:	20000008 	.word	0x20000008

08001014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b05      	ldr	r3, [pc, #20]	; (8001030 <HAL_IncTick+0x1c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_IncTick+0x20>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4413      	add	r3, r2
 8001022:	4a03      	ldr	r2, [pc, #12]	; (8001030 <HAL_IncTick+0x1c>)
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	20000b54 	.word	0x20000b54
 8001034:	2000000c 	.word	0x2000000c

08001038 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return uwTick;
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <HAL_GetTick+0x14>)
 800103e:	681b      	ldr	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000b54 	.word	0x20000b54

08001050 <__NVIC_SetPriorityGrouping>:
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001060:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800106c:	4013      	ands	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001078:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800107c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001080:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001082:	4a04      	ldr	r2, [pc, #16]	; (8001094 <__NVIC_SetPriorityGrouping+0x44>)
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	60d3      	str	r3, [r2, #12]
}
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <__NVIC_GetPriorityGrouping>:
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <__NVIC_GetPriorityGrouping+0x18>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	0a1b      	lsrs	r3, r3, #8
 80010a2:	f003 0307 	and.w	r3, r3, #7
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_EnableIRQ>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	db0b      	blt.n	80010de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	f003 021f 	and.w	r2, r3, #31
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <__NVIC_EnableIRQ+0x38>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	095b      	lsrs	r3, r3, #5
 80010d4:	2001      	movs	r0, #1
 80010d6:	fa00 f202 	lsl.w	r2, r0, r2
 80010da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000e100 	.word	0xe000e100

080010f0 <__NVIC_SetPriority>:
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	db0a      	blt.n	800111a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	490c      	ldr	r1, [pc, #48]	; (800113c <__NVIC_SetPriority+0x4c>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	0112      	lsls	r2, r2, #4
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	440b      	add	r3, r1
 8001114:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001118:	e00a      	b.n	8001130 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4908      	ldr	r1, [pc, #32]	; (8001140 <__NVIC_SetPriority+0x50>)
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	f003 030f 	and.w	r3, r3, #15
 8001126:	3b04      	subs	r3, #4
 8001128:	0112      	lsls	r2, r2, #4
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	440b      	add	r3, r1
 800112e:	761a      	strb	r2, [r3, #24]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <NVIC_EncodePriority>:
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f1c3 0307 	rsb	r3, r3, #7
 800115e:	2b04      	cmp	r3, #4
 8001160:	bf28      	it	cs
 8001162:	2304      	movcs	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3304      	adds	r3, #4
 800116a:	2b06      	cmp	r3, #6
 800116c:	d902      	bls.n	8001174 <NVIC_EncodePriority+0x30>
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3b03      	subs	r3, #3
 8001172:	e000      	b.n	8001176 <NVIC_EncodePriority+0x32>
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43da      	mvns	r2, r3
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	401a      	ands	r2, r3
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800118c:	f04f 31ff 	mov.w	r1, #4294967295
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	fa01 f303 	lsl.w	r3, r1, r3
 8001196:	43d9      	mvns	r1, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800119c:	4313      	orrs	r3, r2
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3724      	adds	r7, #36	; 0x24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <SysTick_Config>:
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011bc:	d301      	bcc.n	80011c2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011be:	2301      	movs	r3, #1
 80011c0:	e00f      	b.n	80011e2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <SysTick_Config+0x40>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ca:	210f      	movs	r1, #15
 80011cc:	f04f 30ff 	mov.w	r0, #4294967295
 80011d0:	f7ff ff8e 	bl	80010f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <SysTick_Config+0x40>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <SysTick_Config+0x40>)
 80011dc:	2207      	movs	r2, #7
 80011de:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	e000e010 	.word	0xe000e010

080011f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff29 	bl	8001050 <__NVIC_SetPriorityGrouping>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
 8001212:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff40 	bl	8001098 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff90 	bl	8001144 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5f 	bl	80010f0 <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff33 	bl	80010b4 <__NVIC_EnableIRQ>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa4 	bl	80011ac <SysTick_Config>
 8001264:	4603      	mov	r3, r0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b085      	sub	sp, #20
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d005      	beq.n	8001292 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2204      	movs	r2, #4
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e037      	b.n	8001302 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 020e 	bic.w	r2, r2, #14
 80012a0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012b0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f003 021f 	and.w	r2, r3, #31
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012de:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d00c      	beq.n	8001302 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012f6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001300:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2201      	movs	r2, #1
 8001306:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001312:	7bfb      	ldrb	r3, [r7, #15]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b02      	cmp	r3, #2
 8001336:	d00d      	beq.n	8001354 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2204      	movs	r2, #4
 800133c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e047      	b.n	80013e4 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020e 	bic.w	r2, r2, #14
 8001362:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0201 	bic.w	r2, r2, #1
 8001372:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001382:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	4798      	blx	r3
    }
  }
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b087      	sub	sp, #28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013fe:	e15a      	b.n	80016b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 814c 	beq.w	80016b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d00b      	beq.n	8001438 <HAL_GPIO_Init+0x48>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d007      	beq.n	8001438 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142c:	2b11      	cmp	r3, #17
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b12      	cmp	r3, #18
 8001436:	d130      	bne.n	800149a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4013      	ands	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146e:	2201      	movs	r2, #1
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	091b      	lsrs	r3, r3, #4
 8001484:	f003 0201 	and.w	r2, r3, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0xea>
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	6939      	ldr	r1, [r7, #16]
 800151e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0203 	and.w	r2, r3, #3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 80a6 	beq.w	80016b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b5b      	ldr	r3, [pc, #364]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 8001566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001568:	4a5a      	ldr	r2, [pc, #360]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6613      	str	r3, [r2, #96]	; 0x60
 8001570:	4b58      	ldr	r3, [pc, #352]	; (80016d4 <HAL_GPIO_Init+0x2e4>)
 8001572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157c:	4a56      	ldr	r2, [pc, #344]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	f003 0303 	and.w	r3, r3, #3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015a6:	d01f      	beq.n	80015e8 <HAL_GPIO_Init+0x1f8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <HAL_GPIO_Init+0x2ec>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d019      	beq.n	80015e4 <HAL_GPIO_Init+0x1f4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a4b      	ldr	r2, [pc, #300]	; (80016e0 <HAL_GPIO_Init+0x2f0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1f0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a4a      	ldr	r2, [pc, #296]	; (80016e4 <HAL_GPIO_Init+0x2f4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1ec>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a49      	ldr	r2, [pc, #292]	; (80016e8 <HAL_GPIO_Init+0x2f8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a48      	ldr	r2, [pc, #288]	; (80016ec <HAL_GPIO_Init+0x2fc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015d0:	2305      	movs	r3, #5
 80015d2:	e00a      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015d4:	2306      	movs	r3, #6
 80015d6:	e008      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015d8:	2304      	movs	r3, #4
 80015da:	e006      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015dc:	2303      	movs	r3, #3
 80015de:	e004      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <HAL_GPIO_Init+0x1fa>
 80015e8:	2300      	movs	r3, #0
 80015ea:	697a      	ldr	r2, [r7, #20]
 80015ec:	f002 0203 	and.w	r2, r2, #3
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	4093      	lsls	r3, r2
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fa:	4937      	ldr	r1, [pc, #220]	; (80016d8 <HAL_GPIO_Init+0x2e8>)
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	089b      	lsrs	r3, r3, #2
 8001600:	3302      	adds	r3, #2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001608:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43db      	mvns	r3, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162c:	4a30      	ldr	r2, [pc, #192]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43db      	mvns	r3, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800165c:	4b24      	ldr	r3, [pc, #144]	; (80016f0 <HAL_GPIO_Init+0x300>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43db      	mvns	r3, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001680:	4a1b      	ldr	r2, [pc, #108]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <HAL_GPIO_Init+0x300>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016aa:	4a11      	ldr	r2, [pc, #68]	; (80016f0 <HAL_GPIO_Init+0x300>)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa22 f303 	lsr.w	r3, r2, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f47f ae9d 	bne.w	8001400 <HAL_GPIO_Init+0x10>
  }
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40010000 	.word	0x40010000
 80016dc:	48000400 	.word	0x48000400
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48000c00 	.word	0x48000c00
 80016e8:	48001000 	.word	0x48001000
 80016ec:	48001400 	.word	0x48001400
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	460b      	mov	r3, r1
 80016fe:	807b      	strh	r3, [r7, #2]
 8001700:	4613      	mov	r3, r2
 8001702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001704:	787b      	ldrb	r3, [r7, #1]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001710:	e002      	b.n	8001718 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	695a      	ldr	r2, [r3, #20]
 8001732:	88fb      	ldrh	r3, [r7, #6]
 8001734:	4013      	ands	r3, r2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d006      	beq.n	8001748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f806 	bl	8001754 <HAL_GPIO_EXTI_Callback>
  }
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
	...

0800176c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d141      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001786:	d131      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001788:	4b47      	ldr	r3, [pc, #284]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800178e:	4a46      	ldr	r2, [pc, #280]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001794:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017a8:	4b40      	ldr	r3, [pc, #256]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2232      	movs	r2, #50	; 0x32
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	4a3f      	ldr	r2, [pc, #252]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b4:	fba2 2303 	umull	r2, r3, r2, r3
 80017b8:	0c9b      	lsrs	r3, r3, #18
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017be:	e002      	b.n	80017c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3b01      	subs	r3, #1
 80017c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c6:	4b38      	ldr	r3, [pc, #224]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d2:	d102      	bne.n	80017da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f2      	bne.n	80017c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e6:	d158      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e057      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017ec:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017f2:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017fc:	e04d      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001804:	d141      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800180e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001812:	d131      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001814:	4b24      	ldr	r3, [pc, #144]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001824:	4b20      	ldr	r3, [pc, #128]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800182c:	4a1e      	ldr	r2, [pc, #120]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001832:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001834:	4b1d      	ldr	r3, [pc, #116]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2232      	movs	r2, #50	; 0x32
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4a1c      	ldr	r2, [pc, #112]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001840:	fba2 2303 	umull	r2, r3, r2, r3
 8001844:	0c9b      	lsrs	r3, r3, #18
 8001846:	3301      	adds	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184a:	e002      	b.n	8001852 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	3b01      	subs	r3, #1
 8001850:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	695b      	ldr	r3, [r3, #20]
 8001856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d102      	bne.n	8001866 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f2      	bne.n	800184c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001872:	d112      	bne.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e011      	b.n	800189c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001888:	e007      	b.n	800189a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001892:	4a05      	ldr	r2, [pc, #20]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001894:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001898:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	40007000 	.word	0x40007000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	431bde83 	.word	0x431bde83

080018b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80018be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c2:	6093      	str	r3, [r2, #8]
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000

080018d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e308      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d075      	beq.n	80019de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018f2:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 030c 	and.w	r3, r3, #12
 80018fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018fc:	4ba0      	ldr	r3, [pc, #640]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d102      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e>
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b03      	cmp	r3, #3
 8001910:	d002      	beq.n	8001918 <HAL_RCC_OscConfig+0x44>
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d10b      	bne.n	8001930 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	4b99      	ldr	r3, [pc, #612]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d05b      	beq.n	80019dc <HAL_RCC_OscConfig+0x108>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d157      	bne.n	80019dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e2e3      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d106      	bne.n	8001948 <HAL_RCC_OscConfig+0x74>
 800193a:	4b91      	ldr	r3, [pc, #580]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a90      	ldr	r2, [pc, #576]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	e01d      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x98>
 8001952:	4b8b      	ldr	r3, [pc, #556]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a8a      	ldr	r2, [pc, #552]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800195c:	6013      	str	r3, [r2, #0]
 800195e:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a87      	ldr	r2, [pc, #540]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0xb0>
 800196c:	4b84      	ldr	r3, [pc, #528]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a83      	ldr	r2, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a80      	ldr	r2, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001982:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb54 	bl	8001038 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001994:	f7ff fb50 	bl	8001038 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b64      	cmp	r3, #100	; 0x64
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e2a8      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0xc0>
 80019b2:	e014      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb40 	bl	8001038 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7ff fb3c 	bl	8001038 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e294      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019ce:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0xe8>
 80019da:	e000      	b.n	80019de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d075      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ea:	4b65      	ldr	r3, [pc, #404]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	2b0c      	cmp	r3, #12
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0x136>
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d002      	beq.n	8001a10 <HAL_RCC_OscConfig+0x13c>
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11f      	bne.n	8001a50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a10:	4b5b      	ldr	r3, [pc, #364]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d005      	beq.n	8001a28 <HAL_RCC_OscConfig+0x154>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e267      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a28:	4b55      	ldr	r3, [pc, #340]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4952      	ldr	r1, [pc, #328]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a3c:	4b51      	ldr	r3, [pc, #324]	; (8001b84 <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff faad 	bl	8000fa0 <HAL_InitTick>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d043      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e253      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d023      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a58:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fae8 	bl	8001038 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a6c:	f7ff fae4 	bl	8001038 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e23c      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	4b40      	ldr	r3, [pc, #256]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	4939      	ldr	r1, [pc, #228]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e01a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aa0:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a36      	ldr	r2, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aac:	f7ff fac4 	bl	8001038 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab4:	f7ff fac0 	bl	8001038 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e218      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac6:	4b2e      	ldr	r3, [pc, #184]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1f0      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x1e0>
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d03c      	beq.n	8001b5c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d01c      	beq.n	8001b24 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b25      	ldr	r3, [pc, #148]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	4a23      	ldr	r2, [pc, #140]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa9d 	bl	8001038 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff fa99 	bl	8001038 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1f1      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b14:	4b1a      	ldr	r3, [pc, #104]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0ef      	beq.n	8001b02 <HAL_RCC_OscConfig+0x22e>
 8001b22:	e01b      	b.n	8001b5c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa80 	bl	8001038 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fa7c 	bl	8001038 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1d4      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1ef      	bne.n	8001b3c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 80ab 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d106      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2b4>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e005      	b.n	8001b8a <HAL_RCC_OscConfig+0x2b6>
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	20000008 	.word	0x20000008
 8001b88:	2300      	movs	r3, #0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4baf      	ldr	r3, [pc, #700]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b92:	4aae      	ldr	r2, [pc, #696]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b98:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9a:	4bac      	ldr	r3, [pc, #688]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001baa:	4ba9      	ldr	r3, [pc, #676]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d118      	bne.n	8001be8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb6:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4aa5      	ldr	r2, [pc, #660]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff fa39 	bl	8001038 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bca:	f7ff fa35 	bl	8001038 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e18d      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bdc:	4b9c      	ldr	r3, [pc, #624]	; (8001e50 <HAL_RCC_OscConfig+0x57c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0f0      	beq.n	8001bca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_RCC_OscConfig+0x32e>
 8001bf0:	4b96      	ldr	r3, [pc, #600]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf6:	4a95      	ldr	r2, [pc, #596]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c00:	e024      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	2b05      	cmp	r3, #5
 8001c08:	d110      	bne.n	8001c2c <HAL_RCC_OscConfig+0x358>
 8001c0a:	4b90      	ldr	r3, [pc, #576]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	4a8e      	ldr	r2, [pc, #568]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c12:	f043 0304 	orr.w	r3, r3, #4
 8001c16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c1a:	4b8c      	ldr	r3, [pc, #560]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c20:	4a8a      	ldr	r2, [pc, #552]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	e00f      	b.n	8001c4c <HAL_RCC_OscConfig+0x378>
 8001c2c:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	4a86      	ldr	r2, [pc, #536]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c34:	f023 0301 	bic.w	r3, r3, #1
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c3c:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	4a82      	ldr	r2, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c44:	f023 0304 	bic.w	r3, r3, #4
 8001c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d016      	beq.n	8001c82 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7ff f9f0 	bl	8001038 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7ff f9ec 	bl	8001038 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e142      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0ed      	beq.n	8001c5c <HAL_RCC_OscConfig+0x388>
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c82:	f7ff f9d9 	bl	8001038 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff f9d5 	bl	8001038 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e12b      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca0:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1ed      	bne.n	8001c8a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cae:	7ffb      	ldrb	r3, [r7, #31]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d105      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb4:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	4a64      	ldr	r2, [pc, #400]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cbe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d03c      	beq.n	8001d46 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01c      	beq.n	8001d0e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f9a8 	bl	8001038 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cec:	f7ff f9a4 	bl	8001038 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0fc      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ef      	beq.n	8001cec <HAL_RCC_OscConfig+0x418>
 8001d0c:	e01b      	b.n	8001d46 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d0e:	4b4f      	ldr	r3, [pc, #316]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d14:	4a4d      	ldr	r2, [pc, #308]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d16:	f023 0301 	bic.w	r3, r3, #1
 8001d1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1e:	f7ff f98b 	bl	8001038 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d26:	f7ff f987 	bl	8001038 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0df      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d38:	4b44      	ldr	r3, [pc, #272]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80d3 	beq.w	8001ef6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	f000 808d 	beq.w	8001e78 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d15a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b39      	ldr	r3, [pc, #228]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a38      	ldr	r2, [pc, #224]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f961 	bl	8001038 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7ff f95d 	bl	8001038 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0b5      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x580>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6a11      	ldr	r1, [r2, #32]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001da8:	3a01      	subs	r2, #1
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	4311      	orrs	r1, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001db2:	0212      	lsls	r2, r2, #8
 8001db4:	4311      	orrs	r1, r2
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dba:	0852      	lsrs	r2, r2, #1
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	0552      	lsls	r2, r2, #21
 8001dc0:	4311      	orrs	r1, r2
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	0852      	lsrs	r2, r2, #1
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	0652      	lsls	r2, r2, #25
 8001dcc:	4311      	orrs	r1, r2
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dd2:	06d2      	lsls	r2, r2, #27
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	491d      	ldr	r1, [pc, #116]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001de2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001de6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a17      	ldr	r2, [pc, #92]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff f920 	bl	8001038 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7ff f91c 	bl	8001038 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e074      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x528>
 8001e1a:	e06c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a07      	ldr	r2, [pc, #28]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e42:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff f8f8 	bl	8001038 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e4a:	e00e      	b.n	8001e6a <HAL_RCC_OscConfig+0x596>
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40007000 	.word	0x40007000
 8001e54:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff f8ee 	bl	8001038 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e046      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6a:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x584>
 8001e76:	e03e      	b.n	8001ef6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e039      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e84:	4b1e      	ldr	r3, [pc, #120]	; (8001f00 <HAL_RCC_OscConfig+0x62c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0203 	and.w	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d12c      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d123      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d11b      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d113      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d109      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	3b01      	subs	r3, #1
 8001eec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3720      	adds	r7, #32
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e11e      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b91      	ldr	r3, [pc, #580]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d910      	bls.n	8001f4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b8e      	ldr	r3, [pc, #568]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f023 020f 	bic.w	r2, r3, #15
 8001f32:	498c      	ldr	r1, [pc, #560]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f3a:	4b8a      	ldr	r3, [pc, #552]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e106      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d073      	beq.n	8002040 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d129      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f60:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0f4      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f70:	f000 f99e 	bl	80022b0 <RCC_GetSysClockFreqFromPLLSource>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d93f      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d033      	beq.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d12f      	bne.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f9e:	4b72      	ldr	r3, [pc, #456]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fa6:	4a70      	ldr	r2, [pc, #448]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001fae:	2380      	movs	r3, #128	; 0x80
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e024      	b.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbc:	4b6a      	ldr	r3, [pc, #424]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d109      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0be      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001fdc:	f000 f8ce 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8001fe0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4a61      	ldr	r2, [pc, #388]	; (800216c <HAL_RCC_ClockConfig+0x268>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d909      	bls.n	8001ffe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ff2:	4a5d      	ldr	r2, [pc, #372]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8001ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f023 0203 	bic.w	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4957      	ldr	r1, [pc, #348]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800200c:	4313      	orrs	r3, r2
 800200e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002010:	f7ff f812 	bl	8001038 <HAL_GetTick>
 8002014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7ff f80e 	bl	8001038 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e095      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 020c 	and.w	r2, r3, #12
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	429a      	cmp	r2, r3
 800203e:	d1eb      	bne.n	8002018 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002058:	4b43      	ldr	r3, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	4a42      	ldr	r2, [pc, #264]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800205e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002062:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b00      	cmp	r3, #0
 800206e:	d007      	beq.n	8002080 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002078:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800207a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800207e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4936      	ldr	r1, [pc, #216]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800208e:	4313      	orrs	r3, r2
 8002090:	608b      	str	r3, [r1, #8]
 8002092:	e008      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800209a:	4b33      	ldr	r3, [pc, #204]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	4a32      	ldr	r2, [pc, #200]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a6:	4b2f      	ldr	r3, [pc, #188]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d21d      	bcs.n	80020f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b4:	4b2b      	ldr	r3, [pc, #172]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f023 020f 	bic.w	r2, r3, #15
 80020bc:	4929      	ldr	r1, [pc, #164]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020c4:	f7fe ffb8 	bl	8001038 <HAL_GetTick>
 80020c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ca:	e00a      	b.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020cc:	f7fe ffb4 	bl	8001038 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e03b      	b.n	800215a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1ed      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fc:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4917      	ldr	r1, [pc, #92]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	490f      	ldr	r1, [pc, #60]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212e:	f000 f825 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8002132:	4602      	mov	r2, r0
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_RCC_ClockConfig+0x264>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <HAL_RCC_ClockConfig+0x26c>)
 8002140:	5ccb      	ldrb	r3, [r1, r3]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa22 f303 	lsr.w	r3, r2, r3
 800214a:	4a0a      	ldr	r2, [pc, #40]	; (8002174 <HAL_RCC_ClockConfig+0x270>)
 800214c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <HAL_RCC_ClockConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe ff24 	bl	8000fa0 <HAL_InitTick>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3718      	adds	r7, #24
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	04c4b400 	.word	0x04c4b400
 8002170:	08016544 	.word	0x08016544
 8002174:	20000004 	.word	0x20000004
 8002178:	20000008 	.word	0x20000008

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	b480      	push	{r7}
 800217e:	b087      	sub	sp, #28
 8002180:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002182:	4b2c      	ldr	r3, [pc, #176]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b04      	cmp	r3, #4
 800218c:	d102      	bne.n	8002194 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	e047      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002194:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d102      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	e03e      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80021a6:	4b23      	ldr	r3, [pc, #140]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d136      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	091b      	lsrs	r3, r3, #4
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3301      	adds	r3, #1
 80021c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021d0:	4a1a      	ldr	r2, [pc, #104]	; (800223c <HAL_RCC_GetSysClockFreq+0xc0>)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021da:	68d2      	ldr	r2, [r2, #12]
 80021dc:	0a12      	lsrs	r2, r2, #8
 80021de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
      break;
 80021e8:	e00c      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021f4:	68d2      	ldr	r2, [r2, #12]
 80021f6:	0a12      	lsrs	r2, r2, #8
 80021f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021fc:	fb02 f303 	mul.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
      break;
 8002202:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0e5b      	lsrs	r3, r3, #25
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	e001      	b.n	8002224 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002224:	693b      	ldr	r3, [r7, #16]
}
 8002226:	4618      	mov	r0, r3
 8002228:	371c      	adds	r7, #28
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	00f42400 	.word	0x00f42400
 800223c:	016e3600 	.word	0x016e3600

08002240 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_RCC_GetHCLKFreq+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000004 	.word	0x20000004

08002258 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800225c:	f7ff fff0 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 8002260:	4602      	mov	r2, r0
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	4904      	ldr	r1, [pc, #16]	; (8002280 <HAL_RCC_GetPCLK1Freq+0x28>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	f003 031f 	and.w	r3, r3, #31
 8002274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002278:	4618      	mov	r0, r3
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40021000 	.word	0x40021000
 8002280:	08016554 	.word	0x08016554

08002284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002288:	f7ff ffda 	bl	8002240 <HAL_RCC_GetHCLKFreq>
 800228c:	4602      	mov	r2, r0
 800228e:	4b06      	ldr	r3, [pc, #24]	; (80022a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	0adb      	lsrs	r3, r3, #11
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4904      	ldr	r1, [pc, #16]	; (80022ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800229a:	5ccb      	ldrb	r3, [r1, r3]
 800229c:	f003 031f 	and.w	r3, r3, #31
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40021000 	.word	0x40021000
 80022ac:	08016554 	.word	0x08016554

080022b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d10c      	bne.n	80022ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022de:	68d2      	ldr	r2, [r2, #12]
 80022e0:	0a12      	lsrs	r2, r2, #8
 80022e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022e6:	fb02 f303 	mul.w	r3, r2, r3
 80022ea:	617b      	str	r3, [r7, #20]
    break;
 80022ec:	e00c      	b.n	8002308 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022f8:	68d2      	ldr	r2, [r2, #12]
 80022fa:	0a12      	lsrs	r2, r2, #8
 80022fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	617b      	str	r3, [r7, #20]
    break;
 8002306:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0e5b      	lsrs	r3, r3, #25
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	40021000 	.word	0x40021000
 8002334:	016e3600 	.word	0x016e3600
 8002338:	00f42400 	.word	0x00f42400

0800233c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002344:	2300      	movs	r3, #0
 8002346:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002348:	2300      	movs	r3, #0
 800234a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 8098 	beq.w	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10d      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236e:	4a3f      	ldr	r2, [pc, #252]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6593      	str	r3, [r2, #88]	; 0x58
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	60bb      	str	r3, [r7, #8]
 8002380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002382:	2301      	movs	r3, #1
 8002384:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a39      	ldr	r2, [pc, #228]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002392:	f7fe fe51 	bl	8001038 <HAL_GetTick>
 8002396:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002398:	e009      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fe4d 	bl	8001038 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d902      	bls.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	74fb      	strb	r3, [r7, #19]
        break;
 80023ac:	e005      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ef      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d159      	bne.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023c0:	4b2a      	ldr	r3, [pc, #168]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01e      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d019      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e8:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f8:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002408:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fe0d 	bl	8001038 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002420:	e00b      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fe09 	bl	8001038 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d902      	bls.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	74fb      	strb	r3, [r7, #19]
            break;
 8002438:	e006      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ec      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244e:	4b07      	ldr	r3, [pc, #28]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245c:	4903      	ldr	r1, [pc, #12]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002464:	e008      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	74bb      	strb	r3, [r7, #18]
 800246a:	e005      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800246c:	40021000 	.word	0x40021000
 8002470:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002478:	7c7b      	ldrb	r3, [r7, #17]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d105      	bne.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247e:	4baf      	ldr	r3, [pc, #700]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	4aae      	ldr	r2, [pc, #696]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002496:	4ba9      	ldr	r3, [pc, #676]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800249c:	f023 0203 	bic.w	r2, r3, #3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	49a5      	ldr	r1, [pc, #660]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b8:	4ba0      	ldr	r3, [pc, #640]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f023 020c 	bic.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	499d      	ldr	r1, [pc, #628]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024da:	4b98      	ldr	r3, [pc, #608]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4994      	ldr	r1, [pc, #592]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024fc:	4b8f      	ldr	r3, [pc, #572]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80024fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002502:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	498c      	ldr	r1, [pc, #560]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251e:	4b87      	ldr	r3, [pc, #540]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002524:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	4983      	ldr	r1, [pc, #524]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0320 	and.w	r3, r3, #32
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002540:	4b7e      	ldr	r3, [pc, #504]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	497b      	ldr	r1, [pc, #492]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002562:	4b76      	ldr	r3, [pc, #472]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002568:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	4972      	ldr	r1, [pc, #456]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002584:	4b6d      	ldr	r3, [pc, #436]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	496a      	ldr	r1, [pc, #424]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	4961      	ldr	r1, [pc, #388]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025c8:	4b5c      	ldr	r3, [pc, #368]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025ce:	f023 0203 	bic.w	r2, r3, #3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d6:	4959      	ldr	r1, [pc, #356]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025ea:	4b54      	ldr	r3, [pc, #336]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	4950      	ldr	r1, [pc, #320]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800260e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002612:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4948      	ldr	r1, [pc, #288]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262a:	d105      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800262c:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4a42      	ldr	r2, [pc, #264]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002632:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002636:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002640:	2b00      	cmp	r3, #0
 8002642:	d015      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002644:	4b3d      	ldr	r3, [pc, #244]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	493a      	ldr	r1, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d105      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002664:	4b35      	ldr	r3, [pc, #212]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a34      	ldr	r2, [pc, #208]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800266a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d015      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268a:	492c      	ldr	r1, [pc, #176]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800268c:	4313      	orrs	r3, r2
 800268e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269a:	d105      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800269c:	4b27      	ldr	r3, [pc, #156]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a26      	ldr	r2, [pc, #152]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d015      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c2:	491e      	ldr	r1, [pc, #120]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d2:	d105      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a18      	ldr	r2, [pc, #96]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d015      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026ec:	4b13      	ldr	r3, [pc, #76]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4910      	ldr	r1, [pc, #64]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800270a:	d105      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270c:	4b0b      	ldr	r3, [pc, #44]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a0a      	ldr	r2, [pc, #40]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002716:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d018      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	4902      	ldr	r1, [pc, #8]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002734:	4313      	orrs	r3, r2
 8002736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800273a:	e001      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800273c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002748:	d105      	bne.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002754:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d015      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002762:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002764:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002768:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002770:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002780:	d105      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002782:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800279c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a8:	4909      	ldr	r1, [pc, #36]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b8:	d105      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4a04      	ldr	r2, [pc, #16]	; (80027d0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80027c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e042      	b.n	800286c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d106      	bne.n	80027fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7fe f9cb 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	; 0x24
 8002802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 fa80 	bl	8002d1c <UART_SetConfig>
 800281c:	4603      	mov	r3, r0
 800281e:	2b01      	cmp	r3, #1
 8002820:	d101      	bne.n	8002826 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e022      	b.n	800286c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fd3e 	bl	80032b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002842:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002852:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 fdc5 	bl	80033f4 <UART_CheckIdleState>
 800286a:	4603      	mov	r3, r0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	f640 030f 	movw	r3, #2063	; 0x80f
 800289a:	4013      	ands	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d118      	bne.n	80028d6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0320 	and.w	r3, r3, #32
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d013      	beq.n	80028d6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d009      	beq.n	80028d6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 81fb 	beq.w	8002cc2 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
      }
      return;
 80028d4:	e1f5      	b.n	8002cc2 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 80ef 	beq.w	8002abc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4b73      	ldr	r3, [pc, #460]	; (8002ab0 <HAL_UART_IRQHandler+0x23c>)
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4b72      	ldr	r3, [pc, #456]	; (8002ab4 <HAL_UART_IRQHandler+0x240>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 80e4 	beq.w	8002abc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_UART_IRQHandler+0xac>
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00b      	beq.n	8002920 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2201      	movs	r2, #1
 800290e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002916:	f043 0201 	orr.w	r2, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_UART_IRQHandler+0xd8>
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2202      	movs	r2, #2
 800293a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f003 0304 	and.w	r3, r3, #4
 8002952:	2b00      	cmp	r3, #0
 8002954:	d010      	beq.n	8002978 <HAL_UART_IRQHandler+0x104>
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00b      	beq.n	8002978 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2204      	movs	r2, #4
 8002966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296e:	f043 0202 	orr.w	r2, r3, #2
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d015      	beq.n	80029ae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4b48      	ldr	r3, [pc, #288]	; (8002ab0 <HAL_UART_IRQHandler+0x23c>)
 8002990:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00b      	beq.n	80029ae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a4:	f043 0208 	orr.w	r2, r3, #8
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d011      	beq.n	80029dc <HAL_UART_IRQHandler+0x168>
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00c      	beq.n	80029dc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d2:	f043 0220 	orr.w	r2, r3, #32
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 816f 	beq.w	8002cc6 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d011      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	f003 0320 	and.w	r3, r3, #32
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d007      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a28:	2b40      	cmp	r3, #64	; 0x40
 8002a2a:	d004      	beq.n	8002a36 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d031      	beq.n	8002a9a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fda7 	bl	800358a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d123      	bne.n	8002a92 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d013      	beq.n	8002a8a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_UART_IRQHandler+0x244>)
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fc56 	bl	8001320 <HAL_DMA_Abort_IT>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d017      	beq.n	8002aaa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a88:	e00f      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f930 	bl	8002cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e00b      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f92c 	bl	8002cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	e007      	b.n	8002aaa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f928 	bl	8002cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002aa8:	e10d      	b.n	8002cc6 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aaa:	bf00      	nop
    return;
 8002aac:	e10b      	b.n	8002cc6 <HAL_UART_IRQHandler+0x452>
 8002aae:	bf00      	nop
 8002ab0:	10000001 	.word	0x10000001
 8002ab4:	04000120 	.word	0x04000120
 8002ab8:	080035ef 	.word	0x080035ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	f040 80ab 	bne.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	f000 80a5 	beq.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 809f 	beq.w	8002c1c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2210      	movs	r2, #16
 8002ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d155      	bne.n	8002ba0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002afe:	893b      	ldrh	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80e2 	beq.w	8002cca <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b0c:	893a      	ldrh	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f080 80db 	bcs.w	8002cca <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	893a      	ldrh	r2, [r7, #8]
 8002b18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0320 	and.w	r3, r3, #32
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d12b      	bne.n	8002b84 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b3a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b5a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0210 	bic.w	r2, r2, #16
 8002b78:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fe fb75 	bl	800126e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	4619      	mov	r1, r3
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 f8b3 	bl	8002d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b9e:	e094      	b.n	8002cca <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8002bc0:	897b      	ldrh	r3, [r7, #10]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f000 8083 	beq.w	8002cce <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	f023 0301 	bic.w	r3, r3, #1
 8002bea:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0210 	bic.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c10:	897b      	ldrh	r3, [r7, #10]
 8002c12:	4619      	mov	r1, r3
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f875 	bl	8002d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1a:	e058      	b.n	8002cce <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00d      	beq.n	8002c42 <HAL_UART_IRQHandler+0x3ce>
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 fd07 	bl	800364e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c40:	e048      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d012      	beq.n	8002c72 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d104      	bne.n	8002c60 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d034      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
    }
    return;
 8002c70:	e02f      	b.n	8002cd2 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d008      	beq.n	8002c8e <HAL_UART_IRQHandler+0x41a>
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fcc7 	bl	800361a <UART_EndTransmit_IT>
    return;
 8002c8c:	e022      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_UART_IRQHandler+0x436>
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d003      	beq.n	8002caa <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fce7 	bl	8003676 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ca8:	e014      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00f      	beq.n	8002cd4 <HAL_UART_IRQHandler+0x460>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0c      	bge.n	8002cd4 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 fcd1 	bl	8003662 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cc0:	e008      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cc2:	bf00      	nop
 8002cc4:	e006      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
    return;
 8002cc6:	bf00      	nop
 8002cc8:	e004      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cca:	bf00      	nop
 8002ccc:	e002      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
      return;
 8002cce:	bf00      	nop
 8002cd0:	e000      	b.n	8002cd4 <HAL_UART_IRQHandler+0x460>
    return;
 8002cd2:	bf00      	nop
  }
}
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop

08002cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d1c:	b5b0      	push	{r4, r5, r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4bb1      	ldr	r3, [pc, #708]	; (800300c <UART_SetConfig+0x2f0>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69f9      	ldr	r1, [r7, #28]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4aa6      	ldr	r2, [pc, #664]	; (8003010 <UART_SetConfig+0x2f4>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	69f9      	ldr	r1, [r7, #28]
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f023 010f 	bic.w	r1, r3, #15
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a97      	ldr	r2, [pc, #604]	; (8003014 <UART_SetConfig+0x2f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d120      	bne.n	8002dfe <UART_SetConfig+0xe2>
 8002dbc:	4b96      	ldr	r3, [pc, #600]	; (8003018 <UART_SetConfig+0x2fc>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d816      	bhi.n	8002df8 <UART_SetConfig+0xdc>
 8002dca:	a201      	add	r2, pc, #4	; (adr r2, 8002dd0 <UART_SetConfig+0xb4>)
 8002dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd0:	08002de1 	.word	0x08002de1
 8002dd4:	08002ded 	.word	0x08002ded
 8002dd8:	08002de7 	.word	0x08002de7
 8002ddc:	08002df3 	.word	0x08002df3
 8002de0:	2301      	movs	r3, #1
 8002de2:	76fb      	strb	r3, [r7, #27]
 8002de4:	e0e7      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002de6:	2302      	movs	r3, #2
 8002de8:	76fb      	strb	r3, [r7, #27]
 8002dea:	e0e4      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002dec:	2304      	movs	r3, #4
 8002dee:	76fb      	strb	r3, [r7, #27]
 8002df0:	e0e1      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002df2:	2308      	movs	r3, #8
 8002df4:	76fb      	strb	r3, [r7, #27]
 8002df6:	e0de      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002df8:	2310      	movs	r3, #16
 8002dfa:	76fb      	strb	r3, [r7, #27]
 8002dfc:	e0db      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a86      	ldr	r2, [pc, #536]	; (800301c <UART_SetConfig+0x300>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d132      	bne.n	8002e6e <UART_SetConfig+0x152>
 8002e08:	4b83      	ldr	r3, [pc, #524]	; (8003018 <UART_SetConfig+0x2fc>)
 8002e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d828      	bhi.n	8002e68 <UART_SetConfig+0x14c>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <UART_SetConfig+0x100>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e51 	.word	0x08002e51
 8002e20:	08002e69 	.word	0x08002e69
 8002e24:	08002e69 	.word	0x08002e69
 8002e28:	08002e69 	.word	0x08002e69
 8002e2c:	08002e5d 	.word	0x08002e5d
 8002e30:	08002e69 	.word	0x08002e69
 8002e34:	08002e69 	.word	0x08002e69
 8002e38:	08002e69 	.word	0x08002e69
 8002e3c:	08002e57 	.word	0x08002e57
 8002e40:	08002e69 	.word	0x08002e69
 8002e44:	08002e69 	.word	0x08002e69
 8002e48:	08002e69 	.word	0x08002e69
 8002e4c:	08002e63 	.word	0x08002e63
 8002e50:	2300      	movs	r3, #0
 8002e52:	76fb      	strb	r3, [r7, #27]
 8002e54:	e0af      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e56:	2302      	movs	r3, #2
 8002e58:	76fb      	strb	r3, [r7, #27]
 8002e5a:	e0ac      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	76fb      	strb	r3, [r7, #27]
 8002e60:	e0a9      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e62:	2308      	movs	r3, #8
 8002e64:	76fb      	strb	r3, [r7, #27]
 8002e66:	e0a6      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	e0a3      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6b      	ldr	r2, [pc, #428]	; (8003020 <UART_SetConfig+0x304>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d120      	bne.n	8002eba <UART_SetConfig+0x19e>
 8002e78:	4b67      	ldr	r3, [pc, #412]	; (8003018 <UART_SetConfig+0x2fc>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e82:	2b30      	cmp	r3, #48	; 0x30
 8002e84:	d013      	beq.n	8002eae <UART_SetConfig+0x192>
 8002e86:	2b30      	cmp	r3, #48	; 0x30
 8002e88:	d814      	bhi.n	8002eb4 <UART_SetConfig+0x198>
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d009      	beq.n	8002ea2 <UART_SetConfig+0x186>
 8002e8e:	2b20      	cmp	r3, #32
 8002e90:	d810      	bhi.n	8002eb4 <UART_SetConfig+0x198>
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <UART_SetConfig+0x180>
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d006      	beq.n	8002ea8 <UART_SetConfig+0x18c>
 8002e9a:	e00b      	b.n	8002eb4 <UART_SetConfig+0x198>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	76fb      	strb	r3, [r7, #27]
 8002ea0:	e089      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	76fb      	strb	r3, [r7, #27]
 8002ea6:	e086      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	76fb      	strb	r3, [r7, #27]
 8002eac:	e083      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eae:	2308      	movs	r3, #8
 8002eb0:	76fb      	strb	r3, [r7, #27]
 8002eb2:	e080      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eb4:	2310      	movs	r3, #16
 8002eb6:	76fb      	strb	r3, [r7, #27]
 8002eb8:	e07d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a59      	ldr	r2, [pc, #356]	; (8003024 <UART_SetConfig+0x308>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d120      	bne.n	8002f06 <UART_SetConfig+0x1ea>
 8002ec4:	4b54      	ldr	r3, [pc, #336]	; (8003018 <UART_SetConfig+0x2fc>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ece:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed0:	d013      	beq.n	8002efa <UART_SetConfig+0x1de>
 8002ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8002ed4:	d814      	bhi.n	8002f00 <UART_SetConfig+0x1e4>
 8002ed6:	2b80      	cmp	r3, #128	; 0x80
 8002ed8:	d009      	beq.n	8002eee <UART_SetConfig+0x1d2>
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d810      	bhi.n	8002f00 <UART_SetConfig+0x1e4>
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <UART_SetConfig+0x1cc>
 8002ee2:	2b40      	cmp	r3, #64	; 0x40
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x1d8>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x1e4>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	76fb      	strb	r3, [r7, #27]
 8002eec:	e063      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	76fb      	strb	r3, [r7, #27]
 8002ef2:	e060      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	76fb      	strb	r3, [r7, #27]
 8002ef8:	e05d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002efa:	2308      	movs	r3, #8
 8002efc:	76fb      	strb	r3, [r7, #27]
 8002efe:	e05a      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f00:	2310      	movs	r3, #16
 8002f02:	76fb      	strb	r3, [r7, #27]
 8002f04:	e057      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a47      	ldr	r2, [pc, #284]	; (8003028 <UART_SetConfig+0x30c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d125      	bne.n	8002f5c <UART_SetConfig+0x240>
 8002f10:	4b41      	ldr	r3, [pc, #260]	; (8003018 <UART_SetConfig+0x2fc>)
 8002f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f1e:	d017      	beq.n	8002f50 <UART_SetConfig+0x234>
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d817      	bhi.n	8002f56 <UART_SetConfig+0x23a>
 8002f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f2a:	d00b      	beq.n	8002f44 <UART_SetConfig+0x228>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d811      	bhi.n	8002f56 <UART_SetConfig+0x23a>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <UART_SetConfig+0x222>
 8002f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f3a:	d006      	beq.n	8002f4a <UART_SetConfig+0x22e>
 8002f3c:	e00b      	b.n	8002f56 <UART_SetConfig+0x23a>
 8002f3e:	2300      	movs	r3, #0
 8002f40:	76fb      	strb	r3, [r7, #27]
 8002f42:	e038      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f44:	2302      	movs	r3, #2
 8002f46:	76fb      	strb	r3, [r7, #27]
 8002f48:	e035      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	76fb      	strb	r3, [r7, #27]
 8002f4e:	e032      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f50:	2308      	movs	r3, #8
 8002f52:	76fb      	strb	r3, [r7, #27]
 8002f54:	e02f      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f56:	2310      	movs	r3, #16
 8002f58:	76fb      	strb	r3, [r7, #27]
 8002f5a:	e02c      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <UART_SetConfig+0x2f4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d125      	bne.n	8002fb2 <UART_SetConfig+0x296>
 8002f66:	4b2c      	ldr	r3, [pc, #176]	; (8003018 <UART_SetConfig+0x2fc>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f74:	d017      	beq.n	8002fa6 <UART_SetConfig+0x28a>
 8002f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f7a:	d817      	bhi.n	8002fac <UART_SetConfig+0x290>
 8002f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f80:	d00b      	beq.n	8002f9a <UART_SetConfig+0x27e>
 8002f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f86:	d811      	bhi.n	8002fac <UART_SetConfig+0x290>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <UART_SetConfig+0x278>
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d006      	beq.n	8002fa0 <UART_SetConfig+0x284>
 8002f92:	e00b      	b.n	8002fac <UART_SetConfig+0x290>
 8002f94:	2300      	movs	r3, #0
 8002f96:	76fb      	strb	r3, [r7, #27]
 8002f98:	e00d      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	76fb      	strb	r3, [r7, #27]
 8002f9e:	e00a      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fa0:	2304      	movs	r3, #4
 8002fa2:	76fb      	strb	r3, [r7, #27]
 8002fa4:	e007      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	76fb      	strb	r3, [r7, #27]
 8002faa:	e004      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fac:	2310      	movs	r3, #16
 8002fae:	76fb      	strb	r3, [r7, #27]
 8002fb0:	e001      	b.n	8002fb6 <UART_SetConfig+0x29a>
 8002fb2:	2310      	movs	r3, #16
 8002fb4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a15      	ldr	r2, [pc, #84]	; (8003010 <UART_SetConfig+0x2f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 809f 	bne.w	8003100 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fc2:	7efb      	ldrb	r3, [r7, #27]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d837      	bhi.n	8003038 <UART_SetConfig+0x31c>
 8002fc8:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <UART_SetConfig+0x2b4>)
 8002fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fce:	bf00      	nop
 8002fd0:	08002ff5 	.word	0x08002ff5
 8002fd4:	08003039 	.word	0x08003039
 8002fd8:	08002ffd 	.word	0x08002ffd
 8002fdc:	08003039 	.word	0x08003039
 8002fe0:	08003003 	.word	0x08003003
 8002fe4:	08003039 	.word	0x08003039
 8002fe8:	08003039 	.word	0x08003039
 8002fec:	08003039 	.word	0x08003039
 8002ff0:	08003031 	.word	0x08003031
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff4:	f7ff f930 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8002ff8:	6178      	str	r0, [r7, #20]
        break;
 8002ffa:	e022      	b.n	8003042 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <UART_SetConfig+0x310>)
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	e01f      	b.n	8003042 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003002:	f7ff f8bb 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003006:	6178      	str	r0, [r7, #20]
        break;
 8003008:	e01b      	b.n	8003042 <UART_SetConfig+0x326>
 800300a:	bf00      	nop
 800300c:	cfff69f3 	.word	0xcfff69f3
 8003010:	40008000 	.word	0x40008000
 8003014:	40013800 	.word	0x40013800
 8003018:	40021000 	.word	0x40021000
 800301c:	40004400 	.word	0x40004400
 8003020:	40004800 	.word	0x40004800
 8003024:	40004c00 	.word	0x40004c00
 8003028:	40005000 	.word	0x40005000
 800302c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003034:	617b      	str	r3, [r7, #20]
        break;
 8003036:	e004      	b.n	8003042 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	76bb      	strb	r3, [r7, #26]
        break;
 8003040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 811b 	beq.w	8003280 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	4a96      	ldr	r2, [pc, #600]	; (80032a8 <UART_SetConfig+0x58c>)
 8003050:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003054:	461a      	mov	r2, r3
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fbb3 f3f2 	udiv	r3, r3, r2
 800305c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	68ba      	ldr	r2, [r7, #8]
 800306a:	429a      	cmp	r2, r3
 800306c:	d305      	bcc.n	800307a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d902      	bls.n	8003080 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	76bb      	strb	r3, [r7, #26]
 800307e:	e0ff      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	4618      	mov	r0, r3
 8003084:	f04f 0100 	mov.w	r1, #0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	4a86      	ldr	r2, [pc, #536]	; (80032a8 <UART_SetConfig+0x58c>)
 800308e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003092:	b29a      	uxth	r2, r3
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	f7fd fbdc 	bl	8000854 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	f04f 0300 	mov.w	r3, #0
 80030ac:	020b      	lsls	r3, r1, #8
 80030ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030b2:	0202      	lsls	r2, r0, #8
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	6849      	ldr	r1, [r1, #4]
 80030b8:	0849      	lsrs	r1, r1, #1
 80030ba:	4608      	mov	r0, r1
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	1814      	adds	r4, r2, r0
 80030c2:	eb43 0501 	adc.w	r5, r3, r1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	4620      	mov	r0, r4
 80030d2:	4629      	mov	r1, r5
 80030d4:	f7fd fbbe 	bl	8000854 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e6:	d308      	bcc.n	80030fa <UART_SetConfig+0x3de>
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d204      	bcs.n	80030fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	60da      	str	r2, [r3, #12]
 80030f8:	e0c2      	b.n	8003280 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	76bb      	strb	r3, [r7, #26]
 80030fe:	e0bf      	b.n	8003280 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003108:	d165      	bne.n	80031d6 <UART_SetConfig+0x4ba>
  {
    switch (clocksource)
 800310a:	7efb      	ldrb	r3, [r7, #27]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d828      	bhi.n	8003162 <UART_SetConfig+0x446>
 8003110:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0x3fc>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800313d 	.word	0x0800313d
 800311c:	08003145 	.word	0x08003145
 8003120:	0800314d 	.word	0x0800314d
 8003124:	08003163 	.word	0x08003163
 8003128:	08003153 	.word	0x08003153
 800312c:	08003163 	.word	0x08003163
 8003130:	08003163 	.word	0x08003163
 8003134:	08003163 	.word	0x08003163
 8003138:	0800315b 	.word	0x0800315b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f88c 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 8003140:	6178      	str	r0, [r7, #20]
        break;
 8003142:	e013      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003144:	f7ff f89e 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003148:	6178      	str	r0, [r7, #20]
        break;
 800314a:	e00f      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800314c:	4b57      	ldr	r3, [pc, #348]	; (80032ac <UART_SetConfig+0x590>)
 800314e:	617b      	str	r3, [r7, #20]
        break;
 8003150:	e00c      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003152:	f7ff f813 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003156:	6178      	str	r0, [r7, #20]
        break;
 8003158:	e008      	b.n	800316c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315e:	617b      	str	r3, [r7, #20]
        break;
 8003160:	e004      	b.n	800316c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	76bb      	strb	r3, [r7, #26]
        break;
 800316a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8086 	beq.w	8003280 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	4a4b      	ldr	r2, [pc, #300]	; (80032a8 <UART_SetConfig+0x58c>)
 800317a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317e:	461a      	mov	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fbb3 f3f2 	udiv	r3, r3, r2
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	085b      	lsrs	r3, r3, #1
 800318e:	441a      	add	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	fbb2 f3f3 	udiv	r3, r2, r3
 8003198:	b29b      	uxth	r3, r3
 800319a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b0f      	cmp	r3, #15
 80031a0:	d916      	bls.n	80031d0 <UART_SetConfig+0x4b4>
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a8:	d212      	bcs.n	80031d0 <UART_SetConfig+0x4b4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	f023 030f 	bic.w	r3, r3, #15
 80031b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	085b      	lsrs	r3, r3, #1
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	b29a      	uxth	r2, r3
 80031c0:	89fb      	ldrh	r3, [r7, #14]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	89fa      	ldrh	r2, [r7, #14]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	e057      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	76bb      	strb	r3, [r7, #26]
 80031d4:	e054      	b.n	8003280 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d6:	7efb      	ldrb	r3, [r7, #27]
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d828      	bhi.n	800322e <UART_SetConfig+0x512>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x4c8>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003219 	.word	0x08003219
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	0800322f 	.word	0x0800322f
 8003200:	0800322f 	.word	0x0800322f
 8003204:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff f826 	bl	8002258 <HAL_RCC_GetPCLK1Freq>
 800320c:	6178      	str	r0, [r7, #20]
        break;
 800320e:	e013      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff f838 	bl	8002284 <HAL_RCC_GetPCLK2Freq>
 8003214:	6178      	str	r0, [r7, #20]
        break;
 8003216:	e00f      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b24      	ldr	r3, [pc, #144]	; (80032ac <UART_SetConfig+0x590>)
 800321a:	617b      	str	r3, [r7, #20]
        break;
 800321c:	e00c      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7fe ffad 	bl	800217c <HAL_RCC_GetSysClockFreq>
 8003222:	6178      	str	r0, [r7, #20]
        break;
 8003224:	e008      	b.n	8003238 <UART_SetConfig+0x51c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	617b      	str	r3, [r7, #20]
        break;
 800322c:	e004      	b.n	8003238 <UART_SetConfig+0x51c>
      default:
        pclk = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	76bb      	strb	r3, [r7, #26]
        break;
 8003236:	bf00      	nop
    }

    if (pclk != 0U)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	4a19      	ldr	r2, [pc, #100]	; (80032a8 <UART_SetConfig+0x58c>)
 8003244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003248:	461a      	mov	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	085b      	lsrs	r3, r3, #1
 8003256:	441a      	add	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d908      	bls.n	800327c <UART_SetConfig+0x560>
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d204      	bcs.n	800327c <UART_SetConfig+0x560>
      {
        huart->Instance->BRR = usartdiv;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e001      	b.n	8003280 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800329c:	7ebb      	ldrb	r3, [r7, #26]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3720      	adds	r7, #32
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bdb0      	pop	{r4, r5, r7, pc}
 80032a6:	bf00      	nop
 80032a8:	0801655c 	.word	0x0801655c
 80032ac:	00f42400 	.word	0x00f42400

080032b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00a      	beq.n	800331e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00a      	beq.n	8003362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01a      	beq.n	80033c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ae:	d10a      	bne.n	80033c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00a      	beq.n	80033e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af02      	add	r7, sp, #8
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003404:	f7fd fe18 	bl	8001038 <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b08      	cmp	r3, #8
 8003416:	d10e      	bne.n	8003436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800341c:	9300      	str	r3, [sp, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f82f 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e025      	b.n	8003482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d10e      	bne.n	8003462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f819 	bl	800348a <UART_WaitOnFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e00f      	b.n	8003482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2220      	movs	r2, #32
 8003466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2220      	movs	r2, #32
 800346e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349a:	e062      	b.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a2:	d05e      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fd fdc8 	bl	8001038 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d302      	bcc.n	80034ba <UART_WaitOnFlagUntilTimeout+0x30>
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d11d      	bne.n	80034f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0201 	bic.w	r2, r2, #1
 80034d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2220      	movs	r2, #32
 80034de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e045      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d02e      	beq.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800350e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003512:	d126      	bne.n	8003562 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800351c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800352c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e00f      	b.n	8003582 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	4013      	ands	r3, r2
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	bf0c      	ite	eq
 8003572:	2301      	moveq	r3, #1
 8003574:	2300      	movne	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	429a      	cmp	r2, r3
 800357e:	d08d      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}

0800358a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800358a:	b480      	push	{r7}
 800358c:	b083      	sub	sp, #12
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035a0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6812      	ldr	r2, [r2, #0]
 80035ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d107      	bne.n	80035ce <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0210 	bic.w	r2, r2, #16
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	671a      	str	r2, [r3, #112]	; 0x70
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b084      	sub	sp, #16
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f7ff fb6f 	bl	8002cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003612:	bf00      	nop
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003630:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff fb4b 	bl	8002cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003646:	bf00      	nop
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800368a:	b480      	push	{r7}
 800368c:	b085      	sub	sp, #20
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800369c:	2302      	movs	r3, #2
 800369e:	e027      	b.n	80036f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80036ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003710:	2302      	movs	r3, #2
 8003712:	e02d      	b.n	8003770 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	683a      	ldr	r2, [r7, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f84f 	bl	80037f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2220      	movs	r2, #32
 8003762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800378c:	2302      	movs	r3, #2
 800378e:	e02d      	b.n	80037ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 f811 	bl	80037f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003814:	e031      	b.n	800387a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003816:	2308      	movs	r3, #8
 8003818:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800381a:	2308      	movs	r3, #8
 800381c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	0e5b      	lsrs	r3, r3, #25
 8003826:	b2db      	uxtb	r3, r3
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	0f5b      	lsrs	r3, r3, #29
 8003836:	b2db      	uxtb	r3, r3
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800383e:	7bbb      	ldrb	r3, [r7, #14]
 8003840:	7b3a      	ldrb	r2, [r7, #12]
 8003842:	4911      	ldr	r1, [pc, #68]	; (8003888 <UARTEx_SetNbDataToProcess+0x94>)
 8003844:	5c8a      	ldrb	r2, [r1, r2]
 8003846:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800384a:	7b3a      	ldrb	r2, [r7, #12]
 800384c:	490f      	ldr	r1, [pc, #60]	; (800388c <UARTEx_SetNbDataToProcess+0x98>)
 800384e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003850:	fb93 f3f2 	sdiv	r3, r3, r2
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	7b7a      	ldrb	r2, [r7, #13]
 8003860:	4909      	ldr	r1, [pc, #36]	; (8003888 <UARTEx_SetNbDataToProcess+0x94>)
 8003862:	5c8a      	ldrb	r2, [r1, r2]
 8003864:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003868:	7b7a      	ldrb	r2, [r7, #13]
 800386a:	4908      	ldr	r1, [pc, #32]	; (800388c <UARTEx_SetNbDataToProcess+0x98>)
 800386c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800386e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800387a:	bf00      	nop
 800387c:	3714      	adds	r7, #20
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	08016574 	.word	0x08016574
 800388c:	0801657c 	.word	0x0801657c

08003890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003894:	f7fd fb6b 	bl	8000f6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003898:	f000 f80b 	bl	80038b2 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800389c:	f000 f940 	bl	8003b20 <_ZL12MX_GPIO_Initv>
  MX_LPUART1_UART_Init();
 80038a0:	f000 f880 	bl	80039a4 <_ZL20MX_LPUART1_UART_Initv>
  MX_USART1_UART_Init();
 80038a4:	f000 f8dc 	bl	8003a60 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const char * av_override[] = { };
  CommandLineTestRunner::RunAllTests(0, av_override);
 80038a8:	4639      	mov	r1, r7
 80038aa:	2000      	movs	r0, #0
 80038ac:	f000 fa22 	bl	8003cf4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>
  while (1)
 80038b0:	e7fe      	b.n	80038b0 <main+0x20>

080038b2 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b0a8      	sub	sp, #160	; 0xa0
 80038b6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038b8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80038bc:	2238      	movs	r2, #56	; 0x38
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f00d ffcf 	bl	8011864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d6:	463b      	mov	r3, r7
 80038d8:	2254      	movs	r2, #84	; 0x54
 80038da:	2100      	movs	r1, #0
 80038dc:	4618      	mov	r0, r3
 80038de:	f00d ffc1 	bl	8011864 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80038e2:	2000      	movs	r0, #0
 80038e4:	f7fd ff42 	bl	800176c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038e8:	2302      	movs	r3, #2
 80038ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038f0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038f6:	2302      	movs	r3, #2
 80038f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038fc:	2302      	movs	r3, #2
 80038fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003902:	2304      	movs	r3, #4
 8003904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003908:	2355      	movs	r3, #85	; 0x55
 800390a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800390e:	2302      	movs	r3, #2
 8003910:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003914:	2302      	movs	r3, #2
 8003916:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800391a:	2302      	movs	r3, #2
 800391c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003920:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd ffd5 	bl	80018d4 <HAL_RCC_OscConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800393a:	f000 f961 	bl	8003c00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800393e:	230f      	movs	r3, #15
 8003940:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003942:	2303      	movs	r3, #3
 8003944:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003946:	2300      	movs	r3, #0
 8003948:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800394a:	2300      	movs	r3, #0
 800394c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800394e:	2300      	movs	r3, #0
 8003950:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003952:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003956:	2104      	movs	r1, #4
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe fad3 	bl	8001f04 <HAL_RCC_ClockConfig>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <_Z18SystemClock_Configv+0xc0>
  {
    Error_Handler();
 800396e:	f000 f947 	bl	8003c00 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1;
 8003972:	2321      	movs	r3, #33	; 0x21
 8003974:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800397e:	463b      	mov	r3, r7
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fcdb 	bl	800233c <HAL_RCCEx_PeriphCLKConfig>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf14      	ite	ne
 800398c:	2301      	movne	r3, #1
 800398e:	2300      	moveq	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8003996:	f000 f933 	bl	8003c00 <Error_Handler>
  }
}
 800399a:	bf00      	nop
 800399c:	37a0      	adds	r7, #160	; 0xa0
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <_ZL20MX_LPUART1_UART_Initv>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80039a8:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039aa:	4a2c      	ldr	r2, [pc, #176]	; (8003a5c <_ZL20MX_LPUART1_UART_Initv+0xb8>)
 80039ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80039ae:	4b2a      	ldr	r3, [pc, #168]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039b6:	4b28      	ldr	r3, [pc, #160]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80039bc:	4b26      	ldr	r3, [pc, #152]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80039c2:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80039c8:	4b23      	ldr	r3, [pc, #140]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039ca:	220c      	movs	r2, #12
 80039cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ce:	4b22      	ldr	r3, [pc, #136]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039d4:	4b20      	ldr	r3, [pc, #128]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80039da:	4b1f      	ldr	r3, [pc, #124]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039dc:	2200      	movs	r2, #0
 80039de:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e0:	4b1d      	ldr	r3, [pc, #116]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80039e6:	481c      	ldr	r0, [pc, #112]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 80039e8:	f7fe fef4 	bl	80027d4 <HAL_UART_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	bf14      	ite	ne
 80039f2:	2301      	movne	r3, #1
 80039f4:	2300      	moveq	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <_ZL20MX_LPUART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80039fc:	f000 f900 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a00:	2100      	movs	r1, #0
 8003a02:	4815      	ldr	r0, [pc, #84]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a04:	f7ff fe7a 	bl	80036fc <HAL_UARTEx_SetTxFifoThreshold>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf14      	ite	ne
 8003a0e:	2301      	movne	r3, #1
 8003a10:	2300      	moveq	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <_ZL20MX_LPUART1_UART_Initv+0x78>
  {
    Error_Handler();
 8003a18:	f000 f8f2 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	480e      	ldr	r0, [pc, #56]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a20:	f7ff feaa 	bl	8003778 <HAL_UARTEx_SetRxFifoThreshold>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <_ZL20MX_LPUART1_UART_Initv+0x94>
  {
    Error_Handler();
 8003a34:	f000 f8e4 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003a38:	4807      	ldr	r0, [pc, #28]	; (8003a58 <_ZL20MX_LPUART1_UART_Initv+0xb4>)
 8003a3a:	f7ff fe26 	bl	800368a <HAL_UARTEx_DisableFifoMode>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <_ZL20MX_LPUART1_UART_Initv+0xae>
  {
    Error_Handler();
 8003a4e:	f000 f8d7 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000358 	.word	0x20000358
 8003a5c:	40008000 	.word	0x40008000

08003a60 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a64:	4b2c      	ldr	r3, [pc, #176]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a66:	4a2d      	ldr	r2, [pc, #180]	; (8003b1c <_ZL19MX_USART1_UART_Initv+0xbc>)
 8003a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a72:	4b29      	ldr	r3, [pc, #164]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a78:	4b27      	ldr	r3, [pc, #156]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a7e:	4b26      	ldr	r3, [pc, #152]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a84:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a86:	220c      	movs	r2, #12
 8003a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8a:	4b23      	ldr	r3, [pc, #140]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a90:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003aa8:	481b      	ldr	r0, [pc, #108]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003aaa:	f7fe fe93 	bl	80027d4 <HAL_UART_Init>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 8003abe:	f000 f89f 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4814      	ldr	r0, [pc, #80]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ac6:	f7ff fe19 	bl	80036fc <HAL_UARTEx_SetTxFifoThreshold>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8003ada:	f000 f891 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ade:	2100      	movs	r1, #0
 8003ae0:	480d      	ldr	r0, [pc, #52]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003ae2:	f7ff fe49 	bl	8003778 <HAL_UARTEx_SetRxFifoThreshold>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8003af6:	f000 f883 	bl	8003c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003afa:	4807      	ldr	r0, [pc, #28]	; (8003b18 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8003afc:	f7ff fdc5 	bl	800368a <HAL_UARTEx_DisableFifoMode>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8003b10:	f000 f876 	bl	8003c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b14:	bf00      	nop
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	200003e8 	.word	0x200003e8
 8003b1c:	40013800 	.word	0x40013800

08003b20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b08a      	sub	sp, #40	; 0x28
 8003b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b26:	f107 0314 	add.w	r3, r7, #20
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	60da      	str	r2, [r3, #12]
 8003b34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b3a:	4a2e      	ldr	r2, [pc, #184]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b3c:	f043 0304 	orr.w	r3, r3, #4
 8003b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b42:	4b2c      	ldr	r3, [pc, #176]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	f003 0304 	and.w	r3, r3, #4
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b4e:	4b29      	ldr	r3, [pc, #164]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	4a28      	ldr	r2, [pc, #160]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b54:	f043 0320 	orr.w	r3, r3, #32
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0320 	and.w	r3, r3, #32
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b66:	4b23      	ldr	r3, [pc, #140]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	4a22      	ldr	r2, [pc, #136]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b72:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b84:	f043 0302 	orr.w	r3, r3, #2
 8003b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <_ZL12MX_GPIO_Initv+0xd4>)
 8003b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2120      	movs	r1, #32
 8003b9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b9e:	f7fd fda9 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ba2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <_ZL12MX_GPIO_Initv+0xd8>)
 8003baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4811      	ldr	r0, [pc, #68]	; (8003bfc <_ZL12MX_GPIO_Initv+0xdc>)
 8003bb8:	f7fd fc1a 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003bbc:	2320      	movs	r3, #32
 8003bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003bcc:	f107 0314 	add.w	r3, r7, #20
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bd6:	f7fd fc0b 	bl	80013f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	2100      	movs	r1, #0
 8003bde:	2028      	movs	r0, #40	; 0x28
 8003be0:	f7fd fb11 	bl	8001206 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003be4:	2028      	movs	r0, #40	; 0x28
 8003be6:	f7fd fb28 	bl	800123a <HAL_NVIC_EnableIRQ>

}
 8003bea:	bf00      	nop
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	10110000 	.word	0x10110000
 8003bfc:	48000800 	.word	0x48000800

08003c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c04:	b672      	cpsid	i
}
 8003c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c08:	e7fe      	b.n	8003c08 <Error_Handler+0x8>

08003c0a <_ZNK10TestResult11getRunCountEv>:

    size_t getTestCount() const
    {
        return testCount_;
    }
    size_t getRunCount() const
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
    {
        return runCount_;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68db      	ldr	r3, [r3, #12]
    }
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_ZNK10TestResult15getIgnoredCountEv>:
    }
    size_t getFilteredOutCount() const
    {
        return filteredOutCount_;
    }
    size_t getIgnoredCount() const
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
    {
        return ignoredCount_;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
    }
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <_ZNK10TestResult15getFailureCountEv>:
    size_t getFailureCount() const
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
    {
        return failureCount_;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <_ZNK10TestResult9isFailureEv>:

    bool isFailure() const
 8003c52:	b590      	push	{r4, r7, lr}
 8003c54:	b083      	sub	sp, #12
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
    {
        return (getFailureCount() != 0) || (getRunCount() + getIgnoredCount() == 0);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff ffed 	bl	8003c3a <_ZNK10TestResult15getFailureCountEv>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10a      	bne.n	8003c7c <_ZNK10TestResult9isFailureEv+0x2a>
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffcf 	bl	8003c0a <_ZNK10TestResult11getRunCountEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ffd7 	bl	8003c22 <_ZNK10TestResult15getIgnoredCountEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4423      	add	r3, r4
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <_ZNK10TestResult9isFailureEv+0x2e>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <_ZNK10TestResult9isFailureEv+0x30>
 8003c80:	2300      	movs	r3, #0
    }
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd90      	pop	{r4, r7, pc}
	...

08003c8c <_ZN17ConsoleTestOutputC1Ev>:
///////////////////////////////////////////////////////////////////////////////

class ConsoleTestOutput: public TestOutput
{
public:
    explicit ConsoleTestOutput()
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f005 fffe 	bl	8009c98 <_ZN10TestOutputC1Ev>
 8003c9c:	4a03      	ldr	r2, [pc, #12]	; (8003cac <_ZN17ConsoleTestOutputC1Ev+0x20>)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	601a      	str	r2, [r3, #0]
    }
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	08016aac 	.word	0x08016aac

08003cb0 <_ZN17ConsoleTestOutputD1Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    {
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <_ZN17ConsoleTestOutputD1Ev+0x20>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f006 f807 	bl	8009cd4 <_ZN10TestOutputD1Ev>
    }
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	08016aac 	.word	0x08016aac

08003cd4 <_ZN17ConsoleTestOutputD0Ev>:
    virtual ~ConsoleTestOutput() _destructor_override
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
    }
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7ff ffe7 	bl	8003cb0 <_ZN17ConsoleTestOutputD1Ev>
 8003ce2:	2110      	movs	r1, #16
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f001 fce7 	bl	80056b8 <_ZdlPvj>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc>:
{
    return RunAllTests(ac, (const char *const *) av);
}

int CommandLineTestRunner::RunAllTests(int ac, const char *const *av)
{
 8003cf4:	b5b0      	push	{r4, r5, r7, lr}
 8003cf6:	b098      	sub	sp, #96	; 0x60
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
    int result = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	65fb      	str	r3, [r7, #92]	; 0x5c
    ConsoleTestOutput backupOutput;
 8003d02:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff ffc0 	bl	8003c8c <_ZN17ConsoleTestOutputC1Ev>

    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8003d0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d10:	4935      	ldr	r1, [pc, #212]	; (8003de8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8003d12:	4618      	mov	r0, r3
 8003d14:	f002 fba5 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8003d18:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003d1c:	f107 0318 	add.w	r3, r7, #24
 8003d20:	2200      	movs	r2, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f001 ff6a 	bl	8005bfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>
 8003d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f002 ff50 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    memLeakWarn.destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(true);
 8003d32:	f107 0318 	add.w	r3, r7, #24
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f001 ff2f 	bl	8005b9c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>
    TestRegistry::getCurrentRegistry()->installPlugin(&memLeakWarn);
 8003d3e:	f007 fd39 	bl	800b7b4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8003d42:	4603      	mov	r3, r0
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	3234      	adds	r2, #52	; 0x34
 8003d48:	6812      	ldr	r2, [r2, #0]
 8003d4a:	f107 0118 	add.w	r1, r7, #24
 8003d4e:	4618      	mov	r0, r3
 8003d50:	4790      	blx	r2

    {
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8003d52:	f007 fd2f 	bl	800b7b4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f107 0008 	add.w	r0, r7, #8
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	f000 f844 	bl	8003dec <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>
        result = runner.runAllTestsMain();
 8003d64:	f107 0308 	add.w	r3, r7, #8
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 f899 	bl	8003ea0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>
 8003d6e:	65f8      	str	r0, [r7, #92]	; 0x5c
        CommandLineTestRunner runner(ac, av, TestRegistry::getCurrentRegistry());
 8003d70:	f107 0308 	add.w	r3, r7, #8
 8003d74:	4618      	mov	r0, r3
 8003d76:	f000 f863 	bl	8003e40 <_ZN21CommandLineTestRunnerD1Ev>
    }

    if (result == 0) {
 8003d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10c      	bne.n	8003d9a <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xa6>
        backupOutput << memLeakWarn.FinalReport(0);
 8003d80:	f107 0318 	add.w	r3, r7, #24
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f002 f83a 	bl	8005e00 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f006 f83f 	bl	8009e18 <_ZlsR10TestOutputPKc>
    }
    TestRegistry::getCurrentRegistry()->removePluginByName(DEF_PLUGIN_MEM_LEAK);
 8003d9a:	f007 fd0b 	bl	800b7b4 <_ZN12TestRegistry18getCurrentRegistryEv>
 8003d9e:	4604      	mov	r4, r0
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	3344      	adds	r3, #68	; 0x44
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003daa:	490f      	ldr	r1, [pc, #60]	; (8003de8 <_ZN21CommandLineTestRunner11RunAllTestsEiPKPKc+0xf4>)
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 fb58 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8003db2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003db6:	4619      	mov	r1, r3
 8003db8:	4620      	mov	r0, r4
 8003dba:	47a8      	blx	r5
 8003dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f002 ff06 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return result;
 8003dc6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    MemoryLeakWarningPlugin memLeakWarn(DEF_PLUGIN_MEM_LEAK);
 8003dc8:	f107 0318 	add.w	r3, r7, #24
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 ff4d 	bl	8005c6c <_ZN23MemoryLeakWarningPluginD1Ev>
    ConsoleTestOutput backupOutput;
 8003dd2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff ff6a 	bl	8003cb0 <_ZN17ConsoleTestOutputD1Ev>
    return result;
 8003ddc:	4623      	mov	r3, r4
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3760      	adds	r7, #96	; 0x60
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdb0      	pop	{r4, r5, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	08014684 	.word	0x08014684

08003dec <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry>:

CommandLineTestRunner::CommandLineTestRunner(int ac, const char *const *av, TestRegistry* registry) :
 8003dec:	b590      	push	{r4, r7, lr}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
    output_(NULLPTR), arguments_(NULLPTR), registry_(registry)
 8003dfa:	4a0f      	ldr	r2, [pc, #60]	; (8003e38 <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x4c>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	60da      	str	r2, [r3, #12]
{
    arguments_ = new CommandLineArguments(ac, av);
 8003e12:	2241      	movs	r2, #65	; 0x41
 8003e14:	4909      	ldr	r1, [pc, #36]	; (8003e3c <_ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry+0x50>)
 8003e16:	2038      	movs	r0, #56	; 0x38
 8003e18:	f001 fc3a 	bl	8005690 <_ZnwjPKci>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4620      	mov	r0, r4
 8003e24:	f00a f9a2 	bl	800e16c <_ZN20CommandLineArgumentsC1EiPKPKc>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	609c      	str	r4, [r3, #8]
}
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd90      	pop	{r4, r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0801658c 	.word	0x0801658c
 8003e3c:	08014698 	.word	0x08014698

08003e40 <_ZN21CommandLineTestRunnerD1Ev>:

CommandLineTestRunner::~CommandLineTestRunner()
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	4a0c      	ldr	r2, [pc, #48]	; (8003e7c <_ZN21CommandLineTestRunnerD1Ev+0x3c>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
{
    delete arguments_;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d004      	beq.n	8003e60 <_ZN21CommandLineTestRunnerD1Ev+0x20>
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	3204      	adds	r2, #4
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	4790      	blx	r2
    delete output_;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d004      	beq.n	8003e72 <_ZN21CommandLineTestRunnerD1Ev+0x32>
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	3204      	adds	r2, #4
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4790      	blx	r2
}
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	0801658c 	.word	0x0801658c

08003e80 <_ZN21CommandLineTestRunnerD0Ev>:
CommandLineTestRunner::~CommandLineTestRunner()
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
}
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff ffd9 	bl	8003e40 <_ZN21CommandLineTestRunnerD1Ev>
 8003e8e:	2110      	movs	r1, #16
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 fc11 	bl	80056b8 <_ZdlPvj>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZN21CommandLineTestRunner15runAllTestsMainEv>:

int CommandLineTestRunner::runAllTestsMain()
{
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b08c      	sub	sp, #48	; 0x30
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
    int testResult = 1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	62fb      	str	r3, [r7, #44]	; 0x2c

    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	4929      	ldr	r1, [pc, #164]	; (8003f58 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f002 fad5 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8003eb8:	f107 021c 	add.w	r2, r7, #28
 8003ebc:	f107 0308 	add.w	r3, r7, #8
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f007 f834 	bl	800af30 <_ZN16SetPointerPluginC1ERK12SimpleString>
 8003ec8:	f107 031c 	add.w	r3, r7, #28
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f002 fe80 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    registry_->installPlugin(&pPlugin);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3334      	adds	r3, #52	; 0x34
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f107 0108 	add.w	r1, r7, #8
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	4798      	blx	r3

    if (parseArguments(registry_->getFirstPlugin()))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	333c      	adds	r3, #60	; 0x3c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
 8003efa:	4603      	mov	r3, r0
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 fa3e 	bl	8004380 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0x72>
        testResult = runAllTests();
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8ac 	bl	8004068 <_ZN21CommandLineTestRunner11runAllTestsEv>
 8003f10:	62f8      	str	r0, [r7, #44]	; 0x2c

    registry_->removePluginByName(DEF_PLUGIN_SET_POINTER);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68dd      	ldr	r5, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3344      	adds	r3, #68	; 0x44
 8003f1e:	681c      	ldr	r4, [r3, #0]
 8003f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f24:	490c      	ldr	r1, [pc, #48]	; (8003f58 <_ZN21CommandLineTestRunner15runAllTestsMainEv+0xb8>)
 8003f26:	4618      	mov	r0, r3
 8003f28:	f002 fa9b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8003f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f30:	4619      	mov	r1, r3
 8003f32:	4628      	mov	r0, r5
 8003f34:	47a0      	blx	r4
 8003f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f002 fe49 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return testResult;
 8003f40:	6afc      	ldr	r4, [r7, #44]	; 0x2c
    SetPointerPlugin pPlugin(DEF_PLUGIN_SET_POINTER);
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 faaa 	bl	80044a0 <_ZN16SetPointerPluginD1Ev>
    return testResult;
 8003f4c:	4623      	mov	r3, r4
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3730      	adds	r7, #48	; 0x30
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bdb0      	pop	{r4, r5, r7, pc}
 8003f56:	bf00      	nop
 8003f58:	080146bc 	.word	0x080146bc

08003f5c <_ZN21CommandLineTestRunner17initializeTestRunEv>:

void CommandLineTestRunner::initializeTestRun()
{
 8003f5c:	b5b0      	push	{r4, r5, r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    registry_->setGroupFilters(arguments_->getGroupFilters());
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68dd      	ldr	r5, [r3, #12]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3330      	adds	r3, #48	; 0x30
 8003f70:	681c      	ldr	r4, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f00a fe38 	bl	800ebec <_ZNK20CommandLineArguments15getGroupFiltersEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4628      	mov	r0, r5
 8003f82:	47a0      	blx	r4
    registry_->setNameFilters(arguments_->getNameFilters());
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68dd      	ldr	r5, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	332c      	adds	r3, #44	; 0x2c
 8003f90:	681c      	ldr	r4, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f00a fe34 	bl	800ec04 <_ZNK20CommandLineArguments14getNameFiltersEv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47a0      	blx	r4

    if (arguments_->isVerbose()) output_->verbose(TestOutput::level_verbose);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f00a fd83 	bl	800eab4 <_ZNK20CommandLineArguments9isVerboseEv>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d009      	beq.n	8003fc8 <_ZN21CommandLineTestRunner17initializeTestRunEv+0x6c>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685a      	ldr	r2, [r3, #4]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3320      	adds	r3, #32
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4798      	blx	r3
    if (arguments_->isVeryVerbose()) output_->verbose(TestOutput::level_veryVerbose);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f00a fd7d 	bl	800eacc <_ZNK20CommandLineArguments13isVeryVerboseEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d009      	beq.n	8003fec <_ZN21CommandLineTestRunner17initializeTestRunEv+0x90>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3320      	adds	r3, #32
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	4610      	mov	r0, r2
 8003fea:	4798      	blx	r3
    if (arguments_->isColor()) output_->color();
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00a fd77 	bl	800eae4 <_ZNK20CommandLineArguments7isColorEv>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d008      	beq.n	800400e <_ZN21CommandLineTestRunner17initializeTestRunEv+0xb2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685a      	ldr	r2, [r3, #4]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4610      	mov	r0, r2
 800400c:	4798      	blx	r3
    if (arguments_->runTestsInSeperateProcess()) registry_->setRunTestsInSeperateProcess();
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4618      	mov	r0, r3
 8004014:	f00a fda2 	bl	800eb5c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <_ZN21CommandLineTestRunner17initializeTestRunEv+0xd4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	3360      	adds	r3, #96	; 0x60
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3
    if (arguments_->isRunIgnored()) registry_->setRunIgnored();
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	4618      	mov	r0, r3
 8004036:	f00a fd85 	bl	800eb44 <_ZNK20CommandLineArguments12isRunIgnoredEv>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <_ZN21CommandLineTestRunner17initializeTestRunEv+0xee>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4618      	mov	r0, r3
 8004046:	f007 fc31 	bl	800b8ac <_ZN12TestRegistry13setRunIgnoredEv>
    if (arguments_->isCrashingOnFail()) UtestShell::setCrashOnFail();
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f00a fda8 	bl	800eba4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <_ZN21CommandLineTestRunner17initializeTestRunEv+0x102>
 800405a:	f009 fc7d 	bl	800d958 <_ZN10UtestShell14setCrashOnFailEv>
}
 800405e:	bf00      	nop
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004068 <_ZN21CommandLineTestRunner11runAllTestsEv>:

int CommandLineTestRunner::runAllTests()
{
 8004068:	b5b0      	push	{r4, r5, r7, lr}
 800406a:	b094      	sub	sp, #80	; 0x50
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
    initializeTestRun();
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff73 	bl	8003f5c <_ZN21CommandLineTestRunner17initializeTestRunEv>
    size_t loopCount = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	64fb      	str	r3, [r7, #76]	; 0x4c
    size_t failedTestCount = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	64bb      	str	r3, [r7, #72]	; 0x48
    size_t failedExecutionCount = 0;
 800407e:	2300      	movs	r3, #0
 8004080:	647b      	str	r3, [r7, #68]	; 0x44
    size_t repeatCount = arguments_->getRepeatCount();
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	4618      	mov	r0, r3
 8004088:	f00a fd74 	bl	800eb74 <_ZNK20CommandLineArguments14getRepeatCountEv>
 800408c:	6438      	str	r0, [r7, #64]	; 0x40

    if (arguments_->isListingTestGroupNames())
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	4618      	mov	r0, r3
 8004094:	f00a fd32 	bl	800eafc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d019      	beq.n	80040d2 <_ZN21CommandLineTestRunner11runAllTestsEv+0x6a>
    {
        TestResult tr(*output_);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4611      	mov	r1, r2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f007 fdc7 	bl	800bc3c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupNames(tr);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	3320      	adds	r3, #32
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f107 0108 	add.w	r1, r7, #8
 80040c0:	4610      	mov	r0, r2
 80040c2:	4798      	blx	r3
        return 0;
 80040c4:	2400      	movs	r4, #0
        TestResult tr(*output_);
 80040c6:	f107 0308 	add.w	r3, r7, #8
 80040ca:	4618      	mov	r0, r3
 80040cc:	f007 fdee 	bl	800bcac <_ZN10TestResultD1Ev>
 80040d0:	e0e1      	b.n	8004296 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestGroupAndCaseNames())
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f00a fd1c 	bl	800eb14 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d019      	beq.n	8004116 <_ZN21CommandLineTestRunner11runAllTestsEv+0xae>
    {
        TestResult tr(*output_);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685a      	ldr	r2, [r3, #4]
 80040e6:	f107 0308 	add.w	r3, r7, #8
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f007 fda5 	bl	800bc3c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestGroupAndCaseNames(tr);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3324      	adds	r3, #36	; 0x24
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f107 0108 	add.w	r1, r7, #8
 8004104:	4610      	mov	r0, r2
 8004106:	4798      	blx	r3
        return 0;
 8004108:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	4618      	mov	r0, r3
 8004110:	f007 fdcc 	bl	800bcac <_ZN10TestResultD1Ev>
 8004114:	e0bf      	b.n	8004296 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isListingTestLocations())
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f00a fd06 	bl	800eb2c <_ZNK20CommandLineArguments22isListingTestLocationsEv>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d019      	beq.n	800415a <_ZN21CommandLineTestRunner11runAllTestsEv+0xf2>
    {
        TestResult tr(*output_);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	f107 0308 	add.w	r3, r7, #8
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f007 fd83 	bl	800bc3c <_ZN10TestResultC1ER10TestOutput>
        registry_->listTestLocations(tr);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3328      	adds	r3, #40	; 0x28
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f107 0108 	add.w	r1, r7, #8
 8004148:	4610      	mov	r0, r2
 800414a:	4798      	blx	r3
        return 0;
 800414c:	2400      	movs	r4, #0
        TestResult tr(*output_);
 800414e:	f107 0308 	add.w	r3, r7, #8
 8004152:	4618      	mov	r0, r3
 8004154:	f007 fdaa 	bl	800bcac <_ZN10TestResultD1Ev>
 8004158:	e09d      	b.n	8004296 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22e>
    }

    if (arguments_->isReversing())
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f00a fd14 	bl	800eb8c <_ZNK20CommandLineArguments11isReversingEv>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <_ZN21CommandLineTestRunner11runAllTestsEv+0x114>
        registry_->reverseTests();
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	331c      	adds	r3, #28
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4610      	mov	r0, r2
 800417a:	4798      	blx	r3

    if (arguments_->isShuffling())
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	4618      	mov	r0, r3
 8004182:	f00a fd1b 	bl	800ebbc <_ZNK20CommandLineArguments11isShufflingEv>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d023      	beq.n	80041d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
    {
        output_->print("Test order shuffling enabled with seed: ");
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	332c      	adds	r3, #44	; 0x2c
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4941      	ldr	r1, [pc, #260]	; (80042a0 <_ZN21CommandLineTestRunner11runAllTestsEv+0x238>)
 800419c:	4610      	mov	r0, r2
 800419e:	4798      	blx	r3
        output_->print(arguments_->getShuffleSeed());
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685d      	ldr	r5, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	3334      	adds	r3, #52	; 0x34
 80041ac:	681c      	ldr	r4, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f00a fd0e 	bl	800ebd4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4619      	mov	r1, r3
 80041bc:	4628      	mov	r0, r5
 80041be:	47a0      	blx	r4
        output_->print("\n");
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	332c      	adds	r3, #44	; 0x2c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4935      	ldr	r1, [pc, #212]	; (80042a4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x23c>)
 80041d0:	4610      	mov	r0, r2
 80041d2:	4798      	blx	r3
    }
    while (loopCount++ < repeatCount) {
 80041d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d6:	1c5a      	adds	r2, r3, #1
 80041d8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041dc:	429a      	cmp	r2, r3
 80041de:	bf8c      	ite	hi
 80041e0:	2301      	movhi	r3, #1
 80041e2:	2300      	movls	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d04e      	beq.n	8004288 <_ZN21CommandLineTestRunner11runAllTestsEv+0x220>

        if (arguments_->isShuffling())
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f00a fce4 	bl	800ebbc <_ZNK20CommandLineArguments11isShufflingEv>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00f      	beq.n	800421a <_ZN21CommandLineTestRunner11runAllTestsEv+0x1b2>
            registry_->shuffleTests(arguments_->getShuffleSeed());
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68dd      	ldr	r5, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3318      	adds	r3, #24
 8004206:	681c      	ldr	r4, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f00a fce1 	bl	800ebd4 <_ZNK20CommandLineArguments14getShuffleSeedEv>
 8004212:	4603      	mov	r3, r0
 8004214:	4619      	mov	r1, r3
 8004216:	4628      	mov	r0, r5
 8004218:	47a0      	blx	r4

        output_->printTestRun(loopCount, repeatCount);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6858      	ldr	r0, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3340      	adds	r3, #64	; 0x40
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800422a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800422c:	4798      	blx	r3
        TestResult tr(*output_);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4611      	mov	r1, r2
 8004238:	4618      	mov	r0, r3
 800423a:	f007 fcff 	bl	800bc3c <_ZN10TestResultC1ER10TestOutput>
        registry_->runAllTests(tr);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3314      	adds	r3, #20
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f107 0108 	add.w	r1, r7, #8
 8004250:	4610      	mov	r0, r2
 8004252:	4798      	blx	r3
        failedTestCount += tr.getFailureCount();
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4618      	mov	r0, r3
 800425a:	f7ff fcee 	bl	8003c3a <_ZNK10TestResult15getFailureCountEv>
 800425e:	4602      	mov	r2, r0
 8004260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004262:	4413      	add	r3, r2
 8004264:	64bb      	str	r3, [r7, #72]	; 0x48
        if (tr.isFailure()) {
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4618      	mov	r0, r3
 800426c:	f7ff fcf1 	bl	8003c52 <_ZNK10TestResult9isFailureEv>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <_ZN21CommandLineTestRunner11runAllTestsEv+0x214>
            failedExecutionCount++;
 8004276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004278:	3301      	adds	r3, #1
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
        TestResult tr(*output_);
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f007 fd13 	bl	800bcac <_ZN10TestResultD1Ev>
    while (loopCount++ < repeatCount) {
 8004286:	e7a5      	b.n	80041d4 <_ZN21CommandLineTestRunner11runAllTestsEv+0x16c>
        }
    }
    return (int) (failedTestCount != 0 ? failedTestCount : failedExecutionCount);
 8004288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22a>
 800428e:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8004290:	e000      	b.n	8004294 <_ZN21CommandLineTestRunner11runAllTestsEv+0x22c>
 8004292:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004294:	bf00      	nop
 8004296:	4623      	mov	r3, r4
}
 8004298:	4618      	mov	r0, r3
 800429a:	3750      	adds	r7, #80	; 0x50
 800429c:	46bd      	mov	sp, r7
 800429e:	bdb0      	pop	{r4, r5, r7, pc}
 80042a0:	080146d0 	.word	0x080146d0
 80042a4:	080146fc 	.word	0x080146fc

080042a8 <_ZN21CommandLineTestRunner20createTeamCityOutputEv>:

TestOutput* CommandLineTestRunner::createTeamCityOutput()
{
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    return new TeamCityTestOutput;
 80042b0:	229d      	movs	r2, #157	; 0x9d
 80042b2:	4906      	ldr	r1, [pc, #24]	; (80042cc <_ZN21CommandLineTestRunner20createTeamCityOutputEv+0x24>)
 80042b4:	201c      	movs	r0, #28
 80042b6:	f001 f9eb 	bl	8005690 <_ZnwjPKci>
 80042ba:	4604      	mov	r4, r0
 80042bc:	4620      	mov	r0, r4
 80042be:	f003 fb6d 	bl	800799c <_ZN18TeamCityTestOutputC1Ev>
 80042c2:	4623      	mov	r3, r4
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd90      	pop	{r4, r7, pc}
 80042cc:	08014698 	.word	0x08014698

080042d0 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString>:

TestOutput* CommandLineTestRunner::createJUnitOutput(const SimpleString& packageName)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
    JUnitTestOutput* junitOutput = new JUnitTestOutput;
 80042da:	22a2      	movs	r2, #162	; 0xa2
 80042dc:	490a      	ldr	r1, [pc, #40]	; (8004308 <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x38>)
 80042de:	2014      	movs	r0, #20
 80042e0:	f001 f9d6 	bl	8005690 <_ZnwjPKci>
 80042e4:	4604      	mov	r4, r0
 80042e6:	4620      	mov	r0, r4
 80042e8:	f000 f980 	bl	80045ec <_ZN15JUnitTestOutputC1Ev>
 80042ec:	60fc      	str	r4, [r7, #12]
    if (junitOutput != NULLPTR) {
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <_ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString+0x2c>
      junitOutput->setPackageName(packageName);
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fbb2 	bl	8004a60 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>
    }
    return junitOutput;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	bd90      	pop	{r4, r7, pc}
 8004306:	bf00      	nop
 8004308:	08014698 	.word	0x08014698

0800430c <_ZN21CommandLineTestRunner19createConsoleOutputEv>:

TestOutput* CommandLineTestRunner::createConsoleOutput()
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
    return new ConsoleTestOutput;
 8004314:	22ab      	movs	r2, #171	; 0xab
 8004316:	4906      	ldr	r1, [pc, #24]	; (8004330 <_ZN21CommandLineTestRunner19createConsoleOutputEv+0x24>)
 8004318:	2010      	movs	r0, #16
 800431a:	f001 f9b9 	bl	8005690 <_ZnwjPKci>
 800431e:	4604      	mov	r4, r0
 8004320:	4620      	mov	r0, r4
 8004322:	f7ff fcb3 	bl	8003c8c <_ZN17ConsoleTestOutputC1Ev>
 8004326:	4623      	mov	r3, r4
}
 8004328:	4618      	mov	r0, r3
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	bd90      	pop	{r4, r7, pc}
 8004330:	08014698 	.word	0x08014698

08004334 <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_>:

TestOutput* CommandLineTestRunner::createCompositeOutput(TestOutput* outputOne, TestOutput* outputTwo)
{
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  CompositeTestOutput* composite = new CompositeTestOutput;
 8004340:	22b0      	movs	r2, #176	; 0xb0
 8004342:	490e      	ldr	r1, [pc, #56]	; (800437c <_ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_+0x48>)
 8004344:	2018      	movs	r0, #24
 8004346:	f001 f9a3 	bl	8005690 <_ZnwjPKci>
 800434a:	4604      	mov	r4, r0
 800434c:	4620      	mov	r0, r4
 800434e:	f006 f99b 	bl	800a688 <_ZN19CompositeTestOutputC1Ev>
 8004352:	617c      	str	r4, [r7, #20]
  composite->setOutputOne(outputOne);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	335c      	adds	r3, #92	; 0x5c
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68b9      	ldr	r1, [r7, #8]
 800435e:	6978      	ldr	r0, [r7, #20]
 8004360:	4798      	blx	r3
  composite->setOutputTwo(outputTwo);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	3360      	adds	r3, #96	; 0x60
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	6978      	ldr	r0, [r7, #20]
 800436e:	4798      	blx	r3
  return composite;
 8004370:	697b      	ldr	r3, [r7, #20]
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}
 800437a:	bf00      	nop
 800437c:	08014698 	.word	0x08014698

08004380 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin>:

bool CommandLineTestRunner::parseArguments(TestPlugin* plugin)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  if (!arguments_->parse(plugin)) {
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	6839      	ldr	r1, [r7, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f009 ffa7 	bl	800e2e4 <_ZN20CommandLineArguments5parseEP10TestPlugin>
 8004396:	4603      	mov	r3, r0
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d029      	beq.n	80043f6 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x76>
    output_ = createConsoleOutput();
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3310      	adds	r3, #16
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	4798      	blx	r3
 80043ae:	4602      	mov	r2, r0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	605a      	str	r2, [r3, #4]
    output_->print((arguments_->needHelp()) ? arguments_->help() : arguments_->usage());
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685d      	ldr	r5, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	332c      	adds	r3, #44	; 0x2c
 80043c0:	681c      	ldr	r4, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00a fb68 	bl	800ea9c <_ZNK20CommandLineArguments8needHelpEv>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d006      	beq.n	80043e0 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x60>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f00a fb52 	bl	800ea80 <_ZNK20CommandLineArguments4helpEv>
 80043dc:	4603      	mov	r3, r0
 80043de:	e005      	b.n	80043ec <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x6c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f00a fb3d 	bl	800ea64 <_ZNK20CommandLineArguments5usageEv>
 80043ea:	4603      	mov	r3, r0
 80043ec:	4619      	mov	r1, r3
 80043ee:	4628      	mov	r0, r5
 80043f0:	47a0      	blx	r4
    return false;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e050      	b.n	8004498 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x118>
  }

  if (arguments_->isJUnitOutput()) {
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00b f9a4 	bl	800f748 <_ZNK20CommandLineArguments13isJUnitOutputEv>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d02c      	beq.n	8004460 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0xe0>
    output_= createJUnitOutput(arguments_->getPackageName());
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	330c      	adds	r3, #12
 800440c:	681c      	ldr	r4, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	4618      	mov	r0, r3
 8004414:	f00b f9bc 	bl	800f790 <_ZNK20CommandLineArguments14getPackageNameEv>
 8004418:	4603      	mov	r3, r0
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	47a0      	blx	r4
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	605a      	str	r2, [r3, #4]
    if (arguments_->isVerbose())
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4618      	mov	r0, r3
 800442c:	f00a fb42 	bl	800eab4 <_ZNK20CommandLineArguments9isVerboseEv>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d02f      	beq.n	8004496 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
      output_ = createCompositeOutput(output_, createConsoleOutput());
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3314      	adds	r3, #20
 800443c:	681c      	ldr	r4, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685d      	ldr	r5, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3310      	adds	r3, #16
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	4798      	blx	r3
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	4629      	mov	r1, r5
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	47a0      	blx	r4
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e01a      	b.n	8004496 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else if (arguments_->isTeamCityOutput()) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f00b f981 	bl	800f76c <_ZNK20CommandLineArguments16isTeamCityOutputEv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x104>
    output_ = createTeamCityOutput();
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	3308      	adds	r3, #8
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	4798      	blx	r3
 800447c:	4602      	mov	r2, r0
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	e008      	b.n	8004496 <_ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin+0x116>
  } else
    output_ = createConsoleOutput();
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3310      	adds	r3, #16
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4798      	blx	r3
 8004490:	4602      	mov	r2, r0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	605a      	str	r2, [r3, #4]
  return true;
 8004496:	2301      	movs	r3, #1
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bdb0      	pop	{r4, r5, r7, pc}

080044a0 <_ZN16SetPointerPluginD1Ev>:
//
///////////////////////////////////////////////////////////////////////////////

extern void CppUTestStore(void **location);

class SetPointerPlugin: public TestPlugin
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <_ZN16SetPointerPluginD1Ev+0x20>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f006 fbff 	bl	800acb4 <_ZN10TestPluginD1Ev>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	08016bb8 	.word	0x08016bb8

080044c4 <_ZN16SetPointerPluginD0Ev>:
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ffe7 	bl	80044a0 <_ZN16SetPointerPluginD1Ev>
 80044d2:	2114      	movs	r1, #20
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f001 f8ef 	bl	80056b8 <_ZdlPvj>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <_ZNK10TestResult13getCheckCountEv>:
    size_t getCheckCount() const
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
        return checkCount_;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
    }
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_ZN23JUnitTestCaseResultNodeC1Ev>:
#include "CppUTest/TestFailure.h"
#include "CppUTest/PlatformSpecificFunctions.h"

struct JUnitTestCaseResultNode
{
    JUnitTestCaseResultNode() :
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
        execTime_(0), failure_(NULLPTR), ignored_(false), lineNumber_ (0), checkCount_ (0), next_(NULLPTR)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	4910      	ldr	r1, [pc, #64]	; (8004548 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8004508:	4618      	mov	r0, r3
 800450a:	f001 ffaa 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	741a      	strb	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3314      	adds	r3, #20
 8004524:	4908      	ldr	r1, [pc, #32]	; (8004548 <_ZN23JUnitTestCaseResultNodeC1Ev+0x4c>)
 8004526:	4618      	mov	r0, r3
 8004528:	f001 ff9b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	61da      	str	r2, [r3, #28]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	621a      	str	r2, [r3, #32]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08014700 	.word	0x08014700

0800454c <_ZN20JUnitTestGroupResultC1Ev>:
    JUnitTestCaseResultNode* next_;
};

struct JUnitTestGroupResult
{
    JUnitTestGroupResult() :
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
        testCount_(0), failureCount_(0), totalCheckCount_(0), startTime_(0), groupExecTime_(0), head_(NULLPTR), tail_(NULLPTR)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3314      	adds	r3, #20
 8004576:	4907      	ldr	r1, [pc, #28]	; (8004594 <_ZN20JUnitTestGroupResultC1Ev+0x48>)
 8004578:	4618      	mov	r0, r3
 800457a:	f001 ff72 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	61da      	str	r2, [r3, #28]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	621a      	str	r2, [r3, #32]
    {
    }
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	08014700 	.word	0x08014700

08004598 <_ZN20JUnitTestGroupResultD1Ev>:
struct JUnitTestGroupResult
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3314      	adds	r3, #20
 80045a4:	4618      	mov	r0, r3
 80045a6:	f002 fb14 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZN19JUnitTestOutputImplC1Ev>:
    SimpleString group_;
    JUnitTestCaseResultNode* head_;
    JUnitTestCaseResultNode* tail_;
};

struct JUnitTestOutputImpl
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff ffc4 	bl	800454c <_ZN20JUnitTestGroupResultC1Ev>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3328      	adds	r3, #40	; 0x28
 80045c8:	4907      	ldr	r1, [pc, #28]	; (80045e8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 ff49 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3330      	adds	r3, #48	; 0x30
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <_ZN19JUnitTestOutputImplC1Ev+0x34>)
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 ff43 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4618      	mov	r0, r3
 80045e0:	3708      	adds	r7, #8
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	08014700 	.word	0x08014700

080045ec <_ZN15JUnitTestOutputC1Ev>:
    PlatformSpecificFile file_;
    SimpleString package_;
    SimpleString stdOutput_;
};

JUnitTestOutput::JUnitTestOutput() :
 80045ec:	b590      	push	{r4, r7, lr}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
    impl_(new JUnitTestOutputImpl)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f005 fb4e 	bl	8009c98 <_ZN10TestOutputC1Ev>
 80045fc:	4a09      	ldr	r2, [pc, #36]	; (8004624 <_ZN15JUnitTestOutputC1Ev+0x38>)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	224d      	movs	r2, #77	; 0x4d
 8004604:	4908      	ldr	r1, [pc, #32]	; (8004628 <_ZN15JUnitTestOutputC1Ev+0x3c>)
 8004606:	2038      	movs	r0, #56	; 0x38
 8004608:	f001 f842 	bl	8005690 <_ZnwjPKci>
 800460c:	4604      	mov	r4, r0
 800460e:	4620      	mov	r0, r4
 8004610:	f7ff ffd0 	bl	80045b4 <_ZN19JUnitTestOutputImplC1Ev>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	611c      	str	r4, [r3, #16]
{
}
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	bd90      	pop	{r4, r7, pc}
 8004622:	bf00      	nop
 8004624:	080165ac 	.word	0x080165ac
 8004628:	08014704 	.word	0x08014704

0800462c <_ZN19JUnitTestOutputImplD1Ev>:
struct JUnitTestOutputImpl
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3330      	adds	r3, #48	; 0x30
 8004638:	4618      	mov	r0, r3
 800463a:	f002 faca 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3328      	adds	r3, #40	; 0x28
 8004642:	4618      	mov	r0, r3
 8004644:	f002 fac5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff ffa4 	bl	8004598 <_ZN20JUnitTestGroupResultD1Ev>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <_ZN15JUnitTestOutputD1Ev>:

JUnitTestOutput::~JUnitTestOutput()
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	4a0c      	ldr	r2, [pc, #48]	; (8004698 <_ZN15JUnitTestOutputD1Ev+0x3c>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	601a      	str	r2, [r3, #0]
{
    resetTestGroupResult();
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f838 	bl	80046e0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
    delete impl_;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691c      	ldr	r4, [r3, #16]
 8004674:	2c00      	cmp	r4, #0
 8004676:	d006      	beq.n	8004686 <_ZN15JUnitTestOutputD1Ev+0x2a>
 8004678:	4620      	mov	r0, r4
 800467a:	f7ff ffd7 	bl	800462c <_ZN19JUnitTestOutputImplD1Ev>
 800467e:	2138      	movs	r1, #56	; 0x38
 8004680:	4620      	mov	r0, r4
 8004682:	f001 f819 	bl	80056b8 <_ZdlPvj>
JUnitTestOutput::~JUnitTestOutput()
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4618      	mov	r0, r3
 800468a:	f005 fb23 	bl	8009cd4 <_ZN10TestOutputD1Ev>
}
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	080165ac 	.word	0x080165ac

0800469c <_ZN15JUnitTestOutputD0Ev>:
JUnitTestOutput::~JUnitTestOutput()
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
}
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ffd9 	bl	800465c <_ZN15JUnitTestOutputD1Ev>
 80046aa:	2114      	movs	r1, #20
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f001 f803 	bl	80056b8 <_ZdlPvj>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4618      	mov	r0, r3
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_ZN23JUnitTestCaseResultNodeD1Ev>:
struct JUnitTestCaseResultNode
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3314      	adds	r3, #20
 80046c8:	4618      	mov	r0, r3
 80046ca:	f002 fa82 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f002 fa7e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>:

void JUnitTestOutput::resetTestGroupResult()
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
    impl_->results_.testCount_ = 0;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	2200      	movs	r2, #0
 80046ee:	601a      	str	r2, [r3, #0]
    impl_->results_.failureCount_ = 0;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2200      	movs	r2, #0
 80046f6:	605a      	str	r2, [r3, #4]
    impl_->results_.group_ = "";
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f103 0414 	add.w	r4, r3, #20
 8004700:	f107 0308 	add.w	r3, r7, #8
 8004704:	491d      	ldr	r1, [pc, #116]	; (800477c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x9c>)
 8004706:	4618      	mov	r0, r3
 8004708:	f001 feab 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800470c:	f107 0308 	add.w	r3, r7, #8
 8004710:	4619      	mov	r1, r3
 8004712:	4620      	mov	r0, r4
 8004714:	f001 ff11 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	4618      	mov	r0, r3
 800471e:	f002 fa58 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	617b      	str	r3, [r7, #20]
    while (cur) {
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d018      	beq.n	8004762 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x82>
        JUnitTestCaseResultNode* tmp = cur->next_;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	613b      	str	r3, [r7, #16]
        delete cur->failure_;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d004      	beq.n	8004748 <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x68>
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	3204      	adds	r2, #4
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	4790      	blx	r2
        delete cur;
 8004748:	697c      	ldr	r4, [r7, #20]
 800474a:	2c00      	cmp	r4, #0
 800474c:	d006      	beq.n	800475c <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x7c>
 800474e:	4620      	mov	r0, r4
 8004750:	f7ff ffb4 	bl	80046bc <_ZN23JUnitTestCaseResultNodeD1Ev>
 8004754:	2128      	movs	r1, #40	; 0x28
 8004756:	4620      	mov	r0, r4
 8004758:	f000 ffae 	bl	80056b8 <_ZdlPvj>
        cur = tmp;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	617b      	str	r3, [r7, #20]
    while (cur) {
 8004760:	e7e3      	b.n	800472a <_ZN15JUnitTestOutput20resetTestGroupResultEv+0x4a>
    }
    impl_->results_.head_ = NULLPTR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2200      	movs	r2, #0
 8004768:	61da      	str	r2, [r3, #28]
    impl_->results_.tail_ = NULLPTR;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2200      	movs	r2, #0
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd90      	pop	{r4, r7, pc}
 800477a:	bf00      	nop
 800477c:	08014700 	.word	0x08014700

08004780 <_ZN15JUnitTestOutput17printTestsStartedEv>:

void JUnitTestOutput::printTestsStarted()
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <_ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <_ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult>:

void JUnitTestOutput::printCurrentTestEnded(const TestResult& result)
{
 80047aa:	b590      	push	{r4, r7, lr}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	6039      	str	r1, [r7, #0]
    impl_->results_.tail_->execTime_ = result.getCurrentTestTotalExecutionTime();
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	6a1c      	ldr	r4, [r3, #32]
 80047ba:	6838      	ldr	r0, [r7, #0]
 80047bc:	f007 fbde 	bl	800bf7c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 80047c0:	4603      	mov	r3, r0
 80047c2:	60a3      	str	r3, [r4, #8]
    impl_->results_.tail_->checkCount_ = result.getCheckCount();
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	6a1c      	ldr	r4, [r3, #32]
 80047ca:	6838      	ldr	r0, [r7, #0]
 80047cc:	f7ff fe8a 	bl	80044e4 <_ZNK10TestResult13getCheckCountEv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	6223      	str	r3, [r4, #32]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd90      	pop	{r4, r7, pc}

080047dc <_ZN15JUnitTestOutput15printTestsEndedERK10TestResult>:

void JUnitTestOutput::printTestsEnded(const TestResult& /*result*/)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <_ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult>:

void JUnitTestOutput::printCurrentGroupEnded(const TestResult& result)
{
 80047f2:	b590      	push	{r4, r7, lr}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
    impl_->results_.groupExecTime_ = result.getCurrentGroupTotalExecutionTime();
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691c      	ldr	r4, [r3, #16]
 8004800:	6838      	ldr	r0, [r7, #0]
 8004802:	f007 fbc7 	bl	800bf94 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>
 8004806:	4603      	mov	r3, r0
 8004808:	6123      	str	r3, [r4, #16]
    writeTestGroupToFile();
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3364      	adds	r3, #100	; 0x64
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
    resetTestGroupResult();
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ff62 	bl	80046e0 <_ZN15JUnitTestOutput20resetTestGroupResultEv>
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}

08004824 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell>:

void JUnitTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b089      	sub	sp, #36	; 0x24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
    impl_->results_.testCount_++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	3201      	adds	r2, #1
 8004836:	601a      	str	r2, [r3, #0]
    impl_->results_.group_ = test.getGroup();
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	f103 0414 	add.w	r4, r3, #20
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f007 fedb 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800484c:	f107 0308 	add.w	r3, r7, #8
 8004850:	4619      	mov	r1, r3
 8004852:	4620      	mov	r0, r4
 8004854:	f001 fe71 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8004858:	f107 0308 	add.w	r3, r7, #8
 800485c:	4618      	mov	r0, r3
 800485e:	f002 f9b8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    impl_->results_.startTime_ = (size_t) GetPlatformSpecificTimeInMillis();
 8004862:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x130>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4798      	blx	r3
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	60da      	str	r2, [r3, #12]

    if (impl_->results_.tail_ == NULLPTR) {
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d110      	bne.n	800489c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x78>
        impl_->results_.head_ = impl_->results_.tail_
                = new JUnitTestCaseResultNode;
 800487a:	2288      	movs	r2, #136	; 0x88
 800487c:	4936      	ldr	r1, [pc, #216]	; (8004958 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 800487e:	2028      	movs	r0, #40	; 0x28
 8004880:	f000 ff06 	bl	8005690 <_ZnwjPKci>
 8004884:	4604      	mov	r4, r0
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff fe38 	bl	80044fc <_ZN23JUnitTestCaseResultNodeC1Ev>
        impl_->results_.head_ = impl_->results_.tail_
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
                = new JUnitTestCaseResultNode;
 8004890:	621c      	str	r4, [r3, #32]
        impl_->results_.head_ = impl_->results_.tail_
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6912      	ldr	r2, [r2, #16]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	61d3      	str	r3, [r2, #28]
 800489a:	e013      	b.n	80048c4 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0xa0>
    }
    else {
        impl_->results_.tail_->next_ = new JUnitTestCaseResultNode;
 800489c:	228b      	movs	r2, #139	; 0x8b
 800489e:	492e      	ldr	r1, [pc, #184]	; (8004958 <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x134>)
 80048a0:	2028      	movs	r0, #40	; 0x28
 80048a2:	f000 fef5 	bl	8005690 <_ZnwjPKci>
 80048a6:	4604      	mov	r4, r0
 80048a8:	4620      	mov	r0, r4
 80048aa:	f7ff fe27 	bl	80044fc <_ZN23JUnitTestCaseResultNodeC1Ev>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	625c      	str	r4, [r3, #36]	; 0x24
        impl_->results_.tail_ = impl_->results_.tail_->next_;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048c2:	621a      	str	r2, [r3, #32]
    }
    impl_->results_.tail_->name_ = test.getName();
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	461c      	mov	r4, r3
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	6839      	ldr	r1, [r7, #0]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f007 fe86 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	4619      	mov	r1, r3
 80048de:	4620      	mov	r0, r4
 80048e0:	f001 fe2b 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	4618      	mov	r0, r3
 80048ea:	f002 f972 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->file_ = test.getFile();
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f103 0414 	add.w	r4, r3, #20
 80048f8:	f107 0318 	add.w	r3, r7, #24
 80048fc:	6839      	ldr	r1, [r7, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f007 fef8 	bl	800c6f4 <_ZNK10UtestShell7getFileEv>
 8004904:	f107 0318 	add.w	r3, r7, #24
 8004908:	4619      	mov	r1, r3
 800490a:	4620      	mov	r0, r4
 800490c:	f001 fe15 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8004910:	f107 0318 	add.w	r3, r7, #24
 8004914:	4618      	mov	r0, r3
 8004916:	f002 f95c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    impl_->results_.tail_->lineNumber_ = test.getLineNumber();
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	6a1c      	ldr	r4, [r3, #32]
 8004920:	6838      	ldr	r0, [r7, #0]
 8004922:	f007 fef6 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 8004926:	4603      	mov	r3, r0
 8004928:	61e3      	str	r3, [r4, #28]
    if (!test.willRun()) {
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3318      	adds	r3, #24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	4798      	blx	r3
 8004936:	4603      	mov	r3, r0
 8004938:	f083 0301 	eor.w	r3, r3, #1
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d004      	beq.n	800494c <_ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell+0x128>
        impl_->results_.tail_->ignored_ = true;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	2201      	movs	r2, #1
 800494a:	741a      	strb	r2, [r3, #16]
    }
}
 800494c:	bf00      	nop
 800494e:	3724      	adds	r7, #36	; 0x24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd90      	pop	{r4, r7, pc}
 8004954:	200000a4 	.word	0x200000a4
 8004958:	08014704 	.word	0x08014704

0800495c <_ZN15JUnitTestOutput14createFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::createFileName(const SimpleString& group)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	607a      	str	r2, [r7, #4]
    SimpleString fileName = "cpputest_";
 8004968:	f107 0310 	add.w	r3, r7, #16
 800496c:	4928      	ldr	r1, [pc, #160]	; (8004a10 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb4>)
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fd77 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    if (!impl_->package_.isEmpty()) {
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	3328      	adds	r3, #40	; 0x28
 800497a:	4618      	mov	r0, r3
 800497c:	f002 f918 	bl	8006bb0 <_ZNK12SimpleString7isEmptyEv>
 8004980:	4603      	mov	r3, r0
 8004982:	f083 0301 	eor.w	r3, r3, #1
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00f      	beq.n	80049ac <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0x50>
        fileName += impl_->package_;
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	4611      	mov	r1, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f002 f996 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
        fileName += "_";
 80049a0:	f107 0310 	add.w	r3, r7, #16
 80049a4:	491b      	ldr	r1, [pc, #108]	; (8004a14 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xb8>)
 80049a6:	4618      	mov	r0, r3
 80049a8:	f002 f9a2 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    }
    fileName += group;
 80049ac:	f107 0310 	add.w	r3, r7, #16
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f002 f98a 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
    return encodeFileName(fileName) + ".xml";
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3384      	adds	r3, #132	; 0x84
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f107 0018 	add.w	r0, r7, #24
 80049c4:	f107 0210 	add.w	r2, r7, #16
 80049c8:	68b9      	ldr	r1, [r7, #8]
 80049ca:	4798      	blx	r3
 80049cc:	f107 0320 	add.w	r3, r7, #32
 80049d0:	4911      	ldr	r1, [pc, #68]	; (8004a18 <_ZN15JUnitTestOutput14createFileNameERK12SimpleString+0xbc>)
 80049d2:	4618      	mov	r0, r3
 80049d4:	f001 fd45 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f107 0220 	add.w	r2, r7, #32
 80049de:	f107 0118 	add.w	r1, r7, #24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f002 f957 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 80049e8:	f107 0320 	add.w	r3, r7, #32
 80049ec:	4618      	mov	r0, r3
 80049ee:	f002 f8f0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80049f2:	f107 0318 	add.w	r3, r7, #24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f002 f8eb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString fileName = "cpputest_";
 80049fc:	f107 0310 	add.w	r3, r7, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f002 f8e6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return encodeFileName(fileName) + ".xml";
 8004a06:	bf00      	nop
}
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	3728      	adds	r7, #40	; 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	08014720 	.word	0x08014720
 8004a14:	0801472c 	.word	0x0801472c
 8004a18:	08014730 	.word	0x08014730

08004a1c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString>:

SimpleString JUnitTestOutput::encodeFileName(const SimpleString& fileName)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
    // special character list based on: https://en.wikipedia.org/wiki/Filename
    static const char* const forbiddenCharacters = "/\\?%*:|\"<>";

    SimpleString result = fileName;
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f001 fd6d 	bl	800650a <_ZN12SimpleStringC1ERKS_>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8004a30:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x40>)
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x36>
        result.replace(*sym, '_');
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	225f      	movs	r2, #95	; 0x5f
 8004a42:	4619      	mov	r1, r3
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f001 fef2 	bl	800682e <_ZN12SimpleString7replaceEcc>
    for (const char* sym = forbiddenCharacters; *sym; ++sym) {
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e7f0      	b.n	8004a34 <_ZN15JUnitTestOutput14encodeFileNameERK12SimpleString+0x18>
    }
    return result;
 8004a52:	bf00      	nop
}
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	08014738 	.word	0x08014738

08004a60 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString>:

void JUnitTestOutput::setPackageName(const SimpleString& package)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
    if (impl_ != NULLPTR) {
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <_ZN15JUnitTestOutput14setPackageNameERK12SimpleString+0x20>
        impl_->package_ = package;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	3328      	adds	r3, #40	; 0x28
 8004a78:	6839      	ldr	r1, [r7, #0]
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f001 fd5d 	bl	800653a <_ZN12SimpleStringaSERKS_>
    }
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <_ZN15JUnitTestOutput14writeXmlHeaderEv>:

void JUnitTestOutput::writeXmlHeader()
{
 8004a88:	b590      	push	{r4, r7, lr}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
    writeToFile("<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n");
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3368      	adds	r3, #104	; 0x68
 8004a96:	681c      	ldr	r4, [r3, #0]
 8004a98:	f107 0308 	add.w	r3, r7, #8
 8004a9c:	4908      	ldr	r1, [pc, #32]	; (8004ac0 <_ZN15JUnitTestOutput14writeXmlHeaderEv+0x38>)
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f001 fcdf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004aa4:	f107 0308 	add.w	r3, r7, #8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	47a0      	blx	r4
 8004aae:	f107 0308 	add.w	r3, r7, #8
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f002 f88d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd90      	pop	{r4, r7, pc}
 8004ac0:	08014744 	.word	0x08014744

08004ac4 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv>:

void JUnitTestOutput::writeTestSuiteSummary()
{
 8004ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac8:	b08a      	sub	sp, #40	; 0x28
 8004aca:	af04      	add	r7, sp, #16
 8004acc:	6078      	str	r0, [r7, #4]
    SimpleString
            buf =
                    StringFromFormat(
                            "<testsuite errors=\"0\" failures=\"%d\" hostname=\"localhost\" name=\"%s\" tests=\"%d\" time=\"%d.%03d\" timestamp=\"%s\">\n",
                            (int)impl_->results_.failureCount_,
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	685b      	ldr	r3, [r3, #4]
                            impl_->results_.group_.asCharString(),
                            (int) impl_->results_.testCount_,
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
                            GetPlatformSpecificTimeString());
 8004ad4:	4698      	mov	r8, r3
                            impl_->results_.group_.asCharString(),
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
                            GetPlatformSpecificTimeString());
 8004ada:	3314      	adds	r3, #20
 8004adc:	4618      	mov	r0, r3
 8004ade:	f002 f84b 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004ae2:	4604      	mov	r4, r0
                            (int) impl_->results_.testCount_,
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	681b      	ldr	r3, [r3, #0]
                            GetPlatformSpecificTimeString());
 8004aea:	461d      	mov	r5, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8004af4:	fba2 2303 	umull	r2, r3, r2, r3
 8004af8:	099b      	lsrs	r3, r3, #6
                            GetPlatformSpecificTimeString());
 8004afa:	461e      	mov	r6, r3
                            (int) (impl_->results_.groupExecTime_ / 1000), (int) (impl_->results_.groupExecTime_ % 1000),
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xbc>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	099b      	lsrs	r3, r3, #6
 8004b0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b0e:	fb01 f303 	mul.w	r3, r1, r3
 8004b12:	1ad3      	subs	r3, r2, r3
                            GetPlatformSpecificTimeString());
 8004b14:	603b      	str	r3, [r7, #0]
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4798      	blx	r3
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f107 0008 	add.w	r0, r7, #8
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	9601      	str	r6, [sp, #4]
 8004b2a:	9500      	str	r5, [sp, #0]
 8004b2c:	4623      	mov	r3, r4
 8004b2e:	4642      	mov	r2, r8
 8004b30:	4915      	ldr	r1, [pc, #84]	; (8004b88 <_ZN15JUnitTestOutput21writeTestSuiteSummaryEv+0xc4>)
 8004b32:	f002 fcdb 	bl	80074ec <_Z16StringFromFormatPKcz>
    writeToFile(buf.asCharString());
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3368      	adds	r3, #104	; 0x68
 8004b3c:	681c      	ldr	r4, [r3, #0]
 8004b3e:	f107 0308 	add.w	r3, r7, #8
 8004b42:	4618      	mov	r0, r3
 8004b44:	f002 f818 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	f107 0310 	add.w	r3, r7, #16
 8004b4e:	4611      	mov	r1, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 fc86 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	47a0      	blx	r4
 8004b60:	f107 0310 	add.w	r3, r7, #16
 8004b64:	4618      	mov	r0, r3
 8004b66:	f002 f834 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
                            GetPlatformSpecificTimeString());
 8004b6a:	f107 0308 	add.w	r3, r7, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f002 f82f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7e:	bf00      	nop
 8004b80:	10624dd3 	.word	0x10624dd3
 8004b84:	200000a8 	.word	0x200000a8
 8004b88:	08014770 	.word	0x08014770

08004b8c <_ZN15JUnitTestOutput15writePropertiesEv>:

void JUnitTestOutput::writeProperties()
{
 8004b8c:	b590      	push	{r4, r7, lr}
 8004b8e:	b087      	sub	sp, #28
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
    writeToFile("<properties>\n");
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3368      	adds	r3, #104	; 0x68
 8004b9a:	681c      	ldr	r4, [r3, #0]
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4912      	ldr	r1, [pc, #72]	; (8004bec <_ZN15JUnitTestOutput15writePropertiesEv+0x60>)
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f001 fc5d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004ba8:	f107 0308 	add.w	r3, r7, #8
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	47a0      	blx	r4
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f002 f80b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile("</properties>\n");
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3368      	adds	r3, #104	; 0x68
 8004bc2:	681c      	ldr	r4, [r3, #0]
 8004bc4:	f107 0310 	add.w	r3, r7, #16
 8004bc8:	4909      	ldr	r1, [pc, #36]	; (8004bf0 <_ZN15JUnitTestOutput15writePropertiesEv+0x64>)
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f001 fc49 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004bd0:	f107 0310 	add.w	r3, r7, #16
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	47a0      	blx	r4
 8004bda:	f107 0310 	add.w	r3, r7, #16
 8004bde:	4618      	mov	r0, r3
 8004be0:	f001 fff7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd90      	pop	{r4, r7, pc}
 8004bec:	080147e0 	.word	0x080147e0
 8004bf0:	080147f0 	.word	0x080147f0

08004bf4 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString>:

SimpleString JUnitTestOutput::encodeXmlText(const SimpleString& textbody)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
    SimpleString buf = textbody.asCharString();
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 ffb9 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4619      	mov	r1, r3
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f001 fc29 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    buf.replace("&", "&amp;");
 8004c10:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x58>)
 8004c12:	490f      	ldr	r1, [pc, #60]	; (8004c50 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x5c>)
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f001 fe39 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\"", "&quot;");
 8004c1a:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x60>)
 8004c1c:	490e      	ldr	r1, [pc, #56]	; (8004c58 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x64>)
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f001 fe34 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("<", "&lt;");
 8004c24:	4a0d      	ldr	r2, [pc, #52]	; (8004c5c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x68>)
 8004c26:	490e      	ldr	r1, [pc, #56]	; (8004c60 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x6c>)
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f001 fe2f 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace(">", "&gt;");
 8004c2e:	4a0d      	ldr	r2, [pc, #52]	; (8004c64 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x70>)
 8004c30:	490d      	ldr	r1, [pc, #52]	; (8004c68 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x74>)
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f001 fe2a 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>
    buf.replace("\n", "{newline}");
 8004c38:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x78>)
 8004c3a:	490d      	ldr	r1, [pc, #52]	; (8004c70 <_ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString+0x7c>)
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f001 fe25 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>
    return buf;
 8004c42:	bf00      	nop
}
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08014800 	.word	0x08014800
 8004c50:	08014808 	.word	0x08014808
 8004c54:	0801480c 	.word	0x0801480c
 8004c58:	08014814 	.word	0x08014814
 8004c5c:	08014818 	.word	0x08014818
 8004c60:	08014820 	.word	0x08014820
 8004c64:	08014824 	.word	0x08014824
 8004c68:	0801482c 	.word	0x0801482c
 8004c6c:	08014830 	.word	0x08014830
 8004c70:	0801483c 	.word	0x0801483c

08004c74 <_ZN15JUnitTestOutput14writeTestCasesEv>:

void JUnitTestOutput::writeTestCases()
{
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	b096      	sub	sp, #88	; 0x58
 8004c7a:	af08      	add	r7, sp, #32
 8004c7c:	60f8      	str	r0, [r7, #12]
    JUnitTestCaseResultNode* cur = impl_->results_.head_;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	637b      	str	r3, [r7, #52]	; 0x34

    while (cur) {
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 80b2 	beq.w	8004df2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x17e>
        SimpleString buf = StringFromFormat(
                "<testcase classname=\"%s%s%s\" name=\"%s\" assertions=\"%d\" time=\"%d.%03d\" file=\"%s\" line=\"%d\">\n",
                impl_->package_.asCharString(),
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	691b      	ldr	r3, [r3, #16]
                impl_->results_.group_.asCharString(),
                cur->name_.asCharString(),
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
                cur->file_.asCharString(),
                (int) cur->lineNumber_);
 8004c92:	3328      	adds	r3, #40	; 0x28
 8004c94:	4618      	mov	r0, r3
 8004c96:	f001 ff6f 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004c9a:	4680      	mov	r8, r0
                impl_->package_.isEmpty() ? "" : ".",
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	3328      	adds	r3, #40	; 0x28
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f001 ff84 	bl	8006bb0 <_ZNK12SimpleString7isEmptyEv>
 8004ca8:	4603      	mov	r3, r0
                (int) cur->lineNumber_);
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <_ZN15JUnitTestOutput14writeTestCasesEv+0x3e>
 8004cae:	4c53      	ldr	r4, [pc, #332]	; (8004dfc <_ZN15JUnitTestOutput14writeTestCasesEv+0x188>)
 8004cb0:	e000      	b.n	8004cb4 <_ZN15JUnitTestOutput14writeTestCasesEv+0x40>
 8004cb2:	4c53      	ldr	r4, [pc, #332]	; (8004e00 <_ZN15JUnitTestOutput14writeTestCasesEv+0x18c>)
                impl_->results_.group_.asCharString(),
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	691b      	ldr	r3, [r3, #16]
                (int) cur->lineNumber_);
 8004cb8:	3314      	adds	r3, #20
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f001 ff5c 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 ff57 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004cca:	4606      	mov	r6, r0
                (int) (cur->checkCount_ - impl_->results_.totalCheckCount_),
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	6a1a      	ldr	r2, [r3, #32]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8004cd8:	60bb      	str	r3, [r7, #8]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8004cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	4a49      	ldr	r2, [pc, #292]	; (8004e04 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8004ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce4:	099b      	lsrs	r3, r3, #6
                (int) cur->lineNumber_);
 8004ce6:	607b      	str	r3, [r7, #4]
                (int) (cur->execTime_ / 1000), (int)(cur->execTime_ % 1000),
 8004ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cea:	689a      	ldr	r2, [r3, #8]
 8004cec:	4b45      	ldr	r3, [pc, #276]	; (8004e04 <_ZN15JUnitTestOutput14writeTestCasesEv+0x190>)
 8004cee:	fba3 1302 	umull	r1, r3, r3, r2
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004cf8:	fb01 f303 	mul.w	r3, r1, r3
 8004cfc:	1ad3      	subs	r3, r2, r3
                (int) cur->lineNumber_);
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	3314      	adds	r3, #20
 8004d04:	4618      	mov	r0, r3
 8004d06:	f001 ff37 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f107 0014 	add.w	r0, r7, #20
 8004d14:	9306      	str	r3, [sp, #24]
 8004d16:	9205      	str	r2, [sp, #20]
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	9204      	str	r2, [sp, #16]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	9203      	str	r2, [sp, #12]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	9601      	str	r6, [sp, #4]
 8004d26:	9500      	str	r5, [sp, #0]
 8004d28:	4623      	mov	r3, r4
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	4936      	ldr	r1, [pc, #216]	; (8004e08 <_ZN15JUnitTestOutput14writeTestCasesEv+0x194>)
 8004d2e:	f002 fbdd 	bl	80074ec <_Z16StringFromFormatPKcz>
        writeToFile(buf.asCharString());
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3368      	adds	r3, #104	; 0x68
 8004d38:	681c      	ldr	r4, [r3, #0]
 8004d3a:	f107 0314 	add.w	r3, r7, #20
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 ff1a 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f107 031c 	add.w	r3, r7, #28
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fb88 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004d52:	f107 031c 	add.w	r3, r7, #28
 8004d56:	4619      	mov	r1, r3
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	47a0      	blx	r4
 8004d5c:	f107 031c 	add.w	r3, r7, #28
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 ff36 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

        impl_->results_.totalCheckCount_ = cur->checkCount_;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d6c:	6a12      	ldr	r2, [r2, #32]
 8004d6e:	609a      	str	r2, [r3, #8]

        if (cur->failure_) {
 8004d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d007      	beq.n	8004d88 <_ZN15JUnitTestOutput14writeTestCasesEv+0x114>
            writeFailure(cur);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	3388      	adds	r3, #136	; 0x88
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	4798      	blx	r3
 8004d86:	e017      	b.n	8004db8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
        }
        else if (cur->ignored_) {
 8004d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d8a:	7c1b      	ldrb	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <_ZN15JUnitTestOutput14writeTestCasesEv+0x144>
            writeToFile("<skipped />\n");
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3368      	adds	r3, #104	; 0x68
 8004d96:	681c      	ldr	r4, [r3, #0]
 8004d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9c:	491b      	ldr	r1, [pc, #108]	; (8004e0c <_ZN15JUnitTestOutput14writeTestCasesEv+0x198>)
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fb5f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da8:	4619      	mov	r1, r3
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	47a0      	blx	r4
 8004dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 ff0d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        }
        writeToFile("</testcase>\n");
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3368      	adds	r3, #104	; 0x68
 8004dbe:	681c      	ldr	r4, [r3, #0]
 8004dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dc4:	4912      	ldr	r1, [pc, #72]	; (8004e10 <_ZN15JUnitTestOutput14writeTestCasesEv+0x19c>)
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 fb4b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	47a0      	blx	r4
 8004dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 fef9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        cur = cur->next_;
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
                (int) cur->lineNumber_);
 8004de6:	f107 0314 	add.w	r3, r7, #20
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fef1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    while (cur) {
 8004df0:	e749      	b.n	8004c86 <_ZN15JUnitTestOutput14writeTestCasesEv+0x12>
    }
}
 8004df2:	bf00      	nop
 8004df4:	3738      	adds	r7, #56	; 0x38
 8004df6:	46bd      	mov	sp, r7
 8004df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dfc:	08014700 	.word	0x08014700
 8004e00:	08014840 	.word	0x08014840
 8004e04:	10624dd3 	.word	0x10624dd3
 8004e08:	08014844 	.word	0x08014844
 8004e0c:	080148a0 	.word	0x080148a0
 8004e10:	080148b0 	.word	0x080148b0

08004e14 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode>:

void JUnitTestOutput::writeFailure(JUnitTestCaseResultNode* node)
{
 8004e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e16:	b091      	sub	sp, #68	; 0x44
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
    SimpleString buf = StringFromFormat(
            "<failure message=\"%s:%d: %s\" type=\"AssertionFailedError\">\n",
            node->failure_->getFileName().asCharString(),
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68d9      	ldr	r1, [r3, #12]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3308      	adds	r3, #8
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f107 0210 	add.w	r2, r7, #16
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
            (int) node->failure_->getFailureLineNumber(),
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fe9d 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004e3e:	4605      	mov	r5, r0
            (int) node->failure_->getFailureLineNumber(),
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4798      	blx	r3
 8004e52:	4603      	mov	r3, r0
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8004e54:	461e      	mov	r6, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3380      	adds	r3, #128	; 0x80
 8004e5c:	681c      	ldr	r4, [r3, #0]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3318      	adds	r3, #24
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f107 0220 	add.w	r2, r7, #32
 8004e70:	4610      	mov	r0, r2
 8004e72:	4798      	blx	r3
 8004e74:	f107 0318 	add.w	r3, r7, #24
 8004e78:	f107 0220 	add.w	r2, r7, #32
 8004e7c:	6879      	ldr	r1, [r7, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	47a0      	blx	r4
 8004e82:	f107 0318 	add.w	r3, r7, #24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 fe76 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f107 0008 	add.w	r0, r7, #8
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	4633      	mov	r3, r6
 8004e96:	462a      	mov	r2, r5
 8004e98:	4924      	ldr	r1, [pc, #144]	; (8004f2c <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x118>)
 8004e9a:	f002 fb27 	bl	80074ec <_Z16StringFromFormatPKcz>
 8004e9e:	f107 0318 	add.w	r3, r7, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fe95 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8004ea8:	f107 0320 	add.w	r3, r7, #32
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fe90 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            node->failure_->getFileName().asCharString(),
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f001 fe8b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile(buf.asCharString());
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3368      	adds	r3, #104	; 0x68
 8004ec2:	681c      	ldr	r4, [r3, #0]
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fe55 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ed4:	4611      	mov	r1, r2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fac3 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	47a0      	blx	r4
 8004ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eea:	4618      	mov	r0, r3
 8004eec:	f001 fe71 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile("</failure>\n");
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3368      	adds	r3, #104	; 0x68
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004efc:	490c      	ldr	r1, [pc, #48]	; (8004f30 <_ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode+0x11c>)
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 faaf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f08:	4619      	mov	r1, r3
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	47a0      	blx	r4
 8004f0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f12:	4618      	mov	r0, r3
 8004f14:	f001 fe5d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            encodeXmlText(node->failure_->getMessage()).asCharString());
 8004f18:	f107 0308 	add.w	r3, r7, #8
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 fe58 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8004f22:	bf00      	nop
 8004f24:	373c      	adds	r7, #60	; 0x3c
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	080148c0 	.word	0x080148c0
 8004f30:	080148fc 	.word	0x080148fc

08004f34 <_ZN15JUnitTestOutput15writeFileEndingEv>:


void JUnitTestOutput::writeFileEnding()
{
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	b08d      	sub	sp, #52	; 0x34
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
    writeToFile("<system-out>");
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3368      	adds	r3, #104	; 0x68
 8004f42:	681c      	ldr	r4, [r3, #0]
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	4933      	ldr	r1, [pc, #204]	; (8005018 <_ZN15JUnitTestOutput15writeFileEndingEv+0xe4>)
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f001 fa89 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	47a0      	blx	r4
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 fe37 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile(encodeXmlText(impl_->stdOutput_));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3368      	adds	r3, #104	; 0x68
 8004f6a:	681c      	ldr	r4, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3380      	adds	r3, #128	; 0x80
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6912      	ldr	r2, [r2, #16]
 8004f78:	3230      	adds	r2, #48	; 0x30
 8004f7a:	f107 0010 	add.w	r0, r7, #16
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	4798      	blx	r3
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	47a0      	blx	r4
 8004f8c:	f107 0310 	add.w	r3, r7, #16
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fe1e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile("</system-out>\n");
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3368      	adds	r3, #104	; 0x68
 8004f9c:	681c      	ldr	r4, [r3, #0]
 8004f9e:	f107 0318 	add.w	r3, r7, #24
 8004fa2:	491e      	ldr	r1, [pc, #120]	; (800501c <_ZN15JUnitTestOutput15writeFileEndingEv+0xe8>)
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fa5c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004faa:	f107 0318 	add.w	r3, r7, #24
 8004fae:	4619      	mov	r1, r3
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	47a0      	blx	r4
 8004fb4:	f107 0318 	add.w	r3, r7, #24
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fe0a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile("<system-err></system-err>\n");
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3368      	adds	r3, #104	; 0x68
 8004fc4:	681c      	ldr	r4, [r3, #0]
 8004fc6:	f107 0320 	add.w	r3, r7, #32
 8004fca:	4915      	ldr	r1, [pc, #84]	; (8005020 <_ZN15JUnitTestOutput15writeFileEndingEv+0xec>)
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 fa48 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004fd2:	f107 0320 	add.w	r3, r7, #32
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	47a0      	blx	r4
 8004fdc:	f107 0320 	add.w	r3, r7, #32
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 fdf6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeToFile("</testsuite>\n");
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	3368      	adds	r3, #104	; 0x68
 8004fec:	681c      	ldr	r4, [r3, #0]
 8004fee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff2:	490c      	ldr	r1, [pc, #48]	; (8005024 <_ZN15JUnitTestOutput15writeFileEndingEv+0xf0>)
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 fa34 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8004ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	47a0      	blx	r4
 8005004:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fde2 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800500e:	bf00      	nop
 8005010:	3734      	adds	r7, #52	; 0x34
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	08014908 	.word	0x08014908
 800501c:	08014918 	.word	0x08014918
 8005020:	08014928 	.word	0x08014928
 8005024:	08014944 	.word	0x08014944

08005028 <_ZN15JUnitTestOutput20writeTestGroupToFileEv>:

void JUnitTestOutput::writeTestGroupToFile()
{
 8005028:	b590      	push	{r4, r7, lr}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    openFileForWrite(createFileName(impl_->results_.group_));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3360      	adds	r3, #96	; 0x60
 8005036:	681c      	ldr	r4, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	335c      	adds	r3, #92	; 0x5c
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6912      	ldr	r2, [r2, #16]
 8005044:	3214      	adds	r2, #20
 8005046:	f107 0008 	add.w	r0, r7, #8
 800504a:	6879      	ldr	r1, [r7, #4]
 800504c:	4798      	blx	r3
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4619      	mov	r1, r3
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	47a0      	blx	r4
 8005058:	f107 0308 	add.w	r3, r7, #8
 800505c:	4618      	mov	r0, r3
 800505e:	f001 fdb8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    writeXmlHeader();
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3370      	adds	r3, #112	; 0x70
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
    writeTestSuiteSummary();
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3374      	adds	r3, #116	; 0x74
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	4798      	blx	r3
    writeProperties();
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3378      	adds	r3, #120	; 0x78
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
    writeTestCases();
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	337c      	adds	r3, #124	; 0x7c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	4798      	blx	r3
    writeFileEnding();
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	338c      	adds	r3, #140	; 0x8c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	4798      	blx	r3
    closeFile();
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	336c      	adds	r3, #108	; 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd90      	pop	{r4, r7, pc}

080050b2 <_ZN15JUnitTestOutput11printBufferEPKc>:

// LCOV_EXCL_START

void JUnitTestOutput::printBuffer(const char*)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <_ZN15JUnitTestOutput5printEPKc>:

void JUnitTestOutput::print(const char *output)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
    impl_->stdOutput_ += output;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	3330      	adds	r3, #48	; 0x30
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f001 fe08 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <_ZN15JUnitTestOutput5printEl>:

void JUnitTestOutput::print(long)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <_ZN15JUnitTestOutput5printEj>:

void JUnitTestOutput::print(size_t)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <_ZN15JUnitTestOutput5flushEv>:

void JUnitTestOutput::flush()
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <_ZN15JUnitTestOutput12printFailureERK11TestFailure>:

// LCOV_EXCL_STOP

void JUnitTestOutput::printFailure(const TestFailure& failure)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
    if (impl_->results_.tail_->failure_ == NULLPTR) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x3e>
        impl_->results_.failureCount_++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	3201      	adds	r2, #1
 8005146:	605a      	str	r2, [r3, #4]
        impl_->results_.tail_->failure_ = new TestFailure(failure);
 8005148:	f240 1233 	movw	r2, #307	; 0x133
 800514c:	4908      	ldr	r1, [pc, #32]	; (8005170 <_ZN15JUnitTestOutput12printFailureERK11TestFailure+0x48>)
 800514e:	2034      	movs	r0, #52	; 0x34
 8005150:	f000 fa9e 	bl	8005690 <_ZnwjPKci>
 8005154:	4604      	mov	r4, r0
 8005156:	6839      	ldr	r1, [r7, #0]
 8005158:	4620      	mov	r0, r4
 800515a:	f002 ff4f 	bl	8007ffc <_ZN11TestFailureC1ERKS_>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	6a1b      	ldr	r3, [r3, #32]
 8005164:	60dc      	str	r4, [r3, #12]
    }
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bd90      	pop	{r4, r7, pc}
 800516e:	bf00      	nop
 8005170:	08014704 	.word	0x08014704

08005174 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString>:

void JUnitTestOutput::openFileForWrite(const SimpleString& fileName)
{
 8005174:	b5b0      	push	{r4, r5, r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
    impl_->file_ = PlatformSpecificFOpen(fileName.asCharString(), "w");
 800517e:	4b08      	ldr	r3, [pc, #32]	; (80051a0 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x2c>)
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	6838      	ldr	r0, [r7, #0]
 8005184:	f001 fcf8 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8005188:	4602      	mov	r2, r0
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691c      	ldr	r4, [r3, #16]
 800518e:	4905      	ldr	r1, [pc, #20]	; (80051a4 <_ZN15JUnitTestOutput16openFileForWriteERK12SimpleString+0x30>)
 8005190:	4610      	mov	r0, r2
 8005192:	47a8      	blx	r5
 8005194:	4603      	mov	r3, r0
 8005196:	6263      	str	r3, [r4, #36]	; 0x24
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bdb0      	pop	{r4, r5, r7, pc}
 80051a0:	200000b0 	.word	0x200000b0
 80051a4:	08014954 	.word	0x08014954

080051a8 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString>:

void JUnitTestOutput::writeToFile(const SimpleString& buffer)
{
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
    PlatformSpecificFPuts(buffer.asCharString(), impl_->file_);
 80051b2:	4b08      	ldr	r3, [pc, #32]	; (80051d4 <_ZN15JUnitTestOutput11writeToFileERK12SimpleString+0x2c>)
 80051b4:	681c      	ldr	r4, [r3, #0]
 80051b6:	6838      	ldr	r0, [r7, #0]
 80051b8:	f001 fcde 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 80051bc:	4602      	mov	r2, r0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	47a0      	blx	r4
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd90      	pop	{r4, r7, pc}
 80051d2:	bf00      	nop
 80051d4:	200000b4 	.word	0x200000b4

080051d8 <_ZN15JUnitTestOutput9closeFileEv>:

void JUnitTestOutput::closeFile()
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
    PlatformSpecificFClose(impl_->file_);
 80051e0:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <_ZN15JUnitTestOutput9closeFileEv+0x20>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6912      	ldr	r2, [r2, #16]
 80051e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051ea:	4610      	mov	r0, r2
 80051ec:	4798      	blx	r3
}
 80051ee:	bf00      	nop
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	200000b8 	.word	0x200000b8

080051fc <_ZN10TestPlugin14parseArgumentsEiPKPKci>:
    virtual bool parseArguments(int /* ac */, const char *const * /* av */, int /* index */ )
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
 8005208:	603b      	str	r3, [r7, #0]
        return false;
 800520a:	2300      	movs	r3, #0
    }
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <_ZN17MemoryLeakFailureD1Ev>:
class SimpleMutex;

class MemoryLeakFailure
{
public:
    virtual ~MemoryLeakFailure()
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
    {
 8005220:	4a04      	ldr	r2, [pc, #16]	; (8005234 <_ZN17MemoryLeakFailureD1Ev+0x1c>)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	601a      	str	r2, [r3, #0]
    }
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	08016658 	.word	0x08016658

08005238 <_ZN17MemoryLeakFailureD0Ev>:
    virtual ~MemoryLeakFailure()
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
    }
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ffe9 	bl	8005218 <_ZN17MemoryLeakFailureD1Ev>
 8005246:	2104      	movs	r1, #4
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 fa35 	bl	80056b8 <_ZdlPvj>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_ZN18MemLeakScopedMutexC1Ev>:
#if CPPUTEST_USE_MEM_LEAK_DETECTION

class MemLeakScopedMutex
{
public:
    MemLeakScopedMutex() : lock(MemoryLeakWarningPlugin::getGlobalDetector()->getMutex()) { }
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	687c      	ldr	r4, [r7, #4]
 8005262:	f000 fc71 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005266:	4603      	mov	r3, r0
 8005268:	4618      	mov	r0, r3
 800526a:	f00b f8c4 	bl	80103f6 <_ZN18MemoryLeakDetector8getMutexEv>
 800526e:	4603      	mov	r3, r0
 8005270:	4619      	mov	r1, r3
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fe4a 	bl	8005f0c <_ZN15ScopedMutexLockC1EP11SimpleMutex>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4618      	mov	r0, r3
 800527c:	370c      	adds	r7, #12
 800527e:	46bd      	mov	sp, r7
 8005280:	bd90      	pop	{r4, r7, pc}

08005282 <_ZN18MemLeakScopedMutexD1Ev>:
class MemLeakScopedMutex
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fe4f 	bl	8005f30 <_ZN15ScopedMutexLockD1Ev>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4618      	mov	r0, r3
 8005296:	3708      	adds	r7, #8
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <_ZL15mem_leak_mallocjPKcj>:
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
}


static void* mem_leak_malloc(size_t size, const char* file, size_t line)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b087      	sub	sp, #28
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentMallocAllocator(), size, file, line, true);
 80052a8:	f000 fc4e 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80052ac:	4604      	mov	r4, r0
 80052ae:	f004 faf7 	bl	80098a0 <_Z25getCurrentMallocAllocatorv>
 80052b2:	4601      	mov	r1, r0
 80052b4:	2301      	movs	r3, #1
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4620      	mov	r0, r4
 80052c2:	f00b fadb 	bl	801087c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80052c6:	4603      	mov	r3, r0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd90      	pop	{r4, r7, pc}

080052d0 <_ZL13mem_leak_freePvPKcj>:

static void mem_leak_free(void* buffer, const char* file, size_t line)
{
 80052d0:	b590      	push	{r4, r7, lr}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af02      	add	r7, sp, #8
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) buffer);
 80052dc:	f000 fc34 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80052e0:	4603      	mov	r3, r0
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f00b f935 	bl	8010554 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentMallocAllocator(), (char*) buffer, file, line, true);
 80052ea:	f000 fc2d 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80052ee:	4604      	mov	r4, r0
 80052f0:	f004 fad6 	bl	80098a0 <_Z25getCurrentMallocAllocatorv>
 80052f4:	4601      	mov	r1, r0
 80052f6:	2301      	movs	r3, #1
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4620      	mov	r0, r4
 8005304:	f00b faee 	bl	80108e4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <_ZL16mem_leak_reallocPvjPKcj>:

static void* mem_leak_realloc(void* memory, size_t size, const char* file, size_t line)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af04      	add	r7, sp, #16
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
    return MemoryLeakWarningPlugin::getGlobalDetector()->reallocMemory(getCurrentMallocAllocator(), (char*) memory, size, file, line, true);
 800531e:	f000 fc13 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005322:	4604      	mov	r4, r0
 8005324:	f004 fabc 	bl	80098a0 <_Z25getCurrentMallocAllocatorv>
 8005328:	4601      	mov	r1, r0
 800532a:	2301      	movs	r3, #1
 800532c:	9302      	str	r3, [sp, #8]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9301      	str	r3, [sp, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4620      	mov	r0, r4
 800533c:	f00b fb36 	bl	80109ac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bd90      	pop	{r4, r7, pc}
	...

0800534c <_ZL13normal_mallocjPKcj>:

#endif

static void* normal_malloc(size_t size, const char*, size_t)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005358:	4b04      	ldr	r3, [pc, #16]	; (800536c <_ZL13normal_mallocjPKcj+0x20>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	4798      	blx	r3
 8005360:	4603      	mov	r3, r0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200000c4 	.word	0x200000c4

08005370 <_ZL14normal_reallocPvjPKcj>:

static void* normal_realloc(void* memory, size_t size, const char*, size_t)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
    return PlatformSpecificRealloc(memory, size);
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <_ZL14normal_reallocPvjPKcj+0x24>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	4798      	blx	r3
 8005388:	4603      	mov	r3, r0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	200000c8 	.word	0x200000c8

08005398 <_ZL11normal_freePvPKcj>:

static void normal_free(void* buffer, const char*, size_t)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
    PlatformSpecificFree(buffer);
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <_ZL11normal_freePvPKcj+0x1c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	4798      	blx	r3
}
 80053ac:	bf00      	nop
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	200000cc 	.word	0x200000cc

080053b8 <_ZL32threadsafe_mem_leak_operator_newj>:
#else
#define UT_THROW_BAD_ALLOC_WHEN_NULL(memory)
#endif

static void* threadsafe_mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80053b8:	b590      	push	{r4, r7, lr}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
    MemLeakScopedMutex lock;
 80053c0:	f107 0308 	add.w	r3, r7, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff ff47 	bl	8005258 <_ZN18MemLeakScopedMutexC1Ev>
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 80053ca:	f000 fbbd 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80053ce:	4604      	mov	r4, r0
 80053d0:	f004 f9b6 	bl	8009740 <_Z22getCurrentNewAllocatorv>
 80053d4:	4601      	mov	r1, r0
 80053d6:	2300      	movs	r3, #0
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	4620      	mov	r0, r4
 80053dc:	f00b f9bc 	bl	8010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80053e0:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80053e2:	68fc      	ldr	r4, [r7, #12]
    MemLeakScopedMutex lock;
 80053e4:	f107 0308 	add.w	r3, r7, #8
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff4a 	bl	8005282 <_ZN18MemLeakScopedMutexD1Ev>
    return memory;
 80053ee:	4623      	mov	r3, r4
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <_ZL21mem_leak_operator_newj>:
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
}


static void* mem_leak_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 8005400:	f000 fba2 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005404:	4604      	mov	r4, r0
 8005406:	f004 f99b 	bl	8009740 <_Z22getCurrentNewAllocatorv>
 800540a:	4601      	mov	r1, r0
 800540c:	2300      	movs	r3, #0
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4620      	mov	r0, r4
 8005412:	f00b f9a1 	bl	8010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005416:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005418:	68fb      	ldr	r3, [r7, #12]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bd90      	pop	{r4, r7, pc}

08005422 <_ZL29mem_leak_operator_new_nothrowj>:

static void* mem_leak_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8005422:	b590      	push	{r4, r7, lr}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size);
 800542a:	f000 fb8d 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800542e:	4604      	mov	r4, r0
 8005430:	f004 f986 	bl	8009740 <_Z22getCurrentNewAllocatorv>
 8005434:	4601      	mov	r1, r0
 8005436:	2300      	movs	r3, #0
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	4620      	mov	r0, r4
 800543c:	f00b f98c 	bl	8010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 8005440:	4603      	mov	r3, r0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	bd90      	pop	{r4, r7, pc}

0800544a <_ZL27mem_leak_operator_new_debugjPKcj>:

static void* mem_leak_operator_new_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 800544a:	b590      	push	{r4, r7, lr}
 800544c:	b089      	sub	sp, #36	; 0x24
 800544e:	af02      	add	r7, sp, #8
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
    void *memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewAllocator(), size, file, line);
 8005456:	f000 fb77 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800545a:	4604      	mov	r4, r0
 800545c:	f004 f970 	bl	8009740 <_Z22getCurrentNewAllocatorv>
 8005460:	4601      	mov	r1, r0
 8005462:	2300      	movs	r3, #0
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4620      	mov	r0, r4
 8005470:	f00b fa04 	bl	801087c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 8005474:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005476:	697b      	ldr	r3, [r7, #20]
}
 8005478:	4618      	mov	r0, r3
 800547a:	371c      	adds	r7, #28
 800547c:	46bd      	mov	sp, r7
 800547e:	bd90      	pop	{r4, r7, pc}

08005480 <_ZL27mem_leak_operator_new_arrayj>:

static void* mem_leak_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 8005480:	b590      	push	{r4, r7, lr}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 8005488:	f000 fb5e 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 800548c:	4604      	mov	r4, r0
 800548e:	f004 f9af 	bl	80097f0 <_Z27getCurrentNewArrayAllocatorv>
 8005492:	4601      	mov	r1, r0
 8005494:	2300      	movs	r3, #0
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4620      	mov	r0, r4
 800549a:	f00b f95d 	bl	8010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 800549e:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80054a0:	68fb      	ldr	r3, [r7, #12]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd90      	pop	{r4, r7, pc}

080054aa <_ZL35mem_leak_operator_new_array_nothrowj>:

static void* mem_leak_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80054aa:	b590      	push	{r4, r7, lr}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
    return MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size);
 80054b2:	f000 fb49 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80054b6:	4604      	mov	r4, r0
 80054b8:	f004 f99a 	bl	80097f0 <_Z27getCurrentNewArrayAllocatorv>
 80054bc:	4601      	mov	r1, r0
 80054be:	2300      	movs	r3, #0
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	4620      	mov	r0, r4
 80054c4:	f00b f948 	bl	8010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>
 80054c8:	4603      	mov	r3, r0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd90      	pop	{r4, r7, pc}

080054d2 <_ZL33mem_leak_operator_new_array_debugjPKcj>:

static void* mem_leak_operator_new_array_debug (size_t size, const char* file, size_t line) UT_THROW(std::bad_alloc)
{
 80054d2:	b590      	push	{r4, r7, lr}
 80054d4:	b089      	sub	sp, #36	; 0x24
 80054d6:	af02      	add	r7, sp, #8
 80054d8:	60f8      	str	r0, [r7, #12]
 80054da:	60b9      	str	r1, [r7, #8]
 80054dc:	607a      	str	r2, [r7, #4]
    void* memory = MemoryLeakWarningPlugin::getGlobalDetector()->allocMemory(getCurrentNewArrayAllocator(), size, file, line);
 80054de:	f000 fb33 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 80054e2:	4604      	mov	r4, r0
 80054e4:	f004 f984 	bl	80097f0 <_Z27getCurrentNewArrayAllocatorv>
 80054e8:	4601      	mov	r1, r0
 80054ea:	2300      	movs	r3, #0
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4620      	mov	r0, r4
 80054f8:	f00b f9c0 	bl	801087c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 80054fc:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80054fe:	697b      	ldr	r3, [r7, #20]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	bd90      	pop	{r4, r7, pc}

08005508 <_ZL24mem_leak_operator_deletePv>:

static void mem_leak_operator_delete (void* mem) UT_NOTHROW
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8005510:	f000 fb1a 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005514:	4603      	mov	r3, r0
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4618      	mov	r0, r3
 800551a:	f00b f81b 	bl	8010554 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewAllocator(), (char*) mem);
 800551e:	f000 fb13 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005522:	4604      	mov	r4, r0
 8005524:	f004 f90c 	bl	8009740 <_Z22getCurrentNewAllocatorv>
 8005528:	4601      	mov	r1, r0
 800552a:	2300      	movs	r3, #0
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4620      	mov	r0, r4
 8005530:	f00b fa22 	bl	8010978 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8005534:	bf00      	nop
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bd90      	pop	{r4, r7, pc}

0800553c <_ZL30mem_leak_operator_delete_arrayPv>:

static void mem_leak_operator_delete_array (void* mem) UT_NOTHROW
{
 800553c:	b590      	push	{r4, r7, lr}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
    MemoryLeakWarningPlugin::getGlobalDetector()->invalidateMemory((char*) mem);
 8005544:	f000 fb00 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005548:	4603      	mov	r3, r0
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	f00b f801 	bl	8010554 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>
    MemoryLeakWarningPlugin::getGlobalDetector()->deallocMemory(getCurrentNewArrayAllocator(), (char*) mem);
 8005552:	f000 faf9 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005556:	4604      	mov	r4, r0
 8005558:	f004 f94a 	bl	80097f0 <_Z27getCurrentNewArrayAllocatorv>
 800555c:	4601      	mov	r1, r0
 800555e:	2300      	movs	r3, #0
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	4620      	mov	r0, r4
 8005564:	f00b fa08 	bl	8010978 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}

08005570 <_ZL19normal_operator_newj>:

static void* normal_operator_new (size_t size) UT_THROW(std::bad_alloc)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005578:	4b04      	ldr	r3, [pc, #16]	; (800558c <_ZL19normal_operator_newj+0x1c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	4798      	blx	r3
 8005580:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 8005582:	68fb      	ldr	r3, [r7, #12]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	200000c4 	.word	0x200000c4

08005590 <_ZL27normal_operator_new_nothrowj>:

static void* normal_operator_new_nothrow (size_t size) UT_NOTHROW
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 8005598:	4b04      	ldr	r3, [pc, #16]	; (80055ac <_ZL27normal_operator_new_nothrowj+0x1c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	4798      	blx	r3
 80055a0:	4603      	mov	r3, r0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	200000c4 	.word	0x200000c4

080055b0 <_ZL25normal_operator_new_debugjPKcj>:

static void* normal_operator_new_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80055bc:	4b04      	ldr	r3, [pc, #16]	; (80055d0 <_ZL25normal_operator_new_debugjPKcj+0x20>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	4798      	blx	r3
 80055c4:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80055c6:	697b      	ldr	r3, [r7, #20]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	200000c4 	.word	0x200000c4

080055d4 <_ZL25normal_operator_new_arrayj>:

static void* normal_operator_new_array (size_t size) UT_THROW(std::bad_alloc)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 80055dc:	4b04      	ldr	r3, [pc, #16]	; (80055f0 <_ZL25normal_operator_new_arrayj+0x1c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
 80055e4:	60f8      	str	r0, [r7, #12]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 80055e6:	68fb      	ldr	r3, [r7, #12]
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	200000c4 	.word	0x200000c4

080055f4 <_ZL33normal_operator_new_array_nothrowj>:

static void* normal_operator_new_array_nothrow (size_t size) UT_NOTHROW
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
    return PlatformSpecificMalloc(size);
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <_ZL33normal_operator_new_array_nothrowj+0x1c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	4798      	blx	r3
 8005604:	4603      	mov	r3, r0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	200000c4 	.word	0x200000c4

08005614 <_ZL31normal_operator_new_array_debugjPKcj>:

static void* normal_operator_new_array_debug (size_t size, const char* /*file*/, size_t /*line*/) UT_THROW(std::bad_alloc)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
    void* memory = PlatformSpecificMalloc(size);
 8005620:	4b04      	ldr	r3, [pc, #16]	; (8005634 <_ZL31normal_operator_new_array_debugjPKcj+0x20>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	4798      	blx	r3
 8005628:	6178      	str	r0, [r7, #20]
    UT_THROW_BAD_ALLOC_WHEN_NULL(memory);
    return memory;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200000c4 	.word	0x200000c4

08005638 <_ZL22normal_operator_deletePv>:

static void normal_operator_delete (void* mem) UT_NOTHROW
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 8005640:	4b03      	ldr	r3, [pc, #12]	; (8005650 <_ZL22normal_operator_deletePv+0x18>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	4798      	blx	r3
}
 8005648:	bf00      	nop
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	200000cc 	.word	0x200000cc

08005654 <_ZL28normal_operator_delete_arrayPv>:

static void normal_operator_delete_array (void* mem) UT_NOTHROW
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
    PlatformSpecificFree(mem);
 800565c:	4b03      	ldr	r3, [pc, #12]	; (800566c <_ZL28normal_operator_delete_arrayPv+0x18>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	200000cc 	.word	0x200000cc

08005670 <_Znwj>:
static void (*saved_operator_delete_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete;
static void (*saved_operator_delete_array_fptr)(void* mem) UT_NOTHROW = mem_leak_operator_delete_array;
static int save_counter = 0;

void* operator new(size_t size) UT_THROW(std::bad_alloc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    return operator_new_fptr(size);
 8005678:	4b04      	ldr	r3, [pc, #16]	; (800568c <_Znwj+0x1c>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000028 	.word	0x20000028

08005690 <_ZnwjPKci>:

void* operator new(size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
    return operator_new_debug_fptr(size, file, (size_t)line);
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <_ZnwjPKci+0x24>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	68b9      	ldr	r1, [r7, #8]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	4798      	blx	r3
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000030 	.word	0x20000030

080056b8 <_ZdlPvj>:
    operator_delete_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete (void* mem, size_t) UT_NOTHROW
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
    operator_delete_fptr(mem);
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <_ZdlPvj+0x1c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000040 	.word	0x20000040

080056d8 <_ZnajPKci>:
{
    return operator_new_array_fptr(size);
}

void* operator new [](size_t size, const char* file, int line) UT_THROW(std::bad_alloc)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
    return operator_new_array_debug_fptr(size, file, (size_t)line);
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <_ZnajPKci+0x24>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	68b9      	ldr	r1, [r7, #8]
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	4798      	blx	r3
 80056f0:	4603      	mov	r3, r0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	2000003c 	.word	0x2000003c

08005700 <_ZdaPv>:
{
    return operator_new_array_debug_fptr(size, file, line);
}

void operator delete[](void* mem) UT_NOTHROW
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
     operator_delete_array_fptr(mem);
 8005708:	4b03      	ldr	r3, [pc, #12]	; (8005718 <_ZdaPv+0x18>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	4798      	blx	r3
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	20000044 	.word	0x20000044

0800571c <_ZdaPvj>:
     operator_delete_array_fptr(mem);
}

#if __cplusplus >= 201402L
void operator delete[] (void* mem, size_t) UT_NOTHROW
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
     operator_delete_array_fptr(mem);
 8005726:	4b04      	ldr	r3, [pc, #16]	; (8005738 <_ZdaPvj+0x1c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	4798      	blx	r3
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000044 	.word	0x20000044

0800573c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>:

#endif
#endif

void MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    operator_new_fptr = normal_operator_new;
 8005740:	4b12      	ldr	r3, [pc, #72]	; (800578c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x50>)
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x54>)
 8005744:	601a      	str	r2, [r3, #0]
    operator_new_nothrow_fptr = normal_operator_new_nothrow;
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x58>)
 8005748:	4a13      	ldr	r2, [pc, #76]	; (8005798 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x5c>)
 800574a:	601a      	str	r2, [r3, #0]
    operator_new_debug_fptr = normal_operator_new_debug;
 800574c:	4b13      	ldr	r3, [pc, #76]	; (800579c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x60>)
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x64>)
 8005750:	601a      	str	r2, [r3, #0]
    operator_new_array_fptr = normal_operator_new_array;
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x68>)
 8005754:	4a14      	ldr	r2, [pc, #80]	; (80057a8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x6c>)
 8005756:	601a      	str	r2, [r3, #0]
    operator_new_array_nothrow_fptr = normal_operator_new_array_nothrow;
 8005758:	4b14      	ldr	r3, [pc, #80]	; (80057ac <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x70>)
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x74>)
 800575c:	601a      	str	r2, [r3, #0]
    operator_new_array_debug_fptr = normal_operator_new_array_debug;
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x78>)
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x7c>)
 8005762:	601a      	str	r2, [r3, #0]
    operator_delete_fptr = normal_operator_delete;
 8005764:	4b15      	ldr	r3, [pc, #84]	; (80057bc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x80>)
 8005766:	4a16      	ldr	r2, [pc, #88]	; (80057c0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x84>)
 8005768:	601a      	str	r2, [r3, #0]
    operator_delete_array_fptr = normal_operator_delete_array;
 800576a:	4b16      	ldr	r3, [pc, #88]	; (80057c4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x88>)
 800576c:	4a16      	ldr	r2, [pc, #88]	; (80057c8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x8c>)
 800576e:	601a      	str	r2, [r3, #0]
    malloc_fptr = normal_malloc;
 8005770:	4b16      	ldr	r3, [pc, #88]	; (80057cc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x90>)
 8005772:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x94>)
 8005774:	601a      	str	r2, [r3, #0]
    realloc_fptr = normal_realloc;
 8005776:	4b17      	ldr	r3, [pc, #92]	; (80057d4 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x98>)
 8005778:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0x9c>)
 800577a:	601a      	str	r2, [r3, #0]
    free_fptr = normal_free;
 800577c:	4b17      	ldr	r3, [pc, #92]	; (80057dc <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa0>)
 800577e:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv+0xa4>)
 8005780:	601a      	str	r2, [r3, #0]

#endif
}
 8005782:	bf00      	nop
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	20000028 	.word	0x20000028
 8005790:	08005571 	.word	0x08005571
 8005794:	2000002c 	.word	0x2000002c
 8005798:	08005591 	.word	0x08005591
 800579c:	20000030 	.word	0x20000030
 80057a0:	080055b1 	.word	0x080055b1
 80057a4:	20000034 	.word	0x20000034
 80057a8:	080055d5 	.word	0x080055d5
 80057ac:	20000038 	.word	0x20000038
 80057b0:	080055f5 	.word	0x080055f5
 80057b4:	2000003c 	.word	0x2000003c
 80057b8:	08005615 	.word	0x08005615
 80057bc:	20000040 	.word	0x20000040
 80057c0:	08005639 	.word	0x08005639
 80057c4:	20000044 	.word	0x20000044
 80057c8:	08005655 	.word	0x08005655
 80057cc:	20000010 	.word	0x20000010
 80057d0:	0800534d 	.word	0x0800534d
 80057d4:	20000018 	.word	0x20000018
 80057d8:	08005371 	.word	0x08005371
 80057dc:	20000014 	.word	0x20000014
 80057e0:	08005399 	.word	0x08005399

080057e4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>:
    free_fptr = threadsafe_mem_leak_free;
#endif
}

bool MemoryLeakWarningPlugin::areNewDeleteOverloaded()
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    return operator_new_fptr == mem_leak_operator_new || operator_new_fptr == threadsafe_mem_leak_operator_new;
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a08      	ldr	r2, [pc, #32]	; (8005810 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x2c>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x18>
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x28>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a07      	ldr	r2, [pc, #28]	; (8005814 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x30>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d101      	bne.n	8005800 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1c>
 80057fc:	2301      	movs	r3, #1
 80057fe:	e000      	b.n	8005802 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv+0x1e>
 8005800:	2300      	movs	r3, #0
#else
    return false;
#endif
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	20000028 	.word	0x20000028
 8005810:	080053f9 	.word	0x080053f9
 8005814:	080053b9 	.word	0x080053b9

08005818 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (++save_counter > 1) return;
 800581c:	4b1f      	ldr	r3, [pc, #124]	; (800589c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3301      	adds	r3, #1
 8005822:	4a1e      	ldr	r2, [pc, #120]	; (800589c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x84>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b01      	cmp	r3, #1
 800582c:	bfcc      	ite	gt
 800582e:	2301      	movgt	r3, #1
 8005830:	2300      	movle	r3, #0
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d12e      	bne.n	8005896 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x7e>
    saved_operator_new_fptr = operator_new_fptr;
 8005838:	4b19      	ldr	r3, [pc, #100]	; (80058a0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x88>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a19      	ldr	r2, [pc, #100]	; (80058a4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x8c>)
 800583e:	6013      	str	r3, [r2, #0]
    saved_operator_new_nothrow_fptr = operator_new_nothrow_fptr;
 8005840:	4b19      	ldr	r3, [pc, #100]	; (80058a8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x90>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a19      	ldr	r2, [pc, #100]	; (80058ac <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x94>)
 8005846:	6013      	str	r3, [r2, #0]
    saved_operator_new_debug_fptr = operator_new_debug_fptr;
 8005848:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x98>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x9c>)
 800584e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_fptr = operator_new_array_fptr;
 8005850:	4b19      	ldr	r3, [pc, #100]	; (80058b8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa0>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa4>)
 8005856:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_nothrow_fptr = operator_new_array_nothrow_fptr;
 8005858:	4b19      	ldr	r3, [pc, #100]	; (80058c0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xa8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xac>)
 800585e:	6013      	str	r3, [r2, #0]
    saved_operator_new_array_debug_fptr = operator_new_array_debug_fptr;
 8005860:	4b19      	ldr	r3, [pc, #100]	; (80058c8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb0>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb4>)
 8005866:	6013      	str	r3, [r2, #0]
    saved_operator_delete_fptr = operator_delete_fptr;
 8005868:	4b19      	ldr	r3, [pc, #100]	; (80058d0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xb8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xbc>)
 800586e:	6013      	str	r3, [r2, #0]
    saved_operator_delete_array_fptr = operator_delete_array_fptr;
 8005870:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a19      	ldr	r2, [pc, #100]	; (80058dc <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc4>)
 8005876:	6013      	str	r3, [r2, #0]
    saved_malloc_fptr = malloc_fptr;
 8005878:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xc8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a19      	ldr	r2, [pc, #100]	; (80058e4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xcc>)
 800587e:	6013      	str	r3, [r2, #0]
    saved_realloc_fptr = realloc_fptr;
 8005880:	4b19      	ldr	r3, [pc, #100]	; (80058e8 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a19      	ldr	r2, [pc, #100]	; (80058ec <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd4>)
 8005886:	6013      	str	r3, [r2, #0]
    saved_free_fptr = free_fptr;
 8005888:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xd8>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0xdc>)
 800588e:	6013      	str	r3, [r2, #0]
    turnOffNewDeleteOverloads();
 8005890:	f7ff ff54 	bl	800573c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
 8005894:	e000      	b.n	8005898 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv+0x80>
    if (++save_counter > 1) return;
 8005896:	bf00      	nop
#endif
}
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000478 	.word	0x20000478
 80058a0:	20000028 	.word	0x20000028
 80058a4:	20000048 	.word	0x20000048
 80058a8:	2000002c 	.word	0x2000002c
 80058ac:	2000004c 	.word	0x2000004c
 80058b0:	20000030 	.word	0x20000030
 80058b4:	20000050 	.word	0x20000050
 80058b8:	20000034 	.word	0x20000034
 80058bc:	20000054 	.word	0x20000054
 80058c0:	20000038 	.word	0x20000038
 80058c4:	20000058 	.word	0x20000058
 80058c8:	2000003c 	.word	0x2000003c
 80058cc:	2000005c 	.word	0x2000005c
 80058d0:	20000040 	.word	0x20000040
 80058d4:	20000060 	.word	0x20000060
 80058d8:	20000044 	.word	0x20000044
 80058dc:	20000064 	.word	0x20000064
 80058e0:	20000010 	.word	0x20000010
 80058e4:	2000001c 	.word	0x2000001c
 80058e8:	20000018 	.word	0x20000018
 80058ec:	20000024 	.word	0x20000024
 80058f0:	20000014 	.word	0x20000014
 80058f4:	20000020 	.word	0x20000020

080058f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>:

void MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
#if CPPUTEST_USE_MEM_LEAK_DETECTION
    if (--save_counter > 0) return;
 80058fc:	4b1f      	ldr	r3, [pc, #124]	; (800597c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3b01      	subs	r3, #1
 8005902:	4a1e      	ldr	r2, [pc, #120]	; (800597c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	4b1d      	ldr	r3, [pc, #116]	; (800597c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x84>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	bfcc      	ite	gt
 800590e:	2301      	movgt	r3, #1
 8005910:	2300      	movle	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d12c      	bne.n	8005972 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7a>
    operator_new_fptr = saved_operator_new_fptr;
 8005918:	4b19      	ldr	r3, [pc, #100]	; (8005980 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x88>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a19      	ldr	r2, [pc, #100]	; (8005984 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x8c>)
 800591e:	6013      	str	r3, [r2, #0]
    operator_new_nothrow_fptr = saved_operator_new_nothrow_fptr;
 8005920:	4b19      	ldr	r3, [pc, #100]	; (8005988 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x90>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x94>)
 8005926:	6013      	str	r3, [r2, #0]
    operator_new_debug_fptr = saved_operator_new_debug_fptr;
 8005928:	4b19      	ldr	r3, [pc, #100]	; (8005990 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x98>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a19      	ldr	r2, [pc, #100]	; (8005994 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x9c>)
 800592e:	6013      	str	r3, [r2, #0]
    operator_new_array_fptr = saved_operator_new_array_fptr;
 8005930:	4b19      	ldr	r3, [pc, #100]	; (8005998 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa0>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa4>)
 8005936:	6013      	str	r3, [r2, #0]
    operator_new_array_nothrow_fptr = saved_operator_new_array_nothrow_fptr;
 8005938:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xa8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xac>)
 800593e:	6013      	str	r3, [r2, #0]
    operator_new_array_debug_fptr = saved_operator_new_array_debug_fptr;
 8005940:	4b19      	ldr	r3, [pc, #100]	; (80059a8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb0>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a19      	ldr	r2, [pc, #100]	; (80059ac <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb4>)
 8005946:	6013      	str	r3, [r2, #0]
    operator_delete_fptr = saved_operator_delete_fptr;
 8005948:	4b19      	ldr	r3, [pc, #100]	; (80059b0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xb8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a19      	ldr	r2, [pc, #100]	; (80059b4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xbc>)
 800594e:	6013      	str	r3, [r2, #0]
    operator_delete_array_fptr = saved_operator_delete_array_fptr;
 8005950:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc4>)
 8005956:	6013      	str	r3, [r2, #0]
    malloc_fptr = saved_malloc_fptr;
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xc8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xcc>)
 800595e:	6013      	str	r3, [r2, #0]
    realloc_fptr = saved_realloc_fptr;
 8005960:	4b19      	ldr	r3, [pc, #100]	; (80059c8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd0>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd4>)
 8005966:	6013      	str	r3, [r2, #0]
    free_fptr = saved_free_fptr;
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xd8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a19      	ldr	r2, [pc, #100]	; (80059d4 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0xdc>)
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	e000      	b.n	8005974 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv+0x7c>
    if (--save_counter > 0) return;
 8005972:	bf00      	nop
#endif
}
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	20000478 	.word	0x20000478
 8005980:	20000048 	.word	0x20000048
 8005984:	20000028 	.word	0x20000028
 8005988:	2000004c 	.word	0x2000004c
 800598c:	2000002c 	.word	0x2000002c
 8005990:	20000050 	.word	0x20000050
 8005994:	20000030 	.word	0x20000030
 8005998:	20000054 	.word	0x20000054
 800599c:	20000034 	.word	0x20000034
 80059a0:	20000058 	.word	0x20000058
 80059a4:	20000038 	.word	0x20000038
 80059a8:	2000005c 	.word	0x2000005c
 80059ac:	2000003c 	.word	0x2000003c
 80059b0:	20000060 	.word	0x20000060
 80059b4:	20000040 	.word	0x20000040
 80059b8:	20000064 	.word	0x20000064
 80059bc:	20000044 	.word	0x20000044
 80059c0:	2000001c 	.word	0x2000001c
 80059c4:	20000010 	.word	0x20000010
 80059c8:	20000024 	.word	0x20000024
 80059cc:	20000018 	.word	0x20000018
 80059d0:	20000020 	.word	0x20000020
 80059d4:	20000014 	.word	0x20000014

080059d8 <_ZN25MemoryLeakWarningReporterD1Ev>:
}

class MemoryLeakWarningReporter: public MemoryLeakFailure
{
public:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
    {
 80059e0:	4a05      	ldr	r2, [pc, #20]	; (80059f8 <_ZN25MemoryLeakWarningReporterD1Ev+0x20>)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	601a      	str	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fc15 	bl	8005218 <_ZN17MemoryLeakFailureD1Ev>
    }
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08016644 	.word	0x08016644

080059fc <_ZN25MemoryLeakWarningReporterD0Ev>:
    virtual ~MemoryLeakWarningReporter() _destructor_override
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
    }
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ffe7 	bl	80059d8 <_ZN25MemoryLeakWarningReporterD1Ev>
 8005a0a:	2104      	movs	r1, #4
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f7ff fe53 	bl	80056b8 <_ZdlPvj>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <_ZN14TestTerminatorC1Ev>:
    virtual void testBody();
};

//////////////////// TestTerminator

class TestTerminator
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <_ZN14TestTerminatorC1Ev+0x1c>)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	08016e8c 	.word	0x08016e8c

08005a3c <_ZN31TestTerminatorWithoutExceptionsC1Ev>:
public:
    virtual void exitCurrentTest() const _override;
    virtual ~NormalTestTerminator() _destructor_override;
};

class TestTerminatorWithoutExceptions  : public TestTerminator
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff ffe8 	bl	8005a1c <_ZN14TestTerminatorC1Ev>
 8005a4c:	4a03      	ldr	r2, [pc, #12]	; (8005a5c <_ZN31TestTerminatorWithoutExceptionsC1Ev+0x20>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	601a      	str	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	08016e64 	.word	0x08016e64

08005a60 <_ZN25MemoryLeakWarningReporter4failEPc>:

    virtual void fail(char* fail_string) _override
 8005a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a62:	b099      	sub	sp, #100	; 0x64
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
    {
        UtestShell* currentTest = UtestShell::getCurrent();
 8005a6a:	f007 ff59 	bl	800d920 <_ZN10UtestShell10getCurrentEv>
 8005a6e:	6578      	str	r0, [r7, #84]	; 0x54
        currentTest->failWith(FailFailure(currentTest, currentTest->getName().asCharString(), currentTest->getLineNumber(), fail_string), TestTerminatorWithoutExceptions());
 8005a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	339c      	adds	r3, #156	; 0x9c
 8005a76:	681c      	ldr	r4, [r3, #0]
 8005a78:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f006 fdb0 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8005a84:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 f875 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8005a8e:	4605      	mov	r5, r0
 8005a90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005a92:	f006 fe3e 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 8005a96:	4606      	mov	r6, r0
 8005a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 fcdf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8005aa4:	f107 000c 	add.w	r0, r7, #12
 8005aa8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4633      	mov	r3, r6
 8005ab0:	462a      	mov	r2, r5
 8005ab2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ab4:	f002 ff2c 	bl	8008910 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	653b      	str	r3, [r7, #80]	; 0x50
 8005abc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff ffbb 	bl	8005a3c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 8005ac6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8005aca:	f107 030c 	add.w	r3, r7, #12
 8005ace:	4619      	mov	r1, r3
 8005ad0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005ad2:	47a0      	blx	r4
 8005ad4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f008 f81b 	bl	800db14 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f9ac 	bl	8005e40 <_ZN11FailFailureD1Ev>
 8005ae8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 f870 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8005af2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f86b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    } // LCOV_EXCL_LINE
 8005afc:	bf00      	nop
 8005afe:	375c      	adds	r7, #92	; 0x5c
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005b04 <_ZN17MemoryLeakFailureC1Ev>:
class MemoryLeakFailure
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	; (8005b20 <_ZN17MemoryLeakFailureC1Ev+0x1c>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	601a      	str	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4618      	mov	r0, r3
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	08016658 	.word	0x08016658

08005b24 <_ZN25MemoryLeakWarningReporterC1Ev>:
class MemoryLeakWarningReporter: public MemoryLeakFailure
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff ffe8 	bl	8005b04 <_ZN17MemoryLeakFailureC1Ev>
 8005b34:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <_ZN25MemoryLeakWarningReporterC1Ev+0x20>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	601a      	str	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	08016644 	.word	0x08016644

08005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>:

static MemoryLeakFailure* globalReporter = NULLPTR;
static MemoryLeakDetector* globalDetector = NULLPTR;

MemoryLeakDetector* MemoryLeakWarningPlugin::getGlobalDetector()
{
 8005b48:	b598      	push	{r3, r4, r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
    if (globalDetector == NULLPTR) {
 8005b4c:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11b      	bne.n	8005b8c <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x44>
        saveAndDisableNewDeleteOverloads();
 8005b54:	f7ff fe60 	bl	8005818 <_ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv>

        globalReporter = new MemoryLeakWarningReporter;
 8005b58:	2004      	movs	r0, #4
 8005b5a:	f7ff fd89 	bl	8005670 <_Znwj>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461c      	mov	r4, r3
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff ffde 	bl	8005b24 <_ZN25MemoryLeakWarningReporterC1Ev>
 8005b68:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8005b6a:	601c      	str	r4, [r3, #0]
        globalDetector = new MemoryLeakDetector(globalReporter);
 8005b6c:	f241 1050 	movw	r0, #4432	; 0x1150
 8005b70:	f7ff fd7e 	bl	8005670 <_Znwj>
 8005b74:	4603      	mov	r3, r0
 8005b76:	461c      	mov	r4, r3
 8005b78:	4b07      	ldr	r3, [pc, #28]	; (8005b98 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x50>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f00a fb96 	bl	80102b0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>
 8005b84:	4b03      	ldr	r3, [pc, #12]	; (8005b94 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8005b86:	601c      	str	r4, [r3, #0]

        restoreNewDeleteOverloads();
 8005b88:	f7ff feb6 	bl	80058f8 <_ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv>
    }
    return globalDetector;
 8005b8c:	4b01      	ldr	r3, [pc, #4]	; (8005b94 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv+0x4c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	bd98      	pop	{r3, r4, r7, pc}
 8005b94:	20000480 	.word	0x20000480
 8005b98:	2000047c 	.word	0x2000047c

08005b9c <_ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb>:
{
    return globalReporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool des)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
    destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_ = des;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	78fa      	ldrb	r2, [r7, #3]
 8005bac:	765a      	strb	r2, [r3, #25]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>:
    globalDetector = detector;
    globalReporter = reporter;
}

void MemoryLeakWarningPlugin::destroyGlobalDetector()
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
    turnOffNewDeleteOverloads();
 8005bc0:	f7ff fdbc 	bl	800573c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
    delete globalDetector;
 8005bc4:	4b0b      	ldr	r3, [pc, #44]	; (8005bf4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x1a>
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	3204      	adds	r2, #4
 8005bd0:	6812      	ldr	r2, [r2, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	4790      	blx	r2
    delete globalReporter;
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x3c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d004      	beq.n	8005be8 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x2c>
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	3204      	adds	r2, #4
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	4790      	blx	r2
    globalDetector = NULLPTR;
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv+0x38>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	601a      	str	r2, [r3, #0]
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000480 	.word	0x20000480
 8005bf8:	2000047c 	.word	0x2000047c

08005bfc <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector>:
void MemoryLeakWarningPlugin::expectLeaksInTest(size_t n)
{
    expectedLeaks_ = n;
}

MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString& name, MemoryLeakDetector* localDetector) :
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
    TestPlugin(name), ignoreAllWarnings_(false), destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_(false), expectedLeaks_(0)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f005 f815 	bl	800ac3c <_ZN10TestPluginC1ERK12SimpleString>
 8005c12:	4a14      	ldr	r2, [pc, #80]	; (8005c64 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x68>)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	601a      	str	r2, [r3, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	761a      	strb	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	765a      	strb	r2, [r3, #25]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
{
    if (firstPlugin_ == NULLPTR) firstPlugin_ = this;
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d102      	bne.n	8005c38 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x3c>
 8005c32:	4a0d      	ldr	r2, [pc, #52]	; (8005c68 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x6c>)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6013      	str	r3, [r2, #0]

    if (localDetector) memLeakDetector_ = localDetector;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x4a>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	615a      	str	r2, [r3, #20]
 8005c44:	e004      	b.n	8005c50 <_ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector+0x54>
    else memLeakDetector_ = getGlobalDetector();
 8005c46:	f7ff ff7f 	bl	8005b48 <_ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	615a      	str	r2, [r3, #20]

    memLeakDetector_->enable();
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	4618      	mov	r0, r3
 8005c56:	f00a fbc1 	bl	80103dc <_ZN18MemoryLeakDetector6enableEv>
}
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	0801666c 	.word	0x0801666c
 8005c68:	20000484 	.word	0x20000484

08005c6c <_ZN23MemoryLeakWarningPluginD1Ev>:

MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <_ZN23MemoryLeakWarningPluginD1Ev+0x30>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
{
    if (destroyGlobalDetectorAndTurnOfMemoryLeakDetectionInDestructor_) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	7e5b      	ldrb	r3, [r3, #25]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <_ZN23MemoryLeakWarningPluginD1Ev+0x1e>
        MemoryLeakWarningPlugin::turnOffNewDeleteOverloads();
 8005c82:	f7ff fd5b 	bl	800573c <_ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv>
        MemoryLeakWarningPlugin::destroyGlobalDetector();
 8005c86:	f7ff ff99 	bl	8005bbc <_ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv>
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f005 f811 	bl	800acb4 <_ZN10TestPluginD1Ev>
    }
}
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	0801666c 	.word	0x0801666c

08005ca0 <_ZN23MemoryLeakWarningPluginD0Ev>:
MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
}
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7ff ffdf 	bl	8005c6c <_ZN23MemoryLeakWarningPluginD1Ev>
 8005cae:	2124      	movs	r1, #36	; 0x24
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fd01 	bl	80056b8 <_ZdlPvj>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <_ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::preTestAction(UtestShell& /*test*/, TestResult& result)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
    memLeakDetector_->startChecking();
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f00a fb66 	bl	80103a2 <_ZN18MemoryLeakDetector13startCheckingEv>
    failureCount_ = result.getFailureCount();
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fd ffaf 	bl	8003c3a <_ZNK10TestResult15getFailureCountEv>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
	...

08005cec <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult>:

void MemoryLeakWarningPlugin::postTestAction(UtestShell& test, TestResult& result)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b097      	sub	sp, #92	; 0x5c
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
    memLeakDetector_->stopChecking();
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f00a fb60 	bl	80103c2 <_ZN18MemoryLeakDetector12stopCheckingEv>
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_checking);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2103      	movs	r1, #3
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f00a fefd 	bl	8010b08 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8005d0e:	6578      	str	r0, [r7, #84]	; 0x54

    if (!ignoreAllWarnings_ && expectedLeaks_ != leaks && failureCount_ == result.getFailureCount()) {
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	7e1b      	ldrb	r3, [r3, #24]
 8005d14:	f083 0301 	eor.w	r3, r3, #1
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00e      	beq.n	8005d3c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	69db      	ldr	r3, [r3, #28]
 8005d22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d009      	beq.n	8005d3c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a1c      	ldr	r4, [r3, #32]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7fd ff84 	bl	8003c3a <_ZNK10TestResult15getFailureCountEv>
 8005d32:	4603      	mov	r3, r0
 8005d34:	429c      	cmp	r4, r3
 8005d36:	d101      	bne.n	8005d3c <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x50>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x52>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d04c      	beq.n	8005ddc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        if(MemoryLeakWarningPlugin::areNewDeleteOverloaded()) {
 8005d42:	f7ff fd4f 	bl	80057e4 <_ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d028      	beq.n	8005d9e <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xb2>
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	2103      	movs	r1, #3
 8005d52:	4618      	mov	r0, r3
 8005d54:	f00a fe9d 	bl	8010a92 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f000 fb7e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8005d66:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8005d6a:	f107 0310 	add.w	r3, r7, #16
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f002 f8c7 	bl	8007f04 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 8005d76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 ff29 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            result.addFailure(f);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3334      	adds	r3, #52	; 0x34
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f107 0210 	add.w	r2, r7, #16
 8005d8c:	4611      	mov	r1, r2
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	4798      	blx	r3
            TestFailure f(&test, memLeakDetector_->report(mem_leak_period_checking));
 8005d92:	f107 0310 	add.w	r3, r7, #16
 8005d96:	4618      	mov	r0, r3
 8005d98:	f002 f974 	bl	8008084 <_ZN11TestFailureD1Ev>
 8005d9c:	e01e      	b.n	8005ddc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
        } else if(expectedLeaks_ > 0) {
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d01a      	beq.n	8005ddc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0xf0>
            result.print(StringFromFormat("Warning: Expected %d leak(s), but leak detection was disabled", (int) expectedLeaks_).asCharString());
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3338      	adds	r3, #56	; 0x38
 8005dac:	681c      	ldr	r4, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	69db      	ldr	r3, [r3, #28]
 8005db2:	461a      	mov	r2, r3
 8005db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005db8:	4910      	ldr	r1, [pc, #64]	; (8005dfc <_ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult+0x110>)
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 fb96 	bl	80074ec <_Z16StringFromFormatPKcz>
 8005dc0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fed7 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4619      	mov	r1, r3
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	47a0      	blx	r4
 8005dd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f000 fefb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        }
    }
    memLeakDetector_->markCheckingPeriodLeaksAsNonCheckingPeriod();
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f00a fe6b 	bl	8010abc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>
    ignoreAllWarnings_ = false;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2200      	movs	r2, #0
 8005dea:	761a      	strb	r2, [r3, #24]
    expectedLeaks_ = 0;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	61da      	str	r2, [r3, #28]
}
 8005df2:	bf00      	nop
 8005df4:	375c      	adds	r7, #92	; 0x5c
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd90      	pop	{r4, r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08014958 	.word	0x08014958

08005e00 <_ZN23MemoryLeakWarningPlugin11FinalReportEj>:

const char* MemoryLeakWarningPlugin::FinalReport(size_t toBeDeletedLeaks)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
    size_t leaks = memLeakDetector_->totalMemoryLeaks(mem_leak_period_enabled);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f00a fe79 	bl	8010b08 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>
 8005e16:	60f8      	str	r0, [r7, #12]
    if (leaks != toBeDeletedLeaks) return memLeakDetector_->report(mem_leak_period_enabled);
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d007      	beq.n	8005e30 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x30>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	695b      	ldr	r3, [r3, #20]
 8005e24:	2102      	movs	r1, #2
 8005e26:	4618      	mov	r0, r3
 8005e28:	f00a fe33 	bl	8010a92 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	e000      	b.n	8005e32 <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x32>
    return "";
 8005e30:	4b02      	ldr	r3, [pc, #8]	; (8005e3c <_ZN23MemoryLeakWarningPlugin11FinalReportEj+0x3c>)
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	08014998 	.word	0x08014998

08005e40 <_ZN11FailFailureD1Ev>:
{
public:
    CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& textString = "");
};

class FailFailure : public TestFailure
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <_ZN11FailFailureD1Ev+0x20>)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f002 f917 	bl	8008084 <_ZN11TestFailureD1Ev>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	080166b4 	.word	0x080166b4

08005e64 <_ZN11FailFailureD0Ev>:
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff ffe7 	bl	8005e40 <_ZN11FailFailureD1Ev>
 8005e72:	2134      	movs	r1, #52	; 0x34
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fc1f 	bl	80056b8 <_ZdlPvj>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <_ZN11SimpleMutexC1Ev>:
 */
#include "CppUTest/TestHarness.h"
#include "CppUTest/SimpleMutex.h"


SimpleMutex::SimpleMutex(void)
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
{
    psMtx = PlatformSpecificMutexCreate();
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <_ZN11SimpleMutexC1Ev+0x20>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4798      	blx	r3
 8005e92:	4602      	mov	r2, r0
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	601a      	str	r2, [r3, #0]
}
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	200000e8 	.word	0x200000e8

08005ea8 <_ZN11SimpleMutexD1Ev>:

SimpleMutex::~SimpleMutex(void)
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
{
    PlatformSpecificMutexDestroy(psMtx);
 8005eb0:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <_ZN11SimpleMutexD1Ev+0x20>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
}
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	200000f4 	.word	0x200000f4

08005ecc <_ZN11SimpleMutex4LockEv>:

void SimpleMutex::Lock(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexLock(psMtx);
 8005ed4:	4b04      	ldr	r3, [pc, #16]	; (8005ee8 <_ZN11SimpleMutex4LockEv+0x1c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6812      	ldr	r2, [r2, #0]
 8005edc:	4610      	mov	r0, r2
 8005ede:	4798      	blx	r3
}
 8005ee0:	bf00      	nop
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	200000ec 	.word	0x200000ec

08005eec <_ZN11SimpleMutex6UnlockEv>:

void SimpleMutex::Unlock(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    PlatformSpecificMutexUnlock(psMtx);
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <_ZN11SimpleMutex6UnlockEv+0x1c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	4610      	mov	r0, r2
 8005efe:	4798      	blx	r3
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200000f0 	.word	0x200000f0

08005f0c <_ZN15ScopedMutexLockC1EP11SimpleMutex>:


ScopedMutexLock::ScopedMutexLock(SimpleMutex *mtx) :
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
    mutex(mtx)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	601a      	str	r2, [r3, #0]
{
    mutex->Lock();
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff ffd3 	bl	8005ecc <_ZN11SimpleMutex4LockEv>
}
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_ZN15ScopedMutexLockD1Ev>:

ScopedMutexLock::~ScopedMutexLock()
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
{
    mutex->Unlock();
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff ffd5 	bl	8005eec <_ZN11SimpleMutex6UnlockEv>
}
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <_ZN12SimpleString18getStringAllocatorEv>:
}

TestMemoryAllocator* SimpleString::stringAllocator_ = NULLPTR;

TestMemoryAllocator* SimpleString::getStringAllocator()
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
    if (stringAllocator_ == NULLPTR)
 8005f50:	4b05      	ldr	r3, [pc, #20]	; (8005f68 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d103      	bne.n	8005f60 <_ZN12SimpleString18getStringAllocatorEv+0x14>
        return defaultNewArrayAllocator();
 8005f58:	f003 fc6c 	bl	8009834 <_Z24defaultNewArrayAllocatorv>
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	e001      	b.n	8005f64 <_ZN12SimpleString18getStringAllocatorEv+0x18>
    return stringAllocator_;
 8005f60:	4b01      	ldr	r3, [pc, #4]	; (8005f68 <_ZN12SimpleString18getStringAllocatorEv+0x1c>)
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000488 	.word	0x20000488

08005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>:
    stringAllocator_ = allocator;
}

/* Avoid using the memory leak detector INSIDE SimpleString as its used inside the detector */
char* SimpleString::allocStringBuffer(size_t _size, const char* file, size_t line)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
    return getStringAllocator()->alloc_memory(_size, file, line);
 8005f78:	f7ff ffe8 	bl	8005f4c <_ZN12SimpleString18getStringAllocatorEv>
 8005f7c:	6803      	ldr	r3, [r0, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	681c      	ldr	r4, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	47a0      	blx	r4
 8005f8a:	4603      	mov	r3, r0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3714      	adds	r7, #20
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd90      	pop	{r4, r7, pc}

08005f94 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>:

void SimpleString::deallocStringBuffer(char* str, size_t size, const char* file, size_t line)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
    getStringAllocator()->free_memory(str, size, file, line);
 8005fa2:	f7ff ffd3 	bl	8005f4c <_ZN12SimpleString18getStringAllocatorEv>
 8005fa6:	6803      	ldr	r3, [r0, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	681c      	ldr	r4, [r3, #0]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	68ba      	ldr	r2, [r7, #8]
 8005fb4:	68f9      	ldr	r1, [r7, #12]
 8005fb6:	47a0      	blx	r4
}
 8005fb8:	bf00      	nop
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd90      	pop	{r4, r7, pc}

08005fc0 <_ZNK12SimpleString14getEmptyStringEv>:

char* SimpleString::getEmptyString() const
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    char* empty = allocStringBuffer(1, __FILE__, __LINE__);
 8005fc8:	2284      	movs	r2, #132	; 0x84
 8005fca:	4906      	ldr	r1, [pc, #24]	; (8005fe4 <_ZNK12SimpleString14getEmptyStringEv+0x24>)
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7ff ffcd 	bl	8005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8005fd2:	60f8      	str	r0, [r7, #12]
    empty[0] = '\0';
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
    return empty;
 8005fda:	68fb      	ldr	r3, [r7, #12]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	0801499c 	.word	0x0801499c

08005fe8 <_ZN12SimpleString4AtoUEPKc>:

// does not support + or - prefixes
unsigned SimpleString::AtoU(const char* str)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f001 f809 	bl	800700c <_ZN12SimpleString7isSpaceEc>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d003      	beq.n	8006008 <_ZN12SimpleString4AtoUEPKc+0x20>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3301      	adds	r3, #1
 8006004:	607b      	str	r3, [r7, #4]
 8006006:	e7f3      	b.n	8005ff0 <_ZN12SimpleString4AtoUEPKc+0x8>

    unsigned result = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 ffe7 	bl	8006fe4 <_ZN12SimpleString7isDigitEc>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <_ZN12SimpleString4AtoUEPKc+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b2f      	cmp	r3, #47	; 0x2f
 8006022:	d901      	bls.n	8006028 <_ZN12SimpleString4AtoUEPKc+0x40>
 8006024:	2301      	movs	r3, #1
 8006026:	e000      	b.n	800602a <_ZN12SimpleString4AtoUEPKc+0x42>
 8006028:	2300      	movs	r3, #0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <_ZN12SimpleString4AtoUEPKc+0x68>
    {
        result *= 10;
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4613      	mov	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	005b      	lsls	r3, r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
        result += static_cast<unsigned>(*str - '0');
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	461a      	mov	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	3b30      	subs	r3, #48	; 0x30
 8006046:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str) && *str >= '0'; str++)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3301      	adds	r3, #1
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	e7dd      	b.n	800600c <_ZN12SimpleString4AtoUEPKc+0x24>
    }
    return result;
 8006050:	68fb      	ldr	r3, [r7, #12]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <_ZN12SimpleString4AtoIEPKc>:

int SimpleString::AtoI(const char* str)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b084      	sub	sp, #16
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
    while (isSpace(*str)) str++;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f000 ffd0 	bl	800700c <_ZN12SimpleString7isSpaceEc>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <_ZN12SimpleString4AtoIEPKc+0x20>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3301      	adds	r3, #1
 8006076:	607b      	str	r3, [r7, #4]
 8006078:	e7f3      	b.n	8006062 <_ZN12SimpleString4AtoIEPKc+0x8>

    char first_char = *str;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	72fb      	strb	r3, [r7, #11]
    if (first_char == '-' || first_char == '+') str++;
 8006080:	7afb      	ldrb	r3, [r7, #11]
 8006082:	2b2d      	cmp	r3, #45	; 0x2d
 8006084:	d002      	beq.n	800608c <_ZN12SimpleString4AtoIEPKc+0x32>
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	2b2b      	cmp	r3, #43	; 0x2b
 800608a:	d102      	bne.n	8006092 <_ZN12SimpleString4AtoIEPKc+0x38>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	3301      	adds	r3, #1
 8006090:	607b      	str	r3, [r7, #4]

    int  result = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f000 ffa2 	bl	8006fe4 <_ZN12SimpleString7isDigitEc>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00f      	beq.n	80060c6 <_ZN12SimpleString4AtoIEPKc+0x6c>
    {
        result *= 10;
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]
        result += *str - '0';
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	3b30      	subs	r3, #48	; 0x30
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
    for(; isDigit(*str); str++)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3301      	adds	r3, #1
 80060c2:	607b      	str	r3, [r7, #4]
 80060c4:	e7e7      	b.n	8006096 <_ZN12SimpleString4AtoIEPKc+0x3c>
    }
    return (first_char == '-') ? -result : result;
 80060c6:	7afb      	ldrb	r3, [r7, #11]
 80060c8:	2b2d      	cmp	r3, #45	; 0x2d
 80060ca:	d102      	bne.n	80060d2 <_ZN12SimpleString4AtoIEPKc+0x78>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	425b      	negs	r3, r3
 80060d0:	e000      	b.n	80060d4 <_ZN12SimpleString4AtoIEPKc+0x7a>
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <_ZN12SimpleString6StrCmpEPKcS1_>:

int SimpleString::StrCmp(const char* s1, const char* s2)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
   while(*s1 && *s1 == *s2) {
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00c      	beq.n	8006108 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d106      	bne.n	8006108 <_ZN12SimpleString6StrCmpEPKcS1_+0x2c>
       ++s1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3301      	adds	r3, #1
 80060fe:	607b      	str	r3, [r7, #4]
       ++s2;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	603b      	str	r3, [r7, #0]
   while(*s1 && *s1 == *s2) {
 8006106:	e7ee      	b.n	80060e6 <_ZN12SimpleString6StrCmpEPKcS1_+0xa>
   }
   return *(const unsigned char *) s1 - *(const unsigned char *) s2;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	1ad3      	subs	r3, r2, r3
}
 8006114:	4618      	mov	r0, r3
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <_ZN12SimpleString6StrLenEPKc>:

size_t SimpleString::StrLen(const char* str)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
    size_t n = (size_t)-1;
 8006128:	f04f 33ff 	mov.w	r3, #4294967295
 800612c:	60fb      	str	r3, [r7, #12]
    do n++; while (*str++);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3301      	adds	r3, #1
 8006132:	60fb      	str	r3, [r7, #12]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2301      	movne	r3, #1
 8006142:	2300      	moveq	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d000      	beq.n	800614c <_ZN12SimpleString6StrLenEPKc+0x2c>
 800614a:	e7f0      	b.n	800612e <_ZN12SimpleString6StrLenEPKc+0xe>
    return n;
 800614c:	68fb      	ldr	r3, [r7, #12]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <_ZN12SimpleString7StrNCmpEPKcS1_j>:

int SimpleString::StrNCmp(const char* s1, const char* s2, size_t n)
{
 800615a:	b480      	push	{r7}
 800615c:	b085      	sub	sp, #20
 800615e:	af00      	add	r7, sp, #0
 8006160:	60f8      	str	r0, [r7, #12]
 8006162:	60b9      	str	r1, [r7, #8]
 8006164:	607a      	str	r2, [r7, #4]
    while (n && *s1 && *s1 == *s2) {
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d013      	beq.n	8006194 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00f      	beq.n	8006194 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d109      	bne.n	8006194 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x3a>
        --n;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3b01      	subs	r3, #1
 8006184:	607b      	str	r3, [r7, #4]
        ++s1;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	3301      	adds	r3, #1
 800618a:	60fb      	str	r3, [r7, #12]
        ++s2;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	3301      	adds	r3, #1
 8006190:	60bb      	str	r3, [r7, #8]
    while (n && *s1 && *s1 == *s2) {
 8006192:	e7e8      	b.n	8006166 <_ZN12SimpleString7StrNCmpEPKcS1_j+0xc>
    }
    return n ? *(const unsigned char *) s1 - *(const unsigned char *) s2 : 0;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d006      	beq.n	80061a8 <_ZN12SimpleString7StrNCmpEPKcS1_j+0x4e>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	e000      	b.n	80061aa <_ZN12SimpleString7StrNCmpEPKcS1_j+0x50>
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>:

char* SimpleString::StrNCpy(char* s1, const char* s2, size_t n)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
    char* result = s1;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	617b      	str	r3, [r7, #20]

    if((NULLPTR == s1) || (0 == n)) return result;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d002      	beq.n	80061d2 <_ZN12SimpleString7StrNCpyEPcPKcj+0x1c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x20>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	e01e      	b.n	8006214 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5e>

    *s1 = *s2;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781a      	ldrb	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	607b      	str	r3, [r7, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d005      	beq.n	80061f6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <_ZN12SimpleString7StrNCpyEPcPKcj+0x40>
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <_ZN12SimpleString7StrNCpyEPcPKcj+0x42>
 80061f6:	2300      	movs	r3, #0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00a      	beq.n	8006212 <_ZN12SimpleString7StrNCpyEPcPKcj+0x5c>
        *++s1 = *++s2;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	3301      	adds	r3, #1
 8006200:	60bb      	str	r3, [r7, #8]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	781a      	ldrb	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	701a      	strb	r2, [r3, #0]
    while ((--n != 0) && *s1){
 8006210:	e7e5      	b.n	80061de <_ZN12SimpleString7StrNCpyEPcPKcj+0x28>
    }
    return result;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	371c      	adds	r7, #28
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <_ZN12SimpleString6StrStrEPKcS1_>:

const char* SimpleString::StrStr(const char* s1, const char* s2)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
    if(!*s2) return s1;
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	e01b      	b.n	800626e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <_ZN12SimpleString6StrStrEPKcS1_+0x4c>
        if (StrNCmp(s1, s2, StrLen(s2)) == 0)
 800623e:	6838      	ldr	r0, [r7, #0]
 8006240:	f7ff ff6e 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 8006244:	4603      	mov	r3, r0
 8006246:	461a      	mov	r2, r3
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ff85 	bl	800615a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	bf0c      	ite	eq
 8006256:	2301      	moveq	r3, #1
 8006258:	2300      	movne	r3, #0
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <_ZN12SimpleString6StrStrEPKcS1_+0x44>
            return s1;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	e004      	b.n	800626e <_ZN12SimpleString6StrStrEPKcS1_+0x4e>
    for (; *s1; s1++)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	3301      	adds	r3, #1
 8006268:	607b      	str	r3, [r7, #4]
 800626a:	e7e4      	b.n	8006236 <_ZN12SimpleString6StrStrEPKcS1_+0x16>
    return NULLPTR;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <_ZN12SimpleString7ToLowerEc>:

char SimpleString::ToLower(char ch)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	4603      	mov	r3, r0
 800627e:	71fb      	strb	r3, [r7, #7]
    return isUpper(ch) ? (char)((int)ch + ('a' - 'A')) : ch;
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fed9 	bl	800703a <_ZN12SimpleString7isUpperEc>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <_ZN12SimpleString7ToLowerEc+0x20>
 800628e:	79fb      	ldrb	r3, [r7, #7]
 8006290:	3320      	adds	r3, #32
 8006292:	b2db      	uxtb	r3, r3
 8006294:	e000      	b.n	8006298 <_ZN12SimpleString7ToLowerEc+0x22>
 8006296:	79fb      	ldrb	r3, [r7, #7]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3708      	adds	r7, #8
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <_ZN12SimpleString6MemCmpEPKvS1_j>:

int SimpleString::MemCmp(const void* s1, const void *s2, size_t n)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
    const unsigned char* p1 = (const unsigned char*) s1;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	617b      	str	r3, [r7, #20]
    const unsigned char* p2 = (const unsigned char*) s2;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	613b      	str	r3, [r7, #16]

    while (n--)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	bf14      	ite	ne
 80062be:	2301      	movne	r3, #1
 80062c0:	2300      	moveq	r3, #0
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d013      	beq.n	80062f0 <_ZN12SimpleString6MemCmpEPKvS1_j+0x50>
        if (*p1 != *p2) {
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	781a      	ldrb	r2, [r3, #0]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d006      	beq.n	80062e2 <_ZN12SimpleString6MemCmpEPKvS1_j+0x42>
            return *p1 - *p2;
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	e007      	b.n	80062f2 <_ZN12SimpleString6MemCmpEPKvS1_j+0x52>
        } else {
            ++p1;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	3301      	adds	r3, #1
 80062e6:	617b      	str	r3, [r7, #20]
            ++p2;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	3301      	adds	r3, #1
 80062ec:	613b      	str	r3, [r7, #16]
    while (n--)
 80062ee:	e7e1      	b.n	80062b4 <_ZN12SimpleString6MemCmpEPKvS1_j+0x14>
        }
    return 0;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <_ZN12SimpleString24deallocateInternalBufferEv>:

void SimpleString::deallocateInternalBuffer()
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
    if (buffer_) {
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <_ZN12SimpleString24deallocateInternalBufferEv+0x2c>
        deallocStringBuffer(buffer_, bufferSize_, __FILE__, __LINE__);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6859      	ldr	r1, [r3, #4]
 8006318:	23ee      	movs	r3, #238	; 0xee
 800631a:	4a06      	ldr	r2, [pc, #24]	; (8006334 <_ZN12SimpleString24deallocateInternalBufferEv+0x34>)
 800631c:	f7ff fe3a 	bl	8005f94 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
        buffer_ = NULLPTR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]
        bufferSize_ = 0;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	605a      	str	r2, [r3, #4]
    }
}
 800632c:	bf00      	nop
 800632e:	3708      	adds	r7, #8
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	0801499c 	.word	0x0801499c

08006338 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>:

void SimpleString::setInternalBufferAsEmptyString()
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
    deallocateInternalBuffer();
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ffdd 	bl	8006300 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = 1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	605a      	str	r2, [r3, #4]
    buffer_ = getEmptyString();
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7ff fe37 	bl	8005fc0 <_ZNK12SimpleString14getEmptyStringEv>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer, size_t bufferSize)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ffc7 	bl	8006300 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	605a      	str	r2, [r3, #4]
    buffer_ = copyToNewBuffer(otherBuffer, bufferSize_);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	4619      	mov	r1, r3
 800637e:	68b8      	ldr	r0, [r7, #8]
 8006380:	f000 fe12 	bl	8006fa8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
	...

08006394 <_ZN12SimpleString28setInternalBufferToNewBufferEj>:

void SimpleString::setInternalBufferToNewBuffer(size_t bufferSize)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
    deallocateInternalBuffer();
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff ffae 	bl	8006300 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	605a      	str	r2, [r3, #4]
    buffer_ = allocStringBuffer(bufferSize_, __FILE__, __LINE__);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	f240 1209 	movw	r2, #265	; 0x109
 80063b2:	4907      	ldr	r1, [pc, #28]	; (80063d0 <_ZN12SimpleString28setInternalBufferToNewBufferEj+0x3c>)
 80063b4:	4618      	mov	r0, r3
 80063b6:	f7ff fdd9 	bl	8005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>
 80063ba:	4602      	mov	r2, r0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	0801499c 	.word	0x0801499c

080063d4 <_ZN12SimpleString19setInternalBufferToEPcj>:

void SimpleString::setInternalBufferTo(char* buffer, size_t bufferSize)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]
    deallocateInternalBuffer();
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f7ff ff8d 	bl	8006300 <_ZN12SimpleString24deallocateInternalBufferEv>

    bufferSize_ = bufferSize;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]
    buffer_ = buffer;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	601a      	str	r2, [r3, #0]
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>:

void SimpleString::copyBufferToNewInternalBuffer(const SimpleString& otherBuffer)
{
 80063fa:	b590      	push	{r4, r7, lr}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
 8006402:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer.buffer_, otherBuffer.size() + 1);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681c      	ldr	r4, [r3, #0]
 8006408:	6838      	ldr	r0, [r7, #0]
 800640a:	f000 fbc1 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800640e:	4603      	mov	r3, r0
 8006410:	3301      	adds	r3, #1
 8006412:	461a      	mov	r2, r3
 8006414:	4621      	mov	r1, r4
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff ffa2 	bl	8006360 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	bd90      	pop	{r4, r7, pc}

08006424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>:

void SimpleString::copyBufferToNewInternalBuffer(const char* otherBuffer)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
    copyBufferToNewInternalBuffer(otherBuffer, StrLen(otherBuffer) + 1);
 800642e:	6838      	ldr	r0, [r7, #0]
 8006430:	f7ff fe76 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 8006434:	4603      	mov	r3, r0
 8006436:	3301      	adds	r3, #1
 8006438:	461a      	mov	r2, r3
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff8f 	bl	8006360 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKcj>
}
 8006442:	bf00      	nop
 8006444:	3708      	adds	r7, #8
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZNK12SimpleString9getBufferEv>:

const char* SimpleString::getBuffer() const
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
    return buffer_;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
}
 8006456:	4618      	mov	r0, r3
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <_ZN12SimpleStringC1EPKc>:

SimpleString::SimpleString(const char *otherBuffer)
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	605a      	str	r2, [r3, #4]
{
    if (otherBuffer == NULLPTR)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d103      	bne.n	8006486 <_ZN12SimpleStringC1EPKc+0x24>
        setInternalBufferAsEmptyString();
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7ff ff5a 	bl	8006338 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 8006484:	e003      	b.n	800648e <_ZN12SimpleStringC1EPKc+0x2c>
    else
        copyBufferToNewInternalBuffer(otherBuffer);
 8006486:	6839      	ldr	r1, [r7, #0]
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff ffcb 	bl	8006424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <_ZN12SimpleStringC1EPKcj>:

SimpleString::SimpleString(const char *other, size_t repeatCount)
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
    : buffer_(NULLPTR), bufferSize_(0)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	605a      	str	r2, [r3, #4]
{
    size_t otherStringLength = StrLen(other);
 80064b0:	68b8      	ldr	r0, [r7, #8]
 80064b2:	f7ff fe35 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 80064b6:	6178      	str	r0, [r7, #20]
    setInternalBufferToNewBuffer(otherStringLength * repeatCount + 1);
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	fb02 f303 	mul.w	r3, r2, r3
 80064c0:	3301      	adds	r3, #1
 80064c2:	4619      	mov	r1, r3
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f7ff ff65 	bl	8006394 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    char* next = buffer_;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 80064d0:	2300      	movs	r3, #0
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d20e      	bcs.n	80064fa <_ZN12SimpleStringC1EPKcj+0x62>
        StrNCpy(next, other, otherStringLength + 1);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3301      	adds	r3, #1
 80064e0:	461a      	mov	r2, r3
 80064e2:	68b9      	ldr	r1, [r7, #8]
 80064e4:	69f8      	ldr	r0, [r7, #28]
 80064e6:	f7ff fe66 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>
        next += otherStringLength;
 80064ea:	69fa      	ldr	r2, [r7, #28]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	4413      	add	r3, r2
 80064f0:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < repeatCount; i++) {
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	3301      	adds	r3, #1
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	e7ec      	b.n	80064d4 <_ZN12SimpleStringC1EPKcj+0x3c>
    }
    *next = 0;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
}
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZN12SimpleStringC1ERKS_>:

SimpleString::SimpleString(const SimpleString& other)
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6039      	str	r1, [r7, #0]
    : buffer_(NULLPTR), bufferSize_(0)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]
{
    copyBufferToNewInternalBuffer(other.getBuffer());
 8006520:	6838      	ldr	r0, [r7, #0]
 8006522:	f7ff ff92 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006526:	4603      	mov	r3, r0
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ff7a 	bl	8006424 <_ZN12SimpleString29copyBufferToNewInternalBufferEPKc>
}
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <_ZN12SimpleStringaSERKS_>:

SimpleString& SimpleString::operator=(const SimpleString& other)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
    if (this != &other)
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	429a      	cmp	r2, r3
 800654a:	d003      	beq.n	8006554 <_ZN12SimpleStringaSERKS_+0x1a>
        copyBufferToNewInternalBuffer(other);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7ff ff53 	bl	80063fa <_ZN12SimpleString29copyBufferToNewInternalBufferERKS_>
    return *this;
 8006554:	687b      	ldr	r3, [r7, #4]
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZNK12SimpleString8containsERKS_>:

bool SimpleString::contains(const SimpleString& other) const
{
 800655e:	b590      	push	{r4, r7, lr}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	6039      	str	r1, [r7, #0]
    return StrStr(getBuffer(), other.getBuffer()) != NULLPTR;
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff6e 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 800656e:	4604      	mov	r4, r0
 8006570:	6838      	ldr	r0, [r7, #0]
 8006572:	f7ff ff6a 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006576:	4603      	mov	r3, r0
 8006578:	4619      	mov	r1, r3
 800657a:	4620      	mov	r0, r4
 800657c:	f7ff fe50 	bl	8006220 <_ZN12SimpleString6StrStrEPKcS1_>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	bf14      	ite	ne
 8006586:	2301      	movne	r3, #1
 8006588:	2300      	moveq	r3, #0
 800658a:	b2db      	uxtb	r3, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bd90      	pop	{r4, r7, pc}

08006594 <_ZNK12SimpleString14containsNoCaseERKS_>:

bool SimpleString::containsNoCase(const SimpleString& other) const
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
    return lowerCase().contains(other.lowerCase());
 800659e:	f107 0308 	add.w	r3, r7, #8
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 fabb 	bl	8006b20 <_ZNK12SimpleString9lowerCaseEv>
 80065aa:	f107 0310 	add.w	r3, r7, #16
 80065ae:	6839      	ldr	r1, [r7, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	f000 fab5 	bl	8006b20 <_ZNK12SimpleString9lowerCaseEv>
 80065b6:	f107 0210 	add.w	r2, r7, #16
 80065ba:	f107 0308 	add.w	r3, r7, #8
 80065be:	4611      	mov	r1, r2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7ff ffcc 	bl	800655e <_ZNK12SimpleString8containsERKS_>
 80065c6:	4603      	mov	r3, r0
 80065c8:	461c      	mov	r4, r3
 80065ca:	bf00      	nop
 80065cc:	f107 0310 	add.w	r3, r7, #16
 80065d0:	4618      	mov	r0, r3
 80065d2:	f000 fafe 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80065d6:	f107 0308 	add.w	r3, r7, #8
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 faf9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80065e0:	4623      	mov	r3, r4
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}

080065ea <_ZNK12SimpleString10startsWithERKS_>:

bool SimpleString::startsWith(const SimpleString& other) const
{
 80065ea:	b590      	push	{r4, r7, lr}
 80065ec:	b083      	sub	sp, #12
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	6039      	str	r1, [r7, #0]
    if (other.size() == 0) return true;
 80065f4:	6838      	ldr	r0, [r7, #0]
 80065f6:	f000 facb 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	bf0c      	ite	eq
 8006600:	2301      	moveq	r3, #1
 8006602:	2300      	movne	r3, #0
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <_ZNK12SimpleString10startsWithERKS_+0x24>
 800660a:	2301      	movs	r3, #1
 800660c:	e022      	b.n	8006654 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else if (size() == 0) return false;
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 fabe 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <_ZNK12SimpleString10startsWithERKS_+0x3e>
 8006624:	2300      	movs	r3, #0
 8006626:	e015      	b.n	8006654 <_ZNK12SimpleString10startsWithERKS_+0x6a>
    else return StrStr(getBuffer(), other.getBuffer()) == getBuffer();
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff0e 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 800662e:	4604      	mov	r4, r0
 8006630:	6838      	ldr	r0, [r7, #0]
 8006632:	f7ff ff0a 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006636:	4603      	mov	r3, r0
 8006638:	4619      	mov	r1, r3
 800663a:	4620      	mov	r0, r4
 800663c:	f7ff fdf0 	bl	8006220 <_ZN12SimpleString6StrStrEPKcS1_>
 8006640:	4604      	mov	r4, r0
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff ff01 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006648:	4603      	mov	r3, r0
 800664a:	429c      	cmp	r4, r3
 800664c:	bf0c      	ite	eq
 800664e:	2301      	moveq	r3, #1
 8006650:	2300      	movne	r3, #0
 8006652:	b2db      	uxtb	r3, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bd90      	pop	{r4, r7, pc}

0800665c <_ZNK12SimpleString8endsWithERKS_>:

bool SimpleString::endsWith(const SimpleString& other) const
{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
    size_t length = size();
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 fa92 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800666c:	60f8      	str	r0, [r7, #12]
    size_t other_length = other.size();
 800666e:	6838      	ldr	r0, [r7, #0]
 8006670:	f000 fa8e 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006674:	60b8      	str	r0, [r7, #8]

    if (other_length == 0) return true;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <_ZNK12SimpleString8endsWithERKS_+0x24>
 800667c:	2301      	movs	r3, #1
 800667e:	e020      	b.n	80066c2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length == 0) return false;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d101      	bne.n	800668a <_ZNK12SimpleString8endsWithERKS_+0x2e>
 8006686:	2300      	movs	r3, #0
 8006688:	e01b      	b.n	80066c2 <_ZNK12SimpleString8endsWithERKS_+0x66>
    if (length < other_length) return false;
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d201      	bcs.n	8006696 <_ZNK12SimpleString8endsWithERKS_+0x3a>
 8006692:	2300      	movs	r3, #0
 8006694:	e015      	b.n	80066c2 <_ZNK12SimpleString8endsWithERKS_+0x66>

    return StrCmp(getBuffer() + length - other_length, other.getBuffer()) == 0;
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7ff fed7 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 800669c:	4601      	mov	r1, r0
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	18cc      	adds	r4, r1, r3
 80066a6:	6838      	ldr	r0, [r7, #0]
 80066a8:	f7ff fecf 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 80066ac:	4603      	mov	r3, r0
 80066ae:	4619      	mov	r1, r3
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7ff fd13 	bl	80060dc <_ZN12SimpleString6StrCmpEPKcS1_>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd90      	pop	{r4, r7, pc}

080066ca <_ZNK12SimpleString5countERKS_>:

size_t SimpleString::count(const SimpleString& substr) const
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b086      	sub	sp, #24
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
    size_t num = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	617b      	str	r3, [r7, #20]
    const char* str = getBuffer();
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff feb6 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 80066de:	6138      	str	r0, [r7, #16]
    const char* strpart = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	60fb      	str	r3, [r7, #12]
    if (*str){
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <_ZNK12SimpleString5countERKS_+0x34>
        strpart = StrStr(str, substr.getBuffer());
 80066ec:	6838      	ldr	r0, [r7, #0]
 80066ee:	f7ff feac 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 80066f2:	4603      	mov	r3, r0
 80066f4:	4619      	mov	r1, r3
 80066f6:	6938      	ldr	r0, [r7, #16]
 80066f8:	f7ff fd92 	bl	8006220 <_ZN12SimpleString6StrStrEPKcS1_>
 80066fc:	60f8      	str	r0, [r7, #12]
    }
    while (*str && strpart) {
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d014      	beq.n	8006730 <_ZNK12SimpleString5countERKS_+0x66>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d011      	beq.n	8006730 <_ZNK12SimpleString5countERKS_+0x66>
        str = strpart;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	613b      	str	r3, [r7, #16]
        str++;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3301      	adds	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
        num++;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	3301      	adds	r3, #1
 800671a:	617b      	str	r3, [r7, #20]
        strpart = StrStr(str, substr.getBuffer());
 800671c:	6838      	ldr	r0, [r7, #0]
 800671e:	f7ff fe94 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006722:	4603      	mov	r3, r0
 8006724:	4619      	mov	r1, r3
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f7ff fd7a 	bl	8006220 <_ZN12SimpleString6StrStrEPKcS1_>
 800672c:	60f8      	str	r0, [r7, #12]
    while (*str && strpart) {
 800672e:	e7e6      	b.n	80066fe <_ZNK12SimpleString5countERKS_+0x34>
    }
    return num;
 8006730:	697b      	ldr	r3, [r7, #20]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>:

void SimpleString::split(const SimpleString& delimiter, SimpleStringCollection& col) const
{
 800673a:	b590      	push	{r4, r7, lr}
 800673c:	b091      	sub	sp, #68	; 0x44
 800673e:	af00      	add	r7, sp, #0
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	607a      	str	r2, [r7, #4]
    size_t num = count(delimiter);
 8006746:	68b9      	ldr	r1, [r7, #8]
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f7ff ffbe 	bl	80066ca <_ZNK12SimpleString5countERKS_>
 800674e:	6378      	str	r0, [r7, #52]	; 0x34
    size_t extraEndToken = (endsWith(delimiter)) ? 0 : 1U;
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f7ff ff82 	bl	800665c <_ZNK12SimpleString8endsWithERKS_>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x28>
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x2a>
 8006762:	2301      	movs	r3, #1
 8006764:	633b      	str	r3, [r7, #48]	; 0x30
    col.allocate(num + extraEndToken);
 8006766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676a:	4413      	add	r3, r2
 800676c:	4619      	mov	r1, r3
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f001 f84e 	bl	8007810 <_ZN22SimpleStringCollection8allocateEj>

    const char* str = getBuffer();
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fe68 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 800677a:	63f8      	str	r0, [r7, #60]	; 0x3c
    const char* prev;
    for (size_t i = 0; i < num; ++i) {
 800677c:	2300      	movs	r3, #0
 800677e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006784:	429a      	cmp	r2, r3
 8006786:	d235      	bcs.n	80067f4 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xba>
        prev = str;
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
        str = StrStr(str, delimiter.getBuffer()) + 1;
 800678c:	68b8      	ldr	r0, [r7, #8]
 800678e:	f7ff fe5c 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006792:	4603      	mov	r3, r0
 8006794:	4619      	mov	r1, r3
 8006796:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006798:	f7ff fd42 	bl	8006220 <_ZN12SimpleString6StrStrEPKcS1_>
 800679c:	4603      	mov	r3, r0
 800679e:	3301      	adds	r3, #1
 80067a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        col[i] = SimpleString(prev).subString(0, size_t (str - prev));
 80067a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 f8cd 	bl	8007944 <_ZN22SimpleStringCollectionixEj>
 80067aa:	4604      	mov	r4, r0
 80067ac:	f107 031c 	add.w	r3, r7, #28
 80067b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff fe55 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80067b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	f107 0014 	add.w	r0, r7, #20
 80067c2:	f107 011c 	add.w	r1, r7, #28
 80067c6:	2200      	movs	r2, #0
 80067c8:	f000 fb0c 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 80067cc:	f107 0314 	add.w	r3, r7, #20
 80067d0:	4619      	mov	r1, r3
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7ff feb1 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80067d8:	f107 0314 	add.w	r3, r7, #20
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 f9f8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80067e2:	f107 031c 	add.w	r3, r7, #28
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 f9f3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < num; ++i) {
 80067ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ee:	3301      	adds	r3, #1
 80067f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067f2:	e7c5      	b.n	8006780 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0x46>
    }
    if (extraEndToken) {
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d015      	beq.n	8006826 <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection+0xec>
        col[num] = str;
 80067fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 f8a1 	bl	8007944 <_ZN22SimpleStringCollectionixEj>
 8006802:	4604      	mov	r4, r0
 8006804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006808:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff fe29 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8006810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006814:	4619      	mov	r1, r3
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff fe8f 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800681c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f9d6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    }
}
 8006826:	bf00      	nop
 8006828:	3744      	adds	r7, #68	; 0x44
 800682a:	46bd      	mov	sp, r7
 800682c:	bd90      	pop	{r4, r7, pc}

0800682e <_ZN12SimpleString7replaceEcc>:

void SimpleString::replace(char to, char with)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
 800683a:	4613      	mov	r3, r2
 800683c:	70bb      	strb	r3, [r7, #2]
    size_t s = size();
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f9a6 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006844:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < s; i++) {
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	d218      	bcs.n	8006884 <_ZN12SimpleString7replaceEcc+0x56>
        if (getBuffer()[i] == to) buffer_[i] = with;
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7ff fdf9 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006858:	4602      	mov	r2, r0
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4413      	add	r3, r2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	78fa      	ldrb	r2, [r7, #3]
 8006862:	429a      	cmp	r2, r3
 8006864:	bf0c      	ite	eq
 8006866:	2301      	moveq	r3, #1
 8006868:	2300      	movne	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d005      	beq.n	800687c <_ZN12SimpleString7replaceEcc+0x4e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	78ba      	ldrb	r2, [r7, #2]
 800687a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < s; i++) {
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e7e2      	b.n	800684a <_ZN12SimpleString7replaceEcc+0x1c>
    }
}
 8006884:	bf00      	nop
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <_ZN12SimpleString7replaceEPKcS1_>:

void SimpleString::replace(const char* to, const char* with)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b08e      	sub	sp, #56	; 0x38
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
    size_t c = count(to);
 8006898:	f107 0310 	add.w	r3, r7, #16
 800689c:	68b9      	ldr	r1, [r7, #8]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff fddf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	4619      	mov	r1, r3
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff ff0d 	bl	80066ca <_ZNK12SimpleString5countERKS_>
 80068b0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80068b2:	f107 0310 	add.w	r3, r7, #16
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 f98b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (c == 0) {
 80068bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d071      	beq.n	80069a6 <_ZN12SimpleString7replaceEPKcS1_+0x11a>
        return;
    }
    size_t len = size();
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 f964 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 80068c8:	62b8      	str	r0, [r7, #40]	; 0x28
    size_t tolen = StrLen(to);
 80068ca:	68b8      	ldr	r0, [r7, #8]
 80068cc:	f7ff fc28 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 80068d0:	6278      	str	r0, [r7, #36]	; 0x24
    size_t withlen = StrLen(with);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fc24 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 80068d8:	6238      	str	r0, [r7, #32]

    size_t newsize = len + (withlen * c) - (tolen * c) + 1;
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068de:	fb02 f203 	mul.w	r2, r2, r3
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	441a      	add	r2, r3
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068ea:	fb01 f303 	mul.w	r3, r1, r3
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	61fb      	str	r3, [r7, #28]

    if (newsize > 1) {
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d951      	bls.n	800699e <_ZN12SimpleString7replaceEPKcS1_+0x112>
        char* newbuf = allocStringBuffer(newsize, __FILE__, __LINE__);
 80068fa:	f240 129d 	movw	r2, #413	; 0x19d
 80068fe:	492c      	ldr	r1, [pc, #176]	; (80069b0 <_ZN12SimpleString7replaceEPKcS1_+0x124>)
 8006900:	69f8      	ldr	r0, [r7, #28]
 8006902:	f7ff fb33 	bl	8005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006906:	61b8      	str	r0, [r7, #24]
        for (size_t i = 0, j = 0; i < len;) {
 8006908:	2300      	movs	r3, #0
 800690a:	637b      	str	r3, [r7, #52]	; 0x34
 800690c:	2300      	movs	r3, #0
 800690e:	633b      	str	r3, [r7, #48]	; 0x30
 8006910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	429a      	cmp	r2, r3
 8006916:	d236      	bcs.n	8006986 <_ZN12SimpleString7replaceEPKcS1_+0xfa>
            if (StrNCmp(&getBuffer()[i], to, tolen) == 0) {
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f7ff fd96 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 800691e:	4602      	mov	r2, r0
 8006920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006922:	4413      	add	r3, r2
 8006924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fc16 	bl	800615a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800692e:	4603      	mov	r3, r0
 8006930:	2b00      	cmp	r3, #0
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d011      	beq.n	8006962 <_ZN12SimpleString7replaceEPKcS1_+0xd6>
                StrNCpy(&newbuf[j], with, withlen + 1);
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	18d0      	adds	r0, r2, r3
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	3301      	adds	r3, #1
 8006948:	461a      	mov	r2, r3
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	f7ff fc33 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>
                j += withlen;
 8006950:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	4413      	add	r3, r2
 8006956:	633b      	str	r3, [r7, #48]	; 0x30
                i += tolen;
 8006958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800695a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695c:	4413      	add	r3, r2
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
 8006960:	e7d6      	b.n	8006910 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
            else {
                newbuf[j] = getBuffer()[i];
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff fd71 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006968:	4602      	mov	r2, r0
 800696a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696c:	441a      	add	r2, r3
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006972:	440b      	add	r3, r1
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	701a      	strb	r2, [r3, #0]
                j++;
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	3301      	adds	r3, #1
 800697c:	633b      	str	r3, [r7, #48]	; 0x30
                i++;
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	3301      	adds	r3, #1
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t i = 0, j = 0; i < len;) {
 8006984:	e7c4      	b.n	8006910 <_ZN12SimpleString7replaceEPKcS1_+0x84>
            }
        }
        newbuf[newsize - 1] = '\0';
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	3b01      	subs	r3, #1
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4413      	add	r3, r2
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]
        setInternalBufferTo(newbuf, newsize);
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	69b9      	ldr	r1, [r7, #24]
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff fd1c 	bl	80063d4 <_ZN12SimpleString19setInternalBufferToEPcj>
 800699c:	e004      	b.n	80069a8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
    }
    else
        setInternalBufferAsEmptyString();
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fcca 	bl	8006338 <_ZN12SimpleString30setInternalBufferAsEmptyStringEv>
 80069a4:	e000      	b.n	80069a8 <_ZN12SimpleString7replaceEPKcS1_+0x11c>
        return;
 80069a6:	bf00      	nop
}
 80069a8:	3738      	adds	r7, #56	; 0x38
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	0801499c 	.word	0x0801499c

080069b4 <_ZNK12SimpleString9printableEv>:

SimpleString SimpleString::printable() const
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
        "\\v",
        "\\f",
        "\\r"
    };

    SimpleString result;
 80069be:	493b      	ldr	r1, [pc, #236]	; (8006aac <_ZNK12SimpleString9printableEv+0xf8>)
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f7ff fd4e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    result.setInternalBufferToNewBuffer(getPrintableSize() + 1);
 80069c6:	6838      	ldr	r0, [r7, #0]
 80069c8:	f000 f876 	bl	8006ab8 <_ZNK12SimpleString16getPrintableSizeEv>
 80069cc:	4603      	mov	r3, r0
 80069ce:	3301      	adds	r3, #1
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7ff fcde 	bl	8006394 <_ZN12SimpleString28setInternalBufferToNewBufferEj>

    size_t str_size = size();
 80069d8:	6838      	ldr	r0, [r7, #0]
 80069da:	f000 f8d9 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 80069de:	6178      	str	r0, [r7, #20]
    size_t j = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 80069e4:	2300      	movs	r3, #0
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	69ba      	ldr	r2, [r7, #24]
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d252      	bcs.n	8006a96 <_ZNK12SimpleString9printableEv+0xe2>
    {
        char c = buffer_[i];
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	4413      	add	r3, r2
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	74fb      	strb	r3, [r7, #19]
        if (isControlWithShortEscapeSequence(c))
 80069fc:	7cfb      	ldrb	r3, [r7, #19]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f000 fb43 	bl	800708a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d012      	beq.n	8006a30 <_ZNK12SimpleString9printableEv+0x7c>
        {
            StrNCpy(&result.buffer_[j], shortEscapeCodes[(unsigned char)(c - '\a')], 2);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	18d0      	adds	r0, r2, r3
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	3b07      	subs	r3, #7
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b25      	ldr	r3, [pc, #148]	; (8006ab0 <_ZNK12SimpleString9printableEv+0xfc>)
 8006a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a20:	2202      	movs	r2, #2
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7ff fbc7 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 2;
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	61fb      	str	r3, [r7, #28]
 8006a2e:	e02e      	b.n	8006a8e <_ZNK12SimpleString9printableEv+0xda>
        }
        else if (isControl(c))
 8006a30:	7cfb      	ldrb	r3, [r7, #19]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 fb15 	bl	8007062 <_ZN12SimpleString9isControlEc>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01e      	beq.n	8006a7c <_ZNK12SimpleString9printableEv+0xc8>
        {
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8006a3e:	7cfa      	ldrb	r2, [r7, #19]
 8006a40:	f107 0308 	add.w	r3, r7, #8
 8006a44:	491b      	ldr	r1, [pc, #108]	; (8006ab4 <_ZNK12SimpleString9printableEv+0x100>)
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fd50 	bl	80074ec <_Z16StringFromFormatPKcz>
            StrNCpy(&result.buffer_[j], hexEscapeCode.asCharString(), 4);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	18d4      	adds	r4, r2, r3
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f88d 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2204      	movs	r2, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff fba6 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>
            j += 4;
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	61fb      	str	r3, [r7, #28]
            SimpleString hexEscapeCode = StringFromFormat("\\x%02X ", c);
 8006a70:	f107 0308 	add.w	r3, r7, #8
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 f8ac 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8006a7a:	e008      	b.n	8006a8e <_ZNK12SimpleString9printableEv+0xda>
        }
        else
        {
            result.buffer_[j] = c;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	4413      	add	r3, r2
 8006a84:	7cfa      	ldrb	r2, [r7, #19]
 8006a86:	701a      	strb	r2, [r3, #0]
            j++;
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	61fb      	str	r3, [r7, #28]
    for (size_t i = 0; i < str_size; i++)
 8006a8e:	69bb      	ldr	r3, [r7, #24]
 8006a90:	3301      	adds	r3, #1
 8006a92:	61bb      	str	r3, [r7, #24]
 8006a94:	e7a8      	b.n	80069e8 <_ZNK12SimpleString9printableEv+0x34>
        }
    }
    result.buffer_[j] = 0;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	701a      	strb	r2, [r3, #0]

    return result;
 8006aa2:	bf00      	nop
}
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	3724      	adds	r7, #36	; 0x24
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd90      	pop	{r4, r7, pc}
 8006aac:	08014a5c 	.word	0x08014a5c
 8006ab0:	20000068 	.word	0x20000068
 8006ab4:	08014a60 	.word	0x08014a60

08006ab8 <_ZNK12SimpleString16getPrintableSizeEv>:

size_t SimpleString::getPrintableSize() const
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
    size_t str_size = size();
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f865 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006ac6:	60f8      	str	r0, [r7, #12]
    size_t printable_str_size = str_size;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < str_size; i++)
 8006acc:	2300      	movs	r3, #0
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d21e      	bcs.n	8006b16 <_ZNK12SimpleString16getPrintableSizeEv+0x5e>
    {
        char c = buffer_[i];
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
        if (isControlWithShortEscapeSequence(c))
 8006ae4:	7afb      	ldrb	r3, [r7, #11]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 facf 	bl	800708a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <_ZNK12SimpleString16getPrintableSizeEv+0x42>
        {
            printable_str_size += 1;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	3301      	adds	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
 8006af8:	e009      	b.n	8006b0e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        }
        else if (isControl(c))
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 fab0 	bl	8007062 <_ZN12SimpleString9isControlEc>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <_ZNK12SimpleString16getPrintableSizeEv+0x56>
        {
            printable_str_size += 3;
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	3303      	adds	r3, #3
 8006b0c:	617b      	str	r3, [r7, #20]
    for (size_t i = 0; i < str_size; i++)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	3301      	adds	r3, #1
 8006b12:	613b      	str	r3, [r7, #16]
 8006b14:	e7dc      	b.n	8006ad0 <_ZNK12SimpleString16getPrintableSizeEv+0x18>
        }
    }

    return printable_str_size;
 8006b16:	697b      	ldr	r3, [r7, #20]
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <_ZNK12SimpleString9lowerCaseEv>:

SimpleString SimpleString::lowerCase() const
{
 8006b20:	b590      	push	{r4, r7, lr}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
    SimpleString str(*this);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f7ff fcec 	bl	800650a <_ZN12SimpleStringC1ERKS_>

    size_t str_size = str.size();
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f82c 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006b38:	60b8      	str	r0, [r7, #8]
    for (size_t i = 0; i < str_size; i++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d213      	bcs.n	8006b6e <_ZNK12SimpleString9lowerCaseEv+0x4e>
        str.buffer_[i] = ToLower(str.getBuffer()[i]);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f7ff fc7f 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	4413      	add	r3, r2
 8006b52:	7819      	ldrb	r1, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	18d4      	adds	r4, r2, r3
 8006b5c:	4608      	mov	r0, r1
 8006b5e:	f7ff fb8a 	bl	8006276 <_ZN12SimpleString7ToLowerEc>
 8006b62:	4603      	mov	r3, r0
 8006b64:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < str_size; i++)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e7e7      	b.n	8006b3e <_ZNK12SimpleString9lowerCaseEv+0x1e>

    return str;
 8006b6e:	bf00      	nop
}
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd90      	pop	{r4, r7, pc}

08006b78 <_ZNK12SimpleString12asCharStringEv>:

const char *SimpleString::asCharString() const
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    return getBuffer();
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fc62 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <_ZNK12SimpleString4sizeEv>:

size_t SimpleString::size() const
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
    return StrLen(getBuffer());
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fc56 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7ff fabd 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 8006ba6:	4603      	mov	r3, r0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <_ZNK12SimpleString7isEmptyEv>:

bool SimpleString::isEmpty() const
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
    return size() == 0;
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ffe9 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	bf0c      	ite	eq
 8006bc4:	2301      	moveq	r3, #1
 8006bc6:	2300      	movne	r3, #0
 8006bc8:	b2db      	uxtb	r3, r3
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <_ZN12SimpleStringD1Ev>:

SimpleString::~SimpleString()
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
{
    deallocateInternalBuffer();
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fb90 	bl	8006300 <_ZN12SimpleString24deallocateInternalBufferEv>
}
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <_ZeqRK12SimpleStringS1_>:

bool operator==(const SimpleString& left, const SimpleString& right)
{
 8006bea:	b590      	push	{r4, r7, lr}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
 8006bf2:	6039      	str	r1, [r7, #0]
    return 0 == SimpleString::StrCmp(left.asCharString(), right.asCharString());
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ffbf 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	6838      	ldr	r0, [r7, #0]
 8006bfe:	f7ff ffbb 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	4619      	mov	r1, r3
 8006c06:	4620      	mov	r0, r4
 8006c08:	f7ff fa68 	bl	80060dc <_ZN12SimpleString6StrCmpEPKcS1_>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd90      	pop	{r4, r7, pc}

08006c20 <_ZNK12SimpleString12equalsNoCaseERKS_>:

bool SimpleString::equalsNoCase(const SimpleString& str) const
{
 8006c20:	b590      	push	{r4, r7, lr}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
    return lowerCase() == str.lowerCase();
 8006c2a:	f107 0308 	add.w	r3, r7, #8
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	4618      	mov	r0, r3
 8006c32:	f7ff ff75 	bl	8006b20 <_ZNK12SimpleString9lowerCaseEv>
 8006c36:	f107 0310 	add.w	r3, r7, #16
 8006c3a:	6839      	ldr	r1, [r7, #0]
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f7ff ff6f 	bl	8006b20 <_ZNK12SimpleString9lowerCaseEv>
 8006c42:	f107 0210 	add.w	r2, r7, #16
 8006c46:	f107 0308 	add.w	r3, r7, #8
 8006c4a:	4611      	mov	r1, r2
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ffcc 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 8006c52:	4603      	mov	r3, r0
 8006c54:	461c      	mov	r4, r3
 8006c56:	f107 0310 	add.w	r3, r7, #16
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7ff ffb9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8006c60:	f107 0308 	add.w	r3, r7, #8
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff ffb4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8006c6a:	4623      	mov	r3, r4
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	371c      	adds	r7, #28
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd90      	pop	{r4, r7, pc}

08006c74 <_ZneRK12SimpleStringS1_>:


bool operator!=(const SimpleString& left, const SimpleString& right)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
    return !(left == right);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff ffb2 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 8006c86:	4603      	mov	r3, r0
 8006c88:	f083 0301 	eor.w	r3, r3, #1
 8006c8c:	b2db      	uxtb	r3, r3
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <_ZNK12SimpleStringplERKS_>:

SimpleString SimpleString::operator+(const SimpleString& rhs) const
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	60f8      	str	r0, [r7, #12]
 8006c9e:	60b9      	str	r1, [r7, #8]
 8006ca0:	607a      	str	r2, [r7, #4]
    SimpleString t(getBuffer());
 8006ca2:	68b8      	ldr	r0, [r7, #8]
 8006ca4:	f7ff fbd1 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	4619      	mov	r1, r3
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f7ff fbd8 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    t += rhs.getBuffer();
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fbc9 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4619      	mov	r1, r3
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f817 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    return t;
 8006cc2:	bf00      	nop
}
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <_ZN12SimpleStringpLERKS_>:

SimpleString& SimpleString::operator+=(const SimpleString& rhs)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
    return operator+=(rhs.getBuffer());
 8006cd6:	6838      	ldr	r0, [r7, #0]
 8006cd8:	f7ff fbb7 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f805 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
 8006ce6:	4603      	mov	r3, r0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <_ZN12SimpleStringpLEPKc>:

SimpleString& SimpleString::operator+=(const char* rhs)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    size_t originalSize = this->size();
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff ff48 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006d00:	6178      	str	r0, [r7, #20]
    size_t additionalStringSize = StrLen(rhs) + 1;
 8006d02:	6838      	ldr	r0, [r7, #0]
 8006d04:	f7ff fa0c 	bl	8006120 <_ZN12SimpleString6StrLenEPKc>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
    size_t sizeOfNewString = originalSize + additionalStringSize;
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	4413      	add	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
    char* tbuffer = copyToNewBuffer(this->getBuffer(), sizeOfNewString);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fb97 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 f941 	bl	8006fa8 <_ZN12SimpleString15copyToNewBufferEPKcj>
 8006d26:	60b8      	str	r0, [r7, #8]
    StrNCpy(tbuffer + originalSize, rhs, additionalStringSize);
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff fa3f 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>

    setInternalBufferTo(tbuffer, sizeOfNewString);
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7ff fb49 	bl	80063d4 <_ZN12SimpleString19setInternalBufferToEPcj>
    return *this;
 8006d42:	687b      	ldr	r3, [r7, #4]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3718      	adds	r7, #24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>:

void SimpleString::padStringsToSameLength(SimpleString& str1, SimpleString& str2, char padCharacter)
{
 8006d4c:	b590      	push	{r4, r7, lr}
 8006d4e:	b08b      	sub	sp, #44	; 0x2c
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	71fb      	strb	r3, [r7, #7]
    if (str1.size() > str2.size()) {
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	f7ff ff18 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006d60:	4604      	mov	r4, r0
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f7ff ff14 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	429c      	cmp	r4, r3
 8006d6c:	bf8c      	ite	hi
 8006d6e:	2301      	movhi	r3, #1
 8006d70:	2300      	movls	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x3a>
        padStringsToSameLength(str2, str1, padCharacter);
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	68f9      	ldr	r1, [r7, #12]
 8006d7e:	68b8      	ldr	r0, [r7, #8]
 8006d80:	f7ff ffe4 	bl	8006d4c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>
 8006d84:	e02b      	b.n	8006dde <_ZN12SimpleString22padStringsToSameLengthERS_S0_c+0x92>
        return;
    }

    char pad[2];
    pad[0] = padCharacter;
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	753b      	strb	r3, [r7, #20]
    pad[1] = 0;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	757b      	strb	r3, [r7, #21]
    str1 = SimpleString(pad, str2.size() - str1.size()) + str1;
 8006d8e:	68b8      	ldr	r0, [r7, #8]
 8006d90:	f7ff fefe 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006d94:	4604      	mov	r4, r0
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f7ff fefa 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	1ae2      	subs	r2, r4, r3
 8006da0:	f107 0114 	add.w	r1, r7, #20
 8006da4:	f107 0320 	add.w	r3, r7, #32
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fb75 	bl	8006498 <_ZN12SimpleStringC1EPKcj>
 8006dae:	f107 0318 	add.w	r3, r7, #24
 8006db2:	f107 0120 	add.w	r1, r7, #32
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7ff ff6c 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8006dbe:	f107 0318 	add.w	r3, r7, #24
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	68f8      	ldr	r0, [r7, #12]
 8006dc6:	f7ff fbb8 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8006dca:	f107 0318 	add.w	r3, r7, #24
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f7ff feff 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8006dd4:	f107 0320 	add.w	r3, r7, #32
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff fefa 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8006dde:	372c      	adds	r7, #44	; 0x2c
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd90      	pop	{r4, r7, pc}

08006de4 <_ZNK12SimpleString9subStringEjj>:

SimpleString SimpleString::subString(size_t beginPos, size_t amount) const
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	603b      	str	r3, [r7, #0]
    if (beginPos > size()-1) return "";
 8006df2:	68b8      	ldr	r0, [r7, #8]
 8006df4:	f7ff fecc 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	bf8c      	ite	hi
 8006e02:	2301      	movhi	r3, #1
 8006e04:	2300      	movls	r3, #0
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <_ZNK12SimpleString9subStringEjj+0x32>
 8006e0c:	4919      	ldr	r1, [pc, #100]	; (8006e74 <_ZNK12SimpleString9subStringEjj+0x90>)
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff fb27 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8006e14:	e029      	b.n	8006e6a <_ZNK12SimpleString9subStringEjj+0x86>

    SimpleString newString = getBuffer() + beginPos;
 8006e16:	68b8      	ldr	r0, [r7, #8]
 8006e18:	f7ff fb17 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	441a      	add	r2, r3
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	4611      	mov	r1, r2
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fb1a 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    if (newString.size() > amount)
 8006e2e:	f107 0310 	add.w	r3, r7, #16
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff feac 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	bf34      	ite	cc
 8006e40:	2301      	movcc	r3, #1
 8006e42:	2300      	movcs	r3, #0
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <_ZNK12SimpleString9subStringEjj+0x70>
        newString.buffer_[amount] = '\0';
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	2200      	movs	r2, #0
 8006e52:	701a      	strb	r2, [r3, #0]

    return newString;
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	4619      	mov	r1, r3
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fb55 	bl	800650a <_ZN12SimpleStringC1ERKS_>
    SimpleString newString = getBuffer() + beginPos;
 8006e60:	f107 0310 	add.w	r3, r7, #16
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff feb4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08014a5c 	.word	0x08014a5c

08006e78 <_ZNK12SimpleString9subStringEj>:

SimpleString SimpleString::subString(size_t beginPos) const
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
    return subString(beginPos, npos);
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f04f 33ff 	mov.w	r3, #4294967295
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	f7ff ffa9 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
}
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <_ZNK12SimpleString2atEj>:

char SimpleString::at(size_t pos) const
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
    return getBuffer()[pos];
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7ff fad0 	bl	800644a <_ZNK12SimpleString9getBufferEv>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3708      	adds	r7, #8
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <_ZNK12SimpleString4findEc>:

size_t SimpleString::find(char ch) const
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b082      	sub	sp, #8
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
    return findFrom(0, ch);
 8006ec6:	78fb      	ldrb	r3, [r7, #3]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	2100      	movs	r1, #0
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f805 	bl	8006edc <_ZNK12SimpleString8findFromEjc>
 8006ed2:	4603      	mov	r3, r0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <_ZNK12SimpleString8findFromEjc>:

size_t SimpleString::findFrom(size_t starting_position, char ch) const
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	71fb      	strb	r3, [r7, #7]
    size_t length = size();
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f7ff fe50 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8006ef0:	6138      	str	r0, [r7, #16]
    for (size_t i = starting_position; i < length; i++)
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d213      	bcs.n	8006f26 <_ZNK12SimpleString8findFromEjc+0x4a>
        if (at(i) == ch) return i;
 8006efe:	6979      	ldr	r1, [r7, #20]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f7ff ffca 	bl	8006e9a <_ZNK12SimpleString2atEj>
 8006f06:	4603      	mov	r3, r0
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	bf0c      	ite	eq
 8006f10:	2301      	moveq	r3, #1
 8006f12:	2300      	movne	r3, #0
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <_ZNK12SimpleString8findFromEjc+0x42>
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	e005      	b.n	8006f2a <_ZNK12SimpleString8findFromEjc+0x4e>
    for (size_t i = starting_position; i < length; i++)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	3301      	adds	r3, #1
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e7e7      	b.n	8006ef6 <_ZNK12SimpleString8findFromEjc+0x1a>
    return npos;
 8006f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <_ZNK12SimpleString17subStringFromTillEcc>:

SimpleString SimpleString::subStringFromTill(char startChar, char lastExcludedChar) const
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4611      	mov	r1, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	460b      	mov	r3, r1
 8006f44:	71fb      	strb	r3, [r7, #7]
 8006f46:	4613      	mov	r3, r2
 8006f48:	71bb      	strb	r3, [r7, #6]
    size_t beginPos = find(startChar);
 8006f4a:	79fb      	ldrb	r3, [r7, #7]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	68b8      	ldr	r0, [r7, #8]
 8006f50:	f7ff ffb3 	bl	8006eba <_ZNK12SimpleString4findEc>
 8006f54:	6178      	str	r0, [r7, #20]
    if (beginPos == npos) return "";
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d104      	bne.n	8006f68 <_ZNK12SimpleString17subStringFromTillEcc+0x34>
 8006f5e:	4911      	ldr	r1, [pc, #68]	; (8006fa4 <_ZNK12SimpleString17subStringFromTillEcc+0x70>)
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f7ff fa7e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8006f66:	e019      	b.n	8006f9c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    size_t endPos = findFrom(beginPos, lastExcludedChar);
 8006f68:	79bb      	ldrb	r3, [r7, #6]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6979      	ldr	r1, [r7, #20]
 8006f6e:	68b8      	ldr	r0, [r7, #8]
 8006f70:	f7ff ffb4 	bl	8006edc <_ZNK12SimpleString8findFromEjc>
 8006f74:	6138      	str	r0, [r7, #16]
    if (endPos == npos) return subString(beginPos);
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d106      	bne.n	8006f8c <_ZNK12SimpleString17subStringFromTillEcc+0x58>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	68b9      	ldr	r1, [r7, #8]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ff77 	bl	8006e78 <_ZNK12SimpleString9subStringEj>
 8006f8a:	e007      	b.n	8006f9c <_ZNK12SimpleString17subStringFromTillEcc+0x68>

    return subString(beginPos, endPos - beginPos);
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	f7ff ff24 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
}
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	08014a5c 	.word	0x08014a5c

08006fa8 <_ZN12SimpleString15copyToNewBufferEPKcj>:

char* SimpleString::copyToNewBuffer(const char* bufferToCopy, size_t bufferSize)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
    char* newBuffer = allocStringBuffer(bufferSize, __FILE__, __LINE__);
 8006fb2:	f240 2275 	movw	r2, #629	; 0x275
 8006fb6:	490a      	ldr	r1, [pc, #40]	; (8006fe0 <_ZN12SimpleString15copyToNewBufferEPKcj+0x38>)
 8006fb8:	6838      	ldr	r0, [r7, #0]
 8006fba:	f7fe ffd7 	bl	8005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>
 8006fbe:	60f8      	str	r0, [r7, #12]
    StrNCpy(newBuffer, bufferToCopy, bufferSize);
 8006fc0:	683a      	ldr	r2, [r7, #0]
 8006fc2:	6879      	ldr	r1, [r7, #4]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff f8f6 	bl	80061b6 <_ZN12SimpleString7StrNCpyEPcPKcj>
    newBuffer[bufferSize-1] = '\0';
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
    return newBuffer;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	0801499c 	.word	0x0801499c

08006fe4 <_ZN12SimpleString7isDigitEc>:
    StrNCpy(bufferToCopy, getBuffer(), sizeToCopy);
    bufferToCopy[sizeToCopy] = '\0';
}

bool SimpleString::isDigit(char ch)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	71fb      	strb	r3, [r7, #7]
    return '0' <= ch && '9' >= ch;
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	2b2f      	cmp	r3, #47	; 0x2f
 8006ff2:	d904      	bls.n	8006ffe <_ZN12SimpleString7isDigitEc+0x1a>
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
 8006ff6:	2b39      	cmp	r3, #57	; 0x39
 8006ff8:	d801      	bhi.n	8006ffe <_ZN12SimpleString7isDigitEc+0x1a>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e000      	b.n	8007000 <_ZN12SimpleString7isDigitEc+0x1c>
 8006ffe:	2300      	movs	r3, #0
}
 8007000:	4618      	mov	r0, r3
 8007002:	370c      	adds	r7, #12
 8007004:	46bd      	mov	sp, r7
 8007006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700a:	4770      	bx	lr

0800700c <_ZN12SimpleString7isSpaceEc>:

bool SimpleString::isSpace(char ch)
{
 800700c:	b480      	push	{r7}
 800700e:	b083      	sub	sp, #12
 8007010:	af00      	add	r7, sp, #0
 8007012:	4603      	mov	r3, r0
 8007014:	71fb      	strb	r3, [r7, #7]
    return (ch == ' ') || (0x08 < ch && 0x0E > ch);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	2b20      	cmp	r3, #32
 800701a:	d005      	beq.n	8007028 <_ZN12SimpleString7isSpaceEc+0x1c>
 800701c:	79fb      	ldrb	r3, [r7, #7]
 800701e:	2b08      	cmp	r3, #8
 8007020:	d904      	bls.n	800702c <_ZN12SimpleString7isSpaceEc+0x20>
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	2b0d      	cmp	r3, #13
 8007026:	d801      	bhi.n	800702c <_ZN12SimpleString7isSpaceEc+0x20>
 8007028:	2301      	movs	r3, #1
 800702a:	e000      	b.n	800702e <_ZN12SimpleString7isSpaceEc+0x22>
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr

0800703a <_ZN12SimpleString7isUpperEc>:

bool SimpleString::isUpper(char ch)
{
 800703a:	b480      	push	{r7}
 800703c:	b083      	sub	sp, #12
 800703e:	af00      	add	r7, sp, #0
 8007040:	4603      	mov	r3, r0
 8007042:	71fb      	strb	r3, [r7, #7]
    return 'A' <= ch && 'Z' >= ch;
 8007044:	79fb      	ldrb	r3, [r7, #7]
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d904      	bls.n	8007054 <_ZN12SimpleString7isUpperEc+0x1a>
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	2b5a      	cmp	r3, #90	; 0x5a
 800704e:	d801      	bhi.n	8007054 <_ZN12SimpleString7isUpperEc+0x1a>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <_ZN12SimpleString7isUpperEc+0x1c>
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <_ZN12SimpleString9isControlEc>:

bool SimpleString::isControl(char ch)
{
 8007062:	b480      	push	{r7}
 8007064:	b083      	sub	sp, #12
 8007066:	af00      	add	r7, sp, #0
 8007068:	4603      	mov	r3, r0
 800706a:	71fb      	strb	r3, [r7, #7]
    return ch < ' ' || ch == char(0x7F);
 800706c:	79fb      	ldrb	r3, [r7, #7]
 800706e:	2b1f      	cmp	r3, #31
 8007070:	d902      	bls.n	8007078 <_ZN12SimpleString9isControlEc+0x16>
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	2b7f      	cmp	r3, #127	; 0x7f
 8007076:	d101      	bne.n	800707c <_ZN12SimpleString9isControlEc+0x1a>
 8007078:	2301      	movs	r3, #1
 800707a:	e000      	b.n	800707e <_ZN12SimpleString9isControlEc+0x1c>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <_ZN12SimpleString32isControlWithShortEscapeSequenceEc>:

bool SimpleString::isControlWithShortEscapeSequence(char ch)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	4603      	mov	r3, r0
 8007092:	71fb      	strb	r3, [r7, #7]
    return '\a' <= ch && '\r' >= ch;
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	2b06      	cmp	r3, #6
 8007098:	d904      	bls.n	80070a4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	2b0d      	cmp	r3, #13
 800709e:	d801      	bhi.n	80070a4 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1a>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <_ZN12SimpleString32isControlWithShortEscapeSequenceEc+0x1c>
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <_Z10StringFromPKc>:
{
    return SimpleString(StringFromFormat("%s", value ? "true" : "false"));
}

SimpleString StringFrom(const char *value)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
    return SimpleString(value);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7ff f9cf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
}
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <_Z25PrintableStringFromOrNullPKc>:
{
    return (expected) ? StringFrom(expected) : StringFrom("(null)");
}

SimpleString PrintableStringFromOrNull(const char * expected)
{
 80070cc:	b590      	push	{r4, r7, lr}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
    return (expected) ? StringFrom(expected).printable() : StringFrom("(null)");
 80070d6:	2400      	movs	r4, #0
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00e      	beq.n	80070fc <_Z25PrintableStringFromOrNullPKc+0x30>
 80070de:	f107 0308 	add.w	r3, r7, #8
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff ffe4 	bl	80070b2 <_Z10StringFromPKc>
 80070ea:	2401      	movs	r4, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f107 0208 	add.w	r2, r7, #8
 80070f2:	4611      	mov	r1, r2
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff fc5d 	bl	80069b4 <_ZNK12SimpleString9printableEv>
 80070fa:	e004      	b.n	8007106 <_Z25PrintableStringFromOrNullPKc+0x3a>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4908      	ldr	r1, [pc, #32]	; (8007120 <_Z25PrintableStringFromOrNullPKc+0x54>)
 8007100:	4618      	mov	r0, r3
 8007102:	f7ff ffd6 	bl	80070b2 <_Z10StringFromPKc>
 8007106:	2c00      	cmp	r4, #0
 8007108:	d004      	beq.n	8007114 <_Z25PrintableStringFromOrNullPKc+0x48>
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fd5f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007114:	bf00      	nop
}
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	bd90      	pop	{r4, r7, pc}
 800711e:	bf00      	nop
 8007120:	08014a7c 	.word	0x08014a7c

08007124 <_Z10StringFromi>:

SimpleString StringFrom(int value)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%d", value);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	4904      	ldr	r1, [pc, #16]	; (8007144 <_Z10StringFromi+0x20>)
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f9d9 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	08014a84 	.word	0x08014a84

08007148 <_Z10StringFroml>:

SimpleString StringFrom(long value)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%ld", value);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	4904      	ldr	r1, [pc, #16]	; (8007168 <_Z10StringFroml+0x20>)
 8007158:	4618      	mov	r0, r3
 800715a:	f000 f9c7 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	08014a88 	.word	0x08014a88

0800716c <_Z10StringFromPKv>:

SimpleString StringFrom(const void* value)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 8007176:	f107 0308 	add.w	r3, r7, #8
 800717a:	4910      	ldr	r1, [pc, #64]	; (80071bc <_Z10StringFromPKv+0x50>)
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff f970 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007182:	f107 0310 	add.w	r3, r7, #16
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 f945 	bl	8007418 <_Z13HexStringFromPKv>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f107 0210 	add.w	r2, r7, #16
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff fd7c 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 800719e:	f107 0310 	add.w	r3, r7, #16
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fd15 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80071a8:	f107 0308 	add.w	r3, r7, #8
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7ff fd10 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80071b2:	bf00      	nop
}
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	3718      	adds	r7, #24
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	08014a8c 	.word	0x08014a8c

080071c0 <_Z10StringFromPFvvE>:

SimpleString StringFrom(void (*value)())
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
    return SimpleString("0x") + HexStringFrom(value);
 80071ca:	f107 0308 	add.w	r3, r7, #8
 80071ce:	4910      	ldr	r1, [pc, #64]	; (8007210 <_Z10StringFromPFvvE+0x50>)
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff f946 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80071d6:	f107 0310 	add.w	r3, r7, #16
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 f92f 	bl	8007440 <_Z13HexStringFromPFvvE>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f107 0210 	add.w	r2, r7, #16
 80071e8:	f107 0108 	add.w	r1, r7, #8
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7ff fd52 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 80071f2:	f107 0310 	add.w	r3, r7, #16
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fceb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80071fc:	f107 0308 	add.w	r3, r7, #8
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff fce6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007206:	bf00      	nop
}
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	3718      	adds	r7, #24
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	08014a8c 	.word	0x08014a8c

08007214 <_Z13HexStringFroml>:

SimpleString HexStringFrom(long value)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	4904      	ldr	r1, [pc, #16]	; (8007234 <_Z13HexStringFroml+0x20>)
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f961 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	08014a90 	.word	0x08014a90

08007238 <_Z13HexStringFroma>:
{
    return StringFromFormat("%x", value);
}

SimpleString HexStringFrom(signed char value)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
    SimpleString result = StringFromFormat("%x", value);
 8007244:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4912      	ldr	r1, [pc, #72]	; (8007294 <_Z13HexStringFroma+0x5c>)
 800724c:	4618      	mov	r0, r3
 800724e:	f000 f94d 	bl	80074ec <_Z16StringFromFormatPKcz>
    if(value < 0) {
 8007252:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007256:	2b00      	cmp	r3, #0
 8007258:	da16      	bge.n	8007288 <_Z13HexStringFroma+0x50>
        size_t size = result.size();
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fc98 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8007260:	6178      	str	r0, [r7, #20]
        result = result.subString(size-(CPPUTEST_CHAR_BIT/4));
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	1e9a      	subs	r2, r3, #2
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	6879      	ldr	r1, [r7, #4]
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff fe03 	bl	8006e78 <_ZNK12SimpleString9subStringEj>
 8007272:	f107 030c 	add.w	r3, r7, #12
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff f95e 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800727e:	f107 030c 	add.w	r3, r7, #12
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fca5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    }
    return result;
 8007288:	bf00      	nop
}
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}
 8007292:	bf00      	nop
 8007294:	08014a94 	.word	0x08014a94

08007298 <_Z13HexStringFromm>:

SimpleString HexStringFrom(unsigned long value)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", value);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	4904      	ldr	r1, [pc, #16]	; (80072b8 <_Z13HexStringFromm+0x20>)
 80072a8:	4618      	mov	r0, r3
 80072aa:	f000 f91f 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	08014a90 	.word	0x08014a90

080072bc <_Z30BracketsFormattedHexStringFroml>:
{
    return BracketsFormattedHexString(HexStringFrom(value));
}

SimpleString BracketsFormattedHexStringFrom(long value)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	6839      	ldr	r1, [r7, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff ffa1 	bl	8007214 <_Z13HexStringFroml>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f107 0208 	add.w	r2, r7, #8
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 f846 	bl	800736c <_Z26BracketsFormattedHexString12SimpleString>
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff fc74 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80072ea:	bf00      	nop
}
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <_Z30BracketsFormattedHexStringFromm>:


SimpleString BracketsFormattedHexStringFrom(unsigned long value)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
    return BracketsFormattedHexString(HexStringFrom(value));
 80072fe:	f107 0308 	add.w	r3, r7, #8
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	4618      	mov	r0, r3
 8007306:	f7ff ffc7 	bl	8007298 <_Z13HexStringFromm>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f107 0208 	add.w	r2, r7, #8
 8007310:	4611      	mov	r1, r2
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f82a 	bl	800736c <_Z26BracketsFormattedHexString12SimpleString>
 8007318:	f107 0308 	add.w	r3, r7, #8
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fc58 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007322:	bf00      	nop
}
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <_Z30BracketsFormattedHexStringFroma>:

SimpleString BracketsFormattedHexStringFrom(signed char value)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	460b      	mov	r3, r1
 8007336:	70fb      	strb	r3, [r7, #3]
    return BracketsFormattedHexString(HexStringFrom(value));
 8007338:	f107 0308 	add.w	r3, r7, #8
 800733c:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8007340:	4611      	mov	r1, r2
 8007342:	4618      	mov	r0, r3
 8007344:	f7ff ff78 	bl	8007238 <_Z13HexStringFroma>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f107 0208 	add.w	r2, r7, #8
 800734e:	4611      	mov	r1, r2
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f80b 	bl	800736c <_Z26BracketsFormattedHexString12SimpleString>
 8007356:	f107 0308 	add.w	r3, r7, #8
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff fc39 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007360:	bf00      	nop
}
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <_Z26BracketsFormattedHexString12SimpleString>:

SimpleString BracketsFormattedHexString(SimpleString hexString)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
    return SimpleString("(0x") + hexString + ")" ;
 8007376:	f107 0310 	add.w	r3, r7, #16
 800737a:	4917      	ldr	r1, [pc, #92]	; (80073d8 <_Z26BracketsFormattedHexString12SimpleString+0x6c>)
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff f870 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007382:	f107 0308 	add.w	r3, r7, #8
 8007386:	f107 0110 	add.w	r1, r7, #16
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fc82 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8007392:	f107 0318 	add.w	r3, r7, #24
 8007396:	4911      	ldr	r1, [pc, #68]	; (80073dc <_Z26BracketsFormattedHexString12SimpleString+0x70>)
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff f862 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f107 0218 	add.w	r2, r7, #24
 80073a4:	f107 0108 	add.w	r1, r7, #8
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7ff fc74 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 80073ae:	f107 0318 	add.w	r3, r7, #24
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff fc0d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80073b8:	f107 0308 	add.w	r3, r7, #8
 80073bc:	4618      	mov	r0, r3
 80073be:	f7ff fc08 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80073c2:	f107 0310 	add.w	r3, r7, #16
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fc03 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80073cc:	bf00      	nop
}
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	3720      	adds	r7, #32
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	bf00      	nop
 80073d8:	08014a98 	.word	0x08014a98
 80073dc:	08014a9c 	.word	0x08014a9c

080073e0 <_ZL25convertPointerToLongValuePKv>:
}

#else   /* CPPUTEST_USE_LONG_LONG */

static long convertPointerToLongValue(const void* value)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	60fb      	str	r3, [r7, #12]
    return *long_value;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3714      	adds	r7, #20
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <_ZL33convertFunctionPointerToLongValuePFvvE>:

static long convertFunctionPointerToLongValue(void (*value)())
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
    /*
     * This way of converting also can convert a 64bit pointer in a 32bit integer by truncating.
     * This isn't the right way to convert pointers values and need to change by implementing a
     * proper portable way to convert pointers to strings.
     */
    long* long_value = (long*) &value;
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	60fb      	str	r3, [r7, #12]
    return *long_value;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <_Z13HexStringFromPKv>:
{
    return "<ulonglong_unsupported>";
}

SimpleString HexStringFrom(const void* value)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertPointerToLongValue(value));
 8007422:	6838      	ldr	r0, [r7, #0]
 8007424:	f7ff ffdc 	bl	80073e0 <_ZL25convertPointerToLongValuePKv>
 8007428:	4602      	mov	r2, r0
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4903      	ldr	r1, [pc, #12]	; (800743c <_Z13HexStringFromPKv+0x24>)
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f85c 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	08014a90 	.word	0x08014a90

08007440 <_Z13HexStringFromPFvvE>:

SimpleString HexStringFrom(void (*value)())
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lx", convertFunctionPointerToLongValue(value));
 800744a:	6838      	ldr	r0, [r7, #0]
 800744c:	f7ff ffd6 	bl	80073fc <_ZL33convertFunctionPointerToLongValuePFvvE>
 8007450:	4602      	mov	r2, r0
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4903      	ldr	r1, [pc, #12]	; (8007464 <_Z13HexStringFromPFvvE+0x24>)
 8007456:	4618      	mov	r0, r3
 8007458:	f000 f848 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	3708      	adds	r7, #8
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	08014a90 	.word	0x08014a90

08007468 <_Z10StringFromdi>:
}

#endif  /* CPPUTEST_USE_LONG_LONG */

SimpleString StringFrom(double value, int precision)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af02      	add	r7, sp, #8
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	ed87 0b00 	vstr	d0, [r7]
 8007474:	60b9      	str	r1, [r7, #8]
    if (PlatformSpecificIsNan(value))
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <_Z10StringFromdi+0x70>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	ed97 0b00 	vldr	d0, [r7]
 800747e:	4798      	blx	r3
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <_Z10StringFromdi+0x32>
        return "Nan - Not a number";
 8007490:	4912      	ldr	r1, [pc, #72]	; (80074dc <_Z10StringFromdi+0x74>)
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f7fe ffe5 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007498:	e01a      	b.n	80074d0 <_Z10StringFromdi+0x68>
    else if (PlatformSpecificIsInf(value))
 800749a:	4b11      	ldr	r3, [pc, #68]	; (80074e0 <_Z10StringFromdi+0x78>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	ed97 0b00 	vldr	d0, [r7]
 80074a2:	4798      	blx	r3
 80074a4:	4603      	mov	r3, r0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <_Z10StringFromdi+0x56>
        return "Inf - Infinity";
 80074b4:	490b      	ldr	r1, [pc, #44]	; (80074e4 <_Z10StringFromdi+0x7c>)
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7fe ffd3 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80074bc:	e008      	b.n	80074d0 <_Z10StringFromdi+0x68>
    else
        return StringFromFormat("%.*g", precision, value);
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c4:	e9cd 2300 	strd	r2, r3, [sp]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	4907      	ldr	r1, [pc, #28]	; (80074e8 <_Z10StringFromdi+0x80>)
 80074cc:	f000 f80e 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}
 80074d8:	200000e0 	.word	0x200000e0
 80074dc:	08014ad0 	.word	0x08014ad0
 80074e0:	200000e4 	.word	0x200000e4
 80074e4:	08014ae4 	.word	0x08014ae4
 80074e8:	08014af4 	.word	0x08014af4

080074ec <_Z16StringFromFormatPKcz>:
{
    return SimpleString(value);
}

SimpleString StringFromFormat(const char* format, ...)
{
 80074ec:	b40e      	push	{r1, r2, r3}
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
    SimpleString resultString;
 80074f6:	4910      	ldr	r1, [pc, #64]	; (8007538 <_Z16StringFromFormatPKcz+0x4c>)
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fe ffb2 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    va_list arguments;
    va_start(arguments, format);
 80074fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007502:	60fb      	str	r3, [r7, #12]

    resultString = VStringFromFormat(format, arguments);
 8007504:	f107 0310 	add.w	r3, r7, #16
 8007508:	68fa      	ldr	r2, [r7, #12]
 800750a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800750c:	4618      	mov	r0, r3
 800750e:	f000 f839 	bl	8007584 <_Z17VStringFromFormatPKcSt9__va_list>
 8007512:	f107 0310 	add.w	r3, r7, #16
 8007516:	4619      	mov	r1, r3
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7ff f80e 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800751e:	f107 0310 	add.w	r3, r7, #16
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fb55 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    va_end(arguments);
    return resultString;
 8007528:	bf00      	nop
}
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007534:	b003      	add	sp, #12
 8007536:	4770      	bx	lr
 8007538:	08014a5c 	.word	0x08014a5c

0800753c <_Z10StringFromj>:

SimpleString StringFrom(unsigned int i)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%u", i);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	4904      	ldr	r1, [pc, #16]	; (800755c <_Z10StringFromj+0x20>)
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff ffcd 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	08014b00 	.word	0x08014b00

08007560 <_Z10StringFromm>:
}

#endif

SimpleString StringFrom(unsigned long i)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
    return StringFromFormat("%lu", i);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	4904      	ldr	r1, [pc, #16]	; (8007580 <_Z10StringFromm+0x20>)
 8007570:	4618      	mov	r0, r3
 8007572:	f7ff ffbb 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	3708      	adds	r7, #8
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	08014b04 	.word	0x08014b04

08007584 <_Z17VStringFromFormatPKcSt9__va_list>:

SimpleString VStringFromFormat(const char* format, va_list args)
{
 8007584:	b590      	push	{r4, r7, lr}
 8007586:	b0a7      	sub	sp, #156	; 0x9c
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
    va_list argsCopy;
    va_copy(argsCopy, args);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	67bb      	str	r3, [r7, #120]	; 0x78
    enum
    {
        sizeOfdefaultBuffer = 100
    };
    char defaultBuffer[sizeOfdefaultBuffer];
    SimpleString resultString;
 8007594:	492e      	ldr	r1, [pc, #184]	; (8007650 <_Z17VStringFromFormatPKcSt9__va_list+0xcc>)
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7fe ff63 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    size_t size = (size_t)PlatformSpecificVSNprintf(defaultBuffer, sizeOfdefaultBuffer, format, args);
 800759c:	4b2d      	ldr	r3, [pc, #180]	; (8007654 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 800759e:	681c      	ldr	r4, [r3, #0]
 80075a0:	f107 0014 	add.w	r0, r7, #20
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	2164      	movs	r1, #100	; 0x64
 80075aa:	47a0      	blx	r4
 80075ac:	4603      	mov	r3, r0
 80075ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (size < sizeOfdefaultBuffer) {
 80075b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075b6:	2b63      	cmp	r3, #99	; 0x63
 80075b8:	d813      	bhi.n	80075e2 <_Z17VStringFromFormatPKcSt9__va_list+0x5e>
        resultString = SimpleString(defaultBuffer);
 80075ba:	f107 0214 	add.w	r2, r7, #20
 80075be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075c2:	4611      	mov	r1, r2
 80075c4:	4618      	mov	r0, r3
 80075c6:	f7fe ff4c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80075ca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075ce:	4619      	mov	r1, r3
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7fe ffb2 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80075d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff faf9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        resultString = SimpleString(newBuffer);

        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
    }
    va_end(argsCopy);
    return resultString;
 80075e0:	e031      	b.n	8007646 <_Z17VStringFromFormatPKcSt9__va_list+0xc2>
        size_t newBufferSize = size + 1;
 80075e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075e6:	3301      	adds	r3, #1
 80075e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        char* newBuffer = SimpleString::allocStringBuffer(newBufferSize, __FILE__, __LINE__);
 80075ec:	f240 32c3 	movw	r2, #963	; 0x3c3
 80075f0:	4919      	ldr	r1, [pc, #100]	; (8007658 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 80075f2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80075f6:	f7fe fcb9 	bl	8005f6c <_ZN12SimpleString17allocStringBufferEjPKcj>
 80075fa:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        PlatformSpecificVSNprintf(newBuffer, newBufferSize, format, argsCopy);
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <_Z17VStringFromFormatPKcSt9__va_list+0xd0>)
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800760a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800760e:	47a0      	blx	r4
        resultString = SimpleString(newBuffer);
 8007610:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007614:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007618:	4618      	mov	r0, r3
 800761a:	f7fe ff22 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800761e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007622:	4619      	mov	r1, r3
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f7fe ff88 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800762a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800762e:	4618      	mov	r0, r3
 8007630:	f7ff facf 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        SimpleString::deallocStringBuffer(newBuffer, newBufferSize, __FILE__, __LINE__);
 8007634:	f240 33c7 	movw	r3, #967	; 0x3c7
 8007638:	4a07      	ldr	r2, [pc, #28]	; (8007658 <_Z17VStringFromFormatPKcSt9__va_list+0xd4>)
 800763a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800763e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8007642:	f7fe fca7 	bl	8005f94 <_ZN12SimpleString19deallocStringBufferEPcjPKcj>
    return resultString;
 8007646:	bf00      	nop
}
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	379c      	adds	r7, #156	; 0x9c
 800764c:	46bd      	mov	sp, r7
 800764e:	bd90      	pop	{r4, r7, pc}
 8007650:	08014a5c 	.word	0x08014a5c
 8007654:	200000ac 	.word	0x200000ac
 8007658:	0801499c 	.word	0x0801499c

0800765c <_Z16StringFromBinaryPKhj>:

SimpleString StringFromBinary(const unsigned char* value, size_t size)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	; 0x28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
    SimpleString result;
 8007668:	491f      	ldr	r1, [pc, #124]	; (80076e8 <_Z16StringFromBinaryPKhj+0x8c>)
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7fe fef9 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    for (size_t i = 0; i < size; i++) {
 8007670:	2300      	movs	r3, #0
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
 8007674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	429a      	cmp	r2, r3
 800767a:	d219      	bcs.n	80076b0 <_Z16StringFromBinaryPKhj+0x54>
        result += StringFromFormat("%02X ", value[i]);
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	4413      	add	r3, r2
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	461a      	mov	r2, r3
 8007686:	f107 0314 	add.w	r3, r7, #20
 800768a:	4918      	ldr	r1, [pc, #96]	; (80076ec <_Z16StringFromBinaryPKhj+0x90>)
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff ff2d 	bl	80074ec <_Z16StringFromFormatPKcz>
 8007692:	f107 0314 	add.w	r3, r7, #20
 8007696:	4619      	mov	r1, r3
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff fb17 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800769e:	f107 0314 	add.w	r3, r7, #20
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff fa95 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    for (size_t i = 0; i < size; i++) {
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	3301      	adds	r3, #1
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
 80076ae:	e7e1      	b.n	8007674 <_Z16StringFromBinaryPKhj+0x18>
    }
    result = result.subString(0, result.size() - 1);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f7ff fa6d 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 80076b6:	4603      	mov	r3, r0
 80076b8:	3b01      	subs	r3, #1
 80076ba:	f107 001c 	add.w	r0, r7, #28
 80076be:	2200      	movs	r2, #0
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	f7ff fb8f 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 80076c6:	f107 031c 	add.w	r3, r7, #28
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f7fe ff34 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80076d2:	f107 031c 	add.w	r3, r7, #28
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fa7b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    return result;
 80076dc:	bf00      	nop
}
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	3728      	adds	r7, #40	; 0x28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	08014a5c 	.word	0x08014a5c
 80076ec:	08014b08 	.word	0x08014b08

080076f0 <_Z22StringFromBinaryOrNullPKhj>:

SimpleString StringFromBinaryOrNull(const unsigned char* value, size_t size)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
    return (value) ? StringFromBinary(value, size) : StringFrom("(null)");
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d006      	beq.n	8007710 <_Z22StringFromBinaryOrNullPKhj+0x20>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	4618      	mov	r0, r3
 800770a:	f7ff ffa7 	bl	800765c <_Z16StringFromBinaryPKhj>
 800770e:	e004      	b.n	800771a <_Z22StringFromBinaryOrNullPKhj+0x2a>
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4904      	ldr	r1, [pc, #16]	; (8007724 <_Z22StringFromBinaryOrNullPKhj+0x34>)
 8007714:	4618      	mov	r0, r3
 8007716:	f7ff fccc 	bl	80070b2 <_Z10StringFromPKc>
}
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	08014a7c 	.word	0x08014a7c

08007728 <_Z20StringFromMaskedBitsmmj>:
{
    return (value) ? StringFromBinaryWithSize(value, size) : StringFrom("(null)");
}

SimpleString StringFromMaskedBits(unsigned long value, unsigned long mask, size_t byteCount)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b088      	sub	sp, #32
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
 8007734:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8007736:	4925      	ldr	r1, [pc, #148]	; (80077cc <_Z20StringFromMaskedBitsmmj+0xa4>)
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f7fe fe92 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    size_t bitCount = (byteCount > sizeof(unsigned long)) ? (sizeof(unsigned long) * CPPUTEST_CHAR_BIT) : (byteCount * CPPUTEST_CHAR_BIT);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	2b04      	cmp	r3, #4
 8007742:	d802      	bhi.n	800774a <_Z20StringFromMaskedBitsmmj+0x22>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	e000      	b.n	800774c <_Z20StringFromMaskedBitsmmj+0x24>
 800774a:	2320      	movs	r3, #32
 800774c:	61bb      	str	r3, [r7, #24]
    const unsigned long msbMask = (((unsigned long) 1) << (bitCount - 1));
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	3b01      	subs	r3, #1
 8007752:	2201      	movs	r2, #1
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]

    for (size_t i = 0; i < bitCount; i++) {
 800775a:	2300      	movs	r3, #0
 800775c:	61fb      	str	r3, [r7, #28]
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	429a      	cmp	r2, r3
 8007764:	d22d      	bcs.n	80077c2 <_Z20StringFromMaskedBitsmmj+0x9a>
        if (mask & msbMask) {
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	4013      	ands	r3, r2
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <_Z20StringFromMaskedBitsmmj+0x62>
            result += (value & msbMask) ? "1" : "0";
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	4013      	ands	r3, r2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d001      	beq.n	800777e <_Z20StringFromMaskedBitsmmj+0x56>
 800777a:	4b15      	ldr	r3, [pc, #84]	; (80077d0 <_Z20StringFromMaskedBitsmmj+0xa8>)
 800777c:	e000      	b.n	8007780 <_Z20StringFromMaskedBitsmmj+0x58>
 800777e:	4b15      	ldr	r3, [pc, #84]	; (80077d4 <_Z20StringFromMaskedBitsmmj+0xac>)
 8007780:	4619      	mov	r1, r3
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff fab4 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
 8007788:	e003      	b.n	8007792 <_Z20StringFromMaskedBitsmmj+0x6a>
        }
        else {
            result += "x";
 800778a:	4913      	ldr	r1, [pc, #76]	; (80077d8 <_Z20StringFromMaskedBitsmmj+0xb0>)
 800778c:	68f8      	ldr	r0, [r7, #12]
 800778e:	f7ff faaf 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
        }

        if (((i % 8) == 7) && (i != (bitCount - 1))) {
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	2b07      	cmp	r3, #7
 800779a:	d108      	bne.n	80077ae <_Z20StringFromMaskedBitsmmj+0x86>
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	3b01      	subs	r3, #1
 80077a0:	69fa      	ldr	r2, [r7, #28]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d003      	beq.n	80077ae <_Z20StringFromMaskedBitsmmj+0x86>
            result += " ";
 80077a6:	490d      	ldr	r1, [pc, #52]	; (80077dc <_Z20StringFromMaskedBitsmmj+0xb4>)
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f7ff faa1 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
        }

        value <<= 1;
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	005b      	lsls	r3, r3, #1
 80077b2:	60bb      	str	r3, [r7, #8]
        mask <<= 1;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	607b      	str	r3, [r7, #4]
    for (size_t i = 0; i < bitCount; i++) {
 80077ba:	69fb      	ldr	r3, [r7, #28]
 80077bc:	3301      	adds	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
 80077c0:	e7cd      	b.n	800775e <_Z20StringFromMaskedBitsmmj+0x36>
    }

    return result;
 80077c2:	bf00      	nop
}
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	08014a5c 	.word	0x08014a5c
 80077d0:	08014b34 	.word	0x08014b34
 80077d4:	08014b38 	.word	0x08014b38
 80077d8:	08014b3c 	.word	0x08014b3c
 80077dc:	08014b40 	.word	0x08014b40

080077e0 <_ZN22SimpleStringCollectionC1Ev>:
    }

    return StringFromFormat("%u%s", number, suffix);
}

SimpleStringCollection::SimpleStringCollection()
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	3304      	adds	r3, #4
 80077ec:	4907      	ldr	r1, [pc, #28]	; (800780c <_ZN22SimpleStringCollectionC1Ev+0x2c>)
 80077ee:	4618      	mov	r0, r3
 80077f0:	f7fe fe37 	bl	8006462 <_ZN12SimpleStringC1EPKc>
{
    collection_ = NULLPTR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
    size_ = 0;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	60da      	str	r2, [r3, #12]
}
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4618      	mov	r0, r3
 8007804:	3708      	adds	r7, #8
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	08014a5c 	.word	0x08014a5c

08007810 <_ZN22SimpleStringCollection8allocateEj>:

void SimpleStringCollection::allocate(size_t _size)
{
 8007810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
    delete[] collection_;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01e      	beq.n	8007860 <_ZN22SimpleStringCollection8allocateEj+0x50>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3b04      	subs	r3, #4
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	18d4      	adds	r4, r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	429c      	cmp	r4, r3
 8007838:	d004      	beq.n	8007844 <_ZN22SimpleStringCollection8allocateEj+0x34>
 800783a:	3c08      	subs	r4, #8
 800783c:	4620      	mov	r0, r4
 800783e:	f7ff f9c8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007842:	e7f6      	b.n	8007832 <_ZN22SimpleStringCollection8allocateEj+0x22>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f1a3 0208 	sub.w	r2, r3, #8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	3b04      	subs	r3, #4
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3301      	adds	r3, #1
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4619      	mov	r1, r3
 800785a:	4610      	mov	r0, r2
 800785c:	f7fd ff5e 	bl	800571c <_ZdaPvj>

    size_ = _size;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	683a      	ldr	r2, [r7, #0]
 8007864:	60da      	str	r2, [r3, #12]
    collection_ = new SimpleString[size_];
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	68dc      	ldr	r4, [r3, #12]
 800786a:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800786e:	d202      	bcs.n	8007876 <_ZN22SimpleStringCollection8allocateEj+0x66>
 8007870:	1c63      	adds	r3, r4, #1
 8007872:	00db      	lsls	r3, r3, #3
 8007874:	e001      	b.n	800787a <_ZN22SimpleStringCollection8allocateEj+0x6a>
 8007876:	f04f 33ff 	mov.w	r3, #4294967295
 800787a:	f240 4227 	movw	r2, #1063	; 0x427
 800787e:	4910      	ldr	r1, [pc, #64]	; (80078c0 <_ZN22SimpleStringCollection8allocateEj+0xb0>)
 8007880:	4618      	mov	r0, r3
 8007882:	f7fd ff29 	bl	80056d8 <_ZnajPKci>
 8007886:	4605      	mov	r5, r0
 8007888:	1d2b      	adds	r3, r5, #4
 800788a:	3b04      	subs	r3, #4
 800788c:	2208      	movs	r2, #8
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	1d2b      	adds	r3, r5, #4
 8007892:	601c      	str	r4, [r3, #0]
 8007894:	f105 0308 	add.w	r3, r5, #8
 8007898:	1e62      	subs	r2, r4, #1
 800789a:	4614      	mov	r4, r2
 800789c:	461e      	mov	r6, r3
 800789e:	2c00      	cmp	r4, #0
 80078a0:	db06      	blt.n	80078b0 <_ZN22SimpleStringCollection8allocateEj+0xa0>
 80078a2:	4908      	ldr	r1, [pc, #32]	; (80078c4 <_ZN22SimpleStringCollection8allocateEj+0xb4>)
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7fe fddc 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80078aa:	3608      	adds	r6, #8
 80078ac:	3c01      	subs	r4, #1
 80078ae:	e7f6      	b.n	800789e <_ZN22SimpleStringCollection8allocateEj+0x8e>
 80078b0:	f105 0208 	add.w	r2, r5, #8
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078c0:	0801499c 	.word	0x0801499c
 80078c4:	08014a5c 	.word	0x08014a5c

080078c8 <_ZN22SimpleStringCollectionD1Ev>:

SimpleStringCollection::~SimpleStringCollection()
 80078c8:	b590      	push	{r4, r7, lr}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
{
    delete[] (collection_);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d01e      	beq.n	8007916 <_ZN22SimpleStringCollectionD1Ev+0x4e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	3b04      	subs	r3, #4
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	18d4      	adds	r4, r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	429c      	cmp	r4, r3
 80078ee:	d004      	beq.n	80078fa <_ZN22SimpleStringCollectionD1Ev+0x32>
 80078f0:	3c08      	subs	r4, #8
 80078f2:	4620      	mov	r0, r4
 80078f4:	f7ff f96d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80078f8:	e7f6      	b.n	80078e8 <_ZN22SimpleStringCollectionD1Ev+0x20>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f1a3 0208 	sub.w	r2, r3, #8
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3b04      	subs	r3, #4
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	4619      	mov	r1, r3
 8007910:	4610      	mov	r0, r2
 8007912:	f7fd ff03 	bl	800571c <_ZdaPvj>
SimpleStringCollection::~SimpleStringCollection()
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3304      	adds	r3, #4
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff f959 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4618      	mov	r0, r3
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	bd90      	pop	{r4, r7, pc}

0800792a <_ZNK22SimpleStringCollection4sizeEv>:

size_t SimpleStringCollection::size() const
{
 800792a:	b480      	push	{r7}
 800792c:	b083      	sub	sp, #12
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
    return size_;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
	...

08007944 <_ZN22SimpleStringCollectionixEj>:

SimpleString& SimpleStringCollection::operator[](size_t index)
{
 8007944:	b590      	push	{r4, r7, lr}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
    if (index >= size_) {
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	429a      	cmp	r2, r3
 8007956:	d315      	bcc.n	8007984 <_ZN22SimpleStringCollectionixEj+0x40>
        empty_ = "";
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1d1c      	adds	r4, r3, #4
 800795c:	f107 0308 	add.w	r3, r7, #8
 8007960:	490d      	ldr	r1, [pc, #52]	; (8007998 <_ZN22SimpleStringCollectionixEj+0x54>)
 8007962:	4618      	mov	r0, r3
 8007964:	f7fe fd7d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007968:	f107 0308 	add.w	r3, r7, #8
 800796c:	4619      	mov	r1, r3
 800796e:	4620      	mov	r0, r4
 8007970:	f7fe fde3 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8007974:	f107 0308 	add.w	r3, r7, #8
 8007978:	4618      	mov	r0, r3
 800797a:	f7ff f92a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        return empty_;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	3304      	adds	r3, #4
 8007982:	e004      	b.n	800798e <_ZN22SimpleStringCollectionixEj+0x4a>
    }

    return collection_[index];
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	00db      	lsls	r3, r3, #3
 800798c:	4413      	add	r3, r2
}
 800798e:	4618      	mov	r0, r3
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	bd90      	pop	{r4, r7, pc}
 8007996:	bf00      	nop
 8007998:	08014a5c 	.word	0x08014a5c

0800799c <_ZN18TeamCityTestOutputC1Ev>:
#include "CppUTest/TestHarness.h"
#include "CppUTest/TeamCityTestOutput.h"

TeamCityTestOutput::TeamCityTestOutput() : currtest_(NULLPTR), currGroup_()
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fc f970 	bl	8003c8c <_ZN17ConsoleTestOutputC1Ev>
 80079ac:	4a08      	ldr	r2, [pc, #32]	; (80079d0 <_ZN18TeamCityTestOutputC1Ev+0x34>)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	611a      	str	r2, [r3, #16]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	3314      	adds	r3, #20
 80079bc:	4905      	ldr	r1, [pc, #20]	; (80079d4 <_ZN18TeamCityTestOutputC1Ev+0x38>)
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fe fd4f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
{
}
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	080166e0 	.word	0x080166e0
 80079d4:	08014b5c 	.word	0x08014b5c

080079d8 <_ZN18TeamCityTestOutputD1Ev>:

TeamCityTestOutput::~TeamCityTestOutput()
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <_ZN18TeamCityTestOutputD1Ev+0x2c>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	3314      	adds	r3, #20
 80079ea:	4618      	mov	r0, r3
 80079ec:	f7ff f8f1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc f95c 	bl	8003cb0 <_ZN17ConsoleTestOutputD1Ev>
{
}
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	080166e0 	.word	0x080166e0

08007a08 <_ZN18TeamCityTestOutputD0Ev>:
TeamCityTestOutput::~TeamCityTestOutput()
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
}
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f7ff ffe1 	bl	80079d8 <_ZN18TeamCityTestOutputD1Ev>
 8007a16:	211c      	movs	r1, #28
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f7fd fe4d 	bl	80056b8 <_ZdlPvj>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b086      	sub	sp, #24
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
    print("##teamcity[testStarted name='");
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	332c      	adds	r3, #44	; 0x2c
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	492b      	ldr	r1, [pc, #172]	; (8007aec <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc4>)
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4798      	blx	r3
    printEscaped(test.getName().asCharString());
 8007a42:	f107 0308 	add.w	r3, r7, #8
 8007a46:	6839      	ldr	r1, [r7, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f004 fdcb 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff f890 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f919 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff f8b3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	332c      	adds	r3, #44	; 0x2c
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	491e      	ldr	r1, [pc, #120]	; (8007af0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8007a78:	4610      	mov	r0, r2
 8007a7a:	4798      	blx	r3
    if (!test.willRun()) {
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3318      	adds	r3, #24
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6838      	ldr	r0, [r7, #0]
 8007a86:	4798      	blx	r3
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f083 0301 	eor.w	r3, r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d024      	beq.n	8007ade <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xb6>
        print("##teamcity[testIgnored name='");
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	332c      	adds	r3, #44	; 0x2c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4915      	ldr	r1, [pc, #84]	; (8007af4 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xcc>)
 8007aa0:	4610      	mov	r0, r2
 8007aa2:	4798      	blx	r3
        printEscaped(test.getName().asCharString());
 8007aa4:	f107 0310 	add.w	r3, r7, #16
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f004 fd9a 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8007ab0:	f107 0310 	add.w	r3, r7, #16
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7ff f85f 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007aba:	4603      	mov	r3, r0
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f8e8 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007ac4:	f107 0310 	add.w	r3, r7, #16
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f7ff f882 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        print("']\n");
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	332c      	adds	r3, #44	; 0x2c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4905      	ldr	r1, [pc, #20]	; (8007af0 <_ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell+0xc8>)
 8007ada:	4610      	mov	r0, r2
 8007adc:	4798      	blx	r3
    }
    currtest_ = &test;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	611a      	str	r2, [r3, #16]
}
 8007ae4:	bf00      	nop
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	08014b60 	.word	0x08014b60
 8007af0:	08014b80 	.word	0x08014b80
 8007af4:	08014b84 	.word	0x08014b84

08007af8 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentTestEnded(const TestResult& res)
{
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
    if (!currtest_)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d03b      	beq.n	8007b82 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8a>
        return;

    print("##teamcity[testFinished name='");
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	332c      	adds	r3, #44	; 0x2c
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	491d      	ldr	r1, [pc, #116]	; (8007b8c <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x94>)
 8007b16:	4610      	mov	r0, r2
 8007b18:	4798      	blx	r3
    printEscaped(currtest_->getName().asCharString());
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	f107 0308 	add.w	r3, r7, #8
 8007b22:	4611      	mov	r1, r2
 8007b24:	4618      	mov	r0, r3
 8007b26:	f004 fd5d 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8007b2a:	f107 0308 	add.w	r3, r7, #8
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7ff f822 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007b34:	4603      	mov	r3, r0
 8007b36:	4619      	mov	r1, r3
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f000 f8ab 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007b3e:	f107 0308 	add.w	r3, r7, #8
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff f845 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print("' duration='");
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	332c      	adds	r3, #44	; 0x2c
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	490f      	ldr	r1, [pc, #60]	; (8007b90 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x98>)
 8007b54:	4610      	mov	r0, r2
 8007b56:	4798      	blx	r3
    print(res.getCurrentTestTotalExecutionTime());
 8007b58:	687d      	ldr	r5, [r7, #4]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3334      	adds	r3, #52	; 0x34
 8007b60:	681c      	ldr	r4, [r3, #0]
 8007b62:	6838      	ldr	r0, [r7, #0]
 8007b64:	f004 fa0a 	bl	800bf7c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47a0      	blx	r4
    print("']\n");
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	332c      	adds	r3, #44	; 0x2c
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4906      	ldr	r1, [pc, #24]	; (8007b94 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x9c>)
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	4798      	blx	r3
 8007b80:	e000      	b.n	8007b84 <_ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult+0x8c>
        return;
 8007b82:	bf00      	nop
}
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bdb0      	pop	{r4, r5, r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08014ba4 	.word	0x08014ba4
 8007b90:	08014bc4 	.word	0x08014bc4
 8007b94:	08014b80 	.word	0x08014b80

08007b98 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell>:

void TeamCityTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 8007b98:	b590      	push	{r4, r7, lr}
 8007b9a:	b085      	sub	sp, #20
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
    currGroup_ = test.getGroup();
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f103 0414 	add.w	r4, r3, #20
 8007ba8:	f107 0308 	add.w	r3, r7, #8
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f004 fd27 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 8007bb4:	f107 0308 	add.w	r3, r7, #8
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f7fe fcbd 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8007bc0:	f107 0308 	add.w	r3, r7, #8
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff f804 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print("##teamcity[testSuiteStarted name='");
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	332c      	adds	r3, #44	; 0x2c
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	490c      	ldr	r1, [pc, #48]	; (8007c08 <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x70>)
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	3314      	adds	r3, #20
 8007bde:	4618      	mov	r0, r3
 8007be0:	f7fe ffca 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007be4:	4603      	mov	r3, r0
 8007be6:	4619      	mov	r1, r3
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f853 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	332c      	adds	r3, #44	; 0x2c
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4904      	ldr	r1, [pc, #16]	; (8007c0c <_ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell+0x74>)
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	4798      	blx	r3
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd90      	pop	{r4, r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08014bd4 	.word	0x08014bd4
 8007c0c:	08014b80 	.word	0x08014b80

08007c10 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult>:

void TeamCityTestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8007c10:	b590      	push	{r4, r7, lr}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
    if (currGroup_ == "")
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f103 0414 	add.w	r4, r3, #20
 8007c20:	f107 0308 	add.w	r3, r7, #8
 8007c24:	4918      	ldr	r1, [pc, #96]	; (8007c88 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x78>)
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe fc1b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007c2c:	f107 0308 	add.w	r3, r7, #8
 8007c30:	4619      	mov	r1, r3
 8007c32:	4620      	mov	r0, r4
 8007c34:	f7fe ffd9 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461c      	mov	r4, r3
 8007c3c:	f107 0308 	add.w	r3, r7, #8
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fe ffc6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8007c46:	2c00      	cmp	r4, #0
 8007c48:	d11a      	bne.n	8007c80 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x70>
        return;

    print("##teamcity[testSuiteFinished name='");
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	332c      	adds	r3, #44	; 0x2c
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	490d      	ldr	r1, [pc, #52]	; (8007c8c <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x7c>)
 8007c56:	4610      	mov	r0, r2
 8007c58:	4798      	blx	r3
    printEscaped(currGroup_.asCharString());
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	3314      	adds	r3, #20
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe ff8a 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f813 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
    print("']\n");
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	332c      	adds	r3, #44	; 0x2c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4905      	ldr	r1, [pc, #20]	; (8007c90 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x80>)
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4798      	blx	r3
 8007c7e:	e000      	b.n	8007c82 <_ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult+0x72>
        return;
 8007c80:	bf00      	nop
}
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	08014b5c 	.word	0x08014b5c
 8007c8c:	08014bf8 	.word	0x08014bf8
 8007c90:	08014b80 	.word	0x08014b80

08007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>:

void TeamCityTestOutput::printEscaped(const char* s)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
    while (*s) {
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d03f      	beq.n	8007d26 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x92>
        char str[3];
        if ((*s == '\'') || (*s == '|') || (*s == '[') || (*s == ']')) {
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	2b27      	cmp	r3, #39	; 0x27
 8007cac:	d00b      	beq.n	8007cc6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	2b7c      	cmp	r3, #124	; 0x7c
 8007cb4:	d007      	beq.n	8007cc6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	2b5b      	cmp	r3, #91	; 0x5b
 8007cbc:	d003      	beq.n	8007cc6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x32>
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b5d      	cmp	r3, #93	; 0x5d
 8007cc4:	d107      	bne.n	8007cd6 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x42>
            str[0] = '|';
 8007cc6:	237c      	movs	r3, #124	; 0x7c
 8007cc8:	733b      	strb	r3, [r7, #12]
            str[1] = *s;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	73bb      	strb	r3, [r7, #14]
 8007cd4:	e01a      	b.n	8007d0c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\r') {
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b0d      	cmp	r3, #13
 8007cdc:	d106      	bne.n	8007cec <_ZN18TeamCityTestOutput12printEscapedEPKc+0x58>
            str[0] = '|';
 8007cde:	237c      	movs	r3, #124	; 0x7c
 8007ce0:	733b      	strb	r3, [r7, #12]
            str[1] = 'r';
 8007ce2:	2372      	movs	r3, #114	; 0x72
 8007ce4:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	73bb      	strb	r3, [r7, #14]
 8007cea:	e00f      	b.n	8007d0c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else if (*s == '\n') {
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b0a      	cmp	r3, #10
 8007cf2:	d106      	bne.n	8007d02 <_ZN18TeamCityTestOutput12printEscapedEPKc+0x6e>
            str[0] = '|';
 8007cf4:	237c      	movs	r3, #124	; 0x7c
 8007cf6:	733b      	strb	r3, [r7, #12]
            str[1] = 'n';
 8007cf8:	236e      	movs	r3, #110	; 0x6e
 8007cfa:	737b      	strb	r3, [r7, #13]
            str[2] = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73bb      	strb	r3, [r7, #14]
 8007d00:	e004      	b.n	8007d0c <_ZN18TeamCityTestOutput12printEscapedEPKc+0x78>
        } else {
            str[0] = *s;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	733b      	strb	r3, [r7, #12]
            str[1] = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	737b      	strb	r3, [r7, #13]
        }
        printBuffer(str);
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f107 010c 	add.w	r1, r7, #12
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4798      	blx	r3
        s++;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	3301      	adds	r3, #1
 8007d22:	603b      	str	r3, [r7, #0]
    while (*s) {
 8007d24:	e7bb      	b.n	8007c9e <_ZN18TeamCityTestOutput12printEscapedEPKc+0xa>
    }
}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure>:

void TeamCityTestOutput::printFailure(const TestFailure& failure)
{
 8007d30:	b5b0      	push	{r4, r5, r7, lr}
 8007d32:	b08a      	sub	sp, #40	; 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
    print("##teamcity[testFailed name='");
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	332c      	adds	r3, #44	; 0x2c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4968      	ldr	r1, [pc, #416]	; (8007ee8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1b8>)
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
    printEscaped(failure.getTestNameOnly().asCharString());
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f107 0208 	add.w	r2, r7, #8
 8007d56:	6839      	ldr	r1, [r7, #0]
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
 8007d5c:	f107 0308 	add.w	r3, r7, #8
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe ff09 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007d66:	4603      	mov	r3, r0
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7ff ff92 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007d70:	f107 0308 	add.w	r3, r7, #8
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe ff2c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print("' message='");
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	332c      	adds	r3, #44	; 0x2c
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4959      	ldr	r1, [pc, #356]	; (8007eec <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1bc>)
 8007d86:	4610      	mov	r0, r2
 8007d88:	4798      	blx	r3
    if (failure.isOutsideTestFile() || failure.isInHelperFunction()) {
 8007d8a:	6838      	ldr	r0, [r7, #0]
 8007d8c:	f000 fa15 	bl	80081ba <_ZNK11TestFailure17isOutsideTestFileEv>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d105      	bne.n	8007da2 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x72>
 8007d96:	6838      	ldr	r0, [r7, #0]
 8007d98:	f000 fa21 	bl	80081de <_ZNK11TestFailure18isInHelperFunctionEv>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x76>
 8007da2:	2301      	movs	r3, #1
 8007da4:	e000      	b.n	8007da8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x78>
 8007da6:	2300      	movs	r3, #0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d042      	beq.n	8007e32 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x102>
        print("TEST failed (");
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	332c      	adds	r3, #44	; 0x2c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	494e      	ldr	r1, [pc, #312]	; (8007ef0 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c0>)
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
        print(failure.getTestFileName().asCharString());
 8007dbc:	687d      	ldr	r5, [r7, #4]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	332c      	adds	r3, #44	; 0x2c
 8007dc4:	681c      	ldr	r4, [r3, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	331c      	adds	r3, #28
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f107 0210 	add.w	r2, r7, #16
 8007dd2:	6839      	ldr	r1, [r7, #0]
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	f107 0310 	add.w	r3, r7, #16
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f7fe fecb 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007de2:	4603      	mov	r3, r0
 8007de4:	4619      	mov	r1, r3
 8007de6:	4628      	mov	r0, r5
 8007de8:	47a0      	blx	r4
 8007dea:	f107 0310 	add.w	r3, r7, #16
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe feef 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        print(":");
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	332c      	adds	r3, #44	; 0x2c
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	493d      	ldr	r1, [pc, #244]	; (8007ef4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
        print(failure.getTestLineNumber());
 8007e04:	687d      	ldr	r5, [r7, #4]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3334      	adds	r3, #52	; 0x34
 8007e0c:	681c      	ldr	r4, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3320      	adds	r3, #32
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6838      	ldr	r0, [r7, #0]
 8007e18:	4798      	blx	r3
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	4628      	mov	r0, r5
 8007e20:	47a0      	blx	r4
        print("): ");
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	332c      	adds	r3, #44	; 0x2c
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4932      	ldr	r1, [pc, #200]	; (8007ef8 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c8>)
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4798      	blx	r3
    }

    printEscaped(failure.getFileName().asCharString());
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f107 0218 	add.w	r2, r7, #24
 8007e3e:	6839      	ldr	r1, [r7, #0]
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	f107 0318 	add.w	r3, r7, #24
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe fe95 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f7ff ff1e 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007e58:	f107 0318 	add.w	r3, r7, #24
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f7fe feb8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print(":");
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	332c      	adds	r3, #44	; 0x2c
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4921      	ldr	r1, [pc, #132]	; (8007ef4 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1c4>)
 8007e6e:	4610      	mov	r0, r2
 8007e70:	4798      	blx	r3
    print(failure.getFailureLineNumber());
 8007e72:	687d      	ldr	r5, [r7, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	3334      	adds	r3, #52	; 0x34
 8007e7a:	681c      	ldr	r4, [r3, #0]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3314      	adds	r3, #20
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6838      	ldr	r0, [r7, #0]
 8007e86:	4798      	blx	r3
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	47a0      	blx	r4

    print("' details='");
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	332c      	adds	r3, #44	; 0x2c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4918      	ldr	r1, [pc, #96]	; (8007efc <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1cc>)
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4798      	blx	r3
    printEscaped(failure.getMessage().asCharString());
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3318      	adds	r3, #24
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f107 0220 	add.w	r2, r7, #32
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	4610      	mov	r0, r2
 8007eb0:	4798      	blx	r3
 8007eb2:	f107 0320 	add.w	r3, r7, #32
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f7fe fe5e 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f7ff fee7 	bl	8007c94 <_ZN18TeamCityTestOutput12printEscapedEPKc>
 8007ec6:	f107 0320 	add.w	r3, r7, #32
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe fe81 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    print("']\n");
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	332c      	adds	r3, #44	; 0x2c
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4909      	ldr	r1, [pc, #36]	; (8007f00 <_ZN18TeamCityTestOutput12printFailureERK11TestFailure+0x1d0>)
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
}
 8007ee0:	bf00      	nop
 8007ee2:	3728      	adds	r7, #40	; 0x28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8007ee8:	08014c1c 	.word	0x08014c1c
 8007eec:	08014c3c 	.word	0x08014c3c
 8007ef0:	08014c48 	.word	0x08014c48
 8007ef4:	08014c58 	.word	0x08014c58
 8007ef8:	08014c5c 	.word	0x08014c5c
 8007efc:	08014c60 	.word	0x08014c60
 8007f00:	08014b80 	.word	0x08014b80

08007f04 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>:
TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& theMessage) :
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNumber), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
{
}

TestFailure::TestFailure(UtestShell* test, const SimpleString& theMessage) :
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(test->getFile()), lineNumber_(test->getLineNumber()), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_(theMessage)
 8007f10:	4a1a      	ldr	r2, [pc, #104]	; (8007f7c <_ZN11TestFailureC1EP10UtestShellRK12SimpleString+0x78>)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68fa      	ldr	r2, [r7, #12]
 8007f20:	3204      	adds	r2, #4
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	68b9      	ldr	r1, [r7, #8]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f004 fb58 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3314      	adds	r3, #20
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f004 fbda 	bl	800c6f4 <_ZNK10UtestShell7getFileEv>
 8007f40:	68b8      	ldr	r0, [r7, #8]
 8007f42:	f004 fbe6 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 8007f46:	4602      	mov	r2, r0
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	61da      	str	r2, [r3, #28]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3320      	adds	r3, #32
 8007f50:	68b9      	ldr	r1, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 fbce 	bl	800c6f4 <_ZNK10UtestShell7getFileEv>
 8007f58:	68b8      	ldr	r0, [r7, #8]
 8007f5a:	f004 fbda 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	332c      	adds	r3, #44	; 0x2c
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe facd 	bl	800650a <_ZN12SimpleStringC1ERKS_>
{
}
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	080169ac 	.word	0x080169ac

08007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>:

TestFailure::TestFailure(UtestShell* test, const char* fileName, size_t lineNum) :
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
    testName_(test->getFormattedName()), testNameOnly_(test->getName()), fileName_(fileName), lineNumber_(lineNum), testFileName_(test->getFile()), testLineNumber_(test->getLineNumber()), message_("no message")
 8007f8e:	4a19      	ldr	r2, [pc, #100]	; (8007ff4 <_ZN11TestFailureC1EP10UtestShellPKcj+0x74>)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3314      	adds	r3, #20
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	3204      	adds	r2, #4
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	4610      	mov	r0, r2
 8007fa4:	4798      	blx	r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	68b9      	ldr	r1, [r7, #8]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f004 fb19 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	6879      	ldr	r1, [r7, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe fa52 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	683a      	ldr	r2, [r7, #0]
 8007fc2:	61da      	str	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3320      	adds	r3, #32
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f004 fb92 	bl	800c6f4 <_ZNK10UtestShell7getFileEv>
 8007fd0:	68b8      	ldr	r0, [r7, #8]
 8007fd2:	f004 fb9e 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	629a      	str	r2, [r3, #40]	; 0x28
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	332c      	adds	r3, #44	; 0x2c
 8007fe0:	4905      	ldr	r1, [pc, #20]	; (8007ff8 <_ZN11TestFailureC1EP10UtestShellPKcj+0x78>)
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fa3d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
{
}
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	4618      	mov	r0, r3
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	080169ac 	.word	0x080169ac
 8007ff8:	08014c6c 	.word	0x08014c6c

08007ffc <_ZN11TestFailureC1ERKS_>:

TestFailure::TestFailure(const TestFailure& f) :
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
    testName_(f.testName_), testNameOnly_(f.testNameOnly_), fileName_(f.fileName_), lineNumber_(f.lineNumber_), testFileName_(f.testFileName_), testLineNumber_(f.testLineNumber_), message_(f.message_)
 8008006:	4a1e      	ldr	r2, [pc, #120]	; (8008080 <_ZN11TestFailureC1ERKS_+0x84>)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	1d1a      	adds	r2, r3, #4
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe fa77 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 020c 	add.w	r2, r3, #12
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	330c      	adds	r3, #12
 8008026:	4619      	mov	r1, r3
 8008028:	4610      	mov	r0, r2
 800802a:	f7fe fa6e 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f103 0214 	add.w	r2, r3, #20
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	3314      	adds	r3, #20
 8008038:	4619      	mov	r1, r3
 800803a:	4610      	mov	r0, r2
 800803c:	f7fe fa65 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	69da      	ldr	r2, [r3, #28]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	61da      	str	r2, [r3, #28]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f103 0220 	add.w	r2, r3, #32
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	3320      	adds	r3, #32
 8008052:	4619      	mov	r1, r3
 8008054:	4610      	mov	r0, r2
 8008056:	f7fe fa58 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	629a      	str	r2, [r3, #40]	; 0x28
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	332c      	adds	r3, #44	; 0x2c
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fa4b 	bl	800650a <_ZN12SimpleStringC1ERKS_>
{
}
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4618      	mov	r0, r3
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	080169ac 	.word	0x080169ac

08008084 <_ZN11TestFailureD1Ev>:


TestFailure::~TestFailure()
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <_ZN11TestFailureD1Ev+0x4c>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	601a      	str	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	332c      	adds	r3, #44	; 0x2c
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fd9b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3320      	adds	r3, #32
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe fd96 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3314      	adds	r3, #20
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7fe fd91 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	330c      	adds	r3, #12
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fe fd8c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe fd87 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
{
}
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4618      	mov	r0, r3
 80080c8:	3708      	adds	r7, #8
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	080169ac 	.word	0x080169ac

080080d4 <_ZN11TestFailureD0Ev>:
TestFailure::~TestFailure()
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
}
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f7ff ffd1 	bl	8008084 <_ZN11TestFailureD1Ev>
 80080e2:	2134      	movs	r1, #52	; 0x34
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f7fd fae7 	bl	80056b8 <_ZdlPvj>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZNK11TestFailure11getFileNameEv>:

SimpleString TestFailure::getFileName() const
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
    return fileName_;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	3314      	adds	r3, #20
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7fe fa00 	bl	800650a <_ZN12SimpleStringC1ERKS_>
}
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <_ZNK11TestFailure15getTestFileNameEv>:

SimpleString TestFailure::getTestFileName() const
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b082      	sub	sp, #8
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
    return testFileName_;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	3320      	adds	r3, #32
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7fe f9f1 	bl	800650a <_ZN12SimpleStringC1ERKS_>
}
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <_ZNK11TestFailure11getTestNameEv>:

SimpleString TestFailure::getTestName() const
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
    return testName_;
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f7fe f9e2 	bl	800650a <_ZN12SimpleStringC1ERKS_>
}
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <_ZNK11TestFailure15getTestNameOnlyEv>:

SimpleString TestFailure::getTestNameOnly() const
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b082      	sub	sp, #8
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
    return testNameOnly_;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	330c      	adds	r3, #12
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe f9d3 	bl	800650a <_ZN12SimpleStringC1ERKS_>
}
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <_ZNK11TestFailure20getFailureLineNumberEv>:

size_t TestFailure::getFailureLineNumber() const
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	69db      	ldr	r3, [r3, #28]
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <_ZNK11TestFailure17getTestLineNumberEv>:

size_t TestFailure::getTestLineNumber() const
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    return testLineNumber_;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008190:	4618      	mov	r0, r3
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <_ZNK11TestFailure10getMessageEv>:

SimpleString TestFailure::getMessage() const
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
    return message_;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	332c      	adds	r3, #44	; 0x2c
 80081aa:	4619      	mov	r1, r3
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7fe f9ac 	bl	800650a <_ZN12SimpleStringC1ERKS_>
}
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <_ZNK11TestFailure17isOutsideTestFileEv>:

bool TestFailure::isOutsideTestFile() const
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
    return testFileName_ != fileName_;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f103 0220 	add.w	r2, r3, #32
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3314      	adds	r3, #20
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7fe fd50 	bl	8006c74 <_ZneRK12SimpleStringS1_>
 80081d4:	4603      	mov	r3, r0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <_ZNK11TestFailure18isInHelperFunctionEv>:

bool TestFailure::isInHelperFunction() const
{
 80081de:	b480      	push	{r7}
 80081e0:	b083      	sub	sp, #12
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
    return lineNumber_ < testLineNumber_;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	69da      	ldr	r2, [r3, #28]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ee:	429a      	cmp	r2, r3
 80081f0:	bf34      	ite	cc
 80081f2:	2301      	movcc	r3, #1
 80081f4:	2300      	movcs	r3, #0
 80081f6:	b2db      	uxtb	r3, r3
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>:

SimpleString TestFailure::createButWasString(const SimpleString& expected, const SimpleString& actual)
{
 8008204:	b590      	push	{r4, r7, lr}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
    return StringFromFormat("expected <%s>\n\tbut was  <%s>", expected.asCharString(), actual.asCharString());
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fe fcb0 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008218:	4604      	mov	r4, r0
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f7fe fcac 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008220:	4603      	mov	r3, r0
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	4622      	mov	r2, r4
 8008226:	4903      	ldr	r1, [pc, #12]	; (8008234 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_+0x30>)
 8008228:	f7ff f960 	bl	80074ec <_Z16StringFromFormatPKcz>
}
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bd90      	pop	{r4, r7, pc}
 8008234:	08014c78 	.word	0x08014c78

08008238 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>:

SimpleString TestFailure::createDifferenceAtPosString(const SimpleString& actual, size_t offset, size_t reportedPosition)
{
 8008238:	b590      	push	{r4, r7, lr}
 800823a:	b097      	sub	sp, #92	; 0x5c
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
    SimpleString result;
 8008246:	494c      	ldr	r1, [pc, #304]	; (8008378 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x140>)
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f7fe f90a 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    const size_t extraCharactersWindow = 20;
 800824e:	2314      	movs	r3, #20
 8008250:	657b      	str	r3, [r7, #84]	; 0x54
    const size_t halfOfExtraCharactersWindow = extraCharactersWindow / 2;
 8008252:	230a      	movs	r3, #10
 8008254:	653b      	str	r3, [r7, #80]	; 0x50

    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8008256:	f107 0320 	add.w	r3, r7, #32
 800825a:	220a      	movs	r2, #10
 800825c:	4947      	ldr	r1, [pc, #284]	; (800837c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 800825e:	4618      	mov	r0, r3
 8008260:	f7fe f91a 	bl	8006498 <_ZN12SimpleStringC1EPKcj>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 8008264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008268:	f107 0120 	add.w	r1, r7, #32
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe fd11 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008274:	f107 0318 	add.w	r3, r7, #24
 8008278:	f107 0220 	add.w	r2, r7, #32
 800827c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fd08 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fca1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8008290:	f107 0310 	add.w	r3, r7, #16
 8008294:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008296:	493a      	ldr	r1, [pc, #232]	; (8008380 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x148>)
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff f927 	bl	80074ec <_Z16StringFromFormatPKcz>

    result += "\n";
 800829e:	4939      	ldr	r1, [pc, #228]	; (8008384 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x14c>)
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f7fe fd25 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    result += StringFromFormat("\t%s%s>\n", differentString.asCharString(), actualString.subString(offset, extraCharactersWindow).asCharString());
 80082a6:	f107 0310 	add.w	r3, r7, #16
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fe fc64 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 80082b0:	4604      	mov	r4, r0
 80082b2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80082b6:	f107 0118 	add.w	r1, r7, #24
 80082ba:	2314      	movs	r3, #20
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f7fe fd91 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 80082c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fc56 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80082d2:	4622      	mov	r2, r4
 80082d4:	492c      	ldr	r1, [pc, #176]	; (8008388 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x150>)
 80082d6:	f7ff f909 	bl	80074ec <_Z16StringFromFormatPKcz>
 80082da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082de:	4619      	mov	r1, r3
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f7fe fcf3 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 80082e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fc71 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80082f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fe fc6c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>


    result += StringFromFormat("\t%s^", SimpleString(" ", (differentString.size() + halfOfExtraCharactersWindow)).asCharString());
 80082fa:	f107 0310 	add.w	r3, r7, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f7fe fc46 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 8008304:	4603      	mov	r3, r0
 8008306:	f103 020a 	add.w	r2, r3, #10
 800830a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800830e:	491b      	ldr	r1, [pc, #108]	; (800837c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x144>)
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe f8c1 	bl	8006498 <_ZN12SimpleStringC1EPKcj>
 8008316:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fc2c 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008320:	4602      	mov	r2, r0
 8008322:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008326:	4919      	ldr	r1, [pc, #100]	; (800838c <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj+0x154>)
 8008328:	4618      	mov	r0, r3
 800832a:	f7ff f8df 	bl	80074ec <_Z16StringFromFormatPKcz>
 800832e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7fe fcc9 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800833a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe fc47 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008344:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008348:	4618      	mov	r0, r3
 800834a:	f7fe fc42 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return result;
 800834e:	bf00      	nop
    SimpleString differentString = StringFromFormat("difference starts at position %lu at: <", (unsigned long) reportedPosition);
 8008350:	f107 0310 	add.w	r3, r7, #16
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fc3c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString actualString = paddingForPreventingOutOfBounds + actual + paddingForPreventingOutOfBounds;
 800835a:	f107 0318 	add.w	r3, r7, #24
 800835e:	4618      	mov	r0, r3
 8008360:	f7fe fc37 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString paddingForPreventingOutOfBounds (" ", halfOfExtraCharactersWindow);
 8008364:	f107 0320 	add.w	r3, r7, #32
 8008368:	4618      	mov	r0, r3
 800836a:	f7fe fc32 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return result;
 800836e:	bf00      	nop
}
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	375c      	adds	r7, #92	; 0x5c
 8008374:	46bd      	mov	sp, r7
 8008376:	bd90      	pop	{r4, r7, pc}
 8008378:	08014c98 	.word	0x08014c98
 800837c:	08014c9c 	.word	0x08014c9c
 8008380:	08014ca0 	.word	0x08014ca0
 8008384:	08014cc8 	.word	0x08014cc8
 8008388:	08014ccc 	.word	0x08014ccc
 800838c:	08014cd4 	.word	0x08014cd4

08008390 <_ZN11TestFailure14createUserTextERK12SimpleString>:

SimpleString TestFailure::createUserText(const SimpleString& text)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b087      	sub	sp, #28
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
    SimpleString userMessage = "";
 800839c:	491a      	ldr	r1, [pc, #104]	; (8008408 <_ZN11TestFailure14createUserTextERK12SimpleString+0x78>)
 800839e:	68f8      	ldr	r0, [r7, #12]
 80083a0:	f7fe f85f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    if (!text.isEmpty())
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fe fc03 	bl	8006bb0 <_ZNK12SimpleString7isEmptyEv>
 80083aa:	4603      	mov	r3, r0
 80083ac:	f083 0301 	eor.w	r3, r3, #1
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d022      	beq.n	80083fc <_ZN11TestFailure14createUserTextERK12SimpleString+0x6c>
    {
        //This is a kludge to turn off "Message: " for this case.
        //I don't think "Message: " adds anything, as you get to see the
        //message. I propose we remove "Message: " lead in
        if (!text.startsWith("LONGS_EQUAL"))
 80083b6:	f107 0310 	add.w	r3, r7, #16
 80083ba:	4914      	ldr	r1, [pc, #80]	; (800840c <_ZN11TestFailure14createUserTextERK12SimpleString+0x7c>)
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fe f850 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80083c2:	f107 0310 	add.w	r3, r7, #16
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7fe f90e 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 80083ce:	4603      	mov	r3, r0
 80083d0:	f083 0301 	eor.w	r3, r3, #1
 80083d4:	b2dc      	uxtb	r4, r3
 80083d6:	f107 0310 	add.w	r3, r7, #16
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fe fbf9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 80083e0:	2c00      	cmp	r4, #0
 80083e2:	d003      	beq.n	80083ec <_ZN11TestFailure14createUserTextERK12SimpleString+0x5c>
            userMessage += "Message: ";
 80083e4:	490a      	ldr	r1, [pc, #40]	; (8008410 <_ZN11TestFailure14createUserTextERK12SimpleString+0x80>)
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7fe fc82 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
        userMessage += text;
 80083ec:	6879      	ldr	r1, [r7, #4]
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f7fe fc6c 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
        userMessage += "\n\t";
 80083f4:	4907      	ldr	r1, [pc, #28]	; (8008414 <_ZN11TestFailure14createUserTextERK12SimpleString+0x84>)
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7fe fc7a 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    }
    return userMessage;
 80083fc:	bf00      	nop
}
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	bd90      	pop	{r4, r7, pc}
 8008406:	bf00      	nop
 8008408:	08014c98 	.word	0x08014c98
 800840c:	08014cdc 	.word	0x08014cdc
 8008410:	08014ce8 	.word	0x08014ce8
 8008414:	08014cf4 	.word	0x08014cf4

08008418 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:
    message_ = createUserText(text);

    message_ += createButWasString(StringFromOrNull(expected), StringFromOrNull(actual));
}

EqualsFailure::EqualsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008418:	b590      	push	{r4, r7, lr}
 800841a:	b089      	sub	sp, #36	; 0x24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
 8008424:	603b      	str	r3, [r7, #0]
    : TestFailure(test, fileName, lineNumber)
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	68b9      	ldr	r1, [r7, #8]
 800842e:	f7ff fda7 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008432:	4a19      	ldr	r2, [pc, #100]	; (8008498 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x80>)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800843e:	68f9      	ldr	r1, [r7, #12]
 8008440:	f107 0310 	add.w	r3, r7, #16
 8008444:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff ffa2 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	4619      	mov	r1, r3
 8008452:	4620      	mov	r0, r4
 8008454:	f7fe f871 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008458:	f107 0310 	add.w	r3, r7, #16
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe fbb8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expected, actual);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008468:	68f9      	ldr	r1, [r7, #12]
 800846a:	f107 0018 	add.w	r0, r7, #24
 800846e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008472:	f7ff fec7 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008476:	f107 0318 	add.w	r3, r7, #24
 800847a:	4619      	mov	r1, r3
 800847c:	4620      	mov	r0, r4
 800847e:	f7fe fc25 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008482:	f107 0318 	add.w	r3, r7, #24
 8008486:	4618      	mov	r0, r3
 8008488:	f7fe fba3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4618      	mov	r0, r3
 8008490:	3724      	adds	r7, #36	; 0x24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd90      	pop	{r4, r7, pc}
 8008496:	bf00      	nop
 8008498:	08016980 	.word	0x08016980

0800849c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>:

DoublesEqualFailure::DoublesEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, double expected, double actual, double threshold, const SimpleString& text)
 800849c:	b5b0      	push	{r4, r5, r7, lr}
 800849e:	b094      	sub	sp, #80	; 0x50
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6278      	str	r0, [r7, #36]	; 0x24
 80084a4:	6239      	str	r1, [r7, #32]
 80084a6:	61fa      	str	r2, [r7, #28]
 80084a8:	61bb      	str	r3, [r7, #24]
 80084aa:	ed87 0b04 	vstr	d0, [r7, #16]
 80084ae:	ed87 1b02 	vstr	d1, [r7, #8]
 80084b2:	ed87 2b00 	vstr	d2, [r7]
: TestFailure(test, fileName, lineNumber)
 80084b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	69fa      	ldr	r2, [r7, #28]
 80084bc:	6a39      	ldr	r1, [r7, #32]
 80084be:	f7ff fd5f 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80084c2:	4a4a      	ldr	r2, [pc, #296]	; (80085ec <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x150>)
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80084ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff ff5a 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80084dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084e0:	4619      	mov	r1, r3
 80084e2:	4620      	mov	r0, r4
 80084e4:	f7fe f829 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80084e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fe fb70 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFrom(expected, 7), StringFrom(actual, 7));
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80084f8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80084fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084fe:	2107      	movs	r1, #7
 8008500:	ed97 0b04 	vldr	d0, [r7, #16]
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe ffaf 	bl	8007468 <_Z10StringFromdi>
 800850a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800850e:	2107      	movs	r1, #7
 8008510:	ed97 0b02 	vldr	d0, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe ffa7 	bl	8007468 <_Z10StringFromdi>
 800851a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800851e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008522:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008526:	4629      	mov	r1, r5
 8008528:	f7ff fe6c 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800852c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008530:	4619      	mov	r1, r3
 8008532:	4620      	mov	r0, r4
 8008534:	f7fe fbca 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fb48 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008542:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fb43 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800854c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008550:	4618      	mov	r0, r3
 8008552:	f7fe fb3e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    message_ += " threshold used was <";
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	332c      	adds	r3, #44	; 0x2c
 800855a:	4925      	ldr	r1, [pc, #148]	; (80085f0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x154>)
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fbc7 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    message_ += StringFrom(threshold, 7);
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800856c:	2107      	movs	r1, #7
 800856e:	ed97 0b00 	vldr	d0, [r7]
 8008572:	4618      	mov	r0, r3
 8008574:	f7fe ff78 	bl	8007468 <_Z10StringFromdi>
 8008578:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800857c:	4619      	mov	r1, r3
 800857e:	4620      	mov	r0, r4
 8008580:	f7fe fba4 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008588:	4618      	mov	r0, r3
 800858a:	f7fe fb22 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    message_ += ">";
 800858e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008590:	332c      	adds	r3, #44	; 0x2c
 8008592:	4918      	ldr	r1, [pc, #96]	; (80085f4 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x158>)
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fbab 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>

    if (PlatformSpecificIsNan(expected) || PlatformSpecificIsNan(actual) || PlatformSpecificIsNan(threshold))
 800859a:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	ed97 0b04 	vldr	d0, [r7, #16]
 80085a2:	4798      	blx	r3
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10f      	bne.n	80085ca <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80085aa:	4b13      	ldr	r3, [pc, #76]	; (80085f8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	ed97 0b02 	vldr	d0, [r7, #8]
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d107      	bne.n	80085ca <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x12e>
 80085ba:	4b0f      	ldr	r3, [pc, #60]	; (80085f8 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x15c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	ed97 0b00 	vldr	d0, [r7]
 80085c2:	4798      	blx	r3
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x132>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e000      	b.n	80085d0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x134>
 80085ce:	2300      	movs	r3, #0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d005      	beq.n	80085e0 <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x144>
        message_ += "\n\tCannot make comparisons with Nan";
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	332c      	adds	r3, #44	; 0x2c
 80085d8:	4908      	ldr	r1, [pc, #32]	; (80085fc <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString+0x160>)
 80085da:	4618      	mov	r0, r3
 80085dc:	f7fe fb88 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
}
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	4618      	mov	r0, r3
 80085e4:	3750      	adds	r7, #80	; 0x50
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bdb0      	pop	{r4, r5, r7, pc}
 80085ea:	bf00      	nop
 80085ec:	08016954 	.word	0x08016954
 80085f0:	08014cf8 	.word	0x08014cf8
 80085f4:	08014d10 	.word	0x08014d10
 80085f8:	200000e0 	.word	0x200000e0
 80085fc:	08014d14 	.word	0x08014d14

08008600 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckEqualFailure::CheckEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 8008600:	b590      	push	{r4, r7, lr}
 8008602:	b093      	sub	sp, #76	; 0x4c
 8008604:	af02      	add	r7, sp, #8
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
 800860c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800860e:	68f8      	ldr	r0, [r7, #12]
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	68b9      	ldr	r1, [r7, #8]
 8008616:	f7ff fcb3 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800861a:	4a4f      	ldr	r2, [pc, #316]	; (8008758 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x158>)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008626:	68f9      	ldr	r1, [r7, #12]
 8008628:	f107 0320 	add.w	r3, r7, #32
 800862c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800862e:	4618      	mov	r0, r3
 8008630:	f7ff feae 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008634:	f107 0320 	add.w	r3, r7, #32
 8008638:	4619      	mov	r1, r3
 800863a:	4620      	mov	r0, r4
 800863c:	f7fd ff7d 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008640:	f107 0320 	add.w	r3, r7, #32
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fac4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 800864a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800864c:	f7fe fa94 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008650:	4602      	mov	r2, r0
 8008652:	f107 0318 	add.w	r3, r7, #24
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fd37 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 800865e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008660:	f7fe fa8a 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008664:	4602      	mov	r2, r0
 8008666:	f107 0310 	add.w	r3, r7, #16
 800866a:	4611      	mov	r1, r2
 800866c:	4618      	mov	r0, r3
 800866e:	f7fe fd2d 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008678:	68f9      	ldr	r1, [r7, #12]
 800867a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800867e:	f107 0310 	add.w	r3, r7, #16
 8008682:	f107 0218 	add.w	r2, r7, #24
 8008686:	f7ff fdbd 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 800868a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800868e:	4619      	mov	r1, r3
 8008690:	4620      	mov	r0, r4
 8008692:	f7fe fb1b 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fa99 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    size_t failStart;
    for (failStart = 0; actual.at(failStart) == expected.at(failStart); failStart++)
 80086a0:	2300      	movs	r3, #0
 80086a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80086a8:	f7fe fbf7 	bl	8006e9a <_ZNK12SimpleString2atEj>
 80086ac:	4603      	mov	r3, r0
 80086ae:	461c      	mov	r4, r3
 80086b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80086b4:	f7fe fbf1 	bl	8006e9a <_ZNK12SimpleString2atEj>
 80086b8:	4603      	mov	r3, r0
 80086ba:	429c      	cmp	r4, r3
 80086bc:	bf0c      	ite	eq
 80086be:	2301      	moveq	r3, #1
 80086c0:	2300      	movne	r3, #0
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd0>
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	3301      	adds	r3, #1
 80086cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086ce:	e7e9      	b.n	80086a4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xa4>
        ;
    size_t failStartPrintable;
    for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 80086d0:	2300      	movs	r3, #0
 80086d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80086d4:	f107 0310 	add.w	r3, r7, #16
 80086d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fbdd 	bl	8006e9a <_ZNK12SimpleString2atEj>
 80086e0:	4603      	mov	r3, r0
 80086e2:	461c      	mov	r4, r3
 80086e4:	f107 0318 	add.w	r3, r7, #24
 80086e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7fe fbd5 	bl	8006e9a <_ZNK12SimpleString2atEj>
 80086f0:	4603      	mov	r3, r0
 80086f2:	429c      	cmp	r4, r3
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d003      	beq.n	8008708 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x108>
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	3301      	adds	r3, #1
 8008704:	63bb      	str	r3, [r7, #56]	; 0x38
 8008706:	e7e5      	b.n	80086d4 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0xd4>
        ;
    message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800870e:	68f9      	ldr	r1, [r7, #12]
 8008710:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008714:	f107 0210 	add.w	r2, r7, #16
 8008718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	f7ff fd8b 	bl	8008238 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8008722:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008726:	4619      	mov	r1, r3
 8008728:	4620      	mov	r0, r4
 800872a:	f7fe facf 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800872e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fa4d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual.asCharString());
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	4618      	mov	r0, r3
 800873e:	f7fe fa48 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected.asCharString());
 8008742:	f107 0318 	add.w	r3, r7, #24
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fa43 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4618      	mov	r0, r3
 8008750:	3744      	adds	r7, #68	; 0x44
 8008752:	46bd      	mov	sp, r7
 8008754:	bd90      	pop	{r4, r7, pc}
 8008756:	bf00      	nop
 8008758:	08016928 	.word	0x08016928

0800875c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ComparisonFailure::ComparisonFailure(UtestShell *test, const char *fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString &comparisonString, const SimpleString &text)
 800875c:	b590      	push	{r4, r7, lr}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	68b9      	ldr	r1, [r7, #8]
 8008772:	f7ff fc05 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008776:	4a1a      	ldr	r2, [pc, #104]	; (80087e0 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	f107 0310 	add.w	r3, r7, #16
 8008788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878a:	4618      	mov	r0, r3
 800878c:	f7ff fe00 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008790:	f107 0310 	add.w	r3, r7, #16
 8008794:	4619      	mov	r1, r3
 8008796:	4620      	mov	r0, r4
 8008798:	f7fd fecf 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800879c:	f107 0310 	add.w	r3, r7, #16
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fa16 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    message_ += checkString;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	332c      	adds	r3, #44	; 0x2c
 80087aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ac:	4618      	mov	r0, r3
 80087ae:	f7fe fa8d 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	332c      	adds	r3, #44	; 0x2c
 80087b6:	490b      	ldr	r1, [pc, #44]	; (80087e4 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe fa99 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    message_ += comparisonString;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	332c      	adds	r3, #44	; 0x2c
 80087c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fa81 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	332c      	adds	r3, #44	; 0x2c
 80087ce:	4906      	ldr	r1, [pc, #24]	; (80087e8 <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fa8d 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
}
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4618      	mov	r0, r3
 80087da:	371c      	adds	r7, #28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd90      	pop	{r4, r7, pc}
 80087e0:	080168fc 	.word	0x080168fc
 80087e4:	08014d38 	.word	0x08014d38
 80087e8:	08014d3c 	.word	0x08014d3c

080087ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

ContainsFailure::ContainsFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& expected, const SimpleString& actual, const SimpleString& text)
 80087ec:	b5b0      	push	{r4, r5, r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	f7ff fbbd 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008806:	4a1c      	ldr	r2, [pc, #112]	; (8008878 <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008812:	68f9      	ldr	r1, [r7, #12]
 8008814:	f107 0310 	add.w	r3, r7, #16
 8008818:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff fdb8 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008820:	f107 0310 	add.w	r3, r7, #16
 8008824:	4619      	mov	r1, r3
 8008826:	4620      	mov	r0, r4
 8008828:	f7fd fe87 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800882c:	f107 0310 	add.w	r3, r7, #16
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe f9ce 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("actual <%s>\n\tdid not contain  <%s>", actual.asCharString(), expected.asCharString());
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800883c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800883e:	f7fe f99b 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8008842:	4605      	mov	r5, r0
 8008844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008846:	f7fe f997 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800884a:	4603      	mov	r3, r0
 800884c:	f107 0018 	add.w	r0, r7, #24
 8008850:	462a      	mov	r2, r5
 8008852:	490a      	ldr	r1, [pc, #40]	; (800887c <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x90>)
 8008854:	f7fe fe4a 	bl	80074ec <_Z16StringFromFormatPKcz>
 8008858:	f107 0318 	add.w	r3, r7, #24
 800885c:	4619      	mov	r1, r3
 800885e:	4620      	mov	r0, r4
 8008860:	f7fe fa34 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008864:	f107 0318 	add.w	r3, r7, #24
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe f9b2 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bdb0      	pop	{r4, r5, r7, pc}
 8008878:	080168d0 	.word	0x080168d0
 800887c:	08014d48 	.word	0x08014d48

08008880 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>:

CheckFailure::CheckFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& checkString, const SimpleString& conditionString, const SimpleString& text)
 8008880:	b590      	push	{r4, r7, lr}
 8008882:	b087      	sub	sp, #28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	68b9      	ldr	r1, [r7, #8]
 8008896:	f7ff fb73 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800889a:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x84>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80088a6:	68f9      	ldr	r1, [r7, #12]
 80088a8:	f107 0310 	add.w	r3, r7, #16
 80088ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7ff fd6e 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80088b4:	f107 0310 	add.w	r3, r7, #16
 80088b8:	4619      	mov	r1, r3
 80088ba:	4620      	mov	r0, r4
 80088bc:	f7fd fe3d 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80088c0:	f107 0310 	add.w	r3, r7, #16
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe f984 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += checkString;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	332c      	adds	r3, #44	; 0x2c
 80088ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe f9fb 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
    message_ += "(";
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	332c      	adds	r3, #44	; 0x2c
 80088da:	490b      	ldr	r1, [pc, #44]	; (8008908 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x88>)
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fa07 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    message_ += conditionString;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	332c      	adds	r3, #44	; 0x2c
 80088e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe f9ef 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
    message_ += ") failed";
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	332c      	adds	r3, #44	; 0x2c
 80088f2:	4906      	ldr	r1, [pc, #24]	; (800890c <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_+0x8c>)
 80088f4:	4618      	mov	r0, r3
 80088f6:	f7fe f9fb 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
}
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4618      	mov	r0, r3
 80088fe:	371c      	adds	r7, #28
 8008900:	46bd      	mov	sp, r7
 8008902:	bd90      	pop	{r4, r7, pc}
 8008904:	080168a4 	.word	0x080168a4
 8008908:	08014d38 	.word	0x08014d38
 800890c:	08014d3c 	.word	0x08014d3c

08008910 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>:

FailFailure::FailFailure(UtestShell* test, const char* fileName, size_t lineNumber, const SimpleString& message) : TestFailure(test, fileName, lineNumber)
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	68b9      	ldr	r1, [r7, #8]
 8008926:	f7ff fb2b 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 800892a:	4a07      	ldr	r2, [pc, #28]	; (8008948 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString+0x38>)
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	601a      	str	r2, [r3, #0]
{
    message_ = message;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	332c      	adds	r3, #44	; 0x2c
 8008934:	69b9      	ldr	r1, [r7, #24]
 8008936:	4618      	mov	r0, r3
 8008938:	f7fd fdff 	bl	800653a <_ZN12SimpleStringaSERKS_>
}
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4618      	mov	r0, r3
 8008940:	3710      	adds	r7, #16
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	080166b4 	.word	0x080166b4

0800894c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>:

LongsEqualFailure::LongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, long expected, long actual, const SimpleString& text)
 800894c:	b590      	push	{r4, r7, lr}
 800894e:	b09d      	sub	sp, #116	; 0x74
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
 8008958:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	f7ff fb0d 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008966:	4a5d      	ldr	r2, [pc, #372]	; (8008adc <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x190>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008972:	68f9      	ldr	r1, [r7, #12]
 8008974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008978:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800897c:	4618      	mov	r0, r3
 800897e:	f7ff fd07 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008986:	4619      	mov	r1, r3
 8008988:	4620      	mov	r0, r4
 800898a:	f7fd fdd6 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800898e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008992:	4618      	mov	r0, r3
 8008994:	f7fe f91d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8008998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800899c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe fbd1 	bl	8007148 <_Z10StringFroml>
    SimpleString eDecimal = StringFrom(expected);
 80089a6:	f107 0320 	add.w	r3, r7, #32
 80089aa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fbca 	bl	8007148 <_Z10StringFroml>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 80089b4:	f107 0120 	add.w	r1, r7, #32
 80089b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80089bc:	2220      	movs	r2, #32
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe f9c4 	bl	8006d4c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 80089c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80089c8:	4945      	ldr	r1, [pc, #276]	; (8008ae0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fd fd49 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 80089d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089d4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80089d8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fe f95a 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 80089e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80089e6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fe fc66 	bl	80072bc <_Z30BracketsFormattedHexStringFroml>
 80089f0:	f107 0318 	add.w	r3, r7, #24
 80089f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80089f8:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe f94a 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008a02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008a06:	4618      	mov	r0, r3
 8008a08:	f7fe f8e3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008a0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe f8de 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008a16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe f8d9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008a20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a24:	492e      	ldr	r1, [pc, #184]	; (8008ae0 <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString+0x194>)
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd fd1b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8008a2c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008a34:	f107 0120 	add.w	r1, r7, #32
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7fe f92c 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008a3e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008a42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe fc38 	bl	80072bc <_Z30BracketsFormattedHexStringFroml>
 8008a4c:	f107 0310 	add.w	r3, r7, #16
 8008a50:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008a54:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f7fe f91c 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008a5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7fe f8b5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008a68:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe f8b0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe f8ab 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008a82:	68f9      	ldr	r1, [r7, #12]
 8008a84:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008a88:	f107 0318 	add.w	r3, r7, #24
 8008a8c:	f107 0210 	add.w	r2, r7, #16
 8008a90:	f7ff fbb8 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008a94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f7fe f916 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008aa0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe f894 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008aaa:	f107 0310 	add.w	r3, r7, #16
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe f88f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008ab4:	f107 0318 	add.w	r3, r7, #24
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe f88a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8008abe:	f107 0320 	add.w	r3, r7, #32
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7fe f885 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8008ac8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7fe f880 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3774      	adds	r7, #116	; 0x74
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}
 8008adc:	08016878 	.word	0x08016878
 8008ae0:	08014c9c 	.word	0x08014c9c

08008ae4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>:

UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, const SimpleString& text)
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b09d      	sub	sp, #116	; 0x74
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
 8008af0:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68b9      	ldr	r1, [r7, #8]
 8008afa:	f7ff fa41 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008afe:	4a5d      	ldr	r2, [pc, #372]	; (8008c74 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x190>)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b10:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fc3b 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4620      	mov	r0, r4
 8008b22:	f7fd fd0a 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe f851 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom(actual);
 8008b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b34:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fd11 	bl	8007560 <_Z10StringFromm>
    SimpleString eDecimal = StringFrom(expected);
 8008b3e:	f107 0320 	add.w	r3, r7, #32
 8008b42:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fd0a 	bl	8007560 <_Z10StringFromm>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8008b4c:	f107 0120 	add.w	r1, r7, #32
 8008b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008b54:	2220      	movs	r2, #32
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fe f8f8 	bl	8006d4c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008b5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008b60:	4945      	ldr	r1, [pc, #276]	; (8008c78 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fd fc7d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8008b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008b70:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fe f88e 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008b7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008b7e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fbb6 	bl	80072f4 <_Z30BracketsFormattedHexStringFromm>
 8008b88:	f107 0318 	add.w	r3, r7, #24
 8008b8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008b90:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7fe f87e 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008b9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe f817 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008ba4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe f812 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008bae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe f80d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008bbc:	492e      	ldr	r1, [pc, #184]	; (8008c78 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString+0x194>)
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fd fc4f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8008bc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008bc8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008bcc:	f107 0120 	add.w	r1, r7, #32
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f7fe f860 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008bd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008bda:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fb88 	bl	80072f4 <_Z30BracketsFormattedHexStringFromm>
 8008be4:	f107 0310 	add.w	r3, r7, #16
 8008be8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008bec:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe f850 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008bf6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fd ffe9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008c00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7fd ffe4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008c0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fd ffdf 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(expectedReported, actualReported);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008c1a:	68f9      	ldr	r1, [r7, #12]
 8008c1c:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008c20:	f107 0318 	add.w	r3, r7, #24
 8008c24:	f107 0210 	add.w	r2, r7, #16
 8008c28:	f7ff faec 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008c2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c30:	4619      	mov	r1, r3
 8008c32:	4620      	mov	r0, r4
 8008c34:	f7fe f84a 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008c38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fd ffc8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008c42:	f107 0310 	add.w	r3, r7, #16
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fd ffc3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008c4c:	f107 0318 	add.w	r3, r7, #24
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7fd ffbe 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom(expected);
 8008c56:	f107 0320 	add.w	r3, r7, #32
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd ffb9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom(actual);
 8008c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fd ffb4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3774      	adds	r7, #116	; 0x74
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd90      	pop	{r4, r7, pc}
 8008c74:	0801684c 	.word	0x0801684c
 8008c78:	08014c9c 	.word	0x08014c9c

08008c7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>:
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
    message_ += createButWasString(expectedReported, actualReported);
}

SignedBytesEqualFailure::SignedBytesEqualFailure (UtestShell* test, const char* fileName, size_t lineNumber, signed char expected, signed char actual, const SimpleString& text)
 8008c7c:	b590      	push	{r4, r7, lr}
 8008c7e:	b09d      	sub	sp, #116	; 0x74
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
 8008c88:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	68b9      	ldr	r1, [r7, #8]
 8008c92:	f7ff f975 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008c96:	4a5f      	ldr	r2, [pc, #380]	; (8008e14 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x198>)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ca8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008cac:	4618      	mov	r0, r3
 8008cae:	f7ff fb6f 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008cb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f7fd fc3e 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008cbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fd ff85 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString aDecimal = StringFrom((int)actual);
 8008cc8:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8008ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fa26 	bl	8007124 <_Z10StringFromi>
    SimpleString eDecimal = StringFrom((int)expected);
 8008cd8:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8008cdc:	f107 0320 	add.w	r3, r7, #32
 8008ce0:	4611      	mov	r1, r2
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fa1e 	bl	8007124 <_Z10StringFromi>

    SimpleString::padStringsToSameLength(aDecimal, eDecimal, ' ');
 8008ce8:	f107 0120 	add.w	r1, r7, #32
 8008cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fe f82a 	bl	8006d4c <_ZN12SimpleString22padStringsToSameLengthERS_S0_c>

    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008cf8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008cfc:	4946      	ldr	r1, [pc, #280]	; (8008e18 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fd fbaf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8008d04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d08:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8008d0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fd ffc0 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008d16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d1a:	f997 2084 	ldrsb.w	r2, [r7, #132]	; 0x84
 8008d1e:	4611      	mov	r1, r2
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fb03 	bl	800732c <_Z30BracketsFormattedHexStringFroma>
 8008d26:	f107 0318 	add.w	r3, r7, #24
 8008d2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008d2e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fd ffaf 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008d38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fd ff48 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008d42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7fd ff43 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008d4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7fd ff3e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008d56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d5a:	492f      	ldr	r1, [pc, #188]	; (8008e18 <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString+0x19c>)
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fd fb80 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8008d62:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008d66:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d6a:	f107 0120 	add.w	r1, r7, #32
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fd ff91 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008d74:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d78:	f997 2080 	ldrsb.w	r2, [r7, #128]	; 0x80
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7fe fad4 	bl	800732c <_Z30BracketsFormattedHexStringFroma>
 8008d84:	f107 0310 	add.w	r3, r7, #16
 8008d88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8008d8c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8008d90:	4618      	mov	r0, r3
 8008d92:	f7fd ff80 	bl	8006c96 <_ZNK12SimpleStringplERKS_>
 8008d96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fd ff19 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008da0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd ff14 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8008daa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fd ff0f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    message_ += createButWasString(expectedReported, actualReported);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008dba:	68f9      	ldr	r1, [r7, #12]
 8008dbc:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8008dc0:	f107 0318 	add.w	r3, r7, #24
 8008dc4:	f107 0210 	add.w	r2, r7, #16
 8008dc8:	f7ff fa1c 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008dcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	4620      	mov	r0, r4
 8008dd4:	f7fd ff7a 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008dd8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fd fef8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString expectedReported = eDecimal + " " + BracketsFormattedHexStringFrom(expected);
 8008de2:	f107 0310 	add.w	r3, r7, #16
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fd fef3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString actualReported = aDecimal + " " + BracketsFormattedHexStringFrom(actual);
 8008dec:	f107 0318 	add.w	r3, r7, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fd feee 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString eDecimal = StringFrom((int)expected);
 8008df6:	f107 0320 	add.w	r3, r7, #32
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fd fee9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString aDecimal = StringFrom((int)actual);
 8008e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fd fee4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3774      	adds	r7, #116	; 0x74
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd90      	pop	{r4, r7, pc}
 8008e14:	08016820 	.word	0x08016820
 8008e18:	08014c9c 	.word	0x08014c9c

08008e1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualFailure::StringEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b093      	sub	sp, #76	; 0x4c
 8008e20:	af02      	add	r7, sp, #8
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	f7ff f8a5 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008e36:	4a4a      	ldr	r2, [pc, #296]	; (8008f60 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x144>)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008e42:	68f9      	ldr	r1, [r7, #12]
 8008e44:	f107 0320 	add.w	r3, r7, #32
 8008e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff faa0 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008e50:	f107 0320 	add.w	r3, r7, #32
 8008e54:	4619      	mov	r1, r3
 8008e56:	4620      	mov	r0, r4
 8008e58:	f7fd fb6f 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008e5c:	f107 0320 	add.w	r3, r7, #32
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fd feb6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8008e66:	f107 0318 	add.w	r3, r7, #24
 8008e6a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe f92d 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8008e72:	f107 0310 	add.w	r3, r7, #16
 8008e76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe f927 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008e84:	68f9      	ldr	r1, [r7, #12]
 8008e86:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008e8a:	f107 0310 	add.w	r3, r7, #16
 8008e8e:	f107 0218 	add.w	r2, r7, #24
 8008e92:	f7ff f9b7 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f7fd ff15 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd fe93 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8008eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d046      	beq.n	8008f40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
 8008eb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d043      	beq.n	8008f40 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x124>
    {
        size_t failStart;
        for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	4413      	add	r3, r2
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec8:	440b      	add	r3, r1
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d103      	bne.n	8008ed8 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xbc>
 8008ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed6:	e7f1      	b.n	8008ebc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0; printableActual.at(failStartPrintable) == printableExpected.at(failStartPrintable); failStartPrintable++)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fd ffd9 	bl	8006e9a <_ZNK12SimpleString2atEj>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461c      	mov	r4, r3
 8008eec:	f107 0318 	add.w	r3, r7, #24
 8008ef0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7fd ffd1 	bl	8006e9a <_ZNK12SimpleString2atEj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	429c      	cmp	r4, r3
 8008efc:	bf0c      	ite	eq
 8008efe:	2301      	moveq	r3, #1
 8008f00:	2300      	movne	r3, #0
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xf4>
 8008f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f0e:	e7e5      	b.n	8008edc <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xc0>
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8008f1c:	f107 0210 	add.w	r2, r7, #16
 8008f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	f7ff f987 	bl	8008238 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 8008f2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4620      	mov	r0, r4
 8008f32:	f7fd fecb 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008f36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7fd fe49 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8008f40:	f107 0310 	add.w	r3, r7, #16
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7fd fe44 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8008f4a:	f107 0318 	add.w	r3, r7, #24
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fd fe3f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    }
}
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4618      	mov	r0, r3
 8008f58:	3744      	adds	r7, #68	; 0x44
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd90      	pop	{r4, r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	080167f4 	.word	0x080167f4

08008f64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>:

StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell* test, const char* fileName, size_t lineNumber, const char* expected, const char* actual, const SimpleString& text)
 8008f64:	b590      	push	{r4, r7, lr}
 8008f66:	b093      	sub	sp, #76	; 0x4c
 8008f68:	af02      	add	r7, sp, #8
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
 8008f70:	603b      	str	r3, [r7, #0]
: TestFailure(test, fileName, lineNumber)
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	68b9      	ldr	r1, [r7, #8]
 8008f7a:	f7ff f801 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8008f7e:	4a55      	ldr	r2, [pc, #340]	; (80090d4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x170>)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008f8a:	68f9      	ldr	r1, [r7, #12]
 8008f8c:	f107 0320 	add.w	r3, r7, #32
 8008f90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7ff f9fc 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 8008f98:	f107 0320 	add.w	r3, r7, #32
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4620      	mov	r0, r4
 8008fa0:	f7fd facb 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8008fa4:	f107 0320 	add.w	r3, r7, #32
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7fd fe12 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 8008fae:	f107 0318 	add.w	r3, r7, #24
 8008fb2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe f889 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 8008fba:	f107 0310 	add.w	r3, r7, #16
 8008fbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe f883 	bl	80070cc <_Z25PrintableStringFromOrNullPKc>

    message_ += createButWasString(printableExpected, printableActual);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8008fd2:	f107 0310 	add.w	r3, r7, #16
 8008fd6:	f107 0218 	add.w	r2, r7, #24
 8008fda:	f7ff f913 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8008fde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4620      	mov	r0, r4
 8008fe6:	f7fd fe71 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8008fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fd fdef 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if((expected) && (actual))
 8008ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d05c      	beq.n	80090b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
 8008ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d059      	beq.n	80090b4 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x150>
    {
        size_t failStart;
        for (failStart = 0; SimpleString::ToLower(actual[failStart]) == SimpleString::ToLower(expected[failStart]); failStart++)
 8009000:	2300      	movs	r3, #0
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009004:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	4413      	add	r3, r2
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	4618      	mov	r0, r3
 800900e:	f7fd f932 	bl	8006276 <_ZN12SimpleString7ToLowerEc>
 8009012:	4603      	mov	r3, r0
 8009014:	461c      	mov	r4, r3
 8009016:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901a:	4413      	add	r3, r2
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	4618      	mov	r0, r3
 8009020:	f7fd f929 	bl	8006276 <_ZN12SimpleString7ToLowerEc>
 8009024:	4603      	mov	r3, r0
 8009026:	429c      	cmp	r4, r3
 8009028:	bf0c      	ite	eq
 800902a:	2301      	moveq	r3, #1
 800902c:	2300      	movne	r3, #0
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d003      	beq.n	800903c <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xd8>
 8009034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009036:	3301      	adds	r3, #1
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
 800903a:	e7e3      	b.n	8009004 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xa0>
            ;
        size_t failStartPrintable;
        for (failStartPrintable = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63bb      	str	r3, [r7, #56]	; 0x38
             SimpleString::ToLower(printableActual.at(failStartPrintable)) == SimpleString::ToLower(printableExpected.at(failStartPrintable));
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009046:	4618      	mov	r0, r3
 8009048:	f7fd ff27 	bl	8006e9a <_ZNK12SimpleString2atEj>
 800904c:	4603      	mov	r3, r0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fd f911 	bl	8006276 <_ZN12SimpleString7ToLowerEc>
 8009054:	4603      	mov	r3, r0
 8009056:	461c      	mov	r4, r3
 8009058:	f107 0318 	add.w	r3, r7, #24
 800905c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800905e:	4618      	mov	r0, r3
 8009060:	f7fd ff1b 	bl	8006e9a <_ZNK12SimpleString2atEj>
 8009064:	4603      	mov	r3, r0
 8009066:	4618      	mov	r0, r3
 8009068:	f7fd f905 	bl	8006276 <_ZN12SimpleString7ToLowerEc>
 800906c:	4603      	mov	r3, r0
 800906e:	429c      	cmp	r4, r3
 8009070:	bf0c      	ite	eq
 8009072:	2301      	moveq	r3, #1
 8009074:	2300      	movne	r3, #0
 8009076:	b2db      	uxtb	r3, r3
 8009078:	2b00      	cmp	r3, #0
 800907a:	d003      	beq.n	8009084 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0x120>
        for (failStartPrintable = 0;
 800907c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907e:	3301      	adds	r3, #1
 8009080:	63bb      	str	r3, [r7, #56]	; 0x38
 8009082:	e7dd      	b.n	8009040 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString+0xdc>
             failStartPrintable++)
            ;
        message_ += createDifferenceAtPosString(printableActual, failStartPrintable, failStart);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800908a:	68f9      	ldr	r1, [r7, #12]
 800908c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009090:	f107 0210 	add.w	r2, r7, #16
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	9300      	str	r3, [sp, #0]
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	f7ff f8cd 	bl	8008238 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 800909e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090a2:	4619      	mov	r1, r3
 80090a4:	4620      	mov	r0, r4
 80090a6:	f7fd fe11 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 80090aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fd fd8f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableActual = PrintableStringFromOrNull(actual);
 80090b4:	f107 0310 	add.w	r3, r7, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fd fd8a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString printableExpected = PrintableStringFromOrNull(expected);
 80090be:	f107 0318 	add.w	r3, r7, #24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd fd85 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    }
}
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	4618      	mov	r0, r3
 80090cc:	3744      	adds	r7, #68	; 0x44
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd90      	pop	{r4, r7, pc}
 80090d2:	bf00      	nop
 80090d4:	080167c8 	.word	0x080167c8

080090d8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>:

BinaryEqualFailure::BinaryEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, const unsigned char* expected,
 80090d8:	b5b0      	push	{r4, r5, r7, lr}
 80090da:	b092      	sub	sp, #72	; 0x48
 80090dc:	af02      	add	r7, sp, #8
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
                                       const unsigned char* actual, size_t size, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	f7fe ff47 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80090f2:	4a40      	ldr	r2, [pc, #256]	; (80091f4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x11c>)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80090fe:	68f9      	ldr	r1, [r7, #12]
 8009100:	f107 031c 	add.w	r3, r7, #28
 8009104:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff f942 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800910c:	f107 031c 	add.w	r3, r7, #28
 8009110:	4619      	mov	r1, r3
 8009112:	4620      	mov	r0, r4
 8009114:	f7fd fa11 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8009118:	f107 031c 	add.w	r3, r7, #28
 800911c:	4618      	mov	r0, r3
 800911e:	f7fd fd58 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 8009122:	f107 0314 	add.w	r3, r7, #20
 8009126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009128:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fae0 	bl	80076f0 <_Z22StringFromBinaryOrNullPKhj>

	message_ += createButWasString(StringFromBinaryOrNull(expected, size), actualHex);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009136:	68fd      	ldr	r5, [r7, #12]
 8009138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800913c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800913e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fad5 	bl	80076f0 <_Z22StringFromBinaryOrNullPKhj>
 8009146:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800914a:	f107 0314 	add.w	r3, r7, #20
 800914e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8009152:	4629      	mov	r1, r5
 8009154:	f7ff f856 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800915c:	4619      	mov	r1, r3
 800915e:	4620      	mov	r0, r4
 8009160:	f7fd fdb4 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8009164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd fd32 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800916e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fd2d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
	if ((expected) && (actual))
 8009178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800917a:	2b00      	cmp	r3, #0
 800917c:	d02f      	beq.n	80091de <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
 800917e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009180:	2b00      	cmp	r3, #0
 8009182:	d02c      	beq.n	80091de <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0x106>
	{
		size_t failStart;
		for (failStart = 0; actual[failStart] == expected[failStart]; failStart++)
 8009184:	2300      	movs	r3, #0
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009188:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800918a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918c:	4413      	add	r3, r2
 800918e:	781a      	ldrb	r2, [r3, #0]
 8009190:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009194:	440b      	add	r3, r1
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d103      	bne.n	80091a4 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xcc>
 800919c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800919e:	3301      	adds	r3, #1
 80091a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091a2:	e7f1      	b.n	8009188 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString+0xb0>
			;
		message_ += createDifferenceAtPosString(actualHex, (failStart * 3 + 1), failStart);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80091aa:	68f9      	ldr	r1, [r7, #12]
 80091ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80091ae:	4613      	mov	r3, r2
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	1c5d      	adds	r5, r3, #1
 80091b6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80091ba:	f107 0214 	add.w	r2, r7, #20
 80091be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	462b      	mov	r3, r5
 80091c4:	f7ff f838 	bl	8008238 <_ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj>
 80091c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091cc:	4619      	mov	r1, r3
 80091ce:	4620      	mov	r0, r4
 80091d0:	f7fd fd7c 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 80091d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fd fcfa 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString actualHex = StringFromBinaryOrNull(actual, size);
 80091de:	f107 0314 	add.w	r3, r7, #20
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fd fcf5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
	}
}
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	4618      	mov	r0, r3
 80091ec:	3740      	adds	r7, #64	; 0x40
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bdb0      	pop	{r4, r5, r7, pc}
 80091f2:	bf00      	nop
 80091f4:	0801679c 	.word	0x0801679c

080091f8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>:

BitsEqualFailure::BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual,
 80091f8:	b5b0      	push	{r4, r5, r7, lr}
 80091fa:	b08c      	sub	sp, #48	; 0x30
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	607a      	str	r2, [r7, #4]
 8009204:	603b      	str	r3, [r7, #0]
                                   unsigned long mask, size_t byteCount, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	68b9      	ldr	r1, [r7, #8]
 800920e:	f7fe feb7 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 8009212:	4a26      	ldr	r2, [pc, #152]	; (80092ac <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString+0xb4>)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	f107 0310 	add.w	r3, r7, #16
 8009224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009226:	4618      	mov	r0, r3
 8009228:	f7ff f8b2 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 800922c:	f107 0310 	add.w	r3, r7, #16
 8009230:	4619      	mov	r1, r3
 8009232:	4620      	mov	r0, r4
 8009234:	f7fd f981 	bl	800653a <_ZN12SimpleStringaSERKS_>
 8009238:	f107 0310 	add.w	r3, r7, #16
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fcc8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += createButWasString(StringFromMaskedBits(expected, mask, byteCount), StringFromMaskedBits(actual, mask, byteCount));
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009248:	68fd      	ldr	r5, [r7, #12]
 800924a:	f107 0020 	add.w	r0, r7, #32
 800924e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009250:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009252:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009254:	f7fe fa68 	bl	8007728 <_Z20StringFromMaskedBitsmmj>
 8009258:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800925c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800925e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009260:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009262:	f7fe fa61 	bl	8007728 <_Z20StringFromMaskedBitsmmj>
 8009266:	f107 0018 	add.w	r0, r7, #24
 800926a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800926e:	f107 0220 	add.w	r2, r7, #32
 8009272:	4629      	mov	r1, r5
 8009274:	f7fe ffc6 	bl	8008204 <_ZN11TestFailure18createButWasStringERK12SimpleStringS2_>
 8009278:	f107 0318 	add.w	r3, r7, #24
 800927c:	4619      	mov	r1, r3
 800927e:	4620      	mov	r0, r4
 8009280:	f7fd fd24 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8009284:	f107 0318 	add.w	r3, r7, #24
 8009288:	4618      	mov	r0, r3
 800928a:	f7fd fca2 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800928e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009292:	4618      	mov	r0, r3
 8009294:	f7fd fc9d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 8009298:	f107 0320 	add.w	r3, r7, #32
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd fc98 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4618      	mov	r0, r3
 80092a6:	3730      	adds	r7, #48	; 0x30
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bdb0      	pop	{r4, r5, r7, pc}
 80092ac:	08016770 	.word	0x08016770

080092b0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>:

FeatureUnsupportedFailure::FeatureUnsupportedFailure(UtestShell* test, const char* fileName, size_t lineNumber,
 80092b0:	b590      	push	{r4, r7, lr}
 80092b2:	b089      	sub	sp, #36	; 0x24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]
 80092bc:	603b      	str	r3, [r7, #0]
                                                     const SimpleString& featureName, const SimpleString& text)
: TestFailure(test, fileName, lineNumber)
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	68b9      	ldr	r1, [r7, #8]
 80092c6:	f7fe fe5b 	bl	8007f80 <_ZN11TestFailureC1EP10UtestShellPKcj>
 80092ca:	4a1a      	ldr	r2, [pc, #104]	; (8009334 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x84>)
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	601a      	str	r2, [r3, #0]
{
    message_ = createUserText(text);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80092d6:	68f9      	ldr	r1, [r7, #12]
 80092d8:	f107 0310 	add.w	r3, r7, #16
 80092dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092de:	4618      	mov	r0, r3
 80092e0:	f7ff f856 	bl	8008390 <_ZN11TestFailure14createUserTextERK12SimpleString>
 80092e4:	f107 0310 	add.w	r3, r7, #16
 80092e8:	4619      	mov	r1, r3
 80092ea:	4620      	mov	r0, r4
 80092ec:	f7fd f925 	bl	800653a <_ZN12SimpleStringaSERKS_>
 80092f0:	f107 0310 	add.w	r3, r7, #16
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fd fc6c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    message_ += StringFromFormat("The feature \"%s\" is not supported in this environment or with the feature set selected when building the library.", featureName.asCharString());
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8009300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009302:	f7fd fc39 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8009306:	4602      	mov	r2, r0
 8009308:	f107 0318 	add.w	r3, r7, #24
 800930c:	490a      	ldr	r1, [pc, #40]	; (8009338 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_+0x88>)
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe f8ec 	bl	80074ec <_Z16StringFromFormatPKcz>
 8009314:	f107 0318 	add.w	r3, r7, #24
 8009318:	4619      	mov	r1, r3
 800931a:	4620      	mov	r0, r4
 800931c:	f7fd fcd6 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 8009320:	f107 0318 	add.w	r3, r7, #24
 8009324:	4618      	mov	r0, r3
 8009326:	f7fd fc54 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4618      	mov	r0, r3
 800932e:	3724      	adds	r7, #36	; 0x24
 8009330:	46bd      	mov	sp, r7
 8009332:	bd90      	pop	{r4, r7, pc}
 8009334:	08016744 	.word	0x08016744
 8009338:	08014d6c 	.word	0x08014d6c

0800933c <_ZN25FeatureUnsupportedFailureD1Ev>:
{
public:
	BitsEqualFailure(UtestShell* test, const char* fileName, size_t lineNumber, unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const SimpleString& text);
};

class FeatureUnsupportedFailure : public TestFailure
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	4a05      	ldr	r2, [pc, #20]	; (800935c <_ZN25FeatureUnsupportedFailureD1Ev+0x20>)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fe99 	bl	8008084 <_ZN11TestFailureD1Ev>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	08016744 	.word	0x08016744

08009360 <_ZN25FeatureUnsupportedFailureD0Ev>:
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ffe7 	bl	800933c <_ZN25FeatureUnsupportedFailureD1Ev>
 800936e:	2134      	movs	r1, #52	; 0x34
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f7fc f9a1 	bl	80056b8 <_ZdlPvj>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	3708      	adds	r7, #8
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <_ZN16BitsEqualFailureD1Ev>:
class BitsEqualFailure : public TestFailure
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	4a05      	ldr	r2, [pc, #20]	; (80093a0 <_ZN16BitsEqualFailureD1Ev+0x20>)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4618      	mov	r0, r3
 8009392:	f7fe fe77 	bl	8008084 <_ZN11TestFailureD1Ev>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4618      	mov	r0, r3
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	08016770 	.word	0x08016770

080093a4 <_ZN16BitsEqualFailureD0Ev>:
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7ff ffe7 	bl	8009380 <_ZN16BitsEqualFailureD1Ev>
 80093b2:	2134      	movs	r1, #52	; 0x34
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f7fc f97f 	bl	80056b8 <_ZdlPvj>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <_ZN18BinaryEqualFailureD1Ev>:
class BinaryEqualFailure : public TestFailure
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	4a05      	ldr	r2, [pc, #20]	; (80093e4 <_ZN18BinaryEqualFailureD1Ev+0x20>)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fe fe55 	bl	8008084 <_ZN11TestFailureD1Ev>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4618      	mov	r0, r3
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}
 80093e4:	0801679c 	.word	0x0801679c

080093e8 <_ZN18BinaryEqualFailureD0Ev>:
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ffe7 	bl	80093c4 <_ZN18BinaryEqualFailureD1Ev>
 80093f6:	2134      	movs	r1, #52	; 0x34
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7fc f95d 	bl	80056b8 <_ZdlPvj>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4618      	mov	r0, r3
 8009402:	3708      	adds	r7, #8
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <_ZN24StringEqualNoCaseFailureD1Ev>:
class StringEqualNoCaseFailure : public TestFailure
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	4a05      	ldr	r2, [pc, #20]	; (8009428 <_ZN24StringEqualNoCaseFailureD1Ev+0x20>)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	601a      	str	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4618      	mov	r0, r3
 800941a:	f7fe fe33 	bl	8008084 <_ZN11TestFailureD1Ev>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	080167c8 	.word	0x080167c8

0800942c <_ZN24StringEqualNoCaseFailureD0Ev>:
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff ffe7 	bl	8009408 <_ZN24StringEqualNoCaseFailureD1Ev>
 800943a:	2134      	movs	r1, #52	; 0x34
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f7fc f93b 	bl	80056b8 <_ZdlPvj>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4618      	mov	r0, r3
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}

0800944c <_ZN18StringEqualFailureD1Ev>:
class StringEqualFailure : public TestFailure
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	4a05      	ldr	r2, [pc, #20]	; (800946c <_ZN18StringEqualFailureD1Ev+0x20>)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fe11 	bl	8008084 <_ZN11TestFailureD1Ev>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}
 800946c:	080167f4 	.word	0x080167f4

08009470 <_ZN18StringEqualFailureD0Ev>:
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7ff ffe7 	bl	800944c <_ZN18StringEqualFailureD1Ev>
 800947e:	2134      	movs	r1, #52	; 0x34
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fc f919 	bl	80056b8 <_ZdlPvj>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4618      	mov	r0, r3
 800948a:	3708      	adds	r7, #8
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}

08009490 <_ZN23SignedBytesEqualFailureD1Ev>:
class SignedBytesEqualFailure : public TestFailure
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	4a05      	ldr	r2, [pc, #20]	; (80094b0 <_ZN23SignedBytesEqualFailureD1Ev+0x20>)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fdef 	bl	8008084 <_ZN11TestFailureD1Ev>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	4618      	mov	r0, r3
 80094aa:	3708      	adds	r7, #8
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	08016820 	.word	0x08016820

080094b4 <_ZN23SignedBytesEqualFailureD0Ev>:
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f7ff ffe7 	bl	8009490 <_ZN23SignedBytesEqualFailureD1Ev>
 80094c2:	2134      	movs	r1, #52	; 0x34
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f7fc f8f7 	bl	80056b8 <_ZdlPvj>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4618      	mov	r0, r3
 80094ce:	3708      	adds	r7, #8
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <_ZN25UnsignedLongsEqualFailureD1Ev>:
class UnsignedLongsEqualFailure : public TestFailure
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	4a05      	ldr	r2, [pc, #20]	; (80094f4 <_ZN25UnsignedLongsEqualFailureD1Ev+0x20>)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7fe fdcd 	bl	8008084 <_ZN11TestFailureD1Ev>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4618      	mov	r0, r3
 80094ee:	3708      	adds	r7, #8
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	0801684c 	.word	0x0801684c

080094f8 <_ZN25UnsignedLongsEqualFailureD0Ev>:
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff ffe7 	bl	80094d4 <_ZN25UnsignedLongsEqualFailureD1Ev>
 8009506:	2134      	movs	r1, #52	; 0x34
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f7fc f8d5 	bl	80056b8 <_ZdlPvj>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <_ZN17LongsEqualFailureD1Ev>:
class LongsEqualFailure : public TestFailure
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	4a05      	ldr	r2, [pc, #20]	; (8009538 <_ZN17LongsEqualFailureD1Ev+0x20>)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe fdab 	bl	8008084 <_ZN11TestFailureD1Ev>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	08016878 	.word	0x08016878

0800953c <_ZN17LongsEqualFailureD0Ev>:
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f7ff ffe7 	bl	8009518 <_ZN17LongsEqualFailureD1Ev>
 800954a:	2134      	movs	r1, #52	; 0x34
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f7fc f8b3 	bl	80056b8 <_ZdlPvj>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4618      	mov	r0, r3
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <_ZN12CheckFailureD1Ev>:
class CheckFailure : public TestFailure
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	4a05      	ldr	r2, [pc, #20]	; (800957c <_ZN12CheckFailureD1Ev+0x20>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4618      	mov	r0, r3
 800956e:	f7fe fd89 	bl	8008084 <_ZN11TestFailureD1Ev>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	4618      	mov	r0, r3
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	080168a4 	.word	0x080168a4

08009580 <_ZN12CheckFailureD0Ev>:
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f7ff ffe7 	bl	800955c <_ZN12CheckFailureD1Ev>
 800958e:	2134      	movs	r1, #52	; 0x34
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fc f891 	bl	80056b8 <_ZdlPvj>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4618      	mov	r0, r3
 800959a:	3708      	adds	r7, #8
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <_ZN15ContainsFailureD1Ev>:
class ContainsFailure: public TestFailure
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	4a05      	ldr	r2, [pc, #20]	; (80095c0 <_ZN15ContainsFailureD1Ev+0x20>)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	601a      	str	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f7fe fd67 	bl	8008084 <_ZN11TestFailureD1Ev>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	080168d0 	.word	0x080168d0

080095c4 <_ZN15ContainsFailureD0Ev>:
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff ffe7 	bl	80095a0 <_ZN15ContainsFailureD1Ev>
 80095d2:	2134      	movs	r1, #52	; 0x34
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7fc f86f 	bl	80056b8 <_ZdlPvj>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <_ZN17ComparisonFailureD1Ev>:
class ComparisonFailure : public TestFailure
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	4a05      	ldr	r2, [pc, #20]	; (8009604 <_ZN17ComparisonFailureD1Ev+0x20>)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	601a      	str	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fd45 	bl	8008084 <_ZN11TestFailureD1Ev>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4618      	mov	r0, r3
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	080168fc 	.word	0x080168fc

08009608 <_ZN17ComparisonFailureD0Ev>:
 8009608:	b580      	push	{r7, lr}
 800960a:	b082      	sub	sp, #8
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff ffe7 	bl	80095e4 <_ZN17ComparisonFailureD1Ev>
 8009616:	2134      	movs	r1, #52	; 0x34
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7fc f84d 	bl	80056b8 <_ZdlPvj>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4618      	mov	r0, r3
 8009622:	3708      	adds	r7, #8
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <_ZN17CheckEqualFailureD1Ev>:
class CheckEqualFailure : public TestFailure
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	4a05      	ldr	r2, [pc, #20]	; (8009648 <_ZN17CheckEqualFailureD1Ev+0x20>)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4618      	mov	r0, r3
 800963a:	f7fe fd23 	bl	8008084 <_ZN11TestFailureD1Ev>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	08016928 	.word	0x08016928

0800964c <_ZN17CheckEqualFailureD0Ev>:
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f7ff ffe7 	bl	8009628 <_ZN17CheckEqualFailureD1Ev>
 800965a:	2134      	movs	r1, #52	; 0x34
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fc f82b 	bl	80056b8 <_ZdlPvj>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4618      	mov	r0, r3
 8009666:	3708      	adds	r7, #8
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}

0800966c <_ZN19DoublesEqualFailureD1Ev>:
class DoublesEqualFailure: public TestFailure
 800966c:	b580      	push	{r7, lr}
 800966e:	b082      	sub	sp, #8
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	4a05      	ldr	r2, [pc, #20]	; (800968c <_ZN19DoublesEqualFailureD1Ev+0x20>)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4618      	mov	r0, r3
 800967e:	f7fe fd01 	bl	8008084 <_ZN11TestFailureD1Ev>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4618      	mov	r0, r3
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	08016954 	.word	0x08016954

08009690 <_ZN19DoublesEqualFailureD0Ev>:
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff ffe7 	bl	800966c <_ZN19DoublesEqualFailureD1Ev>
 800969e:	2134      	movs	r1, #52	; 0x34
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7fc f809 	bl	80056b8 <_ZdlPvj>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <_ZN13EqualsFailureD1Ev>:
class EqualsFailure: public TestFailure
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	4a05      	ldr	r2, [pc, #20]	; (80096d0 <_ZN13EqualsFailureD1Ev+0x20>)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	601a      	str	r2, [r3, #0]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe fcdf 	bl	8008084 <_ZN11TestFailureD1Ev>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4618      	mov	r0, r3
 80096ca:	3708      	adds	r7, #8
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	08016980 	.word	0x08016980

080096d4 <_ZN13EqualsFailureD0Ev>:
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7ff ffe7 	bl	80096b0 <_ZN13EqualsFailureD1Ev>
 80096e2:	2134      	movs	r1, #52	; 0x34
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7fb ffe7 	bl	80056b8 <_ZdlPvj>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	4618      	mov	r0, r3
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <_ZL13checkedMallocj>:
#include "CppUTest/TestMemoryAllocator.h"
#include "CppUTest/PlatformSpecificFunctions.h"
#include "CppUTest/MemoryLeakDetector.h"

static char* checkedMalloc(size_t size)
{
 80096f4:	b5b0      	push	{r4, r5, r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af02      	add	r7, sp, #8
 80096fa:	6078      	str	r0, [r7, #4]
    char* mem = (char*) PlatformSpecificMalloc(size);
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <_ZL13checkedMallocj+0x40>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	4798      	blx	r3
 8009704:	60f8      	str	r0, [r7, #12]
    if (mem == NULLPTR)
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10e      	bne.n	800972a <_ZL13checkedMallocj+0x36>
    FAIL("malloc returned null pointer");
 800970c:	f004 f908 	bl	800d920 <_ZN10UtestShell10getCurrentEv>
 8009710:	4604      	mov	r4, r0
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	3368      	adds	r3, #104	; 0x68
 8009716:	681d      	ldr	r5, [r3, #0]
 8009718:	f004 f912 	bl	800d940 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800971c:	4603      	mov	r3, r0
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	2325      	movs	r3, #37	; 0x25
 8009722:	4a05      	ldr	r2, [pc, #20]	; (8009738 <_ZL13checkedMallocj+0x44>)
 8009724:	4905      	ldr	r1, [pc, #20]	; (800973c <_ZL13checkedMallocj+0x48>)
 8009726:	4620      	mov	r0, r4
 8009728:	47a8      	blx	r5
    return mem;
 800972a:	68fb      	ldr	r3, [r7, #12]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bdb0      	pop	{r4, r5, r7, pc}
 8009734:	200000c4 	.word	0x200000c4
 8009738:	08014de0 	.word	0x08014de0
 800973c:	08014e00 	.word	0x08014e00

08009740 <_Z22getCurrentNewAllocatorv>:
{
    currentNewAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewAllocator()
{
 8009740:	b580      	push	{r7, lr}
 8009742:	af00      	add	r7, sp, #0
    if (currentNewAllocator == NULLPTR) setCurrentNewAllocatorToDefault();
 8009744:	4b04      	ldr	r3, [pc, #16]	; (8009758 <_Z22getCurrentNewAllocatorv+0x18>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d101      	bne.n	8009750 <_Z22getCurrentNewAllocatorv+0x10>
 800974c:	f000 f806 	bl	800975c <_Z31setCurrentNewAllocatorToDefaultv>
    return currentNewAllocator;
 8009750:	4b01      	ldr	r3, [pc, #4]	; (8009758 <_Z22getCurrentNewAllocatorv+0x18>)
 8009752:	681b      	ldr	r3, [r3, #0]
}
 8009754:	4618      	mov	r0, r3
 8009756:	bd80      	pop	{r7, pc}
 8009758:	2000048c 	.word	0x2000048c

0800975c <_Z31setCurrentNewAllocatorToDefaultv>:

void setCurrentNewAllocatorToDefault()
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
    currentNewAllocator = defaultNewAllocator();
 8009760:	f000 f810 	bl	8009784 <_Z19defaultNewAllocatorv>
 8009764:	4603      	mov	r3, r0
 8009766:	4a02      	ldr	r2, [pc, #8]	; (8009770 <_Z31setCurrentNewAllocatorToDefaultv+0x14>)
 8009768:	6013      	str	r3, [r2, #0]
}
 800976a:	bf00      	nop
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	2000048c 	.word	0x2000048c

08009774 <__tcf_0>:

TestMemoryAllocator* defaultNewAllocator()
{
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009774:	b580      	push	{r7, lr}
 8009776:	af00      	add	r7, sp, #0
 8009778:	4801      	ldr	r0, [pc, #4]	; (8009780 <__tcf_0+0xc>)
 800977a:	f000 f909 	bl	8009990 <_ZN19TestMemoryAllocatorD1Ev>
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000498 	.word	0x20000498

08009784 <_Z19defaultNewAllocatorv>:
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New Allocator", "new", "delete");
 8009788:	4b13      	ldr	r3, [pc, #76]	; (80097d8 <_Z19defaultNewAllocatorv+0x54>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f3bf 8f5b 	dmb	ish
 8009790:	b2db      	uxtb	r3, r3
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d016      	beq.n	80097d2 <_Z19defaultNewAllocatorv+0x4e>
 80097a4:	480c      	ldr	r0, [pc, #48]	; (80097d8 <_Z19defaultNewAllocatorv+0x54>)
 80097a6:	f007 fa45 	bl	8010c34 <__cxa_guard_acquire>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bf14      	ite	ne
 80097b0:	2301      	movne	r3, #1
 80097b2:	2300      	moveq	r3, #0
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d00b      	beq.n	80097d2 <_Z19defaultNewAllocatorv+0x4e>
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <_Z19defaultNewAllocatorv+0x58>)
 80097bc:	4a08      	ldr	r2, [pc, #32]	; (80097e0 <_Z19defaultNewAllocatorv+0x5c>)
 80097be:	4909      	ldr	r1, [pc, #36]	; (80097e4 <_Z19defaultNewAllocatorv+0x60>)
 80097c0:	4809      	ldr	r0, [pc, #36]	; (80097e8 <_Z19defaultNewAllocatorv+0x64>)
 80097c2:	f000 f8c5 	bl	8009950 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 80097c6:	4804      	ldr	r0, [pc, #16]	; (80097d8 <_Z19defaultNewAllocatorv+0x54>)
 80097c8:	f007 fa40 	bl	8010c4c <__cxa_guard_release>
 80097cc:	4807      	ldr	r0, [pc, #28]	; (80097ec <_Z19defaultNewAllocatorv+0x68>)
 80097ce:	f007 fa64 	bl	8010c9a <atexit>
    return &allocator;
 80097d2:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <_Z19defaultNewAllocatorv+0x64>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	200004ac 	.word	0x200004ac
 80097dc:	08014e20 	.word	0x08014e20
 80097e0:	08014e28 	.word	0x08014e28
 80097e4:	08014e2c 	.word	0x08014e2c
 80097e8:	20000498 	.word	0x20000498
 80097ec:	08009775 	.word	0x08009775

080097f0 <_Z27getCurrentNewArrayAllocatorv>:
{
    currentNewArrayAllocator = allocator;
}

TestMemoryAllocator* getCurrentNewArrayAllocator()
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	af00      	add	r7, sp, #0
    if (currentNewArrayAllocator == NULLPTR) setCurrentNewArrayAllocatorToDefault();
 80097f4:	4b04      	ldr	r3, [pc, #16]	; (8009808 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d101      	bne.n	8009800 <_Z27getCurrentNewArrayAllocatorv+0x10>
 80097fc:	f000 f806 	bl	800980c <_Z36setCurrentNewArrayAllocatorToDefaultv>
    return currentNewArrayAllocator;
 8009800:	4b01      	ldr	r3, [pc, #4]	; (8009808 <_Z27getCurrentNewArrayAllocatorv+0x18>)
 8009802:	681b      	ldr	r3, [r3, #0]
}
 8009804:	4618      	mov	r0, r3
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000490 	.word	0x20000490

0800980c <_Z36setCurrentNewArrayAllocatorToDefaultv>:

void setCurrentNewArrayAllocatorToDefault()
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
    currentNewArrayAllocator = defaultNewArrayAllocator();
 8009810:	f000 f810 	bl	8009834 <_Z24defaultNewArrayAllocatorv>
 8009814:	4603      	mov	r3, r0
 8009816:	4a02      	ldr	r2, [pc, #8]	; (8009820 <_Z36setCurrentNewArrayAllocatorToDefaultv+0x14>)
 8009818:	6013      	str	r3, [r2, #0]
}
 800981a:	bf00      	nop
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000490 	.word	0x20000490

08009824 <__tcf_1>:

TestMemoryAllocator* defaultNewArrayAllocator()
{
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
 8009828:	4801      	ldr	r0, [pc, #4]	; (8009830 <__tcf_1+0xc>)
 800982a:	f000 f8b1 	bl	8009990 <_ZN19TestMemoryAllocatorD1Ev>
 800982e:	bd80      	pop	{r7, pc}
 8009830:	200004b0 	.word	0x200004b0

08009834 <_Z24defaultNewArrayAllocatorv>:
{
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard New [] Allocator", "new []", "delete []");
 8009838:	4b13      	ldr	r3, [pc, #76]	; (8009888 <_Z24defaultNewArrayAllocatorv+0x54>)
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	f3bf 8f5b 	dmb	ish
 8009840:	b2db      	uxtb	r3, r3
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	bf0c      	ite	eq
 800984a:	2301      	moveq	r3, #1
 800984c:	2300      	movne	r3, #0
 800984e:	b2db      	uxtb	r3, r3
 8009850:	2b00      	cmp	r3, #0
 8009852:	d016      	beq.n	8009882 <_Z24defaultNewArrayAllocatorv+0x4e>
 8009854:	480c      	ldr	r0, [pc, #48]	; (8009888 <_Z24defaultNewArrayAllocatorv+0x54>)
 8009856:	f007 f9ed 	bl	8010c34 <__cxa_guard_acquire>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf14      	ite	ne
 8009860:	2301      	movne	r3, #1
 8009862:	2300      	moveq	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00b      	beq.n	8009882 <_Z24defaultNewArrayAllocatorv+0x4e>
 800986a:	4b08      	ldr	r3, [pc, #32]	; (800988c <_Z24defaultNewArrayAllocatorv+0x58>)
 800986c:	4a08      	ldr	r2, [pc, #32]	; (8009890 <_Z24defaultNewArrayAllocatorv+0x5c>)
 800986e:	4909      	ldr	r1, [pc, #36]	; (8009894 <_Z24defaultNewArrayAllocatorv+0x60>)
 8009870:	4809      	ldr	r0, [pc, #36]	; (8009898 <_Z24defaultNewArrayAllocatorv+0x64>)
 8009872:	f000 f86d 	bl	8009950 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009876:	4804      	ldr	r0, [pc, #16]	; (8009888 <_Z24defaultNewArrayAllocatorv+0x54>)
 8009878:	f007 f9e8 	bl	8010c4c <__cxa_guard_release>
 800987c:	4807      	ldr	r0, [pc, #28]	; (800989c <_Z24defaultNewArrayAllocatorv+0x68>)
 800987e:	f007 fa0c 	bl	8010c9a <atexit>
    return &allocator;
 8009882:	4b05      	ldr	r3, [pc, #20]	; (8009898 <_Z24defaultNewArrayAllocatorv+0x64>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	200004c4 	.word	0x200004c4
 800988c:	08014e44 	.word	0x08014e44
 8009890:	08014e50 	.word	0x08014e50
 8009894:	08014e58 	.word	0x08014e58
 8009898:	200004b0 	.word	0x200004b0
 800989c:	08009825 	.word	0x08009825

080098a0 <_Z25getCurrentMallocAllocatorv>:
{
    currentMallocAllocator = allocator;
}

TestMemoryAllocator* getCurrentMallocAllocator()
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
    if (currentMallocAllocator == NULLPTR) setCurrentMallocAllocatorToDefault();
 80098a4:	4b04      	ldr	r3, [pc, #16]	; (80098b8 <_Z25getCurrentMallocAllocatorv+0x18>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d101      	bne.n	80098b0 <_Z25getCurrentMallocAllocatorv+0x10>
 80098ac:	f000 f806 	bl	80098bc <_Z34setCurrentMallocAllocatorToDefaultv>
    return currentMallocAllocator;
 80098b0:	4b01      	ldr	r3, [pc, #4]	; (80098b8 <_Z25getCurrentMallocAllocatorv+0x18>)
 80098b2:	681b      	ldr	r3, [r3, #0]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20000494 	.word	0x20000494

080098bc <_Z34setCurrentMallocAllocatorToDefaultv>:

void setCurrentMallocAllocatorToDefault()
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
    currentMallocAllocator = defaultMallocAllocator();
 80098c0:	f000 f810 	bl	80098e4 <_Z22defaultMallocAllocatorv>
 80098c4:	4603      	mov	r3, r0
 80098c6:	4a02      	ldr	r2, [pc, #8]	; (80098d0 <_Z34setCurrentMallocAllocatorToDefaultv+0x14>)
 80098c8:	6013      	str	r3, [r2, #0]
}
 80098ca:	bf00      	nop
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000494 	.word	0x20000494

080098d4 <__tcf_2>:

TestMemoryAllocator* defaultMallocAllocator()
{
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	4801      	ldr	r0, [pc, #4]	; (80098e0 <__tcf_2+0xc>)
 80098da:	f000 f859 	bl	8009990 <_ZN19TestMemoryAllocatorD1Ev>
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200004c8 	.word	0x200004c8

080098e4 <_Z22defaultMallocAllocatorv>:
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
    static TestMemoryAllocator allocator("Standard Malloc Allocator", "malloc", "free");
 80098e8:	4b13      	ldr	r3, [pc, #76]	; (8009938 <_Z22defaultMallocAllocatorv+0x54>)
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	f3bf 8f5b 	dmb	ish
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0301 	and.w	r3, r3, #1
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	bf0c      	ite	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	2300      	movne	r3, #0
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	d016      	beq.n	8009932 <_Z22defaultMallocAllocatorv+0x4e>
 8009904:	480c      	ldr	r0, [pc, #48]	; (8009938 <_Z22defaultMallocAllocatorv+0x54>)
 8009906:	f007 f995 	bl	8010c34 <__cxa_guard_acquire>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00b      	beq.n	8009932 <_Z22defaultMallocAllocatorv+0x4e>
 800991a:	4b08      	ldr	r3, [pc, #32]	; (800993c <_Z22defaultMallocAllocatorv+0x58>)
 800991c:	4a08      	ldr	r2, [pc, #32]	; (8009940 <_Z22defaultMallocAllocatorv+0x5c>)
 800991e:	4909      	ldr	r1, [pc, #36]	; (8009944 <_Z22defaultMallocAllocatorv+0x60>)
 8009920:	4809      	ldr	r0, [pc, #36]	; (8009948 <_Z22defaultMallocAllocatorv+0x64>)
 8009922:	f000 f815 	bl	8009950 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009926:	4804      	ldr	r0, [pc, #16]	; (8009938 <_Z22defaultMallocAllocatorv+0x54>)
 8009928:	f007 f990 	bl	8010c4c <__cxa_guard_release>
 800992c:	4807      	ldr	r0, [pc, #28]	; (800994c <_Z22defaultMallocAllocatorv+0x68>)
 800992e:	f007 f9b4 	bl	8010c9a <atexit>
    return &allocator;
 8009932:	4b05      	ldr	r3, [pc, #20]	; (8009948 <_Z22defaultMallocAllocatorv+0x64>)
}
 8009934:	4618      	mov	r0, r3
 8009936:	bd80      	pop	{r7, pc}
 8009938:	200004dc 	.word	0x200004dc
 800993c:	08014e74 	.word	0x08014e74
 8009940:	08014e7c 	.word	0x08014e7c
 8009944:	08014e84 	.word	0x08014e84
 8009948:	200004c8 	.word	0x200004c8
 800994c:	080098d5 	.word	0x080098d5

08009950 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>:
    if (originalMallocAllocator) setCurrentMallocAllocator(originalMallocAllocator);
    if (originalNewAllocator) setCurrentNewAllocator(originalNewAllocator);
    if (originalNewArrayAllocator) setCurrentNewArrayAllocator(originalNewArrayAllocator);
}

TestMemoryAllocator::TestMemoryAllocator(const char* name_str, const char* alloc_name_str, const char* free_name_str)
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
    : name_(name_str), alloc_name_(alloc_name_str), free_name_(free_name_str), hasBeenDestroyed_(false)
 800995e:	4a0b      	ldr	r2, [pc, #44]	; (800998c <_ZN19TestMemoryAllocatorC1EPKcS1_S1_+0x3c>)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	605a      	str	r2, [r3, #4]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	609a      	str	r2, [r3, #8]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	683a      	ldr	r2, [r7, #0]
 8009974:	60da      	str	r2, [r3, #12]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	741a      	strb	r2, [r3, #16]
{
}
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	08016a0c 	.word	0x08016a0c

08009990 <_ZN19TestMemoryAllocatorD1Ev>:

TestMemoryAllocator::~TestMemoryAllocator()
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	4a06      	ldr	r2, [pc, #24]	; (80099b4 <_ZN19TestMemoryAllocatorD1Ev+0x24>)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	601a      	str	r2, [r3, #0]
{
    hasBeenDestroyed_ = true;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	741a      	strb	r2, [r3, #16]
}
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4618      	mov	r0, r3
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	08016a0c 	.word	0x08016a0c

080099b8 <_ZN19TestMemoryAllocatorD0Ev>:
TestMemoryAllocator::~TestMemoryAllocator()
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
}
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7ff ffe5 	bl	8009990 <_ZN19TestMemoryAllocatorD1Ev>
 80099c6:	2114      	movs	r1, #20
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7fb fe75 	bl	80056b8 <_ZdlPvj>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4618      	mov	r0, r3
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>:

bool TestMemoryAllocator::hasBeenDestroyed()
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
    return hasBeenDestroyed_;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7c1b      	ldrb	r3, [r3, #16]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <_ZN19TestMemoryAllocator13isOfEqualTypeEPS_>:

bool TestMemoryAllocator::isOfEqualType(TestMemoryAllocator* allocator)
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
    return SimpleString::StrCmp(this->name(), allocator->name()) == 0;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3310      	adds	r3, #16
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	4798      	blx	r3
 8009a06:	4604      	mov	r4, r0
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	3310      	adds	r3, #16
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	6838      	ldr	r0, [r7, #0]
 8009a12:	4798      	blx	r3
 8009a14:	4603      	mov	r3, r0
 8009a16:	4619      	mov	r1, r3
 8009a18:	4620      	mov	r0, r4
 8009a1a:	f7fc fb5f 	bl	80060dc <_ZN12SimpleString6StrCmpEPKcS1_>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bf0c      	ite	eq
 8009a24:	2301      	moveq	r3, #1
 8009a26:	2300      	movne	r3, #0
 8009a28:	b2db      	uxtb	r3, r3
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	370c      	adds	r7, #12
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd90      	pop	{r4, r7, pc}
	...

08009a34 <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj>:

char* TestMemoryAllocator::allocMemoryLeakNode(size_t size)
{
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
    return alloc_memory(size, "MemoryLeakNode", 1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	681c      	ldr	r4, [r3, #0]
 8009a46:	2301      	movs	r3, #1
 8009a48:	4a04      	ldr	r2, [pc, #16]	; (8009a5c <_ZN19TestMemoryAllocator19allocMemoryLeakNodeEj+0x28>)
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	47a0      	blx	r4
 8009a50:	4603      	mov	r3, r0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	370c      	adds	r7, #12
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd90      	pop	{r4, r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	08014ea0 	.word	0x08014ea0

08009a60 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc>:

void TestMemoryAllocator::freeMemoryLeakNode(char* memory)
{
 8009a60:	b590      	push	{r4, r7, lr}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af02      	add	r7, sp, #8
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
    free_memory(memory, 0, "MemoryLeakNode", 1);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	330c      	adds	r3, #12
 8009a70:	681c      	ldr	r4, [r3, #0]
 8009a72:	2301      	movs	r3, #1
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <_ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc+0x28>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	47a0      	blx	r4
}
 8009a80:	bf00      	nop
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd90      	pop	{r4, r7, pc}
 8009a88:	08014ea0 	.word	0x08014ea0

08009a8c <_ZN19TestMemoryAllocator12alloc_memoryEjPKcj>:

char* TestMemoryAllocator::alloc_memory(size_t size, const char*, size_t)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
    return checkedMalloc(size);
 8009a9a:	68b8      	ldr	r0, [r7, #8]
 8009a9c:	f7ff fe2a 	bl	80096f4 <_ZL13checkedMallocj>
 8009aa0:	4603      	mov	r3, r0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj>:

void TestMemoryAllocator::free_memory(char* memory, size_t, const char*, size_t)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
 8009ab8:	603b      	str	r3, [r7, #0]
    PlatformSpecificFree(memory);
 8009aba:	4b04      	ldr	r3, [pc, #16]	; (8009acc <_ZN19TestMemoryAllocator11free_memoryEPcjPKcj+0x20>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68b8      	ldr	r0, [r7, #8]
 8009ac0:	4798      	blx	r3
}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200000cc 	.word	0x200000cc

08009ad0 <_ZNK19TestMemoryAllocator4nameEv>:

const char* TestMemoryAllocator::name() const
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
    return name_;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	370c      	adds	r7, #12
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr

08009ae8 <_ZNK19TestMemoryAllocator10alloc_nameEv>:

const char* TestMemoryAllocator::alloc_name() const
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
    return alloc_name_;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	689b      	ldr	r3, [r3, #8]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <_ZNK19TestMemoryAllocator9free_nameEv>:

const char* TestMemoryAllocator::free_name() const
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
    return free_name_;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68db      	ldr	r3, [r3, #12]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <_ZN19TestMemoryAllocator15actualAllocatorEv>:

TestMemoryAllocator* TestMemoryAllocator::actualAllocator()
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
    return this;
 8009b20:	687b      	ldr	r3, [r7, #4]
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	370c      	adds	r7, #12
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <_ZN20NullUnknownAllocatorD1Ev>:

    return TestMemoryAllocator::alloc_memory(size, file, line);
}


NullUnknownAllocator::~NullUnknownAllocator()
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	4a05      	ldr	r2, [pc, #20]	; (8009b50 <_ZN20NullUnknownAllocatorD1Ev+0x20>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f7ff ff25 	bl	8009990 <_ZN19TestMemoryAllocatorD1Ev>
{
}
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3708      	adds	r7, #8
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	080169d8 	.word	0x080169d8

08009b54 <_ZN20NullUnknownAllocatorD0Ev>:
NullUnknownAllocator::~NullUnknownAllocator()
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
}
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ffe7 	bl	8009b30 <_ZN20NullUnknownAllocatorD1Ev>
 8009b62:	2114      	movs	r1, #20
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7fb fda7 	bl	80056b8 <_ZdlPvj>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <_ZN20NullUnknownAllocator12alloc_memoryEjPKcj>:

char* NullUnknownAllocator::alloc_memory(size_t /*size*/, const char*, size_t)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	60f8      	str	r0, [r7, #12]
 8009b7c:	60b9      	str	r1, [r7, #8]
 8009b7e:	607a      	str	r2, [r7, #4]
 8009b80:	603b      	str	r3, [r7, #0]
    return NULLPTR;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <_ZN20NullUnknownAllocator11free_memoryEPcjPKcj>:

void NullUnknownAllocator::free_memory(char* /*memory*/, size_t, const char*, size_t)
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	60f8      	str	r0, [r7, #12]
 8009b98:	60b9      	str	r1, [r7, #8]
 8009b9a:	607a      	str	r2, [r7, #4]
 8009b9c:	603b      	str	r3, [r7, #0]
}
 8009b9e:	bf00      	nop
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
	...

08009bac <_ZN20NullUnknownAllocatorC1Ev>:

NullUnknownAllocator::NullUnknownAllocator()
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
    : TestMemoryAllocator("Null Allocator", "unknown", "unknown")
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	4b06      	ldr	r3, [pc, #24]	; (8009bd0 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8009bb8:	4a05      	ldr	r2, [pc, #20]	; (8009bd0 <_ZN20NullUnknownAllocatorC1Ev+0x24>)
 8009bba:	4906      	ldr	r1, [pc, #24]	; (8009bd4 <_ZN20NullUnknownAllocatorC1Ev+0x28>)
 8009bbc:	f7ff fec8 	bl	8009950 <_ZN19TestMemoryAllocatorC1EPKcS1_S1_>
 8009bc0:	4a05      	ldr	r2, [pc, #20]	; (8009bd8 <_ZN20NullUnknownAllocatorC1Ev+0x2c>)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
{
}
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	08014ed4 	.word	0x08014ed4
 8009bd4:	08014edc 	.word	0x08014edc
 8009bd8:	080169d8 	.word	0x080169d8

08009bdc <__tcf_3>:


TestMemoryAllocator* NullUnknownAllocator::defaultAllocator()
{
    static NullUnknownAllocator allocator;
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	4801      	ldr	r0, [pc, #4]	; (8009be8 <__tcf_3+0xc>)
 8009be2:	f7ff ffa5 	bl	8009b30 <_ZN20NullUnknownAllocatorD1Ev>
 8009be6:	bd80      	pop	{r7, pc}
 8009be8:	200004e0 	.word	0x200004e0

08009bec <_ZN20NullUnknownAllocator16defaultAllocatorEv>:
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
    static NullUnknownAllocator allocator;
 8009bf0:	4b12      	ldr	r3, [pc, #72]	; (8009c3c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	f3bf 8f5b 	dmb	ish
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bf0c      	ite	eq
 8009c02:	2301      	moveq	r3, #1
 8009c04:	2300      	movne	r3, #0
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d013      	beq.n	8009c34 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8009c0c:	480b      	ldr	r0, [pc, #44]	; (8009c3c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8009c0e:	f007 f811 	bl	8010c34 <__cxa_guard_acquire>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	bf14      	ite	ne
 8009c18:	2301      	movne	r3, #1
 8009c1a:	2300      	moveq	r3, #0
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d008      	beq.n	8009c34 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x48>
 8009c22:	4807      	ldr	r0, [pc, #28]	; (8009c40 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
 8009c24:	f7ff ffc2 	bl	8009bac <_ZN20NullUnknownAllocatorC1Ev>
 8009c28:	4804      	ldr	r0, [pc, #16]	; (8009c3c <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x50>)
 8009c2a:	f007 f80f 	bl	8010c4c <__cxa_guard_release>
 8009c2e:	4805      	ldr	r0, [pc, #20]	; (8009c44 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x58>)
 8009c30:	f007 f833 	bl	8010c9a <atexit>
    return &allocator;
 8009c34:	4b02      	ldr	r3, [pc, #8]	; (8009c40 <_ZN20NullUnknownAllocator16defaultAllocatorEv+0x54>)
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	200004f4 	.word	0x200004f4
 8009c40:	200004e0 	.word	0x200004e0
 8009c44:	08009bdd 	.word	0x08009bdd

08009c48 <_ZNK10TestResult12getTestCountEv>:
    size_t getTestCount() const
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
        return testCount_;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	689b      	ldr	r3, [r3, #8]
    }
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <_ZNK10TestResult19getFilteredOutCountEv>:
    size_t getFilteredOutCount() const
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
        return filteredOutCount_;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	699b      	ldr	r3, [r3, #24]
    }
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <_ZN10TestOutput21getWorkingEnvironmentEv>:
{
    workingEnvironment_ = workEnvironment;
}

TestOutput::WorkingEnvironment TestOutput::getWorkingEnvironment()
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
    if (workingEnvironment_ == TestOutput::detectEnvironment)
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d103      	bne.n	8009c8c <_ZN10TestOutput21getWorkingEnvironmentEv+0x14>
        return PlatformSpecificGetWorkingEnvironment();
 8009c84:	f004 f98a 	bl	800df9c <_Z37PlatformSpecificGetWorkingEnvironmentv>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	e001      	b.n	8009c90 <_ZN10TestOutput21getWorkingEnvironmentEv+0x18>
    return workingEnvironment_;
 8009c8c:	4b01      	ldr	r3, [pc, #4]	; (8009c94 <_ZN10TestOutput21getWorkingEnvironmentEv+0x1c>)
 8009c8e:	781b      	ldrb	r3, [r3, #0]
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	20000084 	.word	0x20000084

08009c98 <_ZN10TestOutputC1Ev>:


TestOutput::TestOutput() :
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
    dotCount_(0), verbose_(level_quiet), color_(false), progressIndication_(".")
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <_ZN10TestOutputC1Ev+0x34>)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	605a      	str	r2, [r3, #4]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	721a      	strb	r2, [r3, #8]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	725a      	strb	r2, [r3, #9]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a05      	ldr	r2, [pc, #20]	; (8009cd0 <_ZN10TestOutputC1Ev+0x38>)
 8009cbc:	60da      	str	r2, [r3, #12]
{
}
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	08016b10 	.word	0x08016b10
 8009cd0:	080152dc 	.word	0x080152dc

08009cd4 <_ZN10TestOutputD1Ev>:

TestOutput::~TestOutput()
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	4a04      	ldr	r2, [pc, #16]	; (8009cf0 <_ZN10TestOutputD1Ev+0x1c>)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	601a      	str	r2, [r3, #0]
{
}
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr
 8009cf0:	08016b10 	.word	0x08016b10

08009cf4 <_ZN10TestOutput7verboseENS_14VerbosityLevelE>:

void TestOutput::verbose(VerbosityLevel level)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
    verbose_ = level;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	78fa      	ldrb	r2, [r7, #3]
 8009d04:	721a      	strb	r2, [r3, #8]
}
 8009d06:	bf00      	nop
 8009d08:	370c      	adds	r7, #12
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr

08009d12 <_ZN10TestOutput5colorEv>:

void TestOutput::color()
{
 8009d12:	b480      	push	{r7}
 8009d14:	b083      	sub	sp, #12
 8009d16:	af00      	add	r7, sp, #0
 8009d18:	6078      	str	r0, [r7, #4]
    color_ = true;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	725a      	strb	r2, [r3, #9]
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <_ZN10TestOutput5printEPKc>:

void TestOutput::print(const char* str)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
    printBuffer(str);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3328      	adds	r3, #40	; 0x28
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	4798      	blx	r3
}
 8009d44:	bf00      	nop
 8009d46:	3708      	adds	r7, #8
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <_ZN10TestOutput5printEl>:

void TestOutput::print(long n)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	332c      	adds	r3, #44	; 0x2c
 8009d5c:	681c      	ldr	r4, [r3, #0]
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	6839      	ldr	r1, [r7, #0]
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fd f9ef 	bl	8007148 <_Z10StringFroml>
 8009d6a:	f107 0308 	add.w	r3, r7, #8
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7fc ff02 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8009d74:	4603      	mov	r3, r0
 8009d76:	4619      	mov	r1, r3
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	47a0      	blx	r4
 8009d7c:	f107 0308 	add.w	r3, r7, #8
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7fc ff26 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8009d86:	bf00      	nop
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd90      	pop	{r4, r7, pc}

08009d8e <_ZN10TestOutput5printEj>:

void TestOutput::print(size_t n)
{
 8009d8e:	b590      	push	{r4, r7, lr}
 8009d90:	b085      	sub	sp, #20
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
 8009d96:	6039      	str	r1, [r7, #0]
    print(StringFrom(n).asCharString());
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	332c      	adds	r3, #44	; 0x2c
 8009d9e:	681c      	ldr	r4, [r3, #0]
 8009da0:	f107 0308 	add.w	r3, r7, #8
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fd fbc8 	bl	800753c <_Z10StringFromj>
 8009dac:	f107 0308 	add.w	r3, r7, #8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fc fee1 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8009db6:	4603      	mov	r3, r0
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	47a0      	blx	r4
 8009dbe:	f107 0308 	add.w	r3, r7, #8
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fc ff05 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8009dc8:	bf00      	nop
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd90      	pop	{r4, r7, pc}

08009dd0 <_ZN10TestOutput11printDoubleEd>:

void TestOutput::printDouble(double d)
{
 8009dd0:	b590      	push	{r4, r7, lr}
 8009dd2:	b087      	sub	sp, #28
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	ed87 0b00 	vstr	d0, [r7]
    print(StringFrom(d).asCharString());
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	332c      	adds	r3, #44	; 0x2c
 8009de2:	681c      	ldr	r4, [r3, #0]
 8009de4:	f107 0310 	add.w	r3, r7, #16
 8009de8:	2106      	movs	r1, #6
 8009dea:	ed97 0b00 	vldr	d0, [r7]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fd fb3a 	bl	8007468 <_Z10StringFromdi>
 8009df4:	f107 0310 	add.w	r3, r7, #16
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7fc febd 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	4619      	mov	r1, r3
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	47a0      	blx	r4
 8009e06:	f107 0310 	add.w	r3, r7, #16
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f7fc fee1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 8009e10:	bf00      	nop
 8009e12:	371c      	adds	r7, #28
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd90      	pop	{r4, r7, pc}

08009e18 <_ZlsR10TestOutputPKc>:

TestOutput& operator<<(TestOutput& p, const char* s)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b082      	sub	sp, #8
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
    p.print(s);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	332c      	adds	r3, #44	; 0x2c
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	4798      	blx	r3
    return p;
 8009e30:	687b      	ldr	r3, [r7, #4]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
	...

08009e3c <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell>:
    p.print(i);
    return p;
}

void TestOutput::printCurrentTestStarted(const UtestShell& test)
{
 8009e3c:	b590      	push	{r4, r7, lr}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) print(test.getFormattedName().asCharString());
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	7a1b      	ldrb	r3, [r3, #8]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d01a      	beq.n	8009e84 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x48>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	332c      	adds	r3, #44	; 0x2c
 8009e54:	681c      	ldr	r4, [r3, #0]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3314      	adds	r3, #20
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f107 0208 	add.w	r2, r7, #8
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	4610      	mov	r0, r2
 8009e66:	4798      	blx	r3
 8009e68:	f107 0308 	add.w	r3, r7, #8
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f7fc fe83 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 8009e72:	4603      	mov	r3, r0
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	47a0      	blx	r4
 8009e7a:	f107 0308 	add.w	r3, r7, #8
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f7fc fea7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    if (test.willRun()) {
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	3318      	adds	r3, #24
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6838      	ldr	r0, [r7, #0]
 8009e8e:	4798      	blx	r3
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d007      	beq.n	8009ea6 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x6a>
       setProgressIndicator(".");
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	3344      	adds	r3, #68	; 0x44
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4907      	ldr	r1, [pc, #28]	; (8009ebc <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x80>)
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
    }
    else {
       setProgressIndicator("!");
    }
}
 8009ea4:	e006      	b.n	8009eb4 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x78>
       setProgressIndicator("!");
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	3344      	adds	r3, #68	; 0x44
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4904      	ldr	r1, [pc, #16]	; (8009ec0 <_ZN10TestOutput23printCurrentTestStartedERK10UtestShell+0x84>)
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
}
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}
 8009ebc:	080152dc 	.word	0x080152dc
 8009ec0:	080152e0 	.word	0x080152e0

08009ec4 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult>:

void TestOutput::printCurrentTestEnded(const TestResult& res)
{
 8009ec4:	b590      	push	{r4, r7, lr}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
    if (verbose_ > level_quiet) {
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	7a1b      	ldrb	r3, [r3, #8]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d019      	beq.n	8009f0a <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x46>
        print(" - ");
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	332c      	adds	r3, #44	; 0x2c
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4910      	ldr	r1, [pc, #64]	; (8009f20 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x5c>)
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4798      	blx	r3
        print(res.getCurrentTestTotalExecutionTime());
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3334      	adds	r3, #52	; 0x34
 8009eea:	681c      	ldr	r4, [r3, #0]
 8009eec:	6838      	ldr	r0, [r7, #0]
 8009eee:	f002 f845 	bl	800bf7c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	47a0      	blx	r4
        print(" ms\n");
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	332c      	adds	r3, #44	; 0x2c
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4908      	ldr	r1, [pc, #32]	; (8009f24 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x60>)
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	4798      	blx	r3
    }
    else {
        printProgressIndicator();
    }
}
 8009f08:	e005      	b.n	8009f16 <_ZN10TestOutput21printCurrentTestEndedERK10TestResult+0x52>
        printProgressIndicator();
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	3358      	adds	r3, #88	; 0x58
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	4798      	blx	r3
}
 8009f16:	bf00      	nop
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd90      	pop	{r4, r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	080152e4 	.word	0x080152e4
 8009f24:	080152e8 	.word	0x080152e8

08009f28 <_ZN10TestOutput22printProgressIndicatorEv>:

void TestOutput::printProgressIndicator()
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b082      	sub	sp, #8
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
    print(progressIndication_);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	332c      	adds	r3, #44	; 0x2c
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	68d2      	ldr	r2, [r2, #12]
 8009f3c:	4611      	mov	r1, r2
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
    if (++dotCount_ % 50 == 0) print("\n");
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	1c5a      	adds	r2, r3, #1
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	605a      	str	r2, [r3, #4]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	4b0d      	ldr	r3, [pc, #52]	; (8009f88 <_ZN10TestOutput22printProgressIndicatorEv+0x60>)
 8009f52:	fb83 1302 	smull	r1, r3, r3, r2
 8009f56:	1119      	asrs	r1, r3, #4
 8009f58:	17d3      	asrs	r3, r2, #31
 8009f5a:	1acb      	subs	r3, r1, r3
 8009f5c:	2132      	movs	r1, #50	; 0x32
 8009f5e:	fb01 f303 	mul.w	r3, r1, r3
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	bf0c      	ite	eq
 8009f68:	2301      	moveq	r3, #1
 8009f6a:	2300      	movne	r3, #0
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d006      	beq.n	8009f80 <_ZN10TestOutput22printProgressIndicatorEv+0x58>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	332c      	adds	r3, #44	; 0x2c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4904      	ldr	r1, [pc, #16]	; (8009f8c <_ZN10TestOutput22printProgressIndicatorEv+0x64>)
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	4798      	blx	r3
}
 8009f80:	bf00      	nop
 8009f82:	3708      	adds	r7, #8
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	51eb851f 	.word	0x51eb851f
 8009f8c:	080152f0 	.word	0x080152f0

08009f90 <_ZN10TestOutput20setProgressIndicatorEPKc>:

void TestOutput::setProgressIndicator(const char* indicator)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
    progressIndication_ = indicator;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	683a      	ldr	r2, [r7, #0]
 8009f9e:	60da      	str	r2, [r3, #12]
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <_ZN10TestOutput17printTestsStartedEv>:

void TestOutput::printTestsStarted()
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
}
 8009fb4:	bf00      	nop
 8009fb6:	370c      	adds	r7, #12
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <_ZN10TestOutput24printCurrentGroupStartedERK10UtestShell>:

void TestOutput::printCurrentGroupStarted(const UtestShell& /*test*/)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <_ZN10TestOutput22printCurrentGroupEndedERK10TestResult>:

void TestOutput::printCurrentGroupEnded(const TestResult& /*res*/)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
}
 8009fe0:	bf00      	nop
 8009fe2:	370c      	adds	r7, #12
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <_ZN10TestOutput15printTestsEndedERK10TestResult>:

void TestOutput::printTestsEnded(const TestResult& result)
{
 8009fec:	b590      	push	{r4, r7, lr}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
    print("\n");
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	332c      	adds	r3, #44	; 0x2c
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	496f      	ldr	r1, [pc, #444]	; (800a1bc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d0>)
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
    const bool isFailure = result.isFailure();
 800a004:	6838      	ldr	r0, [r7, #0]
 800a006:	f7f9 fe24 	bl	8003c52 <_ZNK10TestResult9isFailureEv>
 800a00a:	4603      	mov	r3, r0
 800a00c:	73fb      	strb	r3, [r7, #15]
    const size_t failureCount = result.getFailureCount();
 800a00e:	6838      	ldr	r0, [r7, #0]
 800a010:	f7f9 fe13 	bl	8003c3a <_ZNK10TestResult15getFailureCountEv>
 800a014:	60b8      	str	r0, [r7, #8]
    if (isFailure) {
 800a016:	7bfb      	ldrb	r3, [r7, #15]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d02b      	beq.n	800a074 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x88>
        if (color_) {
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	7a5b      	ldrb	r3, [r3, #9]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d006      	beq.n	800a032 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x46>
            print("\033[31;1m");
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	332c      	adds	r3, #44	; 0x2c
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4964      	ldr	r1, [pc, #400]	; (800a1c0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d4>)
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	4798      	blx	r3
        }
        print("Errors (");
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	332c      	adds	r3, #44	; 0x2c
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4962      	ldr	r1, [pc, #392]	; (800a1c4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1d8>)
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	4798      	blx	r3
        if (failureCount > 0) {
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00e      	beq.n	800a064 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x78>
            print(failureCount);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	3334      	adds	r3, #52	; 0x34
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68b9      	ldr	r1, [r7, #8]
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	4798      	blx	r3
            print(" failures, ");
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	332c      	adds	r3, #44	; 0x2c
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	495a      	ldr	r1, [pc, #360]	; (800a1c8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1dc>)
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	4798      	blx	r3
 800a062:	e019      	b.n	800a098 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
        else {
            print("ran nothing, ");
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	332c      	adds	r3, #44	; 0x2c
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4957      	ldr	r1, [pc, #348]	; (800a1cc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e0>)
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
 800a072:	e011      	b.n	800a098 <_ZN10TestOutput15printTestsEndedERK10TestResult+0xac>
        }
    }
    else {
        if (color_) {
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	7a5b      	ldrb	r3, [r3, #9]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d006      	beq.n	800a08a <_ZN10TestOutput15printTestsEndedERK10TestResult+0x9e>
            print("\033[32;1m");
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	332c      	adds	r3, #44	; 0x2c
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4952      	ldr	r1, [pc, #328]	; (800a1d0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e4>)
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	4798      	blx	r3
        }
        print("OK (");
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	332c      	adds	r3, #44	; 0x2c
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4950      	ldr	r1, [pc, #320]	; (800a1d4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1e8>)
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	4798      	blx	r3
    }
    print(result.getTestCount());
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	3334      	adds	r3, #52	; 0x34
 800a09e:	681c      	ldr	r4, [r3, #0]
 800a0a0:	6838      	ldr	r0, [r7, #0]
 800a0a2:	f7ff fdd1 	bl	8009c48 <_ZNK10TestResult12getTestCountEv>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	47a0      	blx	r4
    print(" tests, ");
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	332c      	adds	r3, #44	; 0x2c
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4948      	ldr	r1, [pc, #288]	; (800a1d8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1ec>)
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	4798      	blx	r3
    print(result.getRunCount());
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3334      	adds	r3, #52	; 0x34
 800a0c2:	681c      	ldr	r4, [r3, #0]
 800a0c4:	6838      	ldr	r0, [r7, #0]
 800a0c6:	f7f9 fda0 	bl	8003c0a <_ZNK10TestResult11getRunCountEv>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	47a0      	blx	r4
    print(" ran, ");
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	332c      	adds	r3, #44	; 0x2c
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4940      	ldr	r1, [pc, #256]	; (800a1dc <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f0>)
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	4798      	blx	r3
    print(result.getCheckCount());
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3334      	adds	r3, #52	; 0x34
 800a0e6:	681c      	ldr	r4, [r3, #0]
 800a0e8:	6838      	ldr	r0, [r7, #0]
 800a0ea:	f7fa f9fb 	bl	80044e4 <_ZNK10TestResult13getCheckCountEv>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	47a0      	blx	r4
    print(" checks, ");
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	332c      	adds	r3, #44	; 0x2c
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4938      	ldr	r1, [pc, #224]	; (800a1e0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f4>)
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	4798      	blx	r3
    print(result.getIgnoredCount());
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3334      	adds	r3, #52	; 0x34
 800a10a:	681c      	ldr	r4, [r3, #0]
 800a10c:	6838      	ldr	r0, [r7, #0]
 800a10e:	f7f9 fd88 	bl	8003c22 <_ZNK10TestResult15getIgnoredCountEv>
 800a112:	4603      	mov	r3, r0
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	47a0      	blx	r4
    print(" ignored, ");
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	332c      	adds	r3, #44	; 0x2c
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	4930      	ldr	r1, [pc, #192]	; (800a1e4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1f8>)
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	4798      	blx	r3
    print(result.getFilteredOutCount());
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3334      	adds	r3, #52	; 0x34
 800a12e:	681c      	ldr	r4, [r3, #0]
 800a130:	6838      	ldr	r0, [r7, #0]
 800a132:	f7ff fd95 	bl	8009c60 <_ZNK10TestResult19getFilteredOutCountEv>
 800a136:	4603      	mov	r3, r0
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	47a0      	blx	r4
    print(" filtered out, ");
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	332c      	adds	r3, #44	; 0x2c
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4928      	ldr	r1, [pc, #160]	; (800a1e8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1fc>)
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	4798      	blx	r3
    print(result.getTotalExecutionTime());
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	3334      	adds	r3, #52	; 0x34
 800a152:	681c      	ldr	r4, [r3, #0]
 800a154:	6838      	ldr	r0, [r7, #0]
 800a156:	f001 ff05 	bl	800bf64 <_ZNK10TestResult21getTotalExecutionTimeEv>
 800a15a:	4603      	mov	r3, r0
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	47a0      	blx	r4
    print(" ms)");
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	332c      	adds	r3, #44	; 0x2c
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4920      	ldr	r1, [pc, #128]	; (800a1ec <_ZN10TestOutput15printTestsEndedERK10TestResult+0x200>)
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	4798      	blx	r3
    if (color_) {
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7a5b      	ldrb	r3, [r3, #9]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d006      	beq.n	800a186 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x19a>
        print("\033[m");
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	332c      	adds	r3, #44	; 0x2c
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	491b      	ldr	r1, [pc, #108]	; (800a1f0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x204>)
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	4798      	blx	r3
    }
    if (isFailure && failureCount == 0) {
 800a186:	7bfb      	ldrb	r3, [r7, #15]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d009      	beq.n	800a1a0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d106      	bne.n	800a1a0 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x1b4>
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
              "This often happens because of linking errors or typos in test filter.");
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	332c      	adds	r3, #44	; 0x2c
 800a198:	681b      	ldr	r3, [r3, #0]
        print("\nNote: test run failed because no tests were run or ignored. Assuming something went wrong. "
 800a19a:	4916      	ldr	r1, [pc, #88]	; (800a1f4 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x208>)
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
    }
    print("\n\n");
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	332c      	adds	r3, #44	; 0x2c
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4913      	ldr	r1, [pc, #76]	; (800a1f8 <_ZN10TestOutput15printTestsEndedERK10TestResult+0x20c>)
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3

    dotCount_ = 0;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	605a      	str	r2, [r3, #4]
}
 800a1b4:	bf00      	nop
 800a1b6:	3714      	adds	r7, #20
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd90      	pop	{r4, r7, pc}
 800a1bc:	080152f0 	.word	0x080152f0
 800a1c0:	080152f4 	.word	0x080152f4
 800a1c4:	080152fc 	.word	0x080152fc
 800a1c8:	08015308 	.word	0x08015308
 800a1cc:	08015314 	.word	0x08015314
 800a1d0:	08015324 	.word	0x08015324
 800a1d4:	0801532c 	.word	0x0801532c
 800a1d8:	08015334 	.word	0x08015334
 800a1dc:	08015340 	.word	0x08015340
 800a1e0:	08015348 	.word	0x08015348
 800a1e4:	08015354 	.word	0x08015354
 800a1e8:	08015360 	.word	0x08015360
 800a1ec:	08015370 	.word	0x08015370
 800a1f0:	08015378 	.word	0x08015378
 800a1f4:	0801537c 	.word	0x0801537c
 800a1f8:	08015420 	.word	0x08015420

0800a1fc <_ZN10TestOutput12printTestRunEjj>:

void TestOutput::printTestRun(size_t number, size_t total)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
    if (total > 1) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d922      	bls.n	800a254 <_ZN10TestOutput12printTestRunEjj+0x58>
        print("Test run ");
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	332c      	adds	r3, #44	; 0x2c
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4911      	ldr	r1, [pc, #68]	; (800a25c <_ZN10TestOutput12printTestRunEjj+0x60>)
 800a218:	68f8      	ldr	r0, [r7, #12]
 800a21a:	4798      	blx	r3
        print(number);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	3334      	adds	r3, #52	; 0x34
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	4798      	blx	r3
        print(" of ");
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	332c      	adds	r3, #44	; 0x2c
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	490b      	ldr	r1, [pc, #44]	; (800a260 <_ZN10TestOutput12printTestRunEjj+0x64>)
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	4798      	blx	r3
        print(total);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	3334      	adds	r3, #52	; 0x34
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6879      	ldr	r1, [r7, #4]
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	4798      	blx	r3
        print("\n");
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	332c      	adds	r3, #44	; 0x2c
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4905      	ldr	r1, [pc, #20]	; (800a264 <_ZN10TestOutput12printTestRunEjj+0x68>)
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	4798      	blx	r3
    }
}
 800a254:	bf00      	nop
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	08015424 	.word	0x08015424
 800a260:	08015430 	.word	0x08015430
 800a264:	080152f0 	.word	0x080152f0

0800a268 <_ZN10TestOutput12printFailureERK11TestFailure>:

void TestOutput::printFailure(const TestFailure& failure)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
    if (failure.isOutsideTestFile() || failure.isInHelperFunction())
 800a272:	6838      	ldr	r0, [r7, #0]
 800a274:	f7fd ffa1 	bl	80081ba <_ZNK11TestFailure17isOutsideTestFileEv>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d105      	bne.n	800a28a <_ZN10TestOutput12printFailureERK11TestFailure+0x22>
 800a27e:	6838      	ldr	r0, [r7, #0]
 800a280:	f7fd ffad 	bl	80081de <_ZNK11TestFailure18isInHelperFunctionEv>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d001      	beq.n	800a28e <_ZN10TestOutput12printFailureERK11TestFailure+0x26>
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <_ZN10TestOutput12printFailureERK11TestFailure+0x28>
 800a28e:	2300      	movs	r3, #0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <_ZN10TestOutput12printFailureERK11TestFailure+0x36>
        printFileAndLineForTestAndFailure(failure);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f81d 	bl	800a2d6 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>
 800a29c:	e003      	b.n	800a2a6 <_ZN10TestOutput12printFailureERK11TestFailure+0x3e>
    else
        printFileAndLineForFailure(failure);
 800a29e:	6839      	ldr	r1, [r7, #0]
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f000 f86b 	bl	800a37c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>

    printFailureMessage(failure.getMessage());
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3318      	adds	r3, #24
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f107 0208 	add.w	r2, r7, #8
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	4610      	mov	r0, r2
 800a2b6:	4798      	blx	r3
 800a2b8:	f107 0308 	add.w	r3, r7, #8
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f8b2 	bl	800a428 <_ZN10TestOutput19printFailureMessageE12SimpleString>
 800a2c4:	f107 0308 	add.w	r3, r7, #8
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7fc fc82 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800a2ce:	bf00      	nop
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <_ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure>:

void TestOutput::printFileAndLineForTestAndFailure(const TestFailure& failure)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b088      	sub	sp, #32
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getTestFileName(), failure.getTestLineNumber());
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	331c      	adds	r3, #28
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f107 0208 	add.w	r2, r7, #8
 800a2ec:	6839      	ldr	r1, [r7, #0]
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	4798      	blx	r3
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	3320      	adds	r3, #32
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	6838      	ldr	r0, [r7, #0]
 800a2fc:	4798      	blx	r3
 800a2fe:	4602      	mov	r2, r0
 800a300:	f107 0308 	add.w	r3, r7, #8
 800a304:	4619      	mov	r1, r3
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f8be 	bl	800a488 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a30c:	f107 0308 	add.w	r3, r7, #8
 800a310:	4618      	mov	r0, r3
 800a312:	f7fc fc5e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	330c      	adds	r3, #12
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f107 0210 	add.w	r2, r7, #16
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	4610      	mov	r0, r2
 800a326:	4798      	blx	r3
 800a328:	f107 0310 	add.w	r3, r7, #16
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f85c 	bl	800a3ec <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800a334:	f107 0310 	add.w	r3, r7, #16
 800a338:	4618      	mov	r0, r3
 800a33a:	f7fc fc4a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	3308      	adds	r3, #8
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f107 0218 	add.w	r2, r7, #24
 800a34a:	6839      	ldr	r1, [r7, #0]
 800a34c:	4610      	mov	r0, r2
 800a34e:	4798      	blx	r3
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3314      	adds	r3, #20
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	6838      	ldr	r0, [r7, #0]
 800a35a:	4798      	blx	r3
 800a35c:	4602      	mov	r2, r0
 800a35e:	f107 0318 	add.w	r3, r7, #24
 800a362:	4619      	mov	r1, r3
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f88f 	bl	800a488 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a36a:	f107 0318 	add.w	r3, r7, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7fc fc2f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800a374:	bf00      	nop
 800a376:	3720      	adds	r7, #32
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <_ZN10TestOutput26printFileAndLineForFailureERK11TestFailure>:

void TestOutput::printFileAndLineForFailure(const TestFailure& failure)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    printErrorInFileOnLineFormattedForWorkingEnvironment(failure.getFileName(), failure.getFailureLineNumber());
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3308      	adds	r3, #8
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f107 0208 	add.w	r2, r7, #8
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	4610      	mov	r0, r2
 800a396:	4798      	blx	r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	3314      	adds	r3, #20
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6838      	ldr	r0, [r7, #0]
 800a3a2:	4798      	blx	r3
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f86b 	bl	800a488 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>
 800a3b2:	f107 0308 	add.w	r3, r7, #8
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fc fc0b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    printFailureInTest(failure.getTestName());
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	330c      	adds	r3, #12
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f107 0210 	add.w	r2, r7, #16
 800a3c8:	6839      	ldr	r1, [r7, #0]
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	4798      	blx	r3
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 f809 	bl	800a3ec <_ZN10TestOutput18printFailureInTestE12SimpleString>
 800a3da:	f107 0310 	add.w	r3, r7, #16
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fc fbf7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800a3e4:	bf00      	nop
 800a3e6:	3718      	adds	r7, #24
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <_ZN10TestOutput18printFailureInTestE12SimpleString>:

void TestOutput::printFailureInTest(SimpleString testName)
{
 800a3ec:	b590      	push	{r4, r7, lr}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	6039      	str	r1, [r7, #0]
    print(" Failure in ");
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	332c      	adds	r3, #44	; 0x2c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4909      	ldr	r1, [pc, #36]	; (800a424 <_ZN10TestOutput18printFailureInTestE12SimpleString+0x38>)
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
    print(testName.asCharString());
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	332c      	adds	r3, #44	; 0x2c
 800a40a:	681c      	ldr	r4, [r3, #0]
 800a40c:	6838      	ldr	r0, [r7, #0]
 800a40e:	f7fc fbb3 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800a412:	4603      	mov	r3, r0
 800a414:	4619      	mov	r1, r3
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	47a0      	blx	r4
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd90      	pop	{r4, r7, pc}
 800a422:	bf00      	nop
 800a424:	08015438 	.word	0x08015438

0800a428 <_ZN10TestOutput19printFailureMessageE12SimpleString>:

void TestOutput::printFailureMessage(SimpleString reason)
{
 800a428:	b590      	push	{r4, r7, lr}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
    print("\n");
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	332c      	adds	r3, #44	; 0x2c
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4910      	ldr	r1, [pc, #64]	; (800a47c <_ZN10TestOutput19printFailureMessageE12SimpleString+0x54>)
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	4798      	blx	r3
    print("\t");
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	332c      	adds	r3, #44	; 0x2c
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	490d      	ldr	r1, [pc, #52]	; (800a480 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x58>)
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
    print(reason.asCharString());
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	332c      	adds	r3, #44	; 0x2c
 800a454:	681c      	ldr	r4, [r3, #0]
 800a456:	6838      	ldr	r0, [r7, #0]
 800a458:	f7fc fb8e 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800a45c:	4603      	mov	r3, r0
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	47a0      	blx	r4
    print("\n\n");
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	332c      	adds	r3, #44	; 0x2c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4905      	ldr	r1, [pc, #20]	; (800a484 <_ZN10TestOutput19printFailureMessageE12SimpleString+0x5c>)
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
}
 800a472:	bf00      	nop
 800a474:	370c      	adds	r7, #12
 800a476:	46bd      	mov	sp, r7
 800a478:	bd90      	pop	{r4, r7, pc}
 800a47a:	bf00      	nop
 800a47c:	080152f0 	.word	0x080152f0
 800a480:	08015448 	.word	0x08015448
 800a484:	08015420 	.word	0x08015420

0800a488 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj>:

void TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString file, size_t lineNumber)
{
 800a488:	b590      	push	{r4, r7, lr}
 800a48a:	b089      	sub	sp, #36	; 0x24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
    if (TestOutput::getWorkingEnvironment() == TestOutput::visualStudio)
 800a494:	f7ff fbf0 	bl	8009c78 <_ZN10TestOutput21getWorkingEnvironmentEv>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bf0c      	ite	eq
 800a49e:	2301      	moveq	r3, #1
 800a4a0:	2300      	movne	r3, #0
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d015      	beq.n	800a4d4 <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x4c>
        printVisualStudioErrorInFileOnLine(file, lineNumber);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	3354      	adds	r3, #84	; 0x54
 800a4ae:	681c      	ldr	r4, [r3, #0]
 800a4b0:	f107 0310 	add.w	r3, r7, #16
 800a4b4:	68b9      	ldr	r1, [r7, #8]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fc f827 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800a4bc:	f107 0310 	add.w	r3, r7, #16
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	4619      	mov	r1, r3
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	47a0      	blx	r4
 800a4c8:	f107 0310 	add.w	r3, r7, #16
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fc fb80 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    else
        printEclipseErrorInFileOnLine(file, lineNumber);
}
 800a4d2:	e014      	b.n	800a4fe <_ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj+0x76>
        printEclipseErrorInFileOnLine(file, lineNumber);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3350      	adds	r3, #80	; 0x50
 800a4da:	681c      	ldr	r4, [r3, #0]
 800a4dc:	f107 0318 	add.w	r3, r7, #24
 800a4e0:	68b9      	ldr	r1, [r7, #8]
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7fc f811 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800a4e8:	f107 0318 	add.w	r3, r7, #24
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	47a0      	blx	r4
 800a4f4:	f107 0318 	add.w	r3, r7, #24
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7fc fb6a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800a4fe:	bf00      	nop
 800a500:	3724      	adds	r7, #36	; 0x24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd90      	pop	{r4, r7, pc}
	...

0800a508 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printEclipseErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b085      	sub	sp, #20
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
    print("\n");
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	332c      	adds	r3, #44	; 0x2c
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4916      	ldr	r1, [pc, #88]	; (800a578 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x70>)
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	4798      	blx	r3
    print(file.asCharString());
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	332c      	adds	r3, #44	; 0x2c
 800a528:	681c      	ldr	r4, [r3, #0]
 800a52a:	68b8      	ldr	r0, [r7, #8]
 800a52c:	f7fc fb24 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800a530:	4603      	mov	r3, r0
 800a532:	4619      	mov	r1, r3
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	47a0      	blx	r4
    print(":");
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	332c      	adds	r3, #44	; 0x2c
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	490e      	ldr	r1, [pc, #56]	; (800a57c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	4798      	blx	r3
    print(lineNumber);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	3334      	adds	r3, #52	; 0x34
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	6879      	ldr	r1, [r7, #4]
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	4798      	blx	r3
    print(":");
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	332c      	adds	r3, #44	; 0x2c
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4907      	ldr	r1, [pc, #28]	; (800a57c <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x74>)
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	4798      	blx	r3
    print(" error:");
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	332c      	adds	r3, #44	; 0x2c
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4905      	ldr	r1, [pc, #20]	; (800a580 <_ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj+0x78>)
 800a56c:	68f8      	ldr	r0, [r7, #12]
 800a56e:	4798      	blx	r3
}
 800a570:	bf00      	nop
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	bd90      	pop	{r4, r7, pc}
 800a578:	080152f0 	.word	0x080152f0
 800a57c:	0801544c 	.word	0x0801544c
 800a580:	08015450 	.word	0x08015450

0800a584 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj>:

void TestOutput::printVisualStudioErrorInFileOnLine(SimpleString file, size_t lineNumber)
{
 800a584:	b590      	push	{r4, r7, lr}
 800a586:	b085      	sub	sp, #20
 800a588:	af00      	add	r7, sp, #0
 800a58a:	60f8      	str	r0, [r7, #12]
 800a58c:	60b9      	str	r1, [r7, #8]
 800a58e:	607a      	str	r2, [r7, #4]
    print("\n");
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	332c      	adds	r3, #44	; 0x2c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4916      	ldr	r1, [pc, #88]	; (800a5f4 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x70>)
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	4798      	blx	r3
    print(file.asCharString());
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	332c      	adds	r3, #44	; 0x2c
 800a5a4:	681c      	ldr	r4, [r3, #0]
 800a5a6:	68b8      	ldr	r0, [r7, #8]
 800a5a8:	f7fc fae6 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	47a0      	blx	r4
    print("(");
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	332c      	adds	r3, #44	; 0x2c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	490e      	ldr	r1, [pc, #56]	; (800a5f8 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x74>)
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	4798      	blx	r3
    print(lineNumber);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	3334      	adds	r3, #52	; 0x34
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6879      	ldr	r1, [r7, #4]
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	4798      	blx	r3
    print("):");
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	332c      	adds	r3, #44	; 0x2c
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4908      	ldr	r1, [pc, #32]	; (800a5fc <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x78>)
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	4798      	blx	r3
    print(" error:");
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	332c      	adds	r3, #44	; 0x2c
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4906      	ldr	r1, [pc, #24]	; (800a600 <_ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj+0x7c>)
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	4798      	blx	r3
}
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd90      	pop	{r4, r7, pc}
 800a5f4:	080152f0 	.word	0x080152f0
 800a5f8:	08015458 	.word	0x08015458
 800a5fc:	0801545c 	.word	0x0801545c
 800a600:	08015450 	.word	0x08015450

0800a604 <_ZN10TestOutput16printVeryVerboseEPKc>:

void TestOutput::printVeryVerbose(const char* str)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
    if(verbose_ == level_veryVerbose)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	7a1b      	ldrb	r3, [r3, #8]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d106      	bne.n	800a624 <_ZN10TestOutput16printVeryVerboseEPKc+0x20>
        printBuffer(str);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3328      	adds	r3, #40	; 0x28
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <_ZN17ConsoleTestOutput11printBufferEPKc>:


void ConsoleTestOutput::printBuffer(const char* s)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
 800a634:	6039      	str	r1, [r7, #0]
    while (*s) {
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d009      	beq.n	800a652 <_ZN17ConsoleTestOutput11printBufferEPKc+0x26>
        PlatformSpecificPutchar(*s);
 800a63e:	4b0a      	ldr	r3, [pc, #40]	; (800a668 <_ZN17ConsoleTestOutput11printBufferEPKc+0x3c>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	4610      	mov	r0, r2
 800a648:	4798      	blx	r3
        s++;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	603b      	str	r3, [r7, #0]
    while (*s) {
 800a650:	e7f1      	b.n	800a636 <_ZN17ConsoleTestOutput11printBufferEPKc+0xa>
    }
    flush();
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	334c      	adds	r3, #76	; 0x4c
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
}
 800a65e:	bf00      	nop
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	200000bc 	.word	0x200000bc

0800a66c <_ZN17ConsoleTestOutput5flushEv>:

void ConsoleTestOutput::flush()
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
    PlatformSpecificFlush();
 800a674:	4b03      	ldr	r3, [pc, #12]	; (800a684 <_ZN17ConsoleTestOutput5flushEv+0x18>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4798      	blx	r3
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200000c0 	.word	0x200000c0

0800a688 <_ZN19CompositeTestOutputC1Ev>:

StringBufferTestOutput::~StringBufferTestOutput()
{
}

CompositeTestOutput::CompositeTestOutput()
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  : outputOne_(NULLPTR), outputTwo_(NULLPTR)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4618      	mov	r0, r3
 800a694:	f7ff fb00 	bl	8009c98 <_ZN10TestOutputC1Ev>
 800a698:	4a06      	ldr	r2, [pc, #24]	; (800a6b4 <_ZN19CompositeTestOutputC1Ev+0x2c>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	601a      	str	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	611a      	str	r2, [r3, #16]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	615a      	str	r2, [r3, #20]
{
}
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	08016a40 	.word	0x08016a40

0800a6b8 <_ZN19CompositeTestOutputD1Ev>:

CompositeTestOutput::~CompositeTestOutput()
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	4a0e      	ldr	r2, [pc, #56]	; (800a6fc <_ZN19CompositeTestOutputD1Ev+0x44>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	601a      	str	r2, [r3, #0]
{
  delete outputOne_;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d004      	beq.n	800a6d8 <_ZN19CompositeTestOutputD1Ev+0x20>
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	3204      	adds	r2, #4
 800a6d2:	6812      	ldr	r2, [r2, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	4790      	blx	r2
  delete outputTwo_;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d004      	beq.n	800a6ea <_ZN19CompositeTestOutputD1Ev+0x32>
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	3204      	adds	r2, #4
 800a6e4:	6812      	ldr	r2, [r2, #0]
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	4790      	blx	r2
CompositeTestOutput::~CompositeTestOutput()
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff faf1 	bl	8009cd4 <_ZN10TestOutputD1Ev>
}
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	08016a40 	.word	0x08016a40

0800a700 <_ZN19CompositeTestOutputD0Ev>:
CompositeTestOutput::~CompositeTestOutput()
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
}
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff ffd5 	bl	800a6b8 <_ZN19CompositeTestOutputD1Ev>
 800a70e:	2118      	movs	r1, #24
 800a710:	6878      	ldr	r0, [r7, #4]
 800a712:	f7fa ffd1 	bl	80056b8 <_ZdlPvj>
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	4618      	mov	r0, r3
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput>:

void CompositeTestOutput::setOutputOne(TestOutput* output)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  delete outputOne_;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d004      	beq.n	800a73c <_ZN19CompositeTestOutput12setOutputOneEP10TestOutput+0x1c>
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	3204      	adds	r2, #4
 800a736:	6812      	ldr	r2, [r2, #0]
 800a738:	4618      	mov	r0, r3
 800a73a:	4790      	blx	r2
  outputOne_ = output;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	683a      	ldr	r2, [r7, #0]
 800a740:	611a      	str	r2, [r3, #16]
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput>:

void CompositeTestOutput::setOutputTwo(TestOutput* output)
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b082      	sub	sp, #8
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  delete outputTwo_;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	695b      	ldr	r3, [r3, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <_ZN19CompositeTestOutput12setOutputTwoEP10TestOutput+0x1c>
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	3204      	adds	r2, #4
 800a760:	6812      	ldr	r2, [r2, #0]
 800a762:	4618      	mov	r0, r3
 800a764:	4790      	blx	r2
  outputTwo_ = output;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	615a      	str	r2, [r3, #20]
}
 800a76c:	bf00      	nop
 800a76e:	3708      	adds	r7, #8
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <_ZN19CompositeTestOutput17printTestsStartedEv>:

void CompositeTestOutput::printTestsStarted()
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->printTestsStarted();
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d008      	beq.n	800a796 <_ZN19CompositeTestOutput17printTestsStartedEv+0x22>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	691a      	ldr	r2, [r3, #16]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	3308      	adds	r3, #8
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4610      	mov	r0, r2
 800a794:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsStarted();
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d008      	beq.n	800a7b0 <_ZN19CompositeTestOutput17printTestsStartedEv+0x3c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	695a      	ldr	r2, [r3, #20]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	3308      	adds	r3, #8
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	4798      	blx	r3
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult>:

void CompositeTestOutput::printTestsEnded(const TestResult& result)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printTestsEnded(result);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d009      	beq.n	800a7de <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x26>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	691b      	ldr	r3, [r3, #16]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	330c      	adds	r3, #12
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6839      	ldr	r1, [r7, #0]
 800a7da:	4610      	mov	r0, r2
 800a7dc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printTestsEnded(result);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d009      	beq.n	800a7fa <_ZN19CompositeTestOutput15printTestsEndedERK10TestResult+0x42>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	695a      	ldr	r2, [r3, #20]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	330c      	adds	r3, #12
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	4798      	blx	r3
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentTestStarted(const UtestShell& test)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestStarted(test);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d009      	beq.n	800a828 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x26>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	691a      	ldr	r2, [r3, #16]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	3310      	adds	r3, #16
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	4610      	mov	r0, r2
 800a826:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestStarted(test);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <_ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell+0x42>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	695a      	ldr	r2, [r3, #20]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	695b      	ldr	r3, [r3, #20]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3310      	adds	r3, #16
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6839      	ldr	r1, [r7, #0]
 800a840:	4610      	mov	r0, r2
 800a842:	4798      	blx	r3
}
 800a844:	bf00      	nop
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult>:

void CompositeTestOutput::printCurrentTestEnded(const TestResult& res)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b082      	sub	sp, #8
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentTestEnded(res);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d009      	beq.n	800a872 <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x26>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	3314      	adds	r3, #20
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	6839      	ldr	r1, [r7, #0]
 800a86e:	4610      	mov	r0, r2
 800a870:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentTestEnded(res);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <_ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult+0x42>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	695a      	ldr	r2, [r3, #20]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	3314      	adds	r3, #20
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	6839      	ldr	r1, [r7, #0]
 800a88a:	4610      	mov	r0, r2
 800a88c:	4798      	blx	r3
}
 800a88e:	bf00      	nop
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}

0800a896 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell>:

void CompositeTestOutput::printCurrentGroupStarted(const UtestShell& test)
{
 800a896:	b580      	push	{r7, lr}
 800a898:	b082      	sub	sp, #8
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
 800a89e:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupStarted(test);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x26>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691a      	ldr	r2, [r3, #16]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	3318      	adds	r3, #24
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	6839      	ldr	r1, [r7, #0]
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupStarted(test);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d009      	beq.n	800a8d8 <_ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell+0x42>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	695a      	ldr	r2, [r3, #20]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3318      	adds	r3, #24
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	4798      	blx	r3
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult>:

void CompositeTestOutput::printCurrentGroupEnded(const TestResult& res)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printCurrentGroupEnded(res);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d009      	beq.n	800a906 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x26>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691a      	ldr	r2, [r3, #16]
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	331c      	adds	r3, #28
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	4610      	mov	r0, r2
 800a904:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printCurrentGroupEnded(res);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d009      	beq.n	800a922 <_ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult+0x42>
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	695b      	ldr	r3, [r3, #20]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	331c      	adds	r3, #28
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	4610      	mov	r0, r2
 800a920:	4798      	blx	r3
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE>:

void CompositeTestOutput::verbose(VerbosityLevel level)
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  if (outputOne_) outputOne_->verbose(level);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x28>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691a      	ldr	r2, [r3, #16]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	3320      	adds	r3, #32
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	78f9      	ldrb	r1, [r7, #3]
 800a94e:	4610      	mov	r0, r2
 800a950:	4798      	blx	r3
  if (outputTwo_) outputTwo_->verbose(level);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	695b      	ldr	r3, [r3, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d009      	beq.n	800a96e <_ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE+0x44>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	695a      	ldr	r2, [r3, #20]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	3320      	adds	r3, #32
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	78f9      	ldrb	r1, [r7, #3]
 800a96a:	4610      	mov	r0, r2
 800a96c:	4798      	blx	r3
}
 800a96e:	bf00      	nop
 800a970:	3708      	adds	r7, #8
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <_ZN19CompositeTestOutput5colorEv>:

void CompositeTestOutput::color()
{
 800a976:	b580      	push	{r7, lr}
 800a978:	b082      	sub	sp, #8
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->color();
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d008      	beq.n	800a998 <_ZN19CompositeTestOutput5colorEv+0x22>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	691a      	ldr	r2, [r3, #16]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3324      	adds	r3, #36	; 0x24
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4610      	mov	r0, r2
 800a996:	4798      	blx	r3
  if (outputTwo_) outputTwo_->color();
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d008      	beq.n	800a9b2 <_ZN19CompositeTestOutput5colorEv+0x3c>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	695a      	ldr	r2, [r3, #20]
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	695b      	ldr	r3, [r3, #20]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	3324      	adds	r3, #36	; 0x24
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	4610      	mov	r0, r2
 800a9b0:	4798      	blx	r3
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <_ZN19CompositeTestOutput11printBufferEPKc>:

void CompositeTestOutput::printBuffer(const char* buffer)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b082      	sub	sp, #8
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printBuffer(buffer);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d009      	beq.n	800a9e0 <_ZN19CompositeTestOutput11printBufferEPKc+0x26>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	3328      	adds	r3, #40	; 0x28
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	4610      	mov	r0, r2
 800a9de:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printBuffer(buffer);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	695b      	ldr	r3, [r3, #20]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <_ZN19CompositeTestOutput11printBufferEPKc+0x42>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695a      	ldr	r2, [r3, #20]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	695b      	ldr	r3, [r3, #20]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3328      	adds	r3, #40	; 0x28
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6839      	ldr	r1, [r7, #0]
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	4798      	blx	r3
}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <_ZN19CompositeTestOutput5printEPKc>:

void CompositeTestOutput::print(const char* buffer)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(buffer);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d009      	beq.n	800aa2a <_ZN19CompositeTestOutput5printEPKc+0x26>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	332c      	adds	r3, #44	; 0x2c
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6839      	ldr	r1, [r7, #0]
 800aa26:	4610      	mov	r0, r2
 800aa28:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(buffer);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <_ZN19CompositeTestOutput5printEPKc+0x42>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	695a      	ldr	r2, [r3, #20]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	695b      	ldr	r3, [r3, #20]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	332c      	adds	r3, #44	; 0x2c
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	4610      	mov	r0, r2
 800aa44:	4798      	blx	r3
}
 800aa46:	bf00      	nop
 800aa48:	3708      	adds	r7, #8
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <_ZN19CompositeTestOutput5printEl>:

void CompositeTestOutput::print(long number)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b082      	sub	sp, #8
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d009      	beq.n	800aa74 <_ZN19CompositeTestOutput5printEl+0x26>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	691a      	ldr	r2, [r3, #16]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	691b      	ldr	r3, [r3, #16]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3330      	adds	r3, #48	; 0x30
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	4610      	mov	r0, r2
 800aa72:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	695b      	ldr	r3, [r3, #20]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d009      	beq.n	800aa90 <_ZN19CompositeTestOutput5printEl+0x42>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	695a      	ldr	r2, [r3, #20]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	695b      	ldr	r3, [r3, #20]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3330      	adds	r3, #48	; 0x30
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	4610      	mov	r0, r2
 800aa8e:	4798      	blx	r3
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <_ZN19CompositeTestOutput5printEj>:

void CompositeTestOutput::print(size_t number)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->print(number);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	691b      	ldr	r3, [r3, #16]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d009      	beq.n	800aabe <_ZN19CompositeTestOutput5printEj+0x26>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691a      	ldr	r2, [r3, #16]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	691b      	ldr	r3, [r3, #16]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	3334      	adds	r3, #52	; 0x34
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	4610      	mov	r0, r2
 800aabc:	4798      	blx	r3
  if (outputTwo_) outputTwo_->print(number);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d009      	beq.n	800aada <_ZN19CompositeTestOutput5printEj+0x42>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	695a      	ldr	r2, [r3, #20]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	695b      	ldr	r3, [r3, #20]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3334      	adds	r3, #52	; 0x34
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6839      	ldr	r1, [r7, #0]
 800aad6:	4610      	mov	r0, r2
 800aad8:	4798      	blx	r3
}
 800aada:	bf00      	nop
 800aadc:	3708      	adds	r7, #8
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <_ZN19CompositeTestOutput11printDoubleEd>:

void CompositeTestOutput::printDouble(double number)
{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b084      	sub	sp, #16
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	ed87 0b00 	vstr	d0, [r7]
  if (outputOne_) outputOne_->printDouble(number);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	691b      	ldr	r3, [r3, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d00a      	beq.n	800ab0c <_ZN19CompositeTestOutput11printDoubleEd+0x2a>
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	691a      	ldr	r2, [r3, #16]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3338      	adds	r3, #56	; 0x38
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	ed97 0b00 	vldr	d0, [r7]
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printDouble(number);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	695b      	ldr	r3, [r3, #20]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00a      	beq.n	800ab2a <_ZN19CompositeTestOutput11printDoubleEd+0x48>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	695a      	ldr	r2, [r3, #20]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	3338      	adds	r3, #56	; 0x38
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	ed97 0b00 	vldr	d0, [r7]
 800ab26:	4610      	mov	r0, r2
 800ab28:	4798      	blx	r3
}
 800ab2a:	bf00      	nop
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <_ZN19CompositeTestOutput12printFailureERK11TestFailure>:

void CompositeTestOutput::printFailure(const TestFailure& failure)
{
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->printFailure(failure);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d009      	beq.n	800ab58 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x26>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	691a      	ldr	r2, [r3, #16]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	333c      	adds	r3, #60	; 0x3c
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6839      	ldr	r1, [r7, #0]
 800ab54:	4610      	mov	r0, r2
 800ab56:	4798      	blx	r3
  if (outputTwo_) outputTwo_->printFailure(failure);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	695b      	ldr	r3, [r3, #20]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <_ZN19CompositeTestOutput12printFailureERK11TestFailure+0x42>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	695a      	ldr	r2, [r3, #20]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	333c      	adds	r3, #60	; 0x3c
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <_ZN19CompositeTestOutput20setProgressIndicatorEPKc>:

void CompositeTestOutput::setProgressIndicator(const char* indicator)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  if (outputOne_) outputOne_->setProgressIndicator(indicator);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x26>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691a      	ldr	r2, [r3, #16]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	691b      	ldr	r3, [r3, #16]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3344      	adds	r3, #68	; 0x44
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	4610      	mov	r0, r2
 800aba0:	4798      	blx	r3
  if (outputTwo_) outputTwo_->setProgressIndicator(indicator);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d009      	beq.n	800abbe <_ZN19CompositeTestOutput20setProgressIndicatorEPKc+0x42>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	695a      	ldr	r2, [r3, #20]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695b      	ldr	r3, [r3, #20]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3344      	adds	r3, #68	; 0x44
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6839      	ldr	r1, [r7, #0]
 800abba:	4610      	mov	r0, r2
 800abbc:	4798      	blx	r3
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <_ZN19CompositeTestOutput5flushEv>:

void CompositeTestOutput::flush()
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b082      	sub	sp, #8
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
  if (outputOne_) outputOne_->flush();
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d008      	beq.n	800abe8 <_ZN19CompositeTestOutput5flushEv+0x22>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	334c      	adds	r3, #76	; 0x4c
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4610      	mov	r0, r2
 800abe6:	4798      	blx	r3
  if (outputTwo_) outputTwo_->flush();
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	695b      	ldr	r3, [r3, #20]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d008      	beq.n	800ac02 <_ZN19CompositeTestOutput5flushEv+0x3c>
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	695a      	ldr	r2, [r3, #20]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	695b      	ldr	r3, [r3, #20]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	334c      	adds	r3, #76	; 0x4c
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4610      	mov	r0, r2
 800ac00:	4798      	blx	r3
}
 800ac02:	bf00      	nop
 800ac04:	3708      	adds	r7, #8
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <_ZN10TestPlugin13preTestActionER10UtestShellR10TestResult>:
    virtual void preTestAction(UtestShell&, TestResult&)
 800ac0a:	b480      	push	{r7}
 800ac0c:	b085      	sub	sp, #20
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	60f8      	str	r0, [r7, #12]
 800ac12:	60b9      	str	r1, [r7, #8]
 800ac14:	607a      	str	r2, [r7, #4]
    }
 800ac16:	bf00      	nop
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <_ZN10TestPlugin14postTestActionER10UtestShellR10TestResult>:
    virtual void postTestAction(UtestShell&, TestResult&)
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	60f8      	str	r0, [r7, #12]
 800ac2a:	60b9      	str	r1, [r7, #8]
 800ac2c:	607a      	str	r2, [r7, #4]
    }
 800ac2e:	bf00      	nop
 800ac30:	3714      	adds	r7, #20
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
	...

0800ac3c <_ZN10TestPluginC1ERK12SimpleString>:
 */

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestPlugin.h"

TestPlugin::TestPlugin(const SimpleString& name) :
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
    next_(NullTestPlugin::instance()), name_(name), enabled_(true)
 800ac46:	4a0b      	ldr	r2, [pc, #44]	; (800ac74 <_ZN10TestPluginC1ERK12SimpleString+0x38>)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	f000 f9ce 	bl	800afec <_ZN14NullTestPlugin8instanceEv>
 800ac50:	4602      	mov	r2, r0
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	605a      	str	r2, [r3, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3308      	adds	r3, #8
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fb fc54 	bl	800650a <_ZN12SimpleStringC1ERKS_>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2201      	movs	r2, #1
 800ac66:	741a      	strb	r2, [r3, #16]
{
}
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3708      	adds	r7, #8
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	08016bfc 	.word	0x08016bfc

0800ac78 <_ZN10TestPluginC1EPS_>:

TestPlugin::TestPlugin(TestPlugin* next) :
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b082      	sub	sp, #8
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
    next_(next), name_("null"), enabled_(true)
 800ac82:	4a0a      	ldr	r2, [pc, #40]	; (800acac <_ZN10TestPluginC1EPS_+0x34>)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	601a      	str	r2, [r3, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	605a      	str	r2, [r3, #4]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3308      	adds	r3, #8
 800ac92:	4907      	ldr	r1, [pc, #28]	; (800acb0 <_ZN10TestPluginC1EPS_+0x38>)
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7fb fbe4 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	741a      	strb	r2, [r3, #16]
{
}
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	4618      	mov	r0, r3
 800aca4:	3708      	adds	r7, #8
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	08016bfc 	.word	0x08016bfc
 800acb0:	08015460 	.word	0x08015460

0800acb4 <_ZN10TestPluginD1Ev>:

TestPlugin::~TestPlugin()
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	4a06      	ldr	r2, [pc, #24]	; (800acd8 <_ZN10TestPluginD1Ev+0x24>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3308      	adds	r3, #8
 800acc6:	4618      	mov	r0, r3
 800acc8:	f7fb ff83 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
{
}
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4618      	mov	r0, r3
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08016bfc 	.word	0x08016bfc

0800acdc <_ZN10TestPluginD0Ev>:
TestPlugin::~TestPlugin()
 800acdc:	b580      	push	{r7, lr}
 800acde:	b082      	sub	sp, #8
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
}
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f7ff ffe5 	bl	800acb4 <_ZN10TestPluginD1Ev>
 800acea:	2114      	movs	r1, #20
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7fa fce3 	bl	80056b8 <_ZdlPvj>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4618      	mov	r0, r3
 800acf6:	3708      	adds	r7, #8
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <_ZN10TestPlugin9addPluginEPS_>:

TestPlugin* TestPlugin::addPlugin(TestPlugin* plugin)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
    next_ = plugin;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	683a      	ldr	r2, [r7, #0]
 800ad0a:	605a      	str	r2, [r3, #4]
    return this;
 800ad0c:	687b      	ldr	r3, [r7, #4]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPreTestAction(UtestShell& test, TestResult& result)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	60f8      	str	r0, [r7, #12]
 800ad22:	60b9      	str	r1, [r7, #8]
 800ad24:	607a      	str	r2, [r7, #4]
    if (enabled_) preTestAction(test, result);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	7c1b      	ldrb	r3, [r3, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d007      	beq.n	800ad3e <_ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult+0x24>
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	3308      	adds	r3, #8
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	68f8      	ldr	r0, [r7, #12]
 800ad3c:	4798      	blx	r3
    next_->runAllPreTestAction(test, result);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6858      	ldr	r0, [r3, #4]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	3314      	adds	r3, #20
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	68b9      	ldr	r1, [r7, #8]
 800ad50:	4798      	blx	r3
}
 800ad52:	bf00      	nop
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void TestPlugin::runAllPostTestAction(UtestShell& test, TestResult& result)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
    next_ ->runAllPostTestAction(test, result);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6858      	ldr	r0, [r3, #4]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	3318      	adds	r3, #24
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	68b9      	ldr	r1, [r7, #8]
 800ad78:	4798      	blx	r3
    if (enabled_) postTestAction(test, result);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	7c1b      	ldrb	r3, [r3, #16]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d007      	beq.n	800ad92 <_ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult+0x38>
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	330c      	adds	r3, #12
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	68b9      	ldr	r1, [r7, #8]
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	4798      	blx	r3
}
 800ad92:	bf00      	nop
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <_ZN10TestPlugin17parseAllArgumentsEiPPci>:

bool TestPlugin::parseAllArguments(int ac, char** av, int index)
{
 800ad9a:	b590      	push	{r4, r7, lr}
 800ad9c:	b085      	sub	sp, #20
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	607a      	str	r2, [r7, #4]
 800ada6:	603b      	str	r3, [r7, #0]
    return parseAllArguments(ac, const_cast<const char *const *> (av), index);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	331c      	adds	r3, #28
 800adae:	681c      	ldr	r4, [r3, #0]
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	68b9      	ldr	r1, [r7, #8]
 800adb6:	68f8      	ldr	r0, [r7, #12]
 800adb8:	47a0      	blx	r4
 800adba:	4603      	mov	r3, r0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3714      	adds	r7, #20
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd90      	pop	{r4, r7, pc}

0800adc4 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci>:

bool TestPlugin::parseAllArguments(int ac, const char *const *av, int index)
{
 800adc4:	b590      	push	{r4, r7, lr}
 800adc6:	b085      	sub	sp, #20
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
    if (parseArguments(ac, av, index)) return true;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3310      	adds	r3, #16
 800add8:	681c      	ldr	r4, [r3, #0]
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	68b9      	ldr	r1, [r7, #8]
 800ade0:	68f8      	ldr	r0, [r7, #12]
 800ade2:	47a0      	blx	r4
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x2a>
 800adea:	2301      	movs	r3, #1
 800adec:	e011      	b.n	800ae12 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    if (next_) return next_->parseAllArguments(ac, av, index);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d00c      	beq.n	800ae10 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4c>
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6858      	ldr	r0, [r3, #4]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	331c      	adds	r3, #28
 800ae02:	681c      	ldr	r4, [r3, #0]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68b9      	ldr	r1, [r7, #8]
 800ae0a:	47a0      	blx	r4
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	e000      	b.n	800ae12 <_ZN10TestPlugin17parseAllArgumentsEiPKPKci+0x4e>
    return false;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd90      	pop	{r4, r7, pc}

0800ae1a <_ZN10TestPlugin7getNameEv>:

const SimpleString& TestPlugin::getName()
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
    return name_;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	3308      	adds	r3, #8
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	370c      	adds	r7, #12
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>:

TestPlugin* TestPlugin::getPluginByName(const SimpleString& name)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
    if (name == name_) return this;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3308      	adds	r3, #8
 800ae40:	4619      	mov	r1, r3
 800ae42:	6838      	ldr	r0, [r7, #0]
 800ae44:	f7fb fed1 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d001      	beq.n	800ae52 <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x20>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	e00d      	b.n	800ae6e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    if (next_) return next_->getPluginByName(name);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d007      	beq.n	800ae6a <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x38>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7ff ffe6 	bl	800ae32 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800ae66:	4603      	mov	r3, r0
 800ae68:	e001      	b.n	800ae6e <_ZN10TestPlugin15getPluginByNameERK12SimpleString+0x3c>
    return (next_);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <_ZN10TestPlugin7getNextEv>:

TestPlugin* TestPlugin::getNext()
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
    return next_;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <_ZN10TestPlugin18removePluginByNameERK12SimpleString>:
TestPlugin* TestPlugin::removePluginByName(const SimpleString& name)
{
 800ae8e:	b580      	push	{r7, lr}
 800ae90:	b084      	sub	sp, #16
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
 800ae96:	6039      	str	r1, [r7, #0]
    TestPlugin* removed = NULLPTR;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	60fb      	str	r3, [r7, #12]
    if (next_ && next_->getName() == name) {
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d00e      	beq.n	800aec2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff ffb6 	bl	800ae1a <_ZN10TestPlugin7getNameEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fb fe99 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x34>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e000      	b.n	800aec4 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x36>
 800aec2:	2300      	movs	r3, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d007      	beq.n	800aed8 <_ZN10TestPlugin18removePluginByNameERK12SimpleString+0x4a>
        removed = next_;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	60fb      	str	r3, [r7, #12]
        next_ = next_->next_;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	685a      	ldr	r2, [r3, #4]
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	605a      	str	r2, [r3, #4]
    }
    return removed;
 800aed8:	68fb      	ldr	r3, [r7, #12]
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <_ZN10TestPlugin7disableEv>:

void TestPlugin::disable()
{
 800aee2:	b480      	push	{r7}
 800aee4:	b083      	sub	sp, #12
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
    enabled_ = false;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	741a      	strb	r2, [r3, #16]
}
 800aef0:	bf00      	nop
 800aef2:	370c      	adds	r7, #12
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <_ZN10TestPlugin6enableEv>:

void TestPlugin::enable()
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
    enabled_ = true;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	741a      	strb	r2, [r3, #16]
}
 800af0a:	bf00      	nop
 800af0c:	370c      	adds	r7, #12
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr

0800af16 <_ZN10TestPlugin9isEnabledEv>:

bool TestPlugin::isEnabled()
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
    return enabled_;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	7c1b      	ldrb	r3, [r3, #16]
}
 800af22:	4618      	mov	r0, r3
 800af24:	370c      	adds	r7, #12
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr
	...

0800af30 <_ZN16SetPointerPluginC1ERK12SimpleString>:
//////// SetPlugin

static int pointerTableIndex;
static cpputest_pair setlist[SetPointerPlugin::MAX_SET];

SetPointerPlugin::SetPointerPlugin(const SimpleString& name) :
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
    TestPlugin(name)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	4618      	mov	r0, r3
 800af40:	f7ff fe7c 	bl	800ac3c <_ZN10TestPluginC1ERK12SimpleString>
 800af44:	4a05      	ldr	r2, [pc, #20]	; (800af5c <_ZN16SetPointerPluginC1ERK12SimpleString+0x2c>)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	601a      	str	r2, [r3, #0]
{
    pointerTableIndex = 0;
 800af4a:	4b05      	ldr	r3, [pc, #20]	; (800af60 <_ZN16SetPointerPluginC1ERK12SimpleString+0x30>)
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4618      	mov	r0, r3
 800af54:	3708      	adds	r7, #8
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	08016bb8 	.word	0x08016bb8
 800af60:	200004f8 	.word	0x200004f8

0800af64 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult>:
    setlist[pointerTableIndex].orig = function;
    pointerTableIndex++;
}

void SetPointerPlugin::postTestAction(UtestShell& /*test*/, TestResult& /*result*/)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800af70:	4b0e      	ldr	r3, [pc, #56]	; (800afac <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	3b01      	subs	r3, #1
 800af76:	617b      	str	r3, [r7, #20]
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	db0d      	blt.n	800af9a <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x36>
        *((void**) setlist[i].orig) = setlist[i].orig_value;
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800af86:	490a      	ldr	r1, [pc, #40]	; (800afb0 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x4c>)
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	00db      	lsls	r3, r3, #3
 800af8c:	440b      	add	r3, r1
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	6013      	str	r3, [r2, #0]
    for (int i = pointerTableIndex - 1; i >= 0; i--)
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	3b01      	subs	r3, #1
 800af96:	617b      	str	r3, [r7, #20]
 800af98:	e7ee      	b.n	800af78 <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x14>
    pointerTableIndex = 0;
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <_ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult+0x48>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	601a      	str	r2, [r3, #0]
}
 800afa0:	bf00      	nop
 800afa2:	371c      	adds	r7, #28
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	200004f8 	.word	0x200004f8
 800afb0:	200004fc 	.word	0x200004fc

0800afb4 <_ZN14NullTestPluginC1Ev>:

//////// NullPlugin

NullTestPlugin::NullTestPlugin() :
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
    TestPlugin(NULLPTR)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fe59 	bl	800ac78 <_ZN10TestPluginC1EPS_>
 800afc6:	4a04      	ldr	r2, [pc, #16]	; (800afd8 <_ZN14NullTestPluginC1Ev+0x24>)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	601a      	str	r2, [r3, #0]
{
}
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
 800afd6:	bf00      	nop
 800afd8:	08016b74 	.word	0x08016b74

0800afdc <__tcf_0>:

NullTestPlugin* NullTestPlugin::instance()
{
    static NullTestPlugin _instance;
 800afdc:	b580      	push	{r7, lr}
 800afde:	af00      	add	r7, sp, #0
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__tcf_0+0xc>)
 800afe2:	f000 f849 	bl	800b078 <_ZN14NullTestPluginD1Ev>
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	200005fc 	.word	0x200005fc

0800afec <_ZN14NullTestPlugin8instanceEv>:
{
 800afec:	b580      	push	{r7, lr}
 800afee:	af00      	add	r7, sp, #0
    static NullTestPlugin _instance;
 800aff0:	4b12      	ldr	r3, [pc, #72]	; (800b03c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f3bf 8f5b 	dmb	ish
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	bf0c      	ite	eq
 800b002:	2301      	moveq	r3, #1
 800b004:	2300      	movne	r3, #0
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d013      	beq.n	800b034 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b00c:	480b      	ldr	r0, [pc, #44]	; (800b03c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b00e:	f005 fe11 	bl	8010c34 <__cxa_guard_acquire>
 800b012:	4603      	mov	r3, r0
 800b014:	2b00      	cmp	r3, #0
 800b016:	bf14      	ite	ne
 800b018:	2301      	movne	r3, #1
 800b01a:	2300      	moveq	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d008      	beq.n	800b034 <_ZN14NullTestPlugin8instanceEv+0x48>
 800b022:	4807      	ldr	r0, [pc, #28]	; (800b040 <_ZN14NullTestPlugin8instanceEv+0x54>)
 800b024:	f7ff ffc6 	bl	800afb4 <_ZN14NullTestPluginC1Ev>
 800b028:	4804      	ldr	r0, [pc, #16]	; (800b03c <_ZN14NullTestPlugin8instanceEv+0x50>)
 800b02a:	f005 fe0f 	bl	8010c4c <__cxa_guard_release>
 800b02e:	4805      	ldr	r0, [pc, #20]	; (800b044 <_ZN14NullTestPlugin8instanceEv+0x58>)
 800b030:	f005 fe33 	bl	8010c9a <atexit>
    return &_instance;
 800b034:	4b02      	ldr	r3, [pc, #8]	; (800b040 <_ZN14NullTestPlugin8instanceEv+0x54>)
}
 800b036:	4618      	mov	r0, r3
 800b038:	bd80      	pop	{r7, pc}
 800b03a:	bf00      	nop
 800b03c:	20000610 	.word	0x20000610
 800b040:	200005fc 	.word	0x200005fc
 800b044:	0800afdd 	.word	0x0800afdd

0800b048 <_ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
}
 800b054:	bf00      	nop
 800b056:	3714      	adds	r7, #20
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <_ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult>:

void NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
{
 800b060:	b480      	push	{r7}
 800b062:	b085      	sub	sp, #20
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
}
 800b06c:	bf00      	nop
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <_ZN14NullTestPluginD1Ev>:

#define UT_PTR_SET(a, b) do { CppUTestStore( (void**)&a ); a = b; } while(0)

///////////// Null Plugin

class NullTestPlugin: public TestPlugin
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	4a05      	ldr	r2, [pc, #20]	; (800b098 <_ZN14NullTestPluginD1Ev+0x20>)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	601a      	str	r2, [r3, #0]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fe13 	bl	800acb4 <_ZN10TestPluginD1Ev>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08016b74 	.word	0x08016b74

0800b09c <_ZN14NullTestPluginD0Ev>:
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f7ff ffe7 	bl	800b078 <_ZN14NullTestPluginD1Ev>
 800b0aa:	2114      	movs	r1, #20
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7fa fb03 	bl	80056b8 <_ZdlPvj>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3708      	adds	r7, #8
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <_ZN12TestRegistryC1Ev>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/TestRegistry.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestRegistry::TestRegistry() :
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
    tests_(NULLPTR), nameFilters_(NULLPTR), groupFilters_(NULLPTR), firstPlugin_(NullTestPlugin::instance()), runInSeperateProcess_(false), currentRepetition_(0), runIgnored_(false)
 800b0c4:	4a0f      	ldr	r2, [pc, #60]	; (800b104 <_ZN12TestRegistryC1Ev+0x48>)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	605a      	str	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	609a      	str	r2, [r3, #8]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	2200      	movs	r2, #0
 800b0da:	60da      	str	r2, [r3, #12]
 800b0dc:	f7ff ff86 	bl	800afec <_ZN14NullTestPlugin8instanceEv>
 800b0e0:	4602      	mov	r2, r0
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	611a      	str	r2, [r3, #16]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	751a      	strb	r2, [r3, #20]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	619a      	str	r2, [r3, #24]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	771a      	strb	r2, [r3, #28]
{
}
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3708      	adds	r7, #8
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	08016c40 	.word	0x08016c40

0800b108 <_ZN12TestRegistryD1Ev>:

TestRegistry::~TestRegistry()
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	4a04      	ldr	r2, [pc, #16]	; (800b124 <_ZN12TestRegistryD1Ev+0x1c>)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	601a      	str	r2, [r3, #0]
{
}
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	4618      	mov	r0, r3
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr
 800b124:	08016c40 	.word	0x08016c40

0800b128 <_ZN12TestRegistryD0Ev>:
TestRegistry::~TestRegistry()
 800b128:	b580      	push	{r7, lr}
 800b12a:	b082      	sub	sp, #8
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
}
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f7ff ffe9 	bl	800b108 <_ZN12TestRegistryD1Ev>
 800b136:	2120      	movs	r1, #32
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f7fa fabd 	bl	80056b8 <_ZdlPvj>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	4618      	mov	r0, r3
 800b142:	3708      	adds	r7, #8
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <_ZN12TestRegistry7addTestEP10UtestShell>:

void TestRegistry::addTest(UtestShell *test)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
    tests_ = test->addTest(tests_);
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3308      	adds	r3, #8
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6852      	ldr	r2, [r2, #4]
 800b15e:	4611      	mov	r1, r2
 800b160:	6838      	ldr	r0, [r7, #0]
 800b162:	4798      	blx	r3
 800b164:	4602      	mov	r2, r0
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	605a      	str	r2, [r3, #4]
}
 800b16a:	bf00      	nop
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}

0800b172 <_ZN12TestRegistry11runAllTestsER10TestResult>:

void TestRegistry::runAllTests(TestResult& result)
{
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	6039      	str	r1, [r7, #0]
    bool groupStart = true;
 800b17c:	2301      	movs	r3, #1
 800b17e:	73fb      	strb	r3, [r7, #15]

    result.testsStarted();
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	3308      	adds	r3, #8
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6838      	ldr	r0, [r7, #0]
 800b18a:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	60bb      	str	r3, [r7, #8]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d05c      	beq.n	800b252 <_ZN12TestRegistry11runAllTestsER10TestResult+0xe0>
        if (runInSeperateProcess_) test->setRunInSeperateProcess();
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	7d1b      	ldrb	r3, [r3, #20]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <_ZN12TestRegistry11runAllTestsER10TestResult+0x3a>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3380      	adds	r3, #128	; 0x80
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68b8      	ldr	r0, [r7, #8]
 800b1aa:	4798      	blx	r3
        if (runIgnored_) test->setRunIgnored();
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7f1b      	ldrb	r3, [r3, #28]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d005      	beq.n	800b1c0 <_ZN12TestRegistry11runAllTestsER10TestResult+0x4e>
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3384      	adds	r3, #132	; 0x84
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68b8      	ldr	r0, [r7, #8]
 800b1be:	4798      	blx	r3

        if (groupStart) {
 800b1c0:	7bfb      	ldrb	r3, [r7, #15]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <_ZN12TestRegistry11runAllTestsER10TestResult+0x66>
            result.currentGroupStarted(test);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3310      	adds	r3, #16
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	6838      	ldr	r0, [r7, #0]
 800b1d2:	4798      	blx	r3
            groupStart = false;
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	73fb      	strb	r3, [r7, #15]
        }

        result.countTest();
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3320      	adds	r3, #32
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6838      	ldr	r0, [r7, #0]
 800b1e2:	4798      	blx	r3
        if (testShouldRun(test, result)) {
 800b1e4:	683a      	ldr	r2, [r7, #0]
 800b1e6:	68b9      	ldr	r1, [r7, #8]
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fb79 	bl	800b8e0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d016      	beq.n	800b222 <_ZN12TestRegistry11runAllTestsER10TestResult+0xb0>
            result.currentTestStarted(test);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	3318      	adds	r3, #24
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68b9      	ldr	r1, [r7, #8]
 800b1fe:	6838      	ldr	r0, [r7, #0]
 800b200:	4798      	blx	r3
            test->runOneTest(firstPlugin_, result);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3390      	adds	r3, #144	; 0x90
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	6911      	ldr	r1, [r2, #16]
 800b20e:	683a      	ldr	r2, [r7, #0]
 800b210:	68b8      	ldr	r0, [r7, #8]
 800b212:	4798      	blx	r3
            result.currentTestEnded(test);
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	331c      	adds	r3, #28
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	6838      	ldr	r0, [r7, #0]
 800b220:	4798      	blx	r3
        }

        if (endOfGroup(test)) {
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fa5b 	bl	800b6e0 <_ZN12TestRegistry10endOfGroupEP10UtestShell>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d008      	beq.n	800b242 <_ZN12TestRegistry11runAllTestsER10TestResult+0xd0>
            groupStart = true;
 800b230:	2301      	movs	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
            result.currentGroupEnded(test);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3314      	adds	r3, #20
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	68b9      	ldr	r1, [r7, #8]
 800b23e:	6838      	ldr	r0, [r7, #0]
 800b240:	4798      	blx	r3
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	330c      	adds	r3, #12
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68b8      	ldr	r0, [r7, #8]
 800b24c:	4798      	blx	r3
 800b24e:	60b8      	str	r0, [r7, #8]
 800b250:	e79f      	b.n	800b192 <_ZN12TestRegistry11runAllTestsER10TestResult+0x20>
        }
    }
    result.testsEnded();
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	330c      	adds	r3, #12
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	6838      	ldr	r0, [r7, #0]
 800b25c:	4798      	blx	r3
    currentRepetition_++;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	699b      	ldr	r3, [r3, #24]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	619a      	str	r2, [r3, #24]
}
 800b268:	bf00      	nop
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <_ZN12TestRegistry18listTestGroupNamesER10TestResult>:

void TestRegistry::listTestGroupNames(TestResult& result)
{
 800b270:	b590      	push	{r4, r7, lr}
 800b272:	b08f      	sub	sp, #60	; 0x3c
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
    SimpleString groupList;
 800b27a:	f107 0314 	add.w	r3, r7, #20
 800b27e:	4953      	ldr	r1, [pc, #332]	; (800b3cc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b280:	4618      	mov	r0, r3
 800b282:	f7fb f8ee 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	637b      	str	r3, [r7, #52]	; 0x34
 800b28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d04d      	beq.n	800b32e <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xbe>
        SimpleString gname;
 800b292:	f107 030c 	add.w	r3, r7, #12
 800b296:	494d      	ldr	r1, [pc, #308]	; (800b3cc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fb f8e2 	bl	8006462 <_ZN12SimpleStringC1EPKc>
        gname += "#";
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	494b      	ldr	r1, [pc, #300]	; (800b3d0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fb fd23 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
        gname += test->getGroup();
 800b2aa:	f107 031c 	add.w	r3, r7, #28
 800b2ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f001 f9a6 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800b2b6:	f107 021c 	add.w	r2, r7, #28
 800b2ba:	f107 030c 	add.w	r3, r7, #12
 800b2be:	4611      	mov	r1, r2
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fb fd03 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b2c6:	f107 031c 	add.w	r3, r7, #28
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7fb fc81 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
        gname += "#";
 800b2d0:	f107 030c 	add.w	r3, r7, #12
 800b2d4:	493e      	ldr	r1, [pc, #248]	; (800b3d0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fb fd0a 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>

        if (!groupList.contains(gname)) {
 800b2dc:	f107 020c 	add.w	r2, r7, #12
 800b2e0:	f107 0314 	add.w	r3, r7, #20
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7fb f939 	bl	800655e <_ZNK12SimpleString8containsERKS_>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f083 0301 	eor.w	r3, r3, #1
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d00d      	beq.n	800b314 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0xa4>
            groupList += gname;
 800b2f8:	f107 020c 	add.w	r2, r7, #12
 800b2fc:	f107 0314 	add.w	r3, r7, #20
 800b300:	4611      	mov	r1, r2
 800b302:	4618      	mov	r0, r3
 800b304:	f7fb fce2 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
            groupList += " ";
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	4931      	ldr	r1, [pc, #196]	; (800b3d4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800b30e:	4618      	mov	r0, r3
 800b310:	f7fb fcee 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
        SimpleString gname;
 800b314:	f107 030c 	add.w	r3, r7, #12
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fb fc5a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b31e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	330c      	adds	r3, #12
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b328:	4798      	blx	r3
 800b32a:	6378      	str	r0, [r7, #52]	; 0x34
 800b32c:	e7ae      	b.n	800b28c <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x1c>
        }
    }

    groupList.replace("#", "");
 800b32e:	f107 0314 	add.w	r3, r7, #20
 800b332:	4a26      	ldr	r2, [pc, #152]	; (800b3cc <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x15c>)
 800b334:	4926      	ldr	r1, [pc, #152]	; (800b3d0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x160>)
 800b336:	4618      	mov	r0, r3
 800b338:	f7fb faa8 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupList.endsWith(" "))
 800b33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b340:	4924      	ldr	r1, [pc, #144]	; (800b3d4 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x164>)
 800b342:	4618      	mov	r0, r3
 800b344:	f7fb f88d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800b348:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b34c:	f107 0314 	add.w	r3, r7, #20
 800b350:	4611      	mov	r1, r2
 800b352:	4618      	mov	r0, r3
 800b354:	f7fb f982 	bl	800665c <_ZNK12SimpleString8endsWithERKS_>
 800b358:	4603      	mov	r3, r0
 800b35a:	461c      	mov	r4, r3
 800b35c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b360:	4618      	mov	r0, r3
 800b362:	f7fb fc36 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800b366:	2c00      	cmp	r4, #0
 800b368:	d01a      	beq.n	800b3a0 <_ZN12TestRegistry18listTestGroupNamesER10TestResult+0x130>
        groupList = groupList.subString(0, groupList.size() - 1);
 800b36a:	f107 0314 	add.w	r3, r7, #20
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fb fc0e 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800b374:	4603      	mov	r3, r0
 800b376:	3b01      	subs	r3, #1
 800b378:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800b37c:	f107 0114 	add.w	r1, r7, #20
 800b380:	2200      	movs	r2, #0
 800b382:	f7fb fd2f 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 800b386:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b38a:	f107 0314 	add.w	r3, r7, #20
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7fb f8d2 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800b396:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fb fc19 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    result.print(groupList.asCharString());
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3338      	adds	r3, #56	; 0x38
 800b3a6:	681c      	ldr	r4, [r3, #0]
 800b3a8:	f107 0314 	add.w	r3, r7, #20
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fb fbe3 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6838      	ldr	r0, [r7, #0]
 800b3b8:	47a0      	blx	r4
    SimpleString groupList;
 800b3ba:	f107 0314 	add.w	r3, r7, #20
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fb fc07 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800b3c4:	bf00      	nop
 800b3c6:	373c      	adds	r7, #60	; 0x3c
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd90      	pop	{r4, r7, pc}
 800b3cc:	080154b0 	.word	0x080154b0
 800b3d0:	080154b4 	.word	0x080154b4
 800b3d4:	080154b8 	.word	0x080154b8

0800b3d8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult>:

void TestRegistry::listTestGroupAndCaseNames(TestResult& result)
{
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b091      	sub	sp, #68	; 0x44
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
    SimpleString groupAndNameList;
 800b3e2:	f107 0314 	add.w	r3, r7, #20
 800b3e6:	4964      	ldr	r1, [pc, #400]	; (800b578 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fb f83a 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d06e      	beq.n	800b4d8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x100>
        if (testShouldRun(test, result)) {
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa6e 	bl	800b8e0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d05e      	beq.n	800b4c8 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xf0>
            SimpleString groupAndName;
 800b40a:	f107 030c 	add.w	r3, r7, #12
 800b40e:	495a      	ldr	r1, [pc, #360]	; (800b578 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b410:	4618      	mov	r0, r3
 800b412:	f7fb f826 	bl	8006462 <_ZN12SimpleStringC1EPKc>
            groupAndName += "#";
 800b416:	f107 030c 	add.w	r3, r7, #12
 800b41a:	4958      	ldr	r1, [pc, #352]	; (800b57c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fb fc67 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getGroup();
 800b422:	f107 031c 	add.w	r3, r7, #28
 800b426:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b428:	4618      	mov	r0, r3
 800b42a:	f001 f8ea 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800b42e:	f107 021c 	add.w	r2, r7, #28
 800b432:	f107 030c 	add.w	r3, r7, #12
 800b436:	4611      	mov	r1, r2
 800b438:	4618      	mov	r0, r3
 800b43a:	f7fb fc47 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b43e:	f107 031c 	add.w	r3, r7, #28
 800b442:	4618      	mov	r0, r3
 800b444:	f7fb fbc5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            groupAndName += ".";
 800b448:	f107 030c 	add.w	r3, r7, #12
 800b44c:	494c      	ldr	r1, [pc, #304]	; (800b580 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a8>)
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fb fc4e 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            groupAndName += test->getName();
 800b454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b458:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b45a:	4618      	mov	r0, r3
 800b45c:	f001 f8c2 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 800b460:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b464:	f107 030c 	add.w	r3, r7, #12
 800b468:	4611      	mov	r1, r2
 800b46a:	4618      	mov	r0, r3
 800b46c:	f7fb fc2e 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b474:	4618      	mov	r0, r3
 800b476:	f7fb fbac 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            groupAndName += "#";
 800b47a:	f107 030c 	add.w	r3, r7, #12
 800b47e:	493f      	ldr	r1, [pc, #252]	; (800b57c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b480:	4618      	mov	r0, r3
 800b482:	f7fb fc35 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>

            if (!groupAndNameList.contains(groupAndName)) {
 800b486:	f107 020c 	add.w	r2, r7, #12
 800b48a:	f107 0314 	add.w	r3, r7, #20
 800b48e:	4611      	mov	r1, r2
 800b490:	4618      	mov	r0, r3
 800b492:	f7fb f864 	bl	800655e <_ZNK12SimpleString8containsERKS_>
 800b496:	4603      	mov	r3, r0
 800b498:	f083 0301 	eor.w	r3, r3, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00d      	beq.n	800b4be <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0xe6>
                groupAndNameList += groupAndName;
 800b4a2:	f107 020c 	add.w	r2, r7, #12
 800b4a6:	f107 0314 	add.w	r3, r7, #20
 800b4aa:	4611      	mov	r1, r2
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fb fc0d 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
                groupAndNameList += " ";
 800b4b2:	f107 0314 	add.w	r3, r7, #20
 800b4b6:	4933      	ldr	r1, [pc, #204]	; (800b584 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fb fc19 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            SimpleString groupAndName;
 800b4be:	f107 030c 	add.w	r3, r7, #12
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7fb fb85 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b4d2:	4798      	blx	r3
 800b4d4:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b4d6:	e78d      	b.n	800b3f4 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1c>
            }
        }
    }

    groupAndNameList.replace("#", "");
 800b4d8:	f107 0314 	add.w	r3, r7, #20
 800b4dc:	4a26      	ldr	r2, [pc, #152]	; (800b578 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a0>)
 800b4de:	4927      	ldr	r1, [pc, #156]	; (800b57c <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1a4>)
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7fb f9d3 	bl	800688c <_ZN12SimpleString7replaceEPKcS1_>

    if (groupAndNameList.endsWith(" "))
 800b4e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b4ea:	4926      	ldr	r1, [pc, #152]	; (800b584 <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x1ac>)
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	f7fa ffb8 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800b4f2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b4f6:	f107 0314 	add.w	r3, r7, #20
 800b4fa:	4611      	mov	r1, r2
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fb f8ad 	bl	800665c <_ZNK12SimpleString8endsWithERKS_>
 800b502:	4603      	mov	r3, r0
 800b504:	461c      	mov	r4, r3
 800b506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fb fb61 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800b510:	2c00      	cmp	r4, #0
 800b512:	d01a      	beq.n	800b54a <_ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult+0x172>
        groupAndNameList = groupAndNameList.subString(0, groupAndNameList.size() - 1);
 800b514:	f107 0314 	add.w	r3, r7, #20
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fb fb39 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800b51e:	4603      	mov	r3, r0
 800b520:	3b01      	subs	r3, #1
 800b522:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800b526:	f107 0114 	add.w	r1, r7, #20
 800b52a:	2200      	movs	r2, #0
 800b52c:	f7fb fc5a 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 800b530:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fa fffd 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800b540:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b544:	4618      	mov	r0, r3
 800b546:	f7fb fb44 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    result.print(groupAndNameList.asCharString());
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3338      	adds	r3, #56	; 0x38
 800b550:	681c      	ldr	r4, [r3, #0]
 800b552:	f107 0314 	add.w	r3, r7, #20
 800b556:	4618      	mov	r0, r3
 800b558:	f7fb fb0e 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800b55c:	4603      	mov	r3, r0
 800b55e:	4619      	mov	r1, r3
 800b560:	6838      	ldr	r0, [r7, #0]
 800b562:	47a0      	blx	r4
    SimpleString groupAndNameList;
 800b564:	f107 0314 	add.w	r3, r7, #20
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fb fb32 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800b56e:	bf00      	nop
 800b570:	3744      	adds	r7, #68	; 0x44
 800b572:	46bd      	mov	sp, r7
 800b574:	bd90      	pop	{r4, r7, pc}
 800b576:	bf00      	nop
 800b578:	080154b0 	.word	0x080154b0
 800b57c:	080154b4 	.word	0x080154b4
 800b580:	080154bc 	.word	0x080154bc
 800b584:	080154b8 	.word	0x080154b8

0800b588 <_ZN12TestRegistry17listTestLocationsER10TestResult>:

void TestRegistry::listTestLocations(TestResult& result)
{
 800b588:	b590      	push	{r4, r7, lr}
 800b58a:	b091      	sub	sp, #68	; 0x44
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
    SimpleString testLocations;
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	494f      	ldr	r1, [pc, #316]	; (800b6d4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fa ff62 	bl	8006462 <_ZN12SimpleStringC1EPKc>

    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d07d      	beq.n	800b6a6 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x11e>
            SimpleString testLocation;
 800b5aa:	f107 030c 	add.w	r3, r7, #12
 800b5ae:	4949      	ldr	r1, [pc, #292]	; (800b6d4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x14c>)
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7fa ff56 	bl	8006462 <_ZN12SimpleStringC1EPKc>
            testLocation += test->getGroup();
 800b5b6:	f107 031c 	add.w	r3, r7, #28
 800b5ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f001 f820 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800b5c2:	f107 021c 	add.w	r2, r7, #28
 800b5c6:	f107 030c 	add.w	r3, r7, #12
 800b5ca:	4611      	mov	r1, r2
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7fb fb7d 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b5d2:	f107 031c 	add.w	r3, r7, #28
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fb fafb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	493d      	ldr	r1, [pc, #244]	; (800b6d8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fb fb84 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getName();
 800b5e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f000 fff8 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 800b5f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b5f8:	f107 030c 	add.w	r3, r7, #12
 800b5fc:	4611      	mov	r1, r2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fb fb64 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b608:	4618      	mov	r0, r3
 800b60a:	f7fb fae2 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800b60e:	f107 030c 	add.w	r3, r7, #12
 800b612:	4931      	ldr	r1, [pc, #196]	; (800b6d8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800b614:	4618      	mov	r0, r3
 800b616:	f7fb fb6b 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            testLocation += test->getFile();
 800b61a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b61e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b620:	4618      	mov	r0, r3
 800b622:	f001 f867 	bl	800c6f4 <_ZNK10UtestShell7getFileEv>
 800b626:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b62a:	f107 030c 	add.w	r3, r7, #12
 800b62e:	4611      	mov	r1, r2
 800b630:	4618      	mov	r0, r3
 800b632:	f7fb fb4b 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7fb fac9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
            testLocation += ".";
 800b640:	f107 030c 	add.w	r3, r7, #12
 800b644:	4924      	ldr	r1, [pc, #144]	; (800b6d8 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x150>)
 800b646:	4618      	mov	r0, r3
 800b648:	f7fb fb52 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
            testLocation += StringFromFormat("%d\n",(int) test->getLineNumber());
 800b64c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b64e:	f001 f860 	bl	800c712 <_ZNK10UtestShell13getLineNumberEv>
 800b652:	4603      	mov	r3, r0
 800b654:	461a      	mov	r2, r3
 800b656:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b65a:	4920      	ldr	r1, [pc, #128]	; (800b6dc <_ZN12TestRegistry17listTestLocationsER10TestResult+0x154>)
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fb ff45 	bl	80074ec <_Z16StringFromFormatPKcz>
 800b662:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800b666:	f107 030c 	add.w	r3, r7, #12
 800b66a:	4611      	mov	r1, r2
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fb fb2d 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800b672:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b676:	4618      	mov	r0, r3
 800b678:	f7fb faab 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

            testLocations += testLocation;
 800b67c:	f107 020c 	add.w	r2, r7, #12
 800b680:	f107 0314 	add.w	r3, r7, #20
 800b684:	4611      	mov	r1, r2
 800b686:	4618      	mov	r0, r3
 800b688:	f7fb fb20 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
            SimpleString testLocation;
 800b68c:	f107 030c 	add.w	r3, r7, #12
 800b690:	4618      	mov	r0, r3
 800b692:	f7fb fa9e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    for (UtestShell *test = tests_; test != NULLPTR; test = test->getNext()) {
 800b696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	330c      	adds	r3, #12
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b6a0:	4798      	blx	r3
 800b6a2:	63f8      	str	r0, [r7, #60]	; 0x3c
 800b6a4:	e77e      	b.n	800b5a4 <_ZN12TestRegistry17listTestLocationsER10TestResult+0x1c>
    }

    result.print(testLocations.asCharString());
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	3338      	adds	r3, #56	; 0x38
 800b6ac:	681c      	ldr	r4, [r3, #0]
 800b6ae:	f107 0314 	add.w	r3, r7, #20
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fb fa60 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6838      	ldr	r0, [r7, #0]
 800b6be:	47a0      	blx	r4
    SimpleString testLocations;
 800b6c0:	f107 0314 	add.w	r3, r7, #20
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fb fa84 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800b6ca:	bf00      	nop
 800b6cc:	3744      	adds	r7, #68	; 0x44
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd90      	pop	{r4, r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	080154b0 	.word	0x080154b0
 800b6d8:	080154bc 	.word	0x080154bc
 800b6dc:	080154c0 	.word	0x080154c0

0800b6e0 <_ZN12TestRegistry10endOfGroupEP10UtestShell>:

bool TestRegistry::endOfGroup(UtestShell* test)
{
 800b6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6e2:	b087      	sub	sp, #28
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
 800b6e8:	6039      	str	r1, [r7, #0]
    return (!test || !test->getNext() || test->getGroup() != test->getNext()->getGroup());
 800b6ea:	2400      	movs	r4, #0
 800b6ec:	2500      	movs	r5, #0
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d028      	beq.n	800b746 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	330c      	adds	r3, #12
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6838      	ldr	r0, [r7, #0]
 800b6fe:	4798      	blx	r3
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d01f      	beq.n	800b746 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x66>
 800b706:	f107 0308 	add.w	r3, r7, #8
 800b70a:	6839      	ldr	r1, [r7, #0]
 800b70c:	4618      	mov	r0, r3
 800b70e:	f000 ff78 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800b712:	2401      	movs	r4, #1
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	330c      	adds	r3, #12
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	6838      	ldr	r0, [r7, #0]
 800b71e:	4798      	blx	r3
 800b720:	4602      	mov	r2, r0
 800b722:	f107 0310 	add.w	r3, r7, #16
 800b726:	4611      	mov	r1, r2
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 ff6a 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800b72e:	2501      	movs	r5, #1
 800b730:	f107 0210 	add.w	r2, r7, #16
 800b734:	f107 0308 	add.w	r3, r7, #8
 800b738:	4611      	mov	r1, r2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fb fa9a 	bl	8006c74 <_ZneRK12SimpleStringS1_>
 800b740:	4603      	mov	r3, r0
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6a>
 800b746:	2601      	movs	r6, #1
 800b748:	e000      	b.n	800b74c <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x6c>
 800b74a:	2600      	movs	r6, #0
 800b74c:	2d00      	cmp	r5, #0
 800b74e:	d004      	beq.n	800b75a <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x7a>
 800b750:	f107 0310 	add.w	r3, r7, #16
 800b754:	4618      	mov	r0, r3
 800b756:	f7fb fa3c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800b75a:	2c00      	cmp	r4, #0
 800b75c:	d004      	beq.n	800b768 <_ZN12TestRegistry10endOfGroupEP10UtestShell+0x88>
 800b75e:	f107 0308 	add.w	r3, r7, #8
 800b762:	4618      	mov	r0, r3
 800b764:	f7fb fa35 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800b768:	4633      	mov	r3, r6
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	371c      	adds	r7, #28
 800b76e:	46bd      	mov	sp, r7
 800b770:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b772 <_ZN12TestRegistry10countTestsEv>:

size_t TestRegistry::countTests()
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
    return tests_ ? tests_->countTests() : 0;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00a      	beq.n	800b798 <_ZN12TestRegistry10countTestsEv+0x26>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	685a      	ldr	r2, [r3, #4]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	3310      	adds	r3, #16
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4610      	mov	r0, r2
 800b792:	4798      	blx	r3
 800b794:	4603      	mov	r3, r0
 800b796:	e000      	b.n	800b79a <_ZN12TestRegistry10countTestsEv+0x28>
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
	...

0800b7a4 <__tcf_0>:

TestRegistry* TestRegistry::currentRegistry_ = NULLPTR;

TestRegistry* TestRegistry::getCurrentRegistry()
{
    static TestRegistry registry;
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	4801      	ldr	r0, [pc, #4]	; (800b7b0 <__tcf_0+0xc>)
 800b7aa:	f7ff fcad 	bl	800b108 <_ZN12TestRegistryD1Ev>
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	20000618 	.word	0x20000618

0800b7b4 <_ZN12TestRegistry18getCurrentRegistryEv>:
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
    static TestRegistry registry;
 800b7b8:	4b15      	ldr	r3, [pc, #84]	; (800b810 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	f3bf 8f5b 	dmb	ish
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	bf0c      	ite	eq
 800b7ca:	2301      	moveq	r3, #1
 800b7cc:	2300      	movne	r3, #0
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d013      	beq.n	800b7fc <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800b7d4:	480e      	ldr	r0, [pc, #56]	; (800b810 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800b7d6:	f005 fa2d 	bl	8010c34 <__cxa_guard_acquire>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bf14      	ite	ne
 800b7e0:	2301      	movne	r3, #1
 800b7e2:	2300      	moveq	r3, #0
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d008      	beq.n	800b7fc <_ZN12TestRegistry18getCurrentRegistryEv+0x48>
 800b7ea:	480a      	ldr	r0, [pc, #40]	; (800b814 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
 800b7ec:	f7ff fc66 	bl	800b0bc <_ZN12TestRegistryC1Ev>
 800b7f0:	4807      	ldr	r0, [pc, #28]	; (800b810 <_ZN12TestRegistry18getCurrentRegistryEv+0x5c>)
 800b7f2:	f005 fa2b 	bl	8010c4c <__cxa_guard_release>
 800b7f6:	4808      	ldr	r0, [pc, #32]	; (800b818 <_ZN12TestRegistry18getCurrentRegistryEv+0x64>)
 800b7f8:	f005 fa4f 	bl	8010c9a <atexit>
    return (currentRegistry_ == NULLPTR) ? &registry : currentRegistry_;
 800b7fc:	4b07      	ldr	r3, [pc, #28]	; (800b81c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <_ZN12TestRegistry18getCurrentRegistryEv+0x56>
 800b804:	4b05      	ldr	r3, [pc, #20]	; (800b81c <_ZN12TestRegistry18getCurrentRegistryEv+0x68>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	e000      	b.n	800b80c <_ZN12TestRegistry18getCurrentRegistryEv+0x58>
 800b80a:	4b02      	ldr	r3, [pc, #8]	; (800b814 <_ZN12TestRegistry18getCurrentRegistryEv+0x60>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	bd80      	pop	{r7, pc}
 800b810:	20000638 	.word	0x20000638
 800b814:	20000618 	.word	0x20000618
 800b818:	0800b7a5 	.word	0x0800b7a5
 800b81c:	20000614 	.word	0x20000614

0800b820 <_ZN12TestRegistry18setCurrentRegistryEPS_>:

void TestRegistry::setCurrentRegistry(TestRegistry* registry)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
 800b828:	6039      	str	r1, [r7, #0]
    currentRegistry_ = registry;
 800b82a:	4a04      	ldr	r2, [pc, #16]	; (800b83c <_ZN12TestRegistry18setCurrentRegistryEPS_+0x1c>)
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	6013      	str	r3, [r2, #0]
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20000614 	.word	0x20000614

0800b840 <_ZN12TestRegistry15unDoLastAddTestEv>:

void TestRegistry::unDoLastAddTest()
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
    tests_ = tests_ ? tests_->getNext() : NULLPTR;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00a      	beq.n	800b866 <_ZN12TestRegistry15unDoLastAddTestEv+0x26>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	685a      	ldr	r2, [r3, #4]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	330c      	adds	r3, #12
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4610      	mov	r0, r2
 800b860:	4798      	blx	r3
 800b862:	4603      	mov	r3, r0
 800b864:	e000      	b.n	800b868 <_ZN12TestRegistry15unDoLastAddTestEv+0x28>
 800b866:	2300      	movs	r3, #0
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	6053      	str	r3, [r2, #4]

}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <_ZN12TestRegistry14setNameFiltersEPK10TestFilter>:

void TestRegistry::setNameFilters(const TestFilter* filters)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
    nameFilters_ = filters;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	609a      	str	r2, [r3, #8]
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <_ZN12TestRegistry15setGroupFiltersEPK10TestFilter>:

void TestRegistry::setGroupFilters(const TestFilter* filters)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
    groupFilters_ = filters;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	683a      	ldr	r2, [r7, #0]
 800b89e:	60da      	str	r2, [r3, #12]
}
 800b8a0:	bf00      	nop
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <_ZN12TestRegistry13setRunIgnoredEv>:

void TestRegistry::setRunIgnored()
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
    runIgnored_ = true;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2201      	movs	r2, #1
 800b8b8:	771a      	strb	r2, [r3, #28]
}
 800b8ba:	bf00      	nop
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <_ZN12TestRegistry28setRunTestsInSeperateProcessEv>:

void TestRegistry::setRunTestsInSeperateProcess()
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
    runInSeperateProcess_ = true;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	751a      	strb	r2, [r3, #20]
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult>:
{
    return currentRepetition_;
}

bool TestRegistry::testShouldRun(UtestShell* test, TestResult& result)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
    if (test->shouldRun(groupFilters_, nameFilters_)) return true;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	68d9      	ldr	r1, [r3, #12]
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	68b8      	ldr	r0, [r7, #8]
 800b8f8:	f000 ff46 	bl	800c788 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x26>
 800b902:	2301      	movs	r3, #1
 800b904:	e006      	b.n	800b914 <_ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult+0x34>
    else {
        result.countFilteredOut();
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	332c      	adds	r3, #44	; 0x2c
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
        return false;
 800b912:	2300      	movs	r3, #0
    }
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <_ZN12TestRegistry12resetPluginsEv>:

void TestRegistry::resetPlugins()
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
    firstPlugin_ = NullTestPlugin::instance();
 800b924:	f7ff fb62 	bl	800afec <_ZN14NullTestPlugin8instanceEv>
 800b928:	4602      	mov	r2, r0
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	611a      	str	r2, [r3, #16]
}
 800b92e:	bf00      	nop
 800b930:	3708      	adds	r7, #8
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <_ZN12TestRegistry13installPluginEP10TestPlugin>:

void TestRegistry::installPlugin(TestPlugin* plugin)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b082      	sub	sp, #8
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	6078      	str	r0, [r7, #4]
 800b93e:	6039      	str	r1, [r7, #0]
    firstPlugin_ = plugin->addPlugin(firstPlugin_);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	3324      	adds	r3, #36	; 0x24
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	6912      	ldr	r2, [r2, #16]
 800b94c:	4611      	mov	r1, r2
 800b94e:	6838      	ldr	r0, [r7, #0]
 800b950:	4798      	blx	r3
 800b952:	4602      	mov	r2, r0
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	611a      	str	r2, [r3, #16]
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <_ZN12TestRegistry14getFirstPluginEv>:

TestPlugin* TestRegistry::getFirstPlugin()
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
    return firstPlugin_;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	691b      	ldr	r3, [r3, #16]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	370c      	adds	r7, #12
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <_ZN12TestRegistry15getPluginByNameERK12SimpleString>:

TestPlugin* TestRegistry::getPluginByName(const SimpleString& name)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
 800b980:	6039      	str	r1, [r7, #0]
    return firstPlugin_->getPluginByName(name);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	6839      	ldr	r1, [r7, #0]
 800b988:	4618      	mov	r0, r3
 800b98a:	f7ff fa52 	bl	800ae32 <_ZN10TestPlugin15getPluginByNameERK12SimpleString>
 800b98e:	4603      	mov	r3, r0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <_ZN12TestRegistry18removePluginByNameERK12SimpleString>:

void TestRegistry::removePluginByName(const SimpleString& name)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
    if (firstPlugin_->removePluginByName(name) == firstPlugin_) firstPlugin_ = firstPlugin_->getNext();
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	691a      	ldr	r2, [r3, #16]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	691b      	ldr	r3, [r3, #16]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3328      	adds	r3, #40	; 0x28
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	4798      	blx	r3
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	bf0c      	ite	eq
 800b9c0:	2301      	moveq	r3, #1
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d00b      	beq.n	800b9e2 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x4a>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691a      	ldr	r2, [r3, #16]
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	332c      	adds	r3, #44	; 0x2c
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4610      	mov	r0, r2
 800b9da:	4798      	blx	r3
 800b9dc:	4602      	mov	r2, r0
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	611a      	str	r2, [r3, #16]
    if (firstPlugin_->getName() == name) firstPlugin_ = firstPlugin_->getNext();
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff fa17 	bl	800ae1a <_ZN10TestPlugin7getNameEv>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f7fb f8fa 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <_ZN12TestRegistry18removePluginByNameERK12SimpleString+0x7c>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	332c      	adds	r3, #44	; 0x2c
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4610      	mov	r0, r2
 800ba0c:	4798      	blx	r3
 800ba0e:	4602      	mov	r2, r0
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	611a      	str	r2, [r3, #16]
    firstPlugin_->removePluginByName(name);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	691a      	ldr	r2, [r3, #16]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	691b      	ldr	r3, [r3, #16]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	3328      	adds	r3, #40	; 0x28
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	4610      	mov	r0, r2
 800ba26:	4798      	blx	r3
}
 800ba28:	bf00      	nop
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <_ZN12TestRegistry12countPluginsEv>:

int TestRegistry::countPlugins()
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
    int count = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	60bb      	str	r3, [r7, #8]
 800ba42:	f7ff fad3 	bl	800afec <_ZN14NullTestPlugin8instanceEv>
 800ba46:	4602      	mov	r2, r0
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bf14      	ite	ne
 800ba4e:	2301      	movne	r3, #1
 800ba50:	2300      	moveq	r3, #0
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <_ZN12TestRegistry12countPluginsEv+0x3e>
        count++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
    for (TestPlugin* plugin = firstPlugin_; plugin != NullTestPlugin::instance(); plugin = plugin->getNext())
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	332c      	adds	r3, #44	; 0x2c
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68b8      	ldr	r0, [r7, #8]
 800ba68:	4798      	blx	r3
 800ba6a:	60b8      	str	r0, [r7, #8]
 800ba6c:	e7e9      	b.n	800ba42 <_ZN12TestRegistry12countPluginsEv+0x12>
    return count;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3710      	adds	r7, #16
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <_ZN12TestRegistry12getFirstTestEv>:


UtestShell* TestRegistry::getFirstTest()
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
    return tests_;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <_ZN12TestRegistry12shuffleTestsEj>:

void TestRegistry::shuffleTests(size_t seed)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b084      	sub	sp, #16
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
 800ba98:	6039      	str	r1, [r7, #0]
    UtestShellPointerArray array(getFirstTest());
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	334c      	adds	r3, #76	; 0x4c
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	4798      	blx	r3
 800baa6:	4602      	mov	r2, r0
 800baa8:	f107 0308 	add.w	r3, r7, #8
 800baac:	4611      	mov	r1, r2
 800baae:	4618      	mov	r0, r3
 800bab0:	f002 f882 	bl	800dbb8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.shuffle(seed);
 800bab4:	f107 0308 	add.w	r3, r7, #8
 800bab8:	6839      	ldr	r1, [r7, #0]
 800baba:	4618      	mov	r0, r3
 800babc:	f002 f90a 	bl	800dcd4 <_ZN22UtestShellPointerArray7shuffleEj>
    tests_ = array.getFirstTest();
 800bac0:	f107 0308 	add.w	r3, r7, #8
 800bac4:	4618      	mov	r0, r3
 800bac6:	f002 f99d 	bl	800de04 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800baca:	4602      	mov	r2, r0
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800bad0:	f107 0308 	add.w	r3, r7, #8
 800bad4:	4618      	mov	r0, r3
 800bad6:	f002 f8c3 	bl	800dc60 <_ZN22UtestShellPointerArrayD1Ev>
}
 800bada:	bf00      	nop
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <_ZN12TestRegistry12reverseTestsEv>:

void TestRegistry::reverseTests()
{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b084      	sub	sp, #16
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
    UtestShellPointerArray array(getFirstTest());
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	334c      	adds	r3, #76	; 0x4c
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
 800baf6:	4602      	mov	r2, r0
 800baf8:	f107 0308 	add.w	r3, r7, #8
 800bafc:	4611      	mov	r1, r2
 800bafe:	4618      	mov	r0, r3
 800bb00:	f002 f85a 	bl	800dbb8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>
    array.reverse();
 800bb04:	f107 0308 	add.w	r3, r7, #8
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f002 f91f 	bl	800dd4c <_ZN22UtestShellPointerArray7reverseEv>
    tests_ = array.getFirstTest();
 800bb0e:	f107 0308 	add.w	r3, r7, #8
 800bb12:	4618      	mov	r0, r3
 800bb14:	f002 f976 	bl	800de04 <_ZNK22UtestShellPointerArray12getFirstTestEv>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	605a      	str	r2, [r3, #4]
    UtestShellPointerArray array(getFirstTest());
 800bb1e:	f107 0308 	add.w	r3, r7, #8
 800bb22:	4618      	mov	r0, r3
 800bb24:	f002 f89c 	bl	800dc60 <_ZN22UtestShellPointerArrayD1Ev>
}
 800bb28:	bf00      	nop
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <_ZN12TestRegistry15getTestWithNextEP10UtestShell>:

UtestShell* TestRegistry::getTestWithNext(UtestShell* test)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	685b      	ldr	r3, [r3, #4]
 800bb3e:	60fb      	str	r3, [r7, #12]
    while (current && current->getNext() != test)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d00b      	beq.n	800bb5e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	4798      	blx	r3
 800bb52:	4602      	mov	r2, r0
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d001      	beq.n	800bb5e <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x2e>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e000      	b.n	800bb60 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x30>
 800bb5e:	2300      	movs	r3, #0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d007      	beq.n	800bb74 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x44>
        current = current->getNext();
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	330c      	adds	r3, #12
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	4798      	blx	r3
 800bb70:	60f8      	str	r0, [r7, #12]
    while (current && current->getNext() != test)
 800bb72:	e7e5      	b.n	800bb40 <_ZN12TestRegistry15getTestWithNextEP10UtestShell+0x10>
    return current;
 800bb74:	68fb      	ldr	r3, [r7, #12]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3710      	adds	r7, #16
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <_ZN12TestRegistry16findTestWithNameERK12SimpleString>:

UtestShell* TestRegistry::findTestWithName(const SimpleString& name)
{
 800bb7e:	b590      	push	{r4, r7, lr}
 800bb80:	b087      	sub	sp, #28
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
 800bb86:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	617b      	str	r3, [r7, #20]
    while (current) {
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01e      	beq.n	800bbd2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x54>
        if (current->getName() == name)
 800bb94:	f107 030c 	add.w	r3, r7, #12
 800bb98:	6979      	ldr	r1, [r7, #20]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 fd22 	bl	800c5e4 <_ZNK10UtestShell7getNameEv>
 800bba0:	f107 030c 	add.w	r3, r7, #12
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fb f81f 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461c      	mov	r4, r3
 800bbb0:	f107 030c 	add.w	r3, r7, #12
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fb f80c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800bbba:	2c00      	cmp	r4, #0
 800bbbc:	d001      	beq.n	800bbc2 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x44>
            return current;
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	e008      	b.n	800bbd4 <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x56>
        current = current->getNext();
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	330c      	adds	r3, #12
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	6978      	ldr	r0, [r7, #20]
 800bbcc:	4798      	blx	r3
 800bbce:	6178      	str	r0, [r7, #20]
    while (current) {
 800bbd0:	e7dd      	b.n	800bb8e <_ZN12TestRegistry16findTestWithNameERK12SimpleString+0x10>
    }
    return NULLPTR;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	371c      	adds	r7, #28
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd90      	pop	{r4, r7, pc}

0800bbdc <_ZN12TestRegistry17findTestWithGroupERK12SimpleString>:

UtestShell* TestRegistry::findTestWithGroup(const SimpleString& group)
{
 800bbdc:	b590      	push	{r4, r7, lr}
 800bbde:	b087      	sub	sp, #28
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	6039      	str	r1, [r7, #0]
    UtestShell* current = tests_;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	617b      	str	r3, [r7, #20]
    while (current) {
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d01e      	beq.n	800bc30 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x54>
        if (current->getGroup() == group)
 800bbf2:	f107 030c 	add.w	r3, r7, #12
 800bbf6:	6979      	ldr	r1, [r7, #20]
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f000 fd02 	bl	800c602 <_ZNK10UtestShell8getGroupEv>
 800bbfe:	f107 030c 	add.w	r3, r7, #12
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7fa fff0 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	461c      	mov	r4, r3
 800bc0e:	f107 030c 	add.w	r3, r7, #12
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fa ffdd 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800bc18:	2c00      	cmp	r4, #0
 800bc1a:	d001      	beq.n	800bc20 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x44>
            return current;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	e008      	b.n	800bc32 <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x56>
        current = current->getNext();
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	330c      	adds	r3, #12
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6978      	ldr	r0, [r7, #20]
 800bc2a:	4798      	blx	r3
 800bc2c:	6178      	str	r0, [r7, #20]
    while (current) {
 800bc2e:	e7dd      	b.n	800bbec <_ZN12TestRegistry17findTestWithGroupERK12SimpleString+0x10>
    }
    return NULLPTR;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	371c      	adds	r7, #28
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd90      	pop	{r4, r7, pc}
	...

0800bc3c <_ZN10TestResultC1ER10TestOutput>:
#include "CppUTest/TestResult.h"
#include "CppUTest/TestFailure.h"
#include "CppUTest/TestOutput.h"
#include "CppUTest/PlatformSpecificFunctions.h"

TestResult::TestResult(TestOutput& p) :
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
    output_(p), testCount_(0), runCount_(0), checkCount_(0), failureCount_(0), filteredOutCount_(0), ignoredCount_(0), totalExecutionTime_(0), timeStarted_(0), currentTestTimeStarted_(0),
            currentTestTotalExecutionTime_(0), currentGroupTimeStarted_(0), currentGroupTotalExecutionTime_(0)
 800bc46:	4a18      	ldr	r2, [pc, #96]	; (800bca8 <_ZN10TestResultC1ER10TestOutput+0x6c>)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	683a      	ldr	r2, [r7, #0]
 800bc50:	605a      	str	r2, [r3, #4]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	609a      	str	r2, [r3, #8]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	60da      	str	r2, [r3, #12]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	611a      	str	r2, [r3, #16]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2200      	movs	r2, #0
 800bc68:	615a      	str	r2, [r3, #20]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	619a      	str	r2, [r3, #24]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2200      	movs	r2, #0
 800bc74:	61da      	str	r2, [r3, #28]
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2200      	movs	r2, #0
 800bc7a:	621a      	str	r2, [r3, #32]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	625a      	str	r2, [r3, #36]	; 0x24
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	629a      	str	r2, [r3, #40]	; 0x28
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	631a      	str	r2, [r3, #48]	; 0x30
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	635a      	str	r2, [r3, #52]	; 0x34
{
}
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	08016cac 	.word	0x08016cac

0800bcac <_ZN10TestResultD1Ev>:

TestResult::~TestResult()
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	4a04      	ldr	r2, [pc, #16]	; (800bcc8 <_ZN10TestResultD1Ev+0x1c>)
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	601a      	str	r2, [r3, #0]
{
}
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	08016cac 	.word	0x08016cac

0800bccc <_ZN10TestResultD0Ev>:
TestResult::~TestResult()
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
}
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff ffe9 	bl	800bcac <_ZN10TestResultD1Ev>
 800bcda:	2138      	movs	r1, #56	; 0x38
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7f9 fceb 	bl	80056b8 <_ZdlPvj>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4618      	mov	r0, r3
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <_ZN10TestResult19currentGroupStartedEP10UtestShell>:

void TestResult::currentGroupStarted(UtestShell* test)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
    output_.printCurrentGroupStarted(*test);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	3318      	adds	r3, #24
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	4610      	mov	r0, r2
 800bd08:	4798      	blx	r3
    currentGroupTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800bd0a:	4b05      	ldr	r3, [pc, #20]	; (800bd20 <_ZN10TestResult19currentGroupStartedEP10UtestShell+0x34>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4798      	blx	r3
 800bd10:	4603      	mov	r3, r0
 800bd12:	461a      	mov	r2, r3
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	200000a4 	.word	0x200000a4

0800bd24 <_ZN10TestResult17currentGroupEndedEP10UtestShell>:

void TestResult::currentGroupEnded(UtestShell* /*test*/)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	6039      	str	r1, [r7, #0]
    currentGroupTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentGroupTimeStarted_;
 800bd2e:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <_ZN10TestResult17currentGroupEndedEP10UtestShell+0x3c>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4798      	blx	r3
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd3c:	1ad2      	subs	r2, r2, r3
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	635a      	str	r2, [r3, #52]	; 0x34
    output_.printCurrentGroupEnded(*this);
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685b      	ldr	r3, [r3, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	331c      	adds	r3, #28
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4610      	mov	r0, r2
 800bd54:	4798      	blx	r3
}
 800bd56:	bf00      	nop
 800bd58:	3708      	adds	r7, #8
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	200000a4 	.word	0x200000a4

0800bd64 <_ZN10TestResult18currentTestStartedEP10UtestShell>:

void TestResult::currentTestStarted(UtestShell* test)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
    output_.printCurrentTestStarted(*test);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	685a      	ldr	r2, [r3, #4]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3310      	adds	r3, #16
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	4610      	mov	r0, r2
 800bd80:	4798      	blx	r3
    currentTestTimeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800bd82:	4b05      	ldr	r3, [pc, #20]	; (800bd98 <_ZN10TestResult18currentTestStartedEP10UtestShell+0x34>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	4798      	blx	r3
 800bd88:	4603      	mov	r3, r0
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800bd90:	bf00      	nop
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	200000a4 	.word	0x200000a4

0800bd9c <_ZN10TestResult5printEPKc>:

void TestResult::print(const char* text)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b082      	sub	sp, #8
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
    output_.print(text);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	332c      	adds	r3, #44	; 0x2c
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	4798      	blx	r3
}
 800bdba:	bf00      	nop
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <_ZN10TestResult16printVeryVerboseEPKc>:

void TestResult::printVeryVerbose(const char* text)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b082      	sub	sp, #8
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
    output_.printVeryVerbose(text);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	685a      	ldr	r2, [r3, #4]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3348      	adds	r3, #72	; 0x48
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	6839      	ldr	r1, [r7, #0]
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
}
 800bde0:	bf00      	nop
 800bde2:	3708      	adds	r7, #8
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <_ZN10TestResult16currentTestEndedEP10UtestShell>:

void TestResult::currentTestEnded(UtestShell* /*test*/)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
    currentTestTotalExecutionTime_ = (size_t) GetPlatformSpecificTimeInMillis() - currentTestTimeStarted_;
 800bdf2:	4b0c      	ldr	r3, [pc, #48]	; (800be24 <_ZN10TestResult16currentTestEndedEP10UtestShell+0x3c>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4798      	blx	r3
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be00:	1ad2      	subs	r2, r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	62da      	str	r2, [r3, #44]	; 0x2c
    output_.printCurrentTestEnded(*this);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	685a      	ldr	r2, [r3, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	3314      	adds	r3, #20
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6879      	ldr	r1, [r7, #4]
 800be16:	4610      	mov	r0, r2
 800be18:	4798      	blx	r3

}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	200000a4 	.word	0x200000a4

0800be28 <_ZN10TestResult10addFailureERK11TestFailure>:

void TestResult::addFailure(const TestFailure& failure)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
    output_.printFailure(failure);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	333c      	adds	r3, #60	; 0x3c
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	4610      	mov	r0, r2
 800be44:	4798      	blx	r3
    failureCount_++;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	695b      	ldr	r3, [r3, #20]
 800be4a:	1c5a      	adds	r2, r3, #1
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	615a      	str	r2, [r3, #20]
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <_ZN10TestResult9countTestEv>:

void TestResult::countTest()
{
 800be58:	b480      	push	{r7}
 800be5a:	b083      	sub	sp, #12
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
    testCount_++;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	1c5a      	adds	r2, r3, #1
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	609a      	str	r2, [r3, #8]
}
 800be6a:	bf00      	nop
 800be6c:	370c      	adds	r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be74:	4770      	bx	lr

0800be76 <_ZN10TestResult8countRunEv>:

void TestResult::countRun()
{
 800be76:	b480      	push	{r7}
 800be78:	b083      	sub	sp, #12
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
    runCount_++;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	68db      	ldr	r3, [r3, #12]
 800be82:	1c5a      	adds	r2, r3, #1
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	60da      	str	r2, [r3, #12]
}
 800be88:	bf00      	nop
 800be8a:	370c      	adds	r7, #12
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr

0800be94 <_ZN10TestResult10countCheckEv>:

void TestResult::countCheck()
{
 800be94:	b480      	push	{r7}
 800be96:	b083      	sub	sp, #12
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
    checkCount_++;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	611a      	str	r2, [r3, #16]
}
 800bea6:	bf00      	nop
 800bea8:	370c      	adds	r7, #12
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <_ZN10TestResult16countFilteredOutEv>:

void TestResult::countFilteredOut()
{
 800beb2:	b480      	push	{r7}
 800beb4:	b083      	sub	sp, #12
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
    filteredOutCount_++;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	1c5a      	adds	r2, r3, #1
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	619a      	str	r2, [r3, #24]
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <_ZN10TestResult12countIgnoredEv>:

void TestResult::countIgnored()
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
    ignoredCount_++;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	1c5a      	adds	r2, r3, #1
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	61da      	str	r2, [r3, #28]
}
 800bee2:	bf00      	nop
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
	...

0800bef0 <_ZN10TestResult12testsStartedEv>:

void TestResult::testsStarted()
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
    timeStarted_ = (size_t) GetPlatformSpecificTimeInMillis();
 800bef8:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <_ZN10TestResult12testsStartedEv+0x30>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4798      	blx	r3
 800befe:	4603      	mov	r3, r0
 800bf00:	461a      	mov	r2, r3
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	625a      	str	r2, [r3, #36]	; 0x24
    output_.printTestsStarted();
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	685a      	ldr	r2, [r3, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	3308      	adds	r3, #8
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4610      	mov	r0, r2
 800bf16:	4798      	blx	r3
}
 800bf18:	bf00      	nop
 800bf1a:	3708      	adds	r7, #8
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	200000a4 	.word	0x200000a4

0800bf24 <_ZN10TestResult10testsEndedEv>:

void TestResult::testsEnded()
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
    size_t timeEnded = (size_t) GetPlatformSpecificTimeInMillis();
 800bf2c:	4b0c      	ldr	r3, [pc, #48]	; (800bf60 <_ZN10TestResult10testsEndedEv+0x3c>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4798      	blx	r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	60fb      	str	r3, [r7, #12]
    totalExecutionTime_ = timeEnded - timeStarted_;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	1ad2      	subs	r2, r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	621a      	str	r2, [r3, #32]
    output_.printTestsEnded(*this);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	685a      	ldr	r2, [r3, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	330c      	adds	r3, #12
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	4610      	mov	r0, r2
 800bf54:	4798      	blx	r3
}
 800bf56:	bf00      	nop
 800bf58:	3710      	adds	r7, #16
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	200000a4 	.word	0x200000a4

0800bf64 <_ZNK10TestResult21getTotalExecutionTimeEv>:

size_t TestResult::getTotalExecutionTime() const
{
 800bf64:	b480      	push	{r7}
 800bf66:	b083      	sub	sp, #12
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
    return totalExecutionTime_;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <_ZNK10TestResult32getCurrentTestTotalExecutionTimeEv>:
{
    totalExecutionTime_ = exTime;
}

size_t TestResult::getCurrentTestTotalExecutionTime() const
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
    return currentTestTotalExecutionTime_;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <_ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv>:

size_t TestResult::getCurrentGroupTotalExecutionTime() const
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
    return currentGroupTotalExecutionTime_;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <_Z13doubles_equalddd>:
#if defined(__GNUC__) && __GNUC__ >= 11
# define NEEDS_DISABLE_NULL_WARNING
#endif /* GCC >= 11 */

bool doubles_equal(double d1, double d2, double threshold)
{
 800bfac:	b590      	push	{r4, r7, lr}
 800bfae:	b087      	sub	sp, #28
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	ed87 0b04 	vstr	d0, [r7, #16]
 800bfb6:	ed87 1b02 	vstr	d1, [r7, #8]
 800bfba:	ed87 2b00 	vstr	d2, [r7]
    if (PlatformSpecificIsNan(d1) || PlatformSpecificIsNan(d2) || PlatformSpecificIsNan(threshold))
 800bfbe:	4b2c      	ldr	r3, [pc, #176]	; (800c070 <_Z13doubles_equalddd+0xc4>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	ed97 0b04 	vldr	d0, [r7, #16]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d10f      	bne.n	800bfee <_Z13doubles_equalddd+0x42>
 800bfce:	4b28      	ldr	r3, [pc, #160]	; (800c070 <_Z13doubles_equalddd+0xc4>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	ed97 0b02 	vldr	d0, [r7, #8]
 800bfd6:	4798      	blx	r3
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d107      	bne.n	800bfee <_Z13doubles_equalddd+0x42>
 800bfde:	4b24      	ldr	r3, [pc, #144]	; (800c070 <_Z13doubles_equalddd+0xc4>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	ed97 0b00 	vldr	d0, [r7]
 800bfe6:	4798      	blx	r3
 800bfe8:	4603      	mov	r3, r0
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d001      	beq.n	800bff2 <_Z13doubles_equalddd+0x46>
 800bfee:	2301      	movs	r3, #1
 800bff0:	e000      	b.n	800bff4 <_Z13doubles_equalddd+0x48>
 800bff2:	2300      	movs	r3, #0
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d001      	beq.n	800bffc <_Z13doubles_equalddd+0x50>
        return false;
 800bff8:	2300      	movs	r3, #0
 800bffa:	e035      	b.n	800c068 <_Z13doubles_equalddd+0xbc>

    if (PlatformSpecificIsInf(d1) && PlatformSpecificIsInf(d2))
 800bffc:	4b1d      	ldr	r3, [pc, #116]	; (800c074 <_Z13doubles_equalddd+0xc8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	ed97 0b04 	vldr	d0, [r7, #16]
 800c004:	4798      	blx	r3
 800c006:	4603      	mov	r3, r0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d009      	beq.n	800c020 <_Z13doubles_equalddd+0x74>
 800c00c:	4b19      	ldr	r3, [pc, #100]	; (800c074 <_Z13doubles_equalddd+0xc8>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	ed97 0b02 	vldr	d0, [r7, #8]
 800c014:	4798      	blx	r3
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d001      	beq.n	800c020 <_Z13doubles_equalddd+0x74>
 800c01c:	2301      	movs	r3, #1
 800c01e:	e000      	b.n	800c022 <_Z13doubles_equalddd+0x76>
 800c020:	2300      	movs	r3, #0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d001      	beq.n	800c02a <_Z13doubles_equalddd+0x7e>
    {
        return true;
 800c026:	2301      	movs	r3, #1
 800c028:	e01e      	b.n	800c068 <_Z13doubles_equalddd+0xbc>
    }

    return PlatformSpecificFabs(d1 - d2) <= threshold;
 800c02a:	4b13      	ldr	r3, [pc, #76]	; (800c078 <_Z13doubles_equalddd+0xcc>)
 800c02c:	681c      	ldr	r4, [r3, #0]
 800c02e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c032:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c036:	f7f4 f967 	bl	8000308 <__aeabi_dsub>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	ec43 2b17 	vmov	d7, r2, r3
 800c042:	eeb0 0a47 	vmov.f32	s0, s14
 800c046:	eef0 0a67 	vmov.f32	s1, s15
 800c04a:	47a0      	blx	r4
 800c04c:	ec53 2b10 	vmov	r2, r3, d0
 800c050:	2101      	movs	r1, #1
 800c052:	460c      	mov	r4, r1
 800c054:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c058:	f7f4 fb82 	bl	8000760 <__aeabi_dcmpge>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <_Z13doubles_equalddd+0xba>
 800c062:	2300      	movs	r3, #0
 800c064:	461c      	mov	r4, r3
 800c066:	b2e3      	uxtb	r3, r4
}
 800c068:	4618      	mov	r0, r3
 800c06a:	371c      	adds	r7, #28
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd90      	pop	{r4, r7, pc}
 800c070:	200000e0 	.word	0x200000e0
 800c074:	200000e4 	.word	0x200000e4
 800c078:	200000d4 	.word	0x200000d4

0800c07c <_ZN22OutsideTestRunnerUTest13getTestResultEv>:
 */
class OutsideTestRunnerUTest: public UtestShell
{
public:
    static OutsideTestRunnerUTest& instance();
    virtual TestResult& getTestResult()
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
    {
        return defaultTestResult;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	332c      	adds	r3, #44	; 0x2c
    }
 800c088:	4618      	mov	r0, r3
 800c08a:	370c      	adds	r7, #12
 800c08c:	46bd      	mov	sp, r7
 800c08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c092:	4770      	bx	lr

0800c094 <_ZN22OutsideTestRunnerUTestD1Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
    {
 800c09c:	4a0a      	ldr	r2, [pc, #40]	; (800c0c8 <_ZN22OutsideTestRunnerUTestD1Ev+0x34>)
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	601a      	str	r2, [r3, #0]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	332c      	adds	r3, #44	; 0x2c
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f7ff fe00 	bl	800bcac <_ZN10TestResultD1Ev>
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	331c      	adds	r3, #28
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7f7 fdfd 	bl	8003cb0 <_ZN17ConsoleTestOutputD1Ev>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f000 f917 	bl	800c2ec <_ZN10UtestShellD1Ev>
    }
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3708      	adds	r7, #8
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	08016cf4 	.word	0x08016cf4

0800c0cc <_ZN22OutsideTestRunnerUTestD0Ev>:
    virtual ~OutsideTestRunnerUTest() _destructor_override
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b082      	sub	sp, #8
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
    }
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f7ff ffdd 	bl	800c094 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c0da:	2164      	movs	r1, #100	; 0x64
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f7f9 faeb 	bl	80056b8 <_ZdlPvj>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3708      	adds	r7, #8
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <_ZN22OutsideTestRunnerUTestC1Ev>:
private:
    OutsideTestRunnerUTest() :
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b084      	sub	sp, #16
 800c0f0:	af02      	add	r7, sp, #8
 800c0f2:	6078      	str	r0, [r7, #4]
        UtestShell("\n\t NOTE: Assertion happened without being in a test run (perhaps in main?)", "\n\t       Something is very wrong. Check this assertion and fix", "unknown file", 0),
                defaultTestResult(defaultOutput)
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	4b0d      	ldr	r3, [pc, #52]	; (800c130 <_ZN22OutsideTestRunnerUTestC1Ev+0x44>)
 800c0fc:	4a0d      	ldr	r2, [pc, #52]	; (800c134 <_ZN22OutsideTestRunnerUTestC1Ev+0x48>)
 800c0fe:	490e      	ldr	r1, [pc, #56]	; (800c138 <_ZN22OutsideTestRunnerUTestC1Ev+0x4c>)
 800c100:	f000 f8cc 	bl	800c29c <_ZN10UtestShellC1EPKcS1_S1_j>
 800c104:	4a0d      	ldr	r2, [pc, #52]	; (800c13c <_ZN22OutsideTestRunnerUTestC1Ev+0x50>)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	331c      	adds	r3, #28
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f7 fdbc 	bl	8003c8c <_ZN17ConsoleTestOutputC1Ev>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	331c      	adds	r3, #28
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f7ff fd8b 	bl	800bc3c <_ZN10TestResultC1ER10TestOutput>
    {
    }
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4618      	mov	r0, r3
 800c12a:	3708      	adds	r7, #8
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	080154c4 	.word	0x080154c4
 800c134:	080154d4 	.word	0x080154d4
 800c138:	08015514 	.word	0x08015514
 800c13c:	08016cf4 	.word	0x08016cf4

0800c140 <__tcf_0>:
    TestResult defaultTestResult;
};

OutsideTestRunnerUTest& OutsideTestRunnerUTest::instance()
{
    static OutsideTestRunnerUTest instance_;
 800c140:	b580      	push	{r7, lr}
 800c142:	af00      	add	r7, sp, #0
 800c144:	4801      	ldr	r0, [pc, #4]	; (800c14c <__tcf_0+0xc>)
 800c146:	f7ff ffa5 	bl	800c094 <_ZN22OutsideTestRunnerUTestD1Ev>
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	2000063c 	.word	0x2000063c

0800c150 <_ZN22OutsideTestRunnerUTest8instanceEv>:
{
 800c150:	b580      	push	{r7, lr}
 800c152:	af00      	add	r7, sp, #0
    static OutsideTestRunnerUTest instance_;
 800c154:	4b12      	ldr	r3, [pc, #72]	; (800c1a0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	f3bf 8f5b 	dmb	ish
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	bf0c      	ite	eq
 800c166:	2301      	moveq	r3, #1
 800c168:	2300      	movne	r3, #0
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d013      	beq.n	800c198 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c170:	480b      	ldr	r0, [pc, #44]	; (800c1a0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c172:	f004 fd5f 	bl	8010c34 <__cxa_guard_acquire>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	bf14      	ite	ne
 800c17c:	2301      	movne	r3, #1
 800c17e:	2300      	moveq	r3, #0
 800c180:	b2db      	uxtb	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d008      	beq.n	800c198 <_ZN22OutsideTestRunnerUTest8instanceEv+0x48>
 800c186:	4807      	ldr	r0, [pc, #28]	; (800c1a4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
 800c188:	f7ff ffb0 	bl	800c0ec <_ZN22OutsideTestRunnerUTestC1Ev>
 800c18c:	4804      	ldr	r0, [pc, #16]	; (800c1a0 <_ZN22OutsideTestRunnerUTest8instanceEv+0x50>)
 800c18e:	f004 fd5d 	bl	8010c4c <__cxa_guard_release>
 800c192:	4805      	ldr	r0, [pc, #20]	; (800c1a8 <_ZN22OutsideTestRunnerUTest8instanceEv+0x58>)
 800c194:	f004 fd81 	bl	8010c9a <atexit>
    return instance_;
 800c198:	4b02      	ldr	r3, [pc, #8]	; (800c1a4 <_ZN22OutsideTestRunnerUTest8instanceEv+0x54>)
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop
 800c1a0:	200006a0 	.word	0x200006a0
 800c1a4:	2000063c 	.word	0x2000063c
 800c1a8:	0800c141 	.word	0x0800c141

0800c1ac <helperDoTestSetup>:
 */

extern "C" {

    static void helperDoTestSetup(void* data)
    {
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->setup();
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	330c      	adds	r3, #12
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	4798      	blx	r3
    }
 800c1c0:	bf00      	nop
 800c1c2:	3708      	adds	r7, #8
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <helperDoTestBody>:

    static void helperDoTestBody(void* data)
    {
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b082      	sub	sp, #8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->testBody();
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	3314      	adds	r3, #20
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	4798      	blx	r3
    }
 800c1dc:	bf00      	nop
 800c1de:	3708      	adds	r7, #8
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <helperDoTestTeardown>:

    static void helperDoTestTeardown(void* data)
    {
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
        ((Utest*)data)->teardown();
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3310      	adds	r3, #16
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	4798      	blx	r3
    }
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>:

    struct HelperTestRunInfo
    {
        HelperTestRunInfo(UtestShell* shell, TestPlugin* plugin, TestResult* result) : shell_(shell), plugin_(plugin), result_(result){}
 800c200:	b480      	push	{r7}
 800c202:	b085      	sub	sp, #20
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	605a      	str	r2, [r3, #4]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	609a      	str	r2, [r3, #8]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	4618      	mov	r0, r3
 800c224:	3714      	adds	r7, #20
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <helperDoRunOneTestInCurrentProcess>:
        TestPlugin* plugin_;
        TestResult* result_;
    };

    static void helperDoRunOneTestInCurrentProcess(void* data)
    {
 800c22e:	b580      	push	{r7, lr}
 800c230:	b086      	sub	sp, #24
 800c232:	af00      	add	r7, sp, #0
 800c234:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	60bb      	str	r3, [r7, #8]

        shell->runOneTestInCurrentProcess(plugin, *result);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	3394      	adds	r3, #148	; 0x94
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	68f9      	ldr	r1, [r7, #12]
 800c258:	6938      	ldr	r0, [r7, #16]
 800c25a:	4798      	blx	r3
    }
 800c25c:	bf00      	nop
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <helperDoRunOneTestSeperateProcess>:

    static void helperDoRunOneTestSeperateProcess(void* data)
    {
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
        HelperTestRunInfo* runInfo = (HelperTestRunInfo*) data;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	617b      	str	r3, [r7, #20]

        UtestShell* shell = runInfo->shell_;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	613b      	str	r3, [r7, #16]
        TestPlugin* plugin = runInfo->plugin_;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	60fb      	str	r3, [r7, #12]
        TestResult* result = runInfo->result_;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	60bb      	str	r3, [r7, #8]
        PlatformSpecificRunTestInASeperateProcess(shell, plugin, result);
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <helperDoRunOneTestSeperateProcess+0x34>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	68f9      	ldr	r1, [r7, #12]
 800c28a:	6938      	ldr	r0, [r7, #16]
 800c28c:	4798      	blx	r3
    }
 800c28e:	bf00      	nop
 800c290:	3718      	adds	r7, #24
 800c292:	46bd      	mov	sp, r7
 800c294:	bd80      	pop	{r7, pc}
 800c296:	bf00      	nop
 800c298:	20000098 	.word	0x20000098

0800c29c <_ZN10UtestShellC1EPKcS1_S1_j>:
UtestShell::UtestShell() :
    group_("UndefinedTestGroup"), name_("UndefinedTest"), file_("UndefinedFile"), lineNumber_(0), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber) :
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
 800c2a8:	603b      	str	r3, [r7, #0]
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(NULLPTR), isRunAsSeperateProcess_(false), hasFailed_(false)
 800c2aa:	4a0f      	ldr	r2, [pc, #60]	; (800c2e8 <_ZN10UtestShellC1EPKcS1_S1_j+0x4c>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	601a      	str	r2, [r3, #0]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	68ba      	ldr	r2, [r7, #8]
 800c2b4:	605a      	str	r2, [r3, #4]
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	609a      	str	r2, [r3, #8]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	60da      	str	r2, [r3, #12]
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	69ba      	ldr	r2, [r7, #24]
 800c2c6:	611a      	str	r2, [r3, #16]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	615a      	str	r2, [r3, #20]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	761a      	strb	r2, [r3, #24]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	765a      	strb	r2, [r3, #25]
{
}
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3714      	adds	r7, #20
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e6:	4770      	bx	lr
 800c2e8:	08016da4 	.word	0x08016da4

0800c2ec <_ZN10UtestShellD1Ev>:
UtestShell::UtestShell(const char* groupName, const char* testName, const char* fileName, size_t lineNumber, UtestShell* nextTest) :
    group_(groupName), name_(testName), file_(fileName), lineNumber_(lineNumber), next_(nextTest), isRunAsSeperateProcess_(false), hasFailed_(false)
{
}

UtestShell::~UtestShell()
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	4a04      	ldr	r2, [pc, #16]	; (800c308 <_ZN10UtestShellD1Ev+0x1c>)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	601a      	str	r2, [r3, #0]
{
}
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	08016da4 	.word	0x08016da4

0800c30c <_ZN10UtestShellD0Ev>:
UtestShell::~UtestShell()
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b082      	sub	sp, #8
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
}
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f7ff ffe9 	bl	800c2ec <_ZN10UtestShellD1Ev>
 800c31a:	211c      	movs	r1, #28
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f7f9 f9cb 	bl	80056b8 <_ZdlPvj>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZL18defaultCrashMethodv>:
# pragma GCC diagnostic push
# pragma GCC diagnostic ignored "-Wnonnull"
#endif /* NEEDS_DISABLE_NULL_WARNING */

static void defaultCrashMethod()
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b082      	sub	sp, #8
 800c330:	af00      	add	r7, sp, #0
    UtestShell* ptr = (UtestShell*) NULLPTR;
 800c332:	2300      	movs	r3, #0
 800c334:	607b      	str	r3, [r7, #4]
    ptr->countTests();
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	3310      	adds	r3, #16
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	4798      	blx	r3
}
 800c342:	bf00      	nop
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
	...

0800c34c <_ZN10UtestShell5crashEv>:
{
    pleaseCrashMeRightNow = defaultCrashMethod;
}

void UtestShell::crash()
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	af00      	add	r7, sp, #0
    pleaseCrashMeRightNow();
 800c350:	4b02      	ldr	r3, [pc, #8]	; (800c35c <_ZN10UtestShell5crashEv+0x10>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4798      	blx	r3
}
 800c356:	bf00      	nop
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000094 	.word	0x20000094

0800c360 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult>:

void UtestShell::runOneTest(TestPlugin* plugin, TestResult& result)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b088      	sub	sp, #32
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
    hasFailed_ = false;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	2200      	movs	r2, #0
 800c370:	765a      	strb	r2, [r3, #25]
    result.countRun();
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	3324      	adds	r3, #36	; 0x24
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	4798      	blx	r3
    HelperTestRunInfo runInfo(this, plugin, &result);
 800c37e:	f107 0014 	add.w	r0, r7, #20
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	f7ff ff3a 	bl	800c200 <_ZN17HelperTestRunInfoC1EP10UtestShellP10TestPluginP10TestResult>
    if (isRunInSeperateProcess())
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	337c      	adds	r3, #124	; 0x7c
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	4798      	blx	r3
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d007      	beq.n	800c3ae <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x4e>
        PlatformSpecificSetJmp(helperDoRunOneTestSeperateProcess, &runInfo);
 800c39e:	4b09      	ldr	r3, [pc, #36]	; (800c3c4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f107 0214 	add.w	r2, r7, #20
 800c3a6:	4611      	mov	r1, r2
 800c3a8:	4807      	ldr	r0, [pc, #28]	; (800c3c8 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x68>)
 800c3aa:	4798      	blx	r3
    else
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
}
 800c3ac:	e006      	b.n	800c3bc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x5c>
        PlatformSpecificSetJmp(helperDoRunOneTestInCurrentProcess, &runInfo);
 800c3ae:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x64>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f107 0214 	add.w	r2, r7, #20
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	4804      	ldr	r0, [pc, #16]	; (800c3cc <_ZN10UtestShell10runOneTestEP10TestPluginR10TestResult+0x6c>)
 800c3ba:	4798      	blx	r3
}
 800c3bc:	bf00      	nop
 800c3be:	3720      	adds	r7, #32
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	200000a0 	.word	0x200000a0
 800c3c8:	0800c265 	.word	0x0800c265
 800c3cc:	0800c22f 	.word	0x0800c22f

0800c3d0 <_ZN10UtestShell10createTestEv>:

Utest* UtestShell::createTest()
{
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
    return new Utest();
 800c3d8:	22d3      	movs	r2, #211	; 0xd3
 800c3da:	4906      	ldr	r1, [pc, #24]	; (800c3f4 <_ZN10UtestShell10createTestEv+0x24>)
 800c3dc:	2004      	movs	r0, #4
 800c3de:	f7f9 f957 	bl	8005690 <_ZnwjPKci>
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f001 fac5 	bl	800d974 <_ZN5UtestC1Ev>
 800c3ea:	4623      	mov	r3, r4
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd90      	pop	{r4, r7, pc}
 800c3f4:	08015594 	.word	0x08015594

0800c3f8 <_ZN10UtestShell11destroyTestEP5Utest>:

void UtestShell::destroyTest(Utest* test)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
    delete test;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <_ZN10UtestShell11destroyTestEP5Utest+0x1a>
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	3204      	adds	r2, #4
 800c40c:	6812      	ldr	r2, [r2, #0]
 800c40e:	4618      	mov	r0, r3
 800c410:	4790      	blx	r2
}
 800c412:	bf00      	nop
 800c414:	3708      	adds	r7, #8
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
	...

0800c41c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult>:

void UtestShell::runOneTestInCurrentProcess(TestPlugin* plugin, TestResult& result)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b088      	sub	sp, #32
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
    result.printVeryVerbose("\n-- before runAllPreTestAction: ");
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	333c      	adds	r3, #60	; 0x3c
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4940      	ldr	r1, [pc, #256]	; (800c534 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x118>)
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	4798      	blx	r3
    plugin->runAllPreTestAction(*this, result);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	3314      	adds	r3, #20
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	68f9      	ldr	r1, [r7, #12]
 800c442:	68b8      	ldr	r0, [r7, #8]
 800c444:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPreTestAction: ");
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	333c      	adds	r3, #60	; 0x3c
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	493a      	ldr	r1, [pc, #232]	; (800c538 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x11c>)
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	4798      	blx	r3

    //save test context, so that test class can be tested
    UtestShell* savedTest = UtestShell::getCurrent();
 800c454:	f001 fa64 	bl	800d920 <_ZN10UtestShell10getCurrentEv>
 800c458:	61f8      	str	r0, [r7, #28]
    TestResult* savedResult = UtestShell::getTestResult();
 800c45a:	68f8      	ldr	r0, [r7, #12]
 800c45c:	f001 fa46 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800c460:	61b8      	str	r0, [r7, #24]

    UtestShell::setTestResult(&result);
 800c462:	6879      	ldr	r1, [r7, #4]
 800c464:	68f8      	ldr	r0, [r7, #12]
 800c466:	f001 fa21 	bl	800d8ac <_ZN10UtestShell13setTestResultEP10TestResult>
    UtestShell::setCurrentTest(this);
 800c46a:	68f9      	ldr	r1, [r7, #12]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f001 fa2d 	bl	800d8cc <_ZN10UtestShell14setCurrentTestEPS_>

    result.printVeryVerbose("\n---- before createTest: ");
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	333c      	adds	r3, #60	; 0x3c
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4930      	ldr	r1, [pc, #192]	; (800c53c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x120>)
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	4798      	blx	r3
    Utest* testToRun = createTest();
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	3388      	adds	r3, #136	; 0x88
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	4798      	blx	r3
 800c48c:	6178      	str	r0, [r7, #20]
    result.printVeryVerbose("\n---- after createTest: ");
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	333c      	adds	r3, #60	; 0x3c
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	492a      	ldr	r1, [pc, #168]	; (800c540 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x124>)
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	4798      	blx	r3

    result.printVeryVerbose("\n------ before runTest: ");
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	333c      	adds	r3, #60	; 0x3c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4927      	ldr	r1, [pc, #156]	; (800c544 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x128>)
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	4798      	blx	r3
    testToRun->run();
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	6978      	ldr	r0, [r7, #20]
 800c4b4:	4798      	blx	r3
    result.printVeryVerbose("\n------ after runTest: ");
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	333c      	adds	r3, #60	; 0x3c
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4922      	ldr	r1, [pc, #136]	; (800c548 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x12c>)
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	4798      	blx	r3

    UtestShell::setCurrentTest(savedTest);
 800c4c4:	69f9      	ldr	r1, [r7, #28]
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f001 fa00 	bl	800d8cc <_ZN10UtestShell14setCurrentTestEPS_>
    UtestShell::setTestResult(savedResult);
 800c4cc:	69b9      	ldr	r1, [r7, #24]
 800c4ce:	68f8      	ldr	r0, [r7, #12]
 800c4d0:	f001 f9ec 	bl	800d8ac <_ZN10UtestShell13setTestResultEP10TestResult>

    result.printVeryVerbose("\n---- before destroyTest: ");
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	333c      	adds	r3, #60	; 0x3c
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	491b      	ldr	r1, [pc, #108]	; (800c54c <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x130>)
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	4798      	blx	r3
    destroyTest(testToRun);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	338c      	adds	r3, #140	; 0x8c
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	6979      	ldr	r1, [r7, #20]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	4798      	blx	r3
    result.printVeryVerbose("\n---- after destroyTest: ");
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	333c      	adds	r3, #60	; 0x3c
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4915      	ldr	r1, [pc, #84]	; (800c550 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x134>)
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3

    result.printVeryVerbose("\n-- before runAllPostTestAction: ");
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	333c      	adds	r3, #60	; 0x3c
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4913      	ldr	r1, [pc, #76]	; (800c554 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x138>)
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	4798      	blx	r3
    plugin->runAllPostTestAction(*this, result);
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	3318      	adds	r3, #24
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	68f9      	ldr	r1, [r7, #12]
 800c518:	68b8      	ldr	r0, [r7, #8]
 800c51a:	4798      	blx	r3
    result.printVeryVerbose("\n-- after runAllPostTestAction: ");
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	333c      	adds	r3, #60	; 0x3c
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	490c      	ldr	r1, [pc, #48]	; (800c558 <_ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult+0x13c>)
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	4798      	blx	r3
}
 800c52a:	bf00      	nop
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
 800c532:	bf00      	nop
 800c534:	080155a8 	.word	0x080155a8
 800c538:	080155cc 	.word	0x080155cc
 800c53c:	080155ec 	.word	0x080155ec
 800c540:	08015608 	.word	0x08015608
 800c544:	08015624 	.word	0x08015624
 800c548:	08015640 	.word	0x08015640
 800c54c:	08015658 	.word	0x08015658
 800c550:	08015674 	.word	0x08015674
 800c554:	08015690 	.word	0x08015690
 800c558:	080156b4 	.word	0x080156b4

0800c55c <_ZNK10UtestShell7getNextEv>:

UtestShell *UtestShell::getNext() const
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
    return next_;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	695b      	ldr	r3, [r3, #20]
}
 800c568:	4618      	mov	r0, r3
 800c56a:	370c      	adds	r7, #12
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <_ZN10UtestShell7addTestEPS_>:

UtestShell* UtestShell::addTest(UtestShell *test)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
    next_ = test;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	683a      	ldr	r2, [r7, #0]
 800c582:	615a      	str	r2, [r3, #20]
    return this;
 800c584:	687b      	ldr	r3, [r7, #4]
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <_ZN10UtestShell10countTestsEv>:

size_t UtestShell::countTests()
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
    return next_ ? next_->countTests() + 1 : 1;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	695b      	ldr	r3, [r3, #20]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00b      	beq.n	800c5ba <_ZN10UtestShell10countTestsEv+0x28>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	695a      	ldr	r2, [r3, #20]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	695b      	ldr	r3, [r3, #20]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	3310      	adds	r3, #16
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4610      	mov	r0, r2
 800c5b2:	4798      	blx	r3
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	e000      	b.n	800c5bc <_ZN10UtestShell10countTestsEv+0x2a>
 800c5ba:	2301      	movs	r3, #1
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <_ZNK10UtestShell12getMacroNameEv>:

SimpleString UtestShell::getMacroName() const
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
 800c5cc:	6039      	str	r1, [r7, #0]
    return "TEST";
 800c5ce:	4904      	ldr	r1, [pc, #16]	; (800c5e0 <_ZNK10UtestShell12getMacroNameEv+0x1c>)
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7f9 ff46 	bl	8006462 <_ZN12SimpleStringC1EPKc>
}
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	3708      	adds	r7, #8
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	bf00      	nop
 800c5e0:	080156d8 	.word	0x080156d8

0800c5e4 <_ZNK10UtestShell7getNameEv>:

const SimpleString UtestShell::getName() const
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b082      	sub	sp, #8
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
    return SimpleString(name_);
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7f9 ff34 	bl	8006462 <_ZN12SimpleStringC1EPKc>
}
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <_ZNK10UtestShell8getGroupEv>:

const SimpleString UtestShell::getGroup() const
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	6039      	str	r1, [r7, #0]
    return SimpleString(group_);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7f9 ff25 	bl	8006462 <_ZN12SimpleStringC1EPKc>
}
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	3708      	adds	r7, #8
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <_ZNK10UtestShell16getFormattedNameEv>:

SimpleString UtestShell::getFormattedName() const
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b082      	sub	sp, #8
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
    SimpleString formattedName(getMacroName());
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	33a0      	adds	r3, #160	; 0xa0
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	6839      	ldr	r1, [r7, #0]
 800c636:	4610      	mov	r0, r2
 800c638:	4798      	blx	r3
    formattedName += "(";
 800c63a:	490e      	ldr	r1, [pc, #56]	; (800c674 <_ZNK10UtestShell16getFormattedNameEv+0x54>)
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7fa fb57 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    formattedName += group_;
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	4619      	mov	r1, r3
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7fa fb51 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    formattedName += ", ";
 800c64e:	490a      	ldr	r1, [pc, #40]	; (800c678 <_ZNK10UtestShell16getFormattedNameEv+0x58>)
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7fa fb4d 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    formattedName += name_;
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	4619      	mov	r1, r3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f7fa fb47 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    formattedName += ")";
 800c662:	4906      	ldr	r1, [pc, #24]	; (800c67c <_ZNK10UtestShell16getFormattedNameEv+0x5c>)
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7fa fb43 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>

    return formattedName;
 800c66a:	bf00      	nop
}
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	080156e0 	.word	0x080156e0
 800c678:	080156e4 	.word	0x080156e4
 800c67c:	080156e8 	.word	0x080156e8

0800c680 <_ZNK10UtestShell9hasFailedEv>:

bool UtestShell::hasFailed() const
{
 800c680:	b480      	push	{r7}
 800c682:	b083      	sub	sp, #12
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
    return hasFailed_;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	7e5b      	ldrb	r3, [r3, #25]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <_ZNK10UtestShell7willRunEv>:
{
    getTestResult()->countCheck();
}

bool UtestShell::willRun() const
{
 800c698:	b480      	push	{r7}
 800c69a:	b083      	sub	sp, #12
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
    return true;
 800c6a0:	2301      	movs	r3, #1
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	370c      	adds	r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ac:	4770      	bx	lr

0800c6ae <_ZNK10UtestShell22isRunInSeperateProcessEv>:

bool UtestShell::isRunInSeperateProcess() const
{
 800c6ae:	b480      	push	{r7}
 800c6b0:	b083      	sub	sp, #12
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
    return isRunAsSeperateProcess_;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	7e1b      	ldrb	r3, [r3, #24]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	370c      	adds	r7, #12
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <_ZN10UtestShell23setRunInSeperateProcessEv>:

void UtestShell::setRunInSeperateProcess()
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
    isRunAsSeperateProcess_ = true;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	761a      	strb	r2, [r3, #24]
}
 800c6d4:	bf00      	nop
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <_ZN10UtestShell13setRunIgnoredEv>:


void UtestShell::setRunIgnored()
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]

}
 800c6e8:	bf00      	nop
 800c6ea:	370c      	adds	r7, #12
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr

0800c6f4 <_ZNK10UtestShell7getFileEv>:
{
    name_ = testName;
}

const SimpleString UtestShell::getFile() const
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
    return SimpleString(file_);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	68db      	ldr	r3, [r3, #12]
 800c702:	4619      	mov	r1, r3
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f7f9 feac 	bl	8006462 <_ZN12SimpleStringC1EPKc>
}
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <_ZNK10UtestShell13getLineNumberEv>:

size_t UtestShell::getLineNumber() const
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
    return lineNumber_;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	370c      	adds	r7, #12
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <_ZNK10UtestShell5matchEPKcPK10TestFilter>:

bool UtestShell::match(const char* target, const TestFilter* filters) const
{
 800c72a:	b590      	push	{r4, r7, lr}
 800c72c:	b087      	sub	sp, #28
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
    if(filters == NULLPTR) return true;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e01f      	b.n	800c780 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>

    for(; filters != NULLPTR; filters = filters->getNext())
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d01b      	beq.n	800c77e <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x54>
        if(filters->match(target)) return true;
 800c746:	f107 0310 	add.w	r3, r7, #16
 800c74a:	68b9      	ldr	r1, [r7, #8]
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7f9 fe88 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c752:	f107 0310 	add.w	r3, r7, #16
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f004 fa3e 	bl	8010bda <_ZNK10TestFilter5matchERK12SimpleString>
 800c75e:	4603      	mov	r3, r0
 800c760:	461c      	mov	r4, r3
 800c762:	f107 0310 	add.w	r3, r7, #16
 800c766:	4618      	mov	r0, r3
 800c768:	f7fa fa33 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800c76c:	2c00      	cmp	r4, #0
 800c76e:	d001      	beq.n	800c774 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x4a>
 800c770:	2301      	movs	r3, #1
 800c772:	e005      	b.n	800c780 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x56>
    for(; filters != NULLPTR; filters = filters->getNext())
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f004 fa0a 	bl	8010b8e <_ZNK10TestFilter7getNextEv>
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	e7e0      	b.n	800c740 <_ZNK10UtestShell5matchEPKcPK10TestFilter+0x16>

    return false;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	371c      	adds	r7, #28
 800c784:	46bd      	mov	sp, r7
 800c786:	bd90      	pop	{r4, r7, pc}

0800c788 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_>:

bool UtestShell::shouldRun(const TestFilter* groupFilters, const TestFilter* nameFilters) const
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	607a      	str	r2, [r7, #4]
    return match(group_, groupFilters) && match(name_, nameFilters);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	4619      	mov	r1, r3
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f7ff ffc4 	bl	800c72a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d00b      	beq.n	800c7c0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	68f8      	ldr	r0, [r7, #12]
 800c7b2:	f7ff ffba 	bl	800c72a <_ZNK10UtestShell5matchEPKcPK10TestFilter>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d001      	beq.n	800c7c0 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x38>
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e000      	b.n	800c7c2 <_ZNK10UtestShell9shouldRunEPK10TestFilterS2_+0x3a>
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}

0800c7ca <_ZN10UtestShell8failWithERK11TestFailure>:

void UtestShell::failWith(const TestFailure& failure)
{
 800c7ca:	b590      	push	{r4, r7, lr}
 800c7cc:	b083      	sub	sp, #12
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
    failWith(failure, getCurrentTestTerminator());
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	339c      	adds	r3, #156	; 0x9c
 800c7da:	681c      	ldr	r4, [r3, #0]
 800c7dc:	f001 f8b0 	bl	800d940 <_ZN10UtestShell24getCurrentTestTerminatorEv>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	6839      	ldr	r1, [r7, #0]
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	47a0      	blx	r4
} // LCOV_EXCL_LINE
 800c7ea:	bf00      	nop
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}

0800c7f2 <_ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator>:

void UtestShell::failWith(const TestFailure& failure, const TestTerminator& terminator)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	60f8      	str	r0, [r7, #12]
 800c7fa:	60b9      	str	r1, [r7, #8]
 800c7fc:	607a      	str	r2, [r7, #4]
    hasFailed_ = true;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	2201      	movs	r2, #1
 800c802:	765a      	strb	r2, [r3, #25]
    getTestResult()->addFailure(failure);
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f001 f871 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800c80a:	4603      	mov	r3, r0
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	3234      	adds	r2, #52	; 0x34
 800c810:	6812      	ldr	r2, [r2, #0]
 800c812:	68b9      	ldr	r1, [r7, #8]
 800c814:	4618      	mov	r0, r3
 800c816:	4790      	blx	r2
    terminator.exitCurrentTest();
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800c822:	bf00      	nop
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <_ZN10UtestShell8exitTestERK14TestTerminator>:

void UtestShell::exitTest(const TestTerminator& terminator)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b082      	sub	sp, #8
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	6039      	str	r1, [r7, #0]
    terminator.exitCurrentTest();
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	6838      	ldr	r0, [r7, #0]
 800c83c:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertTrue(bool condition, const char *checkString, const char *conditionString, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800c846:	b590      	push	{r4, r7, lr}
 800c848:	b09d      	sub	sp, #116	; 0x74
 800c84a:	af04      	add	r7, sp, #16
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
 800c852:	460b      	mov	r3, r1
 800c854:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f001 f848 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800c85c:	4603      	mov	r3, r0
 800c85e:	681a      	ldr	r2, [r3, #0]
 800c860:	3228      	adds	r2, #40	; 0x28
 800c862:	6812      	ldr	r2, [r2, #0]
 800c864:	4618      	mov	r0, r3
 800c866:	4790      	blx	r2
    if (!condition)
 800c868:	7afb      	ldrb	r3, [r7, #11]
 800c86a:	f083 0301 	eor.w	r3, r3, #1
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	2b00      	cmp	r3, #0
 800c872:	d03f      	beq.n	800c8f4 <_ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(CheckFailure(this, fileName, lineNumber, checkString, conditionString, text), testTerminator);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	339c      	adds	r3, #156	; 0x9c
 800c87a:	681c      	ldr	r4, [r3, #0]
 800c87c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	4618      	mov	r0, r3
 800c884:	f7f9 fded 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c888:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c88c:	6839      	ldr	r1, [r7, #0]
 800c88e:	4618      	mov	r0, r3
 800c890:	f7f9 fde7 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c894:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c898:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f9 fde1 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c8a0:	f107 0014 	add.w	r0, r7, #20
 800c8a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c8a8:	9302      	str	r3, [sp, #8]
 800c8aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c8ae:	9301      	str	r3, [sp, #4]
 800c8b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8b4:	9300      	str	r3, [sp, #0]
 800c8b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c8ba:	68f9      	ldr	r1, [r7, #12]
 800c8bc:	f7fb ffe0 	bl	8008880 <_ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800c8c0:	f107 0314 	add.w	r3, r7, #20
 800c8c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	47a0      	blx	r4
 800c8cc:	f107 0314 	add.w	r3, r7, #20
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7fc fe43 	bl	800955c <_ZN12CheckFailureD1Ev>
 800c8d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fa f979 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800c8e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fa f974 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800c8ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fa f96f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800c8f4:	bf00      	nop
 800c8f6:	3764      	adds	r7, #100	; 0x64
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd90      	pop	{r4, r7, pc}

0800c8fc <_ZN10UtestShell4failEPKcS1_jRK14TestTerminator>:

void UtestShell::fail(const char *text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800c8fc:	b590      	push	{r4, r7, lr}
 800c8fe:	b097      	sub	sp, #92	; 0x5c
 800c900:	af02      	add	r7, sp, #8
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
 800c908:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800c90a:	68f8      	ldr	r0, [r7, #12]
 800c90c:	f000 ffee 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800c910:	4603      	mov	r3, r0
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	3228      	adds	r2, #40	; 0x28
 800c916:	6812      	ldr	r2, [r2, #0]
 800c918:	4618      	mov	r0, r3
 800c91a:	4790      	blx	r2
    failWith(FailFailure(this, fileName, lineNumber, text), testTerminator);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	339c      	adds	r3, #156	; 0x9c
 800c922:	681c      	ldr	r4, [r3, #0]
 800c924:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c928:	68b9      	ldr	r1, [r7, #8]
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7f9 fd99 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c930:	f107 0014 	add.w	r0, r7, #20
 800c934:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c938:	9300      	str	r3, [sp, #0]
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	68f9      	ldr	r1, [r7, #12]
 800c940:	f7fb ffe6 	bl	8008910 <_ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString>
 800c944:	f107 0314 	add.w	r3, r7, #20
 800c948:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c94a:	4619      	mov	r1, r3
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	47a0      	blx	r4
 800c950:	f107 0314 	add.w	r3, r7, #20
 800c954:	4618      	mov	r0, r3
 800c956:	f7f9 fa73 	bl	8005e40 <_ZN11FailFailureD1Ev>
 800c95a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fa f937 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
} // LCOV_EXCL_LINE
 800c964:	bf00      	nop
 800c966:	3754      	adds	r7, #84	; 0x54
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd90      	pop	{r4, r7, pc}

0800c96c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800c96c:	b590      	push	{r4, r7, lr}
 800c96e:	b0a7      	sub	sp, #156	; 0x9c
 800c970:	af04      	add	r7, sp, #16
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	607a      	str	r2, [r7, #4]
 800c978:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f000 ffb6 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800c980:	4603      	mov	r3, r0
 800c982:	681a      	ldr	r2, [r3, #0]
 800c984:	3228      	adds	r2, #40	; 0x28
 800c986:	6812      	ldr	r2, [r2, #0]
 800c988:	4618      	mov	r0, r3
 800c98a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x2c>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d068      	beq.n	800ca6a <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0xfe>
    if (actual == NULLPTR || expected == NULLPTR)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x38>
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d12a      	bne.n	800c9fa <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x8e>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	339c      	adds	r3, #156	; 0x9c
 800c9aa:	681c      	ldr	r4, [r3, #0]
 800c9ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7f9 fd55 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800c9b8:	f107 0010 	add.w	r0, r7, #16
 800c9bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c9c0:	9302      	str	r3, [sp, #8]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c9ce:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c9d2:	68f9      	ldr	r1, [r7, #12]
 800c9d4:	f7fc fa22 	bl	8008e1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800c9d8:	f107 0310 	add.w	r3, r7, #16
 800c9dc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	47a0      	blx	r4
 800c9e6:	f107 0310 	add.w	r3, r7, #16
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7fc fd2e 	bl	800944c <_ZN18StringEqualFailureD1Ev>
 800c9f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fa f8ec 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrCmp(expected, actual) != 0)
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	68b8      	ldr	r0, [r7, #8]
 800c9fe:	f7f9 fb6d 	bl	80060dc <_ZN12SimpleString6StrCmpEPKcS1_>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	bf14      	ite	ne
 800ca08:	2301      	movne	r3, #1
 800ca0a:	2300      	moveq	r3, #0
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d02c      	beq.n	800ca6c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	339c      	adds	r3, #156	; 0x9c
 800ca18:	681c      	ldr	r4, [r3, #0]
 800ca1a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7f9 fd1e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ca26:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800ca2a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ca3c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ca40:	68f9      	ldr	r1, [r7, #12]
 800ca42:	f7fc f9eb 	bl	8008e1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800ca46:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ca4a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800ca4e:	4619      	mov	r1, r3
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	47a0      	blx	r4
 800ca54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f7fc fcf7 	bl	800944c <_ZN18StringEqualFailureD1Ev>
 800ca5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7fa f8b5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ca68:	e000      	b.n	800ca6c <_ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator+0x100>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ca6a:	bf00      	nop
}
 800ca6c:	378c      	adds	r7, #140	; 0x8c
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd90      	pop	{r4, r7, pc}

0800ca72 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator>:

void UtestShell::assertCstrNEqual(const char* expected, const char* actual, size_t length, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800ca72:	b590      	push	{r4, r7, lr}
 800ca74:	b0a7      	sub	sp, #156	; 0x9c
 800ca76:	af04      	add	r7, sp, #16
 800ca78:	60f8      	str	r0, [r7, #12]
 800ca7a:	60b9      	str	r1, [r7, #8]
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ca80:	68f8      	ldr	r0, [r7, #12]
 800ca82:	f000 ff33 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800ca86:	4603      	mov	r3, r0
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	3228      	adds	r2, #40	; 0x28
 800ca8c:	6812      	ldr	r2, [r2, #0]
 800ca8e:	4618      	mov	r0, r3
 800ca90:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d102      	bne.n	800ca9e <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x2c>
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d06b      	beq.n	800cb76 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x104>
    if (actual == NULLPTR || expected == NULLPTR)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x38>
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d12b      	bne.n	800cb02 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x90>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	339c      	adds	r3, #156	; 0x9c
 800cab0:	681c      	ldr	r4, [r3, #0]
 800cab2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cab6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800caba:	4618      	mov	r0, r3
 800cabc:	f7f9 fcd1 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cac0:	f107 0010 	add.w	r0, r7, #16
 800cac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cac8:	9302      	str	r3, [sp, #8]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	68bb      	ldr	r3, [r7, #8]
 800cad0:	9300      	str	r3, [sp, #0]
 800cad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cad6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800cada:	68f9      	ldr	r1, [r7, #12]
 800cadc:	f7fc f99e 	bl	8008e1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cae0:	f107 0310 	add.w	r3, r7, #16
 800cae4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cae8:	4619      	mov	r1, r3
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	47a0      	blx	r4
 800caee:	f107 0310 	add.w	r3, r7, #16
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fc fcaa 	bl	800944c <_ZN18StringEqualFailureD1Ev>
 800caf8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cafc:	4618      	mov	r0, r3
 800cafe:	f7fa f868 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::StrNCmp(expected, actual, length) != 0)
 800cb02:	683a      	ldr	r2, [r7, #0]
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	68b8      	ldr	r0, [r7, #8]
 800cb08:	f7f9 fb27 	bl	800615a <_ZN12SimpleString7StrNCmpEPKcS1_j>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	bf14      	ite	ne
 800cb12:	2301      	movne	r3, #1
 800cb14:	2300      	moveq	r3, #0
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d02d      	beq.n	800cb78 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
        failWith(StringEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	339c      	adds	r3, #156	; 0x9c
 800cb22:	681c      	ldr	r4, [r3, #0]
 800cb24:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cb28:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7f9 fc98 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cb32:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800cb36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cb3a:	9302      	str	r3, [sp, #8]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb48:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800cb4c:	68f9      	ldr	r1, [r7, #12]
 800cb4e:	f7fc f965 	bl	8008e1c <_ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cb52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cb56:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	47a0      	blx	r4
 800cb60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7fc fc71 	bl	800944c <_ZN18StringEqualFailureD1Ev>
 800cb6a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7fa f82f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cb74:	e000      	b.n	800cb78 <_ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator+0x106>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cb76:	bf00      	nop
}
 800cb78:	378c      	adds	r7, #140	; 0x8c
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd90      	pop	{r4, r7, pc}

0800cb7e <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseEqual(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800cb7e:	b590      	push	{r4, r7, lr}
 800cb80:	b0ab      	sub	sp, #172	; 0xac
 800cb82:	af04      	add	r7, sp, #16
 800cb84:	60f8      	str	r0, [r7, #12]
 800cb86:	60b9      	str	r1, [r7, #8]
 800cb88:	607a      	str	r2, [r7, #4]
 800cb8a:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 fead 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800cb92:	4603      	mov	r3, r0
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	3228      	adds	r2, #40	; 0x28
 800cb98:	6812      	ldr	r2, [r2, #0]
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x2c>
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d07c      	beq.n	800cca4 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x126>
    if (actual == NULLPTR || expected == NULLPTR)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x38>
 800cbb0:	68bb      	ldr	r3, [r7, #8]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d128      	bne.n	800cc08 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x8a>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	3398      	adds	r3, #152	; 0x98
 800cbbc:	681c      	ldr	r4, [r3, #0]
 800cbbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7f9 fc4c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cbca:	f107 0010 	add.w	r0, r7, #16
 800cbce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cbd2:	9302      	str	r3, [sp, #8]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	9301      	str	r3, [sp, #4]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	9300      	str	r3, [sp, #0]
 800cbdc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cbe0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cbe4:	68f9      	ldr	r1, [r7, #12]
 800cbe6:	f7fc f9bd 	bl	8008f64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cbea:	f107 0310 	add.w	r3, r7, #16
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	47a0      	blx	r4
 800cbf4:	f107 0310 	add.w	r3, r7, #16
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fc fc05 	bl	8009408 <_ZN24StringEqualNoCaseFailureD1Ev>
 800cbfe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7f9 ffe5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(expected).equalsNoCase(actual))
 800cc08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc0c:	68b9      	ldr	r1, [r7, #8]
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f9 fc27 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cc14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f7f9 fc21 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cc20:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800cc24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc28:	4611      	mov	r1, r2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f9 fff8 	bl	8006c20 <_ZNK12SimpleString12equalsNoCaseERKS_>
 800cc30:	4603      	mov	r3, r0
 800cc32:	f083 0301 	eor.w	r3, r3, #1
 800cc36:	b2dc      	uxtb	r4, r3
 800cc38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7f9 ffc8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cc42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cc46:	4618      	mov	r0, r3
 800cc48:	f7f9 ffc3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cc4c:	2c00      	cmp	r4, #0
 800cc4e:	d02a      	beq.n	800cca6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
        failWith(StringEqualNoCaseFailure(this, fileName, lineNumber, expected, actual, text));
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	3398      	adds	r3, #152	; 0x98
 800cc56:	681c      	ldr	r4, [r3, #0]
 800cc58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800cc5c:	6839      	ldr	r1, [r7, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7f9 fbff 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cc64:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800cc68:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cc7e:	68f9      	ldr	r1, [r7, #12]
 800cc80:	f7fc f970 	bl	8008f64 <_ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString>
 800cc84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cc88:	4619      	mov	r1, r3
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	47a0      	blx	r4
 800cc8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cc92:	4618      	mov	r0, r3
 800cc94:	f7fc fbb8 	bl	8009408 <_ZN24StringEqualNoCaseFailureD1Ev>
 800cc98:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7f9 ff98 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cca2:	e000      	b.n	800cca6 <_ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j+0x128>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cca4:	bf00      	nop
}
 800cca6:	379c      	adds	r7, #156	; 0x9c
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd90      	pop	{r4, r7, pc}

0800ccac <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800ccac:	b590      	push	{r4, r7, lr}
 800ccae:	b0b3      	sub	sp, #204	; 0xcc
 800ccb0:	af04      	add	r7, sp, #16
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	60b9      	str	r1, [r7, #8]
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ccba:	68f8      	ldr	r0, [r7, #12]
 800ccbc:	f000 fe16 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	3228      	adds	r2, #40	; 0x28
 800ccc6:	6812      	ldr	r2, [r2, #0]
 800ccc8:	4618      	mov	r0, r3
 800ccca:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d103      	bne.n	800ccda <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x2e>
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f000 80ad 	beq.w	800ce34 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d002      	beq.n	800cce6 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x3a>
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d140      	bne.n	800cd68 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	3398      	adds	r3, #152	; 0x98
 800ccec:	681c      	ldr	r4, [r3, #0]
 800ccee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ccf2:	68b9      	ldr	r1, [r7, #8]
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f9 fbb4 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ccfa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7f9 fbae 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cd06:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cd0a:	6839      	ldr	r1, [r7, #0]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f7f9 fba8 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cd12:	f107 0010 	add.w	r0, r7, #16
 800cd16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cd1a:	9302      	str	r3, [sp, #8]
 800cd1c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cd26:	9300      	str	r3, [sp, #0]
 800cd28:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cd2c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cd30:	68f9      	ldr	r1, [r7, #12]
 800cd32:	f7fb fd5b 	bl	80087ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800cd36:	f107 0310 	add.w	r3, r7, #16
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	47a0      	blx	r4
 800cd40:	f107 0310 	add.w	r3, r7, #16
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fc fc2b 	bl	80095a0 <_ZN15ContainsFailureD1Ev>
 800cd4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f9 ff3f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cd54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f7f9 ff3a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cd5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7f9 ff35 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).contains(expected))
 800cd68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f9 fb77 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cd74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd78:	68b9      	ldr	r1, [r7, #8]
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7f9 fb71 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cd80:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cd84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f9 fbe7 	bl	800655e <_ZNK12SimpleString8containsERKS_>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f083 0301 	eor.w	r3, r3, #1
 800cd96:	b2dc      	uxtb	r4, r3
 800cd98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f7f9 ff18 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cda2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f9 ff13 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cdac:	2c00      	cmp	r4, #0
 800cdae:	d042      	beq.n	800ce36 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	3398      	adds	r3, #152	; 0x98
 800cdb6:	681c      	ldr	r4, [r3, #0]
 800cdb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cdbc:	68b9      	ldr	r1, [r7, #8]
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	f7f9 fb4f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cdc4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cdc8:	6879      	ldr	r1, [r7, #4]
 800cdca:	4618      	mov	r0, r3
 800cdcc:	f7f9 fb49 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cdd0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	f7f9 fb43 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cddc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800cde0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cde4:	9302      	str	r3, [sp, #8]
 800cde6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cdf6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cdfa:	68f9      	ldr	r1, [r7, #12]
 800cdfc:	f7fb fcf6 	bl	80087ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800ce00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ce04:	4619      	mov	r1, r3
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	47a0      	blx	r4
 800ce0a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f7fc fbc6 	bl	80095a0 <_ZN15ContainsFailureD1Ev>
 800ce14:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7f9 feda 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ce1e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7f9 fed5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ce28:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f7f9 fed0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ce32:	e000      	b.n	800ce36 <_ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ce34:	bf00      	nop
}
 800ce36:	37bc      	adds	r7, #188	; 0xbc
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd90      	pop	{r4, r7, pc}

0800ce3c <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j>:

void UtestShell::assertCstrNoCaseContains(const char* expected, const char* actual, const char* text, const char* fileName, size_t lineNumber)
{
 800ce3c:	b590      	push	{r4, r7, lr}
 800ce3e:	b0b3      	sub	sp, #204	; 0xcc
 800ce40:	af04      	add	r7, sp, #16
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 fd4e 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800ce50:	4603      	mov	r3, r0
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	3228      	adds	r2, #40	; 0x28
 800ce56:	6812      	ldr	r2, [r2, #0]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	4790      	blx	r2
    if (actual == NULLPTR && expected == NULLPTR) return;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d103      	bne.n	800ce6a <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x2e>
 800ce62:	68bb      	ldr	r3, [r7, #8]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 80ad 	beq.w	800cfc4 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x188>
    if (actual == NULLPTR || expected == NULLPTR)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x3a>
 800ce70:	68bb      	ldr	r3, [r7, #8]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d140      	bne.n	800cef8 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0xbc>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3398      	adds	r3, #152	; 0x98
 800ce7c:	681c      	ldr	r4, [r3, #0]
 800ce7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7f9 faec 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ce8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7f9 fae6 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ce96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7f9 fae0 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cea2:	f107 0010 	add.w	r0, r7, #16
 800cea6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ceaa:	9302      	str	r3, [sp, #8]
 800ceac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800ceb0:	9301      	str	r3, [sp, #4]
 800ceb2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cebc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cec0:	68f9      	ldr	r1, [r7, #12]
 800cec2:	f7fb fc93 	bl	80087ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800cec6:	f107 0310 	add.w	r3, r7, #16
 800ceca:	4619      	mov	r1, r3
 800cecc:	68f8      	ldr	r0, [r7, #12]
 800cece:	47a0      	blx	r4
 800ced0:	f107 0310 	add.w	r3, r7, #16
 800ced4:	4618      	mov	r0, r3
 800ced6:	f7fc fb63 	bl	80095a0 <_ZN15ContainsFailureD1Ev>
 800ceda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f9 fe77 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7f9 fe72 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ceee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f9 fe6d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (!SimpleString(actual).containsNoCase(expected))
 800cef8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f9 faaf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cf04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cf08:	68b9      	ldr	r1, [r7, #8]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f7f9 faa9 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cf10:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800cf14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cf18:	4611      	mov	r1, r2
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7f9 fb3a 	bl	8006594 <_ZNK12SimpleString14containsNoCaseERKS_>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f083 0301 	eor.w	r3, r3, #1
 800cf26:	b2dc      	uxtb	r4, r3
 800cf28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f9 fe50 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cf32:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7f9 fe4b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cf3c:	2c00      	cmp	r4, #0
 800cf3e:	d042      	beq.n	800cfc6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
        failWith(ContainsFailure(this, fileName, lineNumber, expected, actual, text));
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	3398      	adds	r3, #152	; 0x98
 800cf46:	681c      	ldr	r4, [r3, #0]
 800cf48:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7f9 fa87 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cf54:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cf58:	6879      	ldr	r1, [r7, #4]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7f9 fa81 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cf60:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7f9 fa7b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800cf6c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800cf70:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cf80:	9300      	str	r3, [sp, #0]
 800cf82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cf86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cf8a:	68f9      	ldr	r1, [r7, #12]
 800cf8c:	f7fb fc2e 	bl	80087ec <_ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800cf90:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf94:	4619      	mov	r1, r3
 800cf96:	68f8      	ldr	r0, [r7, #12]
 800cf98:	47a0      	blx	r4
 800cf9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7fc fafe 	bl	80095a0 <_ZN15ContainsFailureD1Ev>
 800cfa4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7f9 fe12 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cfae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7f9 fe0d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cfb8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f7f9 fe08 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800cfc2:	e000      	b.n	800cfc6 <_ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j+0x18a>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800cfc4:	bf00      	nop
}
 800cfc6:	37bc      	adds	r7, #188	; 0xbc
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd90      	pop	{r4, r7, pc}

0800cfcc <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator>:

void UtestShell::assertLongsEqual(long expected, long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800cfcc:	b590      	push	{r4, r7, lr}
 800cfce:	b099      	sub	sp, #100	; 0x64
 800cfd0:	af04      	add	r7, sp, #16
 800cfd2:	60f8      	str	r0, [r7, #12]
 800cfd4:	60b9      	str	r1, [r7, #8]
 800cfd6:	607a      	str	r2, [r7, #4]
 800cfd8:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f000 fc86 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	681a      	ldr	r2, [r3, #0]
 800cfe4:	3228      	adds	r2, #40	; 0x28
 800cfe6:	6812      	ldr	r2, [r2, #0]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	4790      	blx	r2
    if (expected != actual)
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d027      	beq.n	800d044 <_ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator+0x78>
        failWith(LongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	339c      	adds	r3, #156	; 0x9c
 800cffa:	681c      	ldr	r4, [r3, #0]
 800cffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d000:	6839      	ldr	r1, [r7, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f7f9 fa2d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d008:	f107 0014 	add.w	r0, r7, #20
 800d00c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d010:	9302      	str	r3, [sp, #8]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	9301      	str	r3, [sp, #4]
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	9300      	str	r3, [sp, #0]
 800d01a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d01c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	f7fb fc94 	bl	800894c <_ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString>
 800d024:	f107 0314 	add.w	r3, r7, #20
 800d028:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d02a:	4619      	mov	r1, r3
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	47a0      	blx	r4
 800d030:	f107 0314 	add.w	r3, r7, #20
 800d034:	4618      	mov	r0, r3
 800d036:	f7fc fa6f 	bl	8009518 <_ZN17LongsEqualFailureD1Ev>
 800d03a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f9 fdc7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d044:	bf00      	nop
 800d046:	3754      	adds	r7, #84	; 0x54
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd90      	pop	{r4, r7, pc}

0800d04c <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongsEqual(unsigned long expected, unsigned long actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d04c:	b590      	push	{r4, r7, lr}
 800d04e:	b099      	sub	sp, #100	; 0x64
 800d050:	af04      	add	r7, sp, #16
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	607a      	str	r2, [r7, #4]
 800d058:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f000 fc46 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d060:	4603      	mov	r3, r0
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	3228      	adds	r2, #40	; 0x28
 800d066:	6812      	ldr	r2, [r2, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	4790      	blx	r2
    if (expected != actual)
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	429a      	cmp	r2, r3
 800d072:	d027      	beq.n	800d0c4 <_ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator+0x78>
        failWith(UnsignedLongsEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	339c      	adds	r3, #156	; 0x9c
 800d07a:	681c      	ldr	r4, [r3, #0]
 800d07c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	4618      	mov	r0, r3
 800d084:	f7f9 f9ed 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d088:	f107 0014 	add.w	r0, r7, #20
 800d08c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d090:	9302      	str	r3, [sp, #8]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	9301      	str	r3, [sp, #4]
 800d096:	68bb      	ldr	r3, [r7, #8]
 800d098:	9300      	str	r3, [sp, #0]
 800d09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d09c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d09e:	68f9      	ldr	r1, [r7, #12]
 800d0a0:	f7fb fd20 	bl	8008ae4 <_ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString>
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d0aa:	4619      	mov	r1, r3
 800d0ac:	68f8      	ldr	r0, [r7, #12]
 800d0ae:	47a0      	blx	r4
 800d0b0:	f107 0314 	add.w	r3, r7, #20
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fc fa0d 	bl	80094d4 <_ZN25UnsignedLongsEqualFailureD1Ev>
 800d0ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7f9 fd87 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d0c4:	bf00      	nop
 800d0c6:	3754      	adds	r7, #84	; 0x54
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd90      	pop	{r4, r7, pc}

0800d0cc <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertLongLongsEqual(cpputest_longlong expected, cpputest_longlong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	b590      	push	{r4, r7, lr}
 800d0d0:	b099      	sub	sp, #100	; 0x64
 800d0d2:	af02      	add	r7, sp, #8
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	1d38      	adds	r0, r7, #4
 800d0d8:	e880 0006 	stmia.w	r0, {r1, r2}
 800d0dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f000 fc04 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	3228      	adds	r2, #40	; 0x28
 800d0ea:	6812      	ldr	r2, [r2, #0]
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	4790      	blx	r2
    if (expected != actual)
        failWith(LongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	339c      	adds	r3, #156	; 0x9c
 800d0f6:	681c      	ldr	r4, [r3, #0]
 800d0f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d0fc:	4919      	ldr	r1, [pc, #100]	; (800d164 <_ZN10UtestShell20assertLongLongsEqualE17cpputest_longlongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7f9 f9af 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d108:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7f9 f9a9 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d110:	f107 0014 	add.w	r0, r7, #20
 800d114:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d118:	9301      	str	r3, [sp, #4]
 800d11a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d122:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d124:	68f9      	ldr	r1, [r7, #12]
 800d126:	f7fc f8c3 	bl	80092b0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800d12a:	f107 0314 	add.w	r3, r7, #20
 800d12e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d132:	4619      	mov	r1, r3
 800d134:	68f8      	ldr	r0, [r7, #12]
 800d136:	47a0      	blx	r4
 800d138:	f107 0314 	add.w	r3, r7, #20
 800d13c:	4618      	mov	r0, r3
 800d13e:	f7fc f8fd 	bl	800933c <_ZN25FeatureUnsupportedFailureD1Ev>
 800d142:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d146:	4618      	mov	r0, r3
 800d148:	f7f9 fd43 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d14c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d150:	4618      	mov	r0, r3
 800d152:	f7f9 fd3e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
#endif
}
 800d156:	bf00      	nop
 800d158:	375c      	adds	r7, #92	; 0x5c
 800d15a:	46bd      	mov	sp, r7
 800d15c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d160:	b002      	add	sp, #8
 800d162:	4770      	bx	lr
 800d164:	080156ec 	.word	0x080156ec

0800d168 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator>:

void UtestShell::assertUnsignedLongLongsEqual(cpputest_ulonglong expected, cpputest_ulonglong actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d168:	b082      	sub	sp, #8
 800d16a:	b590      	push	{r4, r7, lr}
 800d16c:	b099      	sub	sp, #100	; 0x64
 800d16e:	af02      	add	r7, sp, #8
 800d170:	60f8      	str	r0, [r7, #12]
 800d172:	1d38      	adds	r0, r7, #4
 800d174:	e880 0006 	stmia.w	r0, {r1, r2}
 800d178:	66fb      	str	r3, [r7, #108]	; 0x6c
    getTestResult()->countCheck();
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f000 fbb6 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d180:	4603      	mov	r3, r0
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	3228      	adds	r2, #40	; 0x28
 800d186:	6812      	ldr	r2, [r2, #0]
 800d188:	4618      	mov	r0, r3
 800d18a:	4790      	blx	r2
    if (expected != actual)
        failWith(UnsignedLongLongsEqualFailure(this, fileName, lineNumber, expected, actual, text), testTerminator);
#else
    (void)expected;
    (void)actual;
    failWith(FeatureUnsupportedFailure(this, fileName, lineNumber, "CPPUTEST_USE_LONG_LONG", text), testTerminator);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	339c      	adds	r3, #156	; 0x9c
 800d192:	681c      	ldr	r4, [r3, #0]
 800d194:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d198:	4919      	ldr	r1, [pc, #100]	; (800d200 <_ZN10UtestShell28assertUnsignedLongLongsEqualE18cpputest_ulonglongS0_PKcS2_jRK14TestTerminator+0x98>)
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7f9 f961 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d1a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1a4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7f9 f95b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d1ac:	f107 0014 	add.w	r0, r7, #20
 800d1b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d1be:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d1c0:	68f9      	ldr	r1, [r7, #12]
 800d1c2:	f7fc f875 	bl	80092b0 <_ZN25FeatureUnsupportedFailureC1EP10UtestShellPKcjRK12SimpleStringS6_>
 800d1c6:	f107 0314 	add.w	r3, r7, #20
 800d1ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1ce:	4619      	mov	r1, r3
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	47a0      	blx	r4
 800d1d4:	f107 0314 	add.w	r3, r7, #20
 800d1d8:	4618      	mov	r0, r3
 800d1da:	f7fc f8af 	bl	800933c <_ZN25FeatureUnsupportedFailureD1Ev>
 800d1de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f9 fcf5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d1e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7f9 fcf0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
#endif
}
 800d1f2:	bf00      	nop
 800d1f4:	375c      	adds	r7, #92	; 0x5c
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800d1fc:	b002      	add	sp, #8
 800d1fe:	4770      	bx	lr
 800d200:	080156ec 	.word	0x080156ec

0800d204 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator>:

void UtestShell::assertSignedBytesEqual(signed char expected, signed char actual, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d204:	b590      	push	{r4, r7, lr}
 800d206:	b099      	sub	sp, #100	; 0x64
 800d208:	af04      	add	r7, sp, #16
 800d20a:	60f8      	str	r0, [r7, #12]
 800d20c:	607b      	str	r3, [r7, #4]
 800d20e:	460b      	mov	r3, r1
 800d210:	72fb      	strb	r3, [r7, #11]
 800d212:	4613      	mov	r3, r2
 800d214:	72bb      	strb	r3, [r7, #10]
    getTestResult()->countCheck();
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f000 fb68 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d21c:	4603      	mov	r3, r0
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	3228      	adds	r2, #40	; 0x28
 800d222:	6812      	ldr	r2, [r2, #0]
 800d224:	4618      	mov	r0, r3
 800d226:	4790      	blx	r2
    if (expected != actual)
 800d228:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800d22c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800d230:	429a      	cmp	r2, r3
 800d232:	d029      	beq.n	800d288 <_ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator+0x84>
        failWith(SignedBytesEqualFailure (this, fileName, lineNumber, expected, actual, text), testTerminator);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	339c      	adds	r3, #156	; 0x9c
 800d23a:	681c      	ldr	r4, [r3, #0]
 800d23c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d240:	6879      	ldr	r1, [r7, #4]
 800d242:	4618      	mov	r0, r3
 800d244:	f7f9 f90d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d248:	f107 0014 	add.w	r0, r7, #20
 800d24c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d250:	9302      	str	r3, [sp, #8]
 800d252:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800d256:	9301      	str	r3, [sp, #4]
 800d258:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d25c:	9300      	str	r3, [sp, #0]
 800d25e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d260:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d262:	68f9      	ldr	r1, [r7, #12]
 800d264:	f7fb fd0a 	bl	8008c7c <_ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString>
 800d268:	f107 0314 	add.w	r3, r7, #20
 800d26c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d26e:	4619      	mov	r1, r3
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	47a0      	blx	r4
 800d274:	f107 0314 	add.w	r3, r7, #20
 800d278:	4618      	mov	r0, r3
 800d27a:	f7fc f909 	bl	8009490 <_ZN23SignedBytesEqualFailureD1Ev>
 800d27e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d282:	4618      	mov	r0, r3
 800d284:	f7f9 fca5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d288:	bf00      	nop
 800d28a:	3754      	adds	r7, #84	; 0x54
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd90      	pop	{r4, r7, pc}

0800d290 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertPointersEqual(const void* expected, const void* actual, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b09d      	sub	sp, #116	; 0x74
 800d294:	af04      	add	r7, sp, #16
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	60b9      	str	r1, [r7, #8]
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f000 fb24 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	3228      	adds	r2, #40	; 0x28
 800d2aa:	6812      	ldr	r2, [r2, #0]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	4790      	blx	r2
    if (expected != actual)
 800d2b0:	68ba      	ldr	r2, [r7, #8]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d03f      	beq.n	800d338 <_ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	339c      	adds	r3, #156	; 0x9c
 800d2be:	681c      	ldr	r4, [r3, #0]
 800d2c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d2c4:	68b9      	ldr	r1, [r7, #8]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7f9 ff50 	bl	800716c <_Z10StringFromPKv>
 800d2cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7f9 ff4a 	bl	800716c <_Z10StringFromPKv>
 800d2d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7f9 f8bf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d2e4:	f107 0014 	add.w	r0, r7, #20
 800d2e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d2ec:	9302      	str	r3, [sp, #8]
 800d2ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d2fe:	68f9      	ldr	r1, [r7, #12]
 800d300:	f7fb f88a 	bl	8008418 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d304:	f107 0314 	add.w	r3, r7, #20
 800d308:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d30a:	4619      	mov	r1, r3
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	47a0      	blx	r4
 800d310:	f107 0314 	add.w	r3, r7, #20
 800d314:	4618      	mov	r0, r3
 800d316:	f7fc f9cb 	bl	80096b0 <_ZN13EqualsFailureD1Ev>
 800d31a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d31e:	4618      	mov	r0, r3
 800d320:	f7f9 fc57 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d324:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f9 fc52 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d32e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d332:	4618      	mov	r0, r3
 800d334:	f7f9 fc4d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d338:	bf00      	nop
 800d33a:	3764      	adds	r7, #100	; 0x64
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd90      	pop	{r4, r7, pc}

0800d340 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator>:

void UtestShell::assertFunctionPointersEqual(void (*expected)(), void (*actual)(), const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d340:	b590      	push	{r4, r7, lr}
 800d342:	b09d      	sub	sp, #116	; 0x74
 800d344:	af04      	add	r7, sp, #16
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f000 facc 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d354:	4603      	mov	r3, r0
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	3228      	adds	r2, #40	; 0x28
 800d35a:	6812      	ldr	r2, [r2, #0]
 800d35c:	4618      	mov	r0, r3
 800d35e:	4790      	blx	r2
    if (expected != actual)
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	429a      	cmp	r2, r3
 800d366:	d03f      	beq.n	800d3e8 <_ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator+0xa8>
        failWith(EqualsFailure(this, fileName, lineNumber, StringFrom(expected), StringFrom(actual), text), testTerminator);
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	339c      	adds	r3, #156	; 0x9c
 800d36e:	681c      	ldr	r4, [r3, #0]
 800d370:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d374:	68b9      	ldr	r1, [r7, #8]
 800d376:	4618      	mov	r0, r3
 800d378:	f7f9 ff22 	bl	80071c0 <_Z10StringFromPFvvE>
 800d37c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d380:	6879      	ldr	r1, [r7, #4]
 800d382:	4618      	mov	r0, r3
 800d384:	f7f9 ff1c 	bl	80071c0 <_Z10StringFromPFvvE>
 800d388:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f9 f867 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d394:	f107 0014 	add.w	r0, r7, #20
 800d398:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d39c:	9302      	str	r3, [sp, #8]
 800d39e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d3a2:	9301      	str	r3, [sp, #4]
 800d3a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d3a8:	9300      	str	r3, [sp, #0]
 800d3aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d3ae:	68f9      	ldr	r1, [r7, #12]
 800d3b0:	f7fb f832 	bl	8008418 <_ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d3b4:	f107 0314 	add.w	r3, r7, #20
 800d3b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	47a0      	blx	r4
 800d3c0:	f107 0314 	add.w	r3, r7, #20
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fc f973 	bl	80096b0 <_ZN13EqualsFailureD1Ev>
 800d3ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7f9 fbff 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d3d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7f9 fbfa 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d3de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f9 fbf5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d3e8:	bf00      	nop
 800d3ea:	3764      	adds	r7, #100	; 0x64
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd90      	pop	{r4, r7, pc}

0800d3f0 <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator>:

void UtestShell::assertDoublesEqual(double expected, double actual, double threshold, const char* text, const char* fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d3f0:	b590      	push	{r4, r7, lr}
 800d3f2:	b09d      	sub	sp, #116	; 0x74
 800d3f4:	af02      	add	r7, sp, #8
 800d3f6:	6278      	str	r0, [r7, #36]	; 0x24
 800d3f8:	ed87 0b06 	vstr	d0, [r7, #24]
 800d3fc:	ed87 1b04 	vstr	d1, [r7, #16]
 800d400:	ed87 2b02 	vstr	d2, [r7, #8]
 800d404:	6239      	str	r1, [r7, #32]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d40c:	f000 fa6e 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d410:	4603      	mov	r3, r0
 800d412:	681a      	ldr	r2, [r3, #0]
 800d414:	3228      	adds	r2, #40	; 0x28
 800d416:	6812      	ldr	r2, [r2, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	4790      	blx	r2
    if (!doubles_equal(expected, actual, threshold))
 800d41c:	ed97 2b02 	vldr	d2, [r7, #8]
 800d420:	ed97 1b04 	vldr	d1, [r7, #16]
 800d424:	ed97 0b06 	vldr	d0, [r7, #24]
 800d428:	f7fe fdc0 	bl	800bfac <_Z13doubles_equalddd>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f083 0301 	eor.w	r3, r3, #1
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b00      	cmp	r3, #0
 800d436:	d029      	beq.n	800d48c <_ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator+0x9c>
        failWith(DoublesEqualFailure(this, fileName, lineNumber, expected, actual, threshold, text), testTerminator);
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	339c      	adds	r3, #156	; 0x9c
 800d43e:	681c      	ldr	r4, [r3, #0]
 800d440:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d444:	6a39      	ldr	r1, [r7, #32]
 800d446:	4618      	mov	r0, r3
 800d448:	f7f9 f80b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d44c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800d450:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d454:	9300      	str	r3, [sp, #0]
 800d456:	ed97 2b02 	vldr	d2, [r7, #8]
 800d45a:	ed97 1b04 	vldr	d1, [r7, #16]
 800d45e:	ed97 0b06 	vldr	d0, [r7, #24]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d468:	f7fb f818 	bl	800849c <_ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString>
 800d46c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d470:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d472:	4619      	mov	r1, r3
 800d474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d476:	47a0      	blx	r4
 800d478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d47c:	4618      	mov	r0, r3
 800d47e:	f7fc f8f5 	bl	800966c <_ZN19DoublesEqualFailureD1Ev>
 800d482:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d486:	4618      	mov	r0, r3
 800d488:	f7f9 fba3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d48c:	bf00      	nop
 800d48e:	376c      	adds	r7, #108	; 0x6c
 800d490:	46bd      	mov	sp, r7
 800d492:	bd90      	pop	{r4, r7, pc}

0800d494 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator>:

void UtestShell::assertBinaryEqual(const void *expected, const void *actual, size_t length, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b0a7      	sub	sp, #156	; 0x9c
 800d498:	af04      	add	r7, sp, #16
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d4a2:	68f8      	ldr	r0, [r7, #12]
 800d4a4:	f000 fa22 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	3228      	adds	r2, #40	; 0x28
 800d4ae:	6812      	ldr	r2, [r2, #0]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	4790      	blx	r2
	if (length == 0) return;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d075      	beq.n	800d5a6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x112>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d102      	bne.n	800d4c6 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x32>
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d071      	beq.n	800d5aa <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x116>
    if (actual == NULLPTR || expected == NULLPTR)
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x3e>
 800d4cc:	68bb      	ldr	r3, [r7, #8]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d12d      	bne.n	800d52e <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x9a>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	339c      	adds	r3, #156	; 0x9c
 800d4d8:	681c      	ldr	r4, [r3, #0]
 800d4da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d4de:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7f8 ffbd 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d4e8:	f107 0010 	add.w	r0, r7, #16
 800d4ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d4f0:	9303      	str	r3, [sp, #12]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	9302      	str	r3, [sp, #8]
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	9301      	str	r3, [sp, #4]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	9300      	str	r3, [sp, #0]
 800d4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d502:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	f7fb fde6 	bl	80090d8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800d50c:	f107 0310 	add.w	r3, r7, #16
 800d510:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d514:	4619      	mov	r1, r3
 800d516:	68f8      	ldr	r0, [r7, #12]
 800d518:	47a0      	blx	r4
 800d51a:	f107 0310 	add.w	r3, r7, #16
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fb ff50 	bl	80093c4 <_ZN18BinaryEqualFailureD1Ev>
 800d524:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d528:	4618      	mov	r0, r3
 800d52a:	f7f9 fb52 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (SimpleString::MemCmp(expected, actual, length) != 0)
 800d52e:	683a      	ldr	r2, [r7, #0]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	68b8      	ldr	r0, [r7, #8]
 800d534:	f7f8 feb4 	bl	80062a0 <_ZN12SimpleString6MemCmpEPKvS1_j>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bf14      	ite	ne
 800d53e:	2301      	movne	r3, #1
 800d540:	2300      	moveq	r3, #0
 800d542:	b2db      	uxtb	r3, r3
 800d544:	2b00      	cmp	r3, #0
 800d546:	d031      	beq.n	800d5ac <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
        failWith(BinaryEqualFailure(this, fileName, lineNumber, (const unsigned char *) expected, (const unsigned char *) actual, length, text), testTerminator);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	339c      	adds	r3, #156	; 0x9c
 800d54e:	681c      	ldr	r4, [r3, #0]
 800d550:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d554:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f8 ff82 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d55e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800d562:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d566:	9303      	str	r3, [sp, #12]
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	9302      	str	r3, [sp, #8]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	9300      	str	r3, [sp, #0]
 800d574:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d578:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800d57c:	68f9      	ldr	r1, [r7, #12]
 800d57e:	f7fb fdab 	bl	80090d8 <_ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString>
 800d582:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d586:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d58a:	4619      	mov	r1, r3
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	47a0      	blx	r4
 800d590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d594:	4618      	mov	r0, r3
 800d596:	f7fb ff15 	bl	80093c4 <_ZN18BinaryEqualFailureD1Ev>
 800d59a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7f9 fb17 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d5a4:	e002      	b.n	800d5ac <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
	if (length == 0) return;
 800d5a6:	bf00      	nop
 800d5a8:	e000      	b.n	800d5ac <_ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator+0x118>
    if (actual == NULLPTR && expected == NULLPTR) return;
 800d5aa:	bf00      	nop
}
 800d5ac:	378c      	adds	r7, #140	; 0x8c
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd90      	pop	{r4, r7, pc}

0800d5b2 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator>:

void UtestShell::assertBitsEqual(unsigned long expected, unsigned long actual, unsigned long mask, size_t byteCount, const char* text, const char *fileName, size_t lineNumber, const TestTerminator& testTerminator)
{
 800d5b2:	b590      	push	{r4, r7, lr}
 800d5b4:	b09b      	sub	sp, #108	; 0x6c
 800d5b6:	af06      	add	r7, sp, #24
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
 800d5be:	603b      	str	r3, [r7, #0]
    getTestResult()->countCheck();
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f000 f993 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	3228      	adds	r2, #40	; 0x28
 800d5cc:	6812      	ldr	r2, [r2, #0]
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	4790      	blx	r2
    if ((expected & mask) != (actual & mask))
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	405a      	eors	r2, r3
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	4013      	ands	r3, r2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d02b      	beq.n	800d638 <_ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator+0x86>
        failWith(BitsEqualFailure(this, fileName, lineNumber, expected, actual, mask, byteCount, text), testTerminator);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	339c      	adds	r3, #156	; 0x9c
 800d5e6:	681c      	ldr	r4, [r3, #0]
 800d5e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7f8 ff37 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d5f4:	f107 0014 	add.w	r0, r7, #20
 800d5f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d5fc:	9304      	str	r3, [sp, #16]
 800d5fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d600:	9303      	str	r3, [sp, #12]
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	9302      	str	r3, [sp, #8]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	9301      	str	r3, [sp, #4]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d610:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d612:	68f9      	ldr	r1, [r7, #12]
 800d614:	f7fb fdf0 	bl	80091f8 <_ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString>
 800d618:	f107 0314 	add.w	r3, r7, #20
 800d61c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d61e:	4619      	mov	r1, r3
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	47a0      	blx	r4
 800d624:	f107 0314 	add.w	r3, r7, #20
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fb fea9 	bl	8009380 <_ZN16BitsEqualFailureD1Ev>
 800d62e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d632:	4618      	mov	r0, r3
 800d634:	f7f9 facd 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d638:	bf00      	nop
 800d63a:	3754      	adds	r7, #84	; 0x54
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd90      	pop	{r4, r7, pc}

0800d640 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertEquals(bool failed, const char* expected, const char* actual, const char* text, const char* file, size_t line, const TestTerminator& testTerminator)
{
 800d640:	b590      	push	{r4, r7, lr}
 800d642:	b09d      	sub	sp, #116	; 0x74
 800d644:	af04      	add	r7, sp, #16
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	607a      	str	r2, [r7, #4]
 800d64a:	603b      	str	r3, [r7, #0]
 800d64c:	460b      	mov	r3, r1
 800d64e:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f000 f94b 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d656:	4603      	mov	r3, r0
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	3228      	adds	r2, #40	; 0x28
 800d65c:	6812      	ldr	r2, [r2, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	4790      	blx	r2
    if (failed)
 800d662:	7afb      	ldrb	r3, [r7, #11]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d03f      	beq.n	800d6e8 <_ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator+0xa8>
        failWith(CheckEqualFailure(this, file, line, expected, actual, text), testTerminator);
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	339c      	adds	r3, #156	; 0x9c
 800d66e:	681c      	ldr	r4, [r3, #0]
 800d670:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	4618      	mov	r0, r3
 800d678:	f7f8 fef3 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d67c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	4618      	mov	r0, r3
 800d684:	f7f8 feed 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d688:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d68c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f8 fee7 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d694:	f107 0014 	add.w	r0, r7, #20
 800d698:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d69c:	9302      	str	r3, [sp, #8]
 800d69e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d6a2:	9301      	str	r3, [sp, #4]
 800d6a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6a8:	9300      	str	r3, [sp, #0]
 800d6aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d6ae:	68f9      	ldr	r1, [r7, #12]
 800d6b0:	f7fa ffa6 	bl	8008600 <_ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d6b4:	f107 0314 	add.w	r3, r7, #20
 800d6b8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d6ba:	4619      	mov	r1, r3
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	47a0      	blx	r4
 800d6c0:	f107 0314 	add.w	r3, r7, #20
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fb ffaf 	bl	8009628 <_ZN17CheckEqualFailureD1Ev>
 800d6ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7f9 fa7f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d6d4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7f9 fa7a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d6de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7f9 fa75 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d6e8:	bf00      	nop
 800d6ea:	3764      	adds	r7, #100	; 0x64
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd90      	pop	{r4, r7, pc}

0800d6f0 <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator>:

void UtestShell::assertCompare(bool comparison, const char *checkString, const char *comparisonString, const char *text, const char *fileName, size_t lineNumber, const TestTerminator &testTerminator)
{
 800d6f0:	b590      	push	{r4, r7, lr}
 800d6f2:	b09d      	sub	sp, #116	; 0x74
 800d6f4:	af04      	add	r7, sp, #16
 800d6f6:	60f8      	str	r0, [r7, #12]
 800d6f8:	607a      	str	r2, [r7, #4]
 800d6fa:	603b      	str	r3, [r7, #0]
 800d6fc:	460b      	mov	r3, r1
 800d6fe:	72fb      	strb	r3, [r7, #11]
    getTestResult()->countCheck();
 800d700:	68f8      	ldr	r0, [r7, #12]
 800d702:	f000 f8f3 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d706:	4603      	mov	r3, r0
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	3228      	adds	r2, #40	; 0x28
 800d70c:	6812      	ldr	r2, [r2, #0]
 800d70e:	4618      	mov	r0, r3
 800d710:	4790      	blx	r2
    if (!comparison)
 800d712:	7afb      	ldrb	r3, [r7, #11]
 800d714:	f083 0301 	eor.w	r3, r3, #1
 800d718:	b2db      	uxtb	r3, r3
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d03f      	beq.n	800d79e <_ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator+0xae>
        failWith(ComparisonFailure(this, fileName, lineNumber, checkString, comparisonString, text), testTerminator);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	339c      	adds	r3, #156	; 0x9c
 800d724:	681c      	ldr	r4, [r3, #0]
 800d726:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d72a:	6879      	ldr	r1, [r7, #4]
 800d72c:	4618      	mov	r0, r3
 800d72e:	f7f8 fe98 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d732:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f8 fe92 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d73e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d742:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800d744:	4618      	mov	r0, r3
 800d746:	f7f8 fe8c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800d74a:	f107 0014 	add.w	r0, r7, #20
 800d74e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d752:	9302      	str	r3, [sp, #8]
 800d754:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d762:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d764:	68f9      	ldr	r1, [r7, #12]
 800d766:	f7fa fff9 	bl	800875c <_ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_>
 800d76a:	f107 0314 	add.w	r3, r7, #20
 800d76e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d770:	4619      	mov	r1, r3
 800d772:	68f8      	ldr	r0, [r7, #12]
 800d774:	47a0      	blx	r4
 800d776:	f107 0314 	add.w	r3, r7, #20
 800d77a:	4618      	mov	r0, r3
 800d77c:	f7fb ff32 	bl	80095e4 <_ZN17ComparisonFailureD1Ev>
 800d780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800d784:	4618      	mov	r0, r3
 800d786:	f7f9 fa24 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d78a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800d78e:	4618      	mov	r0, r3
 800d790:	f7f9 fa1f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800d794:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d798:	4618      	mov	r0, r3
 800d79a:	f7f9 fa1a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d79e:	bf00      	nop
 800d7a0:	3764      	adds	r7, #100	; 0x64
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd90      	pop	{r4, r7, pc}
	...

0800d7a8 <_ZN10UtestShell5printEPKcS1_j>:

void UtestShell::print(const char *text, const char* fileName, size_t lineNumber)
{
 800d7a8:	b5b0      	push	{r4, r5, r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
 800d7b4:	603b      	str	r3, [r7, #0]
    SimpleString stringToPrint = "\n";
 800d7b6:	f107 0310 	add.w	r3, r7, #16
 800d7ba:	4924      	ldr	r1, [pc, #144]	; (800d84c <_ZN10UtestShell5printEPKcS1_j+0xa4>)
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7f8 fe50 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    stringToPrint += fileName;
 800d7c2:	f107 0310 	add.w	r3, r7, #16
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f7f9 fa91 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += ":";
 800d7ce:	f107 0310 	add.w	r3, r7, #16
 800d7d2:	491f      	ldr	r1, [pc, #124]	; (800d850 <_ZN10UtestShell5printEPKcS1_j+0xa8>)
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f7f9 fa8b 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += StringFrom(lineNumber);
 800d7da:	f107 0318 	add.w	r3, r7, #24
 800d7de:	6839      	ldr	r1, [r7, #0]
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7f9 feab 	bl	800753c <_Z10StringFromj>
 800d7e6:	f107 0218 	add.w	r2, r7, #24
 800d7ea:	f107 0310 	add.w	r3, r7, #16
 800d7ee:	4611      	mov	r1, r2
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7f9 fa6b 	bl	8006ccc <_ZN12SimpleStringpLERKS_>
 800d7f6:	f107 0318 	add.w	r3, r7, #24
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7f9 f9e9 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    stringToPrint += " ";
 800d800:	f107 0310 	add.w	r3, r7, #16
 800d804:	4913      	ldr	r1, [pc, #76]	; (800d854 <_ZN10UtestShell5printEPKcS1_j+0xac>)
 800d806:	4618      	mov	r0, r3
 800d808:	f7f9 fa72 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    stringToPrint += text;
 800d80c:	f107 0310 	add.w	r3, r7, #16
 800d810:	68b9      	ldr	r1, [r7, #8]
 800d812:	4618      	mov	r0, r3
 800d814:	f7f9 fa6c 	bl	8006cf0 <_ZN12SimpleStringpLEPKc>
    getTestResult()->print(stringToPrint.asCharString());
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f000 f867 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d81e:	4604      	mov	r4, r0
 800d820:	6823      	ldr	r3, [r4, #0]
 800d822:	3338      	adds	r3, #56	; 0x38
 800d824:	681d      	ldr	r5, [r3, #0]
 800d826:	f107 0310 	add.w	r3, r7, #16
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7f9 f9a4 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800d830:	4603      	mov	r3, r0
 800d832:	4619      	mov	r1, r3
 800d834:	4620      	mov	r0, r4
 800d836:	47a8      	blx	r5
    SimpleString stringToPrint = "\n";
 800d838:	f107 0310 	add.w	r3, r7, #16
 800d83c:	4618      	mov	r0, r3
 800d83e:	f7f9 f9c8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800d842:	bf00      	nop
 800d844:	3720      	adds	r7, #32
 800d846:	46bd      	mov	sp, r7
 800d848:	bdb0      	pop	{r4, r5, r7, pc}
 800d84a:	bf00      	nop
 800d84c:	08015704 	.word	0x08015704
 800d850:	08015708 	.word	0x08015708
 800d854:	0801570c 	.word	0x0801570c

0800d858 <_ZN10UtestShell5printERK12SimpleStringPKcj>:

void UtestShell::print(const SimpleString& text, const char* fileName, size_t lineNumber)
{
 800d858:	b590      	push	{r4, r7, lr}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	60f8      	str	r0, [r7, #12]
 800d860:	60b9      	str	r1, [r7, #8]
 800d862:	607a      	str	r2, [r7, #4]
 800d864:	603b      	str	r3, [r7, #0]
    print(text.asCharString(), fileName, lineNumber);
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3370      	adds	r3, #112	; 0x70
 800d86c:	681c      	ldr	r4, [r3, #0]
 800d86e:	68b8      	ldr	r0, [r7, #8]
 800d870:	f7f9 f982 	bl	8006b78 <_ZNK12SimpleString12asCharStringEv>
 800d874:	4601      	mov	r1, r0
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	68f8      	ldr	r0, [r7, #12]
 800d87c:	47a0      	blx	r4
}
 800d87e:	bf00      	nop
 800d880:	3714      	adds	r7, #20
 800d882:	46bd      	mov	sp, r7
 800d884:	bd90      	pop	{r4, r7, pc}

0800d886 <_ZN10UtestShell16printVeryVerboseEPKc>:

void UtestShell::printVeryVerbose(const char* text)
{
 800d886:	b580      	push	{r7, lr}
 800d888:	b082      	sub	sp, #8
 800d88a:	af00      	add	r7, sp, #0
 800d88c:	6078      	str	r0, [r7, #4]
 800d88e:	6039      	str	r1, [r7, #0]
    getTestResult()->printVeryVerbose(text);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f82b 	bl	800d8ec <_ZN10UtestShell13getTestResultEv>
 800d896:	4603      	mov	r3, r0
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	323c      	adds	r2, #60	; 0x3c
 800d89c:	6812      	ldr	r2, [r2, #0]
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	4790      	blx	r2
}
 800d8a4:	bf00      	nop
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <_ZN10UtestShell13setTestResultEP10TestResult>:

TestResult* UtestShell::testResult_ = NULLPTR;
UtestShell* UtestShell::currentTest_ = NULLPTR;

void UtestShell::setTestResult(TestResult* result)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
    testResult_ = result;
 800d8b6:	4a04      	ldr	r2, [pc, #16]	; (800d8c8 <_ZN10UtestShell13setTestResultEP10TestResult+0x1c>)
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	6013      	str	r3, [r2, #0]
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr
 800d8c8:	200006a4 	.word	0x200006a4

0800d8cc <_ZN10UtestShell14setCurrentTestEPS_>:

void UtestShell::setCurrentTest(UtestShell* test)
{
 800d8cc:	b480      	push	{r7}
 800d8ce:	b083      	sub	sp, #12
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
 800d8d4:	6039      	str	r1, [r7, #0]
    currentTest_ = test;
 800d8d6:	4a04      	ldr	r2, [pc, #16]	; (800d8e8 <_ZN10UtestShell14setCurrentTestEPS_+0x1c>)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	6013      	str	r3, [r2, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr
 800d8e8:	200006a8 	.word	0x200006a8

0800d8ec <_ZN10UtestShell13getTestResultEv>:

TestResult* UtestShell::getTestResult()
{
 800d8ec:	b580      	push	{r7, lr}
 800d8ee:	b082      	sub	sp, #8
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
    if (testResult_ == NULLPTR)
 800d8f4:	4b09      	ldr	r3, [pc, #36]	; (800d91c <_ZN10UtestShell13getTestResultEv+0x30>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d109      	bne.n	800d910 <_ZN10UtestShell13getTestResultEv+0x24>
        return &OutsideTestRunnerUTest::instance().getTestResult();
 800d8fc:	f7fe fc28 	bl	800c150 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800d900:	4603      	mov	r3, r0
 800d902:	681a      	ldr	r2, [r3, #0]
 800d904:	32a4      	adds	r2, #164	; 0xa4
 800d906:	6812      	ldr	r2, [r2, #0]
 800d908:	4618      	mov	r0, r3
 800d90a:	4790      	blx	r2
 800d90c:	4603      	mov	r3, r0
 800d90e:	e001      	b.n	800d914 <_ZN10UtestShell13getTestResultEv+0x28>
    return testResult_;
 800d910:	4b02      	ldr	r3, [pc, #8]	; (800d91c <_ZN10UtestShell13getTestResultEv+0x30>)
 800d912:	681b      	ldr	r3, [r3, #0]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200006a4 	.word	0x200006a4

0800d920 <_ZN10UtestShell10getCurrentEv>:

UtestShell* UtestShell::getCurrent()
{
 800d920:	b580      	push	{r7, lr}
 800d922:	af00      	add	r7, sp, #0
    if (currentTest_ == NULLPTR)
 800d924:	4b05      	ldr	r3, [pc, #20]	; (800d93c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d103      	bne.n	800d934 <_ZN10UtestShell10getCurrentEv+0x14>
        return &OutsideTestRunnerUTest::instance();
 800d92c:	f7fe fc10 	bl	800c150 <_ZN22OutsideTestRunnerUTest8instanceEv>
 800d930:	4603      	mov	r3, r0
 800d932:	e001      	b.n	800d938 <_ZN10UtestShell10getCurrentEv+0x18>
    return currentTest_;
 800d934:	4b01      	ldr	r3, [pc, #4]	; (800d93c <_ZN10UtestShell10getCurrentEv+0x1c>)
 800d936:	681b      	ldr	r3, [r3, #0]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	200006a8 	.word	0x200006a8

0800d940 <_ZN10UtestShell24getCurrentTestTerminatorEv>:

const TestTerminator &UtestShell::getCurrentTestTerminator()
{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
    return *currentTestTerminator_;
 800d944:	4b03      	ldr	r3, [pc, #12]	; (800d954 <_ZN10UtestShell24getCurrentTestTerminatorEv+0x14>)
 800d946:	681b      	ldr	r3, [r3, #0]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20000090 	.word	0x20000090

0800d958 <_ZN10UtestShell14setCrashOnFailEv>:

void UtestShell::setCrashOnFail()
{
 800d958:	b480      	push	{r7}
 800d95a:	af00      	add	r7, sp, #0
    currentTestTerminator_ = &crashingTestTerminator;
 800d95c:	4b03      	ldr	r3, [pc, #12]	; (800d96c <_ZN10UtestShell14setCrashOnFailEv+0x14>)
 800d95e:	4a04      	ldr	r2, [pc, #16]	; (800d970 <_ZN10UtestShell14setCrashOnFailEv+0x18>)
 800d960:	601a      	str	r2, [r3, #0]
}
 800d962:	bf00      	nop
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	20000090 	.word	0x20000090
 800d970:	2000008c 	.word	0x2000008c

0800d974 <_ZN5UtestC1Ev>:
{
}

////////////// Utest ////////////

Utest::Utest()
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	4a04      	ldr	r2, [pc, #16]	; (800d990 <_ZN5UtestC1Ev+0x1c>)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	601a      	str	r2, [r3, #0]
{
}
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	4618      	mov	r0, r3
 800d986:	370c      	adds	r7, #12
 800d988:	46bd      	mov	sp, r7
 800d98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98e:	4770      	bx	lr
 800d990:	08016ea0 	.word	0x08016ea0

0800d994 <_ZN5UtestD1Ev>:

Utest::~Utest()
 800d994:	b480      	push	{r7}
 800d996:	b083      	sub	sp, #12
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	4a04      	ldr	r2, [pc, #16]	; (800d9b0 <_ZN5UtestD1Ev+0x1c>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	601a      	str	r2, [r3, #0]
{
}
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	370c      	adds	r7, #12
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	08016ea0 	.word	0x08016ea0

0800d9b4 <_ZN5UtestD0Ev>:
Utest::~Utest()
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
}
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f7ff ffe9 	bl	800d994 <_ZN5UtestD1Ev>
 800d9c2:	2104      	movs	r1, #4
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f7f7 fe77 	bl	80056b8 <_ZdlPvj>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <_ZN5Utest3runEv>:

}
#else

void Utest::run()
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
    if (PlatformSpecificSetJmp(helperDoTestSetup, this)) {
 800d9dc:	4b0d      	ldr	r3, [pc, #52]	; (800da14 <_ZN5Utest3runEv+0x40>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	480d      	ldr	r0, [pc, #52]	; (800da18 <_ZN5Utest3runEv+0x44>)
 800d9e4:	4798      	blx	r3
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	bf14      	ite	ne
 800d9ec:	2301      	movne	r3, #1
 800d9ee:	2300      	moveq	r3, #0
 800d9f0:	b2db      	uxtb	r3, r3
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d004      	beq.n	800da00 <_ZN5Utest3runEv+0x2c>
        PlatformSpecificSetJmp(helperDoTestBody, this);
 800d9f6:	4b07      	ldr	r3, [pc, #28]	; (800da14 <_ZN5Utest3runEv+0x40>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6879      	ldr	r1, [r7, #4]
 800d9fc:	4807      	ldr	r0, [pc, #28]	; (800da1c <_ZN5Utest3runEv+0x48>)
 800d9fe:	4798      	blx	r3
    }
    PlatformSpecificSetJmp(helperDoTestTeardown, this);
 800da00:	4b04      	ldr	r3, [pc, #16]	; (800da14 <_ZN5Utest3runEv+0x40>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	6879      	ldr	r1, [r7, #4]
 800da06:	4806      	ldr	r0, [pc, #24]	; (800da20 <_ZN5Utest3runEv+0x4c>)
 800da08:	4798      	blx	r3
}
 800da0a:	bf00      	nop
 800da0c:	3708      	adds	r7, #8
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	200000a0 	.word	0x200000a0
 800da18:	0800c1ad 	.word	0x0800c1ad
 800da1c:	0800c1c9 	.word	0x0800c1c9
 800da20:	0800c1e5 	.word	0x0800c1e5

0800da24 <_ZN5Utest5setupEv>:

#endif

void Utest::setup()
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
}
 800da2c:	bf00      	nop
 800da2e:	370c      	adds	r7, #12
 800da30:	46bd      	mov	sp, r7
 800da32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da36:	4770      	bx	lr

0800da38 <_ZN5Utest8testBodyEv>:

void Utest::testBody()
{
 800da38:	b480      	push	{r7}
 800da3a:	b083      	sub	sp, #12
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
}
 800da40:	bf00      	nop
 800da42:	370c      	adds	r7, #12
 800da44:	46bd      	mov	sp, r7
 800da46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4a:	4770      	bx	lr

0800da4c <_ZN5Utest8teardownEv>:

void Utest::teardown()
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
}
 800da54:	bf00      	nop
 800da56:	370c      	adds	r7, #12
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr

0800da60 <_ZN14TestTerminatorD1Ev>:


/////////////////// Terminators

TestTerminator::~TestTerminator()
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	4a04      	ldr	r2, [pc, #16]	; (800da7c <_ZN14TestTerminatorD1Ev+0x1c>)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	601a      	str	r2, [r3, #0]
{
}
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	4618      	mov	r0, r3
 800da72:	370c      	adds	r7, #12
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	08016e8c 	.word	0x08016e8c

0800da80 <_ZNK20NormalTestTerminator15exitCurrentTestEv>:

void NormalTestTerminator::exitCurrentTest() const
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
    #if CPPUTEST_USE_STD_CPP_LIB
        throw CppUTestFailedException();
    #else
        TestTerminatorWithoutExceptions().exitCurrentTest();
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	f107 030c 	add.w	r3, r7, #12
 800da90:	4618      	mov	r0, r3
 800da92:	f7f7 ffd3 	bl	8005a3c <_ZN31TestTerminatorWithoutExceptionsC1Ev>
 800da96:	f107 030c 	add.w	r3, r7, #12
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 f82c 	bl	800daf8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>
 800daa0:	f107 030c 	add.w	r3, r7, #12
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f835 	bl	800db14 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
    #endif
}
 800daaa:	bf00      	nop
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}
	...

0800dab4 <_ZN20NormalTestTerminatorD1Ev>:

NormalTestTerminator::~NormalTestTerminator()
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	4a05      	ldr	r2, [pc, #20]	; (800dad4 <_ZN20NormalTestTerminatorD1Ev+0x20>)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7ff ffcb 	bl	800da60 <_ZN14TestTerminatorD1Ev>
{
}
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	08016e78 	.word	0x08016e78

0800dad8 <_ZN20NormalTestTerminatorD0Ev>:
NormalTestTerminator::~NormalTestTerminator()
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
}
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f7ff ffe7 	bl	800dab4 <_ZN20NormalTestTerminatorD1Ev>
 800dae6:	2104      	movs	r1, #4
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7f7 fde5 	bl	80056b8 <_ZdlPvj>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv>:

void TestTerminatorWithoutExceptions::exitCurrentTest() const
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
    PlatformSpecificLongJmp();
 800db00:	4b03      	ldr	r3, [pc, #12]	; (800db10 <_ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv+0x18>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4798      	blx	r3
} // LCOV_EXCL_LINE
 800db06:	bf00      	nop
 800db08:	3708      	adds	r7, #8
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	2000009c 	.word	0x2000009c

0800db14 <_ZN31TestTerminatorWithoutExceptionsD1Ev>:

TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	4a05      	ldr	r2, [pc, #20]	; (800db34 <_ZN31TestTerminatorWithoutExceptionsD1Ev+0x20>)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	601a      	str	r2, [r3, #0]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	4618      	mov	r0, r3
 800db26:	f7ff ff9b 	bl	800da60 <_ZN14TestTerminatorD1Ev>
{
}
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4618      	mov	r0, r3
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	08016e64 	.word	0x08016e64

0800db38 <_ZN31TestTerminatorWithoutExceptionsD0Ev>:
TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
}
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff ffe7 	bl	800db14 <_ZN31TestTerminatorWithoutExceptionsD1Ev>
 800db46:	2104      	movs	r1, #4
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7f7 fdb5 	bl	80056b8 <_ZdlPvj>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4618      	mov	r0, r3
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <_ZNK22CrashingTestTerminator15exitCurrentTestEv>:

void CrashingTestTerminator::exitCurrentTest() const
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
    UtestShell::crash();
 800db60:	f7fe fbf4 	bl	800c34c <_ZN10UtestShell5crashEv>
    NormalTestTerminator::exitCurrentTest();
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff ff8a 	bl	800da80 <_ZNK20NormalTestTerminator15exitCurrentTestEv>
}
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}

0800db74 <_ZN22CrashingTestTerminatorD1Ev>:

CrashingTestTerminator::~CrashingTestTerminator()
 800db74:	b580      	push	{r7, lr}
 800db76:	b082      	sub	sp, #8
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	4a05      	ldr	r2, [pc, #20]	; (800db94 <_ZN22CrashingTestTerminatorD1Ev+0x20>)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	601a      	str	r2, [r3, #0]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff ff95 	bl	800dab4 <_ZN20NormalTestTerminatorD1Ev>
{
}
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4618      	mov	r0, r3
 800db8e:	3708      	adds	r7, #8
 800db90:	46bd      	mov	sp, r7
 800db92:	bd80      	pop	{r7, pc}
 800db94:	08016e50 	.word	0x08016e50

0800db98 <_ZN22CrashingTestTerminatorD0Ev>:
CrashingTestTerminator::~CrashingTestTerminator()
 800db98:	b580      	push	{r7, lr}
 800db9a:	b082      	sub	sp, #8
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
}
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f7ff ffe7 	bl	800db74 <_ZN22CrashingTestTerminatorD1Ev>
 800dba6:	2104      	movs	r1, #4
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f7f7 fd85 	bl	80056b8 <_ZdlPvj>
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <_ZN22UtestShellPointerArrayC1EP10UtestShell>:
    runIgnored_ = true;
}

//////////////////// UtestShellPointerArray

UtestShellPointerArray::UtestShellPointerArray(UtestShell* firstTest)
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
    : arrayOfTests_(NULLPTR), count_(0)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	601a      	str	r2, [r3, #0]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	605a      	str	r2, [r3, #4]
{
    count_ = (firstTest) ? firstTest->countTests() : 0;
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d007      	beq.n	800dbe4 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2c>
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3310      	adds	r3, #16
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	6838      	ldr	r0, [r7, #0]
 800dbde:	4798      	blx	r3
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	e000      	b.n	800dbe6 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x2e>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	6053      	str	r3, [r2, #4]
    if (count_ == 0) return;
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d02d      	beq.n	800dc4e <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x96>

    arrayOfTests_ = new UtestShell*[count_];
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d201      	bcs.n	800dc02 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4a>
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	e001      	b.n	800dc06 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x4e>
 800dc02:	f04f 33ff 	mov.w	r3, #4294967295
 800dc06:	f240 3237 	movw	r2, #823	; 0x337
 800dc0a:	4914      	ldr	r1, [pc, #80]	; (800dc5c <_ZN22UtestShellPointerArrayC1EP10UtestShell+0xa4>)
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	f7f7 fd63 	bl	80056d8 <_ZnajPKci>
 800dc12:	4602      	mov	r2, r0
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	601a      	str	r2, [r3, #0]

    UtestShell*currentTest = firstTest;
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	60bb      	str	r3, [r7, #8]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d212      	bcs.n	800dc50 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x98>
    {
        arrayOfTests_[i] = currentTest;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681a      	ldr	r2, [r3, #0]
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	68fa      	ldr	r2, [r7, #12]
 800dc36:	601a      	str	r2, [r3, #0]
        currentTest = currentTest->getNext();
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	4798      	blx	r3
 800dc44:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60bb      	str	r3, [r7, #8]
 800dc4c:	e7e8      	b.n	800dc20 <_ZN22UtestShellPointerArrayC1EP10UtestShell+0x68>
    if (count_ == 0) return;
 800dc4e:	bf00      	nop
    }
}
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	08015594 	.word	0x08015594

0800dc60 <_ZN22UtestShellPointerArrayD1Ev>:

UtestShellPointerArray::~UtestShellPointerArray()
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b082      	sub	sp, #8
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
{
    delete [] arrayOfTests_;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d004      	beq.n	800dc7a <_ZN22UtestShellPointerArrayD1Ev+0x1a>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7f7 fd43 	bl	8005700 <_ZdaPv>
}
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3708      	adds	r7, #8
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bd80      	pop	{r7, pc}

0800dc84 <_ZN22UtestShellPointerArray4swapEjj>:

void UtestShellPointerArray::swap(size_t index1, size_t index2)
{
 800dc84:	b480      	push	{r7}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
        UtestShell* e2 = arrayOfTests_[index2];
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	617b      	str	r3, [r7, #20]
        UtestShell* e1 = arrayOfTests_[index1];
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	681a      	ldr	r2, [r3, #0]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	4413      	add	r3, r2
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	613b      	str	r3, [r7, #16]
        arrayOfTests_[index1] = e2;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	009b      	lsls	r3, r3, #2
 800dcb4:	4413      	add	r3, r2
 800dcb6:	697a      	ldr	r2, [r7, #20]
 800dcb8:	601a      	str	r2, [r3, #0]
        arrayOfTests_[index2] = e1;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	693a      	ldr	r2, [r7, #16]
 800dcc6:	601a      	str	r2, [r3, #0]
}
 800dcc8:	bf00      	nop
 800dcca:	371c      	adds	r7, #28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <_ZN22UtestShellPointerArray7shuffleEj>:

void UtestShellPointerArray::shuffle(size_t seed)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
    if (count_ == 0) return;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	685b      	ldr	r3, [r3, #4]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d028      	beq.n	800dd38 <_ZN22UtestShellPointerArray7shuffleEj+0x64>

    PlatformSpecificSrand((unsigned int) seed);
 800dce6:	4b17      	ldr	r3, [pc, #92]	; (800dd44 <_ZN22UtestShellPointerArray7shuffleEj+0x70>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	6838      	ldr	r0, [r7, #0]
 800dcec:	4798      	blx	r3

    for (size_t i = count_ - 1; i >= 1; --i)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	60fb      	str	r3, [r7, #12]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d019      	beq.n	800dd30 <_ZN22UtestShellPointerArray7shuffleEj+0x5c>
    {
        if (count_ == 0) return;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d01b      	beq.n	800dd3c <_ZN22UtestShellPointerArray7shuffleEj+0x68>

        const size_t j = ((size_t)PlatformSpecificRand()) % (i + 1); // distribution biased by modulo, but good enough for shuffling
 800dd04:	4b10      	ldr	r3, [pc, #64]	; (800dd48 <_ZN22UtestShellPointerArray7shuffleEj+0x74>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4798      	blx	r3
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	461a      	mov	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3301      	adds	r3, #1
 800dd12:	fbb2 f1f3 	udiv	r1, r2, r3
 800dd16:	fb03 f301 	mul.w	r3, r3, r1
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	60bb      	str	r3, [r7, #8]
        swap(i, j);
 800dd1e:	68ba      	ldr	r2, [r7, #8]
 800dd20:	68f9      	ldr	r1, [r7, #12]
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f7ff ffae 	bl	800dc84 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = count_ - 1; i >= 1; --i)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
 800dd2e:	e7e2      	b.n	800dcf6 <_ZN22UtestShellPointerArray7shuffleEj+0x22>
   }
   relinkTestsInOrder();
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f834 	bl	800dd9e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800dd36:	e002      	b.n	800dd3e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
    if (count_ == 0) return;
 800dd38:	bf00      	nop
 800dd3a:	e000      	b.n	800dd3e <_ZN22UtestShellPointerArray7shuffleEj+0x6a>
        if (count_ == 0) return;
 800dd3c:	bf00      	nop
}
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	200000d8 	.word	0x200000d8
 800dd48:	200000dc 	.word	0x200000dc

0800dd4c <_ZN22UtestShellPointerArray7reverseEv>:

void UtestShellPointerArray::reverse()
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b086      	sub	sp, #24
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
    if (count_ == 0) return;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01c      	beq.n	800dd96 <_ZN22UtestShellPointerArray7reverseEv+0x4a>

    size_t halfCount = count_ / 2;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	085b      	lsrs	r3, r3, #1
 800dd62:	613b      	str	r3, [r7, #16]
    for (size_t i = 0; i < halfCount; i++)
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]
 800dd68:	697a      	ldr	r2, [r7, #20]
 800dd6a:	693b      	ldr	r3, [r7, #16]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d20e      	bcs.n	800dd8e <_ZN22UtestShellPointerArray7reverseEv+0x42>
    {
        size_t j = count_ - i - 1;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	60fb      	str	r3, [r7, #12]
        swap(i, j);
 800dd7c:	68fa      	ldr	r2, [r7, #12]
 800dd7e:	6979      	ldr	r1, [r7, #20]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ff7f 	bl	800dc84 <_ZN22UtestShellPointerArray4swapEjj>
    for (size_t i = 0; i < halfCount; i++)
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	e7ec      	b.n	800dd68 <_ZN22UtestShellPointerArray7reverseEv+0x1c>
   }
   relinkTestsInOrder();
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f805 	bl	800dd9e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>
 800dd94:	e000      	b.n	800dd98 <_ZN22UtestShellPointerArray7reverseEv+0x4c>
    if (count_ == 0) return;
 800dd96:	bf00      	nop
}
 800dd98:	3718      	adds	r7, #24
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}

0800dd9e <_ZN22UtestShellPointerArray18relinkTestsInOrderEv>:

void UtestShellPointerArray::relinkTestsInOrder()
{
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b084      	sub	sp, #16
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
    UtestShell *tests = NULLPTR;
 800dda6:	2300      	movs	r3, #0
 800dda8:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ddaa:	2300      	movs	r3, #0
 800ddac:	60bb      	str	r3, [r7, #8]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	685b      	ldr	r3, [r3, #4]
 800ddb2:	68ba      	ldr	r2, [r7, #8]
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d221      	bcs.n	800ddfc <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x5e>
        tests = arrayOfTests_[count_ - i - 1]->addTest(tests);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681a      	ldr	r2, [r3, #0]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6859      	ldr	r1, [r3, #4]
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	1acb      	subs	r3, r1, r3
 800ddc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6859      	ldr	r1, [r3, #4]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	1acb      	subs	r3, r1, r3
 800dddc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dde0:	3b01      	subs	r3, #1
 800dde2:	009b      	lsls	r3, r3, #2
 800dde4:	4413      	add	r3, r2
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3308      	adds	r3, #8
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68f9      	ldr	r1, [r7, #12]
 800ddf0:	4798      	blx	r3
 800ddf2:	60f8      	str	r0, [r7, #12]
    for (size_t i = 0; i < count_; i++)
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	60bb      	str	r3, [r7, #8]
 800ddfa:	e7d8      	b.n	800ddae <_ZN22UtestShellPointerArray18relinkTestsInOrderEv+0x10>
}
 800ddfc:	bf00      	nop
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bd80      	pop	{r7, pc}

0800de04 <_ZNK22UtestShellPointerArray12getFirstTestEv>:

UtestShell* UtestShellPointerArray::getFirstTest() const
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b082      	sub	sp, #8
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
    return get(0);
 800de0c:	2100      	movs	r1, #0
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f805 	bl	800de1e <_ZNK22UtestShellPointerArray3getEj>
 800de14:	4603      	mov	r3, r0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <_ZNK22UtestShellPointerArray3getEj>:

UtestShell* UtestShellPointerArray::get(size_t index) const
{
 800de1e:	b480      	push	{r7}
 800de20:	b083      	sub	sp, #12
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
    if (index >= count_) return NULLPTR;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	683a      	ldr	r2, [r7, #0]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d301      	bcc.n	800de36 <_ZNK22UtestShellPointerArray3getEj+0x18>
 800de32:	2300      	movs	r3, #0
 800de34:	e005      	b.n	800de42 <_ZNK22UtestShellPointerArray3getEj+0x24>
    return arrayOfTests_[index];
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	681b      	ldr	r3, [r3, #0]
}
 800de42:	4618      	mov	r0, r3
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
	...

0800de50 <_Z41__static_initialization_and_destruction_0ii>:
}

void TestInstaller::unDo()
{
    TestRegistry::getCurrentRegistry()->unDoLastAddTest();
}
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
static const CrashingTestTerminator crashingTestTerminator;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10a      	bne.n	800de76 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de66:	4293      	cmp	r3, r2
 800de68:	d105      	bne.n	800de76 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800de6a:	4805      	ldr	r0, [pc, #20]	; (800de80 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800de6c:	f7ff fe82 	bl	800db74 <_ZN22CrashingTestTerminatorD1Ev>
static const NormalTestTerminator normalTestTerminator;
 800de70:	4804      	ldr	r0, [pc, #16]	; (800de84 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800de72:	f7ff fe1f 	bl	800dab4 <_ZN20NormalTestTerminatorD1Ev>
}
 800de76:	bf00      	nop
 800de78:	3708      	adds	r7, #8
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	2000008c 	.word	0x2000008c
 800de84:	20000088 	.word	0x20000088

0800de88 <_GLOBAL__sub_I__Z13doubles_equalddd>:
 800de88:	b580      	push	{r7, lr}
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800de90:	2001      	movs	r0, #1
 800de92:	f7ff ffdd 	bl	800de50 <_Z41__static_initialization_and_destruction_0ii>
 800de96:	bd80      	pop	{r7, pc}

0800de98 <_GLOBAL__sub_D__Z13doubles_equalddd>:
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800dea0:	2000      	movs	r0, #0
 800dea2:	f7ff ffd5 	bl	800de50 <_Z41__static_initialization_and_destruction_0ii>
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZSt5isinfd>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 800dea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	ed87 0b00 	vstr	d0, [r7]
 800deb2:	683c      	ldr	r4, [r7, #0]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800deba:	2301      	movs	r3, #1
 800debc:	461e      	mov	r6, r3
 800debe:	f04f 32ff 	mov.w	r2, #4294967295
 800dec2:	4b10      	ldr	r3, [pc, #64]	; (800df04 <_ZSt5isinfd+0x5c>)
 800dec4:	4620      	mov	r0, r4
 800dec6:	4629      	mov	r1, r5
 800dec8:	f7f2 fc5e 	bl	8000788 <__aeabi_dcmpun>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10b      	bne.n	800deea <_ZSt5isinfd+0x42>
 800ded2:	f04f 32ff 	mov.w	r2, #4294967295
 800ded6:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <_ZSt5isinfd+0x5c>)
 800ded8:	4620      	mov	r0, r4
 800deda:	4629      	mov	r1, r5
 800dedc:	f7f2 fc36 	bl	800074c <__aeabi_dcmple>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d101      	bne.n	800deea <_ZSt5isinfd+0x42>
 800dee6:	2300      	movs	r3, #0
 800dee8:	461e      	mov	r6, r3
 800deea:	b2f3      	uxtb	r3, r6
 800deec:	f083 0301 	eor.w	r3, r3, #1
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	bf14      	ite	ne
 800def6:	2301      	movne	r3, #1
 800def8:	2300      	moveq	r3, #0
 800defa:	b2db      	uxtb	r3, r3
 800defc:	4618      	mov	r0, r3
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df04:	7fefffff 	.word	0x7fefffff

0800df08 <_ZSt5isnand>:
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isnan;
#else
  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }
 800df08:	b590      	push	{r4, r7, lr}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	ed87 0b00 	vstr	d0, [r7]
 800df12:	2301      	movs	r3, #1
 800df14:	461c      	mov	r4, r3
 800df16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800df1e:	f7f2 fc33 	bl	8000788 <__aeabi_dcmpun>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <_ZSt5isnand+0x24>
 800df28:	2300      	movs	r3, #0
 800df2a:	461c      	mov	r4, r3
 800df2c:	b2e3      	uxtb	r3, r4
 800df2e:	2b00      	cmp	r3, #0
 800df30:	bf14      	ite	ne
 800df32:	2301      	movne	r3, #1
 800df34:	2300      	moveq	r3, #0
 800df36:	b2db      	uxtb	r3, r3
 800df38:	4618      	mov	r0, r3
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd90      	pop	{r4, r7, pc}

0800df40 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult>:

// There is a possibility that a compiler provides fork but not waitpid.
#if !defined(CPPUTEST_HAVE_FORK) || !defined(CPPUTEST_HAVE_WAITPID)

static void GccPlatformSpecificRunTestInASeperateProcess(UtestShell* shell, TestPlugin*, TestResult* result)
{
 800df40:	b590      	push	{r4, r7, lr}
 800df42:	b095      	sub	sp, #84	; 0x54
 800df44:	af00      	add	r7, sp, #0
 800df46:	60f8      	str	r0, [r7, #12]
 800df48:	60b9      	str	r1, [r7, #8]
 800df4a:	607a      	str	r2, [r7, #4]
    result->addFailure(TestFailure(shell, "-p doesn't work on this platform, as it is lacking fork.\b"));
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3334      	adds	r3, #52	; 0x34
 800df52:	681c      	ldr	r4, [r3, #0]
 800df54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df58:	490f      	ldr	r1, [pc, #60]	; (800df98 <_ZL44GccPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult+0x58>)
 800df5a:	4618      	mov	r0, r3
 800df5c:	f7f8 fa81 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800df60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df64:	f107 0314 	add.w	r3, r7, #20
 800df68:	68f9      	ldr	r1, [r7, #12]
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7f9 ffca 	bl	8007f04 <_ZN11TestFailureC1EP10UtestShellRK12SimpleString>
 800df70:	f107 0314 	add.w	r3, r7, #20
 800df74:	4619      	mov	r1, r3
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	47a0      	blx	r4
 800df7a:	f107 0314 	add.w	r3, r7, #20
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fa f880 	bl	8008084 <_ZN11TestFailureD1Ev>
 800df84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800df88:	4618      	mov	r0, r3
 800df8a:	f7f8 fe22 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800df8e:	bf00      	nop
 800df90:	3754      	adds	r7, #84	; 0x54
 800df92:	46bd      	mov	sp, r7
 800df94:	bd90      	pop	{r4, r7, pc}
 800df96:	bf00      	nop
 800df98:	0801571c 	.word	0x0801571c

0800df9c <_Z37PlatformSpecificGetWorkingEnvironmentv>:
}

#endif

TestOutput::WorkingEnvironment PlatformSpecificGetWorkingEnvironment()
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
    return TestOutput::eclipse;
 800dfa0:	2301      	movs	r3, #1
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <PlatformSpecificSetJmpImplementation>:
int (*PlatformSpecificWaitPid)(int, int*, int) = PlatformSpecificWaitPidImplementation;

extern "C" {

static int PlatformSpecificSetJmpImplementation(void (*function) (void* data), void* data)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
 800dfb4:	6039      	str	r1, [r7, #0]
    if (0 == setjmp(test_exit_jmp_buf[jmp_buf_index])) {
 800dfb6:	4b13      	ldr	r3, [pc, #76]	; (800e004 <PlatformSpecificSetJmpImplementation+0x58>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	225c      	movs	r2, #92	; 0x5c
 800dfbc:	fb02 f303 	mul.w	r3, r2, r3
 800dfc0:	4a11      	ldr	r2, [pc, #68]	; (800e008 <PlatformSpecificSetJmpImplementation+0x5c>)
 800dfc2:	4413      	add	r3, r2
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f2 f92b 	bl	8000220 <setjmp>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	bf0c      	ite	eq
 800dfd0:	2301      	moveq	r3, #1
 800dfd2:	2300      	movne	r3, #0
 800dfd4:	b2db      	uxtb	r3, r3
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d00e      	beq.n	800dff8 <PlatformSpecificSetJmpImplementation+0x4c>
        jmp_buf_index++;
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <PlatformSpecificSetJmpImplementation+0x58>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	4a08      	ldr	r2, [pc, #32]	; (800e004 <PlatformSpecificSetJmpImplementation+0x58>)
 800dfe2:	6013      	str	r3, [r2, #0]
        function(data);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6838      	ldr	r0, [r7, #0]
 800dfe8:	4798      	blx	r3
        jmp_buf_index--;
 800dfea:	4b06      	ldr	r3, [pc, #24]	; (800e004 <PlatformSpecificSetJmpImplementation+0x58>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	4a04      	ldr	r2, [pc, #16]	; (800e004 <PlatformSpecificSetJmpImplementation+0x58>)
 800dff2:	6013      	str	r3, [r2, #0]
        return 1;
 800dff4:	2301      	movs	r3, #1
 800dff6:	e000      	b.n	800dffa <PlatformSpecificSetJmpImplementation+0x4e>
    }
    return 0;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3708      	adds	r7, #8
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	20000a44 	.word	0x20000a44
 800e008:	200006ac 	.word	0x200006ac

0800e00c <PlatformSpecificLongJmpImplementation>:
 #if !((__clang_major__ == 3) && (__clang_minor__ == 0))
 _no_return_
 #endif
#endif
static void PlatformSpecificLongJmpImplementation()
{
 800e00c:	b580      	push	{r7, lr}
 800e00e:	af00      	add	r7, sp, #0
    jmp_buf_index--;
 800e010:	4b07      	ldr	r3, [pc, #28]	; (800e030 <PlatformSpecificLongJmpImplementation+0x24>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3b01      	subs	r3, #1
 800e016:	4a06      	ldr	r2, [pc, #24]	; (800e030 <PlatformSpecificLongJmpImplementation+0x24>)
 800e018:	6013      	str	r3, [r2, #0]
    longjmp(test_exit_jmp_buf[jmp_buf_index], 1);
 800e01a:	4b05      	ldr	r3, [pc, #20]	; (800e030 <PlatformSpecificLongJmpImplementation+0x24>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	225c      	movs	r2, #92	; 0x5c
 800e020:	fb02 f303 	mul.w	r3, r2, r3
 800e024:	4a03      	ldr	r2, [pc, #12]	; (800e034 <PlatformSpecificLongJmpImplementation+0x28>)
 800e026:	4413      	add	r3, r2
 800e028:	2101      	movs	r1, #1
 800e02a:	4618      	mov	r0, r3
 800e02c:	f7f2 f8fe 	bl	800022c <longjmp>
 800e030:	20000a44 	.word	0x20000a44
 800e034:	200006ac 	.word	0x200006ac

0800e038 <TimeInMillisImplementation>:
void (*PlatformSpecificRestoreJumpBuffer)() = PlatformSpecificRestoreJumpBufferImplementation;

///////////// Time in millis

static long TimeInMillisImplementation()
{
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
    struct timeval tv;
    struct timezone tz;
    gettimeofday(&tv, &tz);
    return (tv.tv_sec * 1000) + (long)((double)tv.tv_usec * 0.001);
#else
    return 0;
 800e03c:	2300      	movs	r3, #0
#endif
}
 800e03e:	4618      	mov	r0, r3
 800e040:	46bd      	mov	sp, r7
 800e042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e046:	4770      	bx	lr

0800e048 <TimeStringImplementation>:

static const char* TimeStringImplementation()
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b084      	sub	sp, #16
 800e04c:	af00      	add	r7, sp, #0
    time_t theTime = time(NULLPTR);
 800e04e:	2000      	movs	r0, #0
 800e050:	f004 fbd6 	bl	8012800 <time>
 800e054:	4602      	mov	r2, r0
 800e056:	460b      	mov	r3, r1
 800e058:	e9c7 2300 	strd	r2, r3, [r7]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
    static struct tm lastlocaltime;
    localtime_s(&lastlocaltime, &theTime);
    struct tm *tmp = &lastlocaltime;
#else
    struct tm *tmp = localtime(&theTime);
 800e05c:	463b      	mov	r3, r7
 800e05e:	4618      	mov	r0, r3
 800e060:	f003 fa64 	bl	801152c <localtime>
 800e064:	60f8      	str	r0, [r7, #12]
#endif
    strftime(dateTime, 80, "%Y-%m-%dT%H:%M:%S", tmp);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	4a04      	ldr	r2, [pc, #16]	; (800e07c <TimeStringImplementation+0x34>)
 800e06a:	2150      	movs	r1, #80	; 0x50
 800e06c:	4804      	ldr	r0, [pc, #16]	; (800e080 <TimeStringImplementation+0x38>)
 800e06e:	f004 fb35 	bl	80126dc <strftime>
    return dateTime;
 800e072:	4b03      	ldr	r3, [pc, #12]	; (800e080 <TimeStringImplementation+0x38>)
}
 800e074:	4618      	mov	r0, r3
 800e076:	3710      	adds	r7, #16
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}
 800e07c:	08015758 	.word	0x08015758
 800e080:	20000a48 	.word	0x20000a48

0800e084 <PlatformSpecificFOpenImplementation>:
#pragma clang diagnostic ignored "-Wused-but-marked-unused"
#endif
int (*PlatformSpecificVSNprintf)(char *str, size_t size, const char* format, va_list va_args_list) = vsnprintf;

static PlatformSpecificFile PlatformSpecificFOpenImplementation(const char* filename, const char* flag)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
#if defined(_WIN32) && defined(MINGW_HAS_SECURE_API)
  FILE* file;
   fopen_s(&file, filename, flag);
   return file;
#else
   return fopen(filename, flag);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f003 f881 	bl	8011198 <fopen>
 800e096:	4603      	mov	r3, r0
#endif
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <PlatformSpecificFPutsImplementation>:

static void PlatformSpecificFPutsImplementation(const char* str, PlatformSpecificFile file)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
   fputs(str, (FILE*)file);
 800e0aa:	6839      	ldr	r1, [r7, #0]
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f003 f8e1 	bl	8011274 <fputs>
}
 800e0b2:	bf00      	nop
 800e0b4:	3708      	adds	r7, #8
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <PlatformSpecificFCloseImplementation>:

static void PlatformSpecificFCloseImplementation(PlatformSpecificFile file)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b082      	sub	sp, #8
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
   fclose((FILE*)file);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f002 fe62 	bl	8010d8c <fclose>
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <PlatformSpecificFlushImplementation>:

static void PlatformSpecificFlushImplementation()
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	af00      	add	r7, sp, #0
  fflush(stdout);
 800e0d4:	4b03      	ldr	r3, [pc, #12]	; (800e0e4 <PlatformSpecificFlushImplementation+0x14>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	689b      	ldr	r3, [r3, #8]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f002 ff20 	bl	8010f20 <fflush>
}
 800e0e0:	bf00      	nop
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20000100 	.word	0x20000100

0800e0e8 <IsNanImplementation>:
#if defined(__GNUC__) && (__GNUC__ >= 5 || (__GNUC__ == 4 && __GNUC_MINOR__ > 8))
#pragma GCC diagnostic ignored "-Wfloat-conversion"
#endif

static int IsNanImplementation(double d)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	ed87 0b00 	vstr	d0, [r7]
    return isnan(d);
 800e0f2:	ed97 0b00 	vldr	d0, [r7]
 800e0f6:	f7ff ff07 	bl	800df08 <_ZSt5isnand>
 800e0fa:	4603      	mov	r3, r0
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3708      	adds	r7, #8
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <IsInfImplementation>:

static int IsInfImplementation(double d)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	ed87 0b00 	vstr	d0, [r7]
    return isinf(d);
 800e10e:	ed97 0b00 	vldr	d0, [r7]
 800e112:	f7ff fec9 	bl	800dea8 <_ZSt5isinfd>
 800e116:	4603      	mov	r3, r0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <PThreadMutexCreate>:
int (*PlatformSpecificIsNan)(double) = IsNanImplementation;
int (*PlatformSpecificIsInf)(double) = IsInfImplementation;
int (*PlatformSpecificAtExit)(void(*func)(void)) = atexit;  /// this was undefined before

static PlatformSpecificMutex PThreadMutexCreate(void)
{
 800e120:	b480      	push	{r7}
 800e122:	af00      	add	r7, sp, #0
    pthread_mutex_t *mutex = new pthread_mutex_t;

    pthread_mutex_init(mutex, NULLPTR);
    return (PlatformSpecificMutex)mutex;
#else
    return NULLPTR;
 800e124:	2300      	movs	r3, #0
#endif

}
 800e126:	4618      	mov	r0, r3
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <PThreadMutexLock>:
{
    pthread_mutex_lock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexLock(PlatformSpecificMutex)
{
 800e130:	b480      	push	{r7}
 800e132:	b083      	sub	sp, #12
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
}
 800e138:	bf00      	nop
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr

0800e144 <PThreadMutexUnlock>:
{
    pthread_mutex_unlock((pthread_mutex_t *)mtx);
}
#else
static void PThreadMutexUnlock(PlatformSpecificMutex)
{
 800e144:	b480      	push	{r7}
 800e146:	b083      	sub	sp, #12
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
}
 800e14c:	bf00      	nop
 800e14e:	370c      	adds	r7, #12
 800e150:	46bd      	mov	sp, r7
 800e152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e156:	4770      	bx	lr

0800e158 <PThreadMutexDestroy>:
    pthread_mutex_destroy(mutex);
    delete mutex;
}
#else
static void PThreadMutexDestroy(PlatformSpecificMutex)
{
 800e158:	b480      	push	{r7}
 800e15a:	b083      	sub	sp, #12
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
}
 800e160:	bf00      	nop
 800e162:	370c      	adds	r7, #12
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <_ZN20CommandLineArgumentsC1EiPKPKc>:

#include "CppUTest/TestHarness.h"
#include "CppUTest/CommandLineArguments.h"
#include "CppUTest/PlatformSpecificFunctions.h"

CommandLineArguments::CommandLineArguments(int ac, const char *const *av) :
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	607a      	str	r2, [r7, #4]
    ac_(ac), av_(av), needHelp_(false), verbose_(false), veryVerbose_(false), color_(false), runTestsAsSeperateProcess_(false), listTestGroupNames_(false), listTestGroupAndCaseNames_(false), listTestLocations_(false), runIgnored_(false), reversing_(false), crashOnFail_(false), shuffling_(false), shufflingPreSeeded_(false), repeat_(1), shuffleSeed_(0), groupFilters_(NULLPTR), nameFilters_(NULLPTR), outputType_(OUTPUT_ECLIPSE)
 800e178:	4a25      	ldr	r2, [pc, #148]	; (800e210 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa4>)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68ba      	ldr	r2, [r7, #8]
 800e182:	605a      	str	r2, [r3, #4]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	609a      	str	r2, [r3, #8]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2200      	movs	r2, #0
 800e18e:	731a      	strb	r2, [r3, #12]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	735a      	strb	r2, [r3, #13]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2200      	movs	r2, #0
 800e19a:	739a      	strb	r2, [r3, #14]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	73da      	strb	r2, [r3, #15]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	741a      	strb	r2, [r3, #16]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	745a      	strb	r2, [r3, #17]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	749a      	strb	r2, [r3, #18]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	74da      	strb	r2, [r3, #19]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	751a      	strb	r2, [r3, #20]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	755a      	strb	r2, [r3, #21]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	759a      	strb	r2, [r3, #22]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	75da      	strb	r2, [r3, #23]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	761a      	strb	r2, [r3, #24]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	61da      	str	r2, [r3, #28]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	621a      	str	r2, [r3, #32]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	625a      	str	r2, [r3, #36]	; 0x24
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	629a      	str	r2, [r3, #40]	; 0x28
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	3330      	adds	r3, #48	; 0x30
 800e1fc:	4905      	ldr	r1, [pc, #20]	; (800e214 <_ZN20CommandLineArgumentsC1EiPKPKc+0xa8>)
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7f8 f92f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
{
}
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	4618      	mov	r0, r3
 800e208:	3710      	adds	r7, #16
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
 800e20e:	bf00      	nop
 800e210:	08016ec0 	.word	0x08016ec0
 800e214:	0801576c 	.word	0x0801576c

0800e218 <_ZN10TestFilterD1Ev>:
#ifndef TESTFILTER_H_
#define TESTFILTER_H_

#include "SimpleString.h"

class TestFilter
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	f7f8 fcd5 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
	...

0800e234 <_ZN20CommandLineArgumentsD1Ev>:

CommandLineArguments::~CommandLineArguments()
 800e234:	b590      	push	{r4, r7, lr}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	4a20      	ldr	r2, [pc, #128]	; (800e2c0 <_ZN20CommandLineArgumentsD1Ev+0x8c>)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]
{
    while(groupFilters_) {
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	2b00      	cmp	r3, #0
 800e248:	d015      	beq.n	800e276 <_ZN20CommandLineArgumentsD1Ev+0x42>
        TestFilter* current = groupFilters_;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24e:	60fb      	str	r3, [r7, #12]
        groupFilters_ = groupFilters_->getNext();
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e254:	4618      	mov	r0, r3
 800e256:	f002 fc9a 	bl	8010b8e <_ZNK10TestFilter7getNextEv>
 800e25a:	4602      	mov	r2, r0
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	625a      	str	r2, [r3, #36]	; 0x24
        delete current;
 800e260:	68fc      	ldr	r4, [r7, #12]
 800e262:	2c00      	cmp	r4, #0
 800e264:	d0ed      	beq.n	800e242 <_ZN20CommandLineArgumentsD1Ev+0xe>
 800e266:	4620      	mov	r0, r4
 800e268:	f7ff ffd6 	bl	800e218 <_ZN10TestFilterD1Ev>
 800e26c:	2110      	movs	r1, #16
 800e26e:	4620      	mov	r0, r4
 800e270:	f7f7 fa22 	bl	80056b8 <_ZdlPvj>
    while(groupFilters_) {
 800e274:	e7e5      	b.n	800e242 <_ZN20CommandLineArgumentsD1Ev+0xe>
    }
    while(nameFilters_) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d015      	beq.n	800e2aa <_ZN20CommandLineArgumentsD1Ev+0x76>
        TestFilter* current = nameFilters_;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e282:	60bb      	str	r3, [r7, #8]
        nameFilters_ = nameFilters_->getNext();
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e288:	4618      	mov	r0, r3
 800e28a:	f002 fc80 	bl	8010b8e <_ZNK10TestFilter7getNextEv>
 800e28e:	4602      	mov	r2, r0
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	629a      	str	r2, [r3, #40]	; 0x28
        delete current;
 800e294:	68bc      	ldr	r4, [r7, #8]
 800e296:	2c00      	cmp	r4, #0
 800e298:	d0ed      	beq.n	800e276 <_ZN20CommandLineArgumentsD1Ev+0x42>
 800e29a:	4620      	mov	r0, r4
 800e29c:	f7ff ffbc 	bl	800e218 <_ZN10TestFilterD1Ev>
 800e2a0:	2110      	movs	r1, #16
 800e2a2:	4620      	mov	r0, r4
 800e2a4:	f7f7 fa08 	bl	80056b8 <_ZdlPvj>
    while(nameFilters_) {
 800e2a8:	e7e5      	b.n	800e276 <_ZN20CommandLineArgumentsD1Ev+0x42>
CommandLineArguments::~CommandLineArguments()
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	3330      	adds	r3, #48	; 0x30
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7f8 fc8f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    }
}
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3714      	adds	r7, #20
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd90      	pop	{r4, r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	08016ec0 	.word	0x08016ec0

0800e2c4 <_ZN20CommandLineArgumentsD0Ev>:
CommandLineArguments::~CommandLineArguments()
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
}
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f7ff ffb1 	bl	800e234 <_ZN20CommandLineArgumentsD1Ev>
 800e2d2:	2138      	movs	r1, #56	; 0x38
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f7 f9ef 	bl	80056b8 <_ZdlPvj>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <_ZN20CommandLineArguments5parseEP10TestPlugin>:

bool CommandLineArguments::parse(TestPlugin* plugin)
{
 800e2e4:	b5b0      	push	{r4, r5, r7, lr}
 800e2e6:	b0be      	sub	sp, #248	; 0xf8
 800e2e8:	af02      	add	r7, sp, #8
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
 800e2ee:	2400      	movs	r4, #0
    bool correctParameters = true;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
    for (int i = 1; i < ac_; i++) {
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	613b      	str	r3, [r7, #16]
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	685a      	ldr	r2, [r3, #4]
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	429a      	cmp	r2, r3
 800e302:	f340 83a4 	ble.w	800ea4e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76a>
        SimpleString argument = av_[i];
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	689a      	ldr	r2, [r3, #8]
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	f107 0308 	add.w	r3, r7, #8
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f7f8 f8a2 	bl	8006462 <_ZN12SimpleStringC1EPKc>

        if (argument == "-h") {
 800e31e:	f107 0314 	add.w	r3, r7, #20
 800e322:	49c8      	ldr	r1, [pc, #800]	; (800e644 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x360>)
 800e324:	4618      	mov	r0, r3
 800e326:	f7f8 f89c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e32a:	f107 0214 	add.w	r2, r7, #20
 800e32e:	f107 0308 	add.w	r3, r7, #8
 800e332:	4611      	mov	r1, r2
 800e334:	4618      	mov	r0, r3
 800e336:	f7f8 fc58 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e33a:	4603      	mov	r3, r0
 800e33c:	461d      	mov	r5, r3
 800e33e:	f107 0314 	add.w	r3, r7, #20
 800e342:	4618      	mov	r0, r3
 800e344:	f7f8 fc45 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e348:	2d00      	cmp	r5, #0
 800e34a:	d006      	beq.n	800e35a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76>
            needHelp_ = true;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2201      	movs	r2, #1
 800e350:	731a      	strb	r2, [r3, #12]
            correctParameters = false;
 800e352:	2300      	movs	r3, #0
 800e354:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e358:	e366      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        }
        else if (argument == "-v") verbose_ = true;
 800e35a:	f107 031c 	add.w	r3, r7, #28
 800e35e:	49ba      	ldr	r1, [pc, #744]	; (800e648 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x364>)
 800e360:	4618      	mov	r0, r3
 800e362:	f7f8 f87e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e366:	f107 021c 	add.w	r2, r7, #28
 800e36a:	f107 0308 	add.w	r3, r7, #8
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f7f8 fc3a 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e376:	4603      	mov	r3, r0
 800e378:	461d      	mov	r5, r3
 800e37a:	f107 031c 	add.w	r3, r7, #28
 800e37e:	4618      	mov	r0, r3
 800e380:	f7f8 fc27 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e384:	2d00      	cmp	r5, #0
 800e386:	d003      	beq.n	800e390 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xac>
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2201      	movs	r2, #1
 800e38c:	735a      	strb	r2, [r3, #13]
 800e38e:	e34b      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-vv") veryVerbose_ = true;
 800e390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e394:	49ad      	ldr	r1, [pc, #692]	; (800e64c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x368>)
 800e396:	4618      	mov	r0, r3
 800e398:	f7f8 f863 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e39c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	4611      	mov	r1, r2
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f8 fc1f 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	461d      	mov	r5, r3
 800e3b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f8 fc0c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e3ba:	2d00      	cmp	r5, #0
 800e3bc:	d003      	beq.n	800e3c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0xe2>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	2201      	movs	r2, #1
 800e3c2:	739a      	strb	r2, [r3, #14]
 800e3c4:	e330      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-c") color_ = true;
 800e3c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3ca:	49a1      	ldr	r1, [pc, #644]	; (800e650 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x36c>)
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f8 f848 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e3d2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e3d6:	f107 0308 	add.w	r3, r7, #8
 800e3da:	4611      	mov	r1, r2
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7f8 fc04 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	461d      	mov	r5, r3
 800e3e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7f8 fbf1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e3f0:	2d00      	cmp	r5, #0
 800e3f2:	d003      	beq.n	800e3fc <_ZN20CommandLineArguments5parseEP10TestPlugin+0x118>
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	73da      	strb	r2, [r3, #15]
 800e3fa:	e315      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-p") runTestsAsSeperateProcess_ = true;
 800e3fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e400:	4994      	ldr	r1, [pc, #592]	; (800e654 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x370>)
 800e402:	4618      	mov	r0, r3
 800e404:	f7f8 f82d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e408:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800e40c:	f107 0308 	add.w	r3, r7, #8
 800e410:	4611      	mov	r1, r2
 800e412:	4618      	mov	r0, r3
 800e414:	f7f8 fbe9 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e418:	4603      	mov	r3, r0
 800e41a:	461d      	mov	r5, r3
 800e41c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e420:	4618      	mov	r0, r3
 800e422:	f7f8 fbd6 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e426:	2d00      	cmp	r5, #0
 800e428:	d003      	beq.n	800e432 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x14e>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	741a      	strb	r2, [r3, #16]
 800e430:	e2fa      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-b") reversing_ = true;
 800e432:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e436:	4988      	ldr	r1, [pc, #544]	; (800e658 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x374>)
 800e438:	4618      	mov	r0, r3
 800e43a:	f7f8 f812 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e43e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e442:	f107 0308 	add.w	r3, r7, #8
 800e446:	4611      	mov	r1, r2
 800e448:	4618      	mov	r0, r3
 800e44a:	f7f8 fbce 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e44e:	4603      	mov	r3, r0
 800e450:	461d      	mov	r5, r3
 800e452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e456:	4618      	mov	r0, r3
 800e458:	f7f8 fbbb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e45c:	2d00      	cmp	r5, #0
 800e45e:	d003      	beq.n	800e468 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x184>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2201      	movs	r2, #1
 800e464:	755a      	strb	r2, [r3, #21]
 800e466:	e2df      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-lg") listTestGroupNames_ = true;
 800e468:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e46c:	497b      	ldr	r1, [pc, #492]	; (800e65c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x378>)
 800e46e:	4618      	mov	r0, r3
 800e470:	f7f7 fff7 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e474:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800e478:	f107 0308 	add.w	r3, r7, #8
 800e47c:	4611      	mov	r1, r2
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f8 fbb3 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e484:	4603      	mov	r3, r0
 800e486:	461d      	mov	r5, r3
 800e488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e48c:	4618      	mov	r0, r3
 800e48e:	f7f8 fba0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e492:	2d00      	cmp	r5, #0
 800e494:	d003      	beq.n	800e49e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1ba>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2201      	movs	r2, #1
 800e49a:	745a      	strb	r2, [r3, #17]
 800e49c:	e2c4      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ln") listTestGroupAndCaseNames_ = true;
 800e49e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4a2:	496f      	ldr	r1, [pc, #444]	; (800e660 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x37c>)
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7f7 ffdc 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e4aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800e4ae:	f107 0308 	add.w	r3, r7, #8
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f8 fb98 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	461d      	mov	r5, r3
 800e4be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f7f8 fb85 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e4c8:	2d00      	cmp	r5, #0
 800e4ca:	d003      	beq.n	800e4d4 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x1f0>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	749a      	strb	r2, [r3, #18]
 800e4d2:	e2a9      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ll") listTestLocations_ = true;
 800e4d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e4d8:	4962      	ldr	r1, [pc, #392]	; (800e664 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x380>)
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7f7 ffc1 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e4e0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e4e4:	f107 0308 	add.w	r3, r7, #8
 800e4e8:	4611      	mov	r1, r2
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7f8 fb7d 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	461d      	mov	r5, r3
 800e4f4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7f8 fb6a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e4fe:	2d00      	cmp	r5, #0
 800e500:	d003      	beq.n	800e50a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x226>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2201      	movs	r2, #1
 800e506:	74da      	strb	r2, [r3, #19]
 800e508:	e28e      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-ri") runIgnored_ = true;
 800e50a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e50e:	4956      	ldr	r1, [pc, #344]	; (800e668 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x384>)
 800e510:	4618      	mov	r0, r3
 800e512:	f7f7 ffa6 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e516:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e51a:	f107 0308 	add.w	r3, r7, #8
 800e51e:	4611      	mov	r1, r2
 800e520:	4618      	mov	r0, r3
 800e522:	f7f8 fb62 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e526:	4603      	mov	r3, r0
 800e528:	461d      	mov	r5, r3
 800e52a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e52e:	4618      	mov	r0, r3
 800e530:	f7f8 fb4f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e534:	2d00      	cmp	r5, #0
 800e536:	d003      	beq.n	800e540 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x25c>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2201      	movs	r2, #1
 800e53c:	751a      	strb	r2, [r3, #20]
 800e53e:	e273      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument == "-f") crashOnFail_ = true;
 800e540:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e544:	4949      	ldr	r1, [pc, #292]	; (800e66c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x388>)
 800e546:	4618      	mov	r0, r3
 800e548:	f7f7 ff8b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e54c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800e550:	f107 0308 	add.w	r3, r7, #8
 800e554:	4611      	mov	r1, r2
 800e556:	4618      	mov	r0, r3
 800e558:	f7f8 fb47 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800e55c:	4603      	mov	r3, r0
 800e55e:	461d      	mov	r5, r3
 800e560:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e564:	4618      	mov	r0, r3
 800e566:	f7f8 fb34 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e56a:	2d00      	cmp	r5, #0
 800e56c:	d003      	beq.n	800e576 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x292>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2201      	movs	r2, #1
 800e572:	759a      	strb	r2, [r3, #22]
 800e574:	e258      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-r")) setRepeatCount(ac_, av_, i);
 800e576:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e57a:	493d      	ldr	r1, [pc, #244]	; (800e670 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x38c>)
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7f7 ff70 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e582:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800e586:	f107 0308 	add.w	r3, r7, #8
 800e58a:	4611      	mov	r1, r2
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7f8 f82c 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e592:	4603      	mov	r3, r0
 800e594:	461d      	mov	r5, r3
 800e596:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e59a:	4618      	mov	r0, r3
 800e59c:	f7f8 fb19 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	d009      	beq.n	800e5b8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x2d4>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6859      	ldr	r1, [r3, #4]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	689a      	ldr	r2, [r3, #8]
 800e5ac:	f107 0310 	add.w	r3, r7, #16
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f000 fb33 	bl	800ec1c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>
 800e5b6:	e237      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-g")) addGroupFilter(ac_, av_, i);
 800e5b8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e5bc:	492d      	ldr	r1, [pc, #180]	; (800e674 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x390>)
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7f7 ff4f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e5c4:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800e5c8:	f107 0308 	add.w	r3, r7, #8
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7f8 f80b 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e5d4:	4603      	mov	r3, r0
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7f8 faf8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	d009      	beq.n	800e5fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x316>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6859      	ldr	r1, [r3, #4]
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	689a      	ldr	r2, [r3, #8]
 800e5ee:	f107 0310 	add.w	r3, r7, #16
 800e5f2:	6878      	ldr	r0, [r7, #4]
 800e5f4:	f000 fc40 	bl	800ee78 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>
 800e5f8:	e216      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-t")) correctParameters = addGroupDotNameFilter(ac_, av_, i);
 800e5fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e5fe:	491e      	ldr	r1, [pc, #120]	; (800e678 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x394>)
 800e600:	4618      	mov	r0, r3
 800e602:	f7f7 ff2e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e606:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 800e60a:	f107 0308 	add.w	r3, r7, #8
 800e60e:	4611      	mov	r1, r2
 800e610:	4618      	mov	r0, r3
 800e612:	f7f7 ffea 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e616:	4603      	mov	r3, r0
 800e618:	461d      	mov	r5, r3
 800e61a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f8 fad7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e624:	2d00      	cmp	r5, #0
 800e626:	d029      	beq.n	800e67c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x398>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	6859      	ldr	r1, [r3, #4]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	689a      	ldr	r2, [r3, #8]
 800e630:	f107 0310 	add.w	r3, r7, #16
 800e634:	6878      	ldr	r0, [r7, #4]
 800e636:	f000 fc61 	bl	800eefc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>
 800e63a:	4603      	mov	r3, r0
 800e63c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e640:	e1f2      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800e642:	bf00      	nop
 800e644:	08015770 	.word	0x08015770
 800e648:	08015774 	.word	0x08015774
 800e64c:	08015778 	.word	0x08015778
 800e650:	0801577c 	.word	0x0801577c
 800e654:	08015780 	.word	0x08015780
 800e658:	08015784 	.word	0x08015784
 800e65c:	08015788 	.word	0x08015788
 800e660:	0801578c 	.word	0x0801578c
 800e664:	08015790 	.word	0x08015790
 800e668:	08015794 	.word	0x08015794
 800e66c:	08015798 	.word	0x08015798
 800e670:	0801579c 	.word	0x0801579c
 800e674:	080157a0 	.word	0x080157a0
 800e678:	080157a4 	.word	0x080157a4
        else if (argument.startsWith("-sg")) addStrictGroupFilter(ac_, av_, i);
 800e67c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e680:	49b9      	ldr	r1, [pc, #740]	; (800e968 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x684>)
 800e682:	4618      	mov	r0, r3
 800e684:	f7f7 feed 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e688:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800e68c:	f107 0308 	add.w	r3, r7, #8
 800e690:	4611      	mov	r1, r2
 800e692:	4618      	mov	r0, r3
 800e694:	f7f7 ffa9 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e698:	4603      	mov	r3, r0
 800e69a:	461d      	mov	r5, r3
 800e69c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f7f8 fa96 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e6a6:	2d00      	cmp	r5, #0
 800e6a8:	d009      	beq.n	800e6be <_ZN20CommandLineArguments5parseEP10TestPlugin+0x3da>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6859      	ldr	r1, [r3, #4]
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	689a      	ldr	r2, [r3, #8]
 800e6b2:	f107 0310 	add.w	r3, r7, #16
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fccc 	bl	800f054 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>
 800e6bc:	e1b4      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xg")) addExcludeGroupFilter(ac_, av_, i);
 800e6be:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e6c2:	49aa      	ldr	r1, [pc, #680]	; (800e96c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x688>)
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f7f7 fecc 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e6ca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800e6ce:	f107 0308 	add.w	r3, r7, #8
 800e6d2:	4611      	mov	r1, r2
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7f7 ff88 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	461d      	mov	r5, r3
 800e6de:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7f8 fa75 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e6e8:	2d00      	cmp	r5, #0
 800e6ea:	d009      	beq.n	800e700 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x41c>
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6859      	ldr	r1, [r3, #4]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	689a      	ldr	r2, [r3, #8]
 800e6f4:	f107 0310 	add.w	r3, r7, #16
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 fcf1 	bl	800f0e0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>
 800e6fe:	e193      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsg")) addExcludeStrictGroupFilter(ac_, av_, i);
 800e700:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e704:	499a      	ldr	r1, [pc, #616]	; (800e970 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x68c>)
 800e706:	4618      	mov	r0, r3
 800e708:	f7f7 feab 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e70c:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800e710:	f107 0308 	add.w	r3, r7, #8
 800e714:	4611      	mov	r1, r2
 800e716:	4618      	mov	r0, r3
 800e718:	f7f7 ff67 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e71c:	4603      	mov	r3, r0
 800e71e:	461d      	mov	r5, r3
 800e720:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800e724:	4618      	mov	r0, r3
 800e726:	f7f8 fa54 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e72a:	2d00      	cmp	r5, #0
 800e72c:	d009      	beq.n	800e742 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x45e>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6859      	ldr	r1, [r3, #4]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	689a      	ldr	r2, [r3, #8]
 800e736:	f107 0310 	add.w	r3, r7, #16
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fd16 	bl	800f16c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>
 800e740:	e172      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-n")) addNameFilter(ac_, av_, i);
 800e742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e746:	498b      	ldr	r1, [pc, #556]	; (800e974 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x690>)
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f7 fe8a 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e74e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800e752:	f107 0308 	add.w	r3, r7, #8
 800e756:	4611      	mov	r1, r2
 800e758:	4618      	mov	r0, r3
 800e75a:	f7f7 ff46 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e75e:	4603      	mov	r3, r0
 800e760:	461d      	mov	r5, r3
 800e762:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e766:	4618      	mov	r0, r3
 800e768:	f7f8 fa33 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e76c:	2d00      	cmp	r5, #0
 800e76e:	d009      	beq.n	800e784 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4a0>
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6859      	ldr	r1, [r3, #4]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	f107 0310 	add.w	r3, r7, #16
 800e77c:	6878      	ldr	r0, [r7, #4]
 800e77e:	f000 fd3d 	bl	800f1fc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>
 800e782:	e151      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-sn")) addStrictNameFilter(ac_, av_, i);
 800e784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e788:	497b      	ldr	r1, [pc, #492]	; (800e978 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x694>)
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7f7 fe69 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e790:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800e794:	f107 0308 	add.w	r3, r7, #8
 800e798:	4611      	mov	r1, r2
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7f7 ff25 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	461d      	mov	r5, r3
 800e7a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f8 fa12 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e7ae:	2d00      	cmp	r5, #0
 800e7b0:	d009      	beq.n	800e7c6 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x4e2>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6859      	ldr	r1, [r3, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	689a      	ldr	r2, [r3, #8]
 800e7ba:	f107 0310 	add.w	r3, r7, #16
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 fd5e 	bl	800f280 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>
 800e7c4:	e130      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xn")) addExcludeNameFilter(ac_, av_, i);
 800e7c6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e7ca:	496c      	ldr	r1, [pc, #432]	; (800e97c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x698>)
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7f7 fe48 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e7d2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800e7d6:	f107 0308 	add.w	r3, r7, #8
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7f7 ff04 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e7e2:	4603      	mov	r3, r0
 800e7e4:	461d      	mov	r5, r3
 800e7e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7f8 f9f1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	d009      	beq.n	800e808 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x524>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6859      	ldr	r1, [r3, #4]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	689a      	ldr	r2, [r3, #8]
 800e7fc:	f107 0310 	add.w	r3, r7, #16
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f000 fd83 	bl	800f30c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>
 800e806:	e10f      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-xsn")) addExcludeStrictNameFilter(ac_, av_, i);
 800e808:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e80c:	495c      	ldr	r1, [pc, #368]	; (800e980 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x69c>)
 800e80e:	4618      	mov	r0, r3
 800e810:	f7f7 fe27 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e814:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800e818:	f107 0308 	add.w	r3, r7, #8
 800e81c:	4611      	mov	r1, r2
 800e81e:	4618      	mov	r0, r3
 800e820:	f7f7 fee3 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e824:	4603      	mov	r3, r0
 800e826:	461d      	mov	r5, r3
 800e828:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e82c:	4618      	mov	r0, r3
 800e82e:	f7f8 f9d0 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e832:	2d00      	cmp	r5, #0
 800e834:	d009      	beq.n	800e84a <_ZN20CommandLineArguments5parseEP10TestPlugin+0x566>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6859      	ldr	r1, [r3, #4]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	689a      	ldr	r2, [r3, #8]
 800e83e:	f107 0310 	add.w	r3, r7, #16
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f000 fda8 	bl	800f398 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>
 800e848:	e0ee      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-s")) correctParameters = setShuffle(ac_, av_, i);
 800e84a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800e84e:	494d      	ldr	r1, [pc, #308]	; (800e984 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a0>)
 800e850:	4618      	mov	r0, r3
 800e852:	f7f7 fe06 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e856:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800e85a:	f107 0308 	add.w	r3, r7, #8
 800e85e:	4611      	mov	r1, r2
 800e860:	4618      	mov	r0, r3
 800e862:	f7f7 fec2 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e866:	4603      	mov	r3, r0
 800e868:	461d      	mov	r5, r3
 800e86a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800e86e:	4618      	mov	r0, r3
 800e870:	f7f8 f9af 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e874:	2d00      	cmp	r5, #0
 800e876:	d00c      	beq.n	800e892 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5ae>
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6859      	ldr	r1, [r3, #4]
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	689a      	ldr	r2, [r3, #8]
 800e880:	f107 0310 	add.w	r3, r7, #16
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 fa29 	bl	800ecdc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>
 800e88a:	4603      	mov	r3, r0
 800e88c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e890:	e0ca      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "TEST(");
 800e892:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e896:	493c      	ldr	r1, [pc, #240]	; (800e988 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800e898:	4618      	mov	r0, r3
 800e89a:	f7f7 fde2 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e89e:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 800e8a2:	f107 0308 	add.w	r3, r7, #8
 800e8a6:	4611      	mov	r1, r2
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f7 fe9e 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e8ae:	4603      	mov	r3, r0
 800e8b0:	461d      	mov	r5, r3
 800e8b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7f8 f98b 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e8bc:	2d00      	cmp	r5, #0
 800e8be:	d00b      	beq.n	800e8d8 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x5f4>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6859      	ldr	r1, [r3, #4]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	689a      	ldr	r2, [r3, #8]
 800e8c8:	f107 0310 	add.w	r3, r7, #16
 800e8cc:	482e      	ldr	r0, [pc, #184]	; (800e988 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a4>)
 800e8ce:	9000      	str	r0, [sp, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fda9 	bl	800f428 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800e8d6:	e0a7      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("IGNORE_TEST(")) addTestToRunBasedOnVerboseOutput(ac_, av_, i, "IGNORE_TEST(");
 800e8d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e8dc:	492b      	ldr	r1, [pc, #172]	; (800e98c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f7f7 fdbf 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e8e4:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 800e8e8:	f107 0308 	add.w	r3, r7, #8
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7f7 fe7b 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	461d      	mov	r5, r3
 800e8f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f7f8 f968 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e902:	2d00      	cmp	r5, #0
 800e904:	d00b      	beq.n	800e91e <_ZN20CommandLineArguments5parseEP10TestPlugin+0x63a>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6859      	ldr	r1, [r3, #4]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	689a      	ldr	r2, [r3, #8]
 800e90e:	f107 0310 	add.w	r3, r7, #16
 800e912:	481e      	ldr	r0, [pc, #120]	; (800e98c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6a8>)
 800e914:	9000      	str	r0, [sp, #0]
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fd86 	bl	800f428 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>
 800e91c:	e084      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-o")) correctParameters = setOutputType(ac_, av_, i);
 800e91e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800e922:	491b      	ldr	r1, [pc, #108]	; (800e990 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6ac>)
 800e924:	4618      	mov	r0, r3
 800e926:	f7f7 fd9c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e92a:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800e92e:	f107 0308 	add.w	r3, r7, #8
 800e932:	4611      	mov	r1, r2
 800e934:	4618      	mov	r0, r3
 800e936:	f7f7 fe58 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e93a:	4603      	mov	r3, r0
 800e93c:	461d      	mov	r5, r3
 800e93e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800e942:	4618      	mov	r0, r3
 800e944:	f7f8 f945 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e948:	2d00      	cmp	r5, #0
 800e94a:	d023      	beq.n	800e994 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6b0>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6859      	ldr	r1, [r3, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	689a      	ldr	r2, [r3, #8]
 800e954:	f107 0310 	add.w	r3, r7, #16
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 fe3b 	bl	800f5d4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>
 800e95e:	4603      	mov	r3, r0
 800e960:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e964:	e060      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
 800e966:	bf00      	nop
 800e968:	080157a8 	.word	0x080157a8
 800e96c:	080157ac 	.word	0x080157ac
 800e970:	080157b0 	.word	0x080157b0
 800e974:	080157b8 	.word	0x080157b8
 800e978:	080157bc 	.word	0x080157bc
 800e97c:	080157c0 	.word	0x080157c0
 800e980:	080157c4 	.word	0x080157c4
 800e984:	080157cc 	.word	0x080157cc
 800e988:	080157d0 	.word	0x080157d0
 800e98c:	080157d8 	.word	0x080157d8
 800e990:	080157e8 	.word	0x080157e8
        else if (argument.startsWith("-p")) correctParameters = plugin->parseAllArguments(ac_, av_, i);
 800e994:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800e998:	4930      	ldr	r1, [pc, #192]	; (800ea5c <_ZN20CommandLineArguments5parseEP10TestPlugin+0x778>)
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7f7 fd61 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e9a0:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 800e9a4:	f107 0308 	add.w	r3, r7, #8
 800e9a8:	4611      	mov	r1, r2
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7f7 fe1d 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	461d      	mov	r5, r3
 800e9b4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7f8 f90a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800e9be:	2d00      	cmp	r5, #0
 800e9c0:	d00e      	beq.n	800e9e0 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x6fc>
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	331c      	adds	r3, #28
 800e9c8:	681d      	ldr	r5, [r3, #0]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6859      	ldr	r1, [r3, #4]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	689a      	ldr	r2, [r3, #8]
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	6838      	ldr	r0, [r7, #0]
 800e9d6:	47a8      	blx	r5
 800e9d8:	4603      	mov	r3, r0
 800e9da:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 800e9de:	e023      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else if (argument.startsWith("-k")) setPackageName(ac_, av_, i);
 800e9e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e9e4:	491e      	ldr	r1, [pc, #120]	; (800ea60 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x77c>)
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f7f7 fd3b 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800e9ec:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 800e9f0:	f107 0308 	add.w	r3, r7, #8
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f7f7 fdf7 	bl	80065ea <_ZNK12SimpleString10startsWithERKS_>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	461d      	mov	r5, r3
 800ea00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7f8 f8e4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ea0a:	2d00      	cmp	r5, #0
 800ea0c:	d009      	beq.n	800ea22 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x73e>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6859      	ldr	r1, [r3, #4]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	689a      	ldr	r2, [r3, #8]
 800ea16:	f107 0310 	add.w	r3, r7, #16
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 fd98 	bl	800f550 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>
 800ea20:	e002      	b.n	800ea28 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x744>
        else correctParameters = false;
 800ea22:	2300      	movs	r3, #0
 800ea24:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef

        if (correctParameters == false) {
 800ea28:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d102      	bne.n	800ea36 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x752>
            return false;
 800ea30:	2400      	movs	r4, #0
 800ea32:	2500      	movs	r5, #0
 800ea34:	e000      	b.n	800ea38 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x754>
        SimpleString argument = av_[i];
 800ea36:	2501      	movs	r5, #1
 800ea38:	f107 0308 	add.w	r3, r7, #8
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7f8 f8c8 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800ea42:	2d01      	cmp	r5, #1
 800ea44:	d104      	bne.n	800ea50 <_ZN20CommandLineArguments5parseEP10TestPlugin+0x76c>
    for (int i = 1; i < ac_; i++) {
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	3301      	adds	r3, #1
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	e455      	b.n	800e2fa <_ZN20CommandLineArguments5parseEP10TestPlugin+0x16>
        }
    }
    return true;
 800ea4e:	2401      	movs	r4, #1
 800ea50:	4623      	mov	r3, r4
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	37f0      	adds	r7, #240	; 0xf0
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bdb0      	pop	{r4, r5, r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08015780 	.word	0x08015780
 800ea60:	080157ec 	.word	0x080157ec

0800ea64 <_ZNK20CommandLineArguments5usageEv>:

const char* CommandLineArguments::usage() const
{
 800ea64:	b480      	push	{r7}
 800ea66:	b083      	sub	sp, #12
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
    return "use -h for more extensive help\n"
           "usage [-h] [-v] [-vv] [-c] [-p] [-lg] [-ln] [-ri] [-r#] [-f]\n"
           "      [-g|sg|xg|xsg groupName]... [-n|sn|xn|xsn testName]... [-t groupName.testName]...\n"
           "      [-b] [-s [randomizerSeed>0]] [\"TEST(groupName, testName)\"]...\n"
           "      [-o{normal, junit, teamcity}] [-k packageName]\n";
 800ea6c:	4b03      	ldr	r3, [pc, #12]	; (800ea7c <_ZNK20CommandLineArguments5usageEv+0x18>)
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	370c      	adds	r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea78:	4770      	bx	lr
 800ea7a:	bf00      	nop
 800ea7c:	080157f0 	.word	0x080157f0

0800ea80 <_ZNK20CommandLineArguments4helpEv>:

const char* CommandLineArguments::help() const
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
      "Options that control how the tests are run:\n"
      "  -p               - run tests in a separate process.\n"
      "  -b               - run the tests backwards, reversing the normal way\n"
      "  -s [seed]        - shuffle tests randomly. Seed is optional\n"
      "  -r#              - repeat the tests some number (#) of times, or twice if # is not specified.\n"
      "  -f               - Cause the tests to crash on failure (to allow the test to be debugged if necessary)\n";
 800ea88:	4b03      	ldr	r3, [pc, #12]	; (800ea98 <_ZNK20CommandLineArguments4helpEv+0x18>)
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop
 800ea98:	08015920 	.word	0x08015920

0800ea9c <_ZNK20CommandLineArguments8needHelpEv>:

bool CommandLineArguments::needHelp() const
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
    return needHelp_;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	7b1b      	ldrb	r3, [r3, #12]
}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <_ZNK20CommandLineArguments9isVerboseEv>:

bool CommandLineArguments::isVerbose() const
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
    return verbose_;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	7b5b      	ldrb	r3, [r3, #13]
}
 800eac0:	4618      	mov	r0, r3
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <_ZNK20CommandLineArguments13isVeryVerboseEv>:

bool CommandLineArguments::isVeryVerbose() const
{
 800eacc:	b480      	push	{r7}
 800eace:	b083      	sub	sp, #12
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
    return veryVerbose_;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	7b9b      	ldrb	r3, [r3, #14]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <_ZNK20CommandLineArguments7isColorEv>:

bool CommandLineArguments::isColor() const
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
    return color_;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	7bdb      	ldrb	r3, [r3, #15]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	370c      	adds	r7, #12
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafa:	4770      	bx	lr

0800eafc <_ZNK20CommandLineArguments23isListingTestGroupNamesEv>:

bool CommandLineArguments::isListingTestGroupNames() const
{
 800eafc:	b480      	push	{r7}
 800eafe:	b083      	sub	sp, #12
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
    return listTestGroupNames_;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	7c5b      	ldrb	r3, [r3, #17]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <_ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv>:

bool CommandLineArguments::isListingTestGroupAndCaseNames() const
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
    return listTestGroupAndCaseNames_;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	7c9b      	ldrb	r3, [r3, #18]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <_ZNK20CommandLineArguments22isListingTestLocationsEv>:

bool CommandLineArguments::isListingTestLocations() const
{
 800eb2c:	b480      	push	{r7}
 800eb2e:	b083      	sub	sp, #12
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
    return listTestLocations_;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	7cdb      	ldrb	r3, [r3, #19]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <_ZNK20CommandLineArguments12isRunIgnoredEv>:

bool CommandLineArguments::isRunIgnored() const
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
    return runIgnored_;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	7d1b      	ldrb	r3, [r3, #20]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <_ZNK20CommandLineArguments25runTestsInSeperateProcessEv>:

bool CommandLineArguments::runTestsInSeperateProcess() const
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
    return runTestsAsSeperateProcess_;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	7c1b      	ldrb	r3, [r3, #16]
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr

0800eb74 <_ZNK20CommandLineArguments14getRepeatCountEv>:


size_t CommandLineArguments::getRepeatCount() const
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
    return repeat_;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	69db      	ldr	r3, [r3, #28]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <_ZNK20CommandLineArguments11isReversingEv>:

bool CommandLineArguments::isReversing() const
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
    return reversing_;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	7d5b      	ldrb	r3, [r3, #21]
}
 800eb98:	4618      	mov	r0, r3
 800eb9a:	370c      	adds	r7, #12
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr

0800eba4 <_ZNK20CommandLineArguments16isCrashingOnFailEv>:

bool CommandLineArguments::isCrashingOnFail() const
{
 800eba4:	b480      	push	{r7}
 800eba6:	b083      	sub	sp, #12
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
    return crashOnFail_;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	7d9b      	ldrb	r3, [r3, #22]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <_ZNK20CommandLineArguments11isShufflingEv>:

bool CommandLineArguments::isShuffling() const
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    return shuffling_;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	7ddb      	ldrb	r3, [r3, #23]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <_ZNK20CommandLineArguments14getShuffleSeedEv>:

size_t CommandLineArguments::getShuffleSeed() const
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
    return shuffleSeed_;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <_ZNK20CommandLineArguments15getGroupFiltersEv>:

const TestFilter* CommandLineArguments::getGroupFilters() const
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
    return groupFilters_;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <_ZNK20CommandLineArguments14getNameFiltersEv>:

const TestFilter* CommandLineArguments::getNameFilters() const
{
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
    return nameFilters_;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi>:

void CommandLineArguments::setRepeatCount(int ac, const char *const *av, int& i)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b086      	sub	sp, #24
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	60b9      	str	r1, [r7, #8]
 800ec26:	607a      	str	r2, [r7, #4]
 800ec28:	603b      	str	r3, [r7, #0]
    repeat_ = 0;
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	61da      	str	r2, [r3, #28]

    SimpleString repeatParameter(av[i]);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	4413      	add	r3, r2
 800ec3a:	681a      	ldr	r2, [r3, #0]
 800ec3c:	f107 0310 	add.w	r3, r7, #16
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7f7 fc0d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    if (repeatParameter.size() > 2) repeat_ = (size_t) (SimpleString::AtoI(av[i] + 2));
 800ec48:	f107 0310 	add.w	r3, r7, #16
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7f7 ff9f 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b02      	cmp	r3, #2
 800ec56:	bf8c      	ite	hi
 800ec58:	2301      	movhi	r3, #1
 800ec5a:	2300      	movls	r3, #0
 800ec5c:	b2db      	uxtb	r3, r3
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d00e      	beq.n	800ec80 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x64>
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	4413      	add	r3, r2
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	3302      	adds	r3, #2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7f7 f9f2 	bl	800605a <_ZN12SimpleString4AtoIEPKc>
 800ec76:	4603      	mov	r3, r0
 800ec78:	461a      	mov	r2, r3
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	61da      	str	r2, [r3, #28]
 800ec7e:	e01c      	b.n	800ecba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
    else if (i + 1 < ac) {
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	3301      	adds	r3, #1
 800ec86:	68ba      	ldr	r2, [r7, #8]
 800ec88:	429a      	cmp	r2, r3
 800ec8a:	dd16      	ble.n	800ecba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
        repeat_ = (size_t) (SimpleString::AtoI(av[i + 1]));
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	3301      	adds	r3, #1
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	4413      	add	r3, r2
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f7f7 f9dd 	bl	800605a <_ZN12SimpleString4AtoIEPKc>
 800eca0:	4603      	mov	r3, r0
 800eca2:	461a      	mov	r2, r3
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	61da      	str	r2, [r3, #28]
        if (repeat_ != 0) i++;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	69db      	ldr	r3, [r3, #28]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d004      	beq.n	800ecba <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0x9e>
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	1c5a      	adds	r2, r3, #1
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	601a      	str	r2, [r3, #0]
    }

    if (0 == repeat_) repeat_ = 2;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d102      	bne.n	800ecc8 <_ZN20CommandLineArguments14setRepeatCountEiPKPKcRi+0xac>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2202      	movs	r2, #2
 800ecc6:	61da      	str	r2, [r3, #28]
    SimpleString repeatParameter(av[i]);
 800ecc8:	f107 0310 	add.w	r3, r7, #16
 800eccc:	4618      	mov	r0, r3
 800ecce:	f7f7 ff80 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

}
 800ecd2:	bf00      	nop
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <_ZN20CommandLineArguments10setShuffleEiPKPKcRi>:

bool CommandLineArguments::setShuffle(int ac, const char * const *av, int& i)
{
 800ecdc:	b590      	push	{r4, r7, lr}
 800ecde:	b089      	sub	sp, #36	; 0x24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
 800ece8:	603b      	str	r3, [r7, #0]
    shuffling_ = true;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	2201      	movs	r2, #1
 800ecee:	75da      	strb	r2, [r3, #23]
    shuffleSeed_ = (unsigned int)GetPlatformSpecificTimeInMillis();
 800ecf0:	4b34      	ldr	r3, [pc, #208]	; (800edc4 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xe8>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4798      	blx	r3
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	461a      	mov	r2, r3
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	621a      	str	r2, [r3, #32]
    if (shuffleSeed_ == 0) shuffleSeed_++;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6a1b      	ldr	r3, [r3, #32]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d104      	bne.n	800ed10 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x34>
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6a1b      	ldr	r3, [r3, #32]
 800ed0a:	1c5a      	adds	r2, r3, #1
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	621a      	str	r2, [r3, #32]

    SimpleString shuffleParameter = av[i];
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	4413      	add	r3, r2
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	f107 0314 	add.w	r3, r7, #20
 800ed20:	4611      	mov	r1, r2
 800ed22:	4618      	mov	r0, r3
 800ed24:	f7f7 fb9d 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    if (shuffleParameter.size() > 2) {
 800ed28:	f107 0314 	add.w	r3, r7, #20
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7f7 ff2f 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	bf8c      	ite	hi
 800ed38:	2301      	movhi	r3, #1
 800ed3a:	2300      	movls	r3, #0
 800ed3c:	b2db      	uxtb	r3, r3
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d010      	beq.n	800ed64 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0x88>
        shufflingPreSeeded_ = true;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	2201      	movs	r2, #1
 800ed46:	761a      	strb	r2, [r3, #24]
        shuffleSeed_ = SimpleString::AtoU(av[i] + 2);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	4413      	add	r3, r2
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	3302      	adds	r3, #2
 800ed56:	4618      	mov	r0, r3
 800ed58:	f7f7 f946 	bl	8005fe8 <_ZN12SimpleString4AtoUEPKc>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	621a      	str	r2, [r3, #32]
 800ed62:	e01e      	b.n	800eda2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
    } else if (i + 1 < ac) {
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	68ba      	ldr	r2, [r7, #8]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	dd18      	ble.n	800eda2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        unsigned int parsedParameter = SimpleString::AtoU(av[i + 1]);
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	3301      	adds	r3, #1
 800ed76:	009b      	lsls	r3, r3, #2
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f7 f932 	bl	8005fe8 <_ZN12SimpleString4AtoUEPKc>
 800ed84:	61f8      	str	r0, [r7, #28]
        if (parsedParameter != 0)
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00a      	beq.n	800eda2 <_ZN20CommandLineArguments10setShuffleEiPKPKcRi+0xc6>
        {
            shufflingPreSeeded_ = true;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	761a      	strb	r2, [r3, #24]
            shuffleSeed_ = parsedParameter;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	69fa      	ldr	r2, [r7, #28]
 800ed96:	621a      	str	r2, [r3, #32]
            i++;
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	601a      	str	r2, [r3, #0]
        }
    }
    return (shuffleSeed_ != 0);
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	6a1b      	ldr	r3, [r3, #32]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	bf14      	ite	ne
 800edaa:	2301      	movne	r3, #1
 800edac:	2300      	moveq	r3, #0
 800edae:	b2dc      	uxtb	r4, r3
    SimpleString shuffleParameter = av[i];
 800edb0:	f107 0314 	add.w	r3, r7, #20
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7f7 ff0c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    return (shuffleSeed_ != 0);
 800edba:	4623      	mov	r3, r4
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3724      	adds	r7, #36	; 0x24
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd90      	pop	{r4, r7, pc}
 800edc4:	200000a4 	.word	0x200000a4

0800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>:

SimpleString CommandLineArguments::getParameterField(int ac, const char * const *av, int& i, const SimpleString& parameterName)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b088      	sub	sp, #32
 800edcc:	af00      	add	r7, sp, #0
 800edce:	60f8      	str	r0, [r7, #12]
 800edd0:	60b9      	str	r1, [r7, #8]
 800edd2:	607a      	str	r2, [r7, #4]
 800edd4:	603b      	str	r3, [r7, #0]
    size_t parameterLength = parameterName.size();
 800edd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edd8:	f7f7 feda 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800eddc:	61f8      	str	r0, [r7, #28]
    SimpleString parameter(av[i]);
 800edde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	683a      	ldr	r2, [r7, #0]
 800ede6:	4413      	add	r3, r2
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	f107 0314 	add.w	r3, r7, #20
 800edee:	4611      	mov	r1, r2
 800edf0:	4618      	mov	r0, r3
 800edf2:	f7f7 fb36 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    if (parameter.size() >  parameterLength) return av[i] + parameterLength;
 800edf6:	f107 0314 	add.w	r3, r7, #20
 800edfa:	4618      	mov	r0, r3
 800edfc:	f7f7 fec8 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800ee00:	4602      	mov	r2, r0
 800ee02:	69fb      	ldr	r3, [r7, #28]
 800ee04:	4293      	cmp	r3, r2
 800ee06:	bf34      	ite	cc
 800ee08:	2301      	movcc	r3, #1
 800ee0a:	2300      	movcs	r3, #0
 800ee0c:	b2db      	uxtb	r3, r3
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00c      	beq.n	800ee2c <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x64>
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	009b      	lsls	r3, r3, #2
 800ee18:	683a      	ldr	r2, [r7, #0]
 800ee1a:	4413      	add	r3, r2
 800ee1c:	681a      	ldr	r2, [r3, #0]
 800ee1e:	69fb      	ldr	r3, [r7, #28]
 800ee20:	4413      	add	r3, r2
 800ee22:	4619      	mov	r1, r3
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f7f7 fb1c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ee2a:	e019      	b.n	800ee60 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    else if (i + 1 < ac) return av[++i];
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	3301      	adds	r3, #1
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	dd0f      	ble.n	800ee58 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x90>
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	601a      	str	r2, [r3, #0]
 800ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	009b      	lsls	r3, r3, #2
 800ee48:	683a      	ldr	r2, [r7, #0]
 800ee4a:	4413      	add	r3, r2
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4619      	mov	r1, r3
 800ee50:	68f8      	ldr	r0, [r7, #12]
 800ee52:	f7f7 fb06 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ee56:	e003      	b.n	800ee60 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0x98>
    return "";
 800ee58:	4906      	ldr	r1, [pc, #24]	; (800ee74 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString+0xac>)
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f7f7 fb01 	bl	8006462 <_ZN12SimpleStringC1EPKc>
    SimpleString parameter(av[i]);
 800ee60:	f107 0314 	add.w	r3, r7, #20
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7f7 feb4 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	3720      	adds	r7, #32
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
 800ee72:	bf00      	nop
 800ee74:	0801576c 	.word	0x0801576c

0800ee78 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi>:

void CommandLineArguments::addGroupFilter(int ac, const char *const *av, int& i)
{
 800ee78:	b5b0      	push	{r4, r5, r7, lr}
 800ee7a:	b08c      	sub	sp, #48	; 0x30
 800ee7c:	af02      	add	r7, sp, #8
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-g"));
 800ee86:	f107 031c 	add.w	r3, r7, #28
 800ee8a:	491a      	ldr	r1, [pc, #104]	; (800eef4 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x7c>)
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7f7 fae8 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ee92:	f107 0014 	add.w	r0, r7, #20
 800ee96:	f107 031c 	add.w	r3, r7, #28
 800ee9a:	9301      	str	r3, [sp, #4]
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	68f9      	ldr	r1, [r7, #12]
 800eea6:	f7ff ff8f 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800eeaa:	f107 0514 	add.w	r5, r7, #20
 800eeae:	f44f 7289 	mov.w	r2, #274	; 0x112
 800eeb2:	4911      	ldr	r1, [pc, #68]	; (800eef8 <_ZN20CommandLineArguments14addGroupFilterEiPKPKcRi+0x80>)
 800eeb4:	2010      	movs	r0, #16
 800eeb6:	f7f6 fbeb 	bl	8005690 <_ZnwjPKci>
 800eeba:	4604      	mov	r4, r0
 800eebc:	4629      	mov	r1, r5
 800eebe:	4620      	mov	r0, r4
 800eec0:	f001 fe36 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800eec4:	627c      	str	r4, [r7, #36]	; 0x24
 800eec6:	f107 0314 	add.w	r3, r7, #20
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f7 fe81 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800eed0:	f107 031c 	add.w	r3, r7, #28
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f7 fe7c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    groupFilters_ = groupFilter->add(groupFilters_);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eede:	4619      	mov	r1, r3
 800eee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eee2:	f001 fe45 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800eee6:	4602      	mov	r2, r0
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800eeec:	bf00      	nop
 800eeee:	3728      	adds	r7, #40	; 0x28
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bdb0      	pop	{r4, r5, r7, pc}
 800eef4:	080157a0 	.word	0x080157a0
 800eef8:	08016134 	.word	0x08016134

0800eefc <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi>:

bool CommandLineArguments::addGroupDotNameFilter(int ac, const char *const *av, int& i)
{
 800eefc:	b5b0      	push	{r4, r5, r7, lr}
 800eefe:	b092      	sub	sp, #72	; 0x48
 800ef00:	af02      	add	r7, sp, #8
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	607a      	str	r2, [r7, #4]
 800ef08:	603b      	str	r3, [r7, #0]
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800ef0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef0e:	494e      	ldr	r1, [pc, #312]	; (800f048 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x14c>)
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7f7 faa6 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ef16:	f107 0020 	add.w	r0, r7, #32
 800ef1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef1e:	9301      	str	r3, [sp, #4]
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	9300      	str	r3, [sp, #0]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68ba      	ldr	r2, [r7, #8]
 800ef28:	68f9      	ldr	r1, [r7, #12]
 800ef2a:	f7ff ff4d 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800ef2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f7 fe4d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleStringCollection collection;
 800ef38:	f107 0310 	add.w	r3, r7, #16
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7f8 fc4f 	bl	80077e0 <_ZN22SimpleStringCollectionC1Ev>
    groupDotName.split(".", collection);
 800ef42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef46:	4941      	ldr	r1, [pc, #260]	; (800f04c <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x150>)
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f7f7 fa8a 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800ef4e:	f107 0210 	add.w	r2, r7, #16
 800ef52:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ef56:	f107 0320 	add.w	r3, r7, #32
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7f7 fbed 	bl	800673a <_ZNK12SimpleString5splitERKS_R22SimpleStringCollection>
 800ef60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7f7 fe34 	bl	8006bd2 <_ZN12SimpleStringD1Ev>

    if (collection.size() != 2) return false;
 800ef6a:	f107 0310 	add.w	r3, r7, #16
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f8 fcdb 	bl	800792a <_ZNK22SimpleStringCollection4sizeEv>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b02      	cmp	r3, #2
 800ef78:	bf14      	ite	ne
 800ef7a:	2301      	movne	r3, #1
 800ef7c:	2300      	moveq	r3, #0
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d001      	beq.n	800ef88 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x8c>
 800ef84:	2400      	movs	r4, #0
 800ef86:	e04f      	b.n	800f028 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x12c>

    groupFilters_ = (new TestFilter(collection[0].subString(0, collection[0].size()-1)))->add(groupFilters_);
 800ef88:	f107 0310 	add.w	r3, r7, #16
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f7f8 fcd8 	bl	8007944 <_ZN22SimpleStringCollectionixEj>
 800ef94:	4604      	mov	r4, r0
 800ef96:	f107 0310 	add.w	r3, r7, #16
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7f8 fcd1 	bl	8007944 <_ZN22SimpleStringCollectionixEj>
 800efa2:	4603      	mov	r3, r0
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7f7 fdf3 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800efaa:	4603      	mov	r3, r0
 800efac:	3b01      	subs	r3, #1
 800efae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800efb2:	2200      	movs	r2, #0
 800efb4:	4621      	mov	r1, r4
 800efb6:	f7f7 ff15 	bl	8006de4 <_ZNK12SimpleString9subStringEjj>
 800efba:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800efbe:	f44f 728f 	mov.w	r2, #286	; 0x11e
 800efc2:	4923      	ldr	r1, [pc, #140]	; (800f050 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800efc4:	2010      	movs	r0, #16
 800efc6:	f7f6 fb63 	bl	8005690 <_ZnwjPKci>
 800efca:	4604      	mov	r4, r0
 800efcc:	4629      	mov	r1, r5
 800efce:	4620      	mov	r0, r4
 800efd0:	f001 fdae 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	4619      	mov	r1, r3
 800efda:	4620      	mov	r0, r4
 800efdc:	f001 fdc8 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800efe0:	4602      	mov	r2, r0
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	625a      	str	r2, [r3, #36]	; 0x24
 800efe6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800efea:	4618      	mov	r0, r3
 800efec:	f7f7 fdf1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = (new TestFilter(collection[1]))->add(nameFilters_);
 800eff0:	f107 0310 	add.w	r3, r7, #16
 800eff4:	2101      	movs	r1, #1
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7f8 fca4 	bl	8007944 <_ZN22SimpleStringCollectionixEj>
 800effc:	4605      	mov	r5, r0
 800effe:	f240 121f 	movw	r2, #287	; 0x11f
 800f002:	4913      	ldr	r1, [pc, #76]	; (800f050 <_ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi+0x154>)
 800f004:	2010      	movs	r0, #16
 800f006:	f7f6 fb43 	bl	8005690 <_ZnwjPKci>
 800f00a:	4604      	mov	r4, r0
 800f00c:	4629      	mov	r1, r5
 800f00e:	4620      	mov	r0, r4
 800f010:	f001 fd8e 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f018:	4619      	mov	r1, r3
 800f01a:	4620      	mov	r0, r4
 800f01c:	f001 fda8 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f020:	4602      	mov	r2, r0
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 800f026:	2401      	movs	r4, #1
    SimpleStringCollection collection;
 800f028:	f107 0310 	add.w	r3, r7, #16
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f8 fc4b 	bl	80078c8 <_ZN22SimpleStringCollectionD1Ev>
    SimpleString groupDotName = getParameterField(ac, av, i, "-t");
 800f032:	f107 0320 	add.w	r3, r7, #32
 800f036:	4618      	mov	r0, r3
 800f038:	f7f7 fdcb 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f03c:	4623      	mov	r3, r4
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3740      	adds	r7, #64	; 0x40
 800f042:	46bd      	mov	sp, r7
 800f044:	bdb0      	pop	{r4, r5, r7, pc}
 800f046:	bf00      	nop
 800f048:	080157a4 	.word	0x080157a4
 800f04c:	08016154 	.word	0x08016154
 800f050:	08016134 	.word	0x08016134

0800f054 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800f054:	b5b0      	push	{r4, r5, r7, lr}
 800f056:	b08c      	sub	sp, #48	; 0x30
 800f058:	af02      	add	r7, sp, #8
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-sg"));
 800f062:	f107 031c 	add.w	r3, r7, #28
 800f066:	491c      	ldr	r1, [pc, #112]	; (800f0d8 <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x84>)
 800f068:	4618      	mov	r0, r3
 800f06a:	f7f7 f9fa 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f06e:	f107 0014 	add.w	r0, r7, #20
 800f072:	f107 031c 	add.w	r3, r7, #28
 800f076:	9301      	str	r3, [sp, #4]
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	9300      	str	r3, [sp, #0]
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	68f9      	ldr	r1, [r7, #12]
 800f082:	f7ff fea1 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f086:	f107 0514 	add.w	r5, r7, #20
 800f08a:	f240 1225 	movw	r2, #293	; 0x125
 800f08e:	4913      	ldr	r1, [pc, #76]	; (800f0dc <_ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi+0x88>)
 800f090:	2010      	movs	r0, #16
 800f092:	f7f6 fafd 	bl	8005690 <_ZnwjPKci>
 800f096:	4604      	mov	r4, r0
 800f098:	4629      	mov	r1, r5
 800f09a:	4620      	mov	r0, r4
 800f09c:	f001 fd48 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f0a0:	627c      	str	r4, [r7, #36]	; 0x24
 800f0a2:	f107 0314 	add.w	r3, r7, #20
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7f7 fd93 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f0ac:	f107 031c 	add.w	r3, r7, #28
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	f7f7 fd8e 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800f0b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b8:	f001 fd75 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0c4:	f001 fd54 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f0c8:	4602      	mov	r2, r0
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f0ce:	bf00      	nop
 800f0d0:	3728      	adds	r7, #40	; 0x28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bdb0      	pop	{r4, r5, r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	080157a8 	.word	0x080157a8
 800f0dc:	08016134 	.word	0x08016134

0800f0e0 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeGroupFilter(int ac, const char *const *av, int& i)
{
 800f0e0:	b5b0      	push	{r4, r5, r7, lr}
 800f0e2:	b08c      	sub	sp, #48	; 0x30
 800f0e4:	af02      	add	r7, sp, #8
 800f0e6:	60f8      	str	r0, [r7, #12]
 800f0e8:	60b9      	str	r1, [r7, #8]
 800f0ea:	607a      	str	r2, [r7, #4]
 800f0ec:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xg"));
 800f0ee:	f107 031c 	add.w	r3, r7, #28
 800f0f2:	491c      	ldr	r1, [pc, #112]	; (800f164 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x84>)
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f7 f9b4 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f0fa:	f107 0014 	add.w	r0, r7, #20
 800f0fe:	f107 031c 	add.w	r3, r7, #28
 800f102:	9301      	str	r3, [sp, #4]
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	9300      	str	r3, [sp, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	68f9      	ldr	r1, [r7, #12]
 800f10e:	f7ff fe5b 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f112:	f107 0514 	add.w	r5, r7, #20
 800f116:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f11a:	4913      	ldr	r1, [pc, #76]	; (800f168 <_ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi+0x88>)
 800f11c:	2010      	movs	r0, #16
 800f11e:	f7f6 fab7 	bl	8005690 <_ZnwjPKci>
 800f122:	4604      	mov	r4, r0
 800f124:	4629      	mov	r1, r5
 800f126:	4620      	mov	r0, r4
 800f128:	f001 fd02 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f12c:	627c      	str	r4, [r7, #36]	; 0x24
 800f12e:	f107 0314 	add.w	r3, r7, #20
 800f132:	4618      	mov	r0, r3
 800f134:	f7f7 fd4d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f138:	f107 031c 	add.w	r3, r7, #28
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7f7 fd48 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    groupFilter->invertMatching();
 800f142:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f144:	f001 fd3c 	bl	8010bc0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14c:	4619      	mov	r1, r3
 800f14e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f150:	f001 fd0e 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f154:	4602      	mov	r2, r0
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f15a:	bf00      	nop
 800f15c:	3728      	adds	r7, #40	; 0x28
 800f15e:	46bd      	mov	sp, r7
 800f160:	bdb0      	pop	{r4, r5, r7, pc}
 800f162:	bf00      	nop
 800f164:	080157ac 	.word	0x080157ac
 800f168:	08016134 	.word	0x08016134

0800f16c <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictGroupFilter(int ac, const char *const *av, int& i)
{
 800f16c:	b5b0      	push	{r4, r5, r7, lr}
 800f16e:	b08c      	sub	sp, #48	; 0x30
 800f170:	af02      	add	r7, sp, #8
 800f172:	60f8      	str	r0, [r7, #12]
 800f174:	60b9      	str	r1, [r7, #8]
 800f176:	607a      	str	r2, [r7, #4]
 800f178:	603b      	str	r3, [r7, #0]
    TestFilter* groupFilter = new TestFilter(getParameterField(ac, av, i, "-xsg"));
 800f17a:	f107 031c 	add.w	r3, r7, #28
 800f17e:	491d      	ldr	r1, [pc, #116]	; (800f1f4 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x88>)
 800f180:	4618      	mov	r0, r3
 800f182:	f7f7 f96e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f186:	f107 0014 	add.w	r0, r7, #20
 800f18a:	f107 031c 	add.w	r3, r7, #28
 800f18e:	9301      	str	r3, [sp, #4]
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	9300      	str	r3, [sp, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	68f9      	ldr	r1, [r7, #12]
 800f19a:	f7ff fe15 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f19e:	f107 0514 	add.w	r5, r7, #20
 800f1a2:	f240 1233 	movw	r2, #307	; 0x133
 800f1a6:	4914      	ldr	r1, [pc, #80]	; (800f1f8 <_ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi+0x8c>)
 800f1a8:	2010      	movs	r0, #16
 800f1aa:	f7f6 fa71 	bl	8005690 <_ZnwjPKci>
 800f1ae:	4604      	mov	r4, r0
 800f1b0:	4629      	mov	r1, r5
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	f001 fcbc 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f1b8:	627c      	str	r4, [r7, #36]	; 0x24
 800f1ba:	f107 0314 	add.w	r3, r7, #20
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f7f7 fd07 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f1c4:	f107 031c 	add.w	r3, r7, #28
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f7f7 fd02 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    groupFilter->strictMatching();
 800f1ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1d0:	f001 fce9 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    groupFilter->invertMatching();
 800f1d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1d6:	f001 fcf3 	bl	8010bc0 <_ZN10TestFilter14invertMatchingEv>
    groupFilters_ = groupFilter->add(groupFilters_);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1de:	4619      	mov	r1, r3
 800f1e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f1e2:	f001 fcc5 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f1ec:	bf00      	nop
 800f1ee:	3728      	adds	r7, #40	; 0x28
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bdb0      	pop	{r4, r5, r7, pc}
 800f1f4:	080157b0 	.word	0x080157b0
 800f1f8:	08016134 	.word	0x08016134

0800f1fc <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi>:

void CommandLineArguments::addNameFilter(int ac, const char *const *av, int& i)
{
 800f1fc:	b5b0      	push	{r4, r5, r7, lr}
 800f1fe:	b08c      	sub	sp, #48	; 0x30
 800f200:	af02      	add	r7, sp, #8
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
 800f208:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, i, "-n"));
 800f20a:	f107 031c 	add.w	r3, r7, #28
 800f20e:	491a      	ldr	r1, [pc, #104]	; (800f278 <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x7c>)
 800f210:	4618      	mov	r0, r3
 800f212:	f7f7 f926 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f216:	f107 0014 	add.w	r0, r7, #20
 800f21a:	f107 031c 	add.w	r3, r7, #28
 800f21e:	9301      	str	r3, [sp, #4]
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	9300      	str	r3, [sp, #0]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	68f9      	ldr	r1, [r7, #12]
 800f22a:	f7ff fdcd 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f22e:	f107 0514 	add.w	r5, r7, #20
 800f232:	f240 123b 	movw	r2, #315	; 0x13b
 800f236:	4911      	ldr	r1, [pc, #68]	; (800f27c <_ZN20CommandLineArguments13addNameFilterEiPKPKcRi+0x80>)
 800f238:	2010      	movs	r0, #16
 800f23a:	f7f6 fa29 	bl	8005690 <_ZnwjPKci>
 800f23e:	4604      	mov	r4, r0
 800f240:	4629      	mov	r1, r5
 800f242:	4620      	mov	r0, r4
 800f244:	f001 fc74 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f248:	627c      	str	r4, [r7, #36]	; 0x24
 800f24a:	f107 0314 	add.w	r3, r7, #20
 800f24e:	4618      	mov	r0, r3
 800f250:	f7f7 fcbf 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f254:	f107 031c 	add.w	r3, r7, #28
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f7 fcba 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    nameFilters_ = nameFilter->add(nameFilters_);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f262:	4619      	mov	r1, r3
 800f264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f266:	f001 fc83 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f26a:	4602      	mov	r2, r0
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f270:	bf00      	nop
 800f272:	3728      	adds	r7, #40	; 0x28
 800f274:	46bd      	mov	sp, r7
 800f276:	bdb0      	pop	{r4, r5, r7, pc}
 800f278:	080157b8 	.word	0x080157b8
 800f27c:	08016134 	.word	0x08016134

0800f280 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addStrictNameFilter(int ac, const char *const *av, int& index)
{
 800f280:	b5b0      	push	{r4, r5, r7, lr}
 800f282:	b08c      	sub	sp, #48	; 0x30
 800f284:	af02      	add	r7, sp, #8
 800f286:	60f8      	str	r0, [r7, #12]
 800f288:	60b9      	str	r1, [r7, #8]
 800f28a:	607a      	str	r2, [r7, #4]
 800f28c:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-sn"));
 800f28e:	f107 031c 	add.w	r3, r7, #28
 800f292:	491c      	ldr	r1, [pc, #112]	; (800f304 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x84>)
 800f294:	4618      	mov	r0, r3
 800f296:	f7f7 f8e4 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f29a:	f107 0014 	add.w	r0, r7, #20
 800f29e:	f107 031c 	add.w	r3, r7, #28
 800f2a2:	9301      	str	r3, [sp, #4]
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	9300      	str	r3, [sp, #0]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	68f9      	ldr	r1, [r7, #12]
 800f2ae:	f7ff fd8b 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f2b2:	f107 0514 	add.w	r5, r7, #20
 800f2b6:	f240 1241 	movw	r2, #321	; 0x141
 800f2ba:	4913      	ldr	r1, [pc, #76]	; (800f308 <_ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi+0x88>)
 800f2bc:	2010      	movs	r0, #16
 800f2be:	f7f6 f9e7 	bl	8005690 <_ZnwjPKci>
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f001 fc32 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f2cc:	627c      	str	r4, [r7, #36]	; 0x24
 800f2ce:	f107 0314 	add.w	r3, r7, #20
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7f7 fc7d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f2d8:	f107 031c 	add.w	r3, r7, #28
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f7f7 fc78 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    nameFilter->strictMatching();
 800f2e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e4:	f001 fc5f 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2f0:	f001 fc3e 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f2f4:	4602      	mov	r2, r0
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f2fa:	bf00      	nop
 800f2fc:	3728      	adds	r7, #40	; 0x28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bdb0      	pop	{r4, r5, r7, pc}
 800f302:	bf00      	nop
 800f304:	080157bc 	.word	0x080157bc
 800f308:	08016134 	.word	0x08016134

0800f30c <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeNameFilter(int ac, const char *const *av, int& index)
{
 800f30c:	b5b0      	push	{r4, r5, r7, lr}
 800f30e:	b08c      	sub	sp, #48	; 0x30
 800f310:	af02      	add	r7, sp, #8
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xn"));
 800f31a:	f107 031c 	add.w	r3, r7, #28
 800f31e:	491c      	ldr	r1, [pc, #112]	; (800f390 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x84>)
 800f320:	4618      	mov	r0, r3
 800f322:	f7f7 f89e 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f326:	f107 0014 	add.w	r0, r7, #20
 800f32a:	f107 031c 	add.w	r3, r7, #28
 800f32e:	9301      	str	r3, [sp, #4]
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	9300      	str	r3, [sp, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	68ba      	ldr	r2, [r7, #8]
 800f338:	68f9      	ldr	r1, [r7, #12]
 800f33a:	f7ff fd45 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f33e:	f107 0514 	add.w	r5, r7, #20
 800f342:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f346:	4913      	ldr	r1, [pc, #76]	; (800f394 <_ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi+0x88>)
 800f348:	2010      	movs	r0, #16
 800f34a:	f7f6 f9a1 	bl	8005690 <_ZnwjPKci>
 800f34e:	4604      	mov	r4, r0
 800f350:	4629      	mov	r1, r5
 800f352:	4620      	mov	r0, r4
 800f354:	f001 fbec 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f358:	627c      	str	r4, [r7, #36]	; 0x24
 800f35a:	f107 0314 	add.w	r3, r7, #20
 800f35e:	4618      	mov	r0, r3
 800f360:	f7f7 fc37 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f364:	f107 031c 	add.w	r3, r7, #28
 800f368:	4618      	mov	r0, r3
 800f36a:	f7f7 fc32 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800f36e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f370:	f001 fc26 	bl	8010bc0 <_ZN10TestFilter14invertMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f378:	4619      	mov	r1, r3
 800f37a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f37c:	f001 fbf8 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f380:	4602      	mov	r2, r0
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f386:	bf00      	nop
 800f388:	3728      	adds	r7, #40	; 0x28
 800f38a:	46bd      	mov	sp, r7
 800f38c:	bdb0      	pop	{r4, r5, r7, pc}
 800f38e:	bf00      	nop
 800f390:	080157c0 	.word	0x080157c0
 800f394:	08016134 	.word	0x08016134

0800f398 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi>:

void CommandLineArguments::addExcludeStrictNameFilter(int ac, const char *const *av, int& index)
{
 800f398:	b5b0      	push	{r4, r5, r7, lr}
 800f39a:	b08c      	sub	sp, #48	; 0x30
 800f39c:	af02      	add	r7, sp, #8
 800f39e:	60f8      	str	r0, [r7, #12]
 800f3a0:	60b9      	str	r1, [r7, #8]
 800f3a2:	607a      	str	r2, [r7, #4]
 800f3a4:	603b      	str	r3, [r7, #0]
    TestFilter* nameFilter = new TestFilter(getParameterField(ac, av, index, "-xsn"));
 800f3a6:	f107 031c 	add.w	r3, r7, #28
 800f3aa:	491d      	ldr	r1, [pc, #116]	; (800f420 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x88>)
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7f7 f858 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f3b2:	f107 0014 	add.w	r0, r7, #20
 800f3b6:	f107 031c 	add.w	r3, r7, #28
 800f3ba:	9301      	str	r3, [sp, #4]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	68f9      	ldr	r1, [r7, #12]
 800f3c6:	f7ff fcff 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f3ca:	f107 0514 	add.w	r5, r7, #20
 800f3ce:	f240 124f 	movw	r2, #335	; 0x14f
 800f3d2:	4914      	ldr	r1, [pc, #80]	; (800f424 <_ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi+0x8c>)
 800f3d4:	2010      	movs	r0, #16
 800f3d6:	f7f6 f95b 	bl	8005690 <_ZnwjPKci>
 800f3da:	4604      	mov	r4, r0
 800f3dc:	4629      	mov	r1, r5
 800f3de:	4620      	mov	r0, r4
 800f3e0:	f001 fba6 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f3e4:	627c      	str	r4, [r7, #36]	; 0x24
 800f3e6:	f107 0314 	add.w	r3, r7, #20
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7f7 fbf1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f3f0:	f107 031c 	add.w	r3, r7, #28
 800f3f4:	4618      	mov	r0, r3
 800f3f6:	f7f7 fbec 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    nameFilter->invertMatching();
 800f3fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f3fc:	f001 fbe0 	bl	8010bc0 <_ZN10TestFilter14invertMatchingEv>
    nameFilter->strictMatching();
 800f400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f402:	f001 fbd0 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    nameFilters_= nameFilter->add(nameFilters_);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f40a:	4619      	mov	r1, r3
 800f40c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f40e:	f001 fbaf 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f412:	4602      	mov	r2, r0
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f418:	bf00      	nop
 800f41a:	3728      	adds	r7, #40	; 0x28
 800f41c:	46bd      	mov	sp, r7
 800f41e:	bdb0      	pop	{r4, r5, r7, pc}
 800f420:	080157c4 	.word	0x080157c4
 800f424:	08016134 	.word	0x08016134

0800f428 <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_>:

void CommandLineArguments::addTestToRunBasedOnVerboseOutput(int ac, const char *const *av, int& index, const char* parameterName)
{
 800f428:	b5b0      	push	{r4, r5, r7, lr}
 800f42a:	b092      	sub	sp, #72	; 0x48
 800f42c:	af02      	add	r7, sp, #8
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	607a      	str	r2, [r7, #4]
 800f434:	603b      	str	r3, [r7, #0]
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800f436:	f107 0320 	add.w	r3, r7, #32
 800f43a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f43c:	4618      	mov	r0, r3
 800f43e:	f7f7 f810 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f442:	f107 0018 	add.w	r0, r7, #24
 800f446:	f107 0320 	add.w	r3, r7, #32
 800f44a:	9301      	str	r3, [sp, #4]
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	9300      	str	r3, [sp, #0]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68ba      	ldr	r2, [r7, #8]
 800f454:	68f9      	ldr	r1, [r7, #12]
 800f456:	f7ff fcb7 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f45a:	f107 0320 	add.w	r3, r7, #32
 800f45e:	4618      	mov	r0, r3
 800f460:	f7f7 fbb7 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800f464:	f107 0010 	add.w	r0, r7, #16
 800f468:	f107 0118 	add.w	r1, r7, #24
 800f46c:	2329      	movs	r3, #41	; 0x29
 800f46e:	222c      	movs	r2, #44	; 0x2c
 800f470:	f7f7 fd60 	bl	8006f34 <_ZNK12SimpleString17subStringFromTillEcc>
    testname = testname.subString(2);
 800f474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f478:	f107 0110 	add.w	r1, r7, #16
 800f47c:	2202      	movs	r2, #2
 800f47e:	4618      	mov	r0, r3
 800f480:	f7f7 fcfa 	bl	8006e78 <_ZNK12SimpleString9subStringEj>
 800f484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f488:	f107 0310 	add.w	r3, r7, #16
 800f48c:	4611      	mov	r1, r2
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f7 f853 	bl	800653a <_ZN12SimpleStringaSERKS_>
 800f494:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f498:	4618      	mov	r0, r3
 800f49a:	f7f7 fb9a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    TestFilter* namefilter = new TestFilter(testname);
 800f49e:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 800f4a2:	492a      	ldr	r1, [pc, #168]	; (800f54c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800f4a4:	2010      	movs	r0, #16
 800f4a6:	f7f6 f8f3 	bl	8005690 <_ZnwjPKci>
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	f107 0310 	add.w	r3, r7, #16
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	4620      	mov	r0, r4
 800f4b4:	f001 fb3c 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f4b8:	63fc      	str	r4, [r7, #60]	; 0x3c
    TestFilter* groupfilter = new TestFilter(wholename.subStringFromTill(wholename.at(0), ','));
 800f4ba:	f107 0318 	add.w	r3, r7, #24
 800f4be:	2100      	movs	r1, #0
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7f7 fcea 	bl	8006e9a <_ZNK12SimpleString2atEj>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f4ce:	f107 0118 	add.w	r1, r7, #24
 800f4d2:	232c      	movs	r3, #44	; 0x2c
 800f4d4:	f7f7 fd2e 	bl	8006f34 <_ZNK12SimpleString17subStringFromTillEcc>
 800f4d8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800f4dc:	f240 125b 	movw	r2, #347	; 0x15b
 800f4e0:	491a      	ldr	r1, [pc, #104]	; (800f54c <_ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_+0x124>)
 800f4e2:	2010      	movs	r0, #16
 800f4e4:	f7f6 f8d4 	bl	8005690 <_ZnwjPKci>
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	4629      	mov	r1, r5
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	f001 fb1f 	bl	8010b30 <_ZN10TestFilterC1ERK12SimpleString>
 800f4f2:	63bc      	str	r4, [r7, #56]	; 0x38
 800f4f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7f7 fb6a 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    namefilter->strictMatching();
 800f4fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f500:	f001 fb51 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    groupfilter->strictMatching();
 800f504:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f506:	f001 fb4e 	bl	8010ba6 <_ZN10TestFilter14strictMatchingEv>
    groupFilters_ = groupfilter->add(groupFilters_);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f50e:	4619      	mov	r1, r3
 800f510:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f512:	f001 fb2d 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f516:	4602      	mov	r2, r0
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	625a      	str	r2, [r3, #36]	; 0x24
    nameFilters_ = namefilter->add(nameFilters_);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f520:	4619      	mov	r1, r3
 800f522:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f524:	f001 fb24 	bl	8010b70 <_ZN10TestFilter3addEPS_>
 800f528:	4602      	mov	r2, r0
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	629a      	str	r2, [r3, #40]	; 0x28
    SimpleString testname = wholename.subStringFromTill(',', ')');
 800f52e:	f107 0310 	add.w	r3, r7, #16
 800f532:	4618      	mov	r0, r3
 800f534:	f7f7 fb4d 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    SimpleString wholename = getParameterField(ac, av, index, parameterName);
 800f538:	f107 0318 	add.w	r3, r7, #24
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7f7 fb48 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
}
 800f542:	bf00      	nop
 800f544:	3740      	adds	r7, #64	; 0x40
 800f546:	46bd      	mov	sp, r7
 800f548:	bdb0      	pop	{r4, r5, r7, pc}
 800f54a:	bf00      	nop
 800f54c:	08016134 	.word	0x08016134

0800f550 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi>:

void CommandLineArguments::setPackageName(int ac, const char *const *av, int& i)
{
 800f550:	b590      	push	{r4, r7, lr}
 800f552:	b08b      	sub	sp, #44	; 0x2c
 800f554:	af02      	add	r7, sp, #8
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	603b      	str	r3, [r7, #0]
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800f55e:	f107 0318 	add.w	r3, r7, #24
 800f562:	491b      	ldr	r1, [pc, #108]	; (800f5d0 <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x80>)
 800f564:	4618      	mov	r0, r3
 800f566:	f7f6 ff7c 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f56a:	f107 0010 	add.w	r0, r7, #16
 800f56e:	f107 0318 	add.w	r3, r7, #24
 800f572:	9301      	str	r3, [sp, #4]
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	9300      	str	r3, [sp, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	68f9      	ldr	r1, [r7, #12]
 800f57e:	f7ff fc23 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f582:	f107 0318 	add.w	r3, r7, #24
 800f586:	4618      	mov	r0, r3
 800f588:	f7f7 fb23 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (packageName.size() == 0) return;
 800f58c:	f107 0310 	add.w	r3, r7, #16
 800f590:	4618      	mov	r0, r3
 800f592:	f7f7 fafd 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800f596:	4603      	mov	r3, r0
 800f598:	2b00      	cmp	r3, #0
 800f59a:	bf0c      	ite	eq
 800f59c:	2301      	moveq	r3, #1
 800f59e:	2300      	movne	r3, #0
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d001      	beq.n	800f5aa <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x5a>
 800f5a6:	2400      	movs	r4, #0
 800f5a8:	e008      	b.n	800f5bc <_ZN20CommandLineArguments14setPackageNameEiPKPKcRi+0x6c>

    packageName_ = packageName;
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	3330      	adds	r3, #48	; 0x30
 800f5ae:	f107 0210 	add.w	r2, r7, #16
 800f5b2:	4611      	mov	r1, r2
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7f6 ffc0 	bl	800653a <_ZN12SimpleStringaSERKS_>
    SimpleString packageName = getParameterField(ac, av, i, "-k");
 800f5ba:	2401      	movs	r4, #1
 800f5bc:	f107 0310 	add.w	r3, r7, #16
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	f7f7 fb06 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f5c6:	2c01      	cmp	r4, #1
}
 800f5c8:	3724      	adds	r7, #36	; 0x24
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	bd90      	pop	{r4, r7, pc}
 800f5ce:	bf00      	nop
 800f5d0:	080157ec 	.word	0x080157ec

0800f5d4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi>:

bool CommandLineArguments::setOutputType(int ac, const char *const *av, int& i)
{
 800f5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5d6:	b093      	sub	sp, #76	; 0x4c
 800f5d8:	af02      	add	r7, sp, #8
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 800f5e2:	f107 0318 	add.w	r3, r7, #24
 800f5e6:	4953      	ldr	r1, [pc, #332]	; (800f734 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x160>)
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7f6 ff3a 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f5ee:	f107 0010 	add.w	r0, r7, #16
 800f5f2:	f107 0318 	add.w	r3, r7, #24
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	9300      	str	r3, [sp, #0]
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	68ba      	ldr	r2, [r7, #8]
 800f600:	68f9      	ldr	r1, [r7, #12]
 800f602:	f7ff fbe1 	bl	800edc8 <_ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString>
 800f606:	f107 0318 	add.w	r3, r7, #24
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7f7 fae1 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
    if (outputType.size() == 0) return false;
 800f610:	f107 0310 	add.w	r3, r7, #16
 800f614:	4618      	mov	r0, r3
 800f616:	f7f7 fabb 	bl	8006b90 <_ZNK12SimpleString4sizeEv>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bf0c      	ite	eq
 800f620:	2301      	moveq	r3, #1
 800f622:	2300      	movne	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x5a>
 800f62a:	2400      	movs	r4, #0
 800f62c:	e078      	b.n	800f720 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>

    if (outputType == "normal" || outputType == "eclipse") {
 800f62e:	2500      	movs	r5, #0
 800f630:	f107 0320 	add.w	r3, r7, #32
 800f634:	4940      	ldr	r1, [pc, #256]	; (800f738 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x164>)
 800f636:	4618      	mov	r0, r3
 800f638:	f7f6 ff13 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f63c:	2601      	movs	r6, #1
 800f63e:	f107 0220 	add.w	r2, r7, #32
 800f642:	f107 0310 	add.w	r3, r7, #16
 800f646:	4611      	mov	r1, r2
 800f648:	4618      	mov	r0, r3
 800f64a:	f7f7 face 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800f64e:	4603      	mov	r3, r0
 800f650:	2b00      	cmp	r3, #0
 800f652:	d111      	bne.n	800f678 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa4>
 800f654:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f658:	4938      	ldr	r1, [pc, #224]	; (800f73c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x168>)
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7f6 ff01 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f660:	2501      	movs	r5, #1
 800f662:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f666:	f107 0310 	add.w	r3, r7, #16
 800f66a:	4611      	mov	r1, r2
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7f7 fabc 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800f672:	4603      	mov	r3, r0
 800f674:	2b00      	cmp	r3, #0
 800f676:	d001      	beq.n	800f67c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xa8>
 800f678:	2401      	movs	r4, #1
 800f67a:	e000      	b.n	800f67e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xaa>
 800f67c:	2400      	movs	r4, #0
 800f67e:	2d00      	cmp	r5, #0
 800f680:	d004      	beq.n	800f68c <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xb8>
 800f682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f686:	4618      	mov	r0, r3
 800f688:	f7f7 faa3 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f68c:	2e00      	cmp	r6, #0
 800f68e:	d004      	beq.n	800f69a <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xc6>
 800f690:	f107 0320 	add.w	r3, r7, #32
 800f694:	4618      	mov	r0, r3
 800f696:	f7f7 fa9c 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f69a:	2c00      	cmp	r4, #0
 800f69c:	d005      	beq.n	800f6aa <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0xd6>
        outputType_ = OUTPUT_ECLIPSE;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800f6a6:	2401      	movs	r4, #1
 800f6a8:	e03a      	b.n	800f720 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "junit") {
 800f6aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ae:	4924      	ldr	r1, [pc, #144]	; (800f740 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x16c>)
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	f7f6 fed6 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f6b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f6ba:	f107 0310 	add.w	r3, r7, #16
 800f6be:	4611      	mov	r1, r2
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7f7 fa92 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	461c      	mov	r4, r3
 800f6ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7f7 fa7f 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f6d4:	2c00      	cmp	r4, #0
 800f6d6:	d005      	beq.n	800f6e4 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x110>
        outputType_ = OUTPUT_JUNIT;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800f6e0:	2401      	movs	r4, #1
 800f6e2:	e01d      	b.n	800f720 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }
    if (outputType == "teamcity") {
 800f6e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f6e8:	4916      	ldr	r1, [pc, #88]	; (800f744 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x170>)
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7f6 feb9 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 800f6f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800f6f4:	f107 0310 	add.w	r3, r7, #16
 800f6f8:	4611      	mov	r1, r2
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7f7 fa75 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 800f700:	4603      	mov	r3, r0
 800f702:	461c      	mov	r4, r3
 800f704:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f708:	4618      	mov	r0, r3
 800f70a:	f7f7 fa62 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f70e:	2c00      	cmp	r4, #0
 800f710:	d005      	beq.n	800f71e <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14a>
        outputType_ = OUTPUT_TEAMCITY;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2202      	movs	r2, #2
 800f716:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        return true;
 800f71a:	2401      	movs	r4, #1
 800f71c:	e000      	b.n	800f720 <_ZN20CommandLineArguments13setOutputTypeEiPKPKcRi+0x14c>
    }

    return false;
 800f71e:	2400      	movs	r4, #0
    SimpleString outputType = getParameterField(ac, av, i, "-o");
 800f720:	f107 0310 	add.w	r3, r7, #16
 800f724:	4618      	mov	r0, r3
 800f726:	f7f7 fa54 	bl	8006bd2 <_ZN12SimpleStringD1Ev>
 800f72a:	4623      	mov	r3, r4
}
 800f72c:	4618      	mov	r0, r3
 800f72e:	3744      	adds	r7, #68	; 0x44
 800f730:	46bd      	mov	sp, r7
 800f732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f734:	080157e8 	.word	0x080157e8
 800f738:	08016158 	.word	0x08016158
 800f73c:	08016160 	.word	0x08016160
 800f740:	08016168 	.word	0x08016168
 800f744:	08016170 	.word	0x08016170

0800f748 <_ZNK20CommandLineArguments13isJUnitOutputEv>:
{
    return outputType_ == OUTPUT_ECLIPSE;
}

bool CommandLineArguments::isJUnitOutput() const
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_JUNIT;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f756:	2b01      	cmp	r3, #1
 800f758:	bf0c      	ite	eq
 800f75a:	2301      	moveq	r3, #1
 800f75c:	2300      	movne	r3, #0
 800f75e:	b2db      	uxtb	r3, r3
}
 800f760:	4618      	mov	r0, r3
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <_ZNK20CommandLineArguments16isTeamCityOutputEv>:

bool CommandLineArguments::isTeamCityOutput() const
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
    return outputType_ == OUTPUT_TEAMCITY;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f77a:	2b02      	cmp	r3, #2
 800f77c:	bf0c      	ite	eq
 800f77e:	2301      	moveq	r3, #1
 800f780:	2300      	movne	r3, #0
 800f782:	b2db      	uxtb	r3, r3
}
 800f784:	4618      	mov	r0, r3
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <_ZNK20CommandLineArguments14getPackageNameEv>:

const SimpleString& CommandLineArguments::getPackageName() const
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
    return packageName_;
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	3330      	adds	r3, #48	; 0x30
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	370c      	adds	r7, #12
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a6:	4770      	bx	lr

0800f7a8 <_ZN22MemoryLeakDetectorListC1Ev>:
    MemoryLeakDetectorNode* next_;
};

struct MemoryLeakDetectorList
{
    MemoryLeakDetectorList() :
 800f7a8:	b480      	push	{r7}
 800f7aa:	b083      	sub	sp, #12
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
        head_(NULLPTR)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	601a      	str	r2, [r3, #0]
    {}
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	370c      	adds	r7, #12
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <_ZN18SimpleStringBufferC1Ev>:

static const char* UNKNOWN = "<unknown>";

static const char GuardBytes[] = {'B','A','S'};

SimpleStringBuffer::SimpleStringBuffer() :
 800f7c4:	b480      	push	{r7}
 800f7c6:	b083      	sub	sp, #12
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
    positions_filled_(0), write_limit_(SIMPLE_STRING_BUFFER_LEN-1)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	601a      	str	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f7dc:	3304      	adds	r3, #4
 800f7de:	f640 72ff 	movw	r2, #4095	; 0xfff
 800f7e2:	601a      	str	r2, [r3, #0]
{
    buffer_[0] = '\0';
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	701a      	strb	r2, [r3, #0]
}
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	370c      	adds	r7, #12
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <_ZN18SimpleStringBuffer5clearEv>:

void SimpleStringBuffer::clear()
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b083      	sub	sp, #12
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
    positions_filled_ = 0;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f806:	2200      	movs	r2, #0
 800f808:	601a      	str	r2, [r3, #0]
    buffer_[0] = '\0';
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2200      	movs	r2, #0
 800f80e:	701a      	strb	r2, [r3, #0]
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <_ZN18SimpleStringBuffer3addEPKcz>:

void SimpleStringBuffer::add(const char* format, ...)
{
 800f81c:	b40e      	push	{r1, r2, r3}
 800f81e:	b590      	push	{r4, r7, lr}
 800f820:	b086      	sub	sp, #24
 800f822:	af00      	add	r7, sp, #0
 800f824:	6078      	str	r0, [r7, #4]
    const size_t positions_left = write_limit_ - positions_filled_;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f82c:	3304      	adds	r3, #4
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	1ad3      	subs	r3, r2, r3
 800f83a:	617b      	str	r3, [r7, #20]
    if (positions_left == 0) return;
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d032      	beq.n	800f8a8 <_ZN18SimpleStringBuffer3addEPKcz+0x8c>

    va_list arguments;
    va_start(arguments, format);
 800f842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f846:	60fb      	str	r3, [r7, #12]
    const int count = PlatformSpecificVSNprintf(buffer_ + positions_filled_, positions_left+1, format, arguments);
 800f848:	4b1b      	ldr	r3, [pc, #108]	; (800f8b8 <_ZN18SimpleStringBuffer3addEPKcz+0x9c>)
 800f84a:	681c      	ldr	r4, [r3, #0]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	18d0      	adds	r0, r2, r3
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	1c59      	adds	r1, r3, #1
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f860:	47a0      	blx	r4
 800f862:	6138      	str	r0, [r7, #16]
    if (count > 0) positions_filled_ += (size_t) count;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	2b00      	cmp	r3, #0
 800f868:	dd09      	ble.n	800f87e <_ZN18SimpleStringBuffer3addEPKcz+0x62>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	441a      	add	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f87c:	601a      	str	r2, [r3, #0]
    if (positions_filled_ > write_limit_) positions_filled_ = write_limit_;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f884:	681a      	ldr	r2, [r3, #0]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f88c:	3304      	adds	r3, #4
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d90a      	bls.n	800f8aa <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f89a:	3304      	adds	r3, #4
 800f89c:	681a      	ldr	r2, [r3, #0]
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	e000      	b.n	800f8aa <_ZN18SimpleStringBuffer3addEPKcz+0x8e>
    if (positions_left == 0) return;
 800f8a8:	bf00      	nop
    va_end(arguments);
}
 800f8aa:	3718      	adds	r7, #24
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800f8b2:	b003      	add	sp, #12
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	200000ac 	.word	0x200000ac

0800f8bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>:

void SimpleStringBuffer::addMemoryDump(const void* memory, size_t memorySize)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08c      	sub	sp, #48	; 0x30
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
    const unsigned char* byteMemory = (const unsigned char*)memory;
 800f8c8:	68bb      	ldr	r3, [r7, #8]
 800f8ca:	61fb      	str	r3, [r7, #28]
    const size_t maxLineBytes = 16;
 800f8cc:	2310      	movs	r3, #16
 800f8ce:	61bb      	str	r3, [r7, #24]
    size_t currentPos = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t p;

    while (currentPos < memorySize) {
 800f8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d273      	bcs.n	800f9c4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x108>
        add("    %04lx: ", (unsigned long) currentPos);
 800f8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8de:	493b      	ldr	r1, [pc, #236]	; (800f9cc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x110>)
 800f8e0:	68f8      	ldr	r0, [r7, #12]
 800f8e2:	f7ff ff9b 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        size_t bytesInLine = memorySize - currentPos;
 800f8e6:	687a      	ldr	r2, [r7, #4]
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	627b      	str	r3, [r7, #36]	; 0x24
        if (bytesInLine > maxLineBytes) {
 800f8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f0:	2b10      	cmp	r3, #16
 800f8f2:	d901      	bls.n	800f8f8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x3c>
            bytesInLine = maxLineBytes;
 800f8f4:	2310      	movs	r3, #16
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
        const size_t leftoverBytes = maxLineBytes - bytesInLine;
 800f8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8fa:	f1c3 0310 	rsb	r3, r3, #16
 800f8fe:	617b      	str	r3, [r7, #20]

        for (p = 0; p < bytesInLine; p++) {
 800f900:	2300      	movs	r3, #0
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
 800f904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	429a      	cmp	r2, r3
 800f90a:	d215      	bcs.n	800f938 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x7c>
            add("%02hx ", (unsigned short) byteMemory[currentPos + p]);
 800f90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f910:	4413      	add	r3, r2
 800f912:	69fa      	ldr	r2, [r7, #28]
 800f914:	4413      	add	r3, r2
 800f916:	781b      	ldrb	r3, [r3, #0]
 800f918:	461a      	mov	r2, r3
 800f91a:	492d      	ldr	r1, [pc, #180]	; (800f9d0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x114>)
 800f91c:	68f8      	ldr	r0, [r7, #12]
 800f91e:	f7ff ff7d 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
            if (p == ((maxLineBytes / 2) - 1)) {
 800f922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f924:	2b07      	cmp	r3, #7
 800f926:	d103      	bne.n	800f930 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x74>
                add(" ");
 800f928:	492a      	ldr	r1, [pc, #168]	; (800f9d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	f7ff ff76 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800f930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f932:	3301      	adds	r3, #1
 800f934:	62bb      	str	r3, [r7, #40]	; 0x28
 800f936:	e7e5      	b.n	800f904 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x48>
            }
        }
        for (p = 0; p < leftoverBytes; p++) {
 800f938:	2300      	movs	r3, #0
 800f93a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	429a      	cmp	r2, r3
 800f942:	d207      	bcs.n	800f954 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x98>
            add("   ");
 800f944:	4924      	ldr	r1, [pc, #144]	; (800f9d8 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x11c>)
 800f946:	68f8      	ldr	r0, [r7, #12]
 800f948:	f7ff ff68 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < leftoverBytes; p++) {
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	3301      	adds	r3, #1
 800f950:	62bb      	str	r3, [r7, #40]	; 0x28
 800f952:	e7f3      	b.n	800f93c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x80>
        }
        if (leftoverBytes > (maxLineBytes/2)) {
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	2b08      	cmp	r3, #8
 800f958:	d903      	bls.n	800f962 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xa6>
            add(" ");
 800f95a:	491e      	ldr	r1, [pc, #120]	; (800f9d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x118>)
 800f95c:	68f8      	ldr	r0, [r7, #12]
 800f95e:	f7ff ff5d 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        }

        add("|");
 800f962:	491e      	ldr	r1, [pc, #120]	; (800f9dc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x120>)
 800f964:	68f8      	ldr	r0, [r7, #12]
 800f966:	f7ff ff59 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800f96a:	2300      	movs	r3, #0
 800f96c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	429a      	cmp	r2, r3
 800f974:	d21d      	bcs.n	800f9b2 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xf6>
            char toAdd = (char)byteMemory[currentPos + p];
 800f976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f97a:	4413      	add	r3, r2
 800f97c:	69fa      	ldr	r2, [r7, #28]
 800f97e:	4413      	add	r3, r2
 800f980:	781b      	ldrb	r3, [r3, #0]
 800f982:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            if (toAdd < ' ' || toAdd > '~') {
 800f986:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f98a:	2b1f      	cmp	r3, #31
 800f98c:	d903      	bls.n	800f996 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xda>
 800f98e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f992:	2b7e      	cmp	r3, #126	; 0x7e
 800f994:	d902      	bls.n	800f99c <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xe0>
                toAdd = '.';
 800f996:	232e      	movs	r3, #46	; 0x2e
 800f998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }
            add("%c", (int)toAdd);
 800f99c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	490f      	ldr	r1, [pc, #60]	; (800f9e0 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x124>)
 800f9a4:	68f8      	ldr	r0, [r7, #12]
 800f9a6:	f7ff ff39 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        for (p = 0; p < bytesInLine; p++) {
 800f9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9b0:	e7dd      	b.n	800f96e <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0xb2>
        }
        add("|\n");
 800f9b2:	490c      	ldr	r1, [pc, #48]	; (800f9e4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x128>)
 800f9b4:	68f8      	ldr	r0, [r7, #12]
 800f9b6:	f7ff ff31 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
        currentPos += bytesInLine;
 800f9ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9be:	4413      	add	r3, r2
 800f9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (currentPos < memorySize) {
 800f9c2:	e787      	b.n	800f8d4 <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj+0x18>
    }
}
 800f9c4:	bf00      	nop
 800f9c6:	3730      	adds	r7, #48	; 0x30
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	bd80      	pop	{r7, pc}
 800f9cc:	08016188 	.word	0x08016188
 800f9d0:	08016194 	.word	0x08016194
 800f9d4:	0801619c 	.word	0x0801619c
 800f9d8:	080161a0 	.word	0x080161a0
 800f9dc:	080161a4 	.word	0x080161a4
 800f9e0:	080161a8 	.word	0x080161a8
 800f9e4:	080161ac 	.word	0x080161ac

0800f9e8 <_ZN18SimpleStringBuffer8toStringEv>:

char* SimpleStringBuffer::toString()
{
 800f9e8:	b480      	push	{r7}
 800f9ea:	b083      	sub	sp, #12
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
    return buffer_;
 800f9f0:	687b      	ldr	r3, [r7, #4]
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	370c      	adds	r7, #12
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <_ZN18SimpleStringBuffer13setWriteLimitEj>:

void SimpleStringBuffer::setWriteLimit(size_t write_limit)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b083      	sub	sp, #12
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	6078      	str	r0, [r7, #4]
 800fa06:	6039      	str	r1, [r7, #0]
    write_limit_ = write_limit;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa0e:	3304      	adds	r3, #4
 800fa10:	683a      	ldr	r2, [r7, #0]
 800fa12:	601a      	str	r2, [r3, #0]
    if (write_limit_ > SIMPLE_STRING_BUFFER_LEN-1)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa1a:	3304      	adds	r3, #4
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa22:	d306      	bcc.n	800fa32 <_ZN18SimpleStringBuffer13setWriteLimitEj+0x34>
        write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa2a:	3304      	adds	r3, #4
 800fa2c:	f640 72ff 	movw	r2, #4095	; 0xfff
 800fa30:	601a      	str	r2, [r3, #0]
}
 800fa32:	bf00      	nop
 800fa34:	370c      	adds	r7, #12
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <_ZN18SimpleStringBuffer15resetWriteLimitEv>:
void SimpleStringBuffer::resetWriteLimit()
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b083      	sub	sp, #12
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
    write_limit_ = SIMPLE_STRING_BUFFER_LEN-1;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa4c:	3304      	adds	r3, #4
 800fa4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800fa52:	601a      	str	r2, [r3, #0]
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>:

bool SimpleStringBuffer::reachedItsCapacity()
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
    return positions_filled_ >= write_limit_;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa6e:	681a      	ldr	r2, [r3, #0]
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa76:	3304      	adds	r3, #4
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	bf2c      	ite	cs
 800fa7e:	2301      	movcs	r3, #1
 800fa80:	2300      	movcc	r3, #0
 800fa82:	b2db      	uxtb	r3, r3
}
 800fa84:	4618      	mov	r0, r3
 800fa86:	370c      	adds	r7, #12
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8e:	4770      	bx	lr

0800fa90 <_ZN28MemoryLeakOutputStringBufferC1Ev>:
#define MEM_LEAK_ADDITION_MALLOC_WARNING "NOTE:\n" \
                                         "\tMemory leak reports about malloc and free can be caused by allocating using the cpputest version of malloc,\n" \
                                         "\tbut deallocate using the standard free.\n" \
                                         "\tIf this is the case, check whether your malloc/free replacements are working (#define malloc cpputest_malloc etc).\n"

MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
    : total_leaks_(0), giveWarningOnUsingMalloc_(false)
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	601a      	str	r2, [r3, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	711a      	strb	r2, [r3, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	3308      	adds	r3, #8
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff fe8b 	bl	800f7c4 <_ZN18SimpleStringBufferC1Ev>
{
}
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addAllocationLocation(const char* allocationFile, size_t allocationLineNumber, size_t allocationSize, TestMemoryAllocator* allocator)
{
 800fab8:	b5b0      	push	{r4, r5, r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af02      	add	r7, sp, #8
 800fabe:	60f8      	str	r0, [r7, #12]
 800fac0:	60b9      	str	r1, [r7, #8]
 800fac2:	607a      	str	r2, [r7, #4]
 800fac4:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   allocated at file: %s line: %d size: %lu type: %s\n", allocationFile, (int) allocationLineNumber, (unsigned long) allocationSize, allocator->alloc_name());
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f103 0408 	add.w	r4, r3, #8
 800facc:	687d      	ldr	r5, [r7, #4]
 800face:	6a3b      	ldr	r3, [r7, #32]
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	3314      	adds	r3, #20
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	6a38      	ldr	r0, [r7, #32]
 800fad8:	4798      	blx	r3
 800fada:	4603      	mov	r3, r0
 800fadc:	9301      	str	r3, [sp, #4]
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	9300      	str	r3, [sp, #0]
 800fae2:	462b      	mov	r3, r5
 800fae4:	68ba      	ldr	r2, [r7, #8]
 800fae6:	4904      	ldr	r1, [pc, #16]	; (800faf8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator+0x40>)
 800fae8:	4620      	mov	r0, r4
 800faea:	f7ff fe97 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800faee:	bf00      	nop
 800faf0:	3710      	adds	r7, #16
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bdb0      	pop	{r4, r5, r7, pc}
 800faf6:	bf00      	nop
 800faf8:	080161b0 	.word	0x080161b0

0800fafc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>:

void MemoryLeakOutputStringBuffer::addDeallocationLocation(const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* allocator)
{
 800fafc:	b5b0      	push	{r4, r5, r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af02      	add	r7, sp, #8
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]
 800fb08:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("   deallocated at file: %s line: %d type: %s\n", freeFile, (int) freeLineNumber, allocator->free_name());
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	f103 0408 	add.w	r4, r3, #8
 800fb10:	687d      	ldr	r5, [r7, #4]
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3318      	adds	r3, #24
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	6838      	ldr	r0, [r7, #0]
 800fb1c:	4798      	blx	r3
 800fb1e:	4603      	mov	r3, r0
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	462b      	mov	r3, r5
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	4904      	ldr	r1, [pc, #16]	; (800fb38 <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator+0x3c>)
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f7ff fe77 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fb2e:	bf00      	nop
 800fb30:	3710      	adds	r7, #16
 800fb32:	46bd      	mov	sp, r7
 800fb34:	bdb0      	pop	{r4, r5, r7, pc}
 800fb36:	bf00      	nop
 800fb38:	080161e8 	.word	0x080161e8

0800fb3c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>:

void MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("No memory leaks were detected.");
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3308      	adds	r3, #8
 800fb48:	4903      	ldr	r1, [pc, #12]	; (800fb58 <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv+0x1c>)
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7ff fe66 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fb50:	bf00      	nop
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	08016218 	.word	0x08016218

0800fb5c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	6078      	str	r0, [r7, #4]
    giveWarningOnUsingMalloc_ = false;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	711a      	strb	r2, [r3, #4]
    total_leaks_ = 0;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]

    size_t memory_leak_normal_footer_size = sizeof(MEM_LEAK_FOOTER) + 10 + sizeof(MEM_LEAK_TOO_MUCH); /* the number of leaks */
 800fb70:	2367      	movs	r3, #103	; 0x67
 800fb72:	60fb      	str	r3, [r7, #12]
    size_t memory_leak_foot_size_with_malloc_warning = memory_leak_normal_footer_size + sizeof(MEM_LEAK_ADDITION_MALLOC_WARNING);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f203 1311 	addw	r3, r3, #273	; 0x111
 800fb7a:	60bb      	str	r3, [r7, #8]

    outputBuffer_.setWriteLimit(SimpleStringBuffer::SIMPLE_STRING_BUFFER_LEN - memory_leak_foot_size_with_malloc_warning);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f103 0208 	add.w	r2, r3, #8
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 800fb88:	4619      	mov	r1, r3
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	f7ff ff37 	bl	800f9fe <_ZN18SimpleStringBuffer13setWriteLimitEj>
}
 800fb90:	bf00      	nop
 800fb92:	3710      	adds	r7, #16
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>:

void MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode* leak)
{
 800fb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb9a:	b089      	sub	sp, #36	; 0x24
 800fb9c:	af04      	add	r7, sp, #16
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
    if (total_leaks_ == 0) {
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d102      	bne.n	800fbb0 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0x18>
        addMemoryLeakHeader();
 800fbaa:	68f8      	ldr	r0, [r7, #12]
 800fbac:	f000 f882 	bl	800fcb4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>
    }

    total_leaks_++;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	1c5a      	adds	r2, r3, #1
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	601a      	str	r2, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f103 0508 	add.w	r5, r3, #8
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	685e      	ldr	r6, [r3, #4]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	607b      	str	r3, [r7, #4]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	68dc      	ldr	r4, [r3, #12]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	691b      	ldr	r3, [r3, #16]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 800fbd2:	603b      	str	r3, [r7, #0]
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	695a      	ldr	r2, [r3, #20]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	695b      	ldr	r3, [r3, #20]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	3314      	adds	r3, #20
 800fbe0:	681b      	ldr	r3, [r3, #0]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 800fbe2:	4610      	mov	r0, r2
 800fbe4:	4798      	blx	r3
 800fbe6:	4602      	mov	r2, r0
            leak->number_, (unsigned long) leak->size_, leak->file_, (int) leak->line_, leak->allocator_->alloc_name(), (void*) leak->memory_);
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	689b      	ldr	r3, [r3, #8]
    outputBuffer_.add("Alloc num (%u) Leak size: %lu Allocated at: %s and line: %d. Type: \"%s\"\n\tMemory: <%p> Content:\n",
 800fbec:	9303      	str	r3, [sp, #12]
 800fbee:	9202      	str	r2, [sp, #8]
 800fbf0:	683a      	ldr	r2, [r7, #0]
 800fbf2:	9201      	str	r2, [sp, #4]
 800fbf4:	9400      	str	r4, [sp, #0]
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	4632      	mov	r2, r6
 800fbfa:	4915      	ldr	r1, [pc, #84]	; (800fc50 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb8>)
 800fbfc:	4628      	mov	r0, r5
 800fbfe:	f7ff fe0d 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
    outputBuffer_.addMemoryDump(leak->memory_, leak->size_);
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f103 0008 	add.w	r0, r3, #8
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	6899      	ldr	r1, [r3, #8]
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	461a      	mov	r2, r3
 800fc12:	f7ff fe53 	bl	800f8bc <_ZN18SimpleStringBuffer13addMemoryDumpEPKvj>

    if (SimpleString::StrCmp(leak->allocator_->alloc_name(), (const char*) "malloc") == 0)
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	695a      	ldr	r2, [r3, #20]
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	695b      	ldr	r3, [r3, #20]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	3314      	adds	r3, #20
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4610      	mov	r0, r2
 800fc26:	4798      	blx	r3
 800fc28:	4603      	mov	r3, r0
 800fc2a:	490a      	ldr	r1, [pc, #40]	; (800fc54 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xbc>)
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f7f6 fa55 	bl	80060dc <_ZN12SimpleString6StrCmpEPKcS1_>
 800fc32:	4603      	mov	r3, r0
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	bf0c      	ite	eq
 800fc38:	2301      	moveq	r3, #1
 800fc3a:	2300      	movne	r3, #0
 800fc3c:	b2db      	uxtb	r3, r3
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d002      	beq.n	800fc48 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode+0xb0>
        giveWarningOnUsingMalloc_ = true;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2201      	movs	r2, #1
 800fc46:	711a      	strb	r2, [r3, #4]
}
 800fc48:	bf00      	nop
 800fc4a:	3714      	adds	r7, #20
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc50:	08016238 	.word	0x08016238
 800fc54:	08016298 	.word	0x08016298

0800fc58 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>:

void MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b084      	sub	sp, #16
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
    if (total_leaks_ == 0) {
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d103      	bne.n	800fc70 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x18>
        addNoMemoryLeaksMessage();
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f7ff ff67 	bl	800fb3c <_ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv>
        return;
 800fc6e:	e01e      	b.n	800fcae <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
    }

    bool buffer_reached_its_capacity = outputBuffer_.reachedItsCapacity();
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	3308      	adds	r3, #8
 800fc74:	4618      	mov	r0, r3
 800fc76:	f7ff fef3 	bl	800fa60 <_ZN18SimpleStringBuffer18reachedItsCapacityEv>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	73fb      	strb	r3, [r7, #15]
    outputBuffer_.resetWriteLimit();
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	3308      	adds	r3, #8
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7ff fedb 	bl	800fa3e <_ZN18SimpleStringBuffer15resetWriteLimitEv>

    if (buffer_reached_its_capacity)
 800fc88:	7bfb      	ldrb	r3, [r7, #15]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x3c>
        addErrorMessageForTooMuchLeaks();
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 f820 	bl	800fcd4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>

    addMemoryLeakFooter(total_leaks_);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4619      	mov	r1, r3
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f82a 	bl	800fcf4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>

    if (giveWarningOnUsingMalloc_)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	791b      	ldrb	r3, [r3, #4]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv+0x56>
        addWarningForUsingMalloc();
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 f839 	bl	800fd20 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>

}
 800fcae:	3710      	adds	r7, #16
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv>:

void MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
    outputBuffer_.add("Memory leak(s) found.\n");
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	3308      	adds	r3, #8
 800fcc0:	4903      	ldr	r1, [pc, #12]	; (800fcd0 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv+0x1c>)
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7ff fdaa 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fcc8:	bf00      	nop
 800fcca:	3708      	adds	r7, #8
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}
 800fcd0:	080162a0 	.word	0x080162a0

0800fcd4 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv>:

void MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_TOO_MUCH);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	3308      	adds	r3, #8
 800fce0:	4903      	ldr	r1, [pc, #12]	; (800fcf0 <_ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv+0x1c>)
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7ff fd9a 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fce8:	bf00      	nop
 800fcea:	3708      	adds	r7, #8
 800fcec:	46bd      	mov	sp, r7
 800fcee:	bd80      	pop	{r7, pc}
 800fcf0:	080162b8 	.word	0x080162b8

0800fcf4 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj>:

void MemoryLeakOutputStringBuffer::addMemoryLeakFooter(size_t amountOfLeaks)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b082      	sub	sp, #8
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
    outputBuffer_.add("%s %d\n", MEM_LEAK_FOOTER, (int) amountOfLeaks);
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	f103 0008 	add.w	r0, r3, #8
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	4a04      	ldr	r2, [pc, #16]	; (800fd18 <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x24>)
 800fd08:	4904      	ldr	r1, [pc, #16]	; (800fd1c <_ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj+0x28>)
 800fd0a:	f7ff fd87 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	08016300 	.word	0x08016300
 800fd1c:	08016318 	.word	0x08016318

0800fd20 <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv>:

void MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
{
 800fd20:	b580      	push	{r7, lr}
 800fd22:	b082      	sub	sp, #8
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
    outputBuffer_.add(MEM_LEAK_ADDITION_MALLOC_WARNING);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	3308      	adds	r3, #8
 800fd2c:	4903      	ldr	r1, [pc, #12]	; (800fd3c <_ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv+0x1c>)
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7ff fd74 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
}
 800fd34:	bf00      	nop
 800fd36:	3708      	adds	r7, #8
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08016320 	.word	0x08016320

0800fd40 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char* freeFile, size_t freeLine, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	; 0x28
 800fd44:	af06      	add	r7, sp, #24
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	607a      	str	r2, [r7, #4]
 800fd4c:	603b      	str	r3, [r7, #0]
    reportFailure("Deallocating non-allocated memory\n", "<unknown>", 0, 0, NullUnknownAllocator::defaultAllocator(), freeFile, freeLine, freeAllocator, reporter);
 800fd4e:	f7f9 ff4d 	bl	8009bec <_ZN20NullUnknownAllocator16defaultAllocatorEv>
 800fd52:	4602      	mov	r2, r0
 800fd54:	69bb      	ldr	r3, [r7, #24]
 800fd56:	9305      	str	r3, [sp, #20]
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	9303      	str	r3, [sp, #12]
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	9302      	str	r3, [sp, #8]
 800fd64:	9201      	str	r2, [sp, #4]
 800fd66:	2300      	movs	r3, #0
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	4a04      	ldr	r2, [pc, #16]	; (800fd80 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x40>)
 800fd6e:	4905      	ldr	r1, [pc, #20]	; (800fd84 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x44>)
 800fd70:	68f8      	ldr	r0, [r7, #12]
 800fd72:	f000 f855 	bl	800fe20 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 800fd76:	bf00      	nop
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop
 800fd80:	0801617c 	.word	0x0801617c
 800fd84:	08016434 	.word	0x08016434

0800fd88 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 800fd88:	b590      	push	{r4, r7, lr}
 800fd8a:	b08b      	sub	sp, #44	; 0x2c
 800fd8c:	af06      	add	r7, sp, #24
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	607a      	str	r2, [r7, #4]
 800fd94:	603b      	str	r3, [r7, #0]
    reportFailure("Allocation/deallocation type mismatch\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	68d8      	ldr	r0, [r3, #12]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	691c      	ldr	r4, [r3, #16]
 800fd9e:	68bb      	ldr	r3, [r7, #8]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	6952      	ldr	r2, [r2, #20]
 800fda6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fda8:	9105      	str	r1, [sp, #20]
 800fdaa:	6a39      	ldr	r1, [r7, #32]
 800fdac:	9104      	str	r1, [sp, #16]
 800fdae:	6839      	ldr	r1, [r7, #0]
 800fdb0:	9103      	str	r1, [sp, #12]
 800fdb2:	6879      	ldr	r1, [r7, #4]
 800fdb4:	9102      	str	r1, [sp, #8]
 800fdb6:	9201      	str	r2, [sp, #4]
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	4623      	mov	r3, r4
 800fdbc:	4602      	mov	r2, r0
 800fdbe:	4904      	ldr	r1, [pc, #16]	; (800fdd0 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 800fdc0:	68f8      	ldr	r0, [r7, #12]
 800fdc2:	f000 f82d 	bl	800fe20 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 800fdc6:	bf00      	nop
 800fdc8:	3714      	adds	r7, #20
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	bd90      	pop	{r4, r7, pc}
 800fdce:	bf00      	nop
 800fdd0:	08016458 	.word	0x08016458

0800fdd4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode* node, const char* freeFile, size_t freeLineNumber, TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 800fdd4:	b590      	push	{r4, r7, lr}
 800fdd6:	b08b      	sub	sp, #44	; 0x2c
 800fdd8:	af06      	add	r7, sp, #24
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	607a      	str	r2, [r7, #4]
 800fde0:	603b      	str	r3, [r7, #0]
        reportFailure("Memory corruption (written out of bounds?)\n", node->file_, node->line_, node->size_, node->allocator_, freeFile, freeLineNumber, freeAllocator, reporter);
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	68d8      	ldr	r0, [r3, #12]
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	691c      	ldr	r4, [r3, #16]
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	6952      	ldr	r2, [r2, #20]
 800fdf2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fdf4:	9105      	str	r1, [sp, #20]
 800fdf6:	6a39      	ldr	r1, [r7, #32]
 800fdf8:	9104      	str	r1, [sp, #16]
 800fdfa:	6839      	ldr	r1, [r7, #0]
 800fdfc:	9103      	str	r1, [sp, #12]
 800fdfe:	6879      	ldr	r1, [r7, #4]
 800fe00:	9102      	str	r1, [sp, #8]
 800fe02:	9201      	str	r2, [sp, #4]
 800fe04:	9300      	str	r3, [sp, #0]
 800fe06:	4623      	mov	r3, r4
 800fe08:	4602      	mov	r2, r0
 800fe0a:	4904      	ldr	r1, [pc, #16]	; (800fe1c <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure+0x48>)
 800fe0c:	68f8      	ldr	r0, [r7, #12]
 800fe0e:	f000 f807 	bl	800fe20 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>
}
 800fe12:	bf00      	nop
 800fe14:	3714      	adds	r7, #20
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd90      	pop	{r4, r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	08016480 	.word	0x08016480

0800fe20 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure>:

void MemoryLeakOutputStringBuffer::reportFailure(const char* message, const char* allocFile, size_t allocLine, size_t allocSize, TestMemoryAllocator* allocAllocator, const char* freeFile, size_t freeLine,
        TestMemoryAllocator* freeAllocator, MemoryLeakFailure* reporter)
{
 800fe20:	b590      	push	{r4, r7, lr}
 800fe22:	b087      	sub	sp, #28
 800fe24:	af02      	add	r7, sp, #8
 800fe26:	60f8      	str	r0, [r7, #12]
 800fe28:	60b9      	str	r1, [r7, #8]
 800fe2a:	607a      	str	r2, [r7, #4]
 800fe2c:	603b      	str	r3, [r7, #0]
    outputBuffer_.add("%s", message);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	3308      	adds	r3, #8
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	4910      	ldr	r1, [pc, #64]	; (800fe78 <_ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure+0x58>)
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7ff fcf0 	bl	800f81c <_ZN18SimpleStringBuffer3addEPKcz>
    addAllocationLocation(allocFile, allocLine, allocSize, allocAllocator);
 800fe3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	683a      	ldr	r2, [r7, #0]
 800fe44:	6879      	ldr	r1, [r7, #4]
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fe36 	bl	800fab8 <_ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator>
    addDeallocationLocation(freeFile, freeLine, freeAllocator);
 800fe4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f7ff fe52 	bl	800fafc <_ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator>
    reporter->fail(toString());
 800fe58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	3308      	adds	r3, #8
 800fe5e:	681c      	ldr	r4, [r3, #0]
 800fe60:	68f8      	ldr	r0, [r7, #12]
 800fe62:	f000 f80b 	bl	800fe7c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 800fe66:	4603      	mov	r3, r0
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe6c:	47a0      	blx	r4
}
 800fe6e:	bf00      	nop
 800fe70:	3714      	adds	r7, #20
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd90      	pop	{r4, r7, pc}
 800fe76:	bf00      	nop
 800fe78:	080164ac 	.word	0x080164ac

0800fe7c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>:


char* MemoryLeakOutputStringBuffer::toString()
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
    return outputBuffer_.toString();
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	3308      	adds	r3, #8
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff fdad 	bl	800f9e8 <_ZN18SimpleStringBuffer8toStringEv>
 800fe8e:	4603      	mov	r3, r0
}
 800fe90:	4618      	mov	r0, r3
 800fe92:	3708      	adds	r7, #8
 800fe94:	46bd      	mov	sp, r7
 800fe96:	bd80      	pop	{r7, pc}

0800fe98 <_ZN28MemoryLeakOutputStringBuffer5clearEv>:

void MemoryLeakOutputStringBuffer::clear()
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3308      	adds	r3, #8
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7ff fca7 	bl	800f7f8 <_ZN18SimpleStringBuffer5clearEv>
}
 800feaa:	bf00      	nop
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}

0800feb2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>:

////////////////////////

void MemoryLeakDetectorNode::init(char* memory, unsigned number, size_t size, TestMemoryAllocator* allocator, MemLeakPeriod period, unsigned char allocation_stage, const char* file, size_t line)
{
 800feb2:	b480      	push	{r7}
 800feb4:	b085      	sub	sp, #20
 800feb6:	af00      	add	r7, sp, #0
 800feb8:	60f8      	str	r0, [r7, #12]
 800feba:	60b9      	str	r1, [r7, #8]
 800febc:	607a      	str	r2, [r7, #4]
 800febe:	603b      	str	r3, [r7, #0]
    number_ = number;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	605a      	str	r2, [r3, #4]
    memory_ = memory;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	68ba      	ldr	r2, [r7, #8]
 800feca:	609a      	str	r2, [r3, #8]
    size_ = size;
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	683a      	ldr	r2, [r7, #0]
 800fed0:	601a      	str	r2, [r3, #0]
    allocator_ = allocator;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	69ba      	ldr	r2, [r7, #24]
 800fed6:	615a      	str	r2, [r3, #20]
    period_ = period;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	7f3a      	ldrb	r2, [r7, #28]
 800fedc:	761a      	strb	r2, [r3, #24]
    allocation_stage_ = allocation_stage;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800fee4:	765a      	strb	r2, [r3, #25]
    file_ = file;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feea:	60da      	str	r2, [r3, #12]
    line_ = line;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fef0:	611a      	str	r2, [r3, #16]
}
 800fef2:	bf00      	nop
 800fef4:	3714      	adds	r7, #20
 800fef6:	46bd      	mov	sp, r7
 800fef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefc:	4770      	bx	lr

0800fefe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>:

///////////////////////

bool MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 800fefe:	b480      	push	{r7}
 800ff00:	b085      	sub	sp, #20
 800ff02:	af00      	add	r7, sp, #0
 800ff04:	60f8      	str	r0, [r7, #12]
 800ff06:	60b9      	str	r1, [r7, #8]
 800ff08:	4613      	mov	r3, r2
 800ff0a:	71fb      	strb	r3, [r7, #7]
    return period == mem_leak_period_all || node->period_ == period || (node->period_ != mem_leak_period_disabled && period == mem_leak_period_enabled);
 800ff0c:	79fb      	ldrb	r3, [r7, #7]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00b      	beq.n	800ff2a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 800ff12:	68bb      	ldr	r3, [r7, #8]
 800ff14:	7e1b      	ldrb	r3, [r3, #24]
 800ff16:	79fa      	ldrb	r2, [r7, #7]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d006      	beq.n	800ff2a <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2c>
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	7e1b      	ldrb	r3, [r3, #24]
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d004      	beq.n	800ff2e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 800ff24:	79fb      	ldrb	r3, [r7, #7]
 800ff26:	2b02      	cmp	r3, #2
 800ff28:	d101      	bne.n	800ff2e <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x30>
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	e000      	b.n	800ff30 <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod+0x32>
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3714      	adds	r7, #20
 800ff34:	46bd      	mov	sp, r7
 800ff36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3a:	4770      	bx	lr

0800ff3c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>:
        cur = cur->next_;
    }
}

void MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode* node)
{
 800ff3c:	b480      	push	{r7}
 800ff3e:	b083      	sub	sp, #12
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
 800ff44:	6039      	str	r1, [r7, #0]
    node->next_ = head_;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	61da      	str	r2, [r3, #28]
    head_ = node;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	683a      	ldr	r2, [r7, #0]
 800ff52:	601a      	str	r2, [r3, #0]
}
 800ff54:	bf00      	nop
 800ff56:	370c      	adds	r7, #12
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr

0800ff60 <_ZN22MemoryLeakDetectorList10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::removeNode(char* memory)
{
 800ff60:	b480      	push	{r7}
 800ff62:	b085      	sub	sp, #20
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
    MemoryLeakDetectorNode* cur = head_;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	60fb      	str	r3, [r7, #12]
    MemoryLeakDetectorNode* prev = NULLPTR;
 800ff70:	2300      	movs	r3, #0
 800ff72:	60bb      	str	r3, [r7, #8]
    while (cur) {
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d019      	beq.n	800ffae <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x4e>
        if (cur->memory_ == memory) {
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	689b      	ldr	r3, [r3, #8]
 800ff7e:	683a      	ldr	r2, [r7, #0]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d10e      	bne.n	800ffa2 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x42>
            if (prev) {
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d005      	beq.n	800ff96 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x36>
                prev->next_ = cur->next_;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	69da      	ldr	r2, [r3, #28]
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	61da      	str	r2, [r3, #28]
                return cur;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	e00c      	b.n	800ffb0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
            else {
                head_ = cur->next_;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	69da      	ldr	r2, [r3, #28]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	601a      	str	r2, [r3, #0]
                return cur;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	e006      	b.n	800ffb0 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x50>
            }
        }
        prev = cur;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	60bb      	str	r3, [r7, #8]
        cur = cur->next_;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	69db      	ldr	r3, [r3, #28]
 800ffaa:	60fb      	str	r3, [r7, #12]
    while (cur) {
 800ffac:	e7e2      	b.n	800ff74 <_ZN22MemoryLeakDetectorList10removeNodeEPc+0x14>
    }
    return NULLPTR;
 800ffae:	2300      	movs	r3, #0
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3714      	adds	r7, #20
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::retrieveNode(char* memory)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b085      	sub	sp, #20
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
 800ffc4:	6039      	str	r1, [r7, #0]
  MemoryLeakDetectorNode* cur = head_;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	60fb      	str	r3, [r7, #12]
  while (cur) {
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d00a      	beq.n	800ffe8 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2c>
    if (cur->memory_ == memory)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	689b      	ldr	r3, [r3, #8]
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d101      	bne.n	800ffe0 <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x24>
      return cur;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	e004      	b.n	800ffea <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x2e>
    cur = cur->next_;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	69db      	ldr	r3, [r3, #28]
 800ffe4:	60fb      	str	r3, [r7, #12]
  while (cur) {
 800ffe6:	e7f1      	b.n	800ffcc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc+0x10>
  }
  return NULLPTR;
 800ffe8:	2300      	movs	r3, #0
}
 800ffea:	4618      	mov	r0, r3
 800ffec:	3714      	adds	r7, #20
 800ffee:	46bd      	mov	sp, r7
 800fff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff4:	4770      	bx	lr

0800fff6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 800fff6:	b580      	push	{r7, lr}
 800fff8:	b086      	sub	sp, #24
 800fffa:	af00      	add	r7, sp, #0
 800fffc:	60f8      	str	r0, [r7, #12]
 800fffe:	60b9      	str	r1, [r7, #8]
 8010000:	4613      	mov	r3, r2
 8010002:	71fb      	strb	r3, [r7, #7]
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	617b      	str	r3, [r7, #20]
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00e      	beq.n	801002c <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x36>
        if (isInPeriod(cur, period)) return cur;
 801000e:	79fb      	ldrb	r3, [r7, #7]
 8010010:	461a      	mov	r2, r3
 8010012:	6979      	ldr	r1, [r7, #20]
 8010014:	68f8      	ldr	r0, [r7, #12]
 8010016:	f7ff ff72 	bl	800fefe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 801001a:	4603      	mov	r3, r0
 801001c:	2b00      	cmp	r3, #0
 801001e:	d001      	beq.n	8010024 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x2e>
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	e004      	b.n	801002e <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x38>
    for (MemoryLeakDetectorNode* cur = node; cur; cur = cur->next_)
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	69db      	ldr	r3, [r3, #28]
 8010028:	617b      	str	r3, [r7, #20]
 801002a:	e7ed      	b.n	8010008 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod+0x12>
    return NULLPTR;
 801002c:	2300      	movs	r3, #0
}
 801002e:	4618      	mov	r0, r3
 8010030:	3718      	adds	r7, #24
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>:
        if (isInAllocationStage(cur, allocation_stage)) return cur;
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod period)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	460b      	mov	r3, r1
 8010040:	70fb      	strb	r3, [r7, #3]
    return getLeakFrom(head_, period);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	78fa      	ldrb	r2, [r7, #3]
 8010048:	4619      	mov	r1, r3
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7ff ffd3 	bl	800fff6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010050:	4603      	mov	r3, r0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
{
    return getLeakForAllocationStageFrom(head_, allocation_stage);
}

MemoryLeakDetectorNode* MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode* node, MemLeakPeriod period)
{
 801005a:	b580      	push	{r7, lr}
 801005c:	b084      	sub	sp, #16
 801005e:	af00      	add	r7, sp, #0
 8010060:	60f8      	str	r0, [r7, #12]
 8010062:	60b9      	str	r1, [r7, #8]
 8010064:	4613      	mov	r3, r2
 8010066:	71fb      	strb	r3, [r7, #7]
    return getLeakFrom(node->next_, period);
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	69db      	ldr	r3, [r3, #28]
 801006c:	79fa      	ldrb	r2, [r7, #7]
 801006e:	4619      	mov	r1, r3
 8010070:	68f8      	ldr	r0, [r7, #12]
 8010072:	f7ff ffc0 	bl	800fff6 <_ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010076:	4603      	mov	r3, r0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>:
}



size_t MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod period)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	460b      	mov	r3, r1
 801008a:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 801008c:	2300      	movs	r3, #0
 801008e:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	60bb      	str	r3, [r7, #8]
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d00f      	beq.n	80100bc <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x3c>
        if (isInPeriod(node, period)) total_leaks++;
 801009c:	78fb      	ldrb	r3, [r7, #3]
 801009e:	461a      	mov	r2, r3
 80100a0:	68b9      	ldr	r1, [r7, #8]
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff ff2b 	bl	800fefe <_ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod>
 80100a8:	4603      	mov	r3, r0
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d002      	beq.n	80100b4 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x34>
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	3301      	adds	r3, #1
 80100b2:	60fb      	str	r3, [r7, #12]
    for (MemoryLeakDetectorNode* node = head_; node; node = node->next_) {
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	69db      	ldr	r3, [r3, #28]
 80100b8:	60bb      	str	r3, [r7, #8]
 80100ba:	e7ec      	b.n	8010096 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod+0x16>
    }
    return total_leaks;
 80100bc:	68fb      	ldr	r3, [r7, #12]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}
	...

080100c8 <_ZN23MemoryLeakDetectorTable4hashEPc>:

/////////////////////////////////////////////////////////////

unsigned long MemoryLeakDetectorTable::hash(char* memory)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
    return (unsigned long)((size_t)memory % hash_prime);
 80100d2:	6839      	ldr	r1, [r7, #0]
 80100d4:	4b09      	ldr	r3, [pc, #36]	; (80100fc <_ZN23MemoryLeakDetectorTable4hashEPc+0x34>)
 80100d6:	fba3 2301 	umull	r2, r3, r3, r1
 80100da:	1aca      	subs	r2, r1, r3
 80100dc:	0852      	lsrs	r2, r2, #1
 80100de:	4413      	add	r3, r2
 80100e0:	099a      	lsrs	r2, r3, #6
 80100e2:	4613      	mov	r3, r2
 80100e4:	00db      	lsls	r3, r3, #3
 80100e6:	4413      	add	r3, r2
 80100e8:	00db      	lsls	r3, r3, #3
 80100ea:	4413      	add	r3, r2
 80100ec:	1aca      	subs	r2, r1, r3
 80100ee:	4613      	mov	r3, r2
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr
 80100fc:	c0e07039 	.word	0xc0e07039

08010100 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>:
    for (int i = 0; i < hash_prime; i++)
        table_[i].clearAllAccounting(period);
}

void MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode* node)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
 8010108:	6039      	str	r1, [r7, #0]
    table_[hash(node->memory_)].addNewNode(node);
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	689b      	ldr	r3, [r3, #8]
 801010e:	4619      	mov	r1, r3
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff ffd9 	bl	80100c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010116:	4603      	mov	r3, r0
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	687a      	ldr	r2, [r7, #4]
 801011c:	4413      	add	r3, r2
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	4618      	mov	r0, r3
 8010122:	f7ff ff0b 	bl	800ff3c <_ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode>
}
 8010126:	bf00      	nop
 8010128:	3708      	adds	r7, #8
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}

0801012e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::removeNode(char* memory)
{
 801012e:	b580      	push	{r7, lr}
 8010130:	b082      	sub	sp, #8
 8010132:	af00      	add	r7, sp, #0
 8010134:	6078      	str	r0, [r7, #4]
 8010136:	6039      	str	r1, [r7, #0]
    return table_[hash(memory)].removeNode(memory);
 8010138:	6839      	ldr	r1, [r7, #0]
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7ff ffc4 	bl	80100c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 8010140:	4603      	mov	r3, r0
 8010142:	009b      	lsls	r3, r3, #2
 8010144:	687a      	ldr	r2, [r7, #4]
 8010146:	4413      	add	r3, r2
 8010148:	6839      	ldr	r1, [r7, #0]
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff ff08 	bl	800ff60 <_ZN22MemoryLeakDetectorList10removeNodeEPc>
 8010150:	4603      	mov	r3, r0
}
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}

0801015a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::retrieveNode(char* memory)
{
 801015a:	b580      	push	{r7, lr}
 801015c:	b082      	sub	sp, #8
 801015e:	af00      	add	r7, sp, #0
 8010160:	6078      	str	r0, [r7, #4]
 8010162:	6039      	str	r1, [r7, #0]
  return table_[hash(memory)].retrieveNode(memory);
 8010164:	6839      	ldr	r1, [r7, #0]
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f7ff ffae 	bl	80100c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801016c:	4603      	mov	r3, r0
 801016e:	009b      	lsls	r3, r3, #2
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	4413      	add	r3, r2
 8010174:	6839      	ldr	r1, [r7, #0]
 8010176:	4618      	mov	r0, r3
 8010178:	f7ff ff20 	bl	800ffbc <_ZN22MemoryLeakDetectorList12retrieveNodeEPc>
 801017c:	4603      	mov	r3, r0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}

08010186 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod period)
{
 8010186:	b580      	push	{r7, lr}
 8010188:	b084      	sub	sp, #16
 801018a:	af00      	add	r7, sp, #0
 801018c:	6078      	str	r0, [r7, #4]
 801018e:	460b      	mov	r3, r1
 8010190:	70fb      	strb	r3, [r7, #3]
    size_t total_leaks = 0;
 8010192:	2300      	movs	r3, #0
 8010194:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 8010196:	2300      	movs	r3, #0
 8010198:	60bb      	str	r3, [r7, #8]
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	2b48      	cmp	r3, #72	; 0x48
 801019e:	dc10      	bgt.n	80101c2 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x3c>
        total_leaks += table_[i].getTotalLeaks(period);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	009b      	lsls	r3, r3, #2
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	4413      	add	r3, r2
 80101a8:	78fa      	ldrb	r2, [r7, #3]
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff ff67 	bl	8010080 <_ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod>
 80101b2:	4602      	mov	r2, r0
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	4413      	add	r3, r2
 80101b8:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < hash_prime; i++)
 80101ba:	68bb      	ldr	r3, [r7, #8]
 80101bc:	3301      	adds	r3, #1
 80101be:	60bb      	str	r3, [r7, #8]
 80101c0:	e7eb      	b.n	801019a <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod+0x14>
    return total_leaks;
 80101c2:	68fb      	ldr	r3, [r7, #12]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>:

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod period)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	460b      	mov	r3, r1
 80101d6:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < hash_prime; i++) {
 80101d8:	2300      	movs	r3, #0
 80101da:	60fb      	str	r3, [r7, #12]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2b48      	cmp	r3, #72	; 0x48
 80101e0:	dc12      	bgt.n	8010208 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3c>
        MemoryLeakDetectorNode* node = table_[i].getFirstLeak(period);
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	009b      	lsls	r3, r3, #2
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	4413      	add	r3, r2
 80101ea:	78fa      	ldrb	r2, [r7, #3]
 80101ec:	4611      	mov	r1, r2
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7ff ff21 	bl	8010036 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 80101f4:	60b8      	str	r0, [r7, #8]
        if (node) return node;
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x34>
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	e004      	b.n	801020a <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x3e>
    for (int i = 0; i < hash_prime; i++) {
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	3301      	adds	r3, #1
 8010204:	60fb      	str	r3, [r7, #12]
 8010206:	e7e9      	b.n	80101dc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod+0x10>
    }
    return NULLPTR;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}

08010212 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>:
    }
    return NULLPTR;
}

MemoryLeakDetectorNode* MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode* leak, MemLeakPeriod period)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b086      	sub	sp, #24
 8010216:	af00      	add	r7, sp, #0
 8010218:	60f8      	str	r0, [r7, #12]
 801021a:	60b9      	str	r1, [r7, #8]
 801021c:	4613      	mov	r3, r2
 801021e:	71fb      	strb	r3, [r7, #7]
    unsigned long i = hash(leak->memory_);
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	689b      	ldr	r3, [r3, #8]
 8010224:	4619      	mov	r1, r3
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7ff ff4e 	bl	80100c8 <_ZN23MemoryLeakDetectorTable4hashEPc>
 801022c:	6178      	str	r0, [r7, #20]
    MemoryLeakDetectorNode* node = table_[i].getNextLeak(leak, period);
 801022e:	697b      	ldr	r3, [r7, #20]
 8010230:	009b      	lsls	r3, r3, #2
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	4413      	add	r3, r2
 8010236:	79fa      	ldrb	r2, [r7, #7]
 8010238:	68b9      	ldr	r1, [r7, #8]
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff ff0d 	bl	801005a <_ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010240:	6138      	str	r0, [r7, #16]
    if (node) return node;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d001      	beq.n	801024c <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x3a>
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	e019      	b.n	8010280 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>

    for (++i; i < hash_prime; i++) {
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	3301      	adds	r3, #1
 8010250:	617b      	str	r3, [r7, #20]
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	2b48      	cmp	r3, #72	; 0x48
 8010256:	d812      	bhi.n	801027e <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6c>
        node = table_[i].getFirstLeak(period);
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	68fa      	ldr	r2, [r7, #12]
 801025e:	4413      	add	r3, r2
 8010260:	79fa      	ldrb	r2, [r7, #7]
 8010262:	4611      	mov	r1, r2
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff fee6 	bl	8010036 <_ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod>
 801026a:	6138      	str	r0, [r7, #16]
        if (node) return node;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d001      	beq.n	8010276 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x64>
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	e004      	b.n	8010280 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x6e>
    for (++i; i < hash_prime; i++) {
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	3301      	adds	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	e7e9      	b.n	8010252 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod+0x40>
    }
    return NULLPTR;
 801027e:	2300      	movs	r3, #0
}
 8010280:	4618      	mov	r0, r3
 8010282:	3718      	adds	r7, #24
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}

08010288 <_ZN23MemoryLeakDetectorTableC1Ev>:

private:
    MemoryLeakDetectorNode* head_;
};

struct MemoryLeakDetectorTable
 8010288:	b5b0      	push	{r4, r5, r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2448      	movs	r4, #72	; 0x48
 8010294:	461d      	mov	r5, r3
 8010296:	2c00      	cmp	r4, #0
 8010298:	db05      	blt.n	80102a6 <_ZN23MemoryLeakDetectorTableC1Ev+0x1e>
 801029a:	4628      	mov	r0, r5
 801029c:	f7ff fa84 	bl	800f7a8 <_ZN22MemoryLeakDetectorListC1Ev>
 80102a0:	3504      	adds	r5, #4
 80102a2:	3c01      	subs	r4, #1
 80102a4:	e7f7      	b.n	8010296 <_ZN23MemoryLeakDetectorTableC1Ev+0xe>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	4618      	mov	r0, r3
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bdb0      	pop	{r4, r5, r7, pc}

080102b0 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure>:
    return NULLPTR;
}

/////////////////////////////////////////////////////////////

MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure* reporter)
 80102b0:	b590      	push	{r4, r7, lr}
 80102b2:	b083      	sub	sp, #12
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
 80102ba:	4a1d      	ldr	r2, [pc, #116]	; (8010330 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x80>)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	601a      	str	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	330c      	adds	r3, #12
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff fbe3 	bl	800fa90 <_ZN28MemoryLeakOutputStringBufferC1Ev>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80102d0:	331c      	adds	r3, #28
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7ff ffd8 	bl	8010288 <_ZN23MemoryLeakDetectorTableC1Ev>
{
    doAllocationTypeChecking_ = true;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80102de:	2201      	movs	r2, #1
 80102e0:	701a      	strb	r2, [r3, #0]
    allocationSequenceNumber_ = 1;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80102e8:	3304      	adds	r3, #4
 80102ea:	2201      	movs	r2, #1
 80102ec:	601a      	str	r2, [r3, #0]
    current_period_ = mem_leak_period_disabled;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2201      	movs	r2, #1
 80102f2:	721a      	strb	r2, [r3, #8]
    current_allocation_stage_ = 0;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80102fa:	3308      	adds	r3, #8
 80102fc:	2200      	movs	r2, #0
 80102fe:	701a      	strb	r2, [r3, #0]
    reporter_ = reporter;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	683a      	ldr	r2, [r7, #0]
 8010304:	605a      	str	r2, [r3, #4]
    mutex_ = new SimpleMutex;
 8010306:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 801030a:	490a      	ldr	r1, [pc, #40]	; (8010334 <_ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure+0x84>)
 801030c:	2004      	movs	r0, #4
 801030e:	f7f5 f9bf 	bl	8005690 <_ZnwjPKci>
 8010312:	4604      	mov	r4, r0
 8010314:	4620      	mov	r0, r4
 8010316:	f7f5 fdb5 	bl	8005e84 <_ZN11SimpleMutexC1Ev>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010320:	330c      	adds	r3, #12
 8010322:	601c      	str	r4, [r3, #0]
}
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	bd90      	pop	{r4, r7, pc}
 801032e:	bf00      	nop
 8010330:	08016ed4 	.word	0x08016ed4
 8010334:	080164b0 	.word	0x080164b0

08010338 <_ZN18MemoryLeakDetectorD1Ev>:

MemoryLeakDetector::~MemoryLeakDetector()
 8010338:	b590      	push	{r4, r7, lr}
 801033a:	b083      	sub	sp, #12
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	4a0e      	ldr	r2, [pc, #56]	; (801037c <_ZN18MemoryLeakDetectorD1Ev+0x44>)
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	601a      	str	r2, [r3, #0]
{
    if (mutex_)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801034c:	330c      	adds	r3, #12
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d00d      	beq.n	8010370 <_ZN18MemoryLeakDetectorD1Ev+0x38>
    {
        delete mutex_;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801035a:	330c      	adds	r3, #12
 801035c:	681c      	ldr	r4, [r3, #0]
 801035e:	2c00      	cmp	r4, #0
 8010360:	d006      	beq.n	8010370 <_ZN18MemoryLeakDetectorD1Ev+0x38>
 8010362:	4620      	mov	r0, r4
 8010364:	f7f5 fda0 	bl	8005ea8 <_ZN11SimpleMutexD1Ev>
 8010368:	2104      	movs	r1, #4
 801036a:	4620      	mov	r0, r4
 801036c:	f7f5 f9a4 	bl	80056b8 <_ZdlPvj>
    }
}
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4618      	mov	r0, r3
 8010374:	370c      	adds	r7, #12
 8010376:	46bd      	mov	sp, r7
 8010378:	bd90      	pop	{r4, r7, pc}
 801037a:	bf00      	nop
 801037c:	08016ed4 	.word	0x08016ed4

08010380 <_ZN18MemoryLeakDetectorD0Ev>:
MemoryLeakDetector::~MemoryLeakDetector()
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
}
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7ff ffd5 	bl	8010338 <_ZN18MemoryLeakDetectorD1Ev>
 801038e:	f241 1150 	movw	r1, #4432	; 0x1150
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f7f5 f990 	bl	80056b8 <_ZdlPvj>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4618      	mov	r0, r3
 801039c:	3708      	adds	r7, #8
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}

080103a2 <_ZN18MemoryLeakDetector13startCheckingEv>:
{
    memoryTable_.clearAllAccounting(period);
}

void MemoryLeakDetector::startChecking()
{
 80103a2:	b580      	push	{r7, lr}
 80103a4:	b082      	sub	sp, #8
 80103a6:	af00      	add	r7, sp, #0
 80103a8:	6078      	str	r0, [r7, #4]
    outputBuffer_.clear();
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	330c      	adds	r3, #12
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7ff fd72 	bl	800fe98 <_ZN28MemoryLeakOutputStringBuffer5clearEv>
    current_period_ = mem_leak_period_checking;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2203      	movs	r2, #3
 80103b8:	721a      	strb	r2, [r3, #8]
}
 80103ba:	bf00      	nop
 80103bc:	3708      	adds	r7, #8
 80103be:	46bd      	mov	sp, r7
 80103c0:	bd80      	pop	{r7, pc}

080103c2 <_ZN18MemoryLeakDetector12stopCheckingEv>:

void MemoryLeakDetector::stopChecking()
{
 80103c2:	b480      	push	{r7}
 80103c4:	b083      	sub	sp, #12
 80103c6:	af00      	add	r7, sp, #0
 80103c8:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2202      	movs	r2, #2
 80103ce:	721a      	strb	r2, [r3, #8]
}
 80103d0:	bf00      	nop
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <_ZN18MemoryLeakDetector6enableEv>:
{
    return current_allocation_stage_;
}

void MemoryLeakDetector::enable()
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
    current_period_ = mem_leak_period_enabled;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2202      	movs	r2, #2
 80103e8:	721a      	strb	r2, [r3, #8]
}
 80103ea:	bf00      	nop
 80103ec:	370c      	adds	r7, #12
 80103ee:	46bd      	mov	sp, r7
 80103f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f4:	4770      	bx	lr

080103f6 <_ZN18MemoryLeakDetector8getMutexEv>:
{
    current_allocation_stage_--;
}

SimpleMutex *MemoryLeakDetector::getMutex()
{
 80103f6:	b480      	push	{r7}
 80103f8:	b083      	sub	sp, #12
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
    return mutex_;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010404:	330c      	adds	r3, #12
 8010406:	681b      	ldr	r3, [r3, #0]
}
 8010408:	4618      	mov	r0, r3
 801040a:	370c      	adds	r7, #12
 801040c:	46bd      	mov	sp, r7
 801040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010412:	4770      	bx	lr

08010414 <_ZL31calculateVoidPointerAlignedSizej>:

static size_t calculateVoidPointerAlignedSize(size_t size)
{
 8010414:	b480      	push	{r7}
 8010416:	b083      	sub	sp, #12
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
#ifndef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
    return (sizeof(void*) - (size % sizeof(void*))) + size;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f023 0303 	bic.w	r3, r3, #3
 8010422:	3304      	adds	r3, #4
#else
   return size;
#endif
}
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>:

size_t MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(size_t size)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
    return calculateVoidPointerAlignedSize(size + memory_corruption_buffer_size);
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	3303      	adds	r3, #3
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff ffe8 	bl	8010414 <_ZL31calculateVoidPointerAlignedSizej>
 8010444:	4603      	mov	r3, r0
}
 8010446:	4618      	mov	r0, r3
 8010448:	3708      	adds	r7, #8
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}

0801044e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>:

MemoryLeakDetectorNode* MemoryLeakDetector::getNodeFromMemoryPointer(char* memory, size_t memory_size)
{
 801044e:	b580      	push	{r7, lr}
 8010450:	b084      	sub	sp, #16
 8010452:	af00      	add	r7, sp, #0
 8010454:	60f8      	str	r0, [r7, #12]
 8010456:	60b9      	str	r1, [r7, #8]
 8010458:	607a      	str	r2, [r7, #4]
    return (MemoryLeakDetectorNode*) (void*) (memory + sizeOfMemoryWithCorruptionInfo(memory_size));
 801045a:	6879      	ldr	r1, [r7, #4]
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f7ff ffe7 	bl	8010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010462:	4602      	mov	r2, r0
 8010464:	68bb      	ldr	r3, [r7, #8]
 8010466:	4413      	add	r3, r2
}
 8010468:	4618      	mov	r0, r3
 801046a:	3710      	adds	r7, #16
 801046c:	46bd      	mov	sp, r7
 801046e:	bd80      	pop	{r7, pc}

08010470 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>:

void MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode * node, char *new_memory, size_t size, TestMemoryAllocator *allocator, const char *file, size_t line)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b08a      	sub	sp, #40	; 0x28
 8010474:	af06      	add	r7, sp, #24
 8010476:	60f8      	str	r0, [r7, #12]
 8010478:	60b9      	str	r1, [r7, #8]
 801047a:	607a      	str	r2, [r7, #4]
 801047c:	603b      	str	r3, [r7, #0]
    node->init(new_memory, allocationSequenceNumber_++, size, allocator, current_period_, current_allocation_stage_, file, line);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010484:	3304      	adds	r3, #4
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	1c51      	adds	r1, r2, #1
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010490:	3304      	adds	r3, #4
 8010492:	6019      	str	r1, [r3, #0]
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	7a19      	ldrb	r1, [r3, #8]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 801049e:	3308      	adds	r3, #8
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	6a38      	ldr	r0, [r7, #32]
 80104a4:	9004      	str	r0, [sp, #16]
 80104a6:	69f8      	ldr	r0, [r7, #28]
 80104a8:	9003      	str	r0, [sp, #12]
 80104aa:	9302      	str	r3, [sp, #8]
 80104ac:	9101      	str	r1, [sp, #4]
 80104ae:	69bb      	ldr	r3, [r7, #24]
 80104b0:	9300      	str	r3, [sp, #0]
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	6879      	ldr	r1, [r7, #4]
 80104b6:	68b8      	ldr	r0, [r7, #8]
 80104b8:	f7ff fcfb 	bl	800feb2 <_ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj>
    addMemoryCorruptionInformation(node->memory_ + node->size_);
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	689a      	ldr	r2, [r3, #8]
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4413      	add	r3, r2
 80104c6:	4619      	mov	r1, r3
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f000 f861 	bl	8010590 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>
    memoryTable_.addNewNode(node);
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104d4:	331c      	adds	r3, #28
 80104d6:	68b9      	ldr	r1, [r7, #8]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fe11 	bl	8010100 <_ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode>
}
 80104de:	bf00      	nop
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b08a      	sub	sp, #40	; 0x28
 80104ea:	af04      	add	r7, sp, #16
 80104ec:	60f8      	str	r0, [r7, #12]
 80104ee:	60b9      	str	r1, [r7, #8]
 80104f0:	607a      	str	r2, [r7, #4]
 80104f2:	603b      	str	r3, [r7, #0]
    char* new_memory = reallocateMemoryWithAccountingInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 80104f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104f8:	9302      	str	r3, [sp, #8]
 80104fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	6a3b      	ldr	r3, [r7, #32]
 8010500:	9300      	str	r3, [sp, #0]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 f96f 	bl	80107ec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>
 801050e:	6178      	str	r0, [r7, #20]
    if (new_memory == NULLPTR) return NULLPTR;
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x34>
 8010516:	2300      	movs	r3, #0
 8010518:	e017      	b.n	801054a <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb+0x64>

    MemoryLeakDetectorNode *node = createMemoryLeakAccountingInformation(allocator, size, new_memory, allocatNodesSeperately);
 801051a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801051e:	9300      	str	r3, [sp, #0]
 8010520:	697b      	ldr	r3, [r7, #20]
 8010522:	683a      	ldr	r2, [r7, #0]
 8010524:	68b9      	ldr	r1, [r7, #8]
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	f000 f98a 	bl	8010840 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 801052c:	6138      	str	r0, [r7, #16]
    storeLeakInformation(node, new_memory, size, allocator, file, line);
 801052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010530:	9302      	str	r3, [sp, #8]
 8010532:	6a3b      	ldr	r3, [r7, #32]
 8010534:	9301      	str	r3, [sp, #4]
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	9300      	str	r3, [sp, #0]
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	697a      	ldr	r2, [r7, #20]
 801053e:	6939      	ldr	r1, [r7, #16]
 8010540:	68f8      	ldr	r0, [r7, #12]
 8010542:	f7ff ff95 	bl	8010470 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	689b      	ldr	r3, [r3, #8]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3718      	adds	r7, #24
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
	...

08010554 <_ZN18MemoryLeakDetector16invalidateMemoryEPc>:

void MemoryLeakDetector::invalidateMemory(char* memory)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
#ifndef CPPUTEST_DISABLE_HEAP_POISON
  MemoryLeakDetectorNode* node = memoryTable_.retrieveNode(memory);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010564:	331c      	adds	r3, #28
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fdf6 	bl	801015a <_ZN23MemoryLeakDetectorTable12retrieveNodeEPc>
 801056e:	60f8      	str	r0, [r7, #12]
  if (node)
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d006      	beq.n	8010584 <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x30>
    PlatformSpecificMemset(memory, 0xCD, node->size_);
 8010576:	4b05      	ldr	r3, [pc, #20]	; (801058c <_ZN18MemoryLeakDetector16invalidateMemoryEPc+0x38>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	6812      	ldr	r2, [r2, #0]
 801057e:	21cd      	movs	r1, #205	; 0xcd
 8010580:	6838      	ldr	r0, [r7, #0]
 8010582:	4798      	blx	r3
#endif
}
 8010584:	bf00      	nop
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}
 801058c:	200000d0 	.word	0x200000d0

08010590 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc>:

void MemoryLeakDetector::addMemoryCorruptionInformation(char* memory)
{
 8010590:	b480      	push	{r7}
 8010592:	b085      	sub	sp, #20
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801059a:	2300      	movs	r3, #0
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2b02      	cmp	r3, #2
 80105a2:	d812      	bhi.n	80105ca <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x3a>
      memory[i] = GuardBytes[i % sizeof(GuardBytes)];
 80105a4:	68f9      	ldr	r1, [r7, #12]
 80105a6:	4b0c      	ldr	r3, [pc, #48]	; (80105d8 <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x48>)
 80105a8:	fba3 2301 	umull	r2, r3, r3, r1
 80105ac:	085a      	lsrs	r2, r3, #1
 80105ae:	4613      	mov	r3, r2
 80105b0:	005b      	lsls	r3, r3, #1
 80105b2:	4413      	add	r3, r2
 80105b4:	1aca      	subs	r2, r1, r3
 80105b6:	6839      	ldr	r1, [r7, #0]
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	440b      	add	r3, r1
 80105bc:	4907      	ldr	r1, [pc, #28]	; (80105dc <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0x4c>)
 80105be:	5c8a      	ldrb	r2, [r1, r2]
 80105c0:	701a      	strb	r2, [r3, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	3301      	adds	r3, #1
 80105c6:	60fb      	str	r3, [r7, #12]
 80105c8:	e7e9      	b.n	801059e <_ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc+0xe>
}
 80105ca:	bf00      	nop
 80105cc:	3714      	adds	r7, #20
 80105ce:	46bd      	mov	sp, r7
 80105d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	aaaaaaab 	.word	0xaaaaaaab
 80105dc:	08016ec8 	.word	0x08016ec8

080105e0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>:

bool MemoryLeakDetector::validMemoryCorruptionInformation(char* memory)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b085      	sub	sp, #20
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 80105ea:	2300      	movs	r3, #0
 80105ec:	60fb      	str	r3, [r7, #12]
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2b02      	cmp	r3, #2
 80105f2:	d816      	bhi.n	8010622 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x42>
      if (memory[i] != GuardBytes[i % sizeof(GuardBytes)])
 80105f4:	683a      	ldr	r2, [r7, #0]
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	4413      	add	r3, r2
 80105fa:	7818      	ldrb	r0, [r3, #0]
 80105fc:	68f9      	ldr	r1, [r7, #12]
 80105fe:	4b0c      	ldr	r3, [pc, #48]	; (8010630 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x50>)
 8010600:	fba3 2301 	umull	r2, r3, r3, r1
 8010604:	085a      	lsrs	r2, r3, #1
 8010606:	4613      	mov	r3, r2
 8010608:	005b      	lsls	r3, r3, #1
 801060a:	4413      	add	r3, r2
 801060c:	1aca      	subs	r2, r1, r3
 801060e:	4b09      	ldr	r3, [pc, #36]	; (8010634 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x54>)
 8010610:	5c9b      	ldrb	r3, [r3, r2]
 8010612:	4298      	cmp	r0, r3
 8010614:	d001      	beq.n	801061a <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x3a>
          return false;
 8010616:	2300      	movs	r3, #0
 8010618:	e004      	b.n	8010624 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0x44>
   for (size_t i=0; i<memory_corruption_buffer_size; i++)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	3301      	adds	r3, #1
 801061e:	60fb      	str	r3, [r7, #12]
 8010620:	e7e5      	b.n	80105ee <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc+0xe>
   return true;
 8010622:	2301      	movs	r3, #1
}
 8010624:	4618      	mov	r0, r3
 8010626:	3714      	adds	r7, #20
 8010628:	46bd      	mov	sp, r7
 801062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062e:	4770      	bx	lr
 8010630:	aaaaaaab 	.word	0xaaaaaaab
 8010634:	08016ec8 	.word	0x08016ec8

08010638 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>:

bool MemoryLeakDetector::matchingAllocation(TestMemoryAllocator *alloc_allocator, TestMemoryAllocator *free_allocator)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
    if (alloc_allocator == free_allocator) return true;
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	429a      	cmp	r2, r3
 801064a:	d101      	bne.n	8010650 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x18>
 801064c:	2301      	movs	r3, #1
 801064e:	e013      	b.n	8010678 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    if (!doAllocationTypeChecking_) return true;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	f083 0301 	eor.w	r3, r3, #1
 801065c:	b2db      	uxtb	r3, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d001      	beq.n	8010666 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x2e>
 8010662:	2301      	movs	r3, #1
 8010664:	e008      	b.n	8010678 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_+0x40>
    return free_allocator->isOfEqualType(alloc_allocator);
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	331c      	adds	r3, #28
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	68b9      	ldr	r1, [r7, #8]
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	4798      	blx	r3
 8010674:	4603      	mov	r3, r0
 8010676:	bf00      	nop
}
 8010678:	4618      	mov	r0, r3
 801067a:	3710      	adds	r7, #16
 801067c:	46bd      	mov	sp, r7
 801067e:	bd80      	pop	{r7, pc}

08010680 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>:

void MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode* node, const char* file, size_t line, TestMemoryAllocator* allocator, bool allocateNodesSeperately)
{
 8010680:	b590      	push	{r4, r7, lr}
 8010682:	b087      	sub	sp, #28
 8010684:	af02      	add	r7, sp, #8
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	607a      	str	r2, [r7, #4]
 801068c:	603b      	str	r3, [r7, #0]
    if (!matchingAllocation(node->allocator_->actualAllocator(), allocator->actualAllocator()))
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	695a      	ldr	r2, [r3, #20]
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	3328      	adds	r3, #40	; 0x28
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4610      	mov	r0, r2
 801069e:	4798      	blx	r3
 80106a0:	4604      	mov	r4, r0
 80106a2:	6a3b      	ldr	r3, [r7, #32]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	3328      	adds	r3, #40	; 0x28
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	6a38      	ldr	r0, [r7, #32]
 80106ac:	4798      	blx	r3
 80106ae:	4603      	mov	r3, r0
 80106b0:	461a      	mov	r2, r3
 80106b2:	4621      	mov	r1, r4
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f7ff ffbf 	bl	8010638 <_ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_>
 80106ba:	4603      	mov	r3, r0
 80106bc:	f083 0301 	eor.w	r3, r3, #1
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d014      	beq.n	80106f0 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0x70>
        outputBuffer_.reportAllocationDeallocationMismatchFailure(node, file, line, allocator->actualAllocator(), reporter_);
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	f103 040c 	add.w	r4, r3, #12
 80106cc:	6a3b      	ldr	r3, [r7, #32]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	3328      	adds	r3, #40	; 0x28
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	6a38      	ldr	r0, [r7, #32]
 80106d6:	4798      	blx	r3
 80106d8:	4602      	mov	r2, r0
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	9301      	str	r3, [sp, #4]
 80106e0:	9200      	str	r2, [sp, #0]
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	68b9      	ldr	r1, [r7, #8]
 80106e8:	4620      	mov	r0, r4
 80106ea:	f7ff fb4d 	bl	800fd88 <_ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
    else if (allocateNodesSeperately)
        allocator->freeMemoryLeakNode((char*) node);
}
 80106ee:	e02e      	b.n	801074e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (!validMemoryCorruptionInformation(node->memory_ + node->size_))
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	689a      	ldr	r2, [r3, #8]
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4413      	add	r3, r2
 80106fa:	4619      	mov	r1, r3
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f7ff ff6f 	bl	80105e0 <_ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc>
 8010702:	4603      	mov	r3, r0
 8010704:	f083 0301 	eor.w	r3, r3, #1
 8010708:	b2db      	uxtb	r3, r3
 801070a:	2b00      	cmp	r3, #0
 801070c:	d014      	beq.n	8010738 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xb8>
        outputBuffer_.reportMemoryCorruptionFailure(node, file, line, allocator->actualAllocator(), reporter_);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f103 040c 	add.w	r4, r3, #12
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	3328      	adds	r3, #40	; 0x28
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	6a38      	ldr	r0, [r7, #32]
 801071e:	4798      	blx	r3
 8010720:	4602      	mov	r2, r0
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	9301      	str	r3, [sp, #4]
 8010728:	9200      	str	r2, [sp, #0]
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	687a      	ldr	r2, [r7, #4]
 801072e:	68b9      	ldr	r1, [r7, #8]
 8010730:	4620      	mov	r0, r4
 8010732:	f7ff fb4f 	bl	800fdd4 <_ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
}
 8010736:	e00a      	b.n	801074e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
    else if (allocateNodesSeperately)
 8010738:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801073c:	2b00      	cmp	r3, #0
 801073e:	d006      	beq.n	801074e <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb+0xce>
        allocator->freeMemoryLeakNode((char*) node);
 8010740:	6a3b      	ldr	r3, [r7, #32]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	3324      	adds	r3, #36	; 0x24
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	68b9      	ldr	r1, [r7, #8]
 801074a:	6a38      	ldr	r0, [r7, #32]
 801074c:	4798      	blx	r3
}
 801074e:	bf00      	nop
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	bd90      	pop	{r4, r7, pc}
	...

08010758 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, bool allocatNodesSeperately)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b086      	sub	sp, #24
 801075c:	af02      	add	r7, sp, #8
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
 8010764:	70fb      	strb	r3, [r7, #3]
    return allocMemory(allocator, size, UNKNOWN, 0, allocatNodesSeperately);
 8010766:	4b08      	ldr	r3, [pc, #32]	; (8010788 <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb+0x30>)
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	78fb      	ldrb	r3, [r7, #3]
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	2300      	movs	r3, #0
 8010770:	9300      	str	r3, [sp, #0]
 8010772:	4613      	mov	r3, r2
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	68b9      	ldr	r1, [r7, #8]
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f000 f87f 	bl	801087c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>
 801077e:	4603      	mov	r3, r0
}
 8010780:	4618      	mov	r0, r3
 8010782:	3710      	adds	r7, #16
 8010784:	46bd      	mov	sp, r7
 8010786:	bd80      	pop	{r7, pc}
 8010788:	200000f8 	.word	0x200000f8

0801078c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	607a      	str	r2, [r7, #4]
 8010798:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size), file, line);
 801079a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d00e      	beq.n	80107c0 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x34>
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3308      	adds	r3, #8
 80107a8:	681c      	ldr	r4, [r3, #0]
 80107aa:	6879      	ldr	r1, [r7, #4]
 80107ac:	68f8      	ldr	r0, [r7, #12]
 80107ae:	f7ff fe3f 	bl	8010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80107b2:	4601      	mov	r1, r0
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	683a      	ldr	r2, [r7, #0]
 80107b8:	68b8      	ldr	r0, [r7, #8]
 80107ba:	47a0      	blx	r4
 80107bc:	4603      	mov	r3, r0
 80107be:	e010      	b.n	80107e2 <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb+0x56>
    else return allocator->alloc_memory(sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode), file, line);
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	3308      	adds	r3, #8
 80107c6:	681c      	ldr	r4, [r3, #0]
 80107c8:	6879      	ldr	r1, [r7, #4]
 80107ca:	68f8      	ldr	r0, [r7, #12]
 80107cc:	f7ff fe30 	bl	8010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 80107d0:	4603      	mov	r3, r0
 80107d2:	f103 0120 	add.w	r1, r3, #32
 80107d6:	6a3b      	ldr	r3, [r7, #32]
 80107d8:	683a      	ldr	r2, [r7, #0]
 80107da:	68b8      	ldr	r0, [r7, #8]
 80107dc:	47a0      	blx	r4
 80107de:	4603      	mov	r3, r0
 80107e0:	bf00      	nop
}
 80107e2:	4618      	mov	r0, r3
 80107e4:	3714      	adds	r7, #20
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd90      	pop	{r4, r7, pc}
	...

080107ec <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb>:

char* MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator* /*allocator*/, char* memory, size_t size, const char* /*file*/, size_t /*line*/, bool allocatNodesSeperately)
{
 80107ec:	b590      	push	{r4, r7, lr}
 80107ee:	b085      	sub	sp, #20
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
 80107f8:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size));
 80107fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d00b      	beq.n	801081a <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x2e>
 8010802:	4b0e      	ldr	r3, [pc, #56]	; (801083c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 8010804:	681c      	ldr	r4, [r3, #0]
 8010806:	6839      	ldr	r1, [r7, #0]
 8010808:	68f8      	ldr	r0, [r7, #12]
 801080a:	f7ff fe11 	bl	8010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 801080e:	4603      	mov	r3, r0
 8010810:	4619      	mov	r1, r3
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	47a0      	blx	r4
 8010816:	4603      	mov	r3, r0
 8010818:	e00c      	b.n	8010834 <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x48>
    else return (char*) PlatformSpecificRealloc(memory, sizeOfMemoryWithCorruptionInfo(size) + sizeof(MemoryLeakDetectorNode));
 801081a:	4b08      	ldr	r3, [pc, #32]	; (801083c <_ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb+0x50>)
 801081c:	681c      	ldr	r4, [r3, #0]
 801081e:	6839      	ldr	r1, [r7, #0]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f7ff fe05 	bl	8010430 <_ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj>
 8010826:	4603      	mov	r3, r0
 8010828:	3320      	adds	r3, #32
 801082a:	4619      	mov	r1, r3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	47a0      	blx	r4
 8010830:	4603      	mov	r3, r0
 8010832:	bf00      	nop
}
 8010834:	4618      	mov	r0, r3
 8010836:	3714      	adds	r7, #20
 8010838:	46bd      	mov	sp, r7
 801083a:	bd90      	pop	{r4, r7, pc}
 801083c:	200000c8 	.word	0x200000c8

08010840 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>:

MemoryLeakDetectorNode* MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator* allocator, size_t size, char* memory, bool allocatNodesSeperately)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b084      	sub	sp, #16
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
 801084c:	603b      	str	r3, [r7, #0]
    if (allocatNodesSeperately) return (MemoryLeakDetectorNode*) (void*) allocator->allocMemoryLeakNode(sizeof(MemoryLeakDetectorNode));
 801084e:	7e3b      	ldrb	r3, [r7, #24]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d008      	beq.n	8010866 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x26>
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3320      	adds	r3, #32
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	2120      	movs	r1, #32
 801085e:	68b8      	ldr	r0, [r7, #8]
 8010860:	4798      	blx	r3
 8010862:	4603      	mov	r3, r0
 8010864:	e006      	b.n	8010874 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb+0x34>
    else return getNodeFromMemoryPointer(memory, size);
 8010866:	687a      	ldr	r2, [r7, #4]
 8010868:	6839      	ldr	r1, [r7, #0]
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f7ff fdef 	bl	801044e <_ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj>
 8010870:	4603      	mov	r3, r0
 8010872:	bf00      	nop
}
 8010874:	4618      	mov	r0, r3
 8010876:	3710      	adds	r7, #16
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}

0801087c <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb>:

char* MemoryLeakDetector::allocMemory(TestMemoryAllocator* allocator, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 801087c:	b580      	push	{r7, lr}
 801087e:	b08a      	sub	sp, #40	; 0x28
 8010880:	af04      	add	r7, sp, #16
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	603b      	str	r3, [r7, #0]
     * If the same allocation is used and the wrong free is called, it will deallocate the memory leak information
     * without the memory leak detector ever noticing it!
     * So, for malloc, we'll allocate the memory separately so we can detect this and give a proper error.
     */

    char* memory = allocateMemoryWithAccountingInformation(allocator, size, file, line, allocatNodesSeperately);
 801088a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801088e:	9301      	str	r3, [sp, #4]
 8010890:	6a3b      	ldr	r3, [r7, #32]
 8010892:	9300      	str	r3, [sp, #0]
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	687a      	ldr	r2, [r7, #4]
 8010898:	68b9      	ldr	r1, [r7, #8]
 801089a:	68f8      	ldr	r0, [r7, #12]
 801089c:	f7ff ff76 	bl	801078c <_ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb>
 80108a0:	6178      	str	r0, [r7, #20]
    if (memory == NULLPTR) return NULLPTR;
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d101      	bne.n	80108ac <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x30>
 80108a8:	2300      	movs	r3, #0
 80108aa:	e017      	b.n	80108dc <_ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb+0x60>
    MemoryLeakDetectorNode* node = createMemoryLeakAccountingInformation(allocator, size, memory, allocatNodesSeperately);
 80108ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	687a      	ldr	r2, [r7, #4]
 80108b6:	68b9      	ldr	r1, [r7, #8]
 80108b8:	68f8      	ldr	r0, [r7, #12]
 80108ba:	f7ff ffc1 	bl	8010840 <_ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb>
 80108be:	6138      	str	r0, [r7, #16]

    storeLeakInformation(node, memory, size, allocator, file, line);
 80108c0:	6a3b      	ldr	r3, [r7, #32]
 80108c2:	9302      	str	r3, [sp, #8]
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	9301      	str	r3, [sp, #4]
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	9300      	str	r3, [sp, #0]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	697a      	ldr	r2, [r7, #20]
 80108d0:	6939      	ldr	r1, [r7, #16]
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7ff fdcc 	bl	8010470 <_ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj>
    return node->memory_;
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	689b      	ldr	r3, [r3, #8]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3718      	adds	r7, #24
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>:
    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
    if (allocatNodesSeperately) allocator->freeMemoryLeakNode( (char*) node);
}

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, const char* file, size_t line, bool allocatNodesSeperately)
{
 80108e4:	b590      	push	{r4, r7, lr}
 80108e6:	b089      	sub	sp, #36	; 0x24
 80108e8:	af02      	add	r7, sp, #8
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
 80108f0:	603b      	str	r3, [r7, #0]
    if (memory == NULLPTR) return;
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d03a      	beq.n	801096e <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8a>

    MemoryLeakDetectorNode* node = memoryTable_.removeNode((char*) memory);
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108fe:	331c      	adds	r3, #28
 8010900:	6879      	ldr	r1, [r7, #4]
 8010902:	4618      	mov	r0, r3
 8010904:	f7ff fc13 	bl	801012e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 8010908:	6178      	str	r0, [r7, #20]
    if (node == NULLPTR) {
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d10b      	bne.n	8010928 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x44>
        outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f103 000c 	add.w	r0, r3, #12
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	9300      	str	r3, [sp, #0]
 801091c:	68bb      	ldr	r3, [r7, #8]
 801091e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010920:	6839      	ldr	r1, [r7, #0]
 8010922:	f7ff fa0d 	bl	800fd40 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
        return;
 8010926:	e023      	b.n	8010970 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    }
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (!allocator->hasBeenDestroyed()) {
 8010928:	68b8      	ldr	r0, [r7, #8]
 801092a:	f7f9 f855 	bl	80099d8 <_ZN19TestMemoryAllocator16hasBeenDestroyedEv>
 801092e:	4603      	mov	r3, r0
 8010930:	f083 0301 	eor.w	r3, r3, #1
 8010934:	b2db      	uxtb	r3, r3
 8010936:	2b00      	cmp	r3, #0
 8010938:	d01a      	beq.n	8010970 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
        size_t size = node->size_;
 801093a:	697b      	ldr	r3, [r7, #20]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	613b      	str	r3, [r7, #16]
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 8010940:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8010944:	9301      	str	r3, [sp, #4]
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094c:	683a      	ldr	r2, [r7, #0]
 801094e:	6979      	ldr	r1, [r7, #20]
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7ff fe95 	bl	8010680 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
        allocator->free_memory((char*) memory, size, file, line);
 8010956:	68bb      	ldr	r3, [r7, #8]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	330c      	adds	r3, #12
 801095c:	681c      	ldr	r4, [r3, #0]
 801095e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010960:	9300      	str	r3, [sp, #0]
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	693a      	ldr	r2, [r7, #16]
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	68b8      	ldr	r0, [r7, #8]
 801096a:	47a0      	blx	r4
 801096c:	e000      	b.n	8010970 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb+0x8c>
    if (memory == NULLPTR) return;
 801096e:	bf00      	nop
    }
}
 8010970:	371c      	adds	r7, #28
 8010972:	46bd      	mov	sp, r7
 8010974:	bd90      	pop	{r4, r7, pc}
	...

08010978 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb>:

void MemoryLeakDetector::deallocMemory(TestMemoryAllocator* allocator, void* memory, bool allocatNodesSeperately)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b086      	sub	sp, #24
 801097c:	af02      	add	r7, sp, #8
 801097e:	60f8      	str	r0, [r7, #12]
 8010980:	60b9      	str	r1, [r7, #8]
 8010982:	607a      	str	r2, [r7, #4]
 8010984:	70fb      	strb	r3, [r7, #3]
    deallocMemory(allocator, (char*) memory, UNKNOWN, 0, allocatNodesSeperately);
 8010986:	4b08      	ldr	r3, [pc, #32]	; (80109a8 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb+0x30>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	78fb      	ldrb	r3, [r7, #3]
 801098c:	9301      	str	r3, [sp, #4]
 801098e:	2300      	movs	r3, #0
 8010990:	9300      	str	r3, [sp, #0]
 8010992:	4613      	mov	r3, r2
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	68b9      	ldr	r1, [r7, #8]
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f7ff ffa3 	bl	80108e4 <_ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb>
}
 801099e:	bf00      	nop
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	200000f8 	.word	0x200000f8

080109ac <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb>:
        deallocMemory(allocator, memory, __FILE__, __LINE__);
    }
}

char* MemoryLeakDetector::reallocMemory(TestMemoryAllocator* allocator, char* memory, size_t size, const char* file, size_t line, bool allocatNodesSeperately)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b08a      	sub	sp, #40	; 0x28
 80109b0:	af04      	add	r7, sp, #16
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	60b9      	str	r1, [r7, #8]
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	603b      	str	r3, [r7, #0]
#ifdef CPPUTEST_DISABLE_MEM_CORRUPTION_CHECK
   allocatNodesSeperately = true;
#endif
    if (memory) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d023      	beq.n	8010a08 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x5c>
        MemoryLeakDetectorNode* node = memoryTable_.removeNode(memory);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109c6:	331c      	adds	r3, #28
 80109c8:	6879      	ldr	r1, [r7, #4]
 80109ca:	4618      	mov	r0, r3
 80109cc:	f7ff fbaf 	bl	801012e <_ZN23MemoryLeakDetectorTable10removeNodeEPc>
 80109d0:	6178      	str	r0, [r7, #20]
        if (node == NULLPTR) {
 80109d2:	697b      	ldr	r3, [r7, #20]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d10c      	bne.n	80109f2 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x46>
            outputBuffer_.reportDeallocateNonAllocatedMemoryFailure(file, line, allocator, reporter_);
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	f103 000c 	add.w	r0, r3, #12
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e8:	6a39      	ldr	r1, [r7, #32]
 80109ea:	f7ff f9a9 	bl	800fd40 <_ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure>
            return NULLPTR;
 80109ee:	2300      	movs	r3, #0
 80109f0:	e019      	b.n	8010a26 <_ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb+0x7a>
        }
        checkForCorruption(node, file, line, allocator, allocatNodesSeperately);
 80109f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109f6:	9301      	str	r3, [sp, #4]
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	9300      	str	r3, [sp, #0]
 80109fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fe:	6a3a      	ldr	r2, [r7, #32]
 8010a00:	6979      	ldr	r1, [r7, #20]
 8010a02:	68f8      	ldr	r0, [r7, #12]
 8010a04:	f7ff fe3c 	bl	8010680 <_ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb>
    }
    return reallocateMemoryAndLeakInformation(allocator, memory, size, file, line, allocatNodesSeperately);
 8010a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a0c:	9302      	str	r3, [sp, #8]
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	6a3b      	ldr	r3, [r7, #32]
 8010a14:	9300      	str	r3, [sp, #0]
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	687a      	ldr	r2, [r7, #4]
 8010a1a:	68b9      	ldr	r1, [r7, #8]
 8010a1c:	68f8      	ldr	r0, [r7, #12]
 8010a1e:	f7ff fd62 	bl	80104e6 <_ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb>
 8010a22:	4603      	mov	r3, r0
 8010a24:	bf00      	nop
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3718      	adds	r7, #24
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}

08010a2e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>:

void MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod period)
{
 8010a2e:	b580      	push	{r7, lr}
 8010a30:	b084      	sub	sp, #16
 8010a32:	af00      	add	r7, sp, #0
 8010a34:	6078      	str	r0, [r7, #4]
 8010a36:	460b      	mov	r3, r1
 8010a38:	70fb      	strb	r3, [r7, #3]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(period);
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a40:	331c      	adds	r3, #28
 8010a42:	78fa      	ldrb	r2, [r7, #3]
 8010a44:	4611      	mov	r1, r2
 8010a46:	4618      	mov	r0, r3
 8010a48:	f7ff fbc0 	bl	80101cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8010a4c:	60f8      	str	r0, [r7, #12]

    outputBuffer_.startMemoryLeakReporting();
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	330c      	adds	r3, #12
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7ff f882 	bl	800fb5c <_ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv>

    while (leak) {
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d010      	beq.n	8010a80 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x52>
        outputBuffer_.reportMemoryLeak(leak);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	330c      	adds	r3, #12
 8010a62:	68f9      	ldr	r1, [r7, #12]
 8010a64:	4618      	mov	r0, r3
 8010a66:	f7ff f897 	bl	800fb98 <_ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode>
        leak = memoryTable_.getNextLeak(leak, period);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a70:	331c      	adds	r3, #28
 8010a72:	78fa      	ldrb	r2, [r7, #3]
 8010a74:	68f9      	ldr	r1, [r7, #12]
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff fbcb 	bl	8010212 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010a7c:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8010a7e:	e7eb      	b.n	8010a58 <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod+0x2a>
    }

    outputBuffer_.stopMemoryLeakReporting();
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	330c      	adds	r3, #12
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff f8e7 	bl	800fc58 <_ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv>
}
 8010a8a:	bf00      	nop
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <_ZN18MemoryLeakDetector6reportE13MemLeakPeriod>:

const char* MemoryLeakDetector::report(MemLeakPeriod period)
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b082      	sub	sp, #8
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	70fb      	strb	r3, [r7, #3]
    ConstructMemoryLeakReport(period);
 8010a9e:	78fb      	ldrb	r3, [r7, #3]
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f7ff ffc3 	bl	8010a2e <_ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod>

    return outputBuffer_.toString();
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	330c      	adds	r3, #12
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff f9e5 	bl	800fe7c <_ZN28MemoryLeakOutputStringBuffer8toStringEv>
 8010ab2:	4603      	mov	r3, r0
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	3708      	adds	r7, #8
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}

08010abc <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv>:

void MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
    MemoryLeakDetectorNode* leak = memoryTable_.getFirstLeak(mem_leak_period_checking);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010aca:	331c      	adds	r3, #28
 8010acc:	2103      	movs	r1, #3
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7ff fb7c 	bl	80101cc <_ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod>
 8010ad4:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d011      	beq.n	8010b00 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x44>
        if (leak->period_ == mem_leak_period_checking) leak->period_ = mem_leak_period_enabled;
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	7e1b      	ldrb	r3, [r3, #24]
 8010ae0:	2b03      	cmp	r3, #3
 8010ae2:	d102      	bne.n	8010aea <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x2e>
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	761a      	strb	r2, [r3, #24]
        leak = memoryTable_.getNextLeak(leak, mem_leak_period_checking);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010af0:	331c      	adds	r3, #28
 8010af2:	2203      	movs	r2, #3
 8010af4:	68f9      	ldr	r1, [r7, #12]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7ff fb8b 	bl	8010212 <_ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod>
 8010afc:	60f8      	str	r0, [r7, #12]
    while (leak) {
 8010afe:	e7ea      	b.n	8010ad6 <_ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv+0x1a>
    }
}
 8010b00:	bf00      	nop
 8010b02:	3710      	adds	r7, #16
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <_ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod>:

size_t MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod period)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	70fb      	strb	r3, [r7, #3]
    return memoryTable_.getTotalLeaks(period);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010b1a:	331c      	adds	r3, #28
 8010b1c:	78fa      	ldrb	r2, [r7, #3]
 8010b1e:	4611      	mov	r1, r2
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7ff fb30 	bl	8010186 <_ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod>
 8010b26:	4603      	mov	r3, r0
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <_ZN10TestFilterC1ERK12SimpleString>:

TestFilter::TestFilter() : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
{
}

TestFilter::TestFilter(const SimpleString& filter) : strictMatching_(false), invertMatching_(false), next_(NULLPTR)
 8010b30:	b580      	push	{r7, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	6078      	str	r0, [r7, #4]
 8010b38:	6039      	str	r1, [r7, #0]
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	490b      	ldr	r1, [pc, #44]	; (8010b6c <_ZN10TestFilterC1ERK12SimpleString+0x3c>)
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7f5 fc8f 	bl	8006462 <_ZN12SimpleStringC1EPKc>
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2200      	movs	r2, #0
 8010b48:	721a      	strb	r2, [r3, #8]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	725a      	strb	r2, [r3, #9]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2200      	movs	r2, #0
 8010b54:	60da      	str	r2, [r3, #12]
{
    filter_ = filter;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f7f5 fced 	bl	800653a <_ZN12SimpleStringaSERKS_>
}
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	4618      	mov	r0, r3
 8010b64:	3708      	adds	r7, #8
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}
 8010b6a:	bf00      	nop
 8010b6c:	080164d0 	.word	0x080164d0

08010b70 <_ZN10TestFilter3addEPS_>:
{
    filter_ = filter;
}

TestFilter* TestFilter::add(TestFilter* filter)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b083      	sub	sp, #12
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
    next_ = filter;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	60da      	str	r2, [r3, #12]
    return this;
 8010b80:	687b      	ldr	r3, [r7, #4]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	370c      	adds	r7, #12
 8010b86:	46bd      	mov	sp, r7
 8010b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b8c:	4770      	bx	lr

08010b8e <_ZNK10TestFilter7getNextEv>:

TestFilter* TestFilter::getNext() const
{
 8010b8e:	b480      	push	{r7}
 8010b90:	b083      	sub	sp, #12
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
    return next_;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68db      	ldr	r3, [r3, #12]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	370c      	adds	r7, #12
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba4:	4770      	bx	lr

08010ba6 <_ZN10TestFilter14strictMatchingEv>:

void TestFilter::strictMatching()
{
 8010ba6:	b480      	push	{r7}
 8010ba8:	b083      	sub	sp, #12
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
    strictMatching_ = true;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	721a      	strb	r2, [r3, #8]
}
 8010bb4:	bf00      	nop
 8010bb6:	370c      	adds	r7, #12
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bbe:	4770      	bx	lr

08010bc0 <_ZN10TestFilter14invertMatchingEv>:

void TestFilter::invertMatching()
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    invertMatching_ = true;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2201      	movs	r2, #1
 8010bcc:	725a      	strb	r2, [r3, #9]
}
 8010bce:	bf00      	nop
 8010bd0:	370c      	adds	r7, #12
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <_ZNK10TestFilter5matchERK12SimpleString>:

bool TestFilter::match(const SimpleString& name) const
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b084      	sub	sp, #16
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
 8010be2:	6039      	str	r1, [r7, #0]
    bool matches = false;
 8010be4:	2300      	movs	r3, #0
 8010be6:	73fb      	strb	r3, [r7, #15]

    if(strictMatching_)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	7a1b      	ldrb	r3, [r3, #8]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d007      	beq.n	8010c00 <_ZNK10TestFilter5matchERK12SimpleString+0x26>
        matches = name == filter_;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	4619      	mov	r1, r3
 8010bf4:	6838      	ldr	r0, [r7, #0]
 8010bf6:	f7f5 fff8 	bl	8006bea <_ZeqRK12SimpleStringS1_>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	73fb      	strb	r3, [r7, #15]
 8010bfe:	e006      	b.n	8010c0e <_ZNK10TestFilter5matchERK12SimpleString+0x34>
    else
        matches = name.contains(filter_);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	4619      	mov	r1, r3
 8010c04:	6838      	ldr	r0, [r7, #0]
 8010c06:	f7f5 fcaa 	bl	800655e <_ZNK12SimpleString8containsERKS_>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]

    return invertMatching_ ? !matches : matches;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	7a5b      	ldrb	r3, [r3, #9]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d004      	beq.n	8010c20 <_ZNK10TestFilter5matchERK12SimpleString+0x46>
 8010c16:	7bfb      	ldrb	r3, [r7, #15]
 8010c18:	f083 0301 	eor.w	r3, r3, #1
 8010c1c:	b2db      	uxtb	r3, r3
 8010c1e:	e005      	b.n	8010c2c <_ZNK10TestFilter5matchERK12SimpleString+0x52>
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	bf14      	ite	ne
 8010c26:	2301      	movne	r3, #1
 8010c28:	2300      	moveq	r3, #0
 8010c2a:	b2db      	uxtb	r3, r3
}
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3710      	adds	r7, #16
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <__cxa_guard_acquire>:
 8010c34:	6803      	ldr	r3, [r0, #0]
 8010c36:	07db      	lsls	r3, r3, #31
 8010c38:	d406      	bmi.n	8010c48 <__cxa_guard_acquire+0x14>
 8010c3a:	7843      	ldrb	r3, [r0, #1]
 8010c3c:	b103      	cbz	r3, 8010c40 <__cxa_guard_acquire+0xc>
 8010c3e:	deff      	udf	#255	; 0xff
 8010c40:	2301      	movs	r3, #1
 8010c42:	7043      	strb	r3, [r0, #1]
 8010c44:	4618      	mov	r0, r3
 8010c46:	4770      	bx	lr
 8010c48:	2000      	movs	r0, #0
 8010c4a:	4770      	bx	lr

08010c4c <__cxa_guard_release>:
 8010c4c:	2301      	movs	r3, #1
 8010c4e:	6003      	str	r3, [r0, #0]
 8010c50:	4770      	bx	lr

08010c52 <__cxa_pure_virtual>:
 8010c52:	b508      	push	{r3, lr}
 8010c54:	f000 f80c 	bl	8010c70 <_ZSt9terminatev>

08010c58 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010c58:	b508      	push	{r3, lr}
 8010c5a:	4780      	blx	r0
 8010c5c:	f000 f816 	bl	8010c8c <abort>

08010c60 <_ZSt13get_terminatev>:
 8010c60:	4b02      	ldr	r3, [pc, #8]	; (8010c6c <_ZSt13get_terminatev+0xc>)
 8010c62:	6818      	ldr	r0, [r3, #0]
 8010c64:	f3bf 8f5b 	dmb	ish
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	200000fc 	.word	0x200000fc

08010c70 <_ZSt9terminatev>:
 8010c70:	b508      	push	{r3, lr}
 8010c72:	f7ff fff5 	bl	8010c60 <_ZSt13get_terminatev>
 8010c76:	f7ff ffef 	bl	8010c58 <_ZN10__cxxabiv111__terminateEPFvvE>

08010c7a <fabs>:
 8010c7a:	ec51 0b10 	vmov	r0, r1, d0
 8010c7e:	ee10 2a10 	vmov	r2, s0
 8010c82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010c86:	ec43 2b10 	vmov	d0, r2, r3
 8010c8a:	4770      	bx	lr

08010c8c <abort>:
 8010c8c:	b508      	push	{r3, lr}
 8010c8e:	2006      	movs	r0, #6
 8010c90:	f000 ff70 	bl	8011b74 <raise>
 8010c94:	2001      	movs	r0, #1
 8010c96:	f7f0 f874 	bl	8000d82 <_exit>

08010c9a <atexit>:
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	4601      	mov	r1, r0
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f002 b909 	b.w	8012eb8 <__register_exitproc>
	...

08010ca8 <__errno>:
 8010ca8:	4b01      	ldr	r3, [pc, #4]	; (8010cb0 <__errno+0x8>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop
 8010cb0:	20000100 	.word	0x20000100

08010cb4 <_fclose_r>:
 8010cb4:	b570      	push	{r4, r5, r6, lr}
 8010cb6:	4605      	mov	r5, r0
 8010cb8:	460c      	mov	r4, r1
 8010cba:	b911      	cbnz	r1, 8010cc2 <_fclose_r+0xe>
 8010cbc:	2600      	movs	r6, #0
 8010cbe:	4630      	mov	r0, r6
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}
 8010cc2:	b118      	cbz	r0, 8010ccc <_fclose_r+0x18>
 8010cc4:	6983      	ldr	r3, [r0, #24]
 8010cc6:	b90b      	cbnz	r3, 8010ccc <_fclose_r+0x18>
 8010cc8:	f000 f994 	bl	8010ff4 <__sinit>
 8010ccc:	4b2c      	ldr	r3, [pc, #176]	; (8010d80 <_fclose_r+0xcc>)
 8010cce:	429c      	cmp	r4, r3
 8010cd0:	d114      	bne.n	8010cfc <_fclose_r+0x48>
 8010cd2:	686c      	ldr	r4, [r5, #4]
 8010cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010cd6:	07d8      	lsls	r0, r3, #31
 8010cd8:	d405      	bmi.n	8010ce6 <_fclose_r+0x32>
 8010cda:	89a3      	ldrh	r3, [r4, #12]
 8010cdc:	0599      	lsls	r1, r3, #22
 8010cde:	d402      	bmi.n	8010ce6 <_fclose_r+0x32>
 8010ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ce2:	f000 fd3a 	bl	801175a <__retarget_lock_acquire_recursive>
 8010ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cea:	b98b      	cbnz	r3, 8010d10 <_fclose_r+0x5c>
 8010cec:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8010cee:	f016 0601 	ands.w	r6, r6, #1
 8010cf2:	d1e3      	bne.n	8010cbc <_fclose_r+0x8>
 8010cf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010cf6:	f000 fd32 	bl	801175e <__retarget_lock_release_recursive>
 8010cfa:	e7e0      	b.n	8010cbe <_fclose_r+0xa>
 8010cfc:	4b21      	ldr	r3, [pc, #132]	; (8010d84 <_fclose_r+0xd0>)
 8010cfe:	429c      	cmp	r4, r3
 8010d00:	d101      	bne.n	8010d06 <_fclose_r+0x52>
 8010d02:	68ac      	ldr	r4, [r5, #8]
 8010d04:	e7e6      	b.n	8010cd4 <_fclose_r+0x20>
 8010d06:	4b20      	ldr	r3, [pc, #128]	; (8010d88 <_fclose_r+0xd4>)
 8010d08:	429c      	cmp	r4, r3
 8010d0a:	bf08      	it	eq
 8010d0c:	68ec      	ldreq	r4, [r5, #12]
 8010d0e:	e7e1      	b.n	8010cd4 <_fclose_r+0x20>
 8010d10:	4621      	mov	r1, r4
 8010d12:	4628      	mov	r0, r5
 8010d14:	f000 f842 	bl	8010d9c <__sflush_r>
 8010d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010d1a:	4606      	mov	r6, r0
 8010d1c:	b133      	cbz	r3, 8010d2c <_fclose_r+0x78>
 8010d1e:	6a21      	ldr	r1, [r4, #32]
 8010d20:	4628      	mov	r0, r5
 8010d22:	4798      	blx	r3
 8010d24:	2800      	cmp	r0, #0
 8010d26:	bfb8      	it	lt
 8010d28:	f04f 36ff 	movlt.w	r6, #4294967295
 8010d2c:	89a3      	ldrh	r3, [r4, #12]
 8010d2e:	061a      	lsls	r2, r3, #24
 8010d30:	d503      	bpl.n	8010d3a <_fclose_r+0x86>
 8010d32:	6921      	ldr	r1, [r4, #16]
 8010d34:	4628      	mov	r0, r5
 8010d36:	f000 fd9d 	bl	8011874 <_free_r>
 8010d3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d3c:	b141      	cbz	r1, 8010d50 <_fclose_r+0x9c>
 8010d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d42:	4299      	cmp	r1, r3
 8010d44:	d002      	beq.n	8010d4c <_fclose_r+0x98>
 8010d46:	4628      	mov	r0, r5
 8010d48:	f000 fd94 	bl	8011874 <_free_r>
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	6363      	str	r3, [r4, #52]	; 0x34
 8010d50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010d52:	b121      	cbz	r1, 8010d5e <_fclose_r+0xaa>
 8010d54:	4628      	mov	r0, r5
 8010d56:	f000 fd8d 	bl	8011874 <_free_r>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	64a3      	str	r3, [r4, #72]	; 0x48
 8010d5e:	f000 f931 	bl	8010fc4 <__sfp_lock_acquire>
 8010d62:	2300      	movs	r3, #0
 8010d64:	81a3      	strh	r3, [r4, #12]
 8010d66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d68:	07db      	lsls	r3, r3, #31
 8010d6a:	d402      	bmi.n	8010d72 <_fclose_r+0xbe>
 8010d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d6e:	f000 fcf6 	bl	801175e <__retarget_lock_release_recursive>
 8010d72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d74:	f000 fcef 	bl	8011756 <__retarget_lock_close_recursive>
 8010d78:	f000 f92a 	bl	8010fd0 <__sfp_lock_release>
 8010d7c:	e79f      	b.n	8010cbe <_fclose_r+0xa>
 8010d7e:	bf00      	nop
 8010d80:	08016efc 	.word	0x08016efc
 8010d84:	08016f1c 	.word	0x08016f1c
 8010d88:	08016edc 	.word	0x08016edc

08010d8c <fclose>:
 8010d8c:	4b02      	ldr	r3, [pc, #8]	; (8010d98 <fclose+0xc>)
 8010d8e:	4601      	mov	r1, r0
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	f7ff bf8f 	b.w	8010cb4 <_fclose_r>
 8010d96:	bf00      	nop
 8010d98:	20000100 	.word	0x20000100

08010d9c <__sflush_r>:
 8010d9c:	898a      	ldrh	r2, [r1, #12]
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	4605      	mov	r5, r0
 8010da4:	0710      	lsls	r0, r2, #28
 8010da6:	460c      	mov	r4, r1
 8010da8:	d458      	bmi.n	8010e5c <__sflush_r+0xc0>
 8010daa:	684b      	ldr	r3, [r1, #4]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	dc05      	bgt.n	8010dbc <__sflush_r+0x20>
 8010db0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	dc02      	bgt.n	8010dbc <__sflush_r+0x20>
 8010db6:	2000      	movs	r0, #0
 8010db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010dbe:	2e00      	cmp	r6, #0
 8010dc0:	d0f9      	beq.n	8010db6 <__sflush_r+0x1a>
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010dc8:	682f      	ldr	r7, [r5, #0]
 8010dca:	602b      	str	r3, [r5, #0]
 8010dcc:	d032      	beq.n	8010e34 <__sflush_r+0x98>
 8010dce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	075a      	lsls	r2, r3, #29
 8010dd4:	d505      	bpl.n	8010de2 <__sflush_r+0x46>
 8010dd6:	6863      	ldr	r3, [r4, #4]
 8010dd8:	1ac0      	subs	r0, r0, r3
 8010dda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010ddc:	b10b      	cbz	r3, 8010de2 <__sflush_r+0x46>
 8010dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010de0:	1ac0      	subs	r0, r0, r3
 8010de2:	2300      	movs	r3, #0
 8010de4:	4602      	mov	r2, r0
 8010de6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010de8:	6a21      	ldr	r1, [r4, #32]
 8010dea:	4628      	mov	r0, r5
 8010dec:	47b0      	blx	r6
 8010dee:	1c43      	adds	r3, r0, #1
 8010df0:	89a3      	ldrh	r3, [r4, #12]
 8010df2:	d106      	bne.n	8010e02 <__sflush_r+0x66>
 8010df4:	6829      	ldr	r1, [r5, #0]
 8010df6:	291d      	cmp	r1, #29
 8010df8:	d82c      	bhi.n	8010e54 <__sflush_r+0xb8>
 8010dfa:	4a2a      	ldr	r2, [pc, #168]	; (8010ea4 <__sflush_r+0x108>)
 8010dfc:	40ca      	lsrs	r2, r1
 8010dfe:	07d6      	lsls	r6, r2, #31
 8010e00:	d528      	bpl.n	8010e54 <__sflush_r+0xb8>
 8010e02:	2200      	movs	r2, #0
 8010e04:	6062      	str	r2, [r4, #4]
 8010e06:	04d9      	lsls	r1, r3, #19
 8010e08:	6922      	ldr	r2, [r4, #16]
 8010e0a:	6022      	str	r2, [r4, #0]
 8010e0c:	d504      	bpl.n	8010e18 <__sflush_r+0x7c>
 8010e0e:	1c42      	adds	r2, r0, #1
 8010e10:	d101      	bne.n	8010e16 <__sflush_r+0x7a>
 8010e12:	682b      	ldr	r3, [r5, #0]
 8010e14:	b903      	cbnz	r3, 8010e18 <__sflush_r+0x7c>
 8010e16:	6560      	str	r0, [r4, #84]	; 0x54
 8010e18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e1a:	602f      	str	r7, [r5, #0]
 8010e1c:	2900      	cmp	r1, #0
 8010e1e:	d0ca      	beq.n	8010db6 <__sflush_r+0x1a>
 8010e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e24:	4299      	cmp	r1, r3
 8010e26:	d002      	beq.n	8010e2e <__sflush_r+0x92>
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f000 fd23 	bl	8011874 <_free_r>
 8010e2e:	2000      	movs	r0, #0
 8010e30:	6360      	str	r0, [r4, #52]	; 0x34
 8010e32:	e7c1      	b.n	8010db8 <__sflush_r+0x1c>
 8010e34:	6a21      	ldr	r1, [r4, #32]
 8010e36:	2301      	movs	r3, #1
 8010e38:	4628      	mov	r0, r5
 8010e3a:	47b0      	blx	r6
 8010e3c:	1c41      	adds	r1, r0, #1
 8010e3e:	d1c7      	bne.n	8010dd0 <__sflush_r+0x34>
 8010e40:	682b      	ldr	r3, [r5, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d0c4      	beq.n	8010dd0 <__sflush_r+0x34>
 8010e46:	2b1d      	cmp	r3, #29
 8010e48:	d001      	beq.n	8010e4e <__sflush_r+0xb2>
 8010e4a:	2b16      	cmp	r3, #22
 8010e4c:	d101      	bne.n	8010e52 <__sflush_r+0xb6>
 8010e4e:	602f      	str	r7, [r5, #0]
 8010e50:	e7b1      	b.n	8010db6 <__sflush_r+0x1a>
 8010e52:	89a3      	ldrh	r3, [r4, #12]
 8010e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	e7ad      	b.n	8010db8 <__sflush_r+0x1c>
 8010e5c:	690f      	ldr	r7, [r1, #16]
 8010e5e:	2f00      	cmp	r7, #0
 8010e60:	d0a9      	beq.n	8010db6 <__sflush_r+0x1a>
 8010e62:	0793      	lsls	r3, r2, #30
 8010e64:	680e      	ldr	r6, [r1, #0]
 8010e66:	bf08      	it	eq
 8010e68:	694b      	ldreq	r3, [r1, #20]
 8010e6a:	600f      	str	r7, [r1, #0]
 8010e6c:	bf18      	it	ne
 8010e6e:	2300      	movne	r3, #0
 8010e70:	eba6 0807 	sub.w	r8, r6, r7
 8010e74:	608b      	str	r3, [r1, #8]
 8010e76:	f1b8 0f00 	cmp.w	r8, #0
 8010e7a:	dd9c      	ble.n	8010db6 <__sflush_r+0x1a>
 8010e7c:	6a21      	ldr	r1, [r4, #32]
 8010e7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e80:	4643      	mov	r3, r8
 8010e82:	463a      	mov	r2, r7
 8010e84:	4628      	mov	r0, r5
 8010e86:	47b0      	blx	r6
 8010e88:	2800      	cmp	r0, #0
 8010e8a:	dc06      	bgt.n	8010e9a <__sflush_r+0xfe>
 8010e8c:	89a3      	ldrh	r3, [r4, #12]
 8010e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e92:	81a3      	strh	r3, [r4, #12]
 8010e94:	f04f 30ff 	mov.w	r0, #4294967295
 8010e98:	e78e      	b.n	8010db8 <__sflush_r+0x1c>
 8010e9a:	4407      	add	r7, r0
 8010e9c:	eba8 0800 	sub.w	r8, r8, r0
 8010ea0:	e7e9      	b.n	8010e76 <__sflush_r+0xda>
 8010ea2:	bf00      	nop
 8010ea4:	20400001 	.word	0x20400001

08010ea8 <_fflush_r>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	690b      	ldr	r3, [r1, #16]
 8010eac:	4605      	mov	r5, r0
 8010eae:	460c      	mov	r4, r1
 8010eb0:	b913      	cbnz	r3, 8010eb8 <_fflush_r+0x10>
 8010eb2:	2500      	movs	r5, #0
 8010eb4:	4628      	mov	r0, r5
 8010eb6:	bd38      	pop	{r3, r4, r5, pc}
 8010eb8:	b118      	cbz	r0, 8010ec2 <_fflush_r+0x1a>
 8010eba:	6983      	ldr	r3, [r0, #24]
 8010ebc:	b90b      	cbnz	r3, 8010ec2 <_fflush_r+0x1a>
 8010ebe:	f000 f899 	bl	8010ff4 <__sinit>
 8010ec2:	4b14      	ldr	r3, [pc, #80]	; (8010f14 <_fflush_r+0x6c>)
 8010ec4:	429c      	cmp	r4, r3
 8010ec6:	d11b      	bne.n	8010f00 <_fflush_r+0x58>
 8010ec8:	686c      	ldr	r4, [r5, #4]
 8010eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d0ef      	beq.n	8010eb2 <_fflush_r+0xa>
 8010ed2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010ed4:	07d0      	lsls	r0, r2, #31
 8010ed6:	d404      	bmi.n	8010ee2 <_fflush_r+0x3a>
 8010ed8:	0599      	lsls	r1, r3, #22
 8010eda:	d402      	bmi.n	8010ee2 <_fflush_r+0x3a>
 8010edc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ede:	f000 fc3c 	bl	801175a <__retarget_lock_acquire_recursive>
 8010ee2:	4628      	mov	r0, r5
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	f7ff ff59 	bl	8010d9c <__sflush_r>
 8010eea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eec:	07da      	lsls	r2, r3, #31
 8010eee:	4605      	mov	r5, r0
 8010ef0:	d4e0      	bmi.n	8010eb4 <_fflush_r+0xc>
 8010ef2:	89a3      	ldrh	r3, [r4, #12]
 8010ef4:	059b      	lsls	r3, r3, #22
 8010ef6:	d4dd      	bmi.n	8010eb4 <_fflush_r+0xc>
 8010ef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010efa:	f000 fc30 	bl	801175e <__retarget_lock_release_recursive>
 8010efe:	e7d9      	b.n	8010eb4 <_fflush_r+0xc>
 8010f00:	4b05      	ldr	r3, [pc, #20]	; (8010f18 <_fflush_r+0x70>)
 8010f02:	429c      	cmp	r4, r3
 8010f04:	d101      	bne.n	8010f0a <_fflush_r+0x62>
 8010f06:	68ac      	ldr	r4, [r5, #8]
 8010f08:	e7df      	b.n	8010eca <_fflush_r+0x22>
 8010f0a:	4b04      	ldr	r3, [pc, #16]	; (8010f1c <_fflush_r+0x74>)
 8010f0c:	429c      	cmp	r4, r3
 8010f0e:	bf08      	it	eq
 8010f10:	68ec      	ldreq	r4, [r5, #12]
 8010f12:	e7da      	b.n	8010eca <_fflush_r+0x22>
 8010f14:	08016efc 	.word	0x08016efc
 8010f18:	08016f1c 	.word	0x08016f1c
 8010f1c:	08016edc 	.word	0x08016edc

08010f20 <fflush>:
 8010f20:	4601      	mov	r1, r0
 8010f22:	b920      	cbnz	r0, 8010f2e <fflush+0xe>
 8010f24:	4b04      	ldr	r3, [pc, #16]	; (8010f38 <fflush+0x18>)
 8010f26:	4905      	ldr	r1, [pc, #20]	; (8010f3c <fflush+0x1c>)
 8010f28:	6818      	ldr	r0, [r3, #0]
 8010f2a:	f000 babb 	b.w	80114a4 <_fwalk_reent>
 8010f2e:	4b04      	ldr	r3, [pc, #16]	; (8010f40 <fflush+0x20>)
 8010f30:	6818      	ldr	r0, [r3, #0]
 8010f32:	f7ff bfb9 	b.w	8010ea8 <_fflush_r>
 8010f36:	bf00      	nop
 8010f38:	08016f3c 	.word	0x08016f3c
 8010f3c:	08010ea9 	.word	0x08010ea9
 8010f40:	20000100 	.word	0x20000100

08010f44 <std>:
 8010f44:	2300      	movs	r3, #0
 8010f46:	b510      	push	{r4, lr}
 8010f48:	4604      	mov	r4, r0
 8010f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8010f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f52:	6083      	str	r3, [r0, #8]
 8010f54:	8181      	strh	r1, [r0, #12]
 8010f56:	6643      	str	r3, [r0, #100]	; 0x64
 8010f58:	81c2      	strh	r2, [r0, #14]
 8010f5a:	6183      	str	r3, [r0, #24]
 8010f5c:	4619      	mov	r1, r3
 8010f5e:	2208      	movs	r2, #8
 8010f60:	305c      	adds	r0, #92	; 0x5c
 8010f62:	f000 fc7f 	bl	8011864 <memset>
 8010f66:	4b05      	ldr	r3, [pc, #20]	; (8010f7c <std+0x38>)
 8010f68:	6263      	str	r3, [r4, #36]	; 0x24
 8010f6a:	4b05      	ldr	r3, [pc, #20]	; (8010f80 <std+0x3c>)
 8010f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010f6e:	4b05      	ldr	r3, [pc, #20]	; (8010f84 <std+0x40>)
 8010f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010f72:	4b05      	ldr	r3, [pc, #20]	; (8010f88 <std+0x44>)
 8010f74:	6224      	str	r4, [r4, #32]
 8010f76:	6323      	str	r3, [r4, #48]	; 0x30
 8010f78:	bd10      	pop	{r4, pc}
 8010f7a:	bf00      	nop
 8010f7c:	08011bad 	.word	0x08011bad
 8010f80:	08011bd3 	.word	0x08011bd3
 8010f84:	08011c0b 	.word	0x08011c0b
 8010f88:	08011c2f 	.word	0x08011c2f

08010f8c <_cleanup_r>:
 8010f8c:	4901      	ldr	r1, [pc, #4]	; (8010f94 <_cleanup_r+0x8>)
 8010f8e:	f000 ba89 	b.w	80114a4 <_fwalk_reent>
 8010f92:	bf00      	nop
 8010f94:	08010ea9 	.word	0x08010ea9

08010f98 <__sfmoreglue>:
 8010f98:	b570      	push	{r4, r5, r6, lr}
 8010f9a:	1e4a      	subs	r2, r1, #1
 8010f9c:	2568      	movs	r5, #104	; 0x68
 8010f9e:	4355      	muls	r5, r2
 8010fa0:	460e      	mov	r6, r1
 8010fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010fa6:	f000 fcb5 	bl	8011914 <_malloc_r>
 8010faa:	4604      	mov	r4, r0
 8010fac:	b140      	cbz	r0, 8010fc0 <__sfmoreglue+0x28>
 8010fae:	2100      	movs	r1, #0
 8010fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8010fb4:	300c      	adds	r0, #12
 8010fb6:	60a0      	str	r0, [r4, #8]
 8010fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010fbc:	f000 fc52 	bl	8011864 <memset>
 8010fc0:	4620      	mov	r0, r4
 8010fc2:	bd70      	pop	{r4, r5, r6, pc}

08010fc4 <__sfp_lock_acquire>:
 8010fc4:	4801      	ldr	r0, [pc, #4]	; (8010fcc <__sfp_lock_acquire+0x8>)
 8010fc6:	f000 bbc8 	b.w	801175a <__retarget_lock_acquire_recursive>
 8010fca:	bf00      	nop
 8010fcc:	20000b60 	.word	0x20000b60

08010fd0 <__sfp_lock_release>:
 8010fd0:	4801      	ldr	r0, [pc, #4]	; (8010fd8 <__sfp_lock_release+0x8>)
 8010fd2:	f000 bbc4 	b.w	801175e <__retarget_lock_release_recursive>
 8010fd6:	bf00      	nop
 8010fd8:	20000b60 	.word	0x20000b60

08010fdc <__sinit_lock_acquire>:
 8010fdc:	4801      	ldr	r0, [pc, #4]	; (8010fe4 <__sinit_lock_acquire+0x8>)
 8010fde:	f000 bbbc 	b.w	801175a <__retarget_lock_acquire_recursive>
 8010fe2:	bf00      	nop
 8010fe4:	20000b5b 	.word	0x20000b5b

08010fe8 <__sinit_lock_release>:
 8010fe8:	4801      	ldr	r0, [pc, #4]	; (8010ff0 <__sinit_lock_release+0x8>)
 8010fea:	f000 bbb8 	b.w	801175e <__retarget_lock_release_recursive>
 8010fee:	bf00      	nop
 8010ff0:	20000b5b 	.word	0x20000b5b

08010ff4 <__sinit>:
 8010ff4:	b510      	push	{r4, lr}
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	f7ff fff0 	bl	8010fdc <__sinit_lock_acquire>
 8010ffc:	69a3      	ldr	r3, [r4, #24]
 8010ffe:	b11b      	cbz	r3, 8011008 <__sinit+0x14>
 8011000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011004:	f7ff bff0 	b.w	8010fe8 <__sinit_lock_release>
 8011008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801100c:	6523      	str	r3, [r4, #80]	; 0x50
 801100e:	4b13      	ldr	r3, [pc, #76]	; (801105c <__sinit+0x68>)
 8011010:	4a13      	ldr	r2, [pc, #76]	; (8011060 <__sinit+0x6c>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	62a2      	str	r2, [r4, #40]	; 0x28
 8011016:	42a3      	cmp	r3, r4
 8011018:	bf04      	itt	eq
 801101a:	2301      	moveq	r3, #1
 801101c:	61a3      	streq	r3, [r4, #24]
 801101e:	4620      	mov	r0, r4
 8011020:	f000 f820 	bl	8011064 <__sfp>
 8011024:	6060      	str	r0, [r4, #4]
 8011026:	4620      	mov	r0, r4
 8011028:	f000 f81c 	bl	8011064 <__sfp>
 801102c:	60a0      	str	r0, [r4, #8]
 801102e:	4620      	mov	r0, r4
 8011030:	f000 f818 	bl	8011064 <__sfp>
 8011034:	2200      	movs	r2, #0
 8011036:	60e0      	str	r0, [r4, #12]
 8011038:	2104      	movs	r1, #4
 801103a:	6860      	ldr	r0, [r4, #4]
 801103c:	f7ff ff82 	bl	8010f44 <std>
 8011040:	68a0      	ldr	r0, [r4, #8]
 8011042:	2201      	movs	r2, #1
 8011044:	2109      	movs	r1, #9
 8011046:	f7ff ff7d 	bl	8010f44 <std>
 801104a:	68e0      	ldr	r0, [r4, #12]
 801104c:	2202      	movs	r2, #2
 801104e:	2112      	movs	r1, #18
 8011050:	f7ff ff78 	bl	8010f44 <std>
 8011054:	2301      	movs	r3, #1
 8011056:	61a3      	str	r3, [r4, #24]
 8011058:	e7d2      	b.n	8011000 <__sinit+0xc>
 801105a:	bf00      	nop
 801105c:	08016f3c 	.word	0x08016f3c
 8011060:	08010f8d 	.word	0x08010f8d

08011064 <__sfp>:
 8011064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011066:	4607      	mov	r7, r0
 8011068:	f7ff ffac 	bl	8010fc4 <__sfp_lock_acquire>
 801106c:	4b1e      	ldr	r3, [pc, #120]	; (80110e8 <__sfp+0x84>)
 801106e:	681e      	ldr	r6, [r3, #0]
 8011070:	69b3      	ldr	r3, [r6, #24]
 8011072:	b913      	cbnz	r3, 801107a <__sfp+0x16>
 8011074:	4630      	mov	r0, r6
 8011076:	f7ff ffbd 	bl	8010ff4 <__sinit>
 801107a:	3648      	adds	r6, #72	; 0x48
 801107c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011080:	3b01      	subs	r3, #1
 8011082:	d503      	bpl.n	801108c <__sfp+0x28>
 8011084:	6833      	ldr	r3, [r6, #0]
 8011086:	b30b      	cbz	r3, 80110cc <__sfp+0x68>
 8011088:	6836      	ldr	r6, [r6, #0]
 801108a:	e7f7      	b.n	801107c <__sfp+0x18>
 801108c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011090:	b9d5      	cbnz	r5, 80110c8 <__sfp+0x64>
 8011092:	4b16      	ldr	r3, [pc, #88]	; (80110ec <__sfp+0x88>)
 8011094:	60e3      	str	r3, [r4, #12]
 8011096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801109a:	6665      	str	r5, [r4, #100]	; 0x64
 801109c:	f000 fb5a 	bl	8011754 <__retarget_lock_init_recursive>
 80110a0:	f7ff ff96 	bl	8010fd0 <__sfp_lock_release>
 80110a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80110a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80110ac:	6025      	str	r5, [r4, #0]
 80110ae:	61a5      	str	r5, [r4, #24]
 80110b0:	2208      	movs	r2, #8
 80110b2:	4629      	mov	r1, r5
 80110b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80110b8:	f000 fbd4 	bl	8011864 <memset>
 80110bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80110c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80110c4:	4620      	mov	r0, r4
 80110c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c8:	3468      	adds	r4, #104	; 0x68
 80110ca:	e7d9      	b.n	8011080 <__sfp+0x1c>
 80110cc:	2104      	movs	r1, #4
 80110ce:	4638      	mov	r0, r7
 80110d0:	f7ff ff62 	bl	8010f98 <__sfmoreglue>
 80110d4:	4604      	mov	r4, r0
 80110d6:	6030      	str	r0, [r6, #0]
 80110d8:	2800      	cmp	r0, #0
 80110da:	d1d5      	bne.n	8011088 <__sfp+0x24>
 80110dc:	f7ff ff78 	bl	8010fd0 <__sfp_lock_release>
 80110e0:	230c      	movs	r3, #12
 80110e2:	603b      	str	r3, [r7, #0]
 80110e4:	e7ee      	b.n	80110c4 <__sfp+0x60>
 80110e6:	bf00      	nop
 80110e8:	08016f3c 	.word	0x08016f3c
 80110ec:	ffff0001 	.word	0xffff0001

080110f0 <_fopen_r>:
 80110f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80110f2:	460f      	mov	r7, r1
 80110f4:	4611      	mov	r1, r2
 80110f6:	aa01      	add	r2, sp, #4
 80110f8:	4605      	mov	r5, r0
 80110fa:	f001 ff71 	bl	8012fe0 <__sflags>
 80110fe:	4606      	mov	r6, r0
 8011100:	b918      	cbnz	r0, 801110a <_fopen_r+0x1a>
 8011102:	2400      	movs	r4, #0
 8011104:	4620      	mov	r0, r4
 8011106:	b003      	add	sp, #12
 8011108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801110a:	4628      	mov	r0, r5
 801110c:	f7ff ffaa 	bl	8011064 <__sfp>
 8011110:	4604      	mov	r4, r0
 8011112:	2800      	cmp	r0, #0
 8011114:	d0f5      	beq.n	8011102 <_fopen_r+0x12>
 8011116:	4639      	mov	r1, r7
 8011118:	9a01      	ldr	r2, [sp, #4]
 801111a:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 801111e:	4628      	mov	r0, r5
 8011120:	f000 fc52 	bl	80119c8 <_open_r>
 8011124:	1e07      	subs	r7, r0, #0
 8011126:	da09      	bge.n	801113c <_fopen_r+0x4c>
 8011128:	2500      	movs	r5, #0
 801112a:	f7ff ff4b 	bl	8010fc4 <__sfp_lock_acquire>
 801112e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011130:	81a5      	strh	r5, [r4, #12]
 8011132:	f000 fb10 	bl	8011756 <__retarget_lock_close_recursive>
 8011136:	f7ff ff4b 	bl	8010fd0 <__sfp_lock_release>
 801113a:	e7e2      	b.n	8011102 <_fopen_r+0x12>
 801113c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801113e:	07db      	lsls	r3, r3, #31
 8011140:	d405      	bmi.n	801114e <_fopen_r+0x5e>
 8011142:	89a3      	ldrh	r3, [r4, #12]
 8011144:	0598      	lsls	r0, r3, #22
 8011146:	d402      	bmi.n	801114e <_fopen_r+0x5e>
 8011148:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801114a:	f000 fb06 	bl	801175a <__retarget_lock_acquire_recursive>
 801114e:	4b0e      	ldr	r3, [pc, #56]	; (8011188 <_fopen_r+0x98>)
 8011150:	6263      	str	r3, [r4, #36]	; 0x24
 8011152:	4b0e      	ldr	r3, [pc, #56]	; (801118c <_fopen_r+0x9c>)
 8011154:	62a3      	str	r3, [r4, #40]	; 0x28
 8011156:	4b0e      	ldr	r3, [pc, #56]	; (8011190 <_fopen_r+0xa0>)
 8011158:	62e3      	str	r3, [r4, #44]	; 0x2c
 801115a:	05f1      	lsls	r1, r6, #23
 801115c:	4b0d      	ldr	r3, [pc, #52]	; (8011194 <_fopen_r+0xa4>)
 801115e:	81e7      	strh	r7, [r4, #14]
 8011160:	81a6      	strh	r6, [r4, #12]
 8011162:	6224      	str	r4, [r4, #32]
 8011164:	6323      	str	r3, [r4, #48]	; 0x30
 8011166:	d505      	bpl.n	8011174 <_fopen_r+0x84>
 8011168:	2302      	movs	r3, #2
 801116a:	2200      	movs	r2, #0
 801116c:	4621      	mov	r1, r4
 801116e:	4628      	mov	r0, r5
 8011170:	f000 f888 	bl	8011284 <_fseek_r>
 8011174:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011176:	07da      	lsls	r2, r3, #31
 8011178:	d4c4      	bmi.n	8011104 <_fopen_r+0x14>
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	059b      	lsls	r3, r3, #22
 801117e:	d4c1      	bmi.n	8011104 <_fopen_r+0x14>
 8011180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011182:	f000 faec 	bl	801175e <__retarget_lock_release_recursive>
 8011186:	e7bd      	b.n	8011104 <_fopen_r+0x14>
 8011188:	08011bad 	.word	0x08011bad
 801118c:	08011bd3 	.word	0x08011bd3
 8011190:	08011c0b 	.word	0x08011c0b
 8011194:	08011c2f 	.word	0x08011c2f

08011198 <fopen>:
 8011198:	4b02      	ldr	r3, [pc, #8]	; (80111a4 <fopen+0xc>)
 801119a:	460a      	mov	r2, r1
 801119c:	4601      	mov	r1, r0
 801119e:	6818      	ldr	r0, [r3, #0]
 80111a0:	f7ff bfa6 	b.w	80110f0 <_fopen_r>
 80111a4:	20000100 	.word	0x20000100

080111a8 <_fputs_r>:
 80111a8:	b570      	push	{r4, r5, r6, lr}
 80111aa:	460e      	mov	r6, r1
 80111ac:	4614      	mov	r4, r2
 80111ae:	4605      	mov	r5, r0
 80111b0:	b118      	cbz	r0, 80111ba <_fputs_r+0x12>
 80111b2:	6983      	ldr	r3, [r0, #24]
 80111b4:	b90b      	cbnz	r3, 80111ba <_fputs_r+0x12>
 80111b6:	f7ff ff1d 	bl	8010ff4 <__sinit>
 80111ba:	4b2b      	ldr	r3, [pc, #172]	; (8011268 <_fputs_r+0xc0>)
 80111bc:	429c      	cmp	r4, r3
 80111be:	d11e      	bne.n	80111fe <_fputs_r+0x56>
 80111c0:	686c      	ldr	r4, [r5, #4]
 80111c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111c4:	07da      	lsls	r2, r3, #31
 80111c6:	d405      	bmi.n	80111d4 <_fputs_r+0x2c>
 80111c8:	89a3      	ldrh	r3, [r4, #12]
 80111ca:	059b      	lsls	r3, r3, #22
 80111cc:	d402      	bmi.n	80111d4 <_fputs_r+0x2c>
 80111ce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111d0:	f000 fac3 	bl	801175a <__retarget_lock_acquire_recursive>
 80111d4:	89a3      	ldrh	r3, [r4, #12]
 80111d6:	0718      	lsls	r0, r3, #28
 80111d8:	d51b      	bpl.n	8011212 <_fputs_r+0x6a>
 80111da:	6923      	ldr	r3, [r4, #16]
 80111dc:	b1cb      	cbz	r3, 8011212 <_fputs_r+0x6a>
 80111de:	3e01      	subs	r6, #1
 80111e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80111e4:	bb39      	cbnz	r1, 8011236 <_fputs_r+0x8e>
 80111e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80111e8:	f015 0501 	ands.w	r5, r5, #1
 80111ec:	d139      	bne.n	8011262 <_fputs_r+0xba>
 80111ee:	89a3      	ldrh	r3, [r4, #12]
 80111f0:	0599      	lsls	r1, r3, #22
 80111f2:	d402      	bmi.n	80111fa <_fputs_r+0x52>
 80111f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111f6:	f000 fab2 	bl	801175e <__retarget_lock_release_recursive>
 80111fa:	4628      	mov	r0, r5
 80111fc:	bd70      	pop	{r4, r5, r6, pc}
 80111fe:	4b1b      	ldr	r3, [pc, #108]	; (801126c <_fputs_r+0xc4>)
 8011200:	429c      	cmp	r4, r3
 8011202:	d101      	bne.n	8011208 <_fputs_r+0x60>
 8011204:	68ac      	ldr	r4, [r5, #8]
 8011206:	e7dc      	b.n	80111c2 <_fputs_r+0x1a>
 8011208:	4b19      	ldr	r3, [pc, #100]	; (8011270 <_fputs_r+0xc8>)
 801120a:	429c      	cmp	r4, r3
 801120c:	bf08      	it	eq
 801120e:	68ec      	ldreq	r4, [r5, #12]
 8011210:	e7d7      	b.n	80111c2 <_fputs_r+0x1a>
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f001 fde1 	bl	8012ddc <__swsetup_r>
 801121a:	2800      	cmp	r0, #0
 801121c:	d0df      	beq.n	80111de <_fputs_r+0x36>
 801121e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011220:	07da      	lsls	r2, r3, #31
 8011222:	d405      	bmi.n	8011230 <_fputs_r+0x88>
 8011224:	89a3      	ldrh	r3, [r4, #12]
 8011226:	059b      	lsls	r3, r3, #22
 8011228:	d402      	bmi.n	8011230 <_fputs_r+0x88>
 801122a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801122c:	f000 fa97 	bl	801175e <__retarget_lock_release_recursive>
 8011230:	f04f 35ff 	mov.w	r5, #4294967295
 8011234:	e7e1      	b.n	80111fa <_fputs_r+0x52>
 8011236:	68a3      	ldr	r3, [r4, #8]
 8011238:	3b01      	subs	r3, #1
 801123a:	2b00      	cmp	r3, #0
 801123c:	60a3      	str	r3, [r4, #8]
 801123e:	da04      	bge.n	801124a <_fputs_r+0xa2>
 8011240:	69a2      	ldr	r2, [r4, #24]
 8011242:	4293      	cmp	r3, r2
 8011244:	db06      	blt.n	8011254 <_fputs_r+0xac>
 8011246:	290a      	cmp	r1, #10
 8011248:	d004      	beq.n	8011254 <_fputs_r+0xac>
 801124a:	6823      	ldr	r3, [r4, #0]
 801124c:	1c5a      	adds	r2, r3, #1
 801124e:	6022      	str	r2, [r4, #0]
 8011250:	7019      	strb	r1, [r3, #0]
 8011252:	e7c5      	b.n	80111e0 <_fputs_r+0x38>
 8011254:	4622      	mov	r2, r4
 8011256:	4628      	mov	r0, r5
 8011258:	f001 fd5c 	bl	8012d14 <__swbuf_r>
 801125c:	3001      	adds	r0, #1
 801125e:	d1bf      	bne.n	80111e0 <_fputs_r+0x38>
 8011260:	e7dd      	b.n	801121e <_fputs_r+0x76>
 8011262:	460d      	mov	r5, r1
 8011264:	e7c9      	b.n	80111fa <_fputs_r+0x52>
 8011266:	bf00      	nop
 8011268:	08016efc 	.word	0x08016efc
 801126c:	08016f1c 	.word	0x08016f1c
 8011270:	08016edc 	.word	0x08016edc

08011274 <fputs>:
 8011274:	4b02      	ldr	r3, [pc, #8]	; (8011280 <fputs+0xc>)
 8011276:	460a      	mov	r2, r1
 8011278:	4601      	mov	r1, r0
 801127a:	6818      	ldr	r0, [r3, #0]
 801127c:	f7ff bf94 	b.w	80111a8 <_fputs_r>
 8011280:	20000100 	.word	0x20000100

08011284 <_fseek_r>:
 8011284:	f000 b800 	b.w	8011288 <_fseeko_r>

08011288 <_fseeko_r>:
 8011288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801128c:	460c      	mov	r4, r1
 801128e:	4617      	mov	r7, r2
 8011290:	461e      	mov	r6, r3
 8011292:	4605      	mov	r5, r0
 8011294:	b118      	cbz	r0, 801129e <_fseeko_r+0x16>
 8011296:	6983      	ldr	r3, [r0, #24]
 8011298:	b90b      	cbnz	r3, 801129e <_fseeko_r+0x16>
 801129a:	f7ff feab 	bl	8010ff4 <__sinit>
 801129e:	4b44      	ldr	r3, [pc, #272]	; (80113b0 <_fseeko_r+0x128>)
 80112a0:	429c      	cmp	r4, r3
 80112a2:	d122      	bne.n	80112ea <_fseeko_r+0x62>
 80112a4:	686c      	ldr	r4, [r5, #4]
 80112a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112a8:	07d9      	lsls	r1, r3, #31
 80112aa:	d405      	bmi.n	80112b8 <_fseeko_r+0x30>
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	059a      	lsls	r2, r3, #22
 80112b0:	d402      	bmi.n	80112b8 <_fseeko_r+0x30>
 80112b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112b4:	f000 fa51 	bl	801175a <__retarget_lock_acquire_recursive>
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80112be:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80112c2:	d103      	bne.n	80112cc <_fseeko_r+0x44>
 80112c4:	4621      	mov	r1, r4
 80112c6:	4628      	mov	r0, r5
 80112c8:	f7ff fdee 	bl	8010ea8 <_fflush_r>
 80112cc:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80112d0:	f1b8 0f00 	cmp.w	r8, #0
 80112d4:	d113      	bne.n	80112fe <_fseeko_r+0x76>
 80112d6:	231d      	movs	r3, #29
 80112d8:	602b      	str	r3, [r5, #0]
 80112da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112dc:	07d9      	lsls	r1, r3, #31
 80112de:	d55d      	bpl.n	801139c <_fseeko_r+0x114>
 80112e0:	f04f 36ff 	mov.w	r6, #4294967295
 80112e4:	4630      	mov	r0, r6
 80112e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112ea:	4b32      	ldr	r3, [pc, #200]	; (80113b4 <_fseeko_r+0x12c>)
 80112ec:	429c      	cmp	r4, r3
 80112ee:	d101      	bne.n	80112f4 <_fseeko_r+0x6c>
 80112f0:	68ac      	ldr	r4, [r5, #8]
 80112f2:	e7d8      	b.n	80112a6 <_fseeko_r+0x1e>
 80112f4:	4b30      	ldr	r3, [pc, #192]	; (80113b8 <_fseeko_r+0x130>)
 80112f6:	429c      	cmp	r4, r3
 80112f8:	bf08      	it	eq
 80112fa:	68ec      	ldreq	r4, [r5, #12]
 80112fc:	e7d3      	b.n	80112a6 <_fseeko_r+0x1e>
 80112fe:	2e01      	cmp	r6, #1
 8011300:	d036      	beq.n	8011370 <_fseeko_r+0xe8>
 8011302:	f036 0302 	bics.w	r3, r6, #2
 8011306:	d147      	bne.n	8011398 <_fseeko_r+0x110>
 8011308:	6923      	ldr	r3, [r4, #16]
 801130a:	b91b      	cbnz	r3, 8011314 <_fseeko_r+0x8c>
 801130c:	4621      	mov	r1, r4
 801130e:	4628      	mov	r0, r5
 8011310:	f000 fa4a 	bl	80117a8 <__smakebuf_r>
 8011314:	4621      	mov	r1, r4
 8011316:	4628      	mov	r0, r5
 8011318:	f7ff fdc6 	bl	8010ea8 <_fflush_r>
 801131c:	2800      	cmp	r0, #0
 801131e:	d1dc      	bne.n	80112da <_fseeko_r+0x52>
 8011320:	6a21      	ldr	r1, [r4, #32]
 8011322:	4633      	mov	r3, r6
 8011324:	463a      	mov	r2, r7
 8011326:	4628      	mov	r0, r5
 8011328:	47c0      	blx	r8
 801132a:	3001      	adds	r0, #1
 801132c:	d0d5      	beq.n	80112da <_fseeko_r+0x52>
 801132e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011330:	b141      	cbz	r1, 8011344 <_fseeko_r+0xbc>
 8011332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011336:	4299      	cmp	r1, r3
 8011338:	d002      	beq.n	8011340 <_fseeko_r+0xb8>
 801133a:	4628      	mov	r0, r5
 801133c:	f000 fa9a 	bl	8011874 <_free_r>
 8011340:	2300      	movs	r3, #0
 8011342:	6363      	str	r3, [r4, #52]	; 0x34
 8011344:	6923      	ldr	r3, [r4, #16]
 8011346:	6023      	str	r3, [r4, #0]
 8011348:	89a3      	ldrh	r3, [r4, #12]
 801134a:	2500      	movs	r5, #0
 801134c:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8011350:	6065      	str	r5, [r4, #4]
 8011352:	81a3      	strh	r3, [r4, #12]
 8011354:	2208      	movs	r2, #8
 8011356:	4629      	mov	r1, r5
 8011358:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801135c:	f000 fa82 	bl	8011864 <memset>
 8011360:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8011362:	f016 0601 	ands.w	r6, r6, #1
 8011366:	d120      	bne.n	80113aa <_fseeko_r+0x122>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	059b      	lsls	r3, r3, #22
 801136c:	d4ba      	bmi.n	80112e4 <_fseeko_r+0x5c>
 801136e:	e00c      	b.n	801138a <_fseeko_r+0x102>
 8011370:	4621      	mov	r1, r4
 8011372:	4628      	mov	r0, r5
 8011374:	f000 f822 	bl	80113bc <_ftello_r>
 8011378:	1c43      	adds	r3, r0, #1
 801137a:	4606      	mov	r6, r0
 801137c:	d109      	bne.n	8011392 <_fseeko_r+0x10a>
 801137e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011380:	07dd      	lsls	r5, r3, #31
 8011382:	d4ad      	bmi.n	80112e0 <_fseeko_r+0x58>
 8011384:	89a3      	ldrh	r3, [r4, #12]
 8011386:	0598      	lsls	r0, r3, #22
 8011388:	d4aa      	bmi.n	80112e0 <_fseeko_r+0x58>
 801138a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801138c:	f000 f9e7 	bl	801175e <__retarget_lock_release_recursive>
 8011390:	e7a8      	b.n	80112e4 <_fseeko_r+0x5c>
 8011392:	4407      	add	r7, r0
 8011394:	2600      	movs	r6, #0
 8011396:	e7b7      	b.n	8011308 <_fseeko_r+0x80>
 8011398:	2316      	movs	r3, #22
 801139a:	e79d      	b.n	80112d8 <_fseeko_r+0x50>
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	059a      	lsls	r2, r3, #22
 80113a0:	d49e      	bmi.n	80112e0 <_fseeko_r+0x58>
 80113a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113a4:	f000 f9db 	bl	801175e <__retarget_lock_release_recursive>
 80113a8:	e79a      	b.n	80112e0 <_fseeko_r+0x58>
 80113aa:	462e      	mov	r6, r5
 80113ac:	e79a      	b.n	80112e4 <_fseeko_r+0x5c>
 80113ae:	bf00      	nop
 80113b0:	08016efc 	.word	0x08016efc
 80113b4:	08016f1c 	.word	0x08016f1c
 80113b8:	08016edc 	.word	0x08016edc

080113bc <_ftello_r>:
 80113bc:	b570      	push	{r4, r5, r6, lr}
 80113be:	460c      	mov	r4, r1
 80113c0:	4605      	mov	r5, r0
 80113c2:	b118      	cbz	r0, 80113cc <_ftello_r+0x10>
 80113c4:	6983      	ldr	r3, [r0, #24]
 80113c6:	b90b      	cbnz	r3, 80113cc <_ftello_r+0x10>
 80113c8:	f7ff fe14 	bl	8010ff4 <__sinit>
 80113cc:	4b32      	ldr	r3, [pc, #200]	; (8011498 <_ftello_r+0xdc>)
 80113ce:	429c      	cmp	r4, r3
 80113d0:	d114      	bne.n	80113fc <_ftello_r+0x40>
 80113d2:	686c      	ldr	r4, [r5, #4]
 80113d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113d6:	07da      	lsls	r2, r3, #31
 80113d8:	d405      	bmi.n	80113e6 <_ftello_r+0x2a>
 80113da:	89a3      	ldrh	r3, [r4, #12]
 80113dc:	059b      	lsls	r3, r3, #22
 80113de:	d402      	bmi.n	80113e6 <_ftello_r+0x2a>
 80113e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113e2:	f000 f9ba 	bl	801175a <__retarget_lock_acquire_recursive>
 80113e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113e8:	b9ce      	cbnz	r6, 801141e <_ftello_r+0x62>
 80113ea:	231d      	movs	r3, #29
 80113ec:	602b      	str	r3, [r5, #0]
 80113ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113f0:	07de      	lsls	r6, r3, #31
 80113f2:	d50d      	bpl.n	8011410 <_ftello_r+0x54>
 80113f4:	f04f 35ff 	mov.w	r5, #4294967295
 80113f8:	4628      	mov	r0, r5
 80113fa:	bd70      	pop	{r4, r5, r6, pc}
 80113fc:	4b27      	ldr	r3, [pc, #156]	; (801149c <_ftello_r+0xe0>)
 80113fe:	429c      	cmp	r4, r3
 8011400:	d101      	bne.n	8011406 <_ftello_r+0x4a>
 8011402:	68ac      	ldr	r4, [r5, #8]
 8011404:	e7e6      	b.n	80113d4 <_ftello_r+0x18>
 8011406:	4b26      	ldr	r3, [pc, #152]	; (80114a0 <_ftello_r+0xe4>)
 8011408:	429c      	cmp	r4, r3
 801140a:	bf08      	it	eq
 801140c:	68ec      	ldreq	r4, [r5, #12]
 801140e:	e7e1      	b.n	80113d4 <_ftello_r+0x18>
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	059d      	lsls	r5, r3, #22
 8011414:	d4ee      	bmi.n	80113f4 <_ftello_r+0x38>
 8011416:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011418:	f000 f9a1 	bl	801175e <__retarget_lock_release_recursive>
 801141c:	e7ea      	b.n	80113f4 <_ftello_r+0x38>
 801141e:	89a2      	ldrh	r2, [r4, #12]
 8011420:	f002 030c 	and.w	r3, r2, #12
 8011424:	2b08      	cmp	r3, #8
 8011426:	d119      	bne.n	801145c <_ftello_r+0xa0>
 8011428:	6823      	ldr	r3, [r4, #0]
 801142a:	b1bb      	cbz	r3, 801145c <_ftello_r+0xa0>
 801142c:	6921      	ldr	r1, [r4, #16]
 801142e:	1a5b      	subs	r3, r3, r1
 8011430:	2b00      	cmp	r3, #0
 8011432:	dd13      	ble.n	801145c <_ftello_r+0xa0>
 8011434:	05d0      	lsls	r0, r2, #23
 8011436:	d511      	bpl.n	801145c <_ftello_r+0xa0>
 8011438:	2302      	movs	r3, #2
 801143a:	2200      	movs	r2, #0
 801143c:	6a21      	ldr	r1, [r4, #32]
 801143e:	4628      	mov	r0, r5
 8011440:	47b0      	blx	r6
 8011442:	1c41      	adds	r1, r0, #1
 8011444:	4605      	mov	r5, r0
 8011446:	d10d      	bne.n	8011464 <_ftello_r+0xa8>
 8011448:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801144a:	07da      	lsls	r2, r3, #31
 801144c:	d4d2      	bmi.n	80113f4 <_ftello_r+0x38>
 801144e:	89a3      	ldrh	r3, [r4, #12]
 8011450:	059b      	lsls	r3, r3, #22
 8011452:	d4cf      	bmi.n	80113f4 <_ftello_r+0x38>
 8011454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011456:	f000 f982 	bl	801175e <__retarget_lock_release_recursive>
 801145a:	e7cd      	b.n	80113f8 <_ftello_r+0x3c>
 801145c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011460:	d00f      	beq.n	8011482 <_ftello_r+0xc6>
 8011462:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8011464:	89a2      	ldrh	r2, [r4, #12]
 8011466:	0756      	lsls	r6, r2, #29
 8011468:	d50d      	bpl.n	8011486 <_ftello_r+0xca>
 801146a:	6863      	ldr	r3, [r4, #4]
 801146c:	1aed      	subs	r5, r5, r3
 801146e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011470:	b10b      	cbz	r3, 8011476 <_ftello_r+0xba>
 8011472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011474:	1aed      	subs	r5, r5, r3
 8011476:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011478:	07d9      	lsls	r1, r3, #31
 801147a:	d4bd      	bmi.n	80113f8 <_ftello_r+0x3c>
 801147c:	0593      	lsls	r3, r2, #22
 801147e:	d4bb      	bmi.n	80113f8 <_ftello_r+0x3c>
 8011480:	e7e8      	b.n	8011454 <_ftello_r+0x98>
 8011482:	2301      	movs	r3, #1
 8011484:	e7da      	b.n	801143c <_ftello_r+0x80>
 8011486:	0710      	lsls	r0, r2, #28
 8011488:	d5f5      	bpl.n	8011476 <_ftello_r+0xba>
 801148a:	6823      	ldr	r3, [r4, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d0f2      	beq.n	8011476 <_ftello_r+0xba>
 8011490:	6921      	ldr	r1, [r4, #16]
 8011492:	1a5b      	subs	r3, r3, r1
 8011494:	441d      	add	r5, r3
 8011496:	e7ee      	b.n	8011476 <_ftello_r+0xba>
 8011498:	08016efc 	.word	0x08016efc
 801149c:	08016f1c 	.word	0x08016f1c
 80114a0:	08016edc 	.word	0x08016edc

080114a4 <_fwalk_reent>:
 80114a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a8:	4606      	mov	r6, r0
 80114aa:	4688      	mov	r8, r1
 80114ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114b0:	2700      	movs	r7, #0
 80114b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80114b6:	f1b9 0901 	subs.w	r9, r9, #1
 80114ba:	d505      	bpl.n	80114c8 <_fwalk_reent+0x24>
 80114bc:	6824      	ldr	r4, [r4, #0]
 80114be:	2c00      	cmp	r4, #0
 80114c0:	d1f7      	bne.n	80114b2 <_fwalk_reent+0xe>
 80114c2:	4638      	mov	r0, r7
 80114c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114c8:	89ab      	ldrh	r3, [r5, #12]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d907      	bls.n	80114de <_fwalk_reent+0x3a>
 80114ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114d2:	3301      	adds	r3, #1
 80114d4:	d003      	beq.n	80114de <_fwalk_reent+0x3a>
 80114d6:	4629      	mov	r1, r5
 80114d8:	4630      	mov	r0, r6
 80114da:	47c0      	blx	r8
 80114dc:	4307      	orrs	r7, r0
 80114de:	3568      	adds	r5, #104	; 0x68
 80114e0:	e7e9      	b.n	80114b6 <_fwalk_reent+0x12>
	...

080114e4 <__libc_init_array>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	4d0d      	ldr	r5, [pc, #52]	; (801151c <__libc_init_array+0x38>)
 80114e8:	4c0d      	ldr	r4, [pc, #52]	; (8011520 <__libc_init_array+0x3c>)
 80114ea:	1b64      	subs	r4, r4, r5
 80114ec:	10a4      	asrs	r4, r4, #2
 80114ee:	2600      	movs	r6, #0
 80114f0:	42a6      	cmp	r6, r4
 80114f2:	d109      	bne.n	8011508 <__libc_init_array+0x24>
 80114f4:	4d0b      	ldr	r5, [pc, #44]	; (8011524 <__libc_init_array+0x40>)
 80114f6:	4c0c      	ldr	r4, [pc, #48]	; (8011528 <__libc_init_array+0x44>)
 80114f8:	f003 f8b8 	bl	801466c <_init>
 80114fc:	1b64      	subs	r4, r4, r5
 80114fe:	10a4      	asrs	r4, r4, #2
 8011500:	2600      	movs	r6, #0
 8011502:	42a6      	cmp	r6, r4
 8011504:	d105      	bne.n	8011512 <__libc_init_array+0x2e>
 8011506:	bd70      	pop	{r4, r5, r6, pc}
 8011508:	f855 3b04 	ldr.w	r3, [r5], #4
 801150c:	4798      	blx	r3
 801150e:	3601      	adds	r6, #1
 8011510:	e7ee      	b.n	80114f0 <__libc_init_array+0xc>
 8011512:	f855 3b04 	ldr.w	r3, [r5], #4
 8011516:	4798      	blx	r3
 8011518:	3601      	adds	r6, #1
 801151a:	e7f2      	b.n	8011502 <__libc_init_array+0x1e>
 801151c:	080174d4 	.word	0x080174d4
 8011520:	080174d4 	.word	0x080174d4
 8011524:	080174d4 	.word	0x080174d4
 8011528:	080174dc 	.word	0x080174dc

0801152c <localtime>:
 801152c:	b538      	push	{r3, r4, r5, lr}
 801152e:	4b0b      	ldr	r3, [pc, #44]	; (801155c <localtime+0x30>)
 8011530:	681d      	ldr	r5, [r3, #0]
 8011532:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011534:	4604      	mov	r4, r0
 8011536:	b953      	cbnz	r3, 801154e <localtime+0x22>
 8011538:	2024      	movs	r0, #36	; 0x24
 801153a:	f000 f975 	bl	8011828 <malloc>
 801153e:	4602      	mov	r2, r0
 8011540:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011542:	b920      	cbnz	r0, 801154e <localtime+0x22>
 8011544:	4b06      	ldr	r3, [pc, #24]	; (8011560 <localtime+0x34>)
 8011546:	4807      	ldr	r0, [pc, #28]	; (8011564 <localtime+0x38>)
 8011548:	2132      	movs	r1, #50	; 0x32
 801154a:	f001 fd1b 	bl	8012f84 <__assert_func>
 801154e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011550:	4620      	mov	r0, r4
 8011552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011556:	f000 b807 	b.w	8011568 <localtime_r>
 801155a:	bf00      	nop
 801155c:	20000100 	.word	0x20000100
 8011560:	08016f40 	.word	0x08016f40
 8011564:	08016f57 	.word	0x08016f57

08011568 <localtime_r>:
 8011568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801156c:	4607      	mov	r7, r0
 801156e:	9101      	str	r1, [sp, #4]
 8011570:	f001 fde4 	bl	801313c <__gettzinfo>
 8011574:	9901      	ldr	r1, [sp, #4]
 8011576:	4680      	mov	r8, r0
 8011578:	4638      	mov	r0, r7
 801157a:	f001 fde3 	bl	8013144 <gmtime_r>
 801157e:	6943      	ldr	r3, [r0, #20]
 8011580:	079a      	lsls	r2, r3, #30
 8011582:	4604      	mov	r4, r0
 8011584:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8011588:	d105      	bne.n	8011596 <localtime_r+0x2e>
 801158a:	2264      	movs	r2, #100	; 0x64
 801158c:	fb96 f3f2 	sdiv	r3, r6, r2
 8011590:	fb02 6313 	mls	r3, r2, r3, r6
 8011594:	bb7b      	cbnz	r3, 80115f6 <localtime_r+0x8e>
 8011596:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801159a:	fb96 f5f3 	sdiv	r5, r6, r3
 801159e:	fb03 6515 	mls	r5, r3, r5, r6
 80115a2:	fab5 f585 	clz	r5, r5
 80115a6:	096d      	lsrs	r5, r5, #5
 80115a8:	4b68      	ldr	r3, [pc, #416]	; (801174c <localtime_r+0x1e4>)
 80115aa:	2230      	movs	r2, #48	; 0x30
 80115ac:	fb02 3505 	mla	r5, r2, r5, r3
 80115b0:	f001 f9e8 	bl	8012984 <__tz_lock>
 80115b4:	f001 f9f2 	bl	801299c <_tzset_unlocked>
 80115b8:	4b65      	ldr	r3, [pc, #404]	; (8011750 <localtime_r+0x1e8>)
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	b353      	cbz	r3, 8011614 <localtime_r+0xac>
 80115be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80115c2:	42b3      	cmp	r3, r6
 80115c4:	d119      	bne.n	80115fa <localtime_r+0x92>
 80115c6:	f8d8 1000 	ldr.w	r1, [r8]
 80115ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80115ce:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 80115d2:	b9d1      	cbnz	r1, 801160a <localtime_r+0xa2>
 80115d4:	4296      	cmp	r6, r2
 80115d6:	eb77 0303 	sbcs.w	r3, r7, r3
 80115da:	da23      	bge.n	8011624 <localtime_r+0xbc>
 80115dc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80115e0:	4296      	cmp	r6, r2
 80115e2:	eb77 0303 	sbcs.w	r3, r7, r3
 80115e6:	bfb4      	ite	lt
 80115e8:	2301      	movlt	r3, #1
 80115ea:	2300      	movge	r3, #0
 80115ec:	6223      	str	r3, [r4, #32]
 80115ee:	db1b      	blt.n	8011628 <localtime_r+0xc0>
 80115f0:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80115f4:	e01a      	b.n	801162c <localtime_r+0xc4>
 80115f6:	2501      	movs	r5, #1
 80115f8:	e7d6      	b.n	80115a8 <localtime_r+0x40>
 80115fa:	4630      	mov	r0, r6
 80115fc:	f001 f91a 	bl	8012834 <__tzcalc_limits>
 8011600:	2800      	cmp	r0, #0
 8011602:	d1e0      	bne.n	80115c6 <localtime_r+0x5e>
 8011604:	f04f 33ff 	mov.w	r3, #4294967295
 8011608:	e004      	b.n	8011614 <localtime_r+0xac>
 801160a:	4296      	cmp	r6, r2
 801160c:	eb77 0303 	sbcs.w	r3, r7, r3
 8011610:	da02      	bge.n	8011618 <localtime_r+0xb0>
 8011612:	2300      	movs	r3, #0
 8011614:	6223      	str	r3, [r4, #32]
 8011616:	e7eb      	b.n	80115f0 <localtime_r+0x88>
 8011618:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 801161c:	4296      	cmp	r6, r2
 801161e:	eb77 0303 	sbcs.w	r3, r7, r3
 8011622:	daf6      	bge.n	8011612 <localtime_r+0xaa>
 8011624:	2301      	movs	r3, #1
 8011626:	6223      	str	r3, [r4, #32]
 8011628:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 801162c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8011630:	203c      	movs	r0, #60	; 0x3c
 8011632:	fb91 f6f3 	sdiv	r6, r1, r3
 8011636:	fb03 1316 	mls	r3, r3, r6, r1
 801163a:	6861      	ldr	r1, [r4, #4]
 801163c:	fb93 f2f0 	sdiv	r2, r3, r0
 8011640:	fb00 3012 	mls	r0, r0, r2, r3
 8011644:	6823      	ldr	r3, [r4, #0]
 8011646:	1a89      	subs	r1, r1, r2
 8011648:	68a2      	ldr	r2, [r4, #8]
 801164a:	6061      	str	r1, [r4, #4]
 801164c:	1a1b      	subs	r3, r3, r0
 801164e:	1b92      	subs	r2, r2, r6
 8011650:	2b3b      	cmp	r3, #59	; 0x3b
 8011652:	6023      	str	r3, [r4, #0]
 8011654:	60a2      	str	r2, [r4, #8]
 8011656:	dd35      	ble.n	80116c4 <localtime_r+0x15c>
 8011658:	3101      	adds	r1, #1
 801165a:	6061      	str	r1, [r4, #4]
 801165c:	3b3c      	subs	r3, #60	; 0x3c
 801165e:	6023      	str	r3, [r4, #0]
 8011660:	6863      	ldr	r3, [r4, #4]
 8011662:	2b3b      	cmp	r3, #59	; 0x3b
 8011664:	dd34      	ble.n	80116d0 <localtime_r+0x168>
 8011666:	3201      	adds	r2, #1
 8011668:	60a2      	str	r2, [r4, #8]
 801166a:	3b3c      	subs	r3, #60	; 0x3c
 801166c:	6063      	str	r3, [r4, #4]
 801166e:	68a3      	ldr	r3, [r4, #8]
 8011670:	2b17      	cmp	r3, #23
 8011672:	dd33      	ble.n	80116dc <localtime_r+0x174>
 8011674:	69e2      	ldr	r2, [r4, #28]
 8011676:	3201      	adds	r2, #1
 8011678:	61e2      	str	r2, [r4, #28]
 801167a:	69a2      	ldr	r2, [r4, #24]
 801167c:	3201      	adds	r2, #1
 801167e:	2a06      	cmp	r2, #6
 8011680:	bfc8      	it	gt
 8011682:	2200      	movgt	r2, #0
 8011684:	61a2      	str	r2, [r4, #24]
 8011686:	68e2      	ldr	r2, [r4, #12]
 8011688:	3b18      	subs	r3, #24
 801168a:	3201      	adds	r2, #1
 801168c:	60a3      	str	r3, [r4, #8]
 801168e:	6923      	ldr	r3, [r4, #16]
 8011690:	60e2      	str	r2, [r4, #12]
 8011692:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8011696:	428a      	cmp	r2, r1
 8011698:	dd0e      	ble.n	80116b8 <localtime_r+0x150>
 801169a:	2b0b      	cmp	r3, #11
 801169c:	eba2 0201 	sub.w	r2, r2, r1
 80116a0:	60e2      	str	r2, [r4, #12]
 80116a2:	f103 0201 	add.w	r2, r3, #1
 80116a6:	bf09      	itett	eq
 80116a8:	6963      	ldreq	r3, [r4, #20]
 80116aa:	6122      	strne	r2, [r4, #16]
 80116ac:	2200      	moveq	r2, #0
 80116ae:	3301      	addeq	r3, #1
 80116b0:	bf02      	ittt	eq
 80116b2:	6122      	streq	r2, [r4, #16]
 80116b4:	6163      	streq	r3, [r4, #20]
 80116b6:	61e2      	streq	r2, [r4, #28]
 80116b8:	f001 f96a 	bl	8012990 <__tz_unlock>
 80116bc:	4620      	mov	r0, r4
 80116be:	b002      	add	sp, #8
 80116c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	dacb      	bge.n	8011660 <localtime_r+0xf8>
 80116c8:	3901      	subs	r1, #1
 80116ca:	6061      	str	r1, [r4, #4]
 80116cc:	333c      	adds	r3, #60	; 0x3c
 80116ce:	e7c6      	b.n	801165e <localtime_r+0xf6>
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	dacc      	bge.n	801166e <localtime_r+0x106>
 80116d4:	3a01      	subs	r2, #1
 80116d6:	60a2      	str	r2, [r4, #8]
 80116d8:	333c      	adds	r3, #60	; 0x3c
 80116da:	e7c7      	b.n	801166c <localtime_r+0x104>
 80116dc:	2b00      	cmp	r3, #0
 80116de:	daeb      	bge.n	80116b8 <localtime_r+0x150>
 80116e0:	69e2      	ldr	r2, [r4, #28]
 80116e2:	3a01      	subs	r2, #1
 80116e4:	61e2      	str	r2, [r4, #28]
 80116e6:	69a2      	ldr	r2, [r4, #24]
 80116e8:	3a01      	subs	r2, #1
 80116ea:	bf48      	it	mi
 80116ec:	2206      	movmi	r2, #6
 80116ee:	61a2      	str	r2, [r4, #24]
 80116f0:	68e2      	ldr	r2, [r4, #12]
 80116f2:	3318      	adds	r3, #24
 80116f4:	3a01      	subs	r2, #1
 80116f6:	60e2      	str	r2, [r4, #12]
 80116f8:	60a3      	str	r3, [r4, #8]
 80116fa:	2a00      	cmp	r2, #0
 80116fc:	d1dc      	bne.n	80116b8 <localtime_r+0x150>
 80116fe:	6923      	ldr	r3, [r4, #16]
 8011700:	3b01      	subs	r3, #1
 8011702:	d405      	bmi.n	8011710 <localtime_r+0x1a8>
 8011704:	6123      	str	r3, [r4, #16]
 8011706:	6923      	ldr	r3, [r4, #16]
 8011708:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801170c:	60e3      	str	r3, [r4, #12]
 801170e:	e7d3      	b.n	80116b8 <localtime_r+0x150>
 8011710:	230b      	movs	r3, #11
 8011712:	6123      	str	r3, [r4, #16]
 8011714:	6963      	ldr	r3, [r4, #20]
 8011716:	1e5a      	subs	r2, r3, #1
 8011718:	6162      	str	r2, [r4, #20]
 801171a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 801171e:	0793      	lsls	r3, r2, #30
 8011720:	d105      	bne.n	801172e <localtime_r+0x1c6>
 8011722:	2164      	movs	r1, #100	; 0x64
 8011724:	fb92 f3f1 	sdiv	r3, r2, r1
 8011728:	fb01 2313 	mls	r3, r1, r3, r2
 801172c:	b963      	cbnz	r3, 8011748 <localtime_r+0x1e0>
 801172e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011732:	fb92 f3f1 	sdiv	r3, r2, r1
 8011736:	fb01 2313 	mls	r3, r1, r3, r2
 801173a:	fab3 f383 	clz	r3, r3
 801173e:	095b      	lsrs	r3, r3, #5
 8011740:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8011744:	61e3      	str	r3, [r4, #28]
 8011746:	e7de      	b.n	8011706 <localtime_r+0x19e>
 8011748:	2301      	movs	r3, #1
 801174a:	e7f9      	b.n	8011740 <localtime_r+0x1d8>
 801174c:	08016fb8 	.word	0x08016fb8
 8011750:	20000abc 	.word	0x20000abc

08011754 <__retarget_lock_init_recursive>:
 8011754:	4770      	bx	lr

08011756 <__retarget_lock_close_recursive>:
 8011756:	4770      	bx	lr

08011758 <__retarget_lock_acquire>:
 8011758:	4770      	bx	lr

0801175a <__retarget_lock_acquire_recursive>:
 801175a:	4770      	bx	lr

0801175c <__retarget_lock_release>:
 801175c:	4770      	bx	lr

0801175e <__retarget_lock_release_recursive>:
 801175e:	4770      	bx	lr

08011760 <__swhatbuf_r>:
 8011760:	b570      	push	{r4, r5, r6, lr}
 8011762:	460e      	mov	r6, r1
 8011764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011768:	2900      	cmp	r1, #0
 801176a:	b096      	sub	sp, #88	; 0x58
 801176c:	4614      	mov	r4, r2
 801176e:	461d      	mov	r5, r3
 8011770:	da07      	bge.n	8011782 <__swhatbuf_r+0x22>
 8011772:	2300      	movs	r3, #0
 8011774:	602b      	str	r3, [r5, #0]
 8011776:	89b3      	ldrh	r3, [r6, #12]
 8011778:	061a      	lsls	r2, r3, #24
 801177a:	d410      	bmi.n	801179e <__swhatbuf_r+0x3e>
 801177c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011780:	e00e      	b.n	80117a0 <__swhatbuf_r+0x40>
 8011782:	466a      	mov	r2, sp
 8011784:	f001 fc74 	bl	8013070 <_fstat_r>
 8011788:	2800      	cmp	r0, #0
 801178a:	dbf2      	blt.n	8011772 <__swhatbuf_r+0x12>
 801178c:	9a01      	ldr	r2, [sp, #4]
 801178e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011792:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011796:	425a      	negs	r2, r3
 8011798:	415a      	adcs	r2, r3
 801179a:	602a      	str	r2, [r5, #0]
 801179c:	e7ee      	b.n	801177c <__swhatbuf_r+0x1c>
 801179e:	2340      	movs	r3, #64	; 0x40
 80117a0:	2000      	movs	r0, #0
 80117a2:	6023      	str	r3, [r4, #0]
 80117a4:	b016      	add	sp, #88	; 0x58
 80117a6:	bd70      	pop	{r4, r5, r6, pc}

080117a8 <__smakebuf_r>:
 80117a8:	898b      	ldrh	r3, [r1, #12]
 80117aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117ac:	079d      	lsls	r5, r3, #30
 80117ae:	4606      	mov	r6, r0
 80117b0:	460c      	mov	r4, r1
 80117b2:	d507      	bpl.n	80117c4 <__smakebuf_r+0x1c>
 80117b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117b8:	6023      	str	r3, [r4, #0]
 80117ba:	6123      	str	r3, [r4, #16]
 80117bc:	2301      	movs	r3, #1
 80117be:	6163      	str	r3, [r4, #20]
 80117c0:	b002      	add	sp, #8
 80117c2:	bd70      	pop	{r4, r5, r6, pc}
 80117c4:	ab01      	add	r3, sp, #4
 80117c6:	466a      	mov	r2, sp
 80117c8:	f7ff ffca 	bl	8011760 <__swhatbuf_r>
 80117cc:	9900      	ldr	r1, [sp, #0]
 80117ce:	4605      	mov	r5, r0
 80117d0:	4630      	mov	r0, r6
 80117d2:	f000 f89f 	bl	8011914 <_malloc_r>
 80117d6:	b948      	cbnz	r0, 80117ec <__smakebuf_r+0x44>
 80117d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117dc:	059a      	lsls	r2, r3, #22
 80117de:	d4ef      	bmi.n	80117c0 <__smakebuf_r+0x18>
 80117e0:	f023 0303 	bic.w	r3, r3, #3
 80117e4:	f043 0302 	orr.w	r3, r3, #2
 80117e8:	81a3      	strh	r3, [r4, #12]
 80117ea:	e7e3      	b.n	80117b4 <__smakebuf_r+0xc>
 80117ec:	4b0d      	ldr	r3, [pc, #52]	; (8011824 <__smakebuf_r+0x7c>)
 80117ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80117f0:	89a3      	ldrh	r3, [r4, #12]
 80117f2:	6020      	str	r0, [r4, #0]
 80117f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80117f8:	81a3      	strh	r3, [r4, #12]
 80117fa:	9b00      	ldr	r3, [sp, #0]
 80117fc:	6163      	str	r3, [r4, #20]
 80117fe:	9b01      	ldr	r3, [sp, #4]
 8011800:	6120      	str	r0, [r4, #16]
 8011802:	b15b      	cbz	r3, 801181c <__smakebuf_r+0x74>
 8011804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011808:	4630      	mov	r0, r6
 801180a:	f001 fd4b 	bl	80132a4 <_isatty_r>
 801180e:	b128      	cbz	r0, 801181c <__smakebuf_r+0x74>
 8011810:	89a3      	ldrh	r3, [r4, #12]
 8011812:	f023 0303 	bic.w	r3, r3, #3
 8011816:	f043 0301 	orr.w	r3, r3, #1
 801181a:	81a3      	strh	r3, [r4, #12]
 801181c:	89a0      	ldrh	r0, [r4, #12]
 801181e:	4305      	orrs	r5, r0
 8011820:	81a5      	strh	r5, [r4, #12]
 8011822:	e7cd      	b.n	80117c0 <__smakebuf_r+0x18>
 8011824:	08010f8d 	.word	0x08010f8d

08011828 <malloc>:
 8011828:	4b02      	ldr	r3, [pc, #8]	; (8011834 <malloc+0xc>)
 801182a:	4601      	mov	r1, r0
 801182c:	6818      	ldr	r0, [r3, #0]
 801182e:	f000 b871 	b.w	8011914 <_malloc_r>
 8011832:	bf00      	nop
 8011834:	20000100 	.word	0x20000100

08011838 <free>:
 8011838:	4b02      	ldr	r3, [pc, #8]	; (8011844 <free+0xc>)
 801183a:	4601      	mov	r1, r0
 801183c:	6818      	ldr	r0, [r3, #0]
 801183e:	f000 b819 	b.w	8011874 <_free_r>
 8011842:	bf00      	nop
 8011844:	20000100 	.word	0x20000100

08011848 <memcpy>:
 8011848:	440a      	add	r2, r1
 801184a:	4291      	cmp	r1, r2
 801184c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011850:	d100      	bne.n	8011854 <memcpy+0xc>
 8011852:	4770      	bx	lr
 8011854:	b510      	push	{r4, lr}
 8011856:	f811 4b01 	ldrb.w	r4, [r1], #1
 801185a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801185e:	4291      	cmp	r1, r2
 8011860:	d1f9      	bne.n	8011856 <memcpy+0xe>
 8011862:	bd10      	pop	{r4, pc}

08011864 <memset>:
 8011864:	4402      	add	r2, r0
 8011866:	4603      	mov	r3, r0
 8011868:	4293      	cmp	r3, r2
 801186a:	d100      	bne.n	801186e <memset+0xa>
 801186c:	4770      	bx	lr
 801186e:	f803 1b01 	strb.w	r1, [r3], #1
 8011872:	e7f9      	b.n	8011868 <memset+0x4>

08011874 <_free_r>:
 8011874:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011876:	2900      	cmp	r1, #0
 8011878:	d048      	beq.n	801190c <_free_r+0x98>
 801187a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801187e:	9001      	str	r0, [sp, #4]
 8011880:	2b00      	cmp	r3, #0
 8011882:	f1a1 0404 	sub.w	r4, r1, #4
 8011886:	bfb8      	it	lt
 8011888:	18e4      	addlt	r4, r4, r3
 801188a:	f001 fd43 	bl	8013314 <__malloc_lock>
 801188e:	4a20      	ldr	r2, [pc, #128]	; (8011910 <_free_r+0x9c>)
 8011890:	9801      	ldr	r0, [sp, #4]
 8011892:	6813      	ldr	r3, [r2, #0]
 8011894:	4615      	mov	r5, r2
 8011896:	b933      	cbnz	r3, 80118a6 <_free_r+0x32>
 8011898:	6063      	str	r3, [r4, #4]
 801189a:	6014      	str	r4, [r2, #0]
 801189c:	b003      	add	sp, #12
 801189e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80118a2:	f001 bd3d 	b.w	8013320 <__malloc_unlock>
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	d90b      	bls.n	80118c2 <_free_r+0x4e>
 80118aa:	6821      	ldr	r1, [r4, #0]
 80118ac:	1862      	adds	r2, r4, r1
 80118ae:	4293      	cmp	r3, r2
 80118b0:	bf04      	itt	eq
 80118b2:	681a      	ldreq	r2, [r3, #0]
 80118b4:	685b      	ldreq	r3, [r3, #4]
 80118b6:	6063      	str	r3, [r4, #4]
 80118b8:	bf04      	itt	eq
 80118ba:	1852      	addeq	r2, r2, r1
 80118bc:	6022      	streq	r2, [r4, #0]
 80118be:	602c      	str	r4, [r5, #0]
 80118c0:	e7ec      	b.n	801189c <_free_r+0x28>
 80118c2:	461a      	mov	r2, r3
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	b10b      	cbz	r3, 80118cc <_free_r+0x58>
 80118c8:	42a3      	cmp	r3, r4
 80118ca:	d9fa      	bls.n	80118c2 <_free_r+0x4e>
 80118cc:	6811      	ldr	r1, [r2, #0]
 80118ce:	1855      	adds	r5, r2, r1
 80118d0:	42a5      	cmp	r5, r4
 80118d2:	d10b      	bne.n	80118ec <_free_r+0x78>
 80118d4:	6824      	ldr	r4, [r4, #0]
 80118d6:	4421      	add	r1, r4
 80118d8:	1854      	adds	r4, r2, r1
 80118da:	42a3      	cmp	r3, r4
 80118dc:	6011      	str	r1, [r2, #0]
 80118de:	d1dd      	bne.n	801189c <_free_r+0x28>
 80118e0:	681c      	ldr	r4, [r3, #0]
 80118e2:	685b      	ldr	r3, [r3, #4]
 80118e4:	6053      	str	r3, [r2, #4]
 80118e6:	4421      	add	r1, r4
 80118e8:	6011      	str	r1, [r2, #0]
 80118ea:	e7d7      	b.n	801189c <_free_r+0x28>
 80118ec:	d902      	bls.n	80118f4 <_free_r+0x80>
 80118ee:	230c      	movs	r3, #12
 80118f0:	6003      	str	r3, [r0, #0]
 80118f2:	e7d3      	b.n	801189c <_free_r+0x28>
 80118f4:	6825      	ldr	r5, [r4, #0]
 80118f6:	1961      	adds	r1, r4, r5
 80118f8:	428b      	cmp	r3, r1
 80118fa:	bf04      	itt	eq
 80118fc:	6819      	ldreq	r1, [r3, #0]
 80118fe:	685b      	ldreq	r3, [r3, #4]
 8011900:	6063      	str	r3, [r4, #4]
 8011902:	bf04      	itt	eq
 8011904:	1949      	addeq	r1, r1, r5
 8011906:	6021      	streq	r1, [r4, #0]
 8011908:	6054      	str	r4, [r2, #4]
 801190a:	e7c7      	b.n	801189c <_free_r+0x28>
 801190c:	b003      	add	sp, #12
 801190e:	bd30      	pop	{r4, r5, pc}
 8011910:	20000a98 	.word	0x20000a98

08011914 <_malloc_r>:
 8011914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011916:	1ccd      	adds	r5, r1, #3
 8011918:	f025 0503 	bic.w	r5, r5, #3
 801191c:	3508      	adds	r5, #8
 801191e:	2d0c      	cmp	r5, #12
 8011920:	bf38      	it	cc
 8011922:	250c      	movcc	r5, #12
 8011924:	2d00      	cmp	r5, #0
 8011926:	4606      	mov	r6, r0
 8011928:	db01      	blt.n	801192e <_malloc_r+0x1a>
 801192a:	42a9      	cmp	r1, r5
 801192c:	d903      	bls.n	8011936 <_malloc_r+0x22>
 801192e:	230c      	movs	r3, #12
 8011930:	6033      	str	r3, [r6, #0]
 8011932:	2000      	movs	r0, #0
 8011934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011936:	f001 fced 	bl	8013314 <__malloc_lock>
 801193a:	4921      	ldr	r1, [pc, #132]	; (80119c0 <_malloc_r+0xac>)
 801193c:	680a      	ldr	r2, [r1, #0]
 801193e:	4614      	mov	r4, r2
 8011940:	b99c      	cbnz	r4, 801196a <_malloc_r+0x56>
 8011942:	4f20      	ldr	r7, [pc, #128]	; (80119c4 <_malloc_r+0xb0>)
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	b923      	cbnz	r3, 8011952 <_malloc_r+0x3e>
 8011948:	4621      	mov	r1, r4
 801194a:	4630      	mov	r0, r6
 801194c:	f000 f8da 	bl	8011b04 <_sbrk_r>
 8011950:	6038      	str	r0, [r7, #0]
 8011952:	4629      	mov	r1, r5
 8011954:	4630      	mov	r0, r6
 8011956:	f000 f8d5 	bl	8011b04 <_sbrk_r>
 801195a:	1c43      	adds	r3, r0, #1
 801195c:	d123      	bne.n	80119a6 <_malloc_r+0x92>
 801195e:	230c      	movs	r3, #12
 8011960:	6033      	str	r3, [r6, #0]
 8011962:	4630      	mov	r0, r6
 8011964:	f001 fcdc 	bl	8013320 <__malloc_unlock>
 8011968:	e7e3      	b.n	8011932 <_malloc_r+0x1e>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	1b5b      	subs	r3, r3, r5
 801196e:	d417      	bmi.n	80119a0 <_malloc_r+0x8c>
 8011970:	2b0b      	cmp	r3, #11
 8011972:	d903      	bls.n	801197c <_malloc_r+0x68>
 8011974:	6023      	str	r3, [r4, #0]
 8011976:	441c      	add	r4, r3
 8011978:	6025      	str	r5, [r4, #0]
 801197a:	e004      	b.n	8011986 <_malloc_r+0x72>
 801197c:	6863      	ldr	r3, [r4, #4]
 801197e:	42a2      	cmp	r2, r4
 8011980:	bf0c      	ite	eq
 8011982:	600b      	streq	r3, [r1, #0]
 8011984:	6053      	strne	r3, [r2, #4]
 8011986:	4630      	mov	r0, r6
 8011988:	f001 fcca 	bl	8013320 <__malloc_unlock>
 801198c:	f104 000b 	add.w	r0, r4, #11
 8011990:	1d23      	adds	r3, r4, #4
 8011992:	f020 0007 	bic.w	r0, r0, #7
 8011996:	1ac2      	subs	r2, r0, r3
 8011998:	d0cc      	beq.n	8011934 <_malloc_r+0x20>
 801199a:	1a1b      	subs	r3, r3, r0
 801199c:	50a3      	str	r3, [r4, r2]
 801199e:	e7c9      	b.n	8011934 <_malloc_r+0x20>
 80119a0:	4622      	mov	r2, r4
 80119a2:	6864      	ldr	r4, [r4, #4]
 80119a4:	e7cc      	b.n	8011940 <_malloc_r+0x2c>
 80119a6:	1cc4      	adds	r4, r0, #3
 80119a8:	f024 0403 	bic.w	r4, r4, #3
 80119ac:	42a0      	cmp	r0, r4
 80119ae:	d0e3      	beq.n	8011978 <_malloc_r+0x64>
 80119b0:	1a21      	subs	r1, r4, r0
 80119b2:	4630      	mov	r0, r6
 80119b4:	f000 f8a6 	bl	8011b04 <_sbrk_r>
 80119b8:	3001      	adds	r0, #1
 80119ba:	d1dd      	bne.n	8011978 <_malloc_r+0x64>
 80119bc:	e7cf      	b.n	801195e <_malloc_r+0x4a>
 80119be:	bf00      	nop
 80119c0:	20000a98 	.word	0x20000a98
 80119c4:	20000a9c 	.word	0x20000a9c

080119c8 <_open_r>:
 80119c8:	b538      	push	{r3, r4, r5, lr}
 80119ca:	4d07      	ldr	r5, [pc, #28]	; (80119e8 <_open_r+0x20>)
 80119cc:	4604      	mov	r4, r0
 80119ce:	4608      	mov	r0, r1
 80119d0:	4611      	mov	r1, r2
 80119d2:	2200      	movs	r2, #0
 80119d4:	602a      	str	r2, [r5, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	f7ef fa4a 	bl	8000e70 <_open>
 80119dc:	1c43      	adds	r3, r0, #1
 80119de:	d102      	bne.n	80119e6 <_open_r+0x1e>
 80119e0:	682b      	ldr	r3, [r5, #0]
 80119e2:	b103      	cbz	r3, 80119e6 <_open_r+0x1e>
 80119e4:	6023      	str	r3, [r4, #0]
 80119e6:	bd38      	pop	{r3, r4, r5, pc}
 80119e8:	20000b64 	.word	0x20000b64

080119ec <putchar>:
 80119ec:	4b09      	ldr	r3, [pc, #36]	; (8011a14 <putchar+0x28>)
 80119ee:	b513      	push	{r0, r1, r4, lr}
 80119f0:	681c      	ldr	r4, [r3, #0]
 80119f2:	4601      	mov	r1, r0
 80119f4:	b134      	cbz	r4, 8011a04 <putchar+0x18>
 80119f6:	69a3      	ldr	r3, [r4, #24]
 80119f8:	b923      	cbnz	r3, 8011a04 <putchar+0x18>
 80119fa:	9001      	str	r0, [sp, #4]
 80119fc:	4620      	mov	r0, r4
 80119fe:	f7ff faf9 	bl	8010ff4 <__sinit>
 8011a02:	9901      	ldr	r1, [sp, #4]
 8011a04:	68a2      	ldr	r2, [r4, #8]
 8011a06:	4620      	mov	r0, r4
 8011a08:	b002      	add	sp, #8
 8011a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a0e:	f002 b8fd 	b.w	8013c0c <_putc_r>
 8011a12:	bf00      	nop
 8011a14:	20000100 	.word	0x20000100

08011a18 <srand>:
 8011a18:	b538      	push	{r3, r4, r5, lr}
 8011a1a:	4b10      	ldr	r3, [pc, #64]	; (8011a5c <srand+0x44>)
 8011a1c:	681d      	ldr	r5, [r3, #0]
 8011a1e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011a20:	4604      	mov	r4, r0
 8011a22:	b9b3      	cbnz	r3, 8011a52 <srand+0x3a>
 8011a24:	2018      	movs	r0, #24
 8011a26:	f7ff feff 	bl	8011828 <malloc>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	63a8      	str	r0, [r5, #56]	; 0x38
 8011a2e:	b920      	cbnz	r0, 8011a3a <srand+0x22>
 8011a30:	4b0b      	ldr	r3, [pc, #44]	; (8011a60 <srand+0x48>)
 8011a32:	480c      	ldr	r0, [pc, #48]	; (8011a64 <srand+0x4c>)
 8011a34:	2142      	movs	r1, #66	; 0x42
 8011a36:	f001 faa5 	bl	8012f84 <__assert_func>
 8011a3a:	490b      	ldr	r1, [pc, #44]	; (8011a68 <srand+0x50>)
 8011a3c:	4b0b      	ldr	r3, [pc, #44]	; (8011a6c <srand+0x54>)
 8011a3e:	e9c0 1300 	strd	r1, r3, [r0]
 8011a42:	4b0b      	ldr	r3, [pc, #44]	; (8011a70 <srand+0x58>)
 8011a44:	6083      	str	r3, [r0, #8]
 8011a46:	230b      	movs	r3, #11
 8011a48:	8183      	strh	r3, [r0, #12]
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	2001      	movs	r0, #1
 8011a4e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8011a52:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011a54:	2200      	movs	r2, #0
 8011a56:	611c      	str	r4, [r3, #16]
 8011a58:	615a      	str	r2, [r3, #20]
 8011a5a:	bd38      	pop	{r3, r4, r5, pc}
 8011a5c:	20000100 	.word	0x20000100
 8011a60:	08016f40 	.word	0x08016f40
 8011a64:	08017018 	.word	0x08017018
 8011a68:	abcd330e 	.word	0xabcd330e
 8011a6c:	e66d1234 	.word	0xe66d1234
 8011a70:	0005deec 	.word	0x0005deec

08011a74 <rand>:
 8011a74:	4b17      	ldr	r3, [pc, #92]	; (8011ad4 <rand+0x60>)
 8011a76:	b510      	push	{r4, lr}
 8011a78:	681c      	ldr	r4, [r3, #0]
 8011a7a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011a7c:	b9b3      	cbnz	r3, 8011aac <rand+0x38>
 8011a7e:	2018      	movs	r0, #24
 8011a80:	f7ff fed2 	bl	8011828 <malloc>
 8011a84:	63a0      	str	r0, [r4, #56]	; 0x38
 8011a86:	b928      	cbnz	r0, 8011a94 <rand+0x20>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	4b13      	ldr	r3, [pc, #76]	; (8011ad8 <rand+0x64>)
 8011a8c:	4813      	ldr	r0, [pc, #76]	; (8011adc <rand+0x68>)
 8011a8e:	214e      	movs	r1, #78	; 0x4e
 8011a90:	f001 fa78 	bl	8012f84 <__assert_func>
 8011a94:	4a12      	ldr	r2, [pc, #72]	; (8011ae0 <rand+0x6c>)
 8011a96:	4b13      	ldr	r3, [pc, #76]	; (8011ae4 <rand+0x70>)
 8011a98:	e9c0 2300 	strd	r2, r3, [r0]
 8011a9c:	4b12      	ldr	r3, [pc, #72]	; (8011ae8 <rand+0x74>)
 8011a9e:	6083      	str	r3, [r0, #8]
 8011aa0:	230b      	movs	r3, #11
 8011aa2:	8183      	strh	r3, [r0, #12]
 8011aa4:	2201      	movs	r2, #1
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8011aac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011aae:	480f      	ldr	r0, [pc, #60]	; (8011aec <rand+0x78>)
 8011ab0:	690a      	ldr	r2, [r1, #16]
 8011ab2:	694b      	ldr	r3, [r1, #20]
 8011ab4:	4c0e      	ldr	r4, [pc, #56]	; (8011af0 <rand+0x7c>)
 8011ab6:	4350      	muls	r0, r2
 8011ab8:	fb04 0003 	mla	r0, r4, r3, r0
 8011abc:	fba2 3404 	umull	r3, r4, r2, r4
 8011ac0:	1c5a      	adds	r2, r3, #1
 8011ac2:	4404      	add	r4, r0
 8011ac4:	f144 0000 	adc.w	r0, r4, #0
 8011ac8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8011acc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011ad0:	bd10      	pop	{r4, pc}
 8011ad2:	bf00      	nop
 8011ad4:	20000100 	.word	0x20000100
 8011ad8:	08016f40 	.word	0x08016f40
 8011adc:	08017018 	.word	0x08017018
 8011ae0:	abcd330e 	.word	0xabcd330e
 8011ae4:	e66d1234 	.word	0xe66d1234
 8011ae8:	0005deec 	.word	0x0005deec
 8011aec:	5851f42d 	.word	0x5851f42d
 8011af0:	4c957f2d 	.word	0x4c957f2d

08011af4 <realloc>:
 8011af4:	4b02      	ldr	r3, [pc, #8]	; (8011b00 <realloc+0xc>)
 8011af6:	460a      	mov	r2, r1
 8011af8:	4601      	mov	r1, r0
 8011afa:	6818      	ldr	r0, [r3, #0]
 8011afc:	f001 bc16 	b.w	801332c <_realloc_r>
 8011b00:	20000100 	.word	0x20000100

08011b04 <_sbrk_r>:
 8011b04:	b538      	push	{r3, r4, r5, lr}
 8011b06:	4d06      	ldr	r5, [pc, #24]	; (8011b20 <_sbrk_r+0x1c>)
 8011b08:	2300      	movs	r3, #0
 8011b0a:	4604      	mov	r4, r0
 8011b0c:	4608      	mov	r0, r1
 8011b0e:	602b      	str	r3, [r5, #0]
 8011b10:	f7ef f9bc 	bl	8000e8c <_sbrk>
 8011b14:	1c43      	adds	r3, r0, #1
 8011b16:	d102      	bne.n	8011b1e <_sbrk_r+0x1a>
 8011b18:	682b      	ldr	r3, [r5, #0]
 8011b1a:	b103      	cbz	r3, 8011b1e <_sbrk_r+0x1a>
 8011b1c:	6023      	str	r3, [r4, #0]
 8011b1e:	bd38      	pop	{r3, r4, r5, pc}
 8011b20:	20000b64 	.word	0x20000b64

08011b24 <_raise_r>:
 8011b24:	291f      	cmp	r1, #31
 8011b26:	b538      	push	{r3, r4, r5, lr}
 8011b28:	4604      	mov	r4, r0
 8011b2a:	460d      	mov	r5, r1
 8011b2c:	d904      	bls.n	8011b38 <_raise_r+0x14>
 8011b2e:	2316      	movs	r3, #22
 8011b30:	6003      	str	r3, [r0, #0]
 8011b32:	f04f 30ff 	mov.w	r0, #4294967295
 8011b36:	bd38      	pop	{r3, r4, r5, pc}
 8011b38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011b3a:	b112      	cbz	r2, 8011b42 <_raise_r+0x1e>
 8011b3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011b40:	b94b      	cbnz	r3, 8011b56 <_raise_r+0x32>
 8011b42:	4620      	mov	r0, r4
 8011b44:	f000 f830 	bl	8011ba8 <_getpid_r>
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4601      	mov	r1, r0
 8011b4c:	4620      	mov	r0, r4
 8011b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b52:	f000 b817 	b.w	8011b84 <_kill_r>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d00a      	beq.n	8011b70 <_raise_r+0x4c>
 8011b5a:	1c59      	adds	r1, r3, #1
 8011b5c:	d103      	bne.n	8011b66 <_raise_r+0x42>
 8011b5e:	2316      	movs	r3, #22
 8011b60:	6003      	str	r3, [r0, #0]
 8011b62:	2001      	movs	r0, #1
 8011b64:	e7e7      	b.n	8011b36 <_raise_r+0x12>
 8011b66:	2400      	movs	r4, #0
 8011b68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011b6c:	4628      	mov	r0, r5
 8011b6e:	4798      	blx	r3
 8011b70:	2000      	movs	r0, #0
 8011b72:	e7e0      	b.n	8011b36 <_raise_r+0x12>

08011b74 <raise>:
 8011b74:	4b02      	ldr	r3, [pc, #8]	; (8011b80 <raise+0xc>)
 8011b76:	4601      	mov	r1, r0
 8011b78:	6818      	ldr	r0, [r3, #0]
 8011b7a:	f7ff bfd3 	b.w	8011b24 <_raise_r>
 8011b7e:	bf00      	nop
 8011b80:	20000100 	.word	0x20000100

08011b84 <_kill_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4d07      	ldr	r5, [pc, #28]	; (8011ba4 <_kill_r+0x20>)
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	4608      	mov	r0, r1
 8011b8e:	4611      	mov	r1, r2
 8011b90:	602b      	str	r3, [r5, #0]
 8011b92:	f7ef f8e6 	bl	8000d62 <_kill>
 8011b96:	1c43      	adds	r3, r0, #1
 8011b98:	d102      	bne.n	8011ba0 <_kill_r+0x1c>
 8011b9a:	682b      	ldr	r3, [r5, #0]
 8011b9c:	b103      	cbz	r3, 8011ba0 <_kill_r+0x1c>
 8011b9e:	6023      	str	r3, [r4, #0]
 8011ba0:	bd38      	pop	{r3, r4, r5, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20000b64 	.word	0x20000b64

08011ba8 <_getpid_r>:
 8011ba8:	f7ef b8d3 	b.w	8000d52 <_getpid>

08011bac <__sread>:
 8011bac:	b510      	push	{r4, lr}
 8011bae:	460c      	mov	r4, r1
 8011bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bb4:	f002 f872 	bl	8013c9c <_read_r>
 8011bb8:	2800      	cmp	r0, #0
 8011bba:	bfab      	itete	ge
 8011bbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8011bc0:	181b      	addge	r3, r3, r0
 8011bc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011bc6:	bfac      	ite	ge
 8011bc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8011bca:	81a3      	strhlt	r3, [r4, #12]
 8011bcc:	bd10      	pop	{r4, pc}

08011bce <__seofread>:
 8011bce:	2000      	movs	r0, #0
 8011bd0:	4770      	bx	lr

08011bd2 <__swrite>:
 8011bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd6:	461f      	mov	r7, r3
 8011bd8:	898b      	ldrh	r3, [r1, #12]
 8011bda:	05db      	lsls	r3, r3, #23
 8011bdc:	4605      	mov	r5, r0
 8011bde:	460c      	mov	r4, r1
 8011be0:	4616      	mov	r6, r2
 8011be2:	d505      	bpl.n	8011bf0 <__swrite+0x1e>
 8011be4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011be8:	2302      	movs	r3, #2
 8011bea:	2200      	movs	r2, #0
 8011bec:	f001 fb6e 	bl	80132cc <_lseek_r>
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bfa:	81a3      	strh	r3, [r4, #12]
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	463b      	mov	r3, r7
 8011c00:	4628      	mov	r0, r5
 8011c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011c06:	f001 b8d7 	b.w	8012db8 <_write_r>

08011c0a <__sseek>:
 8011c0a:	b510      	push	{r4, lr}
 8011c0c:	460c      	mov	r4, r1
 8011c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c12:	f001 fb5b 	bl	80132cc <_lseek_r>
 8011c16:	1c43      	adds	r3, r0, #1
 8011c18:	89a3      	ldrh	r3, [r4, #12]
 8011c1a:	bf15      	itete	ne
 8011c1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8011c1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011c22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011c26:	81a3      	strheq	r3, [r4, #12]
 8011c28:	bf18      	it	ne
 8011c2a:	81a3      	strhne	r3, [r4, #12]
 8011c2c:	bd10      	pop	{r4, pc}

08011c2e <__sclose>:
 8011c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c32:	f001 b9c5 	b.w	8012fc0 <_close_r>
	...

08011c38 <iso_year_adjust>:
 8011c38:	6941      	ldr	r1, [r0, #20]
 8011c3a:	2900      	cmp	r1, #0
 8011c3c:	f240 736c 	movw	r3, #1900	; 0x76c
 8011c40:	bfa8      	it	ge
 8011c42:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8011c46:	18ca      	adds	r2, r1, r3
 8011c48:	078b      	lsls	r3, r1, #30
 8011c4a:	d105      	bne.n	8011c58 <iso_year_adjust+0x20>
 8011c4c:	2164      	movs	r1, #100	; 0x64
 8011c4e:	fb92 f3f1 	sdiv	r3, r2, r1
 8011c52:	fb01 2313 	mls	r3, r1, r3, r2
 8011c56:	b9db      	cbnz	r3, 8011c90 <iso_year_adjust+0x58>
 8011c58:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011c5c:	fb92 f3f1 	sdiv	r3, r2, r1
 8011c60:	fb01 2313 	mls	r3, r1, r3, r2
 8011c64:	fab3 f383 	clz	r3, r3
 8011c68:	095b      	lsrs	r3, r3, #5
 8011c6a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8011c6e:	0040      	lsls	r0, r0, #1
 8011c70:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8011c74:	4418      	add	r0, r3
 8011c76:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8011c7a:	4298      	cmp	r0, r3
 8011c7c:	d03a      	beq.n	8011cf4 <iso_year_adjust+0xbc>
 8011c7e:	dc21      	bgt.n	8011cc4 <iso_year_adjust+0x8c>
 8011c80:	2801      	cmp	r0, #1
 8011c82:	dc1a      	bgt.n	8011cba <iso_year_adjust+0x82>
 8011c84:	2800      	cmp	r0, #0
 8011c86:	bfb4      	ite	lt
 8011c88:	2000      	movlt	r0, #0
 8011c8a:	f04f 30ff 	movge.w	r0, #4294967295
 8011c8e:	4770      	bx	lr
 8011c90:	2301      	movs	r3, #1
 8011c92:	e7ea      	b.n	8011c6a <iso_year_adjust+0x32>
 8011c94:	2817      	cmp	r0, #23
 8011c96:	d813      	bhi.n	8011cc0 <iso_year_adjust+0x88>
 8011c98:	e8df f000 	tbb	[pc, r0]
 8011c9c:	0c0c0c0c 	.word	0x0c0c0c0c
 8011ca0:	0c0c1212 	.word	0x0c0c1212
 8011ca4:	12121212 	.word	0x12121212
 8011ca8:	12121212 	.word	0x12121212
 8011cac:	0c0c1212 	.word	0x0c0c1212
 8011cb0:	0c0c1212 	.word	0x0c0c1212
 8011cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8011cb8:	4770      	bx	lr
 8011cba:	380a      	subs	r0, #10
 8011cbc:	2817      	cmp	r0, #23
 8011cbe:	d9e9      	bls.n	8011c94 <iso_year_adjust+0x5c>
 8011cc0:	2000      	movs	r0, #0
 8011cc2:	4770      	bx	lr
 8011cc4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8011cc8:	4298      	cmp	r0, r3
 8011cca:	dc06      	bgt.n	8011cda <iso_year_adjust+0xa2>
 8011ccc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8011cd0:	4298      	cmp	r0, r3
 8011cd2:	bfd4      	ite	le
 8011cd4:	2000      	movle	r0, #0
 8011cd6:	2001      	movgt	r0, #1
 8011cd8:	4770      	bx	lr
 8011cda:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8011cde:	3802      	subs	r0, #2
 8011ce0:	2815      	cmp	r0, #21
 8011ce2:	d8ed      	bhi.n	8011cc0 <iso_year_adjust+0x88>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	4083      	lsls	r3, r0
 8011ce8:	4803      	ldr	r0, [pc, #12]	; (8011cf8 <iso_year_adjust+0xc0>)
 8011cea:	4018      	ands	r0, r3
 8011cec:	3800      	subs	r0, #0
 8011cee:	bf18      	it	ne
 8011cf0:	2001      	movne	r0, #1
 8011cf2:	4770      	bx	lr
 8011cf4:	2001      	movs	r0, #1
 8011cf6:	4770      	bx	lr
 8011cf8:	002a001f 	.word	0x002a001f

08011cfc <__strftime>:
 8011cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d00:	b091      	sub	sp, #68	; 0x44
 8011d02:	461d      	mov	r5, r3
 8011d04:	2300      	movs	r3, #0
 8011d06:	4681      	mov	r9, r0
 8011d08:	4688      	mov	r8, r1
 8011d0a:	9304      	str	r3, [sp, #16]
 8011d0c:	461c      	mov	r4, r3
 8011d0e:	7813      	ldrb	r3, [r2, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f000 84d1 	beq.w	80126b8 <__strftime+0x9bc>
 8011d16:	2b25      	cmp	r3, #37	; 0x25
 8011d18:	d11b      	bne.n	8011d52 <__strftime+0x56>
 8011d1a:	7857      	ldrb	r7, [r2, #1]
 8011d1c:	2f30      	cmp	r7, #48	; 0x30
 8011d1e:	d024      	beq.n	8011d6a <__strftime+0x6e>
 8011d20:	2f2b      	cmp	r7, #43	; 0x2b
 8011d22:	d022      	beq.n	8011d6a <__strftime+0x6e>
 8011d24:	f102 0b01 	add.w	fp, r2, #1
 8011d28:	2700      	movs	r7, #0
 8011d2a:	f89b 3000 	ldrb.w	r3, [fp]
 8011d2e:	3b31      	subs	r3, #49	; 0x31
 8011d30:	2b08      	cmp	r3, #8
 8011d32:	d81d      	bhi.n	8011d70 <__strftime+0x74>
 8011d34:	4658      	mov	r0, fp
 8011d36:	220a      	movs	r2, #10
 8011d38:	a908      	add	r1, sp, #32
 8011d3a:	f000 fd57 	bl	80127ec <strtoul>
 8011d3e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8011d42:	4606      	mov	r6, r0
 8011d44:	f89b 3000 	ldrb.w	r3, [fp]
 8011d48:	2b45      	cmp	r3, #69	; 0x45
 8011d4a:	d113      	bne.n	8011d74 <__strftime+0x78>
 8011d4c:	f10b 0b01 	add.w	fp, fp, #1
 8011d50:	e012      	b.n	8011d78 <__strftime+0x7c>
 8011d52:	f108 31ff 	add.w	r1, r8, #4294967295
 8011d56:	42a1      	cmp	r1, r4
 8011d58:	d802      	bhi.n	8011d60 <__strftime+0x64>
 8011d5a:	2400      	movs	r4, #0
 8011d5c:	f000 bcb2 	b.w	80126c4 <__strftime+0x9c8>
 8011d60:	f809 3004 	strb.w	r3, [r9, r4]
 8011d64:	3201      	adds	r2, #1
 8011d66:	3401      	adds	r4, #1
 8011d68:	e7d1      	b.n	8011d0e <__strftime+0x12>
 8011d6a:	f102 0b02 	add.w	fp, r2, #2
 8011d6e:	e7dc      	b.n	8011d2a <__strftime+0x2e>
 8011d70:	2600      	movs	r6, #0
 8011d72:	e7e7      	b.n	8011d44 <__strftime+0x48>
 8011d74:	2b4f      	cmp	r3, #79	; 0x4f
 8011d76:	d0e9      	beq.n	8011d4c <__strftime+0x50>
 8011d78:	f89b 0000 	ldrb.w	r0, [fp]
 8011d7c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8011d80:	2b55      	cmp	r3, #85	; 0x55
 8011d82:	d8ea      	bhi.n	8011d5a <__strftime+0x5e>
 8011d84:	a201      	add	r2, pc, #4	; (adr r2, 8011d8c <__strftime+0x90>)
 8011d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d8a:	bf00      	nop
 8011d8c:	080126ab 	.word	0x080126ab
 8011d90:	08011d5b 	.word	0x08011d5b
 8011d94:	08011d5b 	.word	0x08011d5b
 8011d98:	08011d5b 	.word	0x08011d5b
 8011d9c:	08011d5b 	.word	0x08011d5b
 8011da0:	08011d5b 	.word	0x08011d5b
 8011da4:	08011d5b 	.word	0x08011d5b
 8011da8:	08011d5b 	.word	0x08011d5b
 8011dac:	08011d5b 	.word	0x08011d5b
 8011db0:	08011d5b 	.word	0x08011d5b
 8011db4:	08011d5b 	.word	0x08011d5b
 8011db8:	08011d5b 	.word	0x08011d5b
 8011dbc:	08011d5b 	.word	0x08011d5b
 8011dc0:	08011d5b 	.word	0x08011d5b
 8011dc4:	08011d5b 	.word	0x08011d5b
 8011dc8:	08011d5b 	.word	0x08011d5b
 8011dcc:	08011d5b 	.word	0x08011d5b
 8011dd0:	08011d5b 	.word	0x08011d5b
 8011dd4:	08011d5b 	.word	0x08011d5b
 8011dd8:	08011d5b 	.word	0x08011d5b
 8011ddc:	08011d5b 	.word	0x08011d5b
 8011de0:	08011d5b 	.word	0x08011d5b
 8011de4:	08011d5b 	.word	0x08011d5b
 8011de8:	08011d5b 	.word	0x08011d5b
 8011dec:	08011d5b 	.word	0x08011d5b
 8011df0:	08011d5b 	.word	0x08011d5b
 8011df4:	08011d5b 	.word	0x08011d5b
 8011df8:	08011d5b 	.word	0x08011d5b
 8011dfc:	08011f23 	.word	0x08011f23
 8011e00:	08011f7d 	.word	0x08011f7d
 8011e04:	08011ff3 	.word	0x08011ff3
 8011e08:	0801208d 	.word	0x0801208d
 8011e0c:	08011d5b 	.word	0x08011d5b
 8011e10:	080120d9 	.word	0x080120d9
 8011e14:	080121b9 	.word	0x080121b9
 8011e18:	080122bb 	.word	0x080122bb
 8011e1c:	080122c9 	.word	0x080122c9
 8011e20:	08011d5b 	.word	0x08011d5b
 8011e24:	08011d5b 	.word	0x08011d5b
 8011e28:	08011d5b 	.word	0x08011d5b
 8011e2c:	080122f9 	.word	0x080122f9
 8011e30:	08011d5b 	.word	0x08011d5b
 8011e34:	08011d5b 	.word	0x08011d5b
 8011e38:	08012311 	.word	0x08012311
 8011e3c:	08011d5b 	.word	0x08011d5b
 8011e40:	0801235f 	.word	0x0801235f
 8011e44:	08012475 	.word	0x08012475
 8011e48:	08012487 	.word	0x08012487
 8011e4c:	080124df 	.word	0x080124df
 8011e50:	080124ef 	.word	0x080124ef
 8011e54:	08012565 	.word	0x08012565
 8011e58:	08011feb 	.word	0x08011feb
 8011e5c:	08012599 	.word	0x08012599
 8011e60:	08012657 	.word	0x08012657
 8011e64:	08011d5b 	.word	0x08011d5b
 8011e68:	08011d5b 	.word	0x08011d5b
 8011e6c:	08011d5b 	.word	0x08011d5b
 8011e70:	08011d5b 	.word	0x08011d5b
 8011e74:	08011d5b 	.word	0x08011d5b
 8011e78:	08011d5b 	.word	0x08011d5b
 8011e7c:	08011ee5 	.word	0x08011ee5
 8011e80:	08011f51 	.word	0x08011f51
 8011e84:	08011fab 	.word	0x08011fab
 8011e88:	08012065 	.word	0x08012065
 8011e8c:	08012065 	.word	0x08012065
 8011e90:	08011d5b 	.word	0x08011d5b
 8011e94:	08012121 	.word	0x08012121
 8011e98:	08011f51 	.word	0x08011f51
 8011e9c:	08011d5b 	.word	0x08011d5b
 8011ea0:	080122eb 	.word	0x080122eb
 8011ea4:	080122bb 	.word	0x080122bb
 8011ea8:	080122c9 	.word	0x080122c9
 8011eac:	080122f3 	.word	0x080122f3
 8011eb0:	080122fd 	.word	0x080122fd
 8011eb4:	08011d5b 	.word	0x08011d5b
 8011eb8:	08012311 	.word	0x08012311
 8011ebc:	08011d5b 	.word	0x08011d5b
 8011ec0:	08011fdb 	.word	0x08011fdb
 8011ec4:	08012375 	.word	0x08012375
 8011ec8:	08012479 	.word	0x08012479
 8011ecc:	080124c1 	.word	0x080124c1
 8011ed0:	08011d5b 	.word	0x08011d5b
 8011ed4:	08012555 	.word	0x08012555
 8011ed8:	08011fe3 	.word	0x08011fe3
 8011edc:	0801257d 	.word	0x0801257d
 8011ee0:	080125e9 	.word	0x080125e9
 8011ee4:	69ab      	ldr	r3, [r5, #24]
 8011ee6:	4aa7      	ldr	r2, [pc, #668]	; (8012184 <__strftime+0x488>)
 8011ee8:	3318      	adds	r3, #24
 8011eea:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8011eee:	4630      	mov	r0, r6
 8011ef0:	f7ee f9a4 	bl	800023c <strlen>
 8011ef4:	3e01      	subs	r6, #1
 8011ef6:	4420      	add	r0, r4
 8011ef8:	f108 33ff 	add.w	r3, r8, #4294967295
 8011efc:	42a0      	cmp	r0, r4
 8011efe:	d107      	bne.n	8011f10 <__strftime+0x214>
 8011f00:	f89b 3000 	ldrb.w	r3, [fp]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	f000 83d7 	beq.w	80126b8 <__strftime+0x9bc>
 8011f0a:	f10b 0201 	add.w	r2, fp, #1
 8011f0e:	e6fe      	b.n	8011d0e <__strftime+0x12>
 8011f10:	42a3      	cmp	r3, r4
 8011f12:	f67f af22 	bls.w	8011d5a <__strftime+0x5e>
 8011f16:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011f1a:	f809 2004 	strb.w	r2, [r9, r4]
 8011f1e:	3401      	adds	r4, #1
 8011f20:	e7ec      	b.n	8011efc <__strftime+0x200>
 8011f22:	69aa      	ldr	r2, [r5, #24]
 8011f24:	4b97      	ldr	r3, [pc, #604]	; (8012184 <__strftime+0x488>)
 8011f26:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8011f2a:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8011f2c:	4630      	mov	r0, r6
 8011f2e:	f7ee f985 	bl	800023c <strlen>
 8011f32:	3e01      	subs	r6, #1
 8011f34:	4420      	add	r0, r4
 8011f36:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f3a:	42a0      	cmp	r0, r4
 8011f3c:	d0e0      	beq.n	8011f00 <__strftime+0x204>
 8011f3e:	42a3      	cmp	r3, r4
 8011f40:	f67f af0b 	bls.w	8011d5a <__strftime+0x5e>
 8011f44:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011f48:	f809 2004 	strb.w	r2, [r9, r4]
 8011f4c:	3401      	adds	r4, #1
 8011f4e:	e7f4      	b.n	8011f3a <__strftime+0x23e>
 8011f50:	4b8c      	ldr	r3, [pc, #560]	; (8012184 <__strftime+0x488>)
 8011f52:	692a      	ldr	r2, [r5, #16]
 8011f54:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8011f58:	4630      	mov	r0, r6
 8011f5a:	f7ee f96f 	bl	800023c <strlen>
 8011f5e:	3e01      	subs	r6, #1
 8011f60:	4420      	add	r0, r4
 8011f62:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f66:	42a0      	cmp	r0, r4
 8011f68:	d0ca      	beq.n	8011f00 <__strftime+0x204>
 8011f6a:	42a3      	cmp	r3, r4
 8011f6c:	f67f aef5 	bls.w	8011d5a <__strftime+0x5e>
 8011f70:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011f74:	f809 2004 	strb.w	r2, [r9, r4]
 8011f78:	3401      	adds	r4, #1
 8011f7a:	e7f4      	b.n	8011f66 <__strftime+0x26a>
 8011f7c:	692b      	ldr	r3, [r5, #16]
 8011f7e:	4a81      	ldr	r2, [pc, #516]	; (8012184 <__strftime+0x488>)
 8011f80:	330c      	adds	r3, #12
 8011f82:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8011f86:	4630      	mov	r0, r6
 8011f88:	f7ee f958 	bl	800023c <strlen>
 8011f8c:	3e01      	subs	r6, #1
 8011f8e:	4420      	add	r0, r4
 8011f90:	f108 33ff 	add.w	r3, r8, #4294967295
 8011f94:	42a0      	cmp	r0, r4
 8011f96:	d0b3      	beq.n	8011f00 <__strftime+0x204>
 8011f98:	42a3      	cmp	r3, r4
 8011f9a:	f67f aede 	bls.w	8011d5a <__strftime+0x5e>
 8011f9e:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8011fa2:	f809 2004 	strb.w	r2, [r9, r4]
 8011fa6:	3401      	adds	r4, #1
 8011fa8:	e7f4      	b.n	8011f94 <__strftime+0x298>
 8011faa:	4b76      	ldr	r3, [pc, #472]	; (8012184 <__strftime+0x488>)
 8011fac:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	f7ee f943 	bl	800023c <strlen>
 8011fb6:	7833      	ldrb	r3, [r6, #0]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d0a1      	beq.n	8011f00 <__strftime+0x204>
 8011fbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	4632      	mov	r2, r6
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	eba8 0104 	sub.w	r1, r8, r4
 8011fc8:	eb09 0004 	add.w	r0, r9, r4
 8011fcc:	f7ff fe96 	bl	8011cfc <__strftime>
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	f77f aec2 	ble.w	8011d5a <__strftime+0x5e>
 8011fd6:	4404      	add	r4, r0
 8011fd8:	e792      	b.n	8011f00 <__strftime+0x204>
 8011fda:	4b6a      	ldr	r3, [pc, #424]	; (8012184 <__strftime+0x488>)
 8011fdc:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 8011fe0:	e7e6      	b.n	8011fb0 <__strftime+0x2b4>
 8011fe2:	4b68      	ldr	r3, [pc, #416]	; (8012184 <__strftime+0x488>)
 8011fe4:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 8011fe8:	e7e2      	b.n	8011fb0 <__strftime+0x2b4>
 8011fea:	4b66      	ldr	r3, [pc, #408]	; (8012184 <__strftime+0x488>)
 8011fec:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 8011ff0:	e7de      	b.n	8011fb0 <__strftime+0x2b4>
 8011ff2:	4965      	ldr	r1, [pc, #404]	; (8012188 <__strftime+0x48c>)
 8011ff4:	f8d5 a014 	ldr.w	sl, [r5, #20]
 8011ff8:	458a      	cmp	sl, r1
 8011ffa:	bfac      	ite	ge
 8011ffc:	2100      	movge	r1, #0
 8011ffe:	2101      	movlt	r1, #1
 8012000:	f1ba 0f00 	cmp.w	sl, #0
 8012004:	db0e      	blt.n	8012024 <__strftime+0x328>
 8012006:	2064      	movs	r0, #100	; 0x64
 8012008:	fb9a f0f0 	sdiv	r0, sl, r0
 801200c:	3013      	adds	r0, #19
 801200e:	b19f      	cbz	r7, 8012038 <__strftime+0x33c>
 8012010:	2863      	cmp	r0, #99	; 0x63
 8012012:	dd25      	ble.n	8012060 <__strftime+0x364>
 8012014:	4a5d      	ldr	r2, [pc, #372]	; (801218c <__strftime+0x490>)
 8012016:	4b5e      	ldr	r3, [pc, #376]	; (8012190 <__strftime+0x494>)
 8012018:	2f2b      	cmp	r7, #43	; 0x2b
 801201a:	bf14      	ite	ne
 801201c:	4617      	movne	r7, r2
 801201e:	461f      	moveq	r7, r3
 8012020:	4a5c      	ldr	r2, [pc, #368]	; (8012194 <__strftime+0x498>)
 8012022:	e00b      	b.n	801203c <__strftime+0x340>
 8012024:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8012028:	9105      	str	r1, [sp, #20]
 801202a:	f000 ffa7 	bl	8012f7c <abs>
 801202e:	2364      	movs	r3, #100	; 0x64
 8012030:	9905      	ldr	r1, [sp, #20]
 8012032:	fb90 f0f3 	sdiv	r0, r0, r3
 8012036:	e7ea      	b.n	801200e <__strftime+0x312>
 8012038:	4f54      	ldr	r7, [pc, #336]	; (801218c <__strftime+0x490>)
 801203a:	4a57      	ldr	r2, [pc, #348]	; (8012198 <__strftime+0x49c>)
 801203c:	4b57      	ldr	r3, [pc, #348]	; (801219c <__strftime+0x4a0>)
 801203e:	9001      	str	r0, [sp, #4]
 8012040:	2e02      	cmp	r6, #2
 8012042:	bf2c      	ite	cs
 8012044:	ebc1 0606 	rsbcs	r6, r1, r6
 8012048:	f1c1 0602 	rsbcc	r6, r1, #2
 801204c:	494e      	ldr	r1, [pc, #312]	; (8012188 <__strftime+0x48c>)
 801204e:	9600      	str	r6, [sp, #0]
 8012050:	458a      	cmp	sl, r1
 8012052:	bfa8      	it	ge
 8012054:	463b      	movge	r3, r7
 8012056:	eba8 0104 	sub.w	r1, r8, r4
 801205a:	eb09 0004 	add.w	r0, r9, r4
 801205e:	e02a      	b.n	80120b6 <__strftime+0x3ba>
 8012060:	4f4a      	ldr	r7, [pc, #296]	; (801218c <__strftime+0x490>)
 8012062:	e7dd      	b.n	8012020 <__strftime+0x324>
 8012064:	494e      	ldr	r1, [pc, #312]	; (80121a0 <__strftime+0x4a4>)
 8012066:	4a4f      	ldr	r2, [pc, #316]	; (80121a4 <__strftime+0x4a8>)
 8012068:	68eb      	ldr	r3, [r5, #12]
 801206a:	2864      	cmp	r0, #100	; 0x64
 801206c:	bf08      	it	eq
 801206e:	460a      	moveq	r2, r1
 8012070:	eba8 0104 	sub.w	r1, r8, r4
 8012074:	eb09 0004 	add.w	r0, r9, r4
 8012078:	f001 fe22 	bl	8013cc0 <sniprintf>
 801207c:	2800      	cmp	r0, #0
 801207e:	f6ff ae6c 	blt.w	8011d5a <__strftime+0x5e>
 8012082:	4404      	add	r4, r0
 8012084:	45a0      	cmp	r8, r4
 8012086:	f63f af3b 	bhi.w	8011f00 <__strftime+0x204>
 801208a:	e666      	b.n	8011d5a <__strftime+0x5e>
 801208c:	6968      	ldr	r0, [r5, #20]
 801208e:	692b      	ldr	r3, [r5, #16]
 8012090:	68ef      	ldr	r7, [r5, #12]
 8012092:	2800      	cmp	r0, #0
 8012094:	eb09 0604 	add.w	r6, r9, r4
 8012098:	eba8 0104 	sub.w	r1, r8, r4
 801209c:	f103 0301 	add.w	r3, r3, #1
 80120a0:	db0c      	blt.n	80120bc <__strftime+0x3c0>
 80120a2:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80120a6:	fb90 f2fc 	sdiv	r2, r0, ip
 80120aa:	fb0c 0212 	mls	r2, ip, r2, r0
 80120ae:	e9cd 7200 	strd	r7, r2, [sp]
 80120b2:	4a3d      	ldr	r2, [pc, #244]	; (80121a8 <__strftime+0x4ac>)
 80120b4:	4630      	mov	r0, r6
 80120b6:	f001 fe03 	bl	8013cc0 <sniprintf>
 80120ba:	e7df      	b.n	801207c <__strftime+0x380>
 80120bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80120c0:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80120c4:	f000 ff5a 	bl	8012f7c <abs>
 80120c8:	2264      	movs	r2, #100	; 0x64
 80120ca:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80120ce:	fb90 fcf2 	sdiv	ip, r0, r2
 80120d2:	fb0c 0212 	mls	r2, ip, r2, r0
 80120d6:	e7ea      	b.n	80120ae <__strftime+0x3b2>
 80120d8:	2325      	movs	r3, #37	; 0x25
 80120da:	f88d 3020 	strb.w	r3, [sp, #32]
 80120de:	b187      	cbz	r7, 8012102 <__strftime+0x406>
 80120e0:	2e06      	cmp	r6, #6
 80120e2:	bf38      	it	cc
 80120e4:	2606      	movcc	r6, #6
 80120e6:	1fb3      	subs	r3, r6, #6
 80120e8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80120ec:	d10c      	bne.n	8012108 <__strftime+0x40c>
 80120ee:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80120f2:	492e      	ldr	r1, [pc, #184]	; (80121ac <__strftime+0x4b0>)
 80120f4:	f001 fe44 	bl	8013d80 <strcpy>
 80120f8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80120fa:	9300      	str	r3, [sp, #0]
 80120fc:	aa08      	add	r2, sp, #32
 80120fe:	462b      	mov	r3, r5
 8012100:	e760      	b.n	8011fc4 <__strftime+0x2c8>
 8012102:	272b      	movs	r7, #43	; 0x2b
 8012104:	260a      	movs	r6, #10
 8012106:	e7ee      	b.n	80120e6 <__strftime+0x3ea>
 8012108:	4a29      	ldr	r2, [pc, #164]	; (80121b0 <__strftime+0x4b4>)
 801210a:	211e      	movs	r1, #30
 801210c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8012110:	f001 fdd6 	bl	8013cc0 <sniprintf>
 8012114:	2800      	cmp	r0, #0
 8012116:	ddea      	ble.n	80120ee <__strftime+0x3f2>
 8012118:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 801211c:	4418      	add	r0, r3
 801211e:	e7e8      	b.n	80120f2 <__strftime+0x3f6>
 8012120:	4628      	mov	r0, r5
 8012122:	f7ff fd89 	bl	8011c38 <iso_year_adjust>
 8012126:	4606      	mov	r6, r0
 8012128:	6968      	ldr	r0, [r5, #20]
 801212a:	2800      	cmp	r0, #0
 801212c:	db11      	blt.n	8012152 <__strftime+0x456>
 801212e:	2264      	movs	r2, #100	; 0x64
 8012130:	fb90 f3f2 	sdiv	r3, r0, r2
 8012134:	fb02 0313 	mls	r3, r2, r3, r0
 8012138:	441e      	add	r6, r3
 801213a:	2364      	movs	r3, #100	; 0x64
 801213c:	fb96 f0f3 	sdiv	r0, r6, r3
 8012140:	fb03 6610 	mls	r6, r3, r0, r6
 8012144:	441e      	add	r6, r3
 8012146:	fbb6 f2f3 	udiv	r2, r6, r3
 801214a:	fb03 6312 	mls	r3, r3, r2, r6
 801214e:	4a14      	ldr	r2, [pc, #80]	; (80121a0 <__strftime+0x4a4>)
 8012150:	e78e      	b.n	8012070 <__strftime+0x374>
 8012152:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012156:	f000 ff11 	bl	8012f7c <abs>
 801215a:	2364      	movs	r3, #100	; 0x64
 801215c:	2e00      	cmp	r6, #0
 801215e:	fb90 f2f3 	sdiv	r2, r0, r3
 8012162:	fb02 0313 	mls	r3, r2, r3, r0
 8012166:	da05      	bge.n	8012174 <__strftime+0x478>
 8012168:	6969      	ldr	r1, [r5, #20]
 801216a:	4a12      	ldr	r2, [pc, #72]	; (80121b4 <__strftime+0x4b8>)
 801216c:	4291      	cmp	r1, r2
 801216e:	bfb8      	it	lt
 8012170:	2601      	movlt	r6, #1
 8012172:	e7e1      	b.n	8012138 <__strftime+0x43c>
 8012174:	d0e0      	beq.n	8012138 <__strftime+0x43c>
 8012176:	6969      	ldr	r1, [r5, #20]
 8012178:	4a03      	ldr	r2, [pc, #12]	; (8012188 <__strftime+0x48c>)
 801217a:	4291      	cmp	r1, r2
 801217c:	bfb8      	it	lt
 801217e:	f04f 36ff 	movlt.w	r6, #4294967295
 8012182:	e7d9      	b.n	8012138 <__strftime+0x43c>
 8012184:	080171fc 	.word	0x080171fc
 8012188:	fffff894 	.word	0xfffff894
 801218c:	0801736f 	.word	0x0801736f
 8012190:	08017086 	.word	0x08017086
 8012194:	0801707e 	.word	0x0801707e
 8012198:	08017077 	.word	0x08017077
 801219c:	080174af 	.word	0x080174af
 80121a0:	08017096 	.word	0x08017096
 80121a4:	08017088 	.word	0x08017088
 80121a8:	0801708c 	.word	0x0801708c
 80121ac:	0801709f 	.word	0x0801709f
 80121b0:	0801709b 	.word	0x0801709b
 80121b4:	fffff895 	.word	0xfffff895
 80121b8:	4bb6      	ldr	r3, [pc, #728]	; (8012494 <__strftime+0x798>)
 80121ba:	6969      	ldr	r1, [r5, #20]
 80121bc:	4299      	cmp	r1, r3
 80121be:	bfac      	ite	ge
 80121c0:	2300      	movge	r3, #0
 80121c2:	2301      	movlt	r3, #1
 80121c4:	4628      	mov	r0, r5
 80121c6:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80121ca:	f7ff fd35 	bl	8011c38 <iso_year_adjust>
 80121ce:	9906      	ldr	r1, [sp, #24]
 80121d0:	2900      	cmp	r1, #0
 80121d2:	4682      	mov	sl, r0
 80121d4:	db27      	blt.n	8012226 <__strftime+0x52a>
 80121d6:	2264      	movs	r2, #100	; 0x64
 80121d8:	fb91 f2f2 	sdiv	r2, r1, r2
 80121dc:	3213      	adds	r2, #19
 80121de:	6968      	ldr	r0, [r5, #20]
 80121e0:	2800      	cmp	r0, #0
 80121e2:	db2b      	blt.n	801223c <__strftime+0x540>
 80121e4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80121e8:	fb90 fefc 	sdiv	lr, r0, ip
 80121ec:	fb0c 001e 	mls	r0, ip, lr, r0
 80121f0:	f1ba 0f00 	cmp.w	sl, #0
 80121f4:	da31      	bge.n	801225a <__strftime+0x55e>
 80121f6:	6969      	ldr	r1, [r5, #20]
 80121f8:	4ba7      	ldr	r3, [pc, #668]	; (8012498 <__strftime+0x79c>)
 80121fa:	4299      	cmp	r1, r3
 80121fc:	db38      	blt.n	8012270 <__strftime+0x574>
 80121fe:	eb0a 0300 	add.w	r3, sl, r0
 8012202:	1c59      	adds	r1, r3, #1
 8012204:	d139      	bne.n	801227a <__strftime+0x57e>
 8012206:	3a01      	subs	r2, #1
 8012208:	2363      	movs	r3, #99	; 0x63
 801220a:	2064      	movs	r0, #100	; 0x64
 801220c:	fb00 3202 	mla	r2, r0, r2, r3
 8012210:	9b05      	ldr	r3, [sp, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d036      	beq.n	8012284 <__strftime+0x588>
 8012216:	232d      	movs	r3, #45	; 0x2d
 8012218:	f88d 3020 	strb.w	r3, [sp, #32]
 801221c:	b106      	cbz	r6, 8012220 <__strftime+0x524>
 801221e:	3e01      	subs	r6, #1
 8012220:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8012224:	e038      	b.n	8012298 <__strftime+0x59c>
 8012226:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 801222a:	9106      	str	r1, [sp, #24]
 801222c:	f000 fea6 	bl	8012f7c <abs>
 8012230:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8012234:	9906      	ldr	r1, [sp, #24]
 8012236:	fb90 f2fc 	sdiv	r2, r0, ip
 801223a:	e7d0      	b.n	80121de <__strftime+0x4e2>
 801223c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012240:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8012244:	f000 fe9a 	bl	8012f7c <abs>
 8012248:	f04f 0c64 	mov.w	ip, #100	; 0x64
 801224c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8012250:	fb90 fefc 	sdiv	lr, r0, ip
 8012254:	fb0e 001c 	mls	r0, lr, ip, r0
 8012258:	e7ca      	b.n	80121f0 <__strftime+0x4f4>
 801225a:	d0d0      	beq.n	80121fe <__strftime+0x502>
 801225c:	4b8d      	ldr	r3, [pc, #564]	; (8012494 <__strftime+0x798>)
 801225e:	4299      	cmp	r1, r3
 8012260:	bfb4      	ite	lt
 8012262:	2301      	movlt	r3, #1
 8012264:	2300      	movge	r3, #0
 8012266:	9305      	str	r3, [sp, #20]
 8012268:	bfb8      	it	lt
 801226a:	f04f 3aff 	movlt.w	sl, #4294967295
 801226e:	e7c6      	b.n	80121fe <__strftime+0x502>
 8012270:	f04f 0a01 	mov.w	sl, #1
 8012274:	f8cd a014 	str.w	sl, [sp, #20]
 8012278:	e7c1      	b.n	80121fe <__strftime+0x502>
 801227a:	2b64      	cmp	r3, #100	; 0x64
 801227c:	bf04      	itt	eq
 801227e:	3201      	addeq	r2, #1
 8012280:	2300      	moveq	r3, #0
 8012282:	e7c2      	b.n	801220a <__strftime+0x50e>
 8012284:	2f2b      	cmp	r7, #43	; 0x2b
 8012286:	d106      	bne.n	8012296 <__strftime+0x59a>
 8012288:	f242 730f 	movw	r3, #9999	; 0x270f
 801228c:	429a      	cmp	r2, r3
 801228e:	d902      	bls.n	8012296 <__strftime+0x59a>
 8012290:	f88d 7020 	strb.w	r7, [sp, #32]
 8012294:	e7c2      	b.n	801221c <__strftime+0x520>
 8012296:	ab08      	add	r3, sp, #32
 8012298:	2125      	movs	r1, #37	; 0x25
 801229a:	7019      	strb	r1, [r3, #0]
 801229c:	b94f      	cbnz	r7, 80122b2 <__strftime+0x5b6>
 801229e:	1c58      	adds	r0, r3, #1
 80122a0:	497e      	ldr	r1, [pc, #504]	; (801249c <__strftime+0x7a0>)
 80122a2:	9205      	str	r2, [sp, #20]
 80122a4:	f001 fd6c 	bl	8013d80 <strcpy>
 80122a8:	9a05      	ldr	r2, [sp, #20]
 80122aa:	9200      	str	r2, [sp, #0]
 80122ac:	4633      	mov	r3, r6
 80122ae:	aa08      	add	r2, sp, #32
 80122b0:	e059      	b.n	8012366 <__strftime+0x66a>
 80122b2:	2130      	movs	r1, #48	; 0x30
 80122b4:	1c98      	adds	r0, r3, #2
 80122b6:	7059      	strb	r1, [r3, #1]
 80122b8:	e7f2      	b.n	80122a0 <__strftime+0x5a4>
 80122ba:	4979      	ldr	r1, [pc, #484]	; (80124a0 <__strftime+0x7a4>)
 80122bc:	4a79      	ldr	r2, [pc, #484]	; (80124a4 <__strftime+0x7a8>)
 80122be:	68ab      	ldr	r3, [r5, #8]
 80122c0:	286b      	cmp	r0, #107	; 0x6b
 80122c2:	bf08      	it	eq
 80122c4:	460a      	moveq	r2, r1
 80122c6:	e6d3      	b.n	8012070 <__strftime+0x374>
 80122c8:	68ab      	ldr	r3, [r5, #8]
 80122ca:	b163      	cbz	r3, 80122e6 <__strftime+0x5ea>
 80122cc:	2b0c      	cmp	r3, #12
 80122ce:	d004      	beq.n	80122da <__strftime+0x5de>
 80122d0:	210c      	movs	r1, #12
 80122d2:	fb93 f2f1 	sdiv	r2, r3, r1
 80122d6:	fb01 3312 	mls	r3, r1, r2, r3
 80122da:	4972      	ldr	r1, [pc, #456]	; (80124a4 <__strftime+0x7a8>)
 80122dc:	4a70      	ldr	r2, [pc, #448]	; (80124a0 <__strftime+0x7a4>)
 80122de:	2849      	cmp	r0, #73	; 0x49
 80122e0:	bf08      	it	eq
 80122e2:	460a      	moveq	r2, r1
 80122e4:	e6c4      	b.n	8012070 <__strftime+0x374>
 80122e6:	230c      	movs	r3, #12
 80122e8:	e7f7      	b.n	80122da <__strftime+0x5de>
 80122ea:	69eb      	ldr	r3, [r5, #28]
 80122ec:	4a6e      	ldr	r2, [pc, #440]	; (80124a8 <__strftime+0x7ac>)
 80122ee:	3301      	adds	r3, #1
 80122f0:	e6be      	b.n	8012070 <__strftime+0x374>
 80122f2:	692b      	ldr	r3, [r5, #16]
 80122f4:	3301      	adds	r3, #1
 80122f6:	e72a      	b.n	801214e <__strftime+0x452>
 80122f8:	686b      	ldr	r3, [r5, #4]
 80122fa:	e728      	b.n	801214e <__strftime+0x452>
 80122fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8012300:	42a3      	cmp	r3, r4
 8012302:	f67f ad2a 	bls.w	8011d5a <__strftime+0x5e>
 8012306:	230a      	movs	r3, #10
 8012308:	f809 3004 	strb.w	r3, [r9, r4]
 801230c:	3401      	adds	r4, #1
 801230e:	e5f7      	b.n	8011f00 <__strftime+0x204>
 8012310:	68ab      	ldr	r3, [r5, #8]
 8012312:	2b0b      	cmp	r3, #11
 8012314:	bfcc      	ite	gt
 8012316:	22a4      	movgt	r2, #164	; 0xa4
 8012318:	22a0      	movle	r2, #160	; 0xa0
 801231a:	4b64      	ldr	r3, [pc, #400]	; (80124ac <__strftime+0x7b0>)
 801231c:	4413      	add	r3, r2
 801231e:	685e      	ldr	r6, [r3, #4]
 8012320:	4630      	mov	r0, r6
 8012322:	f7ed ff8b 	bl	800023c <strlen>
 8012326:	1e72      	subs	r2, r6, #1
 8012328:	4420      	add	r0, r4
 801232a:	f108 36ff 	add.w	r6, r8, #4294967295
 801232e:	42a0      	cmp	r0, r4
 8012330:	f43f ade6 	beq.w	8011f00 <__strftime+0x204>
 8012334:	42a6      	cmp	r6, r4
 8012336:	f67f ad10 	bls.w	8011d5a <__strftime+0x5e>
 801233a:	f89b 1000 	ldrb.w	r1, [fp]
 801233e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012342:	2950      	cmp	r1, #80	; 0x50
 8012344:	d107      	bne.n	8012356 <__strftime+0x65a>
 8012346:	495a      	ldr	r1, [pc, #360]	; (80124b0 <__strftime+0x7b4>)
 8012348:	5cc9      	ldrb	r1, [r1, r3]
 801234a:	f001 0103 	and.w	r1, r1, #3
 801234e:	2901      	cmp	r1, #1
 8012350:	bf08      	it	eq
 8012352:	3320      	addeq	r3, #32
 8012354:	b2db      	uxtb	r3, r3
 8012356:	f809 3004 	strb.w	r3, [r9, r4]
 801235a:	3401      	adds	r4, #1
 801235c:	e7e7      	b.n	801232e <__strftime+0x632>
 801235e:	686b      	ldr	r3, [r5, #4]
 8012360:	9300      	str	r3, [sp, #0]
 8012362:	4a54      	ldr	r2, [pc, #336]	; (80124b4 <__strftime+0x7b8>)
 8012364:	68ab      	ldr	r3, [r5, #8]
 8012366:	eba8 0104 	sub.w	r1, r8, r4
 801236a:	eb09 0004 	add.w	r0, r9, r4
 801236e:	f001 fca7 	bl	8013cc0 <sniprintf>
 8012372:	e683      	b.n	801207c <__strftime+0x380>
 8012374:	6a2b      	ldr	r3, [r5, #32]
 8012376:	2b00      	cmp	r3, #0
 8012378:	db79      	blt.n	801246e <__strftime+0x772>
 801237a:	f000 fb03 	bl	8012984 <__tz_lock>
 801237e:	9b04      	ldr	r3, [sp, #16]
 8012380:	b90b      	cbnz	r3, 8012386 <__strftime+0x68a>
 8012382:	f000 fb0b 	bl	801299c <_tzset_unlocked>
 8012386:	f000 fed9 	bl	801313c <__gettzinfo>
 801238a:	6a2b      	ldr	r3, [r5, #32]
 801238c:	2b00      	cmp	r3, #0
 801238e:	bfcc      	ite	gt
 8012390:	2350      	movgt	r3, #80	; 0x50
 8012392:	2328      	movle	r3, #40	; 0x28
 8012394:	58c3      	ldr	r3, [r0, r3]
 8012396:	f1c3 0a00 	rsb	sl, r3, #0
 801239a:	f000 faf9 	bl	8012990 <__tz_unlock>
 801239e:	2301      	movs	r3, #1
 80123a0:	9304      	str	r3, [sp, #16]
 80123a2:	f8d5 c014 	ldr.w	ip, [r5, #20]
 80123a6:	4662      	mov	r2, ip
 80123a8:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 80123ac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80123b0:	9602      	str	r6, [sp, #8]
 80123b2:	f143 36ff 	adc.w	r6, r3, #4294967295
 80123b6:	9603      	str	r6, [sp, #12]
 80123b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123bc:	2e00      	cmp	r6, #0
 80123be:	f177 0600 	sbcs.w	r6, r7, #0
 80123c2:	eba8 0104 	sub.w	r1, r8, r4
 80123c6:	eb09 0004 	add.w	r0, r9, r4
 80123ca:	da05      	bge.n	80123d8 <__strftime+0x6dc>
 80123cc:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 80123d0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80123d4:	9602      	str	r6, [sp, #8]
 80123d6:	9303      	str	r3, [sp, #12]
 80123d8:	9b02      	ldr	r3, [sp, #8]
 80123da:	089e      	lsrs	r6, r3, #2
 80123dc:	9b03      	ldr	r3, [sp, #12]
 80123de:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 80123e2:	f10c 32ff 	add.w	r2, ip, #4294967295
 80123e6:	109f      	asrs	r7, r3, #2
 80123e8:	2364      	movs	r3, #100	; 0x64
 80123ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80123ee:	1af6      	subs	r6, r6, r3
 80123f0:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 80123f4:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80123f8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80123fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8012400:	18f6      	adds	r6, r6, r3
 8012402:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012406:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 801240a:	f240 136d 	movw	r3, #365	; 0x16d
 801240e:	fb03 fc0c 	mul.w	ip, r3, ip
 8012412:	69eb      	ldr	r3, [r5, #28]
 8012414:	eb16 060c 	adds.w	r6, r6, ip
 8012418:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 801241c:	18f6      	adds	r6, r6, r3
 801241e:	f04f 0c18 	mov.w	ip, #24
 8012422:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8012426:	fba6 230c 	umull	r2, r3, r6, ip
 801242a:	68ae      	ldr	r6, [r5, #8]
 801242c:	fb0c 3307 	mla	r3, ip, r7, r3
 8012430:	1992      	adds	r2, r2, r6
 8012432:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8012436:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801243a:	fba2 670c 	umull	r6, r7, r2, ip
 801243e:	fb0c 7703 	mla	r7, ip, r3, r7
 8012442:	686b      	ldr	r3, [r5, #4]
 8012444:	18f6      	adds	r6, r6, r3
 8012446:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 801244a:	fba6 230c 	umull	r2, r3, r6, ip
 801244e:	682e      	ldr	r6, [r5, #0]
 8012450:	fb0c 3307 	mla	r3, ip, r7, r3
 8012454:	1992      	adds	r2, r2, r6
 8012456:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 801245a:	ebb2 020a 	subs.w	r2, r2, sl
 801245e:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8012462:	e9cd 2300 	strd	r2, r3, [sp]
 8012466:	4a14      	ldr	r2, [pc, #80]	; (80124b8 <__strftime+0x7bc>)
 8012468:	f001 fc2a 	bl	8013cc0 <sniprintf>
 801246c:	e606      	b.n	801207c <__strftime+0x380>
 801246e:	f04f 0a00 	mov.w	sl, #0
 8012472:	e796      	b.n	80123a2 <__strftime+0x6a6>
 8012474:	682b      	ldr	r3, [r5, #0]
 8012476:	e66a      	b.n	801214e <__strftime+0x452>
 8012478:	f108 33ff 	add.w	r3, r8, #4294967295
 801247c:	42a3      	cmp	r3, r4
 801247e:	f67f ac6c 	bls.w	8011d5a <__strftime+0x5e>
 8012482:	2309      	movs	r3, #9
 8012484:	e740      	b.n	8012308 <__strftime+0x60c>
 8012486:	682b      	ldr	r3, [r5, #0]
 8012488:	9301      	str	r3, [sp, #4]
 801248a:	686b      	ldr	r3, [r5, #4]
 801248c:	9300      	str	r3, [sp, #0]
 801248e:	4a0b      	ldr	r2, [pc, #44]	; (80124bc <__strftime+0x7c0>)
 8012490:	68ab      	ldr	r3, [r5, #8]
 8012492:	e5e0      	b.n	8012056 <__strftime+0x35a>
 8012494:	fffff894 	.word	0xfffff894
 8012498:	fffff895 	.word	0xfffff895
 801249c:	080170a7 	.word	0x080170a7
 80124a0:	08017088 	.word	0x08017088
 80124a4:	08017096 	.word	0x08017096
 80124a8:	080170ab 	.word	0x080170ab
 80124ac:	080171fc 	.word	0x080171fc
 80124b0:	08017371 	.word	0x08017371
 80124b4:	080170ba 	.word	0x080170ba
 80124b8:	080170b0 	.word	0x080170b0
 80124bc:	080170b5 	.word	0x080170b5
 80124c0:	f108 33ff 	add.w	r3, r8, #4294967295
 80124c4:	42a3      	cmp	r3, r4
 80124c6:	f67f ac48 	bls.w	8011d5a <__strftime+0x5e>
 80124ca:	69ab      	ldr	r3, [r5, #24]
 80124cc:	eb09 0204 	add.w	r2, r9, r4
 80124d0:	3401      	adds	r4, #1
 80124d2:	b913      	cbnz	r3, 80124da <__strftime+0x7de>
 80124d4:	2337      	movs	r3, #55	; 0x37
 80124d6:	7013      	strb	r3, [r2, #0]
 80124d8:	e512      	b.n	8011f00 <__strftime+0x204>
 80124da:	3330      	adds	r3, #48	; 0x30
 80124dc:	e7fb      	b.n	80124d6 <__strftime+0x7da>
 80124de:	69eb      	ldr	r3, [r5, #28]
 80124e0:	69aa      	ldr	r2, [r5, #24]
 80124e2:	3307      	adds	r3, #7
 80124e4:	1a9b      	subs	r3, r3, r2
 80124e6:	2207      	movs	r2, #7
 80124e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80124ec:	e62f      	b.n	801214e <__strftime+0x452>
 80124ee:	4628      	mov	r0, r5
 80124f0:	f7ff fba2 	bl	8011c38 <iso_year_adjust>
 80124f4:	69aa      	ldr	r2, [r5, #24]
 80124f6:	b132      	cbz	r2, 8012506 <__strftime+0x80a>
 80124f8:	3a01      	subs	r2, #1
 80124fa:	2800      	cmp	r0, #0
 80124fc:	dc28      	bgt.n	8012550 <__strftime+0x854>
 80124fe:	69eb      	ldr	r3, [r5, #28]
 8012500:	d103      	bne.n	801250a <__strftime+0x80e>
 8012502:	330a      	adds	r3, #10
 8012504:	e7ee      	b.n	80124e4 <__strftime+0x7e8>
 8012506:	2206      	movs	r2, #6
 8012508:	e7f7      	b.n	80124fa <__strftime+0x7fe>
 801250a:	6968      	ldr	r0, [r5, #20]
 801250c:	2800      	cmp	r0, #0
 801250e:	eba2 0303 	sub.w	r3, r2, r3
 8012512:	f240 726b 	movw	r2, #1899	; 0x76b
 8012516:	bfa8      	it	ge
 8012518:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 801251c:	4410      	add	r0, r2
 801251e:	0782      	lsls	r2, r0, #30
 8012520:	d105      	bne.n	801252e <__strftime+0x832>
 8012522:	2264      	movs	r2, #100	; 0x64
 8012524:	fb90 f1f2 	sdiv	r1, r0, r2
 8012528:	fb02 0111 	mls	r1, r2, r1, r0
 801252c:	b971      	cbnz	r1, 801254c <__strftime+0x850>
 801252e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012532:	fb90 f2f1 	sdiv	r2, r0, r1
 8012536:	fb01 0212 	mls	r2, r1, r2, r0
 801253a:	fab2 f282 	clz	r2, r2
 801253e:	0952      	lsrs	r2, r2, #5
 8012540:	1a9a      	subs	r2, r3, r2
 8012542:	2a05      	cmp	r2, #5
 8012544:	bfb4      	ite	lt
 8012546:	2335      	movlt	r3, #53	; 0x35
 8012548:	2334      	movge	r3, #52	; 0x34
 801254a:	e600      	b.n	801214e <__strftime+0x452>
 801254c:	2201      	movs	r2, #1
 801254e:	e7f7      	b.n	8012540 <__strftime+0x844>
 8012550:	2301      	movs	r3, #1
 8012552:	e5fc      	b.n	801214e <__strftime+0x452>
 8012554:	f108 33ff 	add.w	r3, r8, #4294967295
 8012558:	42a3      	cmp	r3, r4
 801255a:	f67f abfe 	bls.w	8011d5a <__strftime+0x5e>
 801255e:	69ab      	ldr	r3, [r5, #24]
 8012560:	3330      	adds	r3, #48	; 0x30
 8012562:	e6d1      	b.n	8012308 <__strftime+0x60c>
 8012564:	69ab      	ldr	r3, [r5, #24]
 8012566:	b13b      	cbz	r3, 8012578 <__strftime+0x87c>
 8012568:	3b01      	subs	r3, #1
 801256a:	69ea      	ldr	r2, [r5, #28]
 801256c:	3207      	adds	r2, #7
 801256e:	1ad2      	subs	r2, r2, r3
 8012570:	2307      	movs	r3, #7
 8012572:	fb92 f3f3 	sdiv	r3, r2, r3
 8012576:	e5ea      	b.n	801214e <__strftime+0x452>
 8012578:	2306      	movs	r3, #6
 801257a:	e7f6      	b.n	801256a <__strftime+0x86e>
 801257c:	6968      	ldr	r0, [r5, #20]
 801257e:	2800      	cmp	r0, #0
 8012580:	db05      	blt.n	801258e <__strftime+0x892>
 8012582:	2264      	movs	r2, #100	; 0x64
 8012584:	fb90 f3f2 	sdiv	r3, r0, r2
 8012588:	fb03 0312 	mls	r3, r3, r2, r0
 801258c:	e5df      	b.n	801214e <__strftime+0x452>
 801258e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8012592:	f000 fcf3 	bl	8012f7c <abs>
 8012596:	e7f4      	b.n	8012582 <__strftime+0x886>
 8012598:	696b      	ldr	r3, [r5, #20]
 801259a:	4a4c      	ldr	r2, [pc, #304]	; (80126cc <__strftime+0x9d0>)
 801259c:	4293      	cmp	r3, r2
 801259e:	da09      	bge.n	80125b4 <__strftime+0x8b8>
 80125a0:	212d      	movs	r1, #45	; 0x2d
 80125a2:	f88d 1020 	strb.w	r1, [sp, #32]
 80125a6:	eba2 0a03 	sub.w	sl, r2, r3
 80125aa:	b106      	cbz	r6, 80125ae <__strftime+0x8b2>
 80125ac:	3e01      	subs	r6, #1
 80125ae:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80125b2:	e00b      	b.n	80125cc <__strftime+0x8d0>
 80125b4:	2f2b      	cmp	r7, #43	; 0x2b
 80125b6:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 80125ba:	d106      	bne.n	80125ca <__strftime+0x8ce>
 80125bc:	f242 730f 	movw	r3, #9999	; 0x270f
 80125c0:	459a      	cmp	sl, r3
 80125c2:	d902      	bls.n	80125ca <__strftime+0x8ce>
 80125c4:	f88d 7020 	strb.w	r7, [sp, #32]
 80125c8:	e7ef      	b.n	80125aa <__strftime+0x8ae>
 80125ca:	ab08      	add	r3, sp, #32
 80125cc:	2225      	movs	r2, #37	; 0x25
 80125ce:	701a      	strb	r2, [r3, #0]
 80125d0:	b937      	cbnz	r7, 80125e0 <__strftime+0x8e4>
 80125d2:	1c58      	adds	r0, r3, #1
 80125d4:	493e      	ldr	r1, [pc, #248]	; (80126d0 <__strftime+0x9d4>)
 80125d6:	f001 fbd3 	bl	8013d80 <strcpy>
 80125da:	f8cd a000 	str.w	sl, [sp]
 80125de:	e665      	b.n	80122ac <__strftime+0x5b0>
 80125e0:	2230      	movs	r2, #48	; 0x30
 80125e2:	1c98      	adds	r0, r3, #2
 80125e4:	705a      	strb	r2, [r3, #1]
 80125e6:	e7f5      	b.n	80125d4 <__strftime+0x8d8>
 80125e8:	6a2b      	ldr	r3, [r5, #32]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f6ff ac88 	blt.w	8011f00 <__strftime+0x204>
 80125f0:	f000 f9c8 	bl	8012984 <__tz_lock>
 80125f4:	9b04      	ldr	r3, [sp, #16]
 80125f6:	b90b      	cbnz	r3, 80125fc <__strftime+0x900>
 80125f8:	f000 f9d0 	bl	801299c <_tzset_unlocked>
 80125fc:	f000 fd9e 	bl	801313c <__gettzinfo>
 8012600:	6a2b      	ldr	r3, [r5, #32]
 8012602:	2b00      	cmp	r3, #0
 8012604:	bfcc      	ite	gt
 8012606:	2350      	movgt	r3, #80	; 0x50
 8012608:	2328      	movle	r3, #40	; 0x28
 801260a:	eb09 0704 	add.w	r7, r9, r4
 801260e:	58c6      	ldr	r6, [r0, r3]
 8012610:	f000 f9be 	bl	8012990 <__tz_unlock>
 8012614:	4276      	negs	r6, r6
 8012616:	233c      	movs	r3, #60	; 0x3c
 8012618:	fb96 f0f3 	sdiv	r0, r6, r3
 801261c:	f000 fe52 	bl	80132c4 <labs>
 8012620:	233c      	movs	r3, #60	; 0x3c
 8012622:	eba8 0a04 	sub.w	sl, r8, r4
 8012626:	fb90 f2f3 	sdiv	r2, r0, r3
 801262a:	fb02 0013 	mls	r0, r2, r3, r0
 801262e:	9000      	str	r0, [sp, #0]
 8012630:	4a28      	ldr	r2, [pc, #160]	; (80126d4 <__strftime+0x9d8>)
 8012632:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8012636:	4651      	mov	r1, sl
 8012638:	4638      	mov	r0, r7
 801263a:	fb96 f3f3 	sdiv	r3, r6, r3
 801263e:	f001 fb3f 	bl	8013cc0 <sniprintf>
 8012642:	2800      	cmp	r0, #0
 8012644:	f6ff ab89 	blt.w	8011d5a <__strftime+0x5e>
 8012648:	4404      	add	r4, r0
 801264a:	45a0      	cmp	r8, r4
 801264c:	f67f ab85 	bls.w	8011d5a <__strftime+0x5e>
 8012650:	2301      	movs	r3, #1
 8012652:	9304      	str	r3, [sp, #16]
 8012654:	e454      	b.n	8011f00 <__strftime+0x204>
 8012656:	6a2b      	ldr	r3, [r5, #32]
 8012658:	2b00      	cmp	r3, #0
 801265a:	f6ff ac51 	blt.w	8011f00 <__strftime+0x204>
 801265e:	f000 f991 	bl	8012984 <__tz_lock>
 8012662:	9b04      	ldr	r3, [sp, #16]
 8012664:	b90b      	cbnz	r3, 801266a <__strftime+0x96e>
 8012666:	f000 f999 	bl	801299c <_tzset_unlocked>
 801266a:	6a2b      	ldr	r3, [r5, #32]
 801266c:	4a1a      	ldr	r2, [pc, #104]	; (80126d8 <__strftime+0x9dc>)
 801266e:	2b00      	cmp	r3, #0
 8012670:	bfd4      	ite	le
 8012672:	2300      	movle	r3, #0
 8012674:	2301      	movgt	r3, #1
 8012676:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 801267a:	4630      	mov	r0, r6
 801267c:	f7ed fdde 	bl	800023c <strlen>
 8012680:	3e01      	subs	r6, #1
 8012682:	4420      	add	r0, r4
 8012684:	f108 33ff 	add.w	r3, r8, #4294967295
 8012688:	42a0      	cmp	r0, r4
 801268a:	d102      	bne.n	8012692 <__strftime+0x996>
 801268c:	f000 f980 	bl	8012990 <__tz_unlock>
 8012690:	e7de      	b.n	8012650 <__strftime+0x954>
 8012692:	42a3      	cmp	r3, r4
 8012694:	d905      	bls.n	80126a2 <__strftime+0x9a6>
 8012696:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801269a:	f809 2004 	strb.w	r2, [r9, r4]
 801269e:	3401      	adds	r4, #1
 80126a0:	e7f2      	b.n	8012688 <__strftime+0x98c>
 80126a2:	f000 f975 	bl	8012990 <__tz_unlock>
 80126a6:	f7ff bb58 	b.w	8011d5a <__strftime+0x5e>
 80126aa:	f108 33ff 	add.w	r3, r8, #4294967295
 80126ae:	42a3      	cmp	r3, r4
 80126b0:	f67f ab53 	bls.w	8011d5a <__strftime+0x5e>
 80126b4:	2325      	movs	r3, #37	; 0x25
 80126b6:	e627      	b.n	8012308 <__strftime+0x60c>
 80126b8:	f1b8 0f00 	cmp.w	r8, #0
 80126bc:	d002      	beq.n	80126c4 <__strftime+0x9c8>
 80126be:	2300      	movs	r3, #0
 80126c0:	f809 3004 	strb.w	r3, [r9, r4]
 80126c4:	4620      	mov	r0, r4
 80126c6:	b011      	add	sp, #68	; 0x44
 80126c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126cc:	fffff894 	.word	0xfffff894
 80126d0:	080170a7 	.word	0x080170a7
 80126d4:	080170c4 	.word	0x080170c4
 80126d8:	20000164 	.word	0x20000164

080126dc <strftime>:
 80126dc:	b513      	push	{r0, r1, r4, lr}
 80126de:	4c03      	ldr	r4, [pc, #12]	; (80126ec <strftime+0x10>)
 80126e0:	9400      	str	r4, [sp, #0]
 80126e2:	f7ff fb0b 	bl	8011cfc <__strftime>
 80126e6:	b002      	add	sp, #8
 80126e8:	bd10      	pop	{r4, pc}
 80126ea:	bf00      	nop
 80126ec:	200001c8 	.word	0x200001c8

080126f0 <_strtoul_l.isra.0>:
 80126f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80126f4:	4e3b      	ldr	r6, [pc, #236]	; (80127e4 <_strtoul_l.isra.0+0xf4>)
 80126f6:	4686      	mov	lr, r0
 80126f8:	468c      	mov	ip, r1
 80126fa:	4660      	mov	r0, ip
 80126fc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012700:	5da5      	ldrb	r5, [r4, r6]
 8012702:	f015 0508 	ands.w	r5, r5, #8
 8012706:	d1f8      	bne.n	80126fa <_strtoul_l.isra.0+0xa>
 8012708:	2c2d      	cmp	r4, #45	; 0x2d
 801270a:	d134      	bne.n	8012776 <_strtoul_l.isra.0+0x86>
 801270c:	f89c 4000 	ldrb.w	r4, [ip]
 8012710:	f04f 0801 	mov.w	r8, #1
 8012714:	f100 0c02 	add.w	ip, r0, #2
 8012718:	2b00      	cmp	r3, #0
 801271a:	d05e      	beq.n	80127da <_strtoul_l.isra.0+0xea>
 801271c:	2b10      	cmp	r3, #16
 801271e:	d10c      	bne.n	801273a <_strtoul_l.isra.0+0x4a>
 8012720:	2c30      	cmp	r4, #48	; 0x30
 8012722:	d10a      	bne.n	801273a <_strtoul_l.isra.0+0x4a>
 8012724:	f89c 0000 	ldrb.w	r0, [ip]
 8012728:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801272c:	2858      	cmp	r0, #88	; 0x58
 801272e:	d14f      	bne.n	80127d0 <_strtoul_l.isra.0+0xe0>
 8012730:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8012734:	2310      	movs	r3, #16
 8012736:	f10c 0c02 	add.w	ip, ip, #2
 801273a:	f04f 37ff 	mov.w	r7, #4294967295
 801273e:	2500      	movs	r5, #0
 8012740:	fbb7 f7f3 	udiv	r7, r7, r3
 8012744:	fb03 f907 	mul.w	r9, r3, r7
 8012748:	ea6f 0909 	mvn.w	r9, r9
 801274c:	4628      	mov	r0, r5
 801274e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8012752:	2e09      	cmp	r6, #9
 8012754:	d818      	bhi.n	8012788 <_strtoul_l.isra.0+0x98>
 8012756:	4634      	mov	r4, r6
 8012758:	42a3      	cmp	r3, r4
 801275a:	dd24      	ble.n	80127a6 <_strtoul_l.isra.0+0xb6>
 801275c:	2d00      	cmp	r5, #0
 801275e:	db1f      	blt.n	80127a0 <_strtoul_l.isra.0+0xb0>
 8012760:	4287      	cmp	r7, r0
 8012762:	d31d      	bcc.n	80127a0 <_strtoul_l.isra.0+0xb0>
 8012764:	d101      	bne.n	801276a <_strtoul_l.isra.0+0x7a>
 8012766:	45a1      	cmp	r9, r4
 8012768:	db1a      	blt.n	80127a0 <_strtoul_l.isra.0+0xb0>
 801276a:	fb00 4003 	mla	r0, r0, r3, r4
 801276e:	2501      	movs	r5, #1
 8012770:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8012774:	e7eb      	b.n	801274e <_strtoul_l.isra.0+0x5e>
 8012776:	2c2b      	cmp	r4, #43	; 0x2b
 8012778:	bf08      	it	eq
 801277a:	f89c 4000 	ldrbeq.w	r4, [ip]
 801277e:	46a8      	mov	r8, r5
 8012780:	bf08      	it	eq
 8012782:	f100 0c02 	addeq.w	ip, r0, #2
 8012786:	e7c7      	b.n	8012718 <_strtoul_l.isra.0+0x28>
 8012788:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 801278c:	2e19      	cmp	r6, #25
 801278e:	d801      	bhi.n	8012794 <_strtoul_l.isra.0+0xa4>
 8012790:	3c37      	subs	r4, #55	; 0x37
 8012792:	e7e1      	b.n	8012758 <_strtoul_l.isra.0+0x68>
 8012794:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8012798:	2e19      	cmp	r6, #25
 801279a:	d804      	bhi.n	80127a6 <_strtoul_l.isra.0+0xb6>
 801279c:	3c57      	subs	r4, #87	; 0x57
 801279e:	e7db      	b.n	8012758 <_strtoul_l.isra.0+0x68>
 80127a0:	f04f 35ff 	mov.w	r5, #4294967295
 80127a4:	e7e4      	b.n	8012770 <_strtoul_l.isra.0+0x80>
 80127a6:	2d00      	cmp	r5, #0
 80127a8:	da07      	bge.n	80127ba <_strtoul_l.isra.0+0xca>
 80127aa:	2322      	movs	r3, #34	; 0x22
 80127ac:	f8ce 3000 	str.w	r3, [lr]
 80127b0:	f04f 30ff 	mov.w	r0, #4294967295
 80127b4:	b942      	cbnz	r2, 80127c8 <_strtoul_l.isra.0+0xd8>
 80127b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127ba:	f1b8 0f00 	cmp.w	r8, #0
 80127be:	d000      	beq.n	80127c2 <_strtoul_l.isra.0+0xd2>
 80127c0:	4240      	negs	r0, r0
 80127c2:	2a00      	cmp	r2, #0
 80127c4:	d0f7      	beq.n	80127b6 <_strtoul_l.isra.0+0xc6>
 80127c6:	b10d      	cbz	r5, 80127cc <_strtoul_l.isra.0+0xdc>
 80127c8:	f10c 31ff 	add.w	r1, ip, #4294967295
 80127cc:	6011      	str	r1, [r2, #0]
 80127ce:	e7f2      	b.n	80127b6 <_strtoul_l.isra.0+0xc6>
 80127d0:	2430      	movs	r4, #48	; 0x30
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d1b1      	bne.n	801273a <_strtoul_l.isra.0+0x4a>
 80127d6:	2308      	movs	r3, #8
 80127d8:	e7af      	b.n	801273a <_strtoul_l.isra.0+0x4a>
 80127da:	2c30      	cmp	r4, #48	; 0x30
 80127dc:	d0a2      	beq.n	8012724 <_strtoul_l.isra.0+0x34>
 80127de:	230a      	movs	r3, #10
 80127e0:	e7ab      	b.n	801273a <_strtoul_l.isra.0+0x4a>
 80127e2:	bf00      	nop
 80127e4:	08017371 	.word	0x08017371

080127e8 <_strtoul_r>:
 80127e8:	f7ff bf82 	b.w	80126f0 <_strtoul_l.isra.0>

080127ec <strtoul>:
 80127ec:	4613      	mov	r3, r2
 80127ee:	460a      	mov	r2, r1
 80127f0:	4601      	mov	r1, r0
 80127f2:	4802      	ldr	r0, [pc, #8]	; (80127fc <strtoul+0x10>)
 80127f4:	6800      	ldr	r0, [r0, #0]
 80127f6:	f7ff bf7b 	b.w	80126f0 <_strtoul_l.isra.0>
 80127fa:	bf00      	nop
 80127fc:	20000100 	.word	0x20000100

08012800 <time>:
 8012800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012802:	4b0b      	ldr	r3, [pc, #44]	; (8012830 <time+0x30>)
 8012804:	2200      	movs	r2, #0
 8012806:	4669      	mov	r1, sp
 8012808:	4604      	mov	r4, r0
 801280a:	6818      	ldr	r0, [r3, #0]
 801280c:	f000 fc84 	bl	8013118 <_gettimeofday_r>
 8012810:	2800      	cmp	r0, #0
 8012812:	bfbe      	ittt	lt
 8012814:	f04f 32ff 	movlt.w	r2, #4294967295
 8012818:	f04f 33ff 	movlt.w	r3, #4294967295
 801281c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8012820:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012824:	b10c      	cbz	r4, 801282a <time+0x2a>
 8012826:	e9c4 0100 	strd	r0, r1, [r4]
 801282a:	b004      	add	sp, #16
 801282c:	bd10      	pop	{r4, pc}
 801282e:	bf00      	nop
 8012830:	20000100 	.word	0x20000100

08012834 <__tzcalc_limits>:
 8012834:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012838:	4680      	mov	r8, r0
 801283a:	f000 fc7f 	bl	801313c <__gettzinfo>
 801283e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8012842:	4598      	cmp	r8, r3
 8012844:	f340 8098 	ble.w	8012978 <__tzcalc_limits+0x144>
 8012848:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 801284c:	4443      	add	r3, r8
 801284e:	109b      	asrs	r3, r3, #2
 8012850:	f240 126d 	movw	r2, #365	; 0x16d
 8012854:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8012858:	fb02 3505 	mla	r5, r2, r5, r3
 801285c:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8012860:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8012864:	fb93 f3f2 	sdiv	r3, r3, r2
 8012868:	441d      	add	r5, r3
 801286a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801286e:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8012872:	fb98 f7f3 	sdiv	r7, r8, r3
 8012876:	fb03 8717 	mls	r7, r3, r7, r8
 801287a:	4442      	add	r2, r8
 801287c:	fab7 fc87 	clz	ip, r7
 8012880:	fbb2 f2f3 	udiv	r2, r2, r3
 8012884:	f008 0303 	and.w	r3, r8, #3
 8012888:	4415      	add	r5, r2
 801288a:	2264      	movs	r2, #100	; 0x64
 801288c:	f8c0 8004 	str.w	r8, [r0, #4]
 8012890:	fb98 f6f2 	sdiv	r6, r8, r2
 8012894:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8012898:	fb02 8616 	mls	r6, r2, r6, r8
 801289c:	4604      	mov	r4, r0
 801289e:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80128a2:	9300      	str	r3, [sp, #0]
 80128a4:	f04f 0e07 	mov.w	lr, #7
 80128a8:	7a22      	ldrb	r2, [r4, #8]
 80128aa:	6963      	ldr	r3, [r4, #20]
 80128ac:	2a4a      	cmp	r2, #74	; 0x4a
 80128ae:	d128      	bne.n	8012902 <__tzcalc_limits+0xce>
 80128b0:	9900      	ldr	r1, [sp, #0]
 80128b2:	18ea      	adds	r2, r5, r3
 80128b4:	b901      	cbnz	r1, 80128b8 <__tzcalc_limits+0x84>
 80128b6:	b906      	cbnz	r6, 80128ba <__tzcalc_limits+0x86>
 80128b8:	bb0f      	cbnz	r7, 80128fe <__tzcalc_limits+0xca>
 80128ba:	2b3b      	cmp	r3, #59	; 0x3b
 80128bc:	bfd4      	ite	le
 80128be:	2300      	movle	r3, #0
 80128c0:	2301      	movgt	r3, #1
 80128c2:	4413      	add	r3, r2
 80128c4:	1e5a      	subs	r2, r3, #1
 80128c6:	69a3      	ldr	r3, [r4, #24]
 80128c8:	492c      	ldr	r1, [pc, #176]	; (801297c <__tzcalc_limits+0x148>)
 80128ca:	fb01 3202 	mla	r2, r1, r2, r3
 80128ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80128d0:	4413      	add	r3, r2
 80128d2:	461a      	mov	r2, r3
 80128d4:	17db      	asrs	r3, r3, #31
 80128d6:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80128da:	3428      	adds	r4, #40	; 0x28
 80128dc:	45a3      	cmp	fp, r4
 80128de:	d1e3      	bne.n	80128a8 <__tzcalc_limits+0x74>
 80128e0:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 80128e4:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 80128e8:	4294      	cmp	r4, r2
 80128ea:	eb75 0303 	sbcs.w	r3, r5, r3
 80128ee:	bfb4      	ite	lt
 80128f0:	2301      	movlt	r3, #1
 80128f2:	2300      	movge	r3, #0
 80128f4:	6003      	str	r3, [r0, #0]
 80128f6:	2001      	movs	r0, #1
 80128f8:	b003      	add	sp, #12
 80128fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128fe:	2300      	movs	r3, #0
 8012900:	e7df      	b.n	80128c2 <__tzcalc_limits+0x8e>
 8012902:	2a44      	cmp	r2, #68	; 0x44
 8012904:	d101      	bne.n	801290a <__tzcalc_limits+0xd6>
 8012906:	18ea      	adds	r2, r5, r3
 8012908:	e7dd      	b.n	80128c6 <__tzcalc_limits+0x92>
 801290a:	9a00      	ldr	r2, [sp, #0]
 801290c:	bb72      	cbnz	r2, 801296c <__tzcalc_limits+0x138>
 801290e:	2e00      	cmp	r6, #0
 8012910:	bf0c      	ite	eq
 8012912:	46e0      	moveq	r8, ip
 8012914:	f04f 0801 	movne.w	r8, #1
 8012918:	4919      	ldr	r1, [pc, #100]	; (8012980 <__tzcalc_limits+0x14c>)
 801291a:	68e2      	ldr	r2, [r4, #12]
 801291c:	9201      	str	r2, [sp, #4]
 801291e:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8012922:	fb0a 1808 	mla	r8, sl, r8, r1
 8012926:	462a      	mov	r2, r5
 8012928:	f04f 0900 	mov.w	r9, #0
 801292c:	f1a8 0804 	sub.w	r8, r8, #4
 8012930:	9901      	ldr	r1, [sp, #4]
 8012932:	f109 0901 	add.w	r9, r9, #1
 8012936:	4549      	cmp	r1, r9
 8012938:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 801293c:	dc18      	bgt.n	8012970 <__tzcalc_limits+0x13c>
 801293e:	f102 0804 	add.w	r8, r2, #4
 8012942:	fb98 f9fe 	sdiv	r9, r8, lr
 8012946:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 801294a:	eba8 0909 	sub.w	r9, r8, r9
 801294e:	ebb3 0909 	subs.w	r9, r3, r9
 8012952:	6923      	ldr	r3, [r4, #16]
 8012954:	f103 33ff 	add.w	r3, r3, #4294967295
 8012958:	bf48      	it	mi
 801295a:	f109 0907 	addmi.w	r9, r9, #7
 801295e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8012962:	444b      	add	r3, r9
 8012964:	4553      	cmp	r3, sl
 8012966:	da05      	bge.n	8012974 <__tzcalc_limits+0x140>
 8012968:	441a      	add	r2, r3
 801296a:	e7ac      	b.n	80128c6 <__tzcalc_limits+0x92>
 801296c:	46e0      	mov	r8, ip
 801296e:	e7d3      	b.n	8012918 <__tzcalc_limits+0xe4>
 8012970:	4452      	add	r2, sl
 8012972:	e7dd      	b.n	8012930 <__tzcalc_limits+0xfc>
 8012974:	3b07      	subs	r3, #7
 8012976:	e7f5      	b.n	8012964 <__tzcalc_limits+0x130>
 8012978:	2000      	movs	r0, #0
 801297a:	e7bd      	b.n	80128f8 <__tzcalc_limits+0xc4>
 801297c:	00015180 	.word	0x00015180
 8012980:	08016fb8 	.word	0x08016fb8

08012984 <__tz_lock>:
 8012984:	4801      	ldr	r0, [pc, #4]	; (801298c <__tz_lock+0x8>)
 8012986:	f7fe bee7 	b.w	8011758 <__retarget_lock_acquire>
 801298a:	bf00      	nop
 801298c:	20000b5f 	.word	0x20000b5f

08012990 <__tz_unlock>:
 8012990:	4801      	ldr	r0, [pc, #4]	; (8012998 <__tz_unlock+0x8>)
 8012992:	f7fe bee3 	b.w	801175c <__retarget_lock_release>
 8012996:	bf00      	nop
 8012998:	20000b5f 	.word	0x20000b5f

0801299c <_tzset_unlocked>:
 801299c:	4b01      	ldr	r3, [pc, #4]	; (80129a4 <_tzset_unlocked+0x8>)
 801299e:	6818      	ldr	r0, [r3, #0]
 80129a0:	f000 b802 	b.w	80129a8 <_tzset_unlocked_r>
 80129a4:	20000100 	.word	0x20000100

080129a8 <_tzset_unlocked_r>:
 80129a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ac:	b08d      	sub	sp, #52	; 0x34
 80129ae:	4607      	mov	r7, r0
 80129b0:	f000 fbc4 	bl	801313c <__gettzinfo>
 80129b4:	49ae      	ldr	r1, [pc, #696]	; (8012c70 <_tzset_unlocked_r+0x2c8>)
 80129b6:	4eaf      	ldr	r6, [pc, #700]	; (8012c74 <_tzset_unlocked_r+0x2cc>)
 80129b8:	4605      	mov	r5, r0
 80129ba:	4638      	mov	r0, r7
 80129bc:	f000 fba4 	bl	8013108 <_getenv_r>
 80129c0:	4604      	mov	r4, r0
 80129c2:	b970      	cbnz	r0, 80129e2 <_tzset_unlocked_r+0x3a>
 80129c4:	4bac      	ldr	r3, [pc, #688]	; (8012c78 <_tzset_unlocked_r+0x2d0>)
 80129c6:	4aad      	ldr	r2, [pc, #692]	; (8012c7c <_tzset_unlocked_r+0x2d4>)
 80129c8:	6018      	str	r0, [r3, #0]
 80129ca:	4bad      	ldr	r3, [pc, #692]	; (8012c80 <_tzset_unlocked_r+0x2d8>)
 80129cc:	6018      	str	r0, [r3, #0]
 80129ce:	4bad      	ldr	r3, [pc, #692]	; (8012c84 <_tzset_unlocked_r+0x2dc>)
 80129d0:	6830      	ldr	r0, [r6, #0]
 80129d2:	e9c3 2200 	strd	r2, r2, [r3]
 80129d6:	f7fe ff2f 	bl	8011838 <free>
 80129da:	6034      	str	r4, [r6, #0]
 80129dc:	b00d      	add	sp, #52	; 0x34
 80129de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129e2:	6831      	ldr	r1, [r6, #0]
 80129e4:	2900      	cmp	r1, #0
 80129e6:	d15f      	bne.n	8012aa8 <_tzset_unlocked_r+0x100>
 80129e8:	6830      	ldr	r0, [r6, #0]
 80129ea:	f7fe ff25 	bl	8011838 <free>
 80129ee:	4620      	mov	r0, r4
 80129f0:	f7ed fc24 	bl	800023c <strlen>
 80129f4:	1c41      	adds	r1, r0, #1
 80129f6:	4638      	mov	r0, r7
 80129f8:	f7fe ff8c 	bl	8011914 <_malloc_r>
 80129fc:	6030      	str	r0, [r6, #0]
 80129fe:	2800      	cmp	r0, #0
 8012a00:	d157      	bne.n	8012ab2 <_tzset_unlocked_r+0x10a>
 8012a02:	7823      	ldrb	r3, [r4, #0]
 8012a04:	4aa0      	ldr	r2, [pc, #640]	; (8012c88 <_tzset_unlocked_r+0x2e0>)
 8012a06:	49a1      	ldr	r1, [pc, #644]	; (8012c8c <_tzset_unlocked_r+0x2e4>)
 8012a08:	2b3a      	cmp	r3, #58	; 0x3a
 8012a0a:	bf08      	it	eq
 8012a0c:	3401      	addeq	r4, #1
 8012a0e:	ae0a      	add	r6, sp, #40	; 0x28
 8012a10:	4633      	mov	r3, r6
 8012a12:	4620      	mov	r0, r4
 8012a14:	f001 f988 	bl	8013d28 <siscanf>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	dddf      	ble.n	80129dc <_tzset_unlocked_r+0x34>
 8012a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a1e:	18e7      	adds	r7, r4, r3
 8012a20:	5ce3      	ldrb	r3, [r4, r3]
 8012a22:	2b2d      	cmp	r3, #45	; 0x2d
 8012a24:	d149      	bne.n	8012aba <_tzset_unlocked_r+0x112>
 8012a26:	3701      	adds	r7, #1
 8012a28:	f04f 34ff 	mov.w	r4, #4294967295
 8012a2c:	f10d 0a20 	add.w	sl, sp, #32
 8012a30:	f10d 0b1e 	add.w	fp, sp, #30
 8012a34:	f04f 0800 	mov.w	r8, #0
 8012a38:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8012a3c:	4994      	ldr	r1, [pc, #592]	; (8012c90 <_tzset_unlocked_r+0x2e8>)
 8012a3e:	9603      	str	r6, [sp, #12]
 8012a40:	f8cd b000 	str.w	fp, [sp]
 8012a44:	4633      	mov	r3, r6
 8012a46:	aa07      	add	r2, sp, #28
 8012a48:	4638      	mov	r0, r7
 8012a4a:	f8ad 801e 	strh.w	r8, [sp, #30]
 8012a4e:	f8ad 8020 	strh.w	r8, [sp, #32]
 8012a52:	f001 f969 	bl	8013d28 <siscanf>
 8012a56:	4540      	cmp	r0, r8
 8012a58:	ddc0      	ble.n	80129dc <_tzset_unlocked_r+0x34>
 8012a5a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012a5e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012a62:	f8df 9238 	ldr.w	r9, [pc, #568]	; 8012c9c <_tzset_unlocked_r+0x2f4>
 8012a66:	213c      	movs	r1, #60	; 0x3c
 8012a68:	fb01 2203 	mla	r2, r1, r3, r2
 8012a6c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012a70:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012a74:	fb01 2303 	mla	r3, r1, r3, r2
 8012a78:	435c      	muls	r4, r3
 8012a7a:	62ac      	str	r4, [r5, #40]	; 0x28
 8012a7c:	4c81      	ldr	r4, [pc, #516]	; (8012c84 <_tzset_unlocked_r+0x2dc>)
 8012a7e:	4b82      	ldr	r3, [pc, #520]	; (8012c88 <_tzset_unlocked_r+0x2e0>)
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a84:	4981      	ldr	r1, [pc, #516]	; (8012c8c <_tzset_unlocked_r+0x2e4>)
 8012a86:	441f      	add	r7, r3
 8012a88:	464a      	mov	r2, r9
 8012a8a:	4633      	mov	r3, r6
 8012a8c:	4638      	mov	r0, r7
 8012a8e:	f001 f94b 	bl	8013d28 <siscanf>
 8012a92:	4540      	cmp	r0, r8
 8012a94:	dc16      	bgt.n	8012ac4 <_tzset_unlocked_r+0x11c>
 8012a96:	6823      	ldr	r3, [r4, #0]
 8012a98:	6063      	str	r3, [r4, #4]
 8012a9a:	4b77      	ldr	r3, [pc, #476]	; (8012c78 <_tzset_unlocked_r+0x2d0>)
 8012a9c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012a9e:	601a      	str	r2, [r3, #0]
 8012aa0:	4b77      	ldr	r3, [pc, #476]	; (8012c80 <_tzset_unlocked_r+0x2d8>)
 8012aa2:	f8c3 8000 	str.w	r8, [r3]
 8012aa6:	e799      	b.n	80129dc <_tzset_unlocked_r+0x34>
 8012aa8:	f7ed fbd0 	bl	800024c <strcmp>
 8012aac:	2800      	cmp	r0, #0
 8012aae:	d19b      	bne.n	80129e8 <_tzset_unlocked_r+0x40>
 8012ab0:	e794      	b.n	80129dc <_tzset_unlocked_r+0x34>
 8012ab2:	4621      	mov	r1, r4
 8012ab4:	f001 f964 	bl	8013d80 <strcpy>
 8012ab8:	e7a3      	b.n	8012a02 <_tzset_unlocked_r+0x5a>
 8012aba:	2b2b      	cmp	r3, #43	; 0x2b
 8012abc:	bf08      	it	eq
 8012abe:	3701      	addeq	r7, #1
 8012ac0:	2401      	movs	r4, #1
 8012ac2:	e7b3      	b.n	8012a2c <_tzset_unlocked_r+0x84>
 8012ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac6:	f8c4 9004 	str.w	r9, [r4, #4]
 8012aca:	18fc      	adds	r4, r7, r3
 8012acc:	5cfb      	ldrb	r3, [r7, r3]
 8012ace:	2b2d      	cmp	r3, #45	; 0x2d
 8012ad0:	f040 808b 	bne.w	8012bea <_tzset_unlocked_r+0x242>
 8012ad4:	3401      	adds	r4, #1
 8012ad6:	f04f 37ff 	mov.w	r7, #4294967295
 8012ada:	2300      	movs	r3, #0
 8012adc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012ae0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012ae4:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012ae8:	930a      	str	r3, [sp, #40]	; 0x28
 8012aea:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012aee:	e9cd b600 	strd	fp, r6, [sp]
 8012af2:	4967      	ldr	r1, [pc, #412]	; (8012c90 <_tzset_unlocked_r+0x2e8>)
 8012af4:	4633      	mov	r3, r6
 8012af6:	aa07      	add	r2, sp, #28
 8012af8:	4620      	mov	r0, r4
 8012afa:	f001 f915 	bl	8013d28 <siscanf>
 8012afe:	2800      	cmp	r0, #0
 8012b00:	dc78      	bgt.n	8012bf4 <_tzset_unlocked_r+0x24c>
 8012b02:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8012b04:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8012b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b0a:	652f      	str	r7, [r5, #80]	; 0x50
 8012b0c:	441c      	add	r4, r3
 8012b0e:	462f      	mov	r7, r5
 8012b10:	f04f 0900 	mov.w	r9, #0
 8012b14:	7823      	ldrb	r3, [r4, #0]
 8012b16:	2b2c      	cmp	r3, #44	; 0x2c
 8012b18:	bf08      	it	eq
 8012b1a:	3401      	addeq	r4, #1
 8012b1c:	f894 8000 	ldrb.w	r8, [r4]
 8012b20:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8012b24:	d178      	bne.n	8012c18 <_tzset_unlocked_r+0x270>
 8012b26:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8012b2a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8012b2e:	ab09      	add	r3, sp, #36	; 0x24
 8012b30:	9300      	str	r3, [sp, #0]
 8012b32:	4958      	ldr	r1, [pc, #352]	; (8012c94 <_tzset_unlocked_r+0x2ec>)
 8012b34:	9603      	str	r6, [sp, #12]
 8012b36:	4633      	mov	r3, r6
 8012b38:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f001 f8f3 	bl	8013d28 <siscanf>
 8012b42:	2803      	cmp	r0, #3
 8012b44:	f47f af4a 	bne.w	80129dc <_tzset_unlocked_r+0x34>
 8012b48:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8012b4c:	1e4b      	subs	r3, r1, #1
 8012b4e:	2b0b      	cmp	r3, #11
 8012b50:	f63f af44 	bhi.w	80129dc <_tzset_unlocked_r+0x34>
 8012b54:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8012b58:	1e53      	subs	r3, r2, #1
 8012b5a:	2b04      	cmp	r3, #4
 8012b5c:	f63f af3e 	bhi.w	80129dc <_tzset_unlocked_r+0x34>
 8012b60:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8012b64:	2b06      	cmp	r3, #6
 8012b66:	f63f af39 	bhi.w	80129dc <_tzset_unlocked_r+0x34>
 8012b6a:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8012b6e:	f887 8008 	strb.w	r8, [r7, #8]
 8012b72:	617b      	str	r3, [r7, #20]
 8012b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b76:	eb04 0803 	add.w	r8, r4, r3
 8012b7a:	2302      	movs	r3, #2
 8012b7c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8012b80:	2300      	movs	r3, #0
 8012b82:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012b86:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b8c:	f898 3000 	ldrb.w	r3, [r8]
 8012b90:	2b2f      	cmp	r3, #47	; 0x2f
 8012b92:	d109      	bne.n	8012ba8 <_tzset_unlocked_r+0x200>
 8012b94:	e9cd a602 	strd	sl, r6, [sp, #8]
 8012b98:	e9cd b600 	strd	fp, r6, [sp]
 8012b9c:	493e      	ldr	r1, [pc, #248]	; (8012c98 <_tzset_unlocked_r+0x2f0>)
 8012b9e:	4633      	mov	r3, r6
 8012ba0:	aa07      	add	r2, sp, #28
 8012ba2:	4640      	mov	r0, r8
 8012ba4:	f001 f8c0 	bl	8013d28 <siscanf>
 8012ba8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012bac:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012bb0:	213c      	movs	r1, #60	; 0x3c
 8012bb2:	fb01 2203 	mla	r2, r1, r3, r2
 8012bb6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012bba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012bbe:	fb01 2303 	mla	r3, r1, r3, r2
 8012bc2:	61bb      	str	r3, [r7, #24]
 8012bc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012bc6:	3728      	adds	r7, #40	; 0x28
 8012bc8:	4444      	add	r4, r8
 8012bca:	f1b9 0f00 	cmp.w	r9, #0
 8012bce:	d020      	beq.n	8012c12 <_tzset_unlocked_r+0x26a>
 8012bd0:	6868      	ldr	r0, [r5, #4]
 8012bd2:	f7ff fe2f 	bl	8012834 <__tzcalc_limits>
 8012bd6:	4b28      	ldr	r3, [pc, #160]	; (8012c78 <_tzset_unlocked_r+0x2d0>)
 8012bd8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8012bda:	601a      	str	r2, [r3, #0]
 8012bdc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8012bde:	1a9b      	subs	r3, r3, r2
 8012be0:	4a27      	ldr	r2, [pc, #156]	; (8012c80 <_tzset_unlocked_r+0x2d8>)
 8012be2:	bf18      	it	ne
 8012be4:	2301      	movne	r3, #1
 8012be6:	6013      	str	r3, [r2, #0]
 8012be8:	e6f8      	b.n	80129dc <_tzset_unlocked_r+0x34>
 8012bea:	2b2b      	cmp	r3, #43	; 0x2b
 8012bec:	bf08      	it	eq
 8012bee:	3401      	addeq	r4, #1
 8012bf0:	2701      	movs	r7, #1
 8012bf2:	e772      	b.n	8012ada <_tzset_unlocked_r+0x132>
 8012bf4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012bf8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8012bfc:	213c      	movs	r1, #60	; 0x3c
 8012bfe:	fb01 2203 	mla	r2, r1, r3, r2
 8012c02:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8012c06:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8012c0a:	fb01 2303 	mla	r3, r1, r3, r2
 8012c0e:	435f      	muls	r7, r3
 8012c10:	e77a      	b.n	8012b08 <_tzset_unlocked_r+0x160>
 8012c12:	f04f 0901 	mov.w	r9, #1
 8012c16:	e77d      	b.n	8012b14 <_tzset_unlocked_r+0x16c>
 8012c18:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8012c1c:	bf06      	itte	eq
 8012c1e:	3401      	addeq	r4, #1
 8012c20:	4643      	moveq	r3, r8
 8012c22:	2344      	movne	r3, #68	; 0x44
 8012c24:	220a      	movs	r2, #10
 8012c26:	a90b      	add	r1, sp, #44	; 0x2c
 8012c28:	4620      	mov	r0, r4
 8012c2a:	9305      	str	r3, [sp, #20]
 8012c2c:	f7ff fdde 	bl	80127ec <strtoul>
 8012c30:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8012c34:	9b05      	ldr	r3, [sp, #20]
 8012c36:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8012c3a:	45a0      	cmp	r8, r4
 8012c3c:	d114      	bne.n	8012c68 <_tzset_unlocked_r+0x2c0>
 8012c3e:	234d      	movs	r3, #77	; 0x4d
 8012c40:	f1b9 0f00 	cmp.w	r9, #0
 8012c44:	d107      	bne.n	8012c56 <_tzset_unlocked_r+0x2ae>
 8012c46:	722b      	strb	r3, [r5, #8]
 8012c48:	2103      	movs	r1, #3
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8012c50:	f8c5 9014 	str.w	r9, [r5, #20]
 8012c54:	e791      	b.n	8012b7a <_tzset_unlocked_r+0x1d2>
 8012c56:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8012c5a:	220b      	movs	r2, #11
 8012c5c:	2301      	movs	r3, #1
 8012c5e:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8012c62:	2300      	movs	r3, #0
 8012c64:	63eb      	str	r3, [r5, #60]	; 0x3c
 8012c66:	e788      	b.n	8012b7a <_tzset_unlocked_r+0x1d2>
 8012c68:	b280      	uxth	r0, r0
 8012c6a:	723b      	strb	r3, [r7, #8]
 8012c6c:	6178      	str	r0, [r7, #20]
 8012c6e:	e784      	b.n	8012b7a <_tzset_unlocked_r+0x1d2>
 8012c70:	080172f8 	.word	0x080172f8
 8012c74:	20000ab8 	.word	0x20000ab8
 8012c78:	20000ac0 	.word	0x20000ac0
 8012c7c:	080172fb 	.word	0x080172fb
 8012c80:	20000abc 	.word	0x20000abc
 8012c84:	20000164 	.word	0x20000164
 8012c88:	20000aab 	.word	0x20000aab
 8012c8c:	080172ff 	.word	0x080172ff
 8012c90:	08017322 	.word	0x08017322
 8012c94:	0801730e 	.word	0x0801730e
 8012c98:	08017321 	.word	0x08017321
 8012c9c:	20000aa0 	.word	0x20000aa0

08012ca0 <_vsniprintf_r>:
 8012ca0:	b530      	push	{r4, r5, lr}
 8012ca2:	1e14      	subs	r4, r2, #0
 8012ca4:	4605      	mov	r5, r0
 8012ca6:	b09b      	sub	sp, #108	; 0x6c
 8012ca8:	4618      	mov	r0, r3
 8012caa:	da05      	bge.n	8012cb8 <_vsniprintf_r+0x18>
 8012cac:	238b      	movs	r3, #139	; 0x8b
 8012cae:	602b      	str	r3, [r5, #0]
 8012cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8012cb4:	b01b      	add	sp, #108	; 0x6c
 8012cb6:	bd30      	pop	{r4, r5, pc}
 8012cb8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012cbc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012cc0:	bf14      	ite	ne
 8012cc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012cc6:	4623      	moveq	r3, r4
 8012cc8:	9302      	str	r3, [sp, #8]
 8012cca:	9305      	str	r3, [sp, #20]
 8012ccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cd0:	9100      	str	r1, [sp, #0]
 8012cd2:	9104      	str	r1, [sp, #16]
 8012cd4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012cd8:	4602      	mov	r2, r0
 8012cda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012cdc:	4669      	mov	r1, sp
 8012cde:	4628      	mov	r0, r5
 8012ce0:	f000 fba6 	bl	8013430 <_svfiprintf_r>
 8012ce4:	1c43      	adds	r3, r0, #1
 8012ce6:	bfbc      	itt	lt
 8012ce8:	238b      	movlt	r3, #139	; 0x8b
 8012cea:	602b      	strlt	r3, [r5, #0]
 8012cec:	2c00      	cmp	r4, #0
 8012cee:	d0e1      	beq.n	8012cb4 <_vsniprintf_r+0x14>
 8012cf0:	9b00      	ldr	r3, [sp, #0]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	701a      	strb	r2, [r3, #0]
 8012cf6:	e7dd      	b.n	8012cb4 <_vsniprintf_r+0x14>

08012cf8 <vsniprintf>:
 8012cf8:	b507      	push	{r0, r1, r2, lr}
 8012cfa:	9300      	str	r3, [sp, #0]
 8012cfc:	4613      	mov	r3, r2
 8012cfe:	460a      	mov	r2, r1
 8012d00:	4601      	mov	r1, r0
 8012d02:	4803      	ldr	r0, [pc, #12]	; (8012d10 <vsniprintf+0x18>)
 8012d04:	6800      	ldr	r0, [r0, #0]
 8012d06:	f7ff ffcb 	bl	8012ca0 <_vsniprintf_r>
 8012d0a:	b003      	add	sp, #12
 8012d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d10:	20000100 	.word	0x20000100

08012d14 <__swbuf_r>:
 8012d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d16:	460e      	mov	r6, r1
 8012d18:	4614      	mov	r4, r2
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	b118      	cbz	r0, 8012d26 <__swbuf_r+0x12>
 8012d1e:	6983      	ldr	r3, [r0, #24]
 8012d20:	b90b      	cbnz	r3, 8012d26 <__swbuf_r+0x12>
 8012d22:	f7fe f967 	bl	8010ff4 <__sinit>
 8012d26:	4b21      	ldr	r3, [pc, #132]	; (8012dac <__swbuf_r+0x98>)
 8012d28:	429c      	cmp	r4, r3
 8012d2a:	d12b      	bne.n	8012d84 <__swbuf_r+0x70>
 8012d2c:	686c      	ldr	r4, [r5, #4]
 8012d2e:	69a3      	ldr	r3, [r4, #24]
 8012d30:	60a3      	str	r3, [r4, #8]
 8012d32:	89a3      	ldrh	r3, [r4, #12]
 8012d34:	071a      	lsls	r2, r3, #28
 8012d36:	d52f      	bpl.n	8012d98 <__swbuf_r+0x84>
 8012d38:	6923      	ldr	r3, [r4, #16]
 8012d3a:	b36b      	cbz	r3, 8012d98 <__swbuf_r+0x84>
 8012d3c:	6923      	ldr	r3, [r4, #16]
 8012d3e:	6820      	ldr	r0, [r4, #0]
 8012d40:	1ac0      	subs	r0, r0, r3
 8012d42:	6963      	ldr	r3, [r4, #20]
 8012d44:	b2f6      	uxtb	r6, r6
 8012d46:	4283      	cmp	r3, r0
 8012d48:	4637      	mov	r7, r6
 8012d4a:	dc04      	bgt.n	8012d56 <__swbuf_r+0x42>
 8012d4c:	4621      	mov	r1, r4
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f7fe f8aa 	bl	8010ea8 <_fflush_r>
 8012d54:	bb30      	cbnz	r0, 8012da4 <__swbuf_r+0x90>
 8012d56:	68a3      	ldr	r3, [r4, #8]
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	60a3      	str	r3, [r4, #8]
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	1c5a      	adds	r2, r3, #1
 8012d60:	6022      	str	r2, [r4, #0]
 8012d62:	701e      	strb	r6, [r3, #0]
 8012d64:	6963      	ldr	r3, [r4, #20]
 8012d66:	3001      	adds	r0, #1
 8012d68:	4283      	cmp	r3, r0
 8012d6a:	d004      	beq.n	8012d76 <__swbuf_r+0x62>
 8012d6c:	89a3      	ldrh	r3, [r4, #12]
 8012d6e:	07db      	lsls	r3, r3, #31
 8012d70:	d506      	bpl.n	8012d80 <__swbuf_r+0x6c>
 8012d72:	2e0a      	cmp	r6, #10
 8012d74:	d104      	bne.n	8012d80 <__swbuf_r+0x6c>
 8012d76:	4621      	mov	r1, r4
 8012d78:	4628      	mov	r0, r5
 8012d7a:	f7fe f895 	bl	8010ea8 <_fflush_r>
 8012d7e:	b988      	cbnz	r0, 8012da4 <__swbuf_r+0x90>
 8012d80:	4638      	mov	r0, r7
 8012d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d84:	4b0a      	ldr	r3, [pc, #40]	; (8012db0 <__swbuf_r+0x9c>)
 8012d86:	429c      	cmp	r4, r3
 8012d88:	d101      	bne.n	8012d8e <__swbuf_r+0x7a>
 8012d8a:	68ac      	ldr	r4, [r5, #8]
 8012d8c:	e7cf      	b.n	8012d2e <__swbuf_r+0x1a>
 8012d8e:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <__swbuf_r+0xa0>)
 8012d90:	429c      	cmp	r4, r3
 8012d92:	bf08      	it	eq
 8012d94:	68ec      	ldreq	r4, [r5, #12]
 8012d96:	e7ca      	b.n	8012d2e <__swbuf_r+0x1a>
 8012d98:	4621      	mov	r1, r4
 8012d9a:	4628      	mov	r0, r5
 8012d9c:	f000 f81e 	bl	8012ddc <__swsetup_r>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d0cb      	beq.n	8012d3c <__swbuf_r+0x28>
 8012da4:	f04f 37ff 	mov.w	r7, #4294967295
 8012da8:	e7ea      	b.n	8012d80 <__swbuf_r+0x6c>
 8012daa:	bf00      	nop
 8012dac:	08016efc 	.word	0x08016efc
 8012db0:	08016f1c 	.word	0x08016f1c
 8012db4:	08016edc 	.word	0x08016edc

08012db8 <_write_r>:
 8012db8:	b538      	push	{r3, r4, r5, lr}
 8012dba:	4d07      	ldr	r5, [pc, #28]	; (8012dd8 <_write_r+0x20>)
 8012dbc:	4604      	mov	r4, r0
 8012dbe:	4608      	mov	r0, r1
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	602a      	str	r2, [r5, #0]
 8012dc6:	461a      	mov	r2, r3
 8012dc8:	f7ee f802 	bl	8000dd0 <_write>
 8012dcc:	1c43      	adds	r3, r0, #1
 8012dce:	d102      	bne.n	8012dd6 <_write_r+0x1e>
 8012dd0:	682b      	ldr	r3, [r5, #0]
 8012dd2:	b103      	cbz	r3, 8012dd6 <_write_r+0x1e>
 8012dd4:	6023      	str	r3, [r4, #0]
 8012dd6:	bd38      	pop	{r3, r4, r5, pc}
 8012dd8:	20000b64 	.word	0x20000b64

08012ddc <__swsetup_r>:
 8012ddc:	4b32      	ldr	r3, [pc, #200]	; (8012ea8 <__swsetup_r+0xcc>)
 8012dde:	b570      	push	{r4, r5, r6, lr}
 8012de0:	681d      	ldr	r5, [r3, #0]
 8012de2:	4606      	mov	r6, r0
 8012de4:	460c      	mov	r4, r1
 8012de6:	b125      	cbz	r5, 8012df2 <__swsetup_r+0x16>
 8012de8:	69ab      	ldr	r3, [r5, #24]
 8012dea:	b913      	cbnz	r3, 8012df2 <__swsetup_r+0x16>
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7fe f901 	bl	8010ff4 <__sinit>
 8012df2:	4b2e      	ldr	r3, [pc, #184]	; (8012eac <__swsetup_r+0xd0>)
 8012df4:	429c      	cmp	r4, r3
 8012df6:	d10f      	bne.n	8012e18 <__swsetup_r+0x3c>
 8012df8:	686c      	ldr	r4, [r5, #4]
 8012dfa:	89a3      	ldrh	r3, [r4, #12]
 8012dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e00:	0719      	lsls	r1, r3, #28
 8012e02:	d42c      	bmi.n	8012e5e <__swsetup_r+0x82>
 8012e04:	06dd      	lsls	r5, r3, #27
 8012e06:	d411      	bmi.n	8012e2c <__swsetup_r+0x50>
 8012e08:	2309      	movs	r3, #9
 8012e0a:	6033      	str	r3, [r6, #0]
 8012e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012e10:	81a3      	strh	r3, [r4, #12]
 8012e12:	f04f 30ff 	mov.w	r0, #4294967295
 8012e16:	e03e      	b.n	8012e96 <__swsetup_r+0xba>
 8012e18:	4b25      	ldr	r3, [pc, #148]	; (8012eb0 <__swsetup_r+0xd4>)
 8012e1a:	429c      	cmp	r4, r3
 8012e1c:	d101      	bne.n	8012e22 <__swsetup_r+0x46>
 8012e1e:	68ac      	ldr	r4, [r5, #8]
 8012e20:	e7eb      	b.n	8012dfa <__swsetup_r+0x1e>
 8012e22:	4b24      	ldr	r3, [pc, #144]	; (8012eb4 <__swsetup_r+0xd8>)
 8012e24:	429c      	cmp	r4, r3
 8012e26:	bf08      	it	eq
 8012e28:	68ec      	ldreq	r4, [r5, #12]
 8012e2a:	e7e6      	b.n	8012dfa <__swsetup_r+0x1e>
 8012e2c:	0758      	lsls	r0, r3, #29
 8012e2e:	d512      	bpl.n	8012e56 <__swsetup_r+0x7a>
 8012e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e32:	b141      	cbz	r1, 8012e46 <__swsetup_r+0x6a>
 8012e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e38:	4299      	cmp	r1, r3
 8012e3a:	d002      	beq.n	8012e42 <__swsetup_r+0x66>
 8012e3c:	4630      	mov	r0, r6
 8012e3e:	f7fe fd19 	bl	8011874 <_free_r>
 8012e42:	2300      	movs	r3, #0
 8012e44:	6363      	str	r3, [r4, #52]	; 0x34
 8012e46:	89a3      	ldrh	r3, [r4, #12]
 8012e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012e4c:	81a3      	strh	r3, [r4, #12]
 8012e4e:	2300      	movs	r3, #0
 8012e50:	6063      	str	r3, [r4, #4]
 8012e52:	6923      	ldr	r3, [r4, #16]
 8012e54:	6023      	str	r3, [r4, #0]
 8012e56:	89a3      	ldrh	r3, [r4, #12]
 8012e58:	f043 0308 	orr.w	r3, r3, #8
 8012e5c:	81a3      	strh	r3, [r4, #12]
 8012e5e:	6923      	ldr	r3, [r4, #16]
 8012e60:	b94b      	cbnz	r3, 8012e76 <__swsetup_r+0x9a>
 8012e62:	89a3      	ldrh	r3, [r4, #12]
 8012e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e6c:	d003      	beq.n	8012e76 <__swsetup_r+0x9a>
 8012e6e:	4621      	mov	r1, r4
 8012e70:	4630      	mov	r0, r6
 8012e72:	f7fe fc99 	bl	80117a8 <__smakebuf_r>
 8012e76:	89a0      	ldrh	r0, [r4, #12]
 8012e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012e7c:	f010 0301 	ands.w	r3, r0, #1
 8012e80:	d00a      	beq.n	8012e98 <__swsetup_r+0xbc>
 8012e82:	2300      	movs	r3, #0
 8012e84:	60a3      	str	r3, [r4, #8]
 8012e86:	6963      	ldr	r3, [r4, #20]
 8012e88:	425b      	negs	r3, r3
 8012e8a:	61a3      	str	r3, [r4, #24]
 8012e8c:	6923      	ldr	r3, [r4, #16]
 8012e8e:	b943      	cbnz	r3, 8012ea2 <__swsetup_r+0xc6>
 8012e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012e94:	d1ba      	bne.n	8012e0c <__swsetup_r+0x30>
 8012e96:	bd70      	pop	{r4, r5, r6, pc}
 8012e98:	0781      	lsls	r1, r0, #30
 8012e9a:	bf58      	it	pl
 8012e9c:	6963      	ldrpl	r3, [r4, #20]
 8012e9e:	60a3      	str	r3, [r4, #8]
 8012ea0:	e7f4      	b.n	8012e8c <__swsetup_r+0xb0>
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	e7f7      	b.n	8012e96 <__swsetup_r+0xba>
 8012ea6:	bf00      	nop
 8012ea8:	20000100 	.word	0x20000100
 8012eac:	08016efc 	.word	0x08016efc
 8012eb0:	08016f1c 	.word	0x08016f1c
 8012eb4:	08016edc 	.word	0x08016edc

08012eb8 <__register_exitproc>:
 8012eb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ebc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8012f78 <__register_exitproc+0xc0>
 8012ec0:	4606      	mov	r6, r0
 8012ec2:	f8d8 0000 	ldr.w	r0, [r8]
 8012ec6:	461f      	mov	r7, r3
 8012ec8:	460d      	mov	r5, r1
 8012eca:	4691      	mov	r9, r2
 8012ecc:	f7fe fc45 	bl	801175a <__retarget_lock_acquire_recursive>
 8012ed0:	4b25      	ldr	r3, [pc, #148]	; (8012f68 <__register_exitproc+0xb0>)
 8012ed2:	681c      	ldr	r4, [r3, #0]
 8012ed4:	b934      	cbnz	r4, 8012ee4 <__register_exitproc+0x2c>
 8012ed6:	4c25      	ldr	r4, [pc, #148]	; (8012f6c <__register_exitproc+0xb4>)
 8012ed8:	601c      	str	r4, [r3, #0]
 8012eda:	4b25      	ldr	r3, [pc, #148]	; (8012f70 <__register_exitproc+0xb8>)
 8012edc:	b113      	cbz	r3, 8012ee4 <__register_exitproc+0x2c>
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8012ee4:	6863      	ldr	r3, [r4, #4]
 8012ee6:	2b1f      	cmp	r3, #31
 8012ee8:	dd07      	ble.n	8012efa <__register_exitproc+0x42>
 8012eea:	f8d8 0000 	ldr.w	r0, [r8]
 8012eee:	f7fe fc36 	bl	801175e <__retarget_lock_release_recursive>
 8012ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012efa:	b34e      	cbz	r6, 8012f50 <__register_exitproc+0x98>
 8012efc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012f00:	b988      	cbnz	r0, 8012f26 <__register_exitproc+0x6e>
 8012f02:	4b1c      	ldr	r3, [pc, #112]	; (8012f74 <__register_exitproc+0xbc>)
 8012f04:	b923      	cbnz	r3, 8012f10 <__register_exitproc+0x58>
 8012f06:	f8d8 0000 	ldr.w	r0, [r8]
 8012f0a:	f7fe fc27 	bl	801175c <__retarget_lock_release>
 8012f0e:	e7f0      	b.n	8012ef2 <__register_exitproc+0x3a>
 8012f10:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012f14:	f7fe fc88 	bl	8011828 <malloc>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	d0f4      	beq.n	8012f06 <__register_exitproc+0x4e>
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8012f22:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8012f26:	6863      	ldr	r3, [r4, #4]
 8012f28:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	409a      	lsls	r2, r3
 8012f30:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8012f34:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8012f38:	4313      	orrs	r3, r2
 8012f3a:	2e02      	cmp	r6, #2
 8012f3c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8012f40:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8012f44:	bf02      	ittt	eq
 8012f46:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8012f4a:	431a      	orreq	r2, r3
 8012f4c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 8012f50:	6863      	ldr	r3, [r4, #4]
 8012f52:	f8d8 0000 	ldr.w	r0, [r8]
 8012f56:	1c5a      	adds	r2, r3, #1
 8012f58:	3302      	adds	r3, #2
 8012f5a:	6062      	str	r2, [r4, #4]
 8012f5c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8012f60:	f7fe fbfd 	bl	801175e <__retarget_lock_release_recursive>
 8012f64:	2000      	movs	r0, #0
 8012f66:	e7c6      	b.n	8012ef6 <__register_exitproc+0x3e>
 8012f68:	20000b50 	.word	0x20000b50
 8012f6c:	20000ac4 	.word	0x20000ac4
 8012f70:	00000000 	.word	0x00000000
 8012f74:	08011829 	.word	0x08011829
 8012f78:	2000016c 	.word	0x2000016c

08012f7c <abs>:
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	bfb8      	it	lt
 8012f80:	4240      	neglt	r0, r0
 8012f82:	4770      	bx	lr

08012f84 <__assert_func>:
 8012f84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012f86:	4614      	mov	r4, r2
 8012f88:	461a      	mov	r2, r3
 8012f8a:	4b09      	ldr	r3, [pc, #36]	; (8012fb0 <__assert_func+0x2c>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	4605      	mov	r5, r0
 8012f90:	68d8      	ldr	r0, [r3, #12]
 8012f92:	b14c      	cbz	r4, 8012fa8 <__assert_func+0x24>
 8012f94:	4b07      	ldr	r3, [pc, #28]	; (8012fb4 <__assert_func+0x30>)
 8012f96:	9100      	str	r1, [sp, #0]
 8012f98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012f9c:	4906      	ldr	r1, [pc, #24]	; (8012fb8 <__assert_func+0x34>)
 8012f9e:	462b      	mov	r3, r5
 8012fa0:	f000 f854 	bl	801304c <fiprintf>
 8012fa4:	f7fd fe72 	bl	8010c8c <abort>
 8012fa8:	4b04      	ldr	r3, [pc, #16]	; (8012fbc <__assert_func+0x38>)
 8012faa:	461c      	mov	r4, r3
 8012fac:	e7f3      	b.n	8012f96 <__assert_func+0x12>
 8012fae:	bf00      	nop
 8012fb0:	20000100 	.word	0x20000100
 8012fb4:	08017334 	.word	0x08017334
 8012fb8:	08017341 	.word	0x08017341
 8012fbc:	0801736f 	.word	0x0801736f

08012fc0 <_close_r>:
 8012fc0:	b538      	push	{r3, r4, r5, lr}
 8012fc2:	4d06      	ldr	r5, [pc, #24]	; (8012fdc <_close_r+0x1c>)
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4604      	mov	r4, r0
 8012fc8:	4608      	mov	r0, r1
 8012fca:	602b      	str	r3, [r5, #0]
 8012fcc:	f7ed ff1c 	bl	8000e08 <_close>
 8012fd0:	1c43      	adds	r3, r0, #1
 8012fd2:	d102      	bne.n	8012fda <_close_r+0x1a>
 8012fd4:	682b      	ldr	r3, [r5, #0]
 8012fd6:	b103      	cbz	r3, 8012fda <_close_r+0x1a>
 8012fd8:	6023      	str	r3, [r4, #0]
 8012fda:	bd38      	pop	{r3, r4, r5, pc}
 8012fdc:	20000b64 	.word	0x20000b64

08012fe0 <__sflags>:
 8012fe0:	780b      	ldrb	r3, [r1, #0]
 8012fe2:	2b72      	cmp	r3, #114	; 0x72
 8012fe4:	b530      	push	{r4, r5, lr}
 8012fe6:	d022      	beq.n	801302e <__sflags+0x4e>
 8012fe8:	2b77      	cmp	r3, #119	; 0x77
 8012fea:	d024      	beq.n	8013036 <__sflags+0x56>
 8012fec:	2b61      	cmp	r3, #97	; 0x61
 8012fee:	d027      	beq.n	8013040 <__sflags+0x60>
 8012ff0:	2316      	movs	r3, #22
 8012ff2:	6003      	str	r3, [r0, #0]
 8012ff4:	2000      	movs	r0, #0
 8012ff6:	bd30      	pop	{r4, r5, pc}
 8012ff8:	2d62      	cmp	r5, #98	; 0x62
 8012ffa:	d012      	beq.n	8013022 <__sflags+0x42>
 8012ffc:	2d78      	cmp	r5, #120	; 0x78
 8012ffe:	d013      	beq.n	8013028 <__sflags+0x48>
 8013000:	2d2b      	cmp	r5, #43	; 0x2b
 8013002:	d107      	bne.n	8013014 <__sflags+0x34>
 8013004:	f020 001c 	bic.w	r0, r0, #28
 8013008:	f023 0303 	bic.w	r3, r3, #3
 801300c:	f040 0010 	orr.w	r0, r0, #16
 8013010:	f043 0302 	orr.w	r3, r3, #2
 8013014:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8013018:	2d00      	cmp	r5, #0
 801301a:	d1ed      	bne.n	8012ff8 <__sflags+0x18>
 801301c:	4323      	orrs	r3, r4
 801301e:	6013      	str	r3, [r2, #0]
 8013020:	e7e9      	b.n	8012ff6 <__sflags+0x16>
 8013022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013026:	e7f5      	b.n	8013014 <__sflags+0x34>
 8013028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801302c:	e7f2      	b.n	8013014 <__sflags+0x34>
 801302e:	2400      	movs	r4, #0
 8013030:	4623      	mov	r3, r4
 8013032:	2004      	movs	r0, #4
 8013034:	e7ee      	b.n	8013014 <__sflags+0x34>
 8013036:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 801303a:	2301      	movs	r3, #1
 801303c:	2008      	movs	r0, #8
 801303e:	e7e9      	b.n	8013014 <__sflags+0x34>
 8013040:	f44f 7402 	mov.w	r4, #520	; 0x208
 8013044:	2301      	movs	r3, #1
 8013046:	f44f 7084 	mov.w	r0, #264	; 0x108
 801304a:	e7e3      	b.n	8013014 <__sflags+0x34>

0801304c <fiprintf>:
 801304c:	b40e      	push	{r1, r2, r3}
 801304e:	b503      	push	{r0, r1, lr}
 8013050:	4601      	mov	r1, r0
 8013052:	ab03      	add	r3, sp, #12
 8013054:	4805      	ldr	r0, [pc, #20]	; (801306c <fiprintf+0x20>)
 8013056:	f853 2b04 	ldr.w	r2, [r3], #4
 801305a:	6800      	ldr	r0, [r0, #0]
 801305c:	9301      	str	r3, [sp, #4]
 801305e:	f000 fb11 	bl	8013684 <_vfiprintf_r>
 8013062:	b002      	add	sp, #8
 8013064:	f85d eb04 	ldr.w	lr, [sp], #4
 8013068:	b003      	add	sp, #12
 801306a:	4770      	bx	lr
 801306c:	20000100 	.word	0x20000100

08013070 <_fstat_r>:
 8013070:	b538      	push	{r3, r4, r5, lr}
 8013072:	4d07      	ldr	r5, [pc, #28]	; (8013090 <_fstat_r+0x20>)
 8013074:	2300      	movs	r3, #0
 8013076:	4604      	mov	r4, r0
 8013078:	4608      	mov	r0, r1
 801307a:	4611      	mov	r1, r2
 801307c:	602b      	str	r3, [r5, #0]
 801307e:	f7ed fecf 	bl	8000e20 <_fstat>
 8013082:	1c43      	adds	r3, r0, #1
 8013084:	d102      	bne.n	801308c <_fstat_r+0x1c>
 8013086:	682b      	ldr	r3, [r5, #0]
 8013088:	b103      	cbz	r3, 801308c <_fstat_r+0x1c>
 801308a:	6023      	str	r3, [r4, #0]
 801308c:	bd38      	pop	{r3, r4, r5, pc}
 801308e:	bf00      	nop
 8013090:	20000b64 	.word	0x20000b64

08013094 <_findenv_r>:
 8013094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013098:	4607      	mov	r7, r0
 801309a:	4689      	mov	r9, r1
 801309c:	4616      	mov	r6, r2
 801309e:	f000 fe97 	bl	8013dd0 <__env_lock>
 80130a2:	4b18      	ldr	r3, [pc, #96]	; (8013104 <_findenv_r+0x70>)
 80130a4:	681c      	ldr	r4, [r3, #0]
 80130a6:	469a      	mov	sl, r3
 80130a8:	b134      	cbz	r4, 80130b8 <_findenv_r+0x24>
 80130aa:	464b      	mov	r3, r9
 80130ac:	4698      	mov	r8, r3
 80130ae:	f813 1b01 	ldrb.w	r1, [r3], #1
 80130b2:	b139      	cbz	r1, 80130c4 <_findenv_r+0x30>
 80130b4:	293d      	cmp	r1, #61	; 0x3d
 80130b6:	d1f9      	bne.n	80130ac <_findenv_r+0x18>
 80130b8:	4638      	mov	r0, r7
 80130ba:	f000 fe8f 	bl	8013ddc <__env_unlock>
 80130be:	2000      	movs	r0, #0
 80130c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c4:	eba8 0809 	sub.w	r8, r8, r9
 80130c8:	46a3      	mov	fp, r4
 80130ca:	f854 0b04 	ldr.w	r0, [r4], #4
 80130ce:	2800      	cmp	r0, #0
 80130d0:	d0f2      	beq.n	80130b8 <_findenv_r+0x24>
 80130d2:	4642      	mov	r2, r8
 80130d4:	4649      	mov	r1, r9
 80130d6:	f000 fe5b 	bl	8013d90 <strncmp>
 80130da:	2800      	cmp	r0, #0
 80130dc:	d1f4      	bne.n	80130c8 <_findenv_r+0x34>
 80130de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80130e2:	eb03 0508 	add.w	r5, r3, r8
 80130e6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80130ea:	2b3d      	cmp	r3, #61	; 0x3d
 80130ec:	d1ec      	bne.n	80130c8 <_findenv_r+0x34>
 80130ee:	f8da 3000 	ldr.w	r3, [sl]
 80130f2:	ebab 0303 	sub.w	r3, fp, r3
 80130f6:	109b      	asrs	r3, r3, #2
 80130f8:	4638      	mov	r0, r7
 80130fa:	6033      	str	r3, [r6, #0]
 80130fc:	f000 fe6e 	bl	8013ddc <__env_unlock>
 8013100:	1c68      	adds	r0, r5, #1
 8013102:	e7dd      	b.n	80130c0 <_findenv_r+0x2c>
 8013104:	20000000 	.word	0x20000000

08013108 <_getenv_r>:
 8013108:	b507      	push	{r0, r1, r2, lr}
 801310a:	aa01      	add	r2, sp, #4
 801310c:	f7ff ffc2 	bl	8013094 <_findenv_r>
 8013110:	b003      	add	sp, #12
 8013112:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08013118 <_gettimeofday_r>:
 8013118:	b538      	push	{r3, r4, r5, lr}
 801311a:	4d07      	ldr	r5, [pc, #28]	; (8013138 <_gettimeofday_r+0x20>)
 801311c:	2300      	movs	r3, #0
 801311e:	4604      	mov	r4, r0
 8013120:	4608      	mov	r0, r1
 8013122:	4611      	mov	r1, r2
 8013124:	602b      	str	r3, [r5, #0]
 8013126:	f001 fa99 	bl	801465c <_gettimeofday>
 801312a:	1c43      	adds	r3, r0, #1
 801312c:	d102      	bne.n	8013134 <_gettimeofday_r+0x1c>
 801312e:	682b      	ldr	r3, [r5, #0]
 8013130:	b103      	cbz	r3, 8013134 <_gettimeofday_r+0x1c>
 8013132:	6023      	str	r3, [r4, #0]
 8013134:	bd38      	pop	{r3, r4, r5, pc}
 8013136:	bf00      	nop
 8013138:	20000b64 	.word	0x20000b64

0801313c <__gettzinfo>:
 801313c:	4800      	ldr	r0, [pc, #0]	; (8013140 <__gettzinfo+0x4>)
 801313e:	4770      	bx	lr
 8013140:	20000170 	.word	0x20000170

08013144 <gmtime_r>:
 8013144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013148:	e9d0 6700 	ldrd	r6, r7, [r0]
 801314c:	460c      	mov	r4, r1
 801314e:	4a51      	ldr	r2, [pc, #324]	; (8013294 <gmtime_r+0x150>)
 8013150:	2300      	movs	r3, #0
 8013152:	4630      	mov	r0, r6
 8013154:	4639      	mov	r1, r7
 8013156:	f7ed fb2d 	bl	80007b4 <__aeabi_ldivmod>
 801315a:	4639      	mov	r1, r7
 801315c:	4605      	mov	r5, r0
 801315e:	4a4d      	ldr	r2, [pc, #308]	; (8013294 <gmtime_r+0x150>)
 8013160:	4630      	mov	r0, r6
 8013162:	2300      	movs	r3, #0
 8013164:	f7ed fb26 	bl	80007b4 <__aeabi_ldivmod>
 8013168:	2a00      	cmp	r2, #0
 801316a:	bfbc      	itt	lt
 801316c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8013170:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8013174:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013178:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 801317c:	fbb2 f3f1 	udiv	r3, r2, r1
 8013180:	fb01 2213 	mls	r2, r1, r3, r2
 8013184:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8013188:	bfac      	ite	ge
 801318a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 801318e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8013192:	60a3      	str	r3, [r4, #8]
 8013194:	fbb2 f3f1 	udiv	r3, r2, r1
 8013198:	fb01 2213 	mls	r2, r1, r3, r2
 801319c:	6063      	str	r3, [r4, #4]
 801319e:	6022      	str	r2, [r4, #0]
 80131a0:	1cc3      	adds	r3, r0, #3
 80131a2:	2207      	movs	r2, #7
 80131a4:	fb93 f2f2 	sdiv	r2, r3, r2
 80131a8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80131ac:	1a9b      	subs	r3, r3, r2
 80131ae:	bf48      	it	mi
 80131b0:	3307      	addmi	r3, #7
 80131b2:	2800      	cmp	r0, #0
 80131b4:	61a3      	str	r3, [r4, #24]
 80131b6:	bfb8      	it	lt
 80131b8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 80131bc:	4936      	ldr	r1, [pc, #216]	; (8013298 <gmtime_r+0x154>)
 80131be:	bfae      	itee	ge
 80131c0:	fb90 f1f1 	sdivge	r1, r0, r1
 80131c4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 80131c8:	fb93 f1f1 	sdivlt	r1, r3, r1
 80131cc:	4b33      	ldr	r3, [pc, #204]	; (801329c <gmtime_r+0x158>)
 80131ce:	fb03 0001 	mla	r0, r3, r1, r0
 80131d2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80131d6:	fbb0 f2f2 	udiv	r2, r0, r2
 80131da:	4402      	add	r2, r0
 80131dc:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80131e0:	fbb0 f3fc 	udiv	r3, r0, ip
 80131e4:	1ad2      	subs	r2, r2, r3
 80131e6:	f240 176d 	movw	r7, #365	; 0x16d
 80131ea:	4b2d      	ldr	r3, [pc, #180]	; (80132a0 <gmtime_r+0x15c>)
 80131ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80131f0:	2664      	movs	r6, #100	; 0x64
 80131f2:	1ad3      	subs	r3, r2, r3
 80131f4:	fbb3 f5f7 	udiv	r5, r3, r7
 80131f8:	fbb3 f3fc 	udiv	r3, r3, ip
 80131fc:	fbb5 f2f6 	udiv	r2, r5, r6
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	4403      	add	r3, r0
 8013204:	fb07 3315 	mls	r3, r7, r5, r3
 8013208:	2099      	movs	r0, #153	; 0x99
 801320a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 801320e:	f10c 0c02 	add.w	ip, ip, #2
 8013212:	f103 0e01 	add.w	lr, r3, #1
 8013216:	fbbc f7f0 	udiv	r7, ip, r0
 801321a:	4378      	muls	r0, r7
 801321c:	3002      	adds	r0, #2
 801321e:	f04f 0805 	mov.w	r8, #5
 8013222:	fbb0 f0f8 	udiv	r0, r0, r8
 8013226:	ebae 0000 	sub.w	r0, lr, r0
 801322a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 801322e:	45f4      	cmp	ip, lr
 8013230:	bf94      	ite	ls
 8013232:	f04f 0c02 	movls.w	ip, #2
 8013236:	f06f 0c09 	mvnhi.w	ip, #9
 801323a:	4467      	add	r7, ip
 801323c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8013240:	fb0c 5101 	mla	r1, ip, r1, r5
 8013244:	2f01      	cmp	r7, #1
 8013246:	bf98      	it	ls
 8013248:	3101      	addls	r1, #1
 801324a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 801324e:	d30c      	bcc.n	801326a <gmtime_r+0x126>
 8013250:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8013254:	61e3      	str	r3, [r4, #28]
 8013256:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 801325a:	2300      	movs	r3, #0
 801325c:	60e0      	str	r0, [r4, #12]
 801325e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8013262:	6223      	str	r3, [r4, #32]
 8013264:	4620      	mov	r0, r4
 8013266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801326a:	f015 0f03 	tst.w	r5, #3
 801326e:	d102      	bne.n	8013276 <gmtime_r+0x132>
 8013270:	fb06 5212 	mls	r2, r6, r2, r5
 8013274:	b95a      	cbnz	r2, 801328e <gmtime_r+0x14a>
 8013276:	f44f 76c8 	mov.w	r6, #400	; 0x190
 801327a:	fbb5 f2f6 	udiv	r2, r5, r6
 801327e:	fb06 5212 	mls	r2, r6, r2, r5
 8013282:	fab2 f282 	clz	r2, r2
 8013286:	0952      	lsrs	r2, r2, #5
 8013288:	333b      	adds	r3, #59	; 0x3b
 801328a:	4413      	add	r3, r2
 801328c:	e7e2      	b.n	8013254 <gmtime_r+0x110>
 801328e:	2201      	movs	r2, #1
 8013290:	e7fa      	b.n	8013288 <gmtime_r+0x144>
 8013292:	bf00      	nop
 8013294:	00015180 	.word	0x00015180
 8013298:	00023ab1 	.word	0x00023ab1
 801329c:	fffdc54f 	.word	0xfffdc54f
 80132a0:	00023ab0 	.word	0x00023ab0

080132a4 <_isatty_r>:
 80132a4:	b538      	push	{r3, r4, r5, lr}
 80132a6:	4d06      	ldr	r5, [pc, #24]	; (80132c0 <_isatty_r+0x1c>)
 80132a8:	2300      	movs	r3, #0
 80132aa:	4604      	mov	r4, r0
 80132ac:	4608      	mov	r0, r1
 80132ae:	602b      	str	r3, [r5, #0]
 80132b0:	f7ed fdc6 	bl	8000e40 <_isatty>
 80132b4:	1c43      	adds	r3, r0, #1
 80132b6:	d102      	bne.n	80132be <_isatty_r+0x1a>
 80132b8:	682b      	ldr	r3, [r5, #0]
 80132ba:	b103      	cbz	r3, 80132be <_isatty_r+0x1a>
 80132bc:	6023      	str	r3, [r4, #0]
 80132be:	bd38      	pop	{r3, r4, r5, pc}
 80132c0:	20000b64 	.word	0x20000b64

080132c4 <labs>:
 80132c4:	2800      	cmp	r0, #0
 80132c6:	bfb8      	it	lt
 80132c8:	4240      	neglt	r0, r0
 80132ca:	4770      	bx	lr

080132cc <_lseek_r>:
 80132cc:	b538      	push	{r3, r4, r5, lr}
 80132ce:	4d07      	ldr	r5, [pc, #28]	; (80132ec <_lseek_r+0x20>)
 80132d0:	4604      	mov	r4, r0
 80132d2:	4608      	mov	r0, r1
 80132d4:	4611      	mov	r1, r2
 80132d6:	2200      	movs	r2, #0
 80132d8:	602a      	str	r2, [r5, #0]
 80132da:	461a      	mov	r2, r3
 80132dc:	f7ed fdbb 	bl	8000e56 <_lseek>
 80132e0:	1c43      	adds	r3, r0, #1
 80132e2:	d102      	bne.n	80132ea <_lseek_r+0x1e>
 80132e4:	682b      	ldr	r3, [r5, #0]
 80132e6:	b103      	cbz	r3, 80132ea <_lseek_r+0x1e>
 80132e8:	6023      	str	r3, [r4, #0]
 80132ea:	bd38      	pop	{r3, r4, r5, pc}
 80132ec:	20000b64 	.word	0x20000b64

080132f0 <__ascii_mbtowc>:
 80132f0:	b082      	sub	sp, #8
 80132f2:	b901      	cbnz	r1, 80132f6 <__ascii_mbtowc+0x6>
 80132f4:	a901      	add	r1, sp, #4
 80132f6:	b142      	cbz	r2, 801330a <__ascii_mbtowc+0x1a>
 80132f8:	b14b      	cbz	r3, 801330e <__ascii_mbtowc+0x1e>
 80132fa:	7813      	ldrb	r3, [r2, #0]
 80132fc:	600b      	str	r3, [r1, #0]
 80132fe:	7812      	ldrb	r2, [r2, #0]
 8013300:	1e10      	subs	r0, r2, #0
 8013302:	bf18      	it	ne
 8013304:	2001      	movne	r0, #1
 8013306:	b002      	add	sp, #8
 8013308:	4770      	bx	lr
 801330a:	4610      	mov	r0, r2
 801330c:	e7fb      	b.n	8013306 <__ascii_mbtowc+0x16>
 801330e:	f06f 0001 	mvn.w	r0, #1
 8013312:	e7f8      	b.n	8013306 <__ascii_mbtowc+0x16>

08013314 <__malloc_lock>:
 8013314:	4801      	ldr	r0, [pc, #4]	; (801331c <__malloc_lock+0x8>)
 8013316:	f7fe ba20 	b.w	801175a <__retarget_lock_acquire_recursive>
 801331a:	bf00      	nop
 801331c:	20000b5c 	.word	0x20000b5c

08013320 <__malloc_unlock>:
 8013320:	4801      	ldr	r0, [pc, #4]	; (8013328 <__malloc_unlock+0x8>)
 8013322:	f7fe ba1c 	b.w	801175e <__retarget_lock_release_recursive>
 8013326:	bf00      	nop
 8013328:	20000b5c 	.word	0x20000b5c

0801332c <_realloc_r>:
 801332c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801332e:	4607      	mov	r7, r0
 8013330:	4614      	mov	r4, r2
 8013332:	460e      	mov	r6, r1
 8013334:	b921      	cbnz	r1, 8013340 <_realloc_r+0x14>
 8013336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801333a:	4611      	mov	r1, r2
 801333c:	f7fe baea 	b.w	8011914 <_malloc_r>
 8013340:	b922      	cbnz	r2, 801334c <_realloc_r+0x20>
 8013342:	f7fe fa97 	bl	8011874 <_free_r>
 8013346:	4625      	mov	r5, r4
 8013348:	4628      	mov	r0, r5
 801334a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801334c:	f000 fd66 	bl	8013e1c <_malloc_usable_size_r>
 8013350:	42a0      	cmp	r0, r4
 8013352:	d20f      	bcs.n	8013374 <_realloc_r+0x48>
 8013354:	4621      	mov	r1, r4
 8013356:	4638      	mov	r0, r7
 8013358:	f7fe fadc 	bl	8011914 <_malloc_r>
 801335c:	4605      	mov	r5, r0
 801335e:	2800      	cmp	r0, #0
 8013360:	d0f2      	beq.n	8013348 <_realloc_r+0x1c>
 8013362:	4631      	mov	r1, r6
 8013364:	4622      	mov	r2, r4
 8013366:	f7fe fa6f 	bl	8011848 <memcpy>
 801336a:	4631      	mov	r1, r6
 801336c:	4638      	mov	r0, r7
 801336e:	f7fe fa81 	bl	8011874 <_free_r>
 8013372:	e7e9      	b.n	8013348 <_realloc_r+0x1c>
 8013374:	4635      	mov	r5, r6
 8013376:	e7e7      	b.n	8013348 <_realloc_r+0x1c>

08013378 <__ssputs_r>:
 8013378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801337c:	688e      	ldr	r6, [r1, #8]
 801337e:	429e      	cmp	r6, r3
 8013380:	4682      	mov	sl, r0
 8013382:	460c      	mov	r4, r1
 8013384:	4690      	mov	r8, r2
 8013386:	461f      	mov	r7, r3
 8013388:	d838      	bhi.n	80133fc <__ssputs_r+0x84>
 801338a:	898a      	ldrh	r2, [r1, #12]
 801338c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013390:	d032      	beq.n	80133f8 <__ssputs_r+0x80>
 8013392:	6825      	ldr	r5, [r4, #0]
 8013394:	6909      	ldr	r1, [r1, #16]
 8013396:	eba5 0901 	sub.w	r9, r5, r1
 801339a:	6965      	ldr	r5, [r4, #20]
 801339c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133a4:	3301      	adds	r3, #1
 80133a6:	444b      	add	r3, r9
 80133a8:	106d      	asrs	r5, r5, #1
 80133aa:	429d      	cmp	r5, r3
 80133ac:	bf38      	it	cc
 80133ae:	461d      	movcc	r5, r3
 80133b0:	0553      	lsls	r3, r2, #21
 80133b2:	d531      	bpl.n	8013418 <__ssputs_r+0xa0>
 80133b4:	4629      	mov	r1, r5
 80133b6:	f7fe faad 	bl	8011914 <_malloc_r>
 80133ba:	4606      	mov	r6, r0
 80133bc:	b950      	cbnz	r0, 80133d4 <__ssputs_r+0x5c>
 80133be:	230c      	movs	r3, #12
 80133c0:	f8ca 3000 	str.w	r3, [sl]
 80133c4:	89a3      	ldrh	r3, [r4, #12]
 80133c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133ca:	81a3      	strh	r3, [r4, #12]
 80133cc:	f04f 30ff 	mov.w	r0, #4294967295
 80133d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133d4:	6921      	ldr	r1, [r4, #16]
 80133d6:	464a      	mov	r2, r9
 80133d8:	f7fe fa36 	bl	8011848 <memcpy>
 80133dc:	89a3      	ldrh	r3, [r4, #12]
 80133de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80133e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133e6:	81a3      	strh	r3, [r4, #12]
 80133e8:	6126      	str	r6, [r4, #16]
 80133ea:	6165      	str	r5, [r4, #20]
 80133ec:	444e      	add	r6, r9
 80133ee:	eba5 0509 	sub.w	r5, r5, r9
 80133f2:	6026      	str	r6, [r4, #0]
 80133f4:	60a5      	str	r5, [r4, #8]
 80133f6:	463e      	mov	r6, r7
 80133f8:	42be      	cmp	r6, r7
 80133fa:	d900      	bls.n	80133fe <__ssputs_r+0x86>
 80133fc:	463e      	mov	r6, r7
 80133fe:	4632      	mov	r2, r6
 8013400:	6820      	ldr	r0, [r4, #0]
 8013402:	4641      	mov	r1, r8
 8013404:	f000 fcf0 	bl	8013de8 <memmove>
 8013408:	68a3      	ldr	r3, [r4, #8]
 801340a:	6822      	ldr	r2, [r4, #0]
 801340c:	1b9b      	subs	r3, r3, r6
 801340e:	4432      	add	r2, r6
 8013410:	60a3      	str	r3, [r4, #8]
 8013412:	6022      	str	r2, [r4, #0]
 8013414:	2000      	movs	r0, #0
 8013416:	e7db      	b.n	80133d0 <__ssputs_r+0x58>
 8013418:	462a      	mov	r2, r5
 801341a:	f7ff ff87 	bl	801332c <_realloc_r>
 801341e:	4606      	mov	r6, r0
 8013420:	2800      	cmp	r0, #0
 8013422:	d1e1      	bne.n	80133e8 <__ssputs_r+0x70>
 8013424:	6921      	ldr	r1, [r4, #16]
 8013426:	4650      	mov	r0, sl
 8013428:	f7fe fa24 	bl	8011874 <_free_r>
 801342c:	e7c7      	b.n	80133be <__ssputs_r+0x46>
	...

08013430 <_svfiprintf_r>:
 8013430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013434:	4698      	mov	r8, r3
 8013436:	898b      	ldrh	r3, [r1, #12]
 8013438:	061b      	lsls	r3, r3, #24
 801343a:	b09d      	sub	sp, #116	; 0x74
 801343c:	4607      	mov	r7, r0
 801343e:	460d      	mov	r5, r1
 8013440:	4614      	mov	r4, r2
 8013442:	d50e      	bpl.n	8013462 <_svfiprintf_r+0x32>
 8013444:	690b      	ldr	r3, [r1, #16]
 8013446:	b963      	cbnz	r3, 8013462 <_svfiprintf_r+0x32>
 8013448:	2140      	movs	r1, #64	; 0x40
 801344a:	f7fe fa63 	bl	8011914 <_malloc_r>
 801344e:	6028      	str	r0, [r5, #0]
 8013450:	6128      	str	r0, [r5, #16]
 8013452:	b920      	cbnz	r0, 801345e <_svfiprintf_r+0x2e>
 8013454:	230c      	movs	r3, #12
 8013456:	603b      	str	r3, [r7, #0]
 8013458:	f04f 30ff 	mov.w	r0, #4294967295
 801345c:	e0d1      	b.n	8013602 <_svfiprintf_r+0x1d2>
 801345e:	2340      	movs	r3, #64	; 0x40
 8013460:	616b      	str	r3, [r5, #20]
 8013462:	2300      	movs	r3, #0
 8013464:	9309      	str	r3, [sp, #36]	; 0x24
 8013466:	2320      	movs	r3, #32
 8013468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801346c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013470:	2330      	movs	r3, #48	; 0x30
 8013472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801361c <_svfiprintf_r+0x1ec>
 8013476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801347a:	f04f 0901 	mov.w	r9, #1
 801347e:	4623      	mov	r3, r4
 8013480:	469a      	mov	sl, r3
 8013482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013486:	b10a      	cbz	r2, 801348c <_svfiprintf_r+0x5c>
 8013488:	2a25      	cmp	r2, #37	; 0x25
 801348a:	d1f9      	bne.n	8013480 <_svfiprintf_r+0x50>
 801348c:	ebba 0b04 	subs.w	fp, sl, r4
 8013490:	d00b      	beq.n	80134aa <_svfiprintf_r+0x7a>
 8013492:	465b      	mov	r3, fp
 8013494:	4622      	mov	r2, r4
 8013496:	4629      	mov	r1, r5
 8013498:	4638      	mov	r0, r7
 801349a:	f7ff ff6d 	bl	8013378 <__ssputs_r>
 801349e:	3001      	adds	r0, #1
 80134a0:	f000 80aa 	beq.w	80135f8 <_svfiprintf_r+0x1c8>
 80134a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80134a6:	445a      	add	r2, fp
 80134a8:	9209      	str	r2, [sp, #36]	; 0x24
 80134aa:	f89a 3000 	ldrb.w	r3, [sl]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	f000 80a2 	beq.w	80135f8 <_svfiprintf_r+0x1c8>
 80134b4:	2300      	movs	r3, #0
 80134b6:	f04f 32ff 	mov.w	r2, #4294967295
 80134ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134be:	f10a 0a01 	add.w	sl, sl, #1
 80134c2:	9304      	str	r3, [sp, #16]
 80134c4:	9307      	str	r3, [sp, #28]
 80134c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80134ca:	931a      	str	r3, [sp, #104]	; 0x68
 80134cc:	4654      	mov	r4, sl
 80134ce:	2205      	movs	r2, #5
 80134d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134d4:	4851      	ldr	r0, [pc, #324]	; (801361c <_svfiprintf_r+0x1ec>)
 80134d6:	f7ec fec3 	bl	8000260 <memchr>
 80134da:	9a04      	ldr	r2, [sp, #16]
 80134dc:	b9d8      	cbnz	r0, 8013516 <_svfiprintf_r+0xe6>
 80134de:	06d0      	lsls	r0, r2, #27
 80134e0:	bf44      	itt	mi
 80134e2:	2320      	movmi	r3, #32
 80134e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134e8:	0711      	lsls	r1, r2, #28
 80134ea:	bf44      	itt	mi
 80134ec:	232b      	movmi	r3, #43	; 0x2b
 80134ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80134f2:	f89a 3000 	ldrb.w	r3, [sl]
 80134f6:	2b2a      	cmp	r3, #42	; 0x2a
 80134f8:	d015      	beq.n	8013526 <_svfiprintf_r+0xf6>
 80134fa:	9a07      	ldr	r2, [sp, #28]
 80134fc:	4654      	mov	r4, sl
 80134fe:	2000      	movs	r0, #0
 8013500:	f04f 0c0a 	mov.w	ip, #10
 8013504:	4621      	mov	r1, r4
 8013506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801350a:	3b30      	subs	r3, #48	; 0x30
 801350c:	2b09      	cmp	r3, #9
 801350e:	d94e      	bls.n	80135ae <_svfiprintf_r+0x17e>
 8013510:	b1b0      	cbz	r0, 8013540 <_svfiprintf_r+0x110>
 8013512:	9207      	str	r2, [sp, #28]
 8013514:	e014      	b.n	8013540 <_svfiprintf_r+0x110>
 8013516:	eba0 0308 	sub.w	r3, r0, r8
 801351a:	fa09 f303 	lsl.w	r3, r9, r3
 801351e:	4313      	orrs	r3, r2
 8013520:	9304      	str	r3, [sp, #16]
 8013522:	46a2      	mov	sl, r4
 8013524:	e7d2      	b.n	80134cc <_svfiprintf_r+0x9c>
 8013526:	9b03      	ldr	r3, [sp, #12]
 8013528:	1d19      	adds	r1, r3, #4
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	9103      	str	r1, [sp, #12]
 801352e:	2b00      	cmp	r3, #0
 8013530:	bfbb      	ittet	lt
 8013532:	425b      	neglt	r3, r3
 8013534:	f042 0202 	orrlt.w	r2, r2, #2
 8013538:	9307      	strge	r3, [sp, #28]
 801353a:	9307      	strlt	r3, [sp, #28]
 801353c:	bfb8      	it	lt
 801353e:	9204      	strlt	r2, [sp, #16]
 8013540:	7823      	ldrb	r3, [r4, #0]
 8013542:	2b2e      	cmp	r3, #46	; 0x2e
 8013544:	d10c      	bne.n	8013560 <_svfiprintf_r+0x130>
 8013546:	7863      	ldrb	r3, [r4, #1]
 8013548:	2b2a      	cmp	r3, #42	; 0x2a
 801354a:	d135      	bne.n	80135b8 <_svfiprintf_r+0x188>
 801354c:	9b03      	ldr	r3, [sp, #12]
 801354e:	1d1a      	adds	r2, r3, #4
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	9203      	str	r2, [sp, #12]
 8013554:	2b00      	cmp	r3, #0
 8013556:	bfb8      	it	lt
 8013558:	f04f 33ff 	movlt.w	r3, #4294967295
 801355c:	3402      	adds	r4, #2
 801355e:	9305      	str	r3, [sp, #20]
 8013560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801362c <_svfiprintf_r+0x1fc>
 8013564:	7821      	ldrb	r1, [r4, #0]
 8013566:	2203      	movs	r2, #3
 8013568:	4650      	mov	r0, sl
 801356a:	f7ec fe79 	bl	8000260 <memchr>
 801356e:	b140      	cbz	r0, 8013582 <_svfiprintf_r+0x152>
 8013570:	2340      	movs	r3, #64	; 0x40
 8013572:	eba0 000a 	sub.w	r0, r0, sl
 8013576:	fa03 f000 	lsl.w	r0, r3, r0
 801357a:	9b04      	ldr	r3, [sp, #16]
 801357c:	4303      	orrs	r3, r0
 801357e:	3401      	adds	r4, #1
 8013580:	9304      	str	r3, [sp, #16]
 8013582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013586:	4826      	ldr	r0, [pc, #152]	; (8013620 <_svfiprintf_r+0x1f0>)
 8013588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801358c:	2206      	movs	r2, #6
 801358e:	f7ec fe67 	bl	8000260 <memchr>
 8013592:	2800      	cmp	r0, #0
 8013594:	d038      	beq.n	8013608 <_svfiprintf_r+0x1d8>
 8013596:	4b23      	ldr	r3, [pc, #140]	; (8013624 <_svfiprintf_r+0x1f4>)
 8013598:	bb1b      	cbnz	r3, 80135e2 <_svfiprintf_r+0x1b2>
 801359a:	9b03      	ldr	r3, [sp, #12]
 801359c:	3307      	adds	r3, #7
 801359e:	f023 0307 	bic.w	r3, r3, #7
 80135a2:	3308      	adds	r3, #8
 80135a4:	9303      	str	r3, [sp, #12]
 80135a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135a8:	4433      	add	r3, r6
 80135aa:	9309      	str	r3, [sp, #36]	; 0x24
 80135ac:	e767      	b.n	801347e <_svfiprintf_r+0x4e>
 80135ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80135b2:	460c      	mov	r4, r1
 80135b4:	2001      	movs	r0, #1
 80135b6:	e7a5      	b.n	8013504 <_svfiprintf_r+0xd4>
 80135b8:	2300      	movs	r3, #0
 80135ba:	3401      	adds	r4, #1
 80135bc:	9305      	str	r3, [sp, #20]
 80135be:	4619      	mov	r1, r3
 80135c0:	f04f 0c0a 	mov.w	ip, #10
 80135c4:	4620      	mov	r0, r4
 80135c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135ca:	3a30      	subs	r2, #48	; 0x30
 80135cc:	2a09      	cmp	r2, #9
 80135ce:	d903      	bls.n	80135d8 <_svfiprintf_r+0x1a8>
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d0c5      	beq.n	8013560 <_svfiprintf_r+0x130>
 80135d4:	9105      	str	r1, [sp, #20]
 80135d6:	e7c3      	b.n	8013560 <_svfiprintf_r+0x130>
 80135d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80135dc:	4604      	mov	r4, r0
 80135de:	2301      	movs	r3, #1
 80135e0:	e7f0      	b.n	80135c4 <_svfiprintf_r+0x194>
 80135e2:	ab03      	add	r3, sp, #12
 80135e4:	9300      	str	r3, [sp, #0]
 80135e6:	462a      	mov	r2, r5
 80135e8:	4b0f      	ldr	r3, [pc, #60]	; (8013628 <_svfiprintf_r+0x1f8>)
 80135ea:	a904      	add	r1, sp, #16
 80135ec:	4638      	mov	r0, r7
 80135ee:	f3af 8000 	nop.w
 80135f2:	1c42      	adds	r2, r0, #1
 80135f4:	4606      	mov	r6, r0
 80135f6:	d1d6      	bne.n	80135a6 <_svfiprintf_r+0x176>
 80135f8:	89ab      	ldrh	r3, [r5, #12]
 80135fa:	065b      	lsls	r3, r3, #25
 80135fc:	f53f af2c 	bmi.w	8013458 <_svfiprintf_r+0x28>
 8013600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013602:	b01d      	add	sp, #116	; 0x74
 8013604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013608:	ab03      	add	r3, sp, #12
 801360a:	9300      	str	r3, [sp, #0]
 801360c:	462a      	mov	r2, r5
 801360e:	4b06      	ldr	r3, [pc, #24]	; (8013628 <_svfiprintf_r+0x1f8>)
 8013610:	a904      	add	r1, sp, #16
 8013612:	4638      	mov	r0, r7
 8013614:	f000 f9d4 	bl	80139c0 <_printf_i>
 8013618:	e7eb      	b.n	80135f2 <_svfiprintf_r+0x1c2>
 801361a:	bf00      	nop
 801361c:	0801747b 	.word	0x0801747b
 8013620:	08017485 	.word	0x08017485
 8013624:	00000000 	.word	0x00000000
 8013628:	08013379 	.word	0x08013379
 801362c:	08017481 	.word	0x08017481

08013630 <__sfputc_r>:
 8013630:	6893      	ldr	r3, [r2, #8]
 8013632:	3b01      	subs	r3, #1
 8013634:	2b00      	cmp	r3, #0
 8013636:	b410      	push	{r4}
 8013638:	6093      	str	r3, [r2, #8]
 801363a:	da08      	bge.n	801364e <__sfputc_r+0x1e>
 801363c:	6994      	ldr	r4, [r2, #24]
 801363e:	42a3      	cmp	r3, r4
 8013640:	db01      	blt.n	8013646 <__sfputc_r+0x16>
 8013642:	290a      	cmp	r1, #10
 8013644:	d103      	bne.n	801364e <__sfputc_r+0x1e>
 8013646:	f85d 4b04 	ldr.w	r4, [sp], #4
 801364a:	f7ff bb63 	b.w	8012d14 <__swbuf_r>
 801364e:	6813      	ldr	r3, [r2, #0]
 8013650:	1c58      	adds	r0, r3, #1
 8013652:	6010      	str	r0, [r2, #0]
 8013654:	7019      	strb	r1, [r3, #0]
 8013656:	4608      	mov	r0, r1
 8013658:	f85d 4b04 	ldr.w	r4, [sp], #4
 801365c:	4770      	bx	lr

0801365e <__sfputs_r>:
 801365e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013660:	4606      	mov	r6, r0
 8013662:	460f      	mov	r7, r1
 8013664:	4614      	mov	r4, r2
 8013666:	18d5      	adds	r5, r2, r3
 8013668:	42ac      	cmp	r4, r5
 801366a:	d101      	bne.n	8013670 <__sfputs_r+0x12>
 801366c:	2000      	movs	r0, #0
 801366e:	e007      	b.n	8013680 <__sfputs_r+0x22>
 8013670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013674:	463a      	mov	r2, r7
 8013676:	4630      	mov	r0, r6
 8013678:	f7ff ffda 	bl	8013630 <__sfputc_r>
 801367c:	1c43      	adds	r3, r0, #1
 801367e:	d1f3      	bne.n	8013668 <__sfputs_r+0xa>
 8013680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013684 <_vfiprintf_r>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	460d      	mov	r5, r1
 801368a:	b09d      	sub	sp, #116	; 0x74
 801368c:	4614      	mov	r4, r2
 801368e:	4698      	mov	r8, r3
 8013690:	4606      	mov	r6, r0
 8013692:	b118      	cbz	r0, 801369c <_vfiprintf_r+0x18>
 8013694:	6983      	ldr	r3, [r0, #24]
 8013696:	b90b      	cbnz	r3, 801369c <_vfiprintf_r+0x18>
 8013698:	f7fd fcac 	bl	8010ff4 <__sinit>
 801369c:	4b89      	ldr	r3, [pc, #548]	; (80138c4 <_vfiprintf_r+0x240>)
 801369e:	429d      	cmp	r5, r3
 80136a0:	d11b      	bne.n	80136da <_vfiprintf_r+0x56>
 80136a2:	6875      	ldr	r5, [r6, #4]
 80136a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136a6:	07d9      	lsls	r1, r3, #31
 80136a8:	d405      	bmi.n	80136b6 <_vfiprintf_r+0x32>
 80136aa:	89ab      	ldrh	r3, [r5, #12]
 80136ac:	059a      	lsls	r2, r3, #22
 80136ae:	d402      	bmi.n	80136b6 <_vfiprintf_r+0x32>
 80136b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136b2:	f7fe f852 	bl	801175a <__retarget_lock_acquire_recursive>
 80136b6:	89ab      	ldrh	r3, [r5, #12]
 80136b8:	071b      	lsls	r3, r3, #28
 80136ba:	d501      	bpl.n	80136c0 <_vfiprintf_r+0x3c>
 80136bc:	692b      	ldr	r3, [r5, #16]
 80136be:	b9eb      	cbnz	r3, 80136fc <_vfiprintf_r+0x78>
 80136c0:	4629      	mov	r1, r5
 80136c2:	4630      	mov	r0, r6
 80136c4:	f7ff fb8a 	bl	8012ddc <__swsetup_r>
 80136c8:	b1c0      	cbz	r0, 80136fc <_vfiprintf_r+0x78>
 80136ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80136cc:	07dc      	lsls	r4, r3, #31
 80136ce:	d50e      	bpl.n	80136ee <_vfiprintf_r+0x6a>
 80136d0:	f04f 30ff 	mov.w	r0, #4294967295
 80136d4:	b01d      	add	sp, #116	; 0x74
 80136d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136da:	4b7b      	ldr	r3, [pc, #492]	; (80138c8 <_vfiprintf_r+0x244>)
 80136dc:	429d      	cmp	r5, r3
 80136de:	d101      	bne.n	80136e4 <_vfiprintf_r+0x60>
 80136e0:	68b5      	ldr	r5, [r6, #8]
 80136e2:	e7df      	b.n	80136a4 <_vfiprintf_r+0x20>
 80136e4:	4b79      	ldr	r3, [pc, #484]	; (80138cc <_vfiprintf_r+0x248>)
 80136e6:	429d      	cmp	r5, r3
 80136e8:	bf08      	it	eq
 80136ea:	68f5      	ldreq	r5, [r6, #12]
 80136ec:	e7da      	b.n	80136a4 <_vfiprintf_r+0x20>
 80136ee:	89ab      	ldrh	r3, [r5, #12]
 80136f0:	0598      	lsls	r0, r3, #22
 80136f2:	d4ed      	bmi.n	80136d0 <_vfiprintf_r+0x4c>
 80136f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80136f6:	f7fe f832 	bl	801175e <__retarget_lock_release_recursive>
 80136fa:	e7e9      	b.n	80136d0 <_vfiprintf_r+0x4c>
 80136fc:	2300      	movs	r3, #0
 80136fe:	9309      	str	r3, [sp, #36]	; 0x24
 8013700:	2320      	movs	r3, #32
 8013702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013706:	f8cd 800c 	str.w	r8, [sp, #12]
 801370a:	2330      	movs	r3, #48	; 0x30
 801370c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80138d0 <_vfiprintf_r+0x24c>
 8013710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013714:	f04f 0901 	mov.w	r9, #1
 8013718:	4623      	mov	r3, r4
 801371a:	469a      	mov	sl, r3
 801371c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013720:	b10a      	cbz	r2, 8013726 <_vfiprintf_r+0xa2>
 8013722:	2a25      	cmp	r2, #37	; 0x25
 8013724:	d1f9      	bne.n	801371a <_vfiprintf_r+0x96>
 8013726:	ebba 0b04 	subs.w	fp, sl, r4
 801372a:	d00b      	beq.n	8013744 <_vfiprintf_r+0xc0>
 801372c:	465b      	mov	r3, fp
 801372e:	4622      	mov	r2, r4
 8013730:	4629      	mov	r1, r5
 8013732:	4630      	mov	r0, r6
 8013734:	f7ff ff93 	bl	801365e <__sfputs_r>
 8013738:	3001      	adds	r0, #1
 801373a:	f000 80aa 	beq.w	8013892 <_vfiprintf_r+0x20e>
 801373e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013740:	445a      	add	r2, fp
 8013742:	9209      	str	r2, [sp, #36]	; 0x24
 8013744:	f89a 3000 	ldrb.w	r3, [sl]
 8013748:	2b00      	cmp	r3, #0
 801374a:	f000 80a2 	beq.w	8013892 <_vfiprintf_r+0x20e>
 801374e:	2300      	movs	r3, #0
 8013750:	f04f 32ff 	mov.w	r2, #4294967295
 8013754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013758:	f10a 0a01 	add.w	sl, sl, #1
 801375c:	9304      	str	r3, [sp, #16]
 801375e:	9307      	str	r3, [sp, #28]
 8013760:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013764:	931a      	str	r3, [sp, #104]	; 0x68
 8013766:	4654      	mov	r4, sl
 8013768:	2205      	movs	r2, #5
 801376a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801376e:	4858      	ldr	r0, [pc, #352]	; (80138d0 <_vfiprintf_r+0x24c>)
 8013770:	f7ec fd76 	bl	8000260 <memchr>
 8013774:	9a04      	ldr	r2, [sp, #16]
 8013776:	b9d8      	cbnz	r0, 80137b0 <_vfiprintf_r+0x12c>
 8013778:	06d1      	lsls	r1, r2, #27
 801377a:	bf44      	itt	mi
 801377c:	2320      	movmi	r3, #32
 801377e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013782:	0713      	lsls	r3, r2, #28
 8013784:	bf44      	itt	mi
 8013786:	232b      	movmi	r3, #43	; 0x2b
 8013788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801378c:	f89a 3000 	ldrb.w	r3, [sl]
 8013790:	2b2a      	cmp	r3, #42	; 0x2a
 8013792:	d015      	beq.n	80137c0 <_vfiprintf_r+0x13c>
 8013794:	9a07      	ldr	r2, [sp, #28]
 8013796:	4654      	mov	r4, sl
 8013798:	2000      	movs	r0, #0
 801379a:	f04f 0c0a 	mov.w	ip, #10
 801379e:	4621      	mov	r1, r4
 80137a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80137a4:	3b30      	subs	r3, #48	; 0x30
 80137a6:	2b09      	cmp	r3, #9
 80137a8:	d94e      	bls.n	8013848 <_vfiprintf_r+0x1c4>
 80137aa:	b1b0      	cbz	r0, 80137da <_vfiprintf_r+0x156>
 80137ac:	9207      	str	r2, [sp, #28]
 80137ae:	e014      	b.n	80137da <_vfiprintf_r+0x156>
 80137b0:	eba0 0308 	sub.w	r3, r0, r8
 80137b4:	fa09 f303 	lsl.w	r3, r9, r3
 80137b8:	4313      	orrs	r3, r2
 80137ba:	9304      	str	r3, [sp, #16]
 80137bc:	46a2      	mov	sl, r4
 80137be:	e7d2      	b.n	8013766 <_vfiprintf_r+0xe2>
 80137c0:	9b03      	ldr	r3, [sp, #12]
 80137c2:	1d19      	adds	r1, r3, #4
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	9103      	str	r1, [sp, #12]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	bfbb      	ittet	lt
 80137cc:	425b      	neglt	r3, r3
 80137ce:	f042 0202 	orrlt.w	r2, r2, #2
 80137d2:	9307      	strge	r3, [sp, #28]
 80137d4:	9307      	strlt	r3, [sp, #28]
 80137d6:	bfb8      	it	lt
 80137d8:	9204      	strlt	r2, [sp, #16]
 80137da:	7823      	ldrb	r3, [r4, #0]
 80137dc:	2b2e      	cmp	r3, #46	; 0x2e
 80137de:	d10c      	bne.n	80137fa <_vfiprintf_r+0x176>
 80137e0:	7863      	ldrb	r3, [r4, #1]
 80137e2:	2b2a      	cmp	r3, #42	; 0x2a
 80137e4:	d135      	bne.n	8013852 <_vfiprintf_r+0x1ce>
 80137e6:	9b03      	ldr	r3, [sp, #12]
 80137e8:	1d1a      	adds	r2, r3, #4
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	9203      	str	r2, [sp, #12]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	bfb8      	it	lt
 80137f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80137f6:	3402      	adds	r4, #2
 80137f8:	9305      	str	r3, [sp, #20]
 80137fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80138e0 <_vfiprintf_r+0x25c>
 80137fe:	7821      	ldrb	r1, [r4, #0]
 8013800:	2203      	movs	r2, #3
 8013802:	4650      	mov	r0, sl
 8013804:	f7ec fd2c 	bl	8000260 <memchr>
 8013808:	b140      	cbz	r0, 801381c <_vfiprintf_r+0x198>
 801380a:	2340      	movs	r3, #64	; 0x40
 801380c:	eba0 000a 	sub.w	r0, r0, sl
 8013810:	fa03 f000 	lsl.w	r0, r3, r0
 8013814:	9b04      	ldr	r3, [sp, #16]
 8013816:	4303      	orrs	r3, r0
 8013818:	3401      	adds	r4, #1
 801381a:	9304      	str	r3, [sp, #16]
 801381c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013820:	482c      	ldr	r0, [pc, #176]	; (80138d4 <_vfiprintf_r+0x250>)
 8013822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013826:	2206      	movs	r2, #6
 8013828:	f7ec fd1a 	bl	8000260 <memchr>
 801382c:	2800      	cmp	r0, #0
 801382e:	d03f      	beq.n	80138b0 <_vfiprintf_r+0x22c>
 8013830:	4b29      	ldr	r3, [pc, #164]	; (80138d8 <_vfiprintf_r+0x254>)
 8013832:	bb1b      	cbnz	r3, 801387c <_vfiprintf_r+0x1f8>
 8013834:	9b03      	ldr	r3, [sp, #12]
 8013836:	3307      	adds	r3, #7
 8013838:	f023 0307 	bic.w	r3, r3, #7
 801383c:	3308      	adds	r3, #8
 801383e:	9303      	str	r3, [sp, #12]
 8013840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013842:	443b      	add	r3, r7
 8013844:	9309      	str	r3, [sp, #36]	; 0x24
 8013846:	e767      	b.n	8013718 <_vfiprintf_r+0x94>
 8013848:	fb0c 3202 	mla	r2, ip, r2, r3
 801384c:	460c      	mov	r4, r1
 801384e:	2001      	movs	r0, #1
 8013850:	e7a5      	b.n	801379e <_vfiprintf_r+0x11a>
 8013852:	2300      	movs	r3, #0
 8013854:	3401      	adds	r4, #1
 8013856:	9305      	str	r3, [sp, #20]
 8013858:	4619      	mov	r1, r3
 801385a:	f04f 0c0a 	mov.w	ip, #10
 801385e:	4620      	mov	r0, r4
 8013860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013864:	3a30      	subs	r2, #48	; 0x30
 8013866:	2a09      	cmp	r2, #9
 8013868:	d903      	bls.n	8013872 <_vfiprintf_r+0x1ee>
 801386a:	2b00      	cmp	r3, #0
 801386c:	d0c5      	beq.n	80137fa <_vfiprintf_r+0x176>
 801386e:	9105      	str	r1, [sp, #20]
 8013870:	e7c3      	b.n	80137fa <_vfiprintf_r+0x176>
 8013872:	fb0c 2101 	mla	r1, ip, r1, r2
 8013876:	4604      	mov	r4, r0
 8013878:	2301      	movs	r3, #1
 801387a:	e7f0      	b.n	801385e <_vfiprintf_r+0x1da>
 801387c:	ab03      	add	r3, sp, #12
 801387e:	9300      	str	r3, [sp, #0]
 8013880:	462a      	mov	r2, r5
 8013882:	4b16      	ldr	r3, [pc, #88]	; (80138dc <_vfiprintf_r+0x258>)
 8013884:	a904      	add	r1, sp, #16
 8013886:	4630      	mov	r0, r6
 8013888:	f3af 8000 	nop.w
 801388c:	4607      	mov	r7, r0
 801388e:	1c78      	adds	r0, r7, #1
 8013890:	d1d6      	bne.n	8013840 <_vfiprintf_r+0x1bc>
 8013892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013894:	07d9      	lsls	r1, r3, #31
 8013896:	d405      	bmi.n	80138a4 <_vfiprintf_r+0x220>
 8013898:	89ab      	ldrh	r3, [r5, #12]
 801389a:	059a      	lsls	r2, r3, #22
 801389c:	d402      	bmi.n	80138a4 <_vfiprintf_r+0x220>
 801389e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80138a0:	f7fd ff5d 	bl	801175e <__retarget_lock_release_recursive>
 80138a4:	89ab      	ldrh	r3, [r5, #12]
 80138a6:	065b      	lsls	r3, r3, #25
 80138a8:	f53f af12 	bmi.w	80136d0 <_vfiprintf_r+0x4c>
 80138ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80138ae:	e711      	b.n	80136d4 <_vfiprintf_r+0x50>
 80138b0:	ab03      	add	r3, sp, #12
 80138b2:	9300      	str	r3, [sp, #0]
 80138b4:	462a      	mov	r2, r5
 80138b6:	4b09      	ldr	r3, [pc, #36]	; (80138dc <_vfiprintf_r+0x258>)
 80138b8:	a904      	add	r1, sp, #16
 80138ba:	4630      	mov	r0, r6
 80138bc:	f000 f880 	bl	80139c0 <_printf_i>
 80138c0:	e7e4      	b.n	801388c <_vfiprintf_r+0x208>
 80138c2:	bf00      	nop
 80138c4:	08016efc 	.word	0x08016efc
 80138c8:	08016f1c 	.word	0x08016f1c
 80138cc:	08016edc 	.word	0x08016edc
 80138d0:	0801747b 	.word	0x0801747b
 80138d4:	08017485 	.word	0x08017485
 80138d8:	00000000 	.word	0x00000000
 80138dc:	0801365f 	.word	0x0801365f
 80138e0:	08017481 	.word	0x08017481

080138e4 <_printf_common>:
 80138e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138e8:	4616      	mov	r6, r2
 80138ea:	4699      	mov	r9, r3
 80138ec:	688a      	ldr	r2, [r1, #8]
 80138ee:	690b      	ldr	r3, [r1, #16]
 80138f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80138f4:	4293      	cmp	r3, r2
 80138f6:	bfb8      	it	lt
 80138f8:	4613      	movlt	r3, r2
 80138fa:	6033      	str	r3, [r6, #0]
 80138fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013900:	4607      	mov	r7, r0
 8013902:	460c      	mov	r4, r1
 8013904:	b10a      	cbz	r2, 801390a <_printf_common+0x26>
 8013906:	3301      	adds	r3, #1
 8013908:	6033      	str	r3, [r6, #0]
 801390a:	6823      	ldr	r3, [r4, #0]
 801390c:	0699      	lsls	r1, r3, #26
 801390e:	bf42      	ittt	mi
 8013910:	6833      	ldrmi	r3, [r6, #0]
 8013912:	3302      	addmi	r3, #2
 8013914:	6033      	strmi	r3, [r6, #0]
 8013916:	6825      	ldr	r5, [r4, #0]
 8013918:	f015 0506 	ands.w	r5, r5, #6
 801391c:	d106      	bne.n	801392c <_printf_common+0x48>
 801391e:	f104 0a19 	add.w	sl, r4, #25
 8013922:	68e3      	ldr	r3, [r4, #12]
 8013924:	6832      	ldr	r2, [r6, #0]
 8013926:	1a9b      	subs	r3, r3, r2
 8013928:	42ab      	cmp	r3, r5
 801392a:	dc26      	bgt.n	801397a <_printf_common+0x96>
 801392c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013930:	1e13      	subs	r3, r2, #0
 8013932:	6822      	ldr	r2, [r4, #0]
 8013934:	bf18      	it	ne
 8013936:	2301      	movne	r3, #1
 8013938:	0692      	lsls	r2, r2, #26
 801393a:	d42b      	bmi.n	8013994 <_printf_common+0xb0>
 801393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013940:	4649      	mov	r1, r9
 8013942:	4638      	mov	r0, r7
 8013944:	47c0      	blx	r8
 8013946:	3001      	adds	r0, #1
 8013948:	d01e      	beq.n	8013988 <_printf_common+0xa4>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	68e5      	ldr	r5, [r4, #12]
 801394e:	6832      	ldr	r2, [r6, #0]
 8013950:	f003 0306 	and.w	r3, r3, #6
 8013954:	2b04      	cmp	r3, #4
 8013956:	bf08      	it	eq
 8013958:	1aad      	subeq	r5, r5, r2
 801395a:	68a3      	ldr	r3, [r4, #8]
 801395c:	6922      	ldr	r2, [r4, #16]
 801395e:	bf0c      	ite	eq
 8013960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013964:	2500      	movne	r5, #0
 8013966:	4293      	cmp	r3, r2
 8013968:	bfc4      	itt	gt
 801396a:	1a9b      	subgt	r3, r3, r2
 801396c:	18ed      	addgt	r5, r5, r3
 801396e:	2600      	movs	r6, #0
 8013970:	341a      	adds	r4, #26
 8013972:	42b5      	cmp	r5, r6
 8013974:	d11a      	bne.n	80139ac <_printf_common+0xc8>
 8013976:	2000      	movs	r0, #0
 8013978:	e008      	b.n	801398c <_printf_common+0xa8>
 801397a:	2301      	movs	r3, #1
 801397c:	4652      	mov	r2, sl
 801397e:	4649      	mov	r1, r9
 8013980:	4638      	mov	r0, r7
 8013982:	47c0      	blx	r8
 8013984:	3001      	adds	r0, #1
 8013986:	d103      	bne.n	8013990 <_printf_common+0xac>
 8013988:	f04f 30ff 	mov.w	r0, #4294967295
 801398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013990:	3501      	adds	r5, #1
 8013992:	e7c6      	b.n	8013922 <_printf_common+0x3e>
 8013994:	18e1      	adds	r1, r4, r3
 8013996:	1c5a      	adds	r2, r3, #1
 8013998:	2030      	movs	r0, #48	; 0x30
 801399a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801399e:	4422      	add	r2, r4
 80139a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80139a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80139a8:	3302      	adds	r3, #2
 80139aa:	e7c7      	b.n	801393c <_printf_common+0x58>
 80139ac:	2301      	movs	r3, #1
 80139ae:	4622      	mov	r2, r4
 80139b0:	4649      	mov	r1, r9
 80139b2:	4638      	mov	r0, r7
 80139b4:	47c0      	blx	r8
 80139b6:	3001      	adds	r0, #1
 80139b8:	d0e6      	beq.n	8013988 <_printf_common+0xa4>
 80139ba:	3601      	adds	r6, #1
 80139bc:	e7d9      	b.n	8013972 <_printf_common+0x8e>
	...

080139c0 <_printf_i>:
 80139c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80139c4:	460c      	mov	r4, r1
 80139c6:	4691      	mov	r9, r2
 80139c8:	7e27      	ldrb	r7, [r4, #24]
 80139ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80139cc:	2f78      	cmp	r7, #120	; 0x78
 80139ce:	4680      	mov	r8, r0
 80139d0:	469a      	mov	sl, r3
 80139d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80139d6:	d807      	bhi.n	80139e8 <_printf_i+0x28>
 80139d8:	2f62      	cmp	r7, #98	; 0x62
 80139da:	d80a      	bhi.n	80139f2 <_printf_i+0x32>
 80139dc:	2f00      	cmp	r7, #0
 80139de:	f000 80d8 	beq.w	8013b92 <_printf_i+0x1d2>
 80139e2:	2f58      	cmp	r7, #88	; 0x58
 80139e4:	f000 80a3 	beq.w	8013b2e <_printf_i+0x16e>
 80139e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80139ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80139f0:	e03a      	b.n	8013a68 <_printf_i+0xa8>
 80139f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80139f6:	2b15      	cmp	r3, #21
 80139f8:	d8f6      	bhi.n	80139e8 <_printf_i+0x28>
 80139fa:	a001      	add	r0, pc, #4	; (adr r0, 8013a00 <_printf_i+0x40>)
 80139fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013a00:	08013a59 	.word	0x08013a59
 8013a04:	08013a6d 	.word	0x08013a6d
 8013a08:	080139e9 	.word	0x080139e9
 8013a0c:	080139e9 	.word	0x080139e9
 8013a10:	080139e9 	.word	0x080139e9
 8013a14:	080139e9 	.word	0x080139e9
 8013a18:	08013a6d 	.word	0x08013a6d
 8013a1c:	080139e9 	.word	0x080139e9
 8013a20:	080139e9 	.word	0x080139e9
 8013a24:	080139e9 	.word	0x080139e9
 8013a28:	080139e9 	.word	0x080139e9
 8013a2c:	08013b79 	.word	0x08013b79
 8013a30:	08013a9d 	.word	0x08013a9d
 8013a34:	08013b5b 	.word	0x08013b5b
 8013a38:	080139e9 	.word	0x080139e9
 8013a3c:	080139e9 	.word	0x080139e9
 8013a40:	08013b9b 	.word	0x08013b9b
 8013a44:	080139e9 	.word	0x080139e9
 8013a48:	08013a9d 	.word	0x08013a9d
 8013a4c:	080139e9 	.word	0x080139e9
 8013a50:	080139e9 	.word	0x080139e9
 8013a54:	08013b63 	.word	0x08013b63
 8013a58:	680b      	ldr	r3, [r1, #0]
 8013a5a:	1d1a      	adds	r2, r3, #4
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	600a      	str	r2, [r1, #0]
 8013a60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a68:	2301      	movs	r3, #1
 8013a6a:	e0a3      	b.n	8013bb4 <_printf_i+0x1f4>
 8013a6c:	6825      	ldr	r5, [r4, #0]
 8013a6e:	6808      	ldr	r0, [r1, #0]
 8013a70:	062e      	lsls	r6, r5, #24
 8013a72:	f100 0304 	add.w	r3, r0, #4
 8013a76:	d50a      	bpl.n	8013a8e <_printf_i+0xce>
 8013a78:	6805      	ldr	r5, [r0, #0]
 8013a7a:	600b      	str	r3, [r1, #0]
 8013a7c:	2d00      	cmp	r5, #0
 8013a7e:	da03      	bge.n	8013a88 <_printf_i+0xc8>
 8013a80:	232d      	movs	r3, #45	; 0x2d
 8013a82:	426d      	negs	r5, r5
 8013a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a88:	485e      	ldr	r0, [pc, #376]	; (8013c04 <_printf_i+0x244>)
 8013a8a:	230a      	movs	r3, #10
 8013a8c:	e019      	b.n	8013ac2 <_printf_i+0x102>
 8013a8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8013a92:	6805      	ldr	r5, [r0, #0]
 8013a94:	600b      	str	r3, [r1, #0]
 8013a96:	bf18      	it	ne
 8013a98:	b22d      	sxthne	r5, r5
 8013a9a:	e7ef      	b.n	8013a7c <_printf_i+0xbc>
 8013a9c:	680b      	ldr	r3, [r1, #0]
 8013a9e:	6825      	ldr	r5, [r4, #0]
 8013aa0:	1d18      	adds	r0, r3, #4
 8013aa2:	6008      	str	r0, [r1, #0]
 8013aa4:	0628      	lsls	r0, r5, #24
 8013aa6:	d501      	bpl.n	8013aac <_printf_i+0xec>
 8013aa8:	681d      	ldr	r5, [r3, #0]
 8013aaa:	e002      	b.n	8013ab2 <_printf_i+0xf2>
 8013aac:	0669      	lsls	r1, r5, #25
 8013aae:	d5fb      	bpl.n	8013aa8 <_printf_i+0xe8>
 8013ab0:	881d      	ldrh	r5, [r3, #0]
 8013ab2:	4854      	ldr	r0, [pc, #336]	; (8013c04 <_printf_i+0x244>)
 8013ab4:	2f6f      	cmp	r7, #111	; 0x6f
 8013ab6:	bf0c      	ite	eq
 8013ab8:	2308      	moveq	r3, #8
 8013aba:	230a      	movne	r3, #10
 8013abc:	2100      	movs	r1, #0
 8013abe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ac2:	6866      	ldr	r6, [r4, #4]
 8013ac4:	60a6      	str	r6, [r4, #8]
 8013ac6:	2e00      	cmp	r6, #0
 8013ac8:	bfa2      	ittt	ge
 8013aca:	6821      	ldrge	r1, [r4, #0]
 8013acc:	f021 0104 	bicge.w	r1, r1, #4
 8013ad0:	6021      	strge	r1, [r4, #0]
 8013ad2:	b90d      	cbnz	r5, 8013ad8 <_printf_i+0x118>
 8013ad4:	2e00      	cmp	r6, #0
 8013ad6:	d04d      	beq.n	8013b74 <_printf_i+0x1b4>
 8013ad8:	4616      	mov	r6, r2
 8013ada:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ade:	fb03 5711 	mls	r7, r3, r1, r5
 8013ae2:	5dc7      	ldrb	r7, [r0, r7]
 8013ae4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013ae8:	462f      	mov	r7, r5
 8013aea:	42bb      	cmp	r3, r7
 8013aec:	460d      	mov	r5, r1
 8013aee:	d9f4      	bls.n	8013ada <_printf_i+0x11a>
 8013af0:	2b08      	cmp	r3, #8
 8013af2:	d10b      	bne.n	8013b0c <_printf_i+0x14c>
 8013af4:	6823      	ldr	r3, [r4, #0]
 8013af6:	07df      	lsls	r7, r3, #31
 8013af8:	d508      	bpl.n	8013b0c <_printf_i+0x14c>
 8013afa:	6923      	ldr	r3, [r4, #16]
 8013afc:	6861      	ldr	r1, [r4, #4]
 8013afe:	4299      	cmp	r1, r3
 8013b00:	bfde      	ittt	le
 8013b02:	2330      	movle	r3, #48	; 0x30
 8013b04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013b08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013b0c:	1b92      	subs	r2, r2, r6
 8013b0e:	6122      	str	r2, [r4, #16]
 8013b10:	f8cd a000 	str.w	sl, [sp]
 8013b14:	464b      	mov	r3, r9
 8013b16:	aa03      	add	r2, sp, #12
 8013b18:	4621      	mov	r1, r4
 8013b1a:	4640      	mov	r0, r8
 8013b1c:	f7ff fee2 	bl	80138e4 <_printf_common>
 8013b20:	3001      	adds	r0, #1
 8013b22:	d14c      	bne.n	8013bbe <_printf_i+0x1fe>
 8013b24:	f04f 30ff 	mov.w	r0, #4294967295
 8013b28:	b004      	add	sp, #16
 8013b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b2e:	4835      	ldr	r0, [pc, #212]	; (8013c04 <_printf_i+0x244>)
 8013b30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013b34:	6823      	ldr	r3, [r4, #0]
 8013b36:	680e      	ldr	r6, [r1, #0]
 8013b38:	061f      	lsls	r7, r3, #24
 8013b3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8013b3e:	600e      	str	r6, [r1, #0]
 8013b40:	d514      	bpl.n	8013b6c <_printf_i+0x1ac>
 8013b42:	07d9      	lsls	r1, r3, #31
 8013b44:	bf44      	itt	mi
 8013b46:	f043 0320 	orrmi.w	r3, r3, #32
 8013b4a:	6023      	strmi	r3, [r4, #0]
 8013b4c:	b91d      	cbnz	r5, 8013b56 <_printf_i+0x196>
 8013b4e:	6823      	ldr	r3, [r4, #0]
 8013b50:	f023 0320 	bic.w	r3, r3, #32
 8013b54:	6023      	str	r3, [r4, #0]
 8013b56:	2310      	movs	r3, #16
 8013b58:	e7b0      	b.n	8013abc <_printf_i+0xfc>
 8013b5a:	6823      	ldr	r3, [r4, #0]
 8013b5c:	f043 0320 	orr.w	r3, r3, #32
 8013b60:	6023      	str	r3, [r4, #0]
 8013b62:	2378      	movs	r3, #120	; 0x78
 8013b64:	4828      	ldr	r0, [pc, #160]	; (8013c08 <_printf_i+0x248>)
 8013b66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013b6a:	e7e3      	b.n	8013b34 <_printf_i+0x174>
 8013b6c:	065e      	lsls	r6, r3, #25
 8013b6e:	bf48      	it	mi
 8013b70:	b2ad      	uxthmi	r5, r5
 8013b72:	e7e6      	b.n	8013b42 <_printf_i+0x182>
 8013b74:	4616      	mov	r6, r2
 8013b76:	e7bb      	b.n	8013af0 <_printf_i+0x130>
 8013b78:	680b      	ldr	r3, [r1, #0]
 8013b7a:	6826      	ldr	r6, [r4, #0]
 8013b7c:	6960      	ldr	r0, [r4, #20]
 8013b7e:	1d1d      	adds	r5, r3, #4
 8013b80:	600d      	str	r5, [r1, #0]
 8013b82:	0635      	lsls	r5, r6, #24
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	d501      	bpl.n	8013b8c <_printf_i+0x1cc>
 8013b88:	6018      	str	r0, [r3, #0]
 8013b8a:	e002      	b.n	8013b92 <_printf_i+0x1d2>
 8013b8c:	0671      	lsls	r1, r6, #25
 8013b8e:	d5fb      	bpl.n	8013b88 <_printf_i+0x1c8>
 8013b90:	8018      	strh	r0, [r3, #0]
 8013b92:	2300      	movs	r3, #0
 8013b94:	6123      	str	r3, [r4, #16]
 8013b96:	4616      	mov	r6, r2
 8013b98:	e7ba      	b.n	8013b10 <_printf_i+0x150>
 8013b9a:	680b      	ldr	r3, [r1, #0]
 8013b9c:	1d1a      	adds	r2, r3, #4
 8013b9e:	600a      	str	r2, [r1, #0]
 8013ba0:	681e      	ldr	r6, [r3, #0]
 8013ba2:	6862      	ldr	r2, [r4, #4]
 8013ba4:	2100      	movs	r1, #0
 8013ba6:	4630      	mov	r0, r6
 8013ba8:	f7ec fb5a 	bl	8000260 <memchr>
 8013bac:	b108      	cbz	r0, 8013bb2 <_printf_i+0x1f2>
 8013bae:	1b80      	subs	r0, r0, r6
 8013bb0:	6060      	str	r0, [r4, #4]
 8013bb2:	6863      	ldr	r3, [r4, #4]
 8013bb4:	6123      	str	r3, [r4, #16]
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013bbc:	e7a8      	b.n	8013b10 <_printf_i+0x150>
 8013bbe:	6923      	ldr	r3, [r4, #16]
 8013bc0:	4632      	mov	r2, r6
 8013bc2:	4649      	mov	r1, r9
 8013bc4:	4640      	mov	r0, r8
 8013bc6:	47d0      	blx	sl
 8013bc8:	3001      	adds	r0, #1
 8013bca:	d0ab      	beq.n	8013b24 <_printf_i+0x164>
 8013bcc:	6823      	ldr	r3, [r4, #0]
 8013bce:	079b      	lsls	r3, r3, #30
 8013bd0:	d413      	bmi.n	8013bfa <_printf_i+0x23a>
 8013bd2:	68e0      	ldr	r0, [r4, #12]
 8013bd4:	9b03      	ldr	r3, [sp, #12]
 8013bd6:	4298      	cmp	r0, r3
 8013bd8:	bfb8      	it	lt
 8013bda:	4618      	movlt	r0, r3
 8013bdc:	e7a4      	b.n	8013b28 <_printf_i+0x168>
 8013bde:	2301      	movs	r3, #1
 8013be0:	4632      	mov	r2, r6
 8013be2:	4649      	mov	r1, r9
 8013be4:	4640      	mov	r0, r8
 8013be6:	47d0      	blx	sl
 8013be8:	3001      	adds	r0, #1
 8013bea:	d09b      	beq.n	8013b24 <_printf_i+0x164>
 8013bec:	3501      	adds	r5, #1
 8013bee:	68e3      	ldr	r3, [r4, #12]
 8013bf0:	9903      	ldr	r1, [sp, #12]
 8013bf2:	1a5b      	subs	r3, r3, r1
 8013bf4:	42ab      	cmp	r3, r5
 8013bf6:	dcf2      	bgt.n	8013bde <_printf_i+0x21e>
 8013bf8:	e7eb      	b.n	8013bd2 <_printf_i+0x212>
 8013bfa:	2500      	movs	r5, #0
 8013bfc:	f104 0619 	add.w	r6, r4, #25
 8013c00:	e7f5      	b.n	8013bee <_printf_i+0x22e>
 8013c02:	bf00      	nop
 8013c04:	0801748c 	.word	0x0801748c
 8013c08:	0801749d 	.word	0x0801749d

08013c0c <_putc_r>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	460d      	mov	r5, r1
 8013c10:	4614      	mov	r4, r2
 8013c12:	4606      	mov	r6, r0
 8013c14:	b118      	cbz	r0, 8013c1e <_putc_r+0x12>
 8013c16:	6983      	ldr	r3, [r0, #24]
 8013c18:	b90b      	cbnz	r3, 8013c1e <_putc_r+0x12>
 8013c1a:	f7fd f9eb 	bl	8010ff4 <__sinit>
 8013c1e:	4b1c      	ldr	r3, [pc, #112]	; (8013c90 <_putc_r+0x84>)
 8013c20:	429c      	cmp	r4, r3
 8013c22:	d124      	bne.n	8013c6e <_putc_r+0x62>
 8013c24:	6874      	ldr	r4, [r6, #4]
 8013c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c28:	07d8      	lsls	r0, r3, #31
 8013c2a:	d405      	bmi.n	8013c38 <_putc_r+0x2c>
 8013c2c:	89a3      	ldrh	r3, [r4, #12]
 8013c2e:	0599      	lsls	r1, r3, #22
 8013c30:	d402      	bmi.n	8013c38 <_putc_r+0x2c>
 8013c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c34:	f7fd fd91 	bl	801175a <__retarget_lock_acquire_recursive>
 8013c38:	68a3      	ldr	r3, [r4, #8]
 8013c3a:	3b01      	subs	r3, #1
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	60a3      	str	r3, [r4, #8]
 8013c40:	da05      	bge.n	8013c4e <_putc_r+0x42>
 8013c42:	69a2      	ldr	r2, [r4, #24]
 8013c44:	4293      	cmp	r3, r2
 8013c46:	db1c      	blt.n	8013c82 <_putc_r+0x76>
 8013c48:	b2eb      	uxtb	r3, r5
 8013c4a:	2b0a      	cmp	r3, #10
 8013c4c:	d019      	beq.n	8013c82 <_putc_r+0x76>
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	1c5a      	adds	r2, r3, #1
 8013c52:	6022      	str	r2, [r4, #0]
 8013c54:	701d      	strb	r5, [r3, #0]
 8013c56:	b2ed      	uxtb	r5, r5
 8013c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013c5a:	07da      	lsls	r2, r3, #31
 8013c5c:	d405      	bmi.n	8013c6a <_putc_r+0x5e>
 8013c5e:	89a3      	ldrh	r3, [r4, #12]
 8013c60:	059b      	lsls	r3, r3, #22
 8013c62:	d402      	bmi.n	8013c6a <_putc_r+0x5e>
 8013c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013c66:	f7fd fd7a 	bl	801175e <__retarget_lock_release_recursive>
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	bd70      	pop	{r4, r5, r6, pc}
 8013c6e:	4b09      	ldr	r3, [pc, #36]	; (8013c94 <_putc_r+0x88>)
 8013c70:	429c      	cmp	r4, r3
 8013c72:	d101      	bne.n	8013c78 <_putc_r+0x6c>
 8013c74:	68b4      	ldr	r4, [r6, #8]
 8013c76:	e7d6      	b.n	8013c26 <_putc_r+0x1a>
 8013c78:	4b07      	ldr	r3, [pc, #28]	; (8013c98 <_putc_r+0x8c>)
 8013c7a:	429c      	cmp	r4, r3
 8013c7c:	bf08      	it	eq
 8013c7e:	68f4      	ldreq	r4, [r6, #12]
 8013c80:	e7d1      	b.n	8013c26 <_putc_r+0x1a>
 8013c82:	4629      	mov	r1, r5
 8013c84:	4622      	mov	r2, r4
 8013c86:	4630      	mov	r0, r6
 8013c88:	f7ff f844 	bl	8012d14 <__swbuf_r>
 8013c8c:	4605      	mov	r5, r0
 8013c8e:	e7e3      	b.n	8013c58 <_putc_r+0x4c>
 8013c90:	08016efc 	.word	0x08016efc
 8013c94:	08016f1c 	.word	0x08016f1c
 8013c98:	08016edc 	.word	0x08016edc

08013c9c <_read_r>:
 8013c9c:	b538      	push	{r3, r4, r5, lr}
 8013c9e:	4d07      	ldr	r5, [pc, #28]	; (8013cbc <_read_r+0x20>)
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	4608      	mov	r0, r1
 8013ca4:	4611      	mov	r1, r2
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	602a      	str	r2, [r5, #0]
 8013caa:	461a      	mov	r2, r3
 8013cac:	f7ed f873 	bl	8000d96 <_read>
 8013cb0:	1c43      	adds	r3, r0, #1
 8013cb2:	d102      	bne.n	8013cba <_read_r+0x1e>
 8013cb4:	682b      	ldr	r3, [r5, #0]
 8013cb6:	b103      	cbz	r3, 8013cba <_read_r+0x1e>
 8013cb8:	6023      	str	r3, [r4, #0]
 8013cba:	bd38      	pop	{r3, r4, r5, pc}
 8013cbc:	20000b64 	.word	0x20000b64

08013cc0 <sniprintf>:
 8013cc0:	b40c      	push	{r2, r3}
 8013cc2:	b530      	push	{r4, r5, lr}
 8013cc4:	4b17      	ldr	r3, [pc, #92]	; (8013d24 <sniprintf+0x64>)
 8013cc6:	1e0c      	subs	r4, r1, #0
 8013cc8:	681d      	ldr	r5, [r3, #0]
 8013cca:	b09d      	sub	sp, #116	; 0x74
 8013ccc:	da08      	bge.n	8013ce0 <sniprintf+0x20>
 8013cce:	238b      	movs	r3, #139	; 0x8b
 8013cd0:	602b      	str	r3, [r5, #0]
 8013cd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013cd6:	b01d      	add	sp, #116	; 0x74
 8013cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cdc:	b002      	add	sp, #8
 8013cde:	4770      	bx	lr
 8013ce0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013ce4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ce8:	bf14      	ite	ne
 8013cea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013cee:	4623      	moveq	r3, r4
 8013cf0:	9304      	str	r3, [sp, #16]
 8013cf2:	9307      	str	r3, [sp, #28]
 8013cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013cf8:	9002      	str	r0, [sp, #8]
 8013cfa:	9006      	str	r0, [sp, #24]
 8013cfc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013d00:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013d02:	ab21      	add	r3, sp, #132	; 0x84
 8013d04:	a902      	add	r1, sp, #8
 8013d06:	4628      	mov	r0, r5
 8013d08:	9301      	str	r3, [sp, #4]
 8013d0a:	f7ff fb91 	bl	8013430 <_svfiprintf_r>
 8013d0e:	1c43      	adds	r3, r0, #1
 8013d10:	bfbc      	itt	lt
 8013d12:	238b      	movlt	r3, #139	; 0x8b
 8013d14:	602b      	strlt	r3, [r5, #0]
 8013d16:	2c00      	cmp	r4, #0
 8013d18:	d0dd      	beq.n	8013cd6 <sniprintf+0x16>
 8013d1a:	9b02      	ldr	r3, [sp, #8]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	701a      	strb	r2, [r3, #0]
 8013d20:	e7d9      	b.n	8013cd6 <sniprintf+0x16>
 8013d22:	bf00      	nop
 8013d24:	20000100 	.word	0x20000100

08013d28 <siscanf>:
 8013d28:	b40e      	push	{r1, r2, r3}
 8013d2a:	b510      	push	{r4, lr}
 8013d2c:	b09f      	sub	sp, #124	; 0x7c
 8013d2e:	ac21      	add	r4, sp, #132	; 0x84
 8013d30:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013d34:	f854 2b04 	ldr.w	r2, [r4], #4
 8013d38:	9201      	str	r2, [sp, #4]
 8013d3a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013d3e:	9004      	str	r0, [sp, #16]
 8013d40:	9008      	str	r0, [sp, #32]
 8013d42:	f7ec fa7b 	bl	800023c <strlen>
 8013d46:	4b0c      	ldr	r3, [pc, #48]	; (8013d78 <siscanf+0x50>)
 8013d48:	9005      	str	r0, [sp, #20]
 8013d4a:	9009      	str	r0, [sp, #36]	; 0x24
 8013d4c:	930d      	str	r3, [sp, #52]	; 0x34
 8013d4e:	480b      	ldr	r0, [pc, #44]	; (8013d7c <siscanf+0x54>)
 8013d50:	9a01      	ldr	r2, [sp, #4]
 8013d52:	6800      	ldr	r0, [r0, #0]
 8013d54:	9403      	str	r4, [sp, #12]
 8013d56:	2300      	movs	r3, #0
 8013d58:	9311      	str	r3, [sp, #68]	; 0x44
 8013d5a:	9316      	str	r3, [sp, #88]	; 0x58
 8013d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d60:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013d64:	a904      	add	r1, sp, #16
 8013d66:	4623      	mov	r3, r4
 8013d68:	f000 f8ba 	bl	8013ee0 <__ssvfiscanf_r>
 8013d6c:	b01f      	add	sp, #124	; 0x7c
 8013d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d72:	b003      	add	sp, #12
 8013d74:	4770      	bx	lr
 8013d76:	bf00      	nop
 8013d78:	08011bcf 	.word	0x08011bcf
 8013d7c:	20000100 	.word	0x20000100

08013d80 <strcpy>:
 8013d80:	4603      	mov	r3, r0
 8013d82:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013d86:	f803 2b01 	strb.w	r2, [r3], #1
 8013d8a:	2a00      	cmp	r2, #0
 8013d8c:	d1f9      	bne.n	8013d82 <strcpy+0x2>
 8013d8e:	4770      	bx	lr

08013d90 <strncmp>:
 8013d90:	b510      	push	{r4, lr}
 8013d92:	b16a      	cbz	r2, 8013db0 <strncmp+0x20>
 8013d94:	3901      	subs	r1, #1
 8013d96:	1884      	adds	r4, r0, r2
 8013d98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013d9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013da0:	4293      	cmp	r3, r2
 8013da2:	d103      	bne.n	8013dac <strncmp+0x1c>
 8013da4:	42a0      	cmp	r0, r4
 8013da6:	d001      	beq.n	8013dac <strncmp+0x1c>
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d1f5      	bne.n	8013d98 <strncmp+0x8>
 8013dac:	1a98      	subs	r0, r3, r2
 8013dae:	bd10      	pop	{r4, pc}
 8013db0:	4610      	mov	r0, r2
 8013db2:	e7fc      	b.n	8013dae <strncmp+0x1e>

08013db4 <__ascii_wctomb>:
 8013db4:	b149      	cbz	r1, 8013dca <__ascii_wctomb+0x16>
 8013db6:	2aff      	cmp	r2, #255	; 0xff
 8013db8:	bf85      	ittet	hi
 8013dba:	238a      	movhi	r3, #138	; 0x8a
 8013dbc:	6003      	strhi	r3, [r0, #0]
 8013dbe:	700a      	strbls	r2, [r1, #0]
 8013dc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8013dc4:	bf98      	it	ls
 8013dc6:	2001      	movls	r0, #1
 8013dc8:	4770      	bx	lr
 8013dca:	4608      	mov	r0, r1
 8013dcc:	4770      	bx	lr
	...

08013dd0 <__env_lock>:
 8013dd0:	4801      	ldr	r0, [pc, #4]	; (8013dd8 <__env_lock+0x8>)
 8013dd2:	f7fd bcc2 	b.w	801175a <__retarget_lock_acquire_recursive>
 8013dd6:	bf00      	nop
 8013dd8:	20000b5a 	.word	0x20000b5a

08013ddc <__env_unlock>:
 8013ddc:	4801      	ldr	r0, [pc, #4]	; (8013de4 <__env_unlock+0x8>)
 8013dde:	f7fd bcbe 	b.w	801175e <__retarget_lock_release_recursive>
 8013de2:	bf00      	nop
 8013de4:	20000b5a 	.word	0x20000b5a

08013de8 <memmove>:
 8013de8:	4288      	cmp	r0, r1
 8013dea:	b510      	push	{r4, lr}
 8013dec:	eb01 0402 	add.w	r4, r1, r2
 8013df0:	d902      	bls.n	8013df8 <memmove+0x10>
 8013df2:	4284      	cmp	r4, r0
 8013df4:	4623      	mov	r3, r4
 8013df6:	d807      	bhi.n	8013e08 <memmove+0x20>
 8013df8:	1e43      	subs	r3, r0, #1
 8013dfa:	42a1      	cmp	r1, r4
 8013dfc:	d008      	beq.n	8013e10 <memmove+0x28>
 8013dfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013e06:	e7f8      	b.n	8013dfa <memmove+0x12>
 8013e08:	4402      	add	r2, r0
 8013e0a:	4601      	mov	r1, r0
 8013e0c:	428a      	cmp	r2, r1
 8013e0e:	d100      	bne.n	8013e12 <memmove+0x2a>
 8013e10:	bd10      	pop	{r4, pc}
 8013e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013e16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013e1a:	e7f7      	b.n	8013e0c <memmove+0x24>

08013e1c <_malloc_usable_size_r>:
 8013e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013e20:	1f18      	subs	r0, r3, #4
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	bfbc      	itt	lt
 8013e26:	580b      	ldrlt	r3, [r1, r0]
 8013e28:	18c0      	addlt	r0, r0, r3
 8013e2a:	4770      	bx	lr

08013e2c <_sungetc_r>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	1c4b      	adds	r3, r1, #1
 8013e30:	4614      	mov	r4, r2
 8013e32:	d103      	bne.n	8013e3c <_sungetc_r+0x10>
 8013e34:	f04f 35ff 	mov.w	r5, #4294967295
 8013e38:	4628      	mov	r0, r5
 8013e3a:	bd38      	pop	{r3, r4, r5, pc}
 8013e3c:	8993      	ldrh	r3, [r2, #12]
 8013e3e:	f023 0320 	bic.w	r3, r3, #32
 8013e42:	8193      	strh	r3, [r2, #12]
 8013e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013e46:	6852      	ldr	r2, [r2, #4]
 8013e48:	b2cd      	uxtb	r5, r1
 8013e4a:	b18b      	cbz	r3, 8013e70 <_sungetc_r+0x44>
 8013e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	dd08      	ble.n	8013e64 <_sungetc_r+0x38>
 8013e52:	6823      	ldr	r3, [r4, #0]
 8013e54:	1e5a      	subs	r2, r3, #1
 8013e56:	6022      	str	r2, [r4, #0]
 8013e58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013e5c:	6863      	ldr	r3, [r4, #4]
 8013e5e:	3301      	adds	r3, #1
 8013e60:	6063      	str	r3, [r4, #4]
 8013e62:	e7e9      	b.n	8013e38 <_sungetc_r+0xc>
 8013e64:	4621      	mov	r1, r4
 8013e66:	f000 fbbf 	bl	80145e8 <__submore>
 8013e6a:	2800      	cmp	r0, #0
 8013e6c:	d0f1      	beq.n	8013e52 <_sungetc_r+0x26>
 8013e6e:	e7e1      	b.n	8013e34 <_sungetc_r+0x8>
 8013e70:	6921      	ldr	r1, [r4, #16]
 8013e72:	6823      	ldr	r3, [r4, #0]
 8013e74:	b151      	cbz	r1, 8013e8c <_sungetc_r+0x60>
 8013e76:	4299      	cmp	r1, r3
 8013e78:	d208      	bcs.n	8013e8c <_sungetc_r+0x60>
 8013e7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013e7e:	42a9      	cmp	r1, r5
 8013e80:	d104      	bne.n	8013e8c <_sungetc_r+0x60>
 8013e82:	3b01      	subs	r3, #1
 8013e84:	3201      	adds	r2, #1
 8013e86:	6023      	str	r3, [r4, #0]
 8013e88:	6062      	str	r2, [r4, #4]
 8013e8a:	e7d5      	b.n	8013e38 <_sungetc_r+0xc>
 8013e8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013e94:	6363      	str	r3, [r4, #52]	; 0x34
 8013e96:	2303      	movs	r3, #3
 8013e98:	63a3      	str	r3, [r4, #56]	; 0x38
 8013e9a:	4623      	mov	r3, r4
 8013e9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	e7dc      	b.n	8013e60 <_sungetc_r+0x34>

08013ea6 <__ssrefill_r>:
 8013ea6:	b510      	push	{r4, lr}
 8013ea8:	460c      	mov	r4, r1
 8013eaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013eac:	b169      	cbz	r1, 8013eca <__ssrefill_r+0x24>
 8013eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013eb2:	4299      	cmp	r1, r3
 8013eb4:	d001      	beq.n	8013eba <__ssrefill_r+0x14>
 8013eb6:	f7fd fcdd 	bl	8011874 <_free_r>
 8013eba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013ebc:	6063      	str	r3, [r4, #4]
 8013ebe:	2000      	movs	r0, #0
 8013ec0:	6360      	str	r0, [r4, #52]	; 0x34
 8013ec2:	b113      	cbz	r3, 8013eca <__ssrefill_r+0x24>
 8013ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013ec6:	6023      	str	r3, [r4, #0]
 8013ec8:	bd10      	pop	{r4, pc}
 8013eca:	6923      	ldr	r3, [r4, #16]
 8013ecc:	6023      	str	r3, [r4, #0]
 8013ece:	2300      	movs	r3, #0
 8013ed0:	6063      	str	r3, [r4, #4]
 8013ed2:	89a3      	ldrh	r3, [r4, #12]
 8013ed4:	f043 0320 	orr.w	r3, r3, #32
 8013ed8:	81a3      	strh	r3, [r4, #12]
 8013eda:	f04f 30ff 	mov.w	r0, #4294967295
 8013ede:	e7f3      	b.n	8013ec8 <__ssrefill_r+0x22>

08013ee0 <__ssvfiscanf_r>:
 8013ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ee4:	460c      	mov	r4, r1
 8013ee6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8013eea:	2100      	movs	r1, #0
 8013eec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013ef0:	49b2      	ldr	r1, [pc, #712]	; (80141bc <__ssvfiscanf_r+0x2dc>)
 8013ef2:	91a0      	str	r1, [sp, #640]	; 0x280
 8013ef4:	f10d 0804 	add.w	r8, sp, #4
 8013ef8:	49b1      	ldr	r1, [pc, #708]	; (80141c0 <__ssvfiscanf_r+0x2e0>)
 8013efa:	4fb2      	ldr	r7, [pc, #712]	; (80141c4 <__ssvfiscanf_r+0x2e4>)
 8013efc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80141c8 <__ssvfiscanf_r+0x2e8>
 8013f00:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013f04:	4606      	mov	r6, r0
 8013f06:	91a1      	str	r1, [sp, #644]	; 0x284
 8013f08:	9300      	str	r3, [sp, #0]
 8013f0a:	f892 a000 	ldrb.w	sl, [r2]
 8013f0e:	f1ba 0f00 	cmp.w	sl, #0
 8013f12:	f000 8151 	beq.w	80141b8 <__ssvfiscanf_r+0x2d8>
 8013f16:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8013f1a:	f013 0308 	ands.w	r3, r3, #8
 8013f1e:	f102 0501 	add.w	r5, r2, #1
 8013f22:	d019      	beq.n	8013f58 <__ssvfiscanf_r+0x78>
 8013f24:	6863      	ldr	r3, [r4, #4]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	dd0f      	ble.n	8013f4a <__ssvfiscanf_r+0x6a>
 8013f2a:	6823      	ldr	r3, [r4, #0]
 8013f2c:	781a      	ldrb	r2, [r3, #0]
 8013f2e:	5cba      	ldrb	r2, [r7, r2]
 8013f30:	0712      	lsls	r2, r2, #28
 8013f32:	d401      	bmi.n	8013f38 <__ssvfiscanf_r+0x58>
 8013f34:	462a      	mov	r2, r5
 8013f36:	e7e8      	b.n	8013f0a <__ssvfiscanf_r+0x2a>
 8013f38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8013f3a:	3201      	adds	r2, #1
 8013f3c:	9245      	str	r2, [sp, #276]	; 0x114
 8013f3e:	6862      	ldr	r2, [r4, #4]
 8013f40:	3301      	adds	r3, #1
 8013f42:	3a01      	subs	r2, #1
 8013f44:	6062      	str	r2, [r4, #4]
 8013f46:	6023      	str	r3, [r4, #0]
 8013f48:	e7ec      	b.n	8013f24 <__ssvfiscanf_r+0x44>
 8013f4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	4630      	mov	r0, r6
 8013f50:	4798      	blx	r3
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d0e9      	beq.n	8013f2a <__ssvfiscanf_r+0x4a>
 8013f56:	e7ed      	b.n	8013f34 <__ssvfiscanf_r+0x54>
 8013f58:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8013f5c:	f040 8083 	bne.w	8014066 <__ssvfiscanf_r+0x186>
 8013f60:	9341      	str	r3, [sp, #260]	; 0x104
 8013f62:	9343      	str	r3, [sp, #268]	; 0x10c
 8013f64:	7853      	ldrb	r3, [r2, #1]
 8013f66:	2b2a      	cmp	r3, #42	; 0x2a
 8013f68:	bf02      	ittt	eq
 8013f6a:	2310      	moveq	r3, #16
 8013f6c:	1c95      	addeq	r5, r2, #2
 8013f6e:	9341      	streq	r3, [sp, #260]	; 0x104
 8013f70:	220a      	movs	r2, #10
 8013f72:	46ab      	mov	fp, r5
 8013f74:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8013f78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8013f7c:	2b09      	cmp	r3, #9
 8013f7e:	d91d      	bls.n	8013fbc <__ssvfiscanf_r+0xdc>
 8013f80:	4891      	ldr	r0, [pc, #580]	; (80141c8 <__ssvfiscanf_r+0x2e8>)
 8013f82:	2203      	movs	r2, #3
 8013f84:	f7ec f96c 	bl	8000260 <memchr>
 8013f88:	b140      	cbz	r0, 8013f9c <__ssvfiscanf_r+0xbc>
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	eba0 0009 	sub.w	r0, r0, r9
 8013f90:	fa03 f000 	lsl.w	r0, r3, r0
 8013f94:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8013f96:	4318      	orrs	r0, r3
 8013f98:	9041      	str	r0, [sp, #260]	; 0x104
 8013f9a:	465d      	mov	r5, fp
 8013f9c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013fa0:	2b78      	cmp	r3, #120	; 0x78
 8013fa2:	d806      	bhi.n	8013fb2 <__ssvfiscanf_r+0xd2>
 8013fa4:	2b57      	cmp	r3, #87	; 0x57
 8013fa6:	d810      	bhi.n	8013fca <__ssvfiscanf_r+0xea>
 8013fa8:	2b25      	cmp	r3, #37	; 0x25
 8013faa:	d05c      	beq.n	8014066 <__ssvfiscanf_r+0x186>
 8013fac:	d856      	bhi.n	801405c <__ssvfiscanf_r+0x17c>
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d074      	beq.n	801409c <__ssvfiscanf_r+0x1bc>
 8013fb2:	2303      	movs	r3, #3
 8013fb4:	9347      	str	r3, [sp, #284]	; 0x11c
 8013fb6:	230a      	movs	r3, #10
 8013fb8:	9342      	str	r3, [sp, #264]	; 0x108
 8013fba:	e081      	b.n	80140c0 <__ssvfiscanf_r+0x1e0>
 8013fbc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8013fbe:	fb02 1303 	mla	r3, r2, r3, r1
 8013fc2:	3b30      	subs	r3, #48	; 0x30
 8013fc4:	9343      	str	r3, [sp, #268]	; 0x10c
 8013fc6:	465d      	mov	r5, fp
 8013fc8:	e7d3      	b.n	8013f72 <__ssvfiscanf_r+0x92>
 8013fca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8013fce:	2a20      	cmp	r2, #32
 8013fd0:	d8ef      	bhi.n	8013fb2 <__ssvfiscanf_r+0xd2>
 8013fd2:	a101      	add	r1, pc, #4	; (adr r1, 8013fd8 <__ssvfiscanf_r+0xf8>)
 8013fd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013fd8:	080140ab 	.word	0x080140ab
 8013fdc:	08013fb3 	.word	0x08013fb3
 8013fe0:	08013fb3 	.word	0x08013fb3
 8013fe4:	08014109 	.word	0x08014109
 8013fe8:	08013fb3 	.word	0x08013fb3
 8013fec:	08013fb3 	.word	0x08013fb3
 8013ff0:	08013fb3 	.word	0x08013fb3
 8013ff4:	08013fb3 	.word	0x08013fb3
 8013ff8:	08013fb3 	.word	0x08013fb3
 8013ffc:	08013fb3 	.word	0x08013fb3
 8014000:	08013fb3 	.word	0x08013fb3
 8014004:	0801411f 	.word	0x0801411f
 8014008:	080140f5 	.word	0x080140f5
 801400c:	08014063 	.word	0x08014063
 8014010:	08014063 	.word	0x08014063
 8014014:	08014063 	.word	0x08014063
 8014018:	08013fb3 	.word	0x08013fb3
 801401c:	080140f9 	.word	0x080140f9
 8014020:	08013fb3 	.word	0x08013fb3
 8014024:	08013fb3 	.word	0x08013fb3
 8014028:	08013fb3 	.word	0x08013fb3
 801402c:	08013fb3 	.word	0x08013fb3
 8014030:	0801412f 	.word	0x0801412f
 8014034:	08014101 	.word	0x08014101
 8014038:	080140a3 	.word	0x080140a3
 801403c:	08013fb3 	.word	0x08013fb3
 8014040:	08013fb3 	.word	0x08013fb3
 8014044:	0801412b 	.word	0x0801412b
 8014048:	08013fb3 	.word	0x08013fb3
 801404c:	080140f5 	.word	0x080140f5
 8014050:	08013fb3 	.word	0x08013fb3
 8014054:	08013fb3 	.word	0x08013fb3
 8014058:	080140ab 	.word	0x080140ab
 801405c:	3b45      	subs	r3, #69	; 0x45
 801405e:	2b02      	cmp	r3, #2
 8014060:	d8a7      	bhi.n	8013fb2 <__ssvfiscanf_r+0xd2>
 8014062:	2305      	movs	r3, #5
 8014064:	e02b      	b.n	80140be <__ssvfiscanf_r+0x1de>
 8014066:	6863      	ldr	r3, [r4, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	dd0d      	ble.n	8014088 <__ssvfiscanf_r+0x1a8>
 801406c:	6823      	ldr	r3, [r4, #0]
 801406e:	781a      	ldrb	r2, [r3, #0]
 8014070:	4552      	cmp	r2, sl
 8014072:	f040 80a1 	bne.w	80141b8 <__ssvfiscanf_r+0x2d8>
 8014076:	3301      	adds	r3, #1
 8014078:	6862      	ldr	r2, [r4, #4]
 801407a:	6023      	str	r3, [r4, #0]
 801407c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801407e:	3a01      	subs	r2, #1
 8014080:	3301      	adds	r3, #1
 8014082:	6062      	str	r2, [r4, #4]
 8014084:	9345      	str	r3, [sp, #276]	; 0x114
 8014086:	e755      	b.n	8013f34 <__ssvfiscanf_r+0x54>
 8014088:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801408a:	4621      	mov	r1, r4
 801408c:	4630      	mov	r0, r6
 801408e:	4798      	blx	r3
 8014090:	2800      	cmp	r0, #0
 8014092:	d0eb      	beq.n	801406c <__ssvfiscanf_r+0x18c>
 8014094:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014096:	2800      	cmp	r0, #0
 8014098:	f040 8084 	bne.w	80141a4 <__ssvfiscanf_r+0x2c4>
 801409c:	f04f 30ff 	mov.w	r0, #4294967295
 80140a0:	e086      	b.n	80141b0 <__ssvfiscanf_r+0x2d0>
 80140a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80140a4:	f042 0220 	orr.w	r2, r2, #32
 80140a8:	9241      	str	r2, [sp, #260]	; 0x104
 80140aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80140ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80140b0:	9241      	str	r2, [sp, #260]	; 0x104
 80140b2:	2210      	movs	r2, #16
 80140b4:	2b6f      	cmp	r3, #111	; 0x6f
 80140b6:	9242      	str	r2, [sp, #264]	; 0x108
 80140b8:	bf34      	ite	cc
 80140ba:	2303      	movcc	r3, #3
 80140bc:	2304      	movcs	r3, #4
 80140be:	9347      	str	r3, [sp, #284]	; 0x11c
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	dd41      	ble.n	801414a <__ssvfiscanf_r+0x26a>
 80140c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80140c8:	0659      	lsls	r1, r3, #25
 80140ca:	d404      	bmi.n	80140d6 <__ssvfiscanf_r+0x1f6>
 80140cc:	6823      	ldr	r3, [r4, #0]
 80140ce:	781a      	ldrb	r2, [r3, #0]
 80140d0:	5cba      	ldrb	r2, [r7, r2]
 80140d2:	0712      	lsls	r2, r2, #28
 80140d4:	d440      	bmi.n	8014158 <__ssvfiscanf_r+0x278>
 80140d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80140d8:	2b02      	cmp	r3, #2
 80140da:	dc4f      	bgt.n	801417c <__ssvfiscanf_r+0x29c>
 80140dc:	466b      	mov	r3, sp
 80140de:	4622      	mov	r2, r4
 80140e0:	a941      	add	r1, sp, #260	; 0x104
 80140e2:	4630      	mov	r0, r6
 80140e4:	f000 f874 	bl	80141d0 <_scanf_chars>
 80140e8:	2801      	cmp	r0, #1
 80140ea:	d065      	beq.n	80141b8 <__ssvfiscanf_r+0x2d8>
 80140ec:	2802      	cmp	r0, #2
 80140ee:	f47f af21 	bne.w	8013f34 <__ssvfiscanf_r+0x54>
 80140f2:	e7cf      	b.n	8014094 <__ssvfiscanf_r+0x1b4>
 80140f4:	220a      	movs	r2, #10
 80140f6:	e7dd      	b.n	80140b4 <__ssvfiscanf_r+0x1d4>
 80140f8:	2300      	movs	r3, #0
 80140fa:	9342      	str	r3, [sp, #264]	; 0x108
 80140fc:	2303      	movs	r3, #3
 80140fe:	e7de      	b.n	80140be <__ssvfiscanf_r+0x1de>
 8014100:	2308      	movs	r3, #8
 8014102:	9342      	str	r3, [sp, #264]	; 0x108
 8014104:	2304      	movs	r3, #4
 8014106:	e7da      	b.n	80140be <__ssvfiscanf_r+0x1de>
 8014108:	4629      	mov	r1, r5
 801410a:	4640      	mov	r0, r8
 801410c:	f000 f9ac 	bl	8014468 <__sccl>
 8014110:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014116:	9341      	str	r3, [sp, #260]	; 0x104
 8014118:	4605      	mov	r5, r0
 801411a:	2301      	movs	r3, #1
 801411c:	e7cf      	b.n	80140be <__ssvfiscanf_r+0x1de>
 801411e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014124:	9341      	str	r3, [sp, #260]	; 0x104
 8014126:	2300      	movs	r3, #0
 8014128:	e7c9      	b.n	80140be <__ssvfiscanf_r+0x1de>
 801412a:	2302      	movs	r3, #2
 801412c:	e7c7      	b.n	80140be <__ssvfiscanf_r+0x1de>
 801412e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8014130:	06c3      	lsls	r3, r0, #27
 8014132:	f53f aeff 	bmi.w	8013f34 <__ssvfiscanf_r+0x54>
 8014136:	9b00      	ldr	r3, [sp, #0]
 8014138:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801413a:	1d19      	adds	r1, r3, #4
 801413c:	9100      	str	r1, [sp, #0]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	07c0      	lsls	r0, r0, #31
 8014142:	bf4c      	ite	mi
 8014144:	801a      	strhmi	r2, [r3, #0]
 8014146:	601a      	strpl	r2, [r3, #0]
 8014148:	e6f4      	b.n	8013f34 <__ssvfiscanf_r+0x54>
 801414a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801414c:	4621      	mov	r1, r4
 801414e:	4630      	mov	r0, r6
 8014150:	4798      	blx	r3
 8014152:	2800      	cmp	r0, #0
 8014154:	d0b7      	beq.n	80140c6 <__ssvfiscanf_r+0x1e6>
 8014156:	e79d      	b.n	8014094 <__ssvfiscanf_r+0x1b4>
 8014158:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801415a:	3201      	adds	r2, #1
 801415c:	9245      	str	r2, [sp, #276]	; 0x114
 801415e:	6862      	ldr	r2, [r4, #4]
 8014160:	3a01      	subs	r2, #1
 8014162:	2a00      	cmp	r2, #0
 8014164:	6062      	str	r2, [r4, #4]
 8014166:	dd02      	ble.n	801416e <__ssvfiscanf_r+0x28e>
 8014168:	3301      	adds	r3, #1
 801416a:	6023      	str	r3, [r4, #0]
 801416c:	e7ae      	b.n	80140cc <__ssvfiscanf_r+0x1ec>
 801416e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014170:	4621      	mov	r1, r4
 8014172:	4630      	mov	r0, r6
 8014174:	4798      	blx	r3
 8014176:	2800      	cmp	r0, #0
 8014178:	d0a8      	beq.n	80140cc <__ssvfiscanf_r+0x1ec>
 801417a:	e78b      	b.n	8014094 <__ssvfiscanf_r+0x1b4>
 801417c:	2b04      	cmp	r3, #4
 801417e:	dc06      	bgt.n	801418e <__ssvfiscanf_r+0x2ae>
 8014180:	466b      	mov	r3, sp
 8014182:	4622      	mov	r2, r4
 8014184:	a941      	add	r1, sp, #260	; 0x104
 8014186:	4630      	mov	r0, r6
 8014188:	f000 f87a 	bl	8014280 <_scanf_i>
 801418c:	e7ac      	b.n	80140e8 <__ssvfiscanf_r+0x208>
 801418e:	4b0f      	ldr	r3, [pc, #60]	; (80141cc <__ssvfiscanf_r+0x2ec>)
 8014190:	2b00      	cmp	r3, #0
 8014192:	f43f aecf 	beq.w	8013f34 <__ssvfiscanf_r+0x54>
 8014196:	466b      	mov	r3, sp
 8014198:	4622      	mov	r2, r4
 801419a:	a941      	add	r1, sp, #260	; 0x104
 801419c:	4630      	mov	r0, r6
 801419e:	f3af 8000 	nop.w
 80141a2:	e7a1      	b.n	80140e8 <__ssvfiscanf_r+0x208>
 80141a4:	89a3      	ldrh	r3, [r4, #12]
 80141a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80141aa:	bf18      	it	ne
 80141ac:	f04f 30ff 	movne.w	r0, #4294967295
 80141b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80141b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80141ba:	e7f9      	b.n	80141b0 <__ssvfiscanf_r+0x2d0>
 80141bc:	08013e2d 	.word	0x08013e2d
 80141c0:	08013ea7 	.word	0x08013ea7
 80141c4:	08017371 	.word	0x08017371
 80141c8:	08017481 	.word	0x08017481
 80141cc:	00000000 	.word	0x00000000

080141d0 <_scanf_chars>:
 80141d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80141d4:	4615      	mov	r5, r2
 80141d6:	688a      	ldr	r2, [r1, #8]
 80141d8:	4680      	mov	r8, r0
 80141da:	460c      	mov	r4, r1
 80141dc:	b932      	cbnz	r2, 80141ec <_scanf_chars+0x1c>
 80141de:	698a      	ldr	r2, [r1, #24]
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	bf0c      	ite	eq
 80141e4:	2201      	moveq	r2, #1
 80141e6:	f04f 32ff 	movne.w	r2, #4294967295
 80141ea:	608a      	str	r2, [r1, #8]
 80141ec:	6822      	ldr	r2, [r4, #0]
 80141ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 801427c <_scanf_chars+0xac>
 80141f2:	06d1      	lsls	r1, r2, #27
 80141f4:	bf5f      	itttt	pl
 80141f6:	681a      	ldrpl	r2, [r3, #0]
 80141f8:	1d11      	addpl	r1, r2, #4
 80141fa:	6019      	strpl	r1, [r3, #0]
 80141fc:	6816      	ldrpl	r6, [r2, #0]
 80141fe:	2700      	movs	r7, #0
 8014200:	69a0      	ldr	r0, [r4, #24]
 8014202:	b188      	cbz	r0, 8014228 <_scanf_chars+0x58>
 8014204:	2801      	cmp	r0, #1
 8014206:	d107      	bne.n	8014218 <_scanf_chars+0x48>
 8014208:	682b      	ldr	r3, [r5, #0]
 801420a:	781a      	ldrb	r2, [r3, #0]
 801420c:	6963      	ldr	r3, [r4, #20]
 801420e:	5c9b      	ldrb	r3, [r3, r2]
 8014210:	b953      	cbnz	r3, 8014228 <_scanf_chars+0x58>
 8014212:	bb27      	cbnz	r7, 801425e <_scanf_chars+0x8e>
 8014214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014218:	2802      	cmp	r0, #2
 801421a:	d120      	bne.n	801425e <_scanf_chars+0x8e>
 801421c:	682b      	ldr	r3, [r5, #0]
 801421e:	781b      	ldrb	r3, [r3, #0]
 8014220:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014224:	071b      	lsls	r3, r3, #28
 8014226:	d41a      	bmi.n	801425e <_scanf_chars+0x8e>
 8014228:	6823      	ldr	r3, [r4, #0]
 801422a:	06da      	lsls	r2, r3, #27
 801422c:	bf5e      	ittt	pl
 801422e:	682b      	ldrpl	r3, [r5, #0]
 8014230:	781b      	ldrbpl	r3, [r3, #0]
 8014232:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014236:	682a      	ldr	r2, [r5, #0]
 8014238:	686b      	ldr	r3, [r5, #4]
 801423a:	3201      	adds	r2, #1
 801423c:	602a      	str	r2, [r5, #0]
 801423e:	68a2      	ldr	r2, [r4, #8]
 8014240:	3b01      	subs	r3, #1
 8014242:	3a01      	subs	r2, #1
 8014244:	606b      	str	r3, [r5, #4]
 8014246:	3701      	adds	r7, #1
 8014248:	60a2      	str	r2, [r4, #8]
 801424a:	b142      	cbz	r2, 801425e <_scanf_chars+0x8e>
 801424c:	2b00      	cmp	r3, #0
 801424e:	dcd7      	bgt.n	8014200 <_scanf_chars+0x30>
 8014250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014254:	4629      	mov	r1, r5
 8014256:	4640      	mov	r0, r8
 8014258:	4798      	blx	r3
 801425a:	2800      	cmp	r0, #0
 801425c:	d0d0      	beq.n	8014200 <_scanf_chars+0x30>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	f013 0310 	ands.w	r3, r3, #16
 8014264:	d105      	bne.n	8014272 <_scanf_chars+0xa2>
 8014266:	68e2      	ldr	r2, [r4, #12]
 8014268:	3201      	adds	r2, #1
 801426a:	60e2      	str	r2, [r4, #12]
 801426c:	69a2      	ldr	r2, [r4, #24]
 801426e:	b102      	cbz	r2, 8014272 <_scanf_chars+0xa2>
 8014270:	7033      	strb	r3, [r6, #0]
 8014272:	6923      	ldr	r3, [r4, #16]
 8014274:	441f      	add	r7, r3
 8014276:	6127      	str	r7, [r4, #16]
 8014278:	2000      	movs	r0, #0
 801427a:	e7cb      	b.n	8014214 <_scanf_chars+0x44>
 801427c:	08017371 	.word	0x08017371

08014280 <_scanf_i>:
 8014280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014284:	4698      	mov	r8, r3
 8014286:	4b74      	ldr	r3, [pc, #464]	; (8014458 <_scanf_i+0x1d8>)
 8014288:	460c      	mov	r4, r1
 801428a:	4682      	mov	sl, r0
 801428c:	4616      	mov	r6, r2
 801428e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014292:	b087      	sub	sp, #28
 8014294:	ab03      	add	r3, sp, #12
 8014296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801429a:	4b70      	ldr	r3, [pc, #448]	; (801445c <_scanf_i+0x1dc>)
 801429c:	69a1      	ldr	r1, [r4, #24]
 801429e:	4a70      	ldr	r2, [pc, #448]	; (8014460 <_scanf_i+0x1e0>)
 80142a0:	2903      	cmp	r1, #3
 80142a2:	bf18      	it	ne
 80142a4:	461a      	movne	r2, r3
 80142a6:	68a3      	ldr	r3, [r4, #8]
 80142a8:	9201      	str	r2, [sp, #4]
 80142aa:	1e5a      	subs	r2, r3, #1
 80142ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80142b0:	bf88      	it	hi
 80142b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80142b6:	4627      	mov	r7, r4
 80142b8:	bf82      	ittt	hi
 80142ba:	eb03 0905 	addhi.w	r9, r3, r5
 80142be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80142c2:	60a3      	strhi	r3, [r4, #8]
 80142c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80142c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80142cc:	bf98      	it	ls
 80142ce:	f04f 0900 	movls.w	r9, #0
 80142d2:	6023      	str	r3, [r4, #0]
 80142d4:	463d      	mov	r5, r7
 80142d6:	f04f 0b00 	mov.w	fp, #0
 80142da:	6831      	ldr	r1, [r6, #0]
 80142dc:	ab03      	add	r3, sp, #12
 80142de:	7809      	ldrb	r1, [r1, #0]
 80142e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80142e4:	2202      	movs	r2, #2
 80142e6:	f7eb ffbb 	bl	8000260 <memchr>
 80142ea:	b328      	cbz	r0, 8014338 <_scanf_i+0xb8>
 80142ec:	f1bb 0f01 	cmp.w	fp, #1
 80142f0:	d159      	bne.n	80143a6 <_scanf_i+0x126>
 80142f2:	6862      	ldr	r2, [r4, #4]
 80142f4:	b92a      	cbnz	r2, 8014302 <_scanf_i+0x82>
 80142f6:	6822      	ldr	r2, [r4, #0]
 80142f8:	2308      	movs	r3, #8
 80142fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80142fe:	6063      	str	r3, [r4, #4]
 8014300:	6022      	str	r2, [r4, #0]
 8014302:	6822      	ldr	r2, [r4, #0]
 8014304:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8014308:	6022      	str	r2, [r4, #0]
 801430a:	68a2      	ldr	r2, [r4, #8]
 801430c:	1e51      	subs	r1, r2, #1
 801430e:	60a1      	str	r1, [r4, #8]
 8014310:	b192      	cbz	r2, 8014338 <_scanf_i+0xb8>
 8014312:	6832      	ldr	r2, [r6, #0]
 8014314:	1c51      	adds	r1, r2, #1
 8014316:	6031      	str	r1, [r6, #0]
 8014318:	7812      	ldrb	r2, [r2, #0]
 801431a:	f805 2b01 	strb.w	r2, [r5], #1
 801431e:	6872      	ldr	r2, [r6, #4]
 8014320:	3a01      	subs	r2, #1
 8014322:	2a00      	cmp	r2, #0
 8014324:	6072      	str	r2, [r6, #4]
 8014326:	dc07      	bgt.n	8014338 <_scanf_i+0xb8>
 8014328:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801432c:	4631      	mov	r1, r6
 801432e:	4650      	mov	r0, sl
 8014330:	4790      	blx	r2
 8014332:	2800      	cmp	r0, #0
 8014334:	f040 8085 	bne.w	8014442 <_scanf_i+0x1c2>
 8014338:	f10b 0b01 	add.w	fp, fp, #1
 801433c:	f1bb 0f03 	cmp.w	fp, #3
 8014340:	d1cb      	bne.n	80142da <_scanf_i+0x5a>
 8014342:	6863      	ldr	r3, [r4, #4]
 8014344:	b90b      	cbnz	r3, 801434a <_scanf_i+0xca>
 8014346:	230a      	movs	r3, #10
 8014348:	6063      	str	r3, [r4, #4]
 801434a:	6863      	ldr	r3, [r4, #4]
 801434c:	4945      	ldr	r1, [pc, #276]	; (8014464 <_scanf_i+0x1e4>)
 801434e:	6960      	ldr	r0, [r4, #20]
 8014350:	1ac9      	subs	r1, r1, r3
 8014352:	f000 f889 	bl	8014468 <__sccl>
 8014356:	f04f 0b00 	mov.w	fp, #0
 801435a:	68a3      	ldr	r3, [r4, #8]
 801435c:	6822      	ldr	r2, [r4, #0]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d03d      	beq.n	80143de <_scanf_i+0x15e>
 8014362:	6831      	ldr	r1, [r6, #0]
 8014364:	6960      	ldr	r0, [r4, #20]
 8014366:	f891 c000 	ldrb.w	ip, [r1]
 801436a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801436e:	2800      	cmp	r0, #0
 8014370:	d035      	beq.n	80143de <_scanf_i+0x15e>
 8014372:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8014376:	d124      	bne.n	80143c2 <_scanf_i+0x142>
 8014378:	0510      	lsls	r0, r2, #20
 801437a:	d522      	bpl.n	80143c2 <_scanf_i+0x142>
 801437c:	f10b 0b01 	add.w	fp, fp, #1
 8014380:	f1b9 0f00 	cmp.w	r9, #0
 8014384:	d003      	beq.n	801438e <_scanf_i+0x10e>
 8014386:	3301      	adds	r3, #1
 8014388:	f109 39ff 	add.w	r9, r9, #4294967295
 801438c:	60a3      	str	r3, [r4, #8]
 801438e:	6873      	ldr	r3, [r6, #4]
 8014390:	3b01      	subs	r3, #1
 8014392:	2b00      	cmp	r3, #0
 8014394:	6073      	str	r3, [r6, #4]
 8014396:	dd1b      	ble.n	80143d0 <_scanf_i+0x150>
 8014398:	6833      	ldr	r3, [r6, #0]
 801439a:	3301      	adds	r3, #1
 801439c:	6033      	str	r3, [r6, #0]
 801439e:	68a3      	ldr	r3, [r4, #8]
 80143a0:	3b01      	subs	r3, #1
 80143a2:	60a3      	str	r3, [r4, #8]
 80143a4:	e7d9      	b.n	801435a <_scanf_i+0xda>
 80143a6:	f1bb 0f02 	cmp.w	fp, #2
 80143aa:	d1ae      	bne.n	801430a <_scanf_i+0x8a>
 80143ac:	6822      	ldr	r2, [r4, #0]
 80143ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80143b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80143b6:	d1bf      	bne.n	8014338 <_scanf_i+0xb8>
 80143b8:	2310      	movs	r3, #16
 80143ba:	6063      	str	r3, [r4, #4]
 80143bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80143c0:	e7a2      	b.n	8014308 <_scanf_i+0x88>
 80143c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80143c6:	6022      	str	r2, [r4, #0]
 80143c8:	780b      	ldrb	r3, [r1, #0]
 80143ca:	f805 3b01 	strb.w	r3, [r5], #1
 80143ce:	e7de      	b.n	801438e <_scanf_i+0x10e>
 80143d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80143d4:	4631      	mov	r1, r6
 80143d6:	4650      	mov	r0, sl
 80143d8:	4798      	blx	r3
 80143da:	2800      	cmp	r0, #0
 80143dc:	d0df      	beq.n	801439e <_scanf_i+0x11e>
 80143de:	6823      	ldr	r3, [r4, #0]
 80143e0:	05d9      	lsls	r1, r3, #23
 80143e2:	d50d      	bpl.n	8014400 <_scanf_i+0x180>
 80143e4:	42bd      	cmp	r5, r7
 80143e6:	d909      	bls.n	80143fc <_scanf_i+0x17c>
 80143e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80143ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80143f0:	4632      	mov	r2, r6
 80143f2:	4650      	mov	r0, sl
 80143f4:	4798      	blx	r3
 80143f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80143fa:	464d      	mov	r5, r9
 80143fc:	42bd      	cmp	r5, r7
 80143fe:	d028      	beq.n	8014452 <_scanf_i+0x1d2>
 8014400:	6822      	ldr	r2, [r4, #0]
 8014402:	f012 0210 	ands.w	r2, r2, #16
 8014406:	d113      	bne.n	8014430 <_scanf_i+0x1b0>
 8014408:	702a      	strb	r2, [r5, #0]
 801440a:	6863      	ldr	r3, [r4, #4]
 801440c:	9e01      	ldr	r6, [sp, #4]
 801440e:	4639      	mov	r1, r7
 8014410:	4650      	mov	r0, sl
 8014412:	47b0      	blx	r6
 8014414:	f8d8 3000 	ldr.w	r3, [r8]
 8014418:	6821      	ldr	r1, [r4, #0]
 801441a:	1d1a      	adds	r2, r3, #4
 801441c:	f8c8 2000 	str.w	r2, [r8]
 8014420:	f011 0f20 	tst.w	r1, #32
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	d00f      	beq.n	8014448 <_scanf_i+0x1c8>
 8014428:	6018      	str	r0, [r3, #0]
 801442a:	68e3      	ldr	r3, [r4, #12]
 801442c:	3301      	adds	r3, #1
 801442e:	60e3      	str	r3, [r4, #12]
 8014430:	1bed      	subs	r5, r5, r7
 8014432:	44ab      	add	fp, r5
 8014434:	6925      	ldr	r5, [r4, #16]
 8014436:	445d      	add	r5, fp
 8014438:	6125      	str	r5, [r4, #16]
 801443a:	2000      	movs	r0, #0
 801443c:	b007      	add	sp, #28
 801443e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014442:	f04f 0b00 	mov.w	fp, #0
 8014446:	e7ca      	b.n	80143de <_scanf_i+0x15e>
 8014448:	07ca      	lsls	r2, r1, #31
 801444a:	bf4c      	ite	mi
 801444c:	8018      	strhmi	r0, [r3, #0]
 801444e:	6018      	strpl	r0, [r3, #0]
 8014450:	e7eb      	b.n	801442a <_scanf_i+0x1aa>
 8014452:	2001      	movs	r0, #1
 8014454:	e7f2      	b.n	801443c <_scanf_i+0x1bc>
 8014456:	bf00      	nop
 8014458:	08016538 	.word	0x08016538
 801445c:	080127e9 	.word	0x080127e9
 8014460:	080145e5 	.word	0x080145e5
 8014464:	080174c7 	.word	0x080174c7

08014468 <__sccl>:
 8014468:	b570      	push	{r4, r5, r6, lr}
 801446a:	780b      	ldrb	r3, [r1, #0]
 801446c:	4604      	mov	r4, r0
 801446e:	2b5e      	cmp	r3, #94	; 0x5e
 8014470:	bf0b      	itete	eq
 8014472:	784b      	ldrbeq	r3, [r1, #1]
 8014474:	1c48      	addne	r0, r1, #1
 8014476:	1c88      	addeq	r0, r1, #2
 8014478:	2200      	movne	r2, #0
 801447a:	bf08      	it	eq
 801447c:	2201      	moveq	r2, #1
 801447e:	1e61      	subs	r1, r4, #1
 8014480:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014484:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014488:	42a9      	cmp	r1, r5
 801448a:	d1fb      	bne.n	8014484 <__sccl+0x1c>
 801448c:	b90b      	cbnz	r3, 8014492 <__sccl+0x2a>
 801448e:	3801      	subs	r0, #1
 8014490:	bd70      	pop	{r4, r5, r6, pc}
 8014492:	f082 0101 	eor.w	r1, r2, #1
 8014496:	54e1      	strb	r1, [r4, r3]
 8014498:	1c42      	adds	r2, r0, #1
 801449a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801449e:	2d2d      	cmp	r5, #45	; 0x2d
 80144a0:	f102 36ff 	add.w	r6, r2, #4294967295
 80144a4:	4610      	mov	r0, r2
 80144a6:	d006      	beq.n	80144b6 <__sccl+0x4e>
 80144a8:	2d5d      	cmp	r5, #93	; 0x5d
 80144aa:	d0f1      	beq.n	8014490 <__sccl+0x28>
 80144ac:	b90d      	cbnz	r5, 80144b2 <__sccl+0x4a>
 80144ae:	4630      	mov	r0, r6
 80144b0:	e7ee      	b.n	8014490 <__sccl+0x28>
 80144b2:	462b      	mov	r3, r5
 80144b4:	e7ef      	b.n	8014496 <__sccl+0x2e>
 80144b6:	7816      	ldrb	r6, [r2, #0]
 80144b8:	2e5d      	cmp	r6, #93	; 0x5d
 80144ba:	d0fa      	beq.n	80144b2 <__sccl+0x4a>
 80144bc:	42b3      	cmp	r3, r6
 80144be:	dcf8      	bgt.n	80144b2 <__sccl+0x4a>
 80144c0:	4618      	mov	r0, r3
 80144c2:	3001      	adds	r0, #1
 80144c4:	4286      	cmp	r6, r0
 80144c6:	5421      	strb	r1, [r4, r0]
 80144c8:	dcfb      	bgt.n	80144c2 <__sccl+0x5a>
 80144ca:	43d8      	mvns	r0, r3
 80144cc:	4430      	add	r0, r6
 80144ce:	1c5d      	adds	r5, r3, #1
 80144d0:	42b3      	cmp	r3, r6
 80144d2:	bfa8      	it	ge
 80144d4:	2000      	movge	r0, #0
 80144d6:	182b      	adds	r3, r5, r0
 80144d8:	3202      	adds	r2, #2
 80144da:	e7de      	b.n	801449a <__sccl+0x32>

080144dc <_strtol_l.isra.0>:
 80144dc:	2b01      	cmp	r3, #1
 80144de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144e2:	d001      	beq.n	80144e8 <_strtol_l.isra.0+0xc>
 80144e4:	2b24      	cmp	r3, #36	; 0x24
 80144e6:	d906      	bls.n	80144f6 <_strtol_l.isra.0+0x1a>
 80144e8:	f7fc fbde 	bl	8010ca8 <__errno>
 80144ec:	2316      	movs	r3, #22
 80144ee:	6003      	str	r3, [r0, #0]
 80144f0:	2000      	movs	r0, #0
 80144f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144f6:	4f3a      	ldr	r7, [pc, #232]	; (80145e0 <_strtol_l.isra.0+0x104>)
 80144f8:	468e      	mov	lr, r1
 80144fa:	4676      	mov	r6, lr
 80144fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014500:	5de5      	ldrb	r5, [r4, r7]
 8014502:	f015 0508 	ands.w	r5, r5, #8
 8014506:	d1f8      	bne.n	80144fa <_strtol_l.isra.0+0x1e>
 8014508:	2c2d      	cmp	r4, #45	; 0x2d
 801450a:	d134      	bne.n	8014576 <_strtol_l.isra.0+0x9a>
 801450c:	f89e 4000 	ldrb.w	r4, [lr]
 8014510:	f04f 0801 	mov.w	r8, #1
 8014514:	f106 0e02 	add.w	lr, r6, #2
 8014518:	2b00      	cmp	r3, #0
 801451a:	d05c      	beq.n	80145d6 <_strtol_l.isra.0+0xfa>
 801451c:	2b10      	cmp	r3, #16
 801451e:	d10c      	bne.n	801453a <_strtol_l.isra.0+0x5e>
 8014520:	2c30      	cmp	r4, #48	; 0x30
 8014522:	d10a      	bne.n	801453a <_strtol_l.isra.0+0x5e>
 8014524:	f89e 4000 	ldrb.w	r4, [lr]
 8014528:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801452c:	2c58      	cmp	r4, #88	; 0x58
 801452e:	d14d      	bne.n	80145cc <_strtol_l.isra.0+0xf0>
 8014530:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8014534:	2310      	movs	r3, #16
 8014536:	f10e 0e02 	add.w	lr, lr, #2
 801453a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801453e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014542:	2600      	movs	r6, #0
 8014544:	fbbc f9f3 	udiv	r9, ip, r3
 8014548:	4635      	mov	r5, r6
 801454a:	fb03 ca19 	mls	sl, r3, r9, ip
 801454e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8014552:	2f09      	cmp	r7, #9
 8014554:	d818      	bhi.n	8014588 <_strtol_l.isra.0+0xac>
 8014556:	463c      	mov	r4, r7
 8014558:	42a3      	cmp	r3, r4
 801455a:	dd24      	ble.n	80145a6 <_strtol_l.isra.0+0xca>
 801455c:	2e00      	cmp	r6, #0
 801455e:	db1f      	blt.n	80145a0 <_strtol_l.isra.0+0xc4>
 8014560:	45a9      	cmp	r9, r5
 8014562:	d31d      	bcc.n	80145a0 <_strtol_l.isra.0+0xc4>
 8014564:	d101      	bne.n	801456a <_strtol_l.isra.0+0x8e>
 8014566:	45a2      	cmp	sl, r4
 8014568:	db1a      	blt.n	80145a0 <_strtol_l.isra.0+0xc4>
 801456a:	fb05 4503 	mla	r5, r5, r3, r4
 801456e:	2601      	movs	r6, #1
 8014570:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8014574:	e7eb      	b.n	801454e <_strtol_l.isra.0+0x72>
 8014576:	2c2b      	cmp	r4, #43	; 0x2b
 8014578:	bf08      	it	eq
 801457a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801457e:	46a8      	mov	r8, r5
 8014580:	bf08      	it	eq
 8014582:	f106 0e02 	addeq.w	lr, r6, #2
 8014586:	e7c7      	b.n	8014518 <_strtol_l.isra.0+0x3c>
 8014588:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801458c:	2f19      	cmp	r7, #25
 801458e:	d801      	bhi.n	8014594 <_strtol_l.isra.0+0xb8>
 8014590:	3c37      	subs	r4, #55	; 0x37
 8014592:	e7e1      	b.n	8014558 <_strtol_l.isra.0+0x7c>
 8014594:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8014598:	2f19      	cmp	r7, #25
 801459a:	d804      	bhi.n	80145a6 <_strtol_l.isra.0+0xca>
 801459c:	3c57      	subs	r4, #87	; 0x57
 801459e:	e7db      	b.n	8014558 <_strtol_l.isra.0+0x7c>
 80145a0:	f04f 36ff 	mov.w	r6, #4294967295
 80145a4:	e7e4      	b.n	8014570 <_strtol_l.isra.0+0x94>
 80145a6:	2e00      	cmp	r6, #0
 80145a8:	da05      	bge.n	80145b6 <_strtol_l.isra.0+0xda>
 80145aa:	2322      	movs	r3, #34	; 0x22
 80145ac:	6003      	str	r3, [r0, #0]
 80145ae:	4665      	mov	r5, ip
 80145b0:	b942      	cbnz	r2, 80145c4 <_strtol_l.isra.0+0xe8>
 80145b2:	4628      	mov	r0, r5
 80145b4:	e79d      	b.n	80144f2 <_strtol_l.isra.0+0x16>
 80145b6:	f1b8 0f00 	cmp.w	r8, #0
 80145ba:	d000      	beq.n	80145be <_strtol_l.isra.0+0xe2>
 80145bc:	426d      	negs	r5, r5
 80145be:	2a00      	cmp	r2, #0
 80145c0:	d0f7      	beq.n	80145b2 <_strtol_l.isra.0+0xd6>
 80145c2:	b10e      	cbz	r6, 80145c8 <_strtol_l.isra.0+0xec>
 80145c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80145c8:	6011      	str	r1, [r2, #0]
 80145ca:	e7f2      	b.n	80145b2 <_strtol_l.isra.0+0xd6>
 80145cc:	2430      	movs	r4, #48	; 0x30
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d1b3      	bne.n	801453a <_strtol_l.isra.0+0x5e>
 80145d2:	2308      	movs	r3, #8
 80145d4:	e7b1      	b.n	801453a <_strtol_l.isra.0+0x5e>
 80145d6:	2c30      	cmp	r4, #48	; 0x30
 80145d8:	d0a4      	beq.n	8014524 <_strtol_l.isra.0+0x48>
 80145da:	230a      	movs	r3, #10
 80145dc:	e7ad      	b.n	801453a <_strtol_l.isra.0+0x5e>
 80145de:	bf00      	nop
 80145e0:	08017371 	.word	0x08017371

080145e4 <_strtol_r>:
 80145e4:	f7ff bf7a 	b.w	80144dc <_strtol_l.isra.0>

080145e8 <__submore>:
 80145e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145ec:	460c      	mov	r4, r1
 80145ee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80145f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80145f4:	4299      	cmp	r1, r3
 80145f6:	d11d      	bne.n	8014634 <__submore+0x4c>
 80145f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80145fc:	f7fd f98a 	bl	8011914 <_malloc_r>
 8014600:	b918      	cbnz	r0, 801460a <__submore+0x22>
 8014602:	f04f 30ff 	mov.w	r0, #4294967295
 8014606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801460a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801460e:	63a3      	str	r3, [r4, #56]	; 0x38
 8014610:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014614:	6360      	str	r0, [r4, #52]	; 0x34
 8014616:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801461a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801461e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014622:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014626:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801462a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801462e:	6020      	str	r0, [r4, #0]
 8014630:	2000      	movs	r0, #0
 8014632:	e7e8      	b.n	8014606 <__submore+0x1e>
 8014634:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014636:	0077      	lsls	r7, r6, #1
 8014638:	463a      	mov	r2, r7
 801463a:	f7fe fe77 	bl	801332c <_realloc_r>
 801463e:	4605      	mov	r5, r0
 8014640:	2800      	cmp	r0, #0
 8014642:	d0de      	beq.n	8014602 <__submore+0x1a>
 8014644:	eb00 0806 	add.w	r8, r0, r6
 8014648:	4601      	mov	r1, r0
 801464a:	4632      	mov	r2, r6
 801464c:	4640      	mov	r0, r8
 801464e:	f7fd f8fb 	bl	8011848 <memcpy>
 8014652:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014656:	f8c4 8000 	str.w	r8, [r4]
 801465a:	e7e9      	b.n	8014630 <__submore+0x48>

0801465c <_gettimeofday>:
 801465c:	4b02      	ldr	r3, [pc, #8]	; (8014668 <_gettimeofday+0xc>)
 801465e:	2258      	movs	r2, #88	; 0x58
 8014660:	601a      	str	r2, [r3, #0]
 8014662:	f04f 30ff 	mov.w	r0, #4294967295
 8014666:	4770      	bx	lr
 8014668:	20000b64 	.word	0x20000b64

0801466c <_init>:
 801466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466e:	bf00      	nop
 8014670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014672:	bc08      	pop	{r3}
 8014674:	469e      	mov	lr, r3
 8014676:	4770      	bx	lr

08014678 <_fini>:
 8014678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801467a:	bf00      	nop
 801467c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801467e:	bc08      	pop	{r3}
 8014680:	469e      	mov	lr, r3
 8014682:	4770      	bx	lr
